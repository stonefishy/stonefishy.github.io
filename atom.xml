<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stonefishy Blog]]></title>
  <link href="https://stonefishy.github.io/atom.xml" rel="self"/>
  <link href="https://stonefishy.github.io/"/>
  <updated>2023-09-02T17:26:49+08:00</updated>
  <id>https://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Andrew Shi]]></name>
    <email><![CDATA[andrewsy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[什么是AWS EC2 Hibernation]]></title>
    <link href="https://stonefishy.github.io/blog/2022/04/08/shi-yao-shi-aws-ec2-hibernation/"/>
    <updated>2022-04-08T17:00:59+08:00</updated>
    <id>https://stonefishy.github.io/blog/2022/04/08/shi-yao-shi-aws-ec2-hibernation</id>
    <content type="html"><![CDATA[<p><code>EC2 Hibernation</code> 是 Amazon Elastic Compute Cloud (EC2) 服务的一个功能，它允许您将 EC2 实例从运行状态转换为休眠状态，然后再次唤醒它，而不会丢失实例的内存中的数据。这个功能非常适合那些需要保持应用程序状态或长时间运行进程的工作负载。
<img src="https://stonefishy.github.io/assets/images/aws/aws-ec2-hibernation-flow.png" alt="" />
这里详细说明 EC2 Hibernation 的<strong>工作原理</strong></p>

<!--more-->


<h3>工作原理</h3>

<p><strong>1.启用 Hibernation：</strong> 要使用 EC2 Hibernation，首先需要在 EC2 实例上启用它。这可以通过使用支持 Hibernation 的实例类型，并在启动时启用 Hibernation 选项来完成。并且EBS卷必须要开启加密。
<img src="https://stonefishy.github.io/assets/images/aws/aws-ec2-hibernation-enable.png" alt="" /></p>

<p><strong>2.创建 Hibernation 快照：</strong> 在启用 Hibernation 后，EC2 实例的内存状态将被定期保存到 Amazon Elastic Block Store (EBS) 卷上的 Hibernation 快照中。这确保了在实例休眠时不会丢失内存中的数据。</p>

<p><strong>3.休眠实例：</strong> 一旦 Hibernation 启用并创建了快照，您可以通过执行 hibernate 命令或使用 AWS 管理控制台将实例转换为休眠状态。在休眠期间，实例的状态和数据将保存在 EBS 卷上。</p>

<p><strong>4.唤醒实例：</strong> 当您希望恢复实例的运行状态时，只需执行唤醒命令或使用控制台，EC2 实例将从 Hibernation 快照中还原内存状态，并继续运行。</p>

<h3>使用场景</h3>

<p>EC2 Hibernation 可以应用于多种使用场景，包括但不限于：</p>

<p><strong>长时间运行的进程：</strong> 如果您的 EC2 实例运行有状态的应用程序或长时间运行的进程，您可以使用 Hibernation 将实例休眠，以节省计算成本，而无需中断应用程序。</p>

<p><strong>工作负载保持状态：</strong> 某些工作负载需要保持状态，例如内存中的会话数据或数据库连接。通过 Hibernation，您可以在需要时恢复工作负载，而无需重新创建状态。</p>

<p><strong>成本优化：</strong> 对于不需要全天候运行的工作负载，您可以使用 Hibernation 在闲置时降低成本，然后在需要时快速恢复。</p>

<p><strong>实例维护：</strong> 在 EC2 实例需要进行操作系统更新或其他维护操作时，可以使用 Hibernation 将实例休眠，然后在完成维护后唤醒它，以减少维护期间的停机时间。</p>

<p>==请注意==，<u>不是所有的 EC2 实例类型都支持 Hibernation</u>，您需要选择支持该功能的实例类型并启用它。此外，<u>使用 Hibernation 可能会产生额外的 EBS 存储费用，因为需要存储 Hibernation 快照</u>。所以，在使用 Hibernation 时，需要权衡成本和性能需求。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS EC2的主要特点和工作方式以及计费模式]]></title>
    <link href="https://stonefishy.github.io/blog/2022/03/02/aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi/"/>
    <updated>2022-03-02T11:28:07+08:00</updated>
    <id>https://stonefishy.github.io/blog/2022/03/02/aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi</id>
    <content type="html"><![CDATA[<p>Amazon Elastic Compute Cloud（Amazon EC2）是Amazon Web Services（AWS）提供的一项基于云的可伸缩性、弹性、安全性和监控的计算服务，它允许用户租用虚拟服务器（称为EC2实例）来运行应用程序。我们从主要特点，工作方式以及计价模式来介绍下EC2
<img src="https://stonefishy.github.io/assets/images/aws/aws-ec2-intro.png" alt="" /></p>

<!--more-->


<h3>主要特点</h3>

<p><strong>可伸缩性 (Scalability)</strong>
EC2 允许用户根据需要快速扩展或缩减实例数量。这种可伸缩性使您能够适应不断变化的工作负载，确保您的应用程序始终具备所需的计算资源。</p>

<p><strong>多样性的实例类型 (Diverse Instance Types)</strong>
AWS 提供多种不同类型的 EC2 实例，以满足各种计算需求。这些类型包括计算优化、内存优化、存储优化、GPU 实例等，每种类型都针对不同类型的工作负载进行了优化。</p>

<p><strong>弹性IP地址 (Elastic IP Addresses)</strong>
您可以分配弹性 IP 地址给 EC2 实例，确保即使实例停止和重新启动，IP 地址也能保持不变。这有助于确保应用程序的连通性。</p>

<p><strong>安全组和网络 ACL (Security Groups and Network ACLs)</strong>
EC2 允许您配置安全组和网络 ACL，以控制实例的入站和出站流量。这提供了一层网络安全性，以确保只有授权的流量可以访问实例。</p>

<p><strong>Amazon Machine Images (AMIs)</strong>
AMIs 是虚拟机镜像，包含了操作系统、应用程序和配置信息。您可以使用标准 AMIs 或创建自定义 AMIs 来启动 EC2 实例，从而简化部署。</p>

<p><strong>多个操作系统支持 (Multiple OS Support)</strong>
EC2 支持多种操作系统，包括各种 Linux 发行版、Windows Server 和其他操作系统。这使您可以选择适合您应用程序的操作系统。</p>

<p><strong>自动化和托管选项 (Automation and Managed Options)</strong>
EC2 实例可以与其他 AWS 服务集成，如 AWS Auto Scaling、Elastic Load Balancing 和 AWS Elastic Beanstalk，以实现自动化部署和托管。</p>

<p><strong>监控和警报 (Monitoring and Alerts)</strong>
EC2 实例集成了 Amazon CloudWatch，可监控实例的性能和状态，并配置警报以及自动响应性能问题。</p>

<p><strong>可靠性和容错性 (Reliability and Fault Tolerance)</strong>
EC2 提供高可用性和容错性，实例可以在不同的可用性区域和可用性域中运行，以确保服务的连续性。</p>

<p><strong>身份和访问管理 (Identity and Access Management)</strong>
EC2 实例可以与 AWS Identity and Access Management (IAM) 集成，以进行身份验证和授权，使您能够控制对实例和资源的访问权限。</p>

<p><strong>多种定价选项 (Pricing Options)</strong>
EC2 提供多种不同的定价选项，包括按需实例、预留实例、定期实例、Spot 实例等，以满足不同的预算和使用需求。</p>

<h3>工作方式：</h3>

<p><strong>选择实例类型</strong>
在使用 EC2 之前，您首先需要选择适合您工作负载需求的 EC2 实例类型。不同类型的实例提供不同的计算、内存、存储和网络性能。您可以根据您的需求来选择。</p>

<p><strong>启动实例</strong>
一旦选择了实例类型，您可以使用 Amazon Machine Image（AMI）启动 EC2 实例。AMI 是一个预配置的虚拟机镜像，它包含了操作系统、应用程序和配置信息。您可以选择 AWS 提供的标准 AMI，也可以创建自己的自定义 AMI。</p>

<p><strong>安全组和密钥对</strong>
在启动实例时，您可以选择一个或多个安全组，这些安全组定义了实例的入站和出站流量规则，以确保安全性。您还可以选择密钥对，以便安全地访问您的 EC2 实例。</p>

<p><strong>运行实例</strong>
一旦实例启动，它将在 AWS 的数据中心中的物理服务器上运行。您可以通过 SSH（对于 Linux 实例）或 RDP（对于 Windows 实例）等远程协议连接到实例。</p>

<p><strong>管理实例</strong>
一旦运行，您可以随时管理 EC2 实例。这包括启动、停止、重启、终止实例，以及更改实例的配置，如调整实例大小、添加存储卷等。</p>

<p><strong>存储和快照</strong>
EC2 实例通常附带 Elastic Block Store（EBS）卷，您可以使用这些卷来存储数据。您还可以创建 EBS 快照，以备份数据或复制数据到其他地方。</p>

<p><strong>监控和伸缩</strong>
AWS 提供了 Amazon CloudWatch，它可以用于监视 EC2 实例的性能指标，如 CPU 使用率、网络流量等。您可以设置警报以响应性能问题，并根据需要配置自动伸缩策略，以自动调整实例数量。</p>

<p><strong>安全性和身份验证</strong>
EC2 实例可以与 AWS Identity and Access Management（IAM）集成，以实现身份验证和授权。您可以为实例分配 IAM 角色，以便它们可以访问其他 AWS 服务或资源，而无需硬编码的凭据。</p>

<h3>计费模式</h3>

<p><strong>按需实例 (On-Demand Instances)</strong>
按需实例是一种灵活的计费方式，您只需为您实际使用的计算资源付费，没有长期合同或预付费。这意味着您可以随时启动或停止实例，只支付实际的运行时间。</p>

<p>适用于需要灵活性的工作负载，如开发和测试、临时工作负载、突发性工作负载。</p>

<p><strong>预留实例 (Reserved Instances)</strong>
预留实例是一种合同制度，您提前支付一定费用，获得对特定实例类型的一定时期内的折扣，通常为1年或3年。这通常比按需实例更经济。</p>

<p>适用于长期工作负载，可以预测的、稳定的使用情况，例如生产服务器。</p>

<p><strong>可用性区域保留实例 (Reserved Instances for Availability Zones)</strong>
这是预留实例的一种变种，允许您为特定的可用性区域（AZ）购买预留容量。这对于需要在特定区域内保留容量的应用程序非常有用。</p>

<p>适用于需要确保在特定可用性区域内拥有计算资源的工作负载。</p>

<p><strong>可调整实例 (Convertible Reserved Instances)</strong>
这是一种预留实例，允许在合同期内更改实例类型，以适应不同的工作负载需求。</p>

<p>适用于工作负载需求可能会变化的情况，但仍然希望获得折扣。</p>

<p><strong>定期实例 (Scheduled Instances)</strong>
定期实例允许您按预定的时间启动 EC2 实例。您可以在每天的特定时间、每周某个时间或其他预定时间启动实例。</p>

<p>适用于周期性的、预定的工作负载，如每天备份、批处理处理等。</p>

<p><strong>批量实例 (Spot Instances)</strong>
Spot 实例基于竞价定价模式，您可以设定愿意支付的价格，当市场价格低于您的出价时，您可以获得实例。但它们可能随时被终止。</p>

<p>适用于可以容忍实例随时中断的工作负载，如大规模数据分析和渲染任务。</p>

<p><strong>Dedicated Hosts（专用主机）</strong>
专用主机允许您在 AWS 的物理服务器上运行 EC2 实例，这些服务器专门为您的账户保留。这提供了硬件级别的隔离，适用于具有特殊合规性要求的工作负载。</p>

<p>适用于需要硬件隔离的工作负载，例如合规性要求非常高的应用程序，或者需要将许多实例部署到同一物理服务器上的场景。</p>

<p><strong>Dedicated Instances（专用实例）</strong>
专用实例是 EC2 实例，它们在共享的物理服务器上运行，但只与您的账户中的其他实例共享。这提供了实例级别的隔离。</p>

<p>适用于需要实例级别隔离的工作负载，但不需要物理主机级别的隔离的场景。</p>

<p><strong>Free Tier（免费层级）</strong>
AWS 提供了一定程度的免费使用，即免费层级，对于新用户以及AWS账户中的某些服务和资源，提供有限的免费额度，通常为12个月。这是用于学习、试验和小型项目的好方法，以降低成本。</p>

<p>适用于学习 AWS、开发和测试小型应用程序，或者初期的小规模项目。</p>

<p>这些计费模式为不同的使用情况提供了各种选择。您可以根据您的需求和预算来选择适合您的模式。请注意，AWS定期更新其价格和计费模式，因此建议查看官方文档以获取最新的信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS IAM原理以及如何使用]]></title>
    <link href="https://stonefishy.github.io/blog/2022/02/17/aws-iamyuan-li-yi-ji-ru-he-shi-yong/"/>
    <updated>2022-02-17T23:22:57+08:00</updated>
    <id>https://stonefishy.github.io/blog/2022/02/17/aws-iamyuan-li-yi-ji-ru-he-shi-yong</id>
    <content type="html"><![CDATA[<p>AWS Identity and Access Management（<code>IAM</code>）是Amazon Web Services（AWS）提供的身份和访问管理服务，用于安全地管理对AWS资源的访问权限。IAM使您能够精细控制用户、组、角色等实体对AWS服务和资源的访问权限，以确保安全性和合规性。</p>

<h3>IAM的原理</h3>

<p>IAM基于一些核心概念：</p>

<p><strong>用户（Users）：</strong> 代表实际的个人用户，可以分配安全凭证（如访问密钥、密码）来访问AWS资源。
<img src="https://stonefishy.github.io/assets/images/aws/aws-iam-users.png" alt="" /></p>

<!--more-->


<p><strong>组（Groups）：</strong> 用于将一组用户组合在一起，并将一组权限分配给该组，从而简化权限管理。
<img src="https://stonefishy.github.io/assets/images/aws/aws-iam-groups.png" alt="" /></p>

<p><strong>角色（Roles）：</strong> 类似于用户，但不是直接分配给人，而是分配给AWS资源（例如EC2实例）。角色可以用于临时授权。
<img src="https://stonefishy.github.io/assets/images/aws/aws-iam-roles.png" alt="" /></p>

<p><strong>权限策略（Permissions Policies）：</strong>
定义了用户、组或角色可以执行的特定操作的权限。AWS提供了许多预定义的权限策略，同时也可以创建自定义策略。
<img src="https://stonefishy.github.io/assets/images/aws/aws-iam-policies.png" alt="" /></p>

<h3>如何使用IAM</h3>

<p><strong>创建用户和组：</strong> 在IAM中，您可以创建用户，并将用户组合成组。然后，为用户分配安全凭证和权限。</p>

<p><strong>定义和分配权限：</strong> 您可以使用AWS提供的预定义权限策略，也可以创建自定义策略，然后将这些策略附加到用户、组或角色上，以控制他们对资源的访问。</p>

<p><strong>使用角色：</strong> 如果您的应用程序需要访问AWS服务，可以创建角色，并将这些角色附加到您的应用程序或服务中。这样，您可以避免将敏感的凭证嵌入到应用程序代码中。</p>

<p><strong>多因素认证（MFA）：</strong> 您可以启用多因素认证来增加账户的安全性，要求用户在登录时提供额外的身份验证信息。</p>

<p><strong>访问审计：</strong> IAM提供了日志记录功能，可记录用户在AWS资源上执行的操作，以便进行审计和安全分析。</p>

<h3>最佳实践</h3>

<p>在使用IAM时，建议采用以下最佳实践，例如：</p>

<p><strong>最小权限原则：</strong> 为用户和角色提供所需的最小权限，以减少潜在的安全风险。</p>

<p><strong>使用身份提供商：</strong> 将身份提供商（如企业目录）与IAM集成，以便集中管理用户和权限。</p>

<p><strong>定期审查权限：</strong> 定期审查用户、组和角色的权限，确保权限保持最新且合规。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[聊聊前端优化手段防抖]]></title>
    <link href="https://stonefishy.github.io/blog/2017/03/16/liao-liao-qian-duan-you-hua-shou-duan-fang-dou/"/>
    <updated>2017-03-16T16:29:09+08:00</updated>
    <id>https://stonefishy.github.io/blog/2017/03/16/liao-liao-qian-duan-you-hua-shou-duan-fang-dou</id>
    <content type="html"><![CDATA[<p>在前端开发中，<strong>防抖（Debouncing）</strong> 是一种常用的优化技术，用于处理频繁触发的事件，如浏览器窗口的resize、input输入等。<strong>防抖的目标是在事件被触发后，等待一段时间，只执行一次事件处理函数，以避免频繁的重复操作</strong>。</p>

<p><strong>防抖的原理</strong>很简单：当一个事件被触发时，立即设置一个定时器，在规定的时间内没有再次触发该事件时，执行事件处理函数。如果在定时器规定的时间内再次触发了事件，那么就清除前一个定时器，并重新设置新的定时器。这样，只有在事件停止触发一段时间后，才会执行事件处理函数。</p>

<p>以下是一个防抖的基本实现示例（使用 JavaScript）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">timer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span> <span class="c1">// 每次执行时，清除之前的定时器</span>
</span><span class='line'>        <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="c1">//设置新的定时器</span>
</span><span class='line'>            <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">debounceFunction</span> <span class="o">=</span> <span class="nx">debounce</span><span class="p">((</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Debounce function called&quot;</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;resize&#39;</span><span class="p">,</span> <span class="nx">debounceFunction</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>在上面的示例中，debounce 函数接受两个参数：<strong>要执行的事件处理函数</strong>和<strong>延迟时间</strong>（规定的等待时间）。在事件被触发时，debounce 返回一个新的函数，该函数会设置一个定时器来等待延迟时间，然后执行事件处理函数。</p>

<p>防抖的实现可以根据需要进行适当的调整，例如增加立即执行选项，即在事件触发时立即执行一次事件处理函数，然后再进入防抖模式。这样可以在事件触发的瞬间即时响应，同时仍然保留了后续的防抖效果。</p>

<p>现在在上面防抖的基础上多增加一个参数，<strong>immediate</strong>， 参数值为true时，函数立即执行，为false时延时执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">function</span> <span class="nx">debounce</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">delay</span><span class="p">,</span> <span class="nx">immediate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">timer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">immediate</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// immediate为true，立即执行</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">timer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span> <span class="c1">// 立即执行一次事件处理函数</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">timer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// delay时间到后，将计时器设置null，下一次立即执行</span>
</span><span class='line'>        <span class="p">},</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>    <span class="c1">//immediate为false，延时执行</span>
</span><span class='line'>        <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span> <span class="c1">// 在延迟时间后执行事件处理函数</span>
</span><span class='line'>        <span class="p">},</span> <span class="nx">delay</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用防抖处理事件，第一次触发立即执行，之后每次触发等待300毫秒后执行</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">debouncedFunction</span> <span class="o">=</span> <span class="nx">debounce</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Debounce function called.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">500</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 触发事件</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;resize&quot;</span><span class="p">,</span> <span class="nx">debouncedFunction</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>总的来说，防抖是一种有效的优化手段，可以帮助减少频繁触发的事件造成的重复操作，提升前端应用的性能和用户体验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个免费高质量的图片分享平台]]></title>
    <link href="https://stonefishy.github.io/blog/2017/02/23/yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai/"/>
    <updated>2017-02-23T18:02:19+08:00</updated>
    <id>https://stonefishy.github.io/blog/2017/02/23/yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai</id>
    <content type="html"><![CDATA[<p>很多时候在写文章或者制作PPT时需要用到一些图片资源，最近刚好发现了一个实用的高分辨率的免费资源平台Unspash, 跟大家分享一下。
<img src="https://stonefishy.github.io/assets/images/ziyuan/laptop-1.png" alt="" />
<a href="https://unsplash.com" title="免费高质量的图片分享平台">Unsplash.com</a> 是一个知名的免费高质量图片分享平台，提供各种类型的高分辨率摄影图片供用户免费下载和使用。这些图片可以用于个人、商业、创意和学术项目，包括网站、博客、社交媒体、演示文稿等。</p>

<!-- more -->


<p>这个平台的特点包括：</p>

<p><strong>高质量图片：</strong> Unsplash 上的图片质量往往很高，包括风景、人物、食物、建筑等多种主题。这些图片通常由专业摄影师拍摄，因此在设计和内容创作中具有很大的价值。
<img src="https://stonefishy.github.io/assets/images/ziyuan/fengjing-1.png" alt="" /></p>

<p><strong>免费使用：</strong> Unsplash 的图片都是免费提供的，无需付费或订阅。用户可以自由下载、编辑和使用这些图片，而不需要担心版权问题。
<img src="https://stonefishy.github.io/assets/images/ziyuan/coding-1.png" alt="" /></p>

<p><strong>简单的许可：</strong> Unsplash 使用的是创作共用许可（Creative Commons Zero License），这意味着用户可以自由使用这些图片，甚至可以用于商业目的，无需给予作者署名。
<img src="https://stonefishy.github.io/assets/images/ziyuan/license-1.png" alt="" /></p>

<p><strong>搜索和浏览功能：</strong> Unsplash 网站提供搜索功能和浏览不同主题的图片集合，帮助用户快速找到符合自己需求的图片。
<img src="https://stonefishy.github.io/assets/images/ziyuan/search-1.png" alt="" /></p>

<p><strong>社区和创作者：</strong> Unsplash 构建了一个活跃的摄影师社区，用户可以查看摄影师的个人主页，了解他们的作品，并选择关注自己喜欢的创作者。
<img src="https://stonefishy.github.io/assets/images/ziyuan/community-1.png" alt="" /></p>

<p>总的来说，Unsplash.com 是一个受欢迎的图片资源平台，适用于需要高质量图片的个人和商业项目。真的是一个很棒的资源平台！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最短子数组之和]]></title>
    <link href="https://stonefishy.github.io/blog/2016/03/01/minimum-size-subarray-sum/"/>
    <updated>2016-03-01T17:18:50+08:00</updated>
    <id>https://stonefishy.github.io/blog/2016/03/01/minimum-size-subarray-sum</id>
    <content type="html"><![CDATA[<p>一个常见的最短子数组算法题是 &ldquo;Minimum Size Subarray Sum&#8221;。在这个问题中，给定一个正整数数组和一个目标值，要找到数组中一个连续子数组，使得子数组的元素和大于等于目标值，并且子数组的长度最小。</p>

<p>例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>输入： 
</span><span class='line'>数组: [5, 3, 4, 2, 8, 5];  目标值: 10
</span><span class='line'>输出：
</span><span class='line'>[2, 8]</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>输入： 
</span><span class='line'>数组: [5, 3, 4, 2, 8, 5];  目标值: 28
</span><span class='line'>输出：
</span><span class='line'>[]</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>输入： 
</span><span class='line'>数组: [5, 3, 4, 2, 8, 5];  目标值: 4
</span><span class='line'>输出：
</span><span class='line'>[5]</span></code></pre></td></tr></table></div></figure>


<p>这个问题可以使用双指针来解决窗口的滑动问题，核心代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">minSizeSubArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">//定义两个指针</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">minLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 最小子数组的左边界</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">minLen</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> <span class="c1">// 最小子数组的长度</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>    <span class="c1">//子数组元素和</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">p2</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">p2</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">p2</span><span class="o">];</span> <span class="c1">// 将右指针的元素加入子数组</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">sum</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 如果子数组的和大于等于目标值</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">curLen</span> <span class="o">=</span> <span class="n">p2</span> <span class="o">-</span> <span class="n">p1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 获取当前子数组长度</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">minLen</span> <span class="o">&gt;</span> <span class="n">curLen</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 如果子数组长度比上次还更小</span>
</span><span class='line'>                <span class="n">minLen</span> <span class="o">=</span> <span class="n">curLen</span><span class="o">;</span> <span class="c1">// 更新子数组最小长度</span>
</span><span class='line'>                <span class="n">minLeft</span> <span class="o">=</span> <span class="n">p1</span><span class="o">;</span>   <span class="c1">// 更新子数组的左边界</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">sum</span> <span class="o">-=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">p1</span><span class="o">];</span> <span class="c1">// 将左指针的元素从子数组中移除</span>
</span><span class='line'>            <span class="n">p1</span><span class="o">++;</span>   <span class="c1">//移动左指针，缩小子数组</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">minLen</span> <span class="o">==</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>  <span class="c1">// 没有找到匹配的子数组</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//根据子数组的左边界以及长度，返回子数组</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">minLen</span><span class="o">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">minLen</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">minLeft</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上述代码中，我们使用了两个指针 p1 和 p2，分别表示子数组的左右边界。我们在数组上使用滑动窗口来寻找满足条件的最短子数组。当子数组的和大于等于目标值时，我们移动左指针，并更新最小长度。如果发现有更小的数组长度，则更新最小数组长度以及数组的左边界值，当子数组的和不足以满足条件时，我们移动右指针，并继续扩展子数组。</p>

<p>测试结果如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
</span><span class='line'>    <span class="n">printArray</span><span class="o">(</span><span class="n">minSizeSubArray</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span> <span class="c1">// [2, 8]</span>
</span><span class='line'>    <span class="n">printArray</span><span class="o">(</span><span class="n">minSizeSubArray</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="mi">28</span><span class="o">));</span> <span class="c1">// []</span>
</span><span class='line'>    <span class="n">printArray</span><span class="o">(</span><span class="n">minSizeSubArray</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span> <span class="c1">// [5]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;[&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">append</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">?</span> <span class="s">&quot;&quot;</span> <span class="o">:</span> <span class="s">&quot;, &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双指针算法之两数之和]]></title>
    <link href="https://stonefishy.github.io/blog/2016/02/05/shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he/"/>
    <updated>2016-02-05T09:51:39+08:00</updated>
    <id>https://stonefishy.github.io/blog/2016/02/05/shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he</id>
    <content type="html"><![CDATA[<p>在上一篇中，我们讲到了双指针算法的几种使用场景，这里具体举例，以经典的两数之和为例。</p>

<p>给定一个有序数字的数组和一个目标值，在有序数组中找到两个数字之和等于该目标值，返回包含两个数字的数组，如果没有找到返回包含两个-1值的数组。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>找到的情况
</span><span class='line'>输入： 
</span><span class='line'>有序数组: [2, 4, 5, 6, 12];  目标值: 10
</span><span class='line'>输出：
</span><span class='line'>[4, 6]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>找不到的情况
</span><span class='line'>输入： 
</span><span class='line'>有序数组: [2, 4, 5, 6, 12];  目标值: 3
</span><span class='line'>输出：
</span><span class='line'>[-1, -1]</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>直接代码走起，下面以Java代码为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findNumbers</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// 左指针初始位置</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">pRight</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 右指针初始位置</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">pLeft</span> <span class="o">&lt;</span> <span class="n">pRight</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">pLeft</span><span class="o">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="o">[</span><span class="n">pRight</span><span class="o">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">==</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">numbers</span><span class="o">[</span><span class="n">pLeft</span><span class="o">],</span> <span class="n">numbers</span><span class="o">[</span><span class="n">pRight</span><span class="o">]};</span> <span class="c1">// 返回匹配的元素</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">pLeft</span><span class="o">++;</span> <span class="c1">// 和小于目标值，左指针右移</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">pRight</span><span class="o">--;</span> <span class="c1">// 和大于目标值，右指针左移</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">results</span> <span class="o">=</span> <span class="n">findNumbers</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">12</span><span class="o">},</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;[%d, %d]%n&quot;</span><span class="o">,</span> <span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">results</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span> <span class="c1">// 输出 [4, 6]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">results</span> <span class="o">=</span> <span class="n">findNumbers</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">12</span><span class="o">},</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;[%d, %d]%n&quot;</span><span class="o">,</span> <span class="n">results</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">results</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span> <span class="c1">// 输出 [-1, -1]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上述代码中，我们使用了两个指针 pLeft 和 pRight 分别指向有序数组的两端。然后，我们计算 numbers[pLeft] 和 numbers[pRight] 的和，并与目标值进行比较。根据和与目标值的大小关系，我们移动左指针或右指针，直到找到符合条件的元素对，或者指针重合没有找到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双指针算法]]></title>
    <link href="https://stonefishy.github.io/blog/2016/01/25/shuang-zhi-zhen-suan-fa/"/>
    <updated>2016-01-25T09:09:24+08:00</updated>
    <id>https://stonefishy.github.io/blog/2016/01/25/shuang-zhi-zhen-suan-fa</id>
    <content type="html"><![CDATA[<p>双指针算法（Two Pointer Algorithm）是一种常见的算法技巧，通常用于数组、链表等数据结构中解决一些问题。双指针算法的核心思想是使用两个指针在不同的位置上移动，以达到解决问题的目的。这两个指针可以朝着相同的方向移动，也可以朝着相反的方向移动，视问题而定。</p>

<p>双指针算法的常见应用场景和实现方法：</p>

<p><strong>对撞指针（Two Sum、Three Sum）：</strong> 在有序数组中查找满足特定条件的元素对或元素组合。使用两个指针分别从数组的两端开始，向中间逼近，根据元素之间的大小关系，调整指针的位置。</p>

<p><strong>快慢指针（环形链表判断、链表中间节点）：</strong> 在链表中判断是否存在环或找到链表的中间节点。使用两个指针，一个快指针每次移动两步，一个慢指针每次移动一步，根据指针的移动速度判断链表的性质。</p>

<!-- more -->


<p><strong>滑动窗口（子数组问题、字符串问题）：</strong> 用于解决一些窗口内的问题，例如找到最短子数组、找到最长连续子数组等。使用两个指针表示窗口的左右边界，移动窗口进行计算。</p>

<p><strong>夹逼法（容器装水问题、三数最接近问题）：</strong> 在一维数组中寻找满足特定条件的元素对。使用两个指针从两端开始，逐渐向中间夹逼，根据元素之间的大小关系，调整指针的位置。</p>

<p><strong>多指针法（四数之和问题、删除排序数组中的重复项）：</strong> 在一维或二维数组中寻找满足特定条件的元素组合。使用多个指针在数组中移动，根据问题需要，进行相应的指针调整。</p>

<p>双指针算法的优势在于它可以在O(N)的时间复杂度内解决一些复杂的问题，而不需要使用额外的空间。它在数组和链表等数据结构上都有广泛的应用，常用于解决数组遍历、查找、排序和操作等问题。这种算法可以帮助简化问题的解决过程，提高代码效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix Gem FilePermissionError]]></title>
    <link href="https://stonefishy.github.io/blog/2016/01/12/how-to-fix-gem-filepermissionerror/"/>
    <updated>2016-01-12T23:31:35+08:00</updated>
    <id>https://stonefishy.github.io/blog/2016/01/12/how-to-fix-gem-filepermissionerror</id>
    <content type="html"><![CDATA[<p>Sometimes we face the erorr &ldquo;Gem::FilePermissionError: You don&rsquo;t have write permissions for the /Library/Ruby/Gems/x.x.x directory&rdquo;. This error message indicates that the user doesn&rsquo;t have the necessary permissions to install Ruby gems system-wide. This is because the system Ruby installation requires administrative privileges to modify its gem directory.</p>

<p>To resolve this issue, there is a few options:</p>

<h3>1. Use a Ruby Version Manager (Recommended)</h3>

<p>Instead of installing gems globally, consider using a Ruby version manager like <code>rbenv</code> or <code>RVM</code>. These tools allow you to manage multiple Ruby versions and gems without requiring administrative permissions.</p>

<h4>Using rbenv</h4>

<pre><code>1. Install rbenv if you haven't already.
2. Install the desired version of Ruby using rbenv.
3. Install gems without needing elevated permissions.
</code></pre>

<h4>Using RVM</h4>

<pre><code>1. Install RVM if you haven't already.
2. Install the desired version of Ruby using RVM.
3. Use the installed Ruby version without needing elevated permissions to install gems.
</code></pre>

<!-- more -->


<h3>2. Install Gems Locally</h3>

<p>If you want to install gems for the system Ruby without using a version manager, you&rsquo;ll need administrative privileges. You can use the sudo command to install gems as the superuser:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem install gem_name
</span></code></pre></td></tr></table></div></figure>


<p>However, keep in mind that modifying the system Ruby environment might affect other applications, and it&rsquo;s generally recommended to use a version manager to manage Ruby environments.</p>

<h3>3. Use &ndash;user-install Option</h3>

<p>If you want to install gems locally without administrative privileges, you can use the <strong>&ndash;user-install</strong> option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install gem_name --user-install
</span></code></pre></td></tr></table></div></figure>


<p>This installs the gem in your user&rsquo;s home directory, avoiding the need for system-wide modifications.</p>

<h3>4. Install to Custom Directory</h3>

<p>You can configure gems to be installed in a specific directory where you have write permissions. This involves configuring the <strong>GEM_HOME</strong> and <strong>GEM_PATH</strong> environment variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">GEM_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/gems
</span><span class='line'><span class="nb">export </span><span class="nv">GEM_PATH</span><span class="o">=</span><span class="nv">$GEM_HOME</span>:/path/to/system/gems
</span><span class='line'>gem install gem_name
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to adjust the paths according to your preferences.</p>

<p>In general, using a Ruby version manager like <strong>rbenv</strong> or <strong>RVM</strong> is recommended, as it provides a more flexible and isolated way to manage Ruby versions and gems without affecting system-wide configurations or requiring administrative permissions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(18)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/12/28/ruby-practice-18/"/>
    <updated>2015-12-28T10:59:48+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/12/28/ruby-practice-18</id>
    <content type="html"><![CDATA[<h4>IO</h4>

<p>Ruby程序在启动后会预先分配3个<strong>IO</strong>对象:  <br/>
标准输入 - 预定义常量(<strong>STDIN</strong>), 全局变量(<strong>\$stdin</strong>)      <br/>
标准输出 - 预定义常量(<strong>STDOUT</strong>), 全局变量(<strong>\$stdout</strong>) <br/>
标准错误输出 - 预定义常量(<strong>STDERR</strong>), 全局变量(<strong>\$stderr</strong>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;output something from $stdout</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="no">STDERR</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;output something from $stderr</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>IO对象是否与控制台关联，我们可以通过<strong>tty?</strong>方法来判断。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">tty?</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;stdin is a tty&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;stdin is not a tty&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h5>文件操作</h5>

<p>通过File.open方法或open方法打开文件并获取新的IO对象，</p>

<pre><code>io = File.open(file, mode)
io = open(file, mode)
</code></pre>

<p>mode为文件的读写方法，缺省情况下为只读模式&reg;.</p>

<p>r  - 只读模式  <br/>
r+ - 读写模式 <br/>
w  - 只写模式，如果文件不存在则创建新文件，如果文件存在，则清空文件 <br/>
w+ - 读写模式，其余同w  <br/>
a  - 追加模式，文件不存在则创建新文件  <br/>
a+ - 读取、追加模式，文件不存在则创建新文件</p>

<p>io.<strong>close</strong>
使用<strong>close</strong>方法关闭已打开的文件。File.open方法使用块，则文件会在使用完毕后自动关闭，io变量会被作为块变量传递给块。并且使用io.closed?方法可以检查是否关闭。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;tty.rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<strong>File.read</strong>可以一次性读取文件的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;tty.rb&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>基本输入</h5>

<p>io.<strong>gets</strong>(rs) <br/>
io.<strong>each</strong>(rs) <br/>
io.<strong>each_line</strong>(rs) <br/>
io.<strong>readlines</strong>(rs) <br/>
从IO类的对象中读取一行数据，用参数<strong>rs</strong>的字符串分行，缺省模式下为换行符。</p>

<p>使用<strong>eof?</strong>可以检查输入是否已经完毕。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">io</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;tty.rb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>
</span><span class='line'>  <span class="n">line</span><span class="o">.</span><span class="n">chomp!</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">eof?</span>     <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">close</span>      <span class="c1">#=&gt; close file</span>
</span><span class='line'><span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">closed?</span>   <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>用<strong>readlines</strong>方法可以一次性读取所有数据，并返回将每行数据作为元素封装的数组.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">io</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;tty.rb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'><span class="n">io</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="n">line</span><span class="o">.</span><span class="n">chomp!</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>io.<strong>lineno</strong> <br/>
使用gets方法，each_line方法逐行读取文件时，io会自动记录读取的行数，可以通过<strong>io.lineno</strong>来获取当前行数。</p>

<p>io.<strong>each_char</strong>  <br/>
逐个字符读取io对象中的数据,并启动块。</p>

<p>io.<strong>each_byte</strong>
逐个字节读取io对象中的数据，并启动块。</p>

<p>io.<strong>getc</strong>  <br/>
只读取io对象中的一个字符。
io.<strong>ungetc(ch)</strong>  <br/>
将参数ch指定的字符退回到io得缓冲流中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;hello.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;Hello Ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;hello.txt&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">getc</span>       <span class="c1">#=&gt; H</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">ungetc</span><span class="p">(</span><span class="s1">&#39;H&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>       <span class="c1">#=&gt; Hello Ruby</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;hello.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>io.<strong>getbyte</strong>, io.<strong>ungetbyte</strong>的使用方法同上，不同之处在于此处是字节。</p>

<p>io.<strong>read</strong>(size)  <br/>
读取参数size指定大小的数据，如果没指定，则一次性读取所有数据。</p>

<h5>输出操作</h5>

<p>io.<strong>puts</strong>(str0, str1, &hellip;)  <br/>
指定多个字符串时，会在每个字符串后面添加换行符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;hi&quot;</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="s2">&quot;hey&quot;</span>          <span class="c1">#=&gt; hi\nhello\nhey\n</span>
</span></code></pre></td></tr></table></div></figure>


<p>io.<strong>putc</strong>(ch)  <br/>
输出指定参数ch字符，如果参数为字符串，则输出首个字符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">putc</span><span class="p">(</span><span class="s1">&#39;H&#39;</span><span class="p">)</span>       <span class="c1">#=&gt; H</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">putc</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>   <span class="c1">#=&gt; H</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">putc</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>io.<strong>print</strong>(str0, str1, &hellip;) <br/>
输出参数指定的字符串，不会在每个字符串后面追加换行符</p>

<p>io.<strong>printf</strong>(fmt, arg0, arg1, &hellip;)  <br/>
按照指定格式输出字符串。</p>

<p>io.<strong>write</strong>(str)  <br/>
输出参数str指定的字符串，方法返回值为输出的字节数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">size</span> <span class="o">=</span> <span class="vg">$stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">)</span>        <span class="c1">#=&gt; Hello</span>
</span><span class='line'><span class="nb">p</span> <span class="n">size</span>         <span class="c1">#=&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<h5>文件指针</h5>

<p>用文件指针或者当前文件偏移量来表示IO对象指向文件的位置。</p>

<p>io.<strong>pos</strong> <br/>
io.<strong>pos</strong>=position  <br/>
通过<strong>pos</strong>方法获取文件指针位置，改变文件指针使用<strong>pos=</strong>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;hello.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;Hello Ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;hello.txt&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>      <span class="c1">#=&gt; Hello</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>         <span class="c1">#=&gt; Hello Ruby</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>io.<strong>seek</strong>(offset, whence) <br/>
offset为指定位置的整数，whence为指定offset如何移动， 以下为whence的值:   <br/>
IO::SEEK_SET - 将文件指针移动到指定offset指定的位置  <br/>
IO::SEEK_CUR - 将offset视为相对于当前位置的偏移位置来移动文件指针  <br/>
IO::SEEK_END - 将offset视为相对于文件末尾的偏移位置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;hello.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;Hello Ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;hello.txt&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>      <span class="c1">#=&gt; Hello</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="no">IO</span><span class="o">::</span><span class="no">SEEK_CUR</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>         <span class="c1">#=&gt; Hello Ruby</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="no">IO</span><span class="o">::</span><span class="no">SEEK_SET</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>         <span class="c1">#=&gt; Hello Ruby</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span> <span class="no">IO</span><span class="o">::</span><span class="no">SEEK_END</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>         <span class="c1">#=&gt; Ruby</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>io.<strong>rewind</strong> <br/>
将文件指针重置到文件开始处，结果同以下两个操作:</p>

<pre><code>io.pos = 0   
io.seek(0, IO::SEEK_SET)
</code></pre>

<p>io.<strong>truncate</strong>(size)  <br/>
按照参数size指定的大小截断文件。</p>

<p><em>注，新的IO对象默认为文本模式，可以通过io.<strong>binmode</strong>将其转为二进制模式</em></p>

<h5>缓冲</h5>

<p>IO对象在输出数据时，结果并不一定会马上输出出来，程序会在内部开辟一个缓冲空间来缓存输出，当空间满的时候再输出来。但是标准错误输出不会使用缓冲，如果有错误信息，则立刻输出。所以标准错误输出一般用于输出警告、错误之类的信息，能够立刻输出数据</p>

<p>io.<strong>flush</strong>  <br/>
强制输出缓冲中的数据。</p>

<p>io.<strong>sync</strong>  <br/>
io.<strong>sync</strong>=state <br/>
通过io.sync = true, 程序写入缓冲时flush方法会被自动调用。</p>

<h5>与命令行交互</h5>

<p>IO.<strong>popen</strong>(command, mode) <br/>
command为相关的命令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pattern</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="sr">/.gz$/</span> <span class="o">=~</span> <span class="n">filename</span>
</span><span class='line'>  <span class="n">file</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s2">&quot;gunzip -c </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>open</strong>(&ldquo;|command&rdquo;, mode) <br/>
将带有管道符号的命令传递给open方法的效果与使用IO.popen方法是一样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">filename</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;|gunzip -c </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">io</span><span class="o">|</span>
</span><span class='line'>  <span class="n">io</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(17)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/12/17/ruby-practice-17/"/>
    <updated>2015-12-17T09:46:29+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/12/17/ruby-practice-17</id>
    <content type="html"><![CDATA[<h4>正则表达式(Regexp)</h4>

<p>Ruby中的正则表达式用<strong>Regexp</strong>类来表示，正则表达式描述的是一种模式，该模式用于匹配字符串。</p>

<h5>创建</h5>

<p>其创建方式有多种：
1.使用<strong>/ /</strong> 把字符串括起来，可以简单地创建出正则表达式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg1</span> <span class="o">=</span> <span class="sr">/Ruby/</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg1</span><span class="o">.</span><span class="n">class</span>       <span class="c1">#=&gt; Regexp</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>2.使用<strong>Regexp.new(&ldquo;字符串&rdquo;)</strong>创建正则表达式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg</span><span class="o">.</span><span class="n">class</span>       <span class="c1">#=&gt; Regexp</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.使用<strong>%r</strong>创建正则表达式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">%r(Ruby)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg</span><span class="o">.</span><span class="n">class</span>       <span class="c1">#=&gt; Regexp</span>
</span><span class='line'>
</span><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">%r&lt;Ruby&gt;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg</span><span class="o">.</span><span class="n">class</span>       <span class="c1">#=&gt; Regexp</span>
</span><span class='line'>
</span><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">%r|Ruby|</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg</span><span class="o">.</span><span class="n">class</span>       <span class="c1">#=&gt; Regexp</span>
</span><span class='line'>
</span><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">%r!Ruby!</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg</span><span class="o">.</span><span class="n">class</span>       <span class="c1">#=&gt; Regexp</span>
</span></code></pre></td></tr></table></div></figure>


<h5>匹配</h5>

<p>Ruby的正则表达式匹配使用<strong>=~</strong>符号，如果匹配成功返回匹配字符串的位置，否则返回nil。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">/R..y/</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;regexp of Ruby&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">matched</span> <span class="o">=</span> <span class="n">reg</span> <span class="o">=~</span> <span class="n">str</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">matched</span>        <span class="c1">#=&gt; 10</span>
</span><span class='line'>
</span><span class='line'><span class="n">unmatched</span> <span class="o">=</span> <span class="n">reg</span> <span class="o">=~</span> <span class="s2">&quot;test&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">unmatched</span>         <span class="c1">#=&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">matched</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;matched&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;unmatched&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>此处并不过多的介绍正则表达式的语法规则，具体详细语法请参见<a href="http://regexlib.com/CheatSheet.aspx">http://regexlib.com/CheatSheet.aspx</a></p>

<h5>转义</h5>

<p>对特殊字符的转义方式有两种，使用<strong>\</strong>字符和使用<strong>Regexp#quote</strong>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#using \ symbol</span>
</span><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">/ruby\*regexp/</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg</span> <span class="o">=~</span> <span class="s2">&quot;ruby*regexp&quot;</span>     <span class="c1">#=&gt; 0</span>
</span><span class='line'><span class="nb">p</span> <span class="n">reg</span> <span class="o">=~</span> <span class="s2">&quot;rubyregexp&quot;</span>          <span class="c1">#=&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#using Regexp#quote method</span>
</span><span class='line'><span class="n">reg1</span> <span class="o">=</span> <span class="sr">%r(ruby*regexp)</span>
</span><span class='line'><span class="n">reg2</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Regexp</span><span class="o">.</span><span class="n">quote</span><span class="p">(</span><span class="s2">&quot;ruby*regexp&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;ruby*regexp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">reg1</span> <span class="o">=~</span> <span class="n">str</span>         <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="nb">p</span> <span class="n">reg2</span> <span class="o">=~</span> <span class="n">str</span>         <span class="c1">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<h5>选项</h5>

<p>在正则表达式的后面添加特定的字符如<strong>i</strong>, <strong>x</strong>, <strong>m</strong>等时，匹配后的规则会有点变化</p>

<p><strong>i</strong>   Regexp::IGNORECASE  忽略字符串大小写  <br/>
<strong>x</strong>   Regexp::EXTENDED        忽略字符串中的空白字符   <br/>
<strong>m</strong>   Regexp::MULTILINE   匹配多行字符串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#using i optional symbol to ignore the cap</span>
</span><span class='line'><span class="n">reg1</span> <span class="o">=</span> <span class="sr">/test String/i</span>
</span><span class='line'><span class="n">reg2</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;test string&quot;</span><span class="p">,</span> <span class="no">Regexp</span><span class="o">::</span><span class="no">IGNORECASE</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg1</span> <span class="o">=~</span> <span class="s2">&quot;test string&quot;</span>     <span class="c1">#=&gt; 0</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg1</span> <span class="o">=~</span> <span class="s2">&quot;test string&quot;</span>     <span class="c1">#=&gt; 0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#using x optional symbol to ignore the white space symbol</span>
</span><span class='line'><span class="n">reg1</span> <span class="o">=</span> <span class="sr">/test string/x</span>
</span><span class='line'><span class="n">reg2</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;test string&quot;</span><span class="p">,</span> <span class="no">Regexp</span><span class="o">::</span><span class="no">EXTENDED</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg1</span> <span class="o">=~</span> <span class="s2">&quot;teststring&quot;</span>      <span class="c1">#=&gt; 0</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg1</span> <span class="o">=~</span> <span class="s2">&quot;teststring&quot;</span>      <span class="c1">#=&gt; 0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#using m optional symbol to match multiline</span>
</span><span class='line'><span class="n">reg1</span> <span class="o">=</span> <span class="sr">/test\nstring/m</span>
</span><span class='line'><span class="n">reg2</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;test</span><span class="se">\n</span><span class="s2">string&quot;</span><span class="p">,</span> <span class="no">Regexp</span><span class="o">::</span><span class="no">MULTILINE</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg1</span> <span class="o">=~</span> <span class="s2">&quot;test</span><span class="se">\n</span><span class="s2">string&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">reg1</span> <span class="o">=~</span> <span class="s2">&quot;test</span><span class="se">\n</span><span class="s2">string&quot;</span>      <span class="c1">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<h5>捕获</h5>

<p>捕获，就是从正则表达式的匹配部分中提取某部分字符，通过&#8221;<strong>$数字</strong>&ldquo;这种形式的变量获取匹配了正则表达式中的用<strong>()</strong>括住的字符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">/(.)(C.)(.)/</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'><span class="n">reg</span> <span class="o">=~</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$1</span>   <span class="c1">#=&gt; B</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$2</span>   <span class="c1">#=&gt; CD</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$3</span>   <span class="c1">#=&gt; E</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用&#8221;<strong>(?: )</strong>&ldquo;可以过滤掉不需要捕获的模式.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">/(.)(?:C.)(.)/</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'><span class="n">reg</span> <span class="o">=~</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$1</span>   <span class="c1">#=&gt; B</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$2</span>   <span class="c1">#=&gt; E</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby中也可以使用<strong>$`</strong>, <strong>$&amp;</strong>, <strong>$&lsquo;</strong>分别代表匹配部分前的字符串、匹配部分的字符串、匹配部分后的字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">/(C.)/</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'><span class="n">reg</span> <span class="o">=~</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$`</span>     <span class="c1">#=&gt; AB</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$&amp;</span>     <span class="c1">#=&gt; CD</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$&#39;</span>     <span class="c1">#=&gt; E</span>
</span></code></pre></td></tr></table></div></figure>


<h5>常用方法</h5>

<p><strong>sub</strong>和<strong>gsub</strong>方法的作用是用指定的字符置换字符串中的某部分字符。<strong>sub</strong>方法只置换首次匹配的部分，而<strong>gsub</strong>则会置换所有匹配的部分.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">/\s+/</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;This is test string&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">reg</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span>   <span class="c1">#=&gt; &quot;This-is test string&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="n">reg</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span>   <span class="c1">#=&gt; &quot;This-is-test-string&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>sub和gsub方法同样支持block块模式，针对匹配到的字符做处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span><span class="sr">/i/</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;This is test string&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">matched</span><span class="o">|</span>
</span><span class='line'>  <span class="n">matched</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">result</span>     <span class="c1">#=&gt; ThIs is test string</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">matched</span><span class="o">|</span>
</span><span class='line'>  <span class="n">matched</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">result</span>     <span class="c1">#=&gt; ThIs Is test strIng</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>scan</strong>方法和<strong>gsub</strong>方法类似，都可以获取到所有匹配到的字符，但是不能置换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="sr">/(r)(.)/</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;racrtrhrdra&quot;</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">matched</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">matched</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#[&quot;r&quot;, &quot;a&quot;]</span>
</span><span class='line'><span class="c1">#[&quot;r&quot;, &quot;t&quot;]</span>
</span><span class='line'><span class="c1">#[&quot;r&quot;, &quot;h&quot;]</span>
</span><span class='line'><span class="c1">#[&quot;r&quot;, &quot;d&quot;]</span>
</span><span class='line'><span class="c1">#[&quot;r&quot;, &quot;a&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">val1</span><span class="p">,</span> <span class="n">val2</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">val1</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="n">val2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#&quot;r-a&quot;</span>
</span><span class='line'><span class="c1">#&quot;r-t&quot;</span>
</span><span class='line'><span class="c1">#&quot;r-h&quot;</span>
</span><span class='line'><span class="c1">#&quot;r-d&quot;</span>
</span><span class='line'><span class="c1">#&quot;r-a&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Nginx in Mac OS X]]></title>
    <link href="https://stonefishy.github.io/blog/2015/12/05/using-nginx-in-mac-os-x/"/>
    <updated>2015-12-05T11:51:04+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/12/05/using-nginx-in-mac-os-x</id>
    <content type="html"><![CDATA[<h4>Introduction</h4>

<p><strong>Nginx</strong> is a open source quite lightweight HTTP server which is written by Russian <em>Igor Sysoev</em>, the pronunciation is &ldquo;engine X&rdquo;. It&rsquo;s a high performance HTTP and reverse proxy server, and also it is a IMAP/POP3/SMTP proxy server。</p>

<p>There are lots of website using Nginx in China, like Sina, Tencent, 163, Discuz and so on. The Nginx has a very high performance due to event driven way, and also it is a high performance reverse proxy, load balancing.</p>

<!-- more -->


<p>The features of Nginx Http server are below:</p>

<p>1.dealing with static file, indexing file and also automatically indexing.</p>

<p>2.accelerating reverse proxy server,load balancing</p>

<p>3.FastCGI, Caching, Security</p>

<p>4.Support SSL and TLS</p>

<p>From investigation, the Nginx can support about 50,000 concurrence request connection, and also support hot deploy, even running 7*24 hours uninterrupted.</p>

<h4>Installing</h4>

<p>So, how to install it on Mac OS X. Let&rsquo;s assume you have installed the <em>Home brew</em>, using brew to install the nginx with command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install nginx</span></code></pre></td></tr></table></div></figure>


<h4>Starting And Runing</h4>

<p>After install, we can use below command to run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nginx</span></code></pre></td></tr></table></div></figure>


<p>If you get the failed message which is &ldquo;[emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)&rdquo;. You have to kill the progress which is running with that address, it usually is Apache. And also there is another way, changing the port number, we will introduce later.</p>

<p>The nginx running success, you will get the below page when you access the <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img src="https://stonefishy.github.io/assets/images/nginx-welcome.png" alt="nginx, devops" /></p>

<p>There are several commands to start, stop nginx and reload configuration.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nginx -s stop            #=&gt; fast shutdown
</span><span class='line'>
</span><span class='line'>nginx -s quit             #=&gt; graceful shutdown
</span><span class='line'>
</span><span class='line'>nginx -s reload           #=&gt; reloading the configuration file
</span><span class='line'>
</span><span class='line'>nginx -s reopen           #=&gt; reopening the log files</span></code></pre></td></tr></table></div></figure>


<h4>Simple Configuration</h4>

<p>The default place of nginx.conf on Mac after installing with brew is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/etc/nginx/nginx.conf</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s change the port number in this file. First, we need to stop the nginx.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nginx -s stop</span></code></pre></td></tr></table></div></figure>


<p>And then open that file, you will see the below server configuration section. It includes the listen, server_name, location/root, location/index. location/root is your website root folder, and index is your website first page file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>listen       8080;            
</span><span class='line'>server_name  localhost;
</span><span class='line'>
</span><span class='line'>#access_log  logs/host.access.log  main;
</span><span class='line'>
</span><span class='line'>location / {
</span><span class='line'>    root   html;
</span><span class='line'>    index  index.html index.htm;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>okay, let&rsquo;s change the port number from 8080 to 80, and then run it again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nginx</span></code></pre></td></tr></table></div></figure>


<p>Access it with <a href="http://localhost">http://localhost</a>, the 80 port number is http default port number, so we don&rsquo;t need to append it into url.</p>

<p>Now, let&rsquo;s put our blog website in the nginx, to do so, we need to reference the location/root to our blog website folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>listen       80;          
</span><span class='line'>server_name  localhost;
</span><span class='line'>
</span><span class='line'>#access_log  logs/host.access.log  main;
</span><span class='line'>
</span><span class='line'>location / {
</span><span class='line'>    root   /Users/yushi/Codes/Blog/stonefishy.github.io/public;;
</span><span class='line'>    index  index.html index.htm;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>let&rsquo;s running it again with clicking <a href="http://localhost">http://localhost</a>. Woow, cool, very nice, we can access our blog with nignx.</p>

<p>This is a just simple usage of nginx, we will talk about more later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码审查之Pull Request]]></title>
    <link href="https://stonefishy.github.io/blog/2015/11/22/code-review-with-pull-request/"/>
    <updated>2015-11-22T13:54:34+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/11/22/code-review-with-pull-request</id>
    <content type="html"><![CDATA[<p>代码审查(Code Review)一直是一个高效团队里面必备的流程，团队成员可以通过它达到技术交流，相互学习以及提升自身编码水平的目的。当然它的目的并不止于此，我们在做某一件事的过程中，所用的技能和工具不外乎都是为了能使结果更符合我们的期望，就拿建筑工程来说，质量控制就是其把控最严的一关，有专门的质量管理领导小组、质量组织管理体系制度来贯穿这个过程，其最终目的就是为了使这栋建筑坚固牢稳，避免随时有可能崩塌的危险。</p>

<!-- more -->


<p>软件开发也一样，代码审查的另外一个目的就是为了保证软件的质量，避免系统中存在较多的Bug（软件中Bug是无法避免的，此处意思是尽量减少Bug出现的几率）。在我们以往的代码审查过程中，采用的主要形式是开发人员围在一起查看今天是否有哪些代码提交，然后针对提交的代码过一遍，发现有好的实践就相互学习，针对待提升的代码讨论后由Owner自己下去修改。这个过程看似很正常，其实里面存在较多的问题：</p>

<ul>
<li>其一，好的实践并没有在代码中标明，以及为什么是个好的实践，而且当想回顾查找的时候很困难；</li>
<li>其二，每个开发人员对同一个提交的想法和见解可能不一样，但是这些想法和见解却并没有被记录下来；</li>
<li>其三，也是最重要的一个，没有载体去记录哪些代码须改进，那么在下次Review的过程中，并不是所有人都记得上次有哪些代码是否已经改进了，这就会导致代码的质量没有受到监管。</li>
</ul>


<p>任何一种工作方法，如果有工具的辅助，就可以大大提高其效率。Pull Request就是代码审查的一种工作流工具，它并不是DVCS(Distributed Version Control System)比如git的一个特性，通过它可以使代码审查更有效率。而我们大多项目现在都是用Stash（现在已更名为Bitbucket）或Github作为代码仓库，两者均提供了这种方式来确保代码质量。</p>

<p>那么如何通过Pull Request来体现我们的代码质量管理过程呢？首先代码质量管理小组需要由项目中比较资深的研发人员构成，他们是Pull Request的Reviewer不可缺少的成员，用于把控提交的代码是否可以通过，当然，最好是全体研发人员一起加入。而代码质量管理体系制度其实也就是我们常说的一些规范和实践，包括项目统一的编码风格、代码的可读性、可维护性、合理的单元测试以及提倡的一些最佳实践等等。Reviewer可以通过此类体系来鉴别所提交的代码质量是否可以过关。</p>

<p>在此处我们并不阐述如何创建一个Pull Request，我们的焦点在于用它来解决之前遇到的问题。以我们现在项目中用的Stash为例，当Pull Request已创建并通知Reviewer后，Reviewer可以查看其提交代码，做出以下Action:</p>

<ul>
<li>针对好的实践代码或设计可以在其位置标注上注释，以备后续回顾查找时容易找到。</li>
<li>建议被添加为Reviewer的开发人员均要在此次的Pull Request中留下自己的意见，这样在后续的集体Code Review中可以查看到相互的见解。</li>
<li>如果发现代码存在问题的，可以及时在代码中留下注释。如果代码提交者对这个注释也赞同，可当即修改并更新Pull Request，这样可以保证代码是已经修正过的。</li>
</ul>


<p><img src="https://stonefishy.github.io/assets/images/stash-pull-request.png" alt="stash-pull-request.png" /></p>

<p>当一个Pull Request相关问题都已修改后或不存在任何问题时，就可以直接Approve并Merge到CodeBase中去，这样能够很好的确保CodeBase中的代码是经过监管控制过的。而且在Stash的Pull Request中，还可以设置当须不少于指定个数的Reviewer同意代码提交通过后，提交者才有权限Merge到CodeBase中。这样也能极大的确保项目的代码质量规范是整体开发人员认同的。</p>

<p>总之，Pull Request工作流程的方式可以很大的提高代码审查的质量以及效率，有工具，为何不加以合理使用呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(16)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/11/18/ruby-practice-16/"/>
    <updated>2015-11-18T10:49:41+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/11/18/ruby-practice-16</id>
    <content type="html"><![CDATA[<h4>散列类</h4>

<p>散列(<strong>Hash</strong>)和数组一样，都是表示对象集合的对象，不同之处在于，数组使用索引来取得元素，而散列则是用键key，key可以是任何对象，而索引则不能，只能是整数。</p>

<h5>散列的创建</h5>

<p>1.使用 <strong>{}</strong></p>

<pre><code>    {key=&gt;value}
    或
    {key:value}
</code></pre>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hash1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;key1&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;value1&quot;</span><span class="p">,</span> <span class="s2">&quot;key2&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;value2&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">hash1</span><span class="o">[</span><span class="s2">&quot;key1&quot;</span><span class="o">]</span>            <span class="c1">#=&gt; &quot;value1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">hash2</span> <span class="o">=</span> <span class="p">{</span><span class="ss">key1</span><span class="p">:</span><span class="s2">&quot;value1&quot;</span><span class="p">,</span> <span class="ss">key2</span><span class="p">:</span><span class="s2">&quot;value2&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">hash2</span><span class="o">[</span><span class="ss">:key1</span><span class="o">]</span>           <span class="c1">#=&gt; &quot;value1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.使用<strong>Hash.new</strong></p>

<p>Hash.new()可带参数，当带参数的时候表示该参数为默认值，即当键不存在时，所得的值为该默认值；不带参数情况下，其默认值为nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hash1</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">hash2</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;ruby&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">hash1</span><span class="o">[</span><span class="s2">&quot;key&quot;</span><span class="o">]</span>         <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="nb">p</span> <span class="n">hash2</span><span class="o">[</span><span class="s2">&quot;key&quot;</span><span class="o">]</span>         <span class="c1">#=&gt; &quot;ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>散列的键可以是任意对象，一般推荐使用下列类型的对象来作为键：字符串(String), 数值(Numberic), 符号(Symbol), 日期(Date).</p>

<h5>散列值的设置和获取</h5>

<p>一般情况下，我们大多使用最普通的方法来给散列赋值或取值, 如果键不存在，则返回nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#common set and get</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;first&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="o">]</span>           <span class="c1">#=&gt; &quot;first&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;abc&quot;</span><span class="o">]</span>     <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby还提供了<strong>store</strong>方法来存储值，使用<strong>fetch</strong>方法来获取值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#store and fetch</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="s2">&quot;ruby&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s2">&quot;key&quot;</span><span class="p">)</span>     <span class="c1">#=&gt; &quot;ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但<strong>fetch</strong>方法与[]不同之处在于，如果hash对象中不存在键时，使用此方法将会出错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">store</span><span class="p">(</span><span class="s2">&quot;key&quot;</span><span class="p">,</span> <span class="s2">&quot;ruby&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s2">&quot;abc&quot;</span><span class="p">)</span>       <span class="c1">#=&gt; KeyError</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>fetch</strong>方法同样可以返回一个默认值，当它指定第2个参数时或者带块时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s2">&quot;abc&quot;</span><span class="p">,</span> <span class="s2">&quot;default value&quot;</span><span class="p">)</span>   <span class="c1">#=&gt; &quot;default value&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s2">&quot;abc&quot;</span><span class="p">)</span> <span class="p">{</span><span class="s2">&quot;a_&quot;</span><span class="o">+</span> <span class="nb">String</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;bc&quot;</span><span class="p">)}</span>  <span class="c1">#=&gt;&quot;a_bc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<strong>keys</strong>和<strong>values</strong>方法可以得到所有的键和值，而且<strong>to_a</strong>方法可以键值组合的数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="n">all</span> <span class="n">keys</span> <span class="ow">and</span> <span class="n">values</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">keys</span>     <span class="c1">#=&gt; [&quot;a&quot;, &quot;c&quot;]</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">values</span>       <span class="c1">#=&gt; [&quot;b&quot;, &quot;d&quot;]</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">to_a</span>     <span class="c1">#=&gt; [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby也支持了Hash对象的迭代遍历</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">each_key</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">key</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">each_value</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=&gt;</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h5>散列的默认值</h5>

<p>散列的默认值设置有三种方式
1.使用Hash.new带参数作为默认值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="o">]</span>       <span class="c1">#=&gt; &quot;ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.使用块指定默认值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;a&quot;</span><span class="o">]</span>           <span class="c1">#=&gt; &quot;A&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;B&quot;</span><span class="o">]</span>           <span class="c1">#=&gt; &quot;B&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.使用fetch方法指定默认值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;abc&quot;</span><span class="p">)</span>           <span class="c1">#=&gt; &quot;abc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注：当Hash.new方法指定了默认值或块时，fetch方法的第二个参数指定的默认值的优先级是最高的，且看上例</em></p>

<h5>散列其他方法</h5>

<p>1.查看指定对象是否为散列的键  <br/>
h.<strong>key?</strong>(key)  <br/>
h.<strong>has_key?</strong>(key)  <br/>
h.<strong>include?</strong>(key)  <br/>
h.<strong>member?</strong>(key)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>    <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>    <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">)</span>  <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>  <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>   <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.查看指定对象是否为散列的值  <br/>
h.<strong>value?</strong>(val)  <br/>
h.<strong>has_value?</strong>(val)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">value?</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>        <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">has_value?</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">)</span>    <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.获取散列的大小  <br/>
hash.<strong>length</strong>  <br/>
hash.<strong>size</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="ss">:c</span> <span class="o">=&gt;</span> <span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">length</span>   <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">size</span>   <span class="c1">#=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.判断散列是否为空    <br/>
hash.<strong>empty?</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span><span class="o">=&gt;</span><span class="s2">&quot;b&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">empty?</span>     <span class="c1">#=&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">empty?</span>     <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.删除键值  <br/>
h.<strong>delete</strong>(key) <br/>
h.<strong>delete_if</strong>{|key,val| &hellip;}  <br/>
h.<strong>reject!</strong>{|key, val| &hellip;}</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span>    <span class="c1">#=&gt; &quot;b&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span>    <span class="c1">#=&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:x</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="s2">&quot;no </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> in this hash object&quot;</span><span class="p">}</span>   <span class="c1">#=&gt;&quot;no x in this hash object&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="ss">:c</span> <span class="o">=&gt;</span> <span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="ss">:a</span> <span class="p">}</span>     <span class="c1">#=&gt; {:c=&gt;&quot;d&quot;}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="ss">:b</span> <span class="p">}</span>     <span class="c1">#=&gt; {:c=&gt;&quot;d&quot;}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span> <span class="o">=&gt;</span> <span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="ss">:c</span> <span class="o">=&gt;</span> <span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="ss">:a</span><span class="p">}</span>       <span class="c1">#=&gt; {:c=&gt;&quot;d&quot;}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="n">key</span> <span class="o">==</span> <span class="ss">:b</span><span class="p">}</span>       <span class="c1">#=&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>delete方法带块时，如果不存在指定的键, 则返回块中的结果。<strong>delete_if</strong>方法和<strong>reject!</strong>功能一样，区别在于如果不满足条件是，delete_if返回的是散列对象本身，而reject！则返回nil。</p>

<p>7.初始化散列  <br/>
h.<strong>clear</strong>  <br/>
用<strong>clear</strong>方法清空使用过的散列</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">a</span><span class="p">:</span><span class="s2">&quot;b&quot;</span><span class="p">,</span> <span class="ss">c</span><span class="p">:</span><span class="s2">&quot;d&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">size</span>     <span class="c1">#=&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">size</span>     <span class="c1">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<h5>关于散列的键</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">key1</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">key2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">key1</span> <span class="o">==</span> <span class="n">key2</span>      <span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="n">key1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>     <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">hash</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>   <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>注：在散列内部，程序会将散列获取值时指定的键，与将值保存到散列时指定的键做比较，判断两者是否一致。具体来说就是，如果两个键key1，key2，当key1.hash与key2.hash得到的整数值相同，并且key1.eql?(key2)为true时，就会认为这两个键是一致的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(15)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/11/17/ruby-practice-15/"/>
    <updated>2015-11-17T16:15:17+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/11/17/ruby-practice-15</id>
    <content type="html"><![CDATA[<h5>字符串比较</h5>

<p>Ruby中比较字符串是否相同也是用<strong>==</strong>和<strong>!=</strong>等运算符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#whether two strings are equal</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;aaa&quot;</span> <span class="o">==</span> <span class="s2">&quot;aab&quot;</span>        <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;aaa&quot;</span> <span class="o">!=</span> <span class="s2">&quot;aab&quot;</span>            <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是判断两字符串是否相似，采用正则表达式匹配更加简单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#whether two strings are similar</span>
</span><span class='line'><span class="n">reg</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;^a+b$&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;aaa&quot;</span> <span class="o">=~</span> <span class="n">reg</span>            <span class="c1">#=&gt; nil (not similar)</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;ab&quot;</span> <span class="o">=~</span> <span class="n">reg</span>             <span class="c1">#=&gt; 0 (similar)</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;aab&quot;</span> <span class="o">=~</span> <span class="n">reg</span>            <span class="c1">#=&gt; 0 (similar)</span>
</span><span class='line'><span class="nb">p</span> <span class="s2">&quot;acb&quot;</span> <span class="o">=~</span> <span class="n">reg</span>            <span class="c1">#=&gt; nil (not similar)</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>字符串大小由字符编码的顺序决定，可以通过调用<strong>String#ord</strong>方法获取字符编码的码位。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#compare two strings, which is bigger</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;aaa&quot;</span> <span class="o">&gt;</span> <span class="s2">&quot;aab&quot;</span>      <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;aaa&quot;</span> <span class="o">&lt;=</span> <span class="s2">&quot;aab&quot;</span>     <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注：Windows平台下的中文字符使用GBK编码，但非Windows平台下的中文字符使用UTF-8编码</em></p>

<h5>字符串的分割</h5>

<p>用特定字符分割字符串时可以使用<strong>split</strong>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#split string with a special character</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;This is a string&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>         <span class="c1">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>字符串的换行符</h5>

<p>用<strong>each_line</strong>方法从标准输入读取字符串时，字符串后面肯定有换行符。在操作字符串时，我们可能不需要换行符。此时可以使用<strong>chomp</strong>和<strong>chomp!</strong>方法来删除字符串行末的换行符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#delete the line break character from a string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello ruby</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>                      <span class="c1">#=&gt; &quot;hello ruby\n&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">chomp</span>          <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">chomp!</span>         <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>                  <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果说只想移除字符串行末的最后一个任意字符，可以通过是用<strong>chop</strong>和<strong>chop!</strong>方法来实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#delete the last character from a string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">chop</span>            <span class="c1">#=&gt; hello rub</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>               <span class="c1">#=&gt; hello ruby</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">chop!</span>           <span class="c1">#=&gt; hello rub</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>               <span class="c1">#=&gt; hello rub</span>
</span></code></pre></td></tr></table></div></figure>


<h5>字符串的索引</h5>

<p>使用<strong>index</strong>和<strong>rindex</strong>方法可以获取某个字符串在另一个字符串中得索引位置，如果不在，则返回nil。<strong>index</strong>方法从左向右检索，<strong>rindex</strong>从右向左检索。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#get the index which a string in another string</span>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;aaabbbbbb&quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;bb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>   <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span><span class="o">.</span><span class="n">rindex</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>  <span class="c1">#=&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果只想判断某个字符串中是否包含另一个字符串时，使用<strong>include?</strong>方法更佳。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#a string whether contains another string</span>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;abc&quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;ab&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span> <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h5>字符串的置换</h5>

<p>字符串的置换可以通过调用<strong>sub</strong>和<strong>gsub</strong>来实现。<strong>sub</strong>方法仅替换第一个出现的匹配字符，而<strong>gsub</strong>则会替换所有的匹配字符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#the replacing of string</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>       <span class="c1">#=&gt; he*lo</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>      <span class="c1">#=&gt; he**o</span>
</span></code></pre></td></tr></table></div></figure>


<p>字符串的置换还可以通过像替换数组中元素的方式来实现，即索引</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>                       <span class="c1">#=&gt; he*lo</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;**&#39;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>                       <span class="c1">#=&gt; he**o</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]=</span> <span class="s1">&#39;***&#39;</span>          
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>                       <span class="c1">#=&gt; h***o</span>
</span></code></pre></td></tr></table></div></figure>


<h5>字符串与数组相同的方法</h5>

<p>字符串的很多方法都与数组相同，主要分为以下三大类：  <br/>
- 与索引操作相关的方法 <br/>
- 与<strong>Enumerable</strong>模块相关的方法  <br/>
- 与连接、反转相关的方法</p>

<p>删除字符串中的一部分字符并返回，可使用<strong>slice</strong>方法</p>

<p><strong>slice(n)</strong>  <br/>
<strong>slice(n..m)</strong>  <br/>
<strong>slice(n, m)</strong>  <br/>
<strong>slice!(n)</strong>  <br/>
<strong>slice!(n..m)</strong>
<strong>slice!(n, m)</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#the slice of string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>              <span class="c1">#=&gt; e</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span>         <span class="c1">#=&gt; ell</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>            <span class="c1">#=&gt; llo</span>
</span></code></pre></td></tr></table></div></figure>


<p>不带块的情况下，大部分原生的迭代器在调用时都会返回<strong>Enumberable</strong>对象。因此我们可以对<strong>each_line</strong>, <strong>each_byte</strong>， <strong>each_char</strong>等方法的返回值继续使用像<strong>map</strong>， <strong>collect</strong>等方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#the enumerable of string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">EOB</span>
</span><span class='line'><span class="sh">hello</span>
</span><span class='line'><span class="sh">ruby</span>
</span><span class='line'><span class="no">EOB</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>              <span class="c1">#=&gt; &quot;hello\nruby\n&quot;</span>
</span><span class='line'><span class="c1">#return enumerable</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">each_line</span>              <span class="c1">#=&gt; #&lt;Enumerator: &quot;hello\nruby\n&quot;:each_line&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">each_line</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">chomp</span>  <span class="p">}</span>   <span class="c1">#=&gt; [&quot;hello&quot;, &quot;ruby&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">each_line</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">upcase</span><span class="p">}</span> <span class="c1">#=&gt; [&quot;HELLO&quot;, &quot;RUBY&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>delete(str)</strong>  <br/>
<strong>delete!(str)</strong> <br/>
删除字符串中指定的字符串，并返回删除后的字符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#delete the specific string from another string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello</span><span class="se">\n</span><span class="s2"> ruby</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>      <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>                  <span class="c1">#=&gt; &quot;hello\n ruby\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">delete!</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>      <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>                  <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>reverse(str)</strong>  <br/>
<strong>reverse!(str)</strong>  <br/>
反转字符串，包括破坏方法与非破坏方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#reverse a string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">reverse</span>            <span class="c1">#=&gt; &quot;ybur olleh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>str.strip</strong>  <br/>
<strong>str.strip!</strong>  <br/>
删除字符串str中行首和行尾的空白字符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#remove the white space at the begin and end of string</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot; hello ruby &quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>                  <span class="c1">#=&gt; &quot; hello ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">strip</span>          <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>str.upcase/str.upcase!</strong>  <br/>
<strong>str.downcase/str.downcase!</strong>  <br/>
<strong>str.swapcase/str.swapcase!</strong>  <br/>
<strong>str.capitalize/str.capitalize!</strong> <br/>
字符串大小写的转换系列方法, <strong>swapcase</strong>方法是将字符串中的大小写相互转换。而<strong>capitalize</strong>方法则是将字符串的首个字符大写，其余的均改为小写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#text transform</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;Hello RUBY&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">upcase</span>             <span class="c1">#=&gt; &quot;HELLO RUBY&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">downcase</span>           <span class="c1">#=&gt; &quot;hello ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">swapcase</span>          <span class="c1">#=&gt; &quot;hELLO ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span><span class="o">.</span><span class="n">capitalize</span>     <span class="c1">#=&gt; &quot;Hello ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(14)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/11/12/ruby-practice-14/"/>
    <updated>2015-11-12T17:09:35+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/11/12/ruby-practice-14</id>
    <content type="html"><![CDATA[<h4>字符串的创建</h4>

<h5>普通创建</h5>

<p>Ruby中使用<strong>&ldquo; &rdquo;</strong>或<strong>&lsquo; &rsquo;</strong>符号来创建字符串，在字符串中也可以包含表达式<strong>#{}</strong>，这个表达式被称之为内嵌表达式。如果字符串中需要包含&#8221;&ldquo;或者&#8217;&lsquo;等字符时，则可以通过转义字符\来实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;this is a string&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;this is also a string&#39;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="s2">&quot;string with argument&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;this is a </span><span class="si">#{</span><span class="n">args</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;Hello &#39;string&#39;&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;Hello </span><span class="se">\&quot;</span><span class="s2">string</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h5>%Q或%q创建</h5>

<p>针对字符串中包含&#8221;&ldquo;或&#8217;&lsquo;等字符的，建议采用<strong>%Q</strong>或者<strong>%q</strong>来创建字符串，这样更加清晰明了。使用<strong>%Q</strong>相当于<strong>&rdquo; &ldquo;</strong>创建字符串，<strong>%q</strong>相当于<strong>&rsquo; &lsquo;</strong>创建字符.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="sx">%Q(this string created by %Q)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="sx">%q(this string created by %q)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="sx">%Q(contains &#39;special&#39; &quot;character&quot; directly)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="sx">%q(contains &#39;special&#39; &quot;character&quot; directly)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Here Document创建，</h5>

<p>对于字符串中包含换行符的字符串，使用Here Document语法来创建极为方便。Here Document是Unix中使用Shell的一种语法，通常用<strong>&lt;&lt;</strong>来创建字符串。其语法结构如下：</p>

<pre><code>&lt;&lt;"结束标识符"
字符串内容
结束标识符
</code></pre>

<p><em>注意：结束标识符可以使用&#8221; &ldquo;或&#8217; &lsquo;来定义，使用&rdquo; &ldquo;时，字符串内可以使用转义字符和内嵌表达式，而&rsquo; &lsquo;则不会，只会原封不动的显示所有字符。</em></p>

<p>一般使用<em>EOF(End of File)</em>或<em>EOB(End of Block)</em>等作为结束标识符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">EOB</span>
</span><span class='line'><span class="sh">the first string</span>
</span><span class='line'><span class="sh">the second string in a new line</span>
</span><span class='line'><span class="sh">ok, I also get the third string</span>
</span><span class='line'><span class="no">EOB</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span> <span class="n">str</span>      <span class="c1">#=&gt;the string has three lines, just like defined.</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果字符串中存在缩进，可以使用<strong>&lt;&lt;-</strong>来替代<strong>&lt;&lt;</strong>，这样将会保持字符串定义中的缩进。</p>

<h5>使用<code></code></h5>

<p>通过使用<strong>`命令`</strong>, 可以创建命令的标准输出并将其转换为字符串对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="sb">`ls -l`</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span>       
</span><span class='line'><span class="c1">#=&gt; </span>
</span><span class='line'><span class="n">total</span> <span class="mi">8</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>  <span class="mi">1</span> <span class="n">yushi</span>  <span class="n">staff</span>  <span class="mi">634</span> <span class="no">Nov</span> <span class="mi">16</span> <span class="mi">17</span><span class="p">:</span><span class="mi">12</span> <span class="n">string_create</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<h5>使用printf和sprintf</h5>

<p><strong>printf</strong>与<strong>sprintf</strong>均是可以输出指定格式的字符串，不同之处在于printf会将字符串直接输出在控制台上，而sprintf则会将字符串转为为字符串对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">number</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%d</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>      <span class="c1">#=&gt; 123</span>
</span><span class='line'><span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%4d</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>     <span class="c1">#=&gt;  123</span>
</span><span class='line'><span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%04d</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>    <span class="c1">#=&gt; 0123</span>
</span><span class='line'><span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%+d</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>     <span class="c1">#=&gt; +123</span>
</span><span class='line'>
</span><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;Ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;Hello,%s&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>        <span class="c1">#=&gt; &quot;Hello,Ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;Hello,%8s&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>       <span class="c1">#=&gt; &quot;Hello,    Ruby&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;Hello,%-8s&quot;</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>      <span class="c1">#=&gt; &quot;Hello,Ruby    &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>字符串长度</h4>

<p>用<strong>length</strong>方法和<strong>size</strong>方法获取字符串长度。<strong>bytesize</strong>方法可以获取字节长度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;This is a string&quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;字符串&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#get the length of a string object</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">length</span>          <span class="c1">#=&gt; 16</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">size</span>            <span class="c1">#=&gt; 16</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str2</span><span class="o">.</span><span class="n">length</span>     <span class="c1">#=&gt; 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#get the bytesize of a string </span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">bytesize</span>        <span class="c1">#=&gt; 16</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str2</span><span class="o">.</span><span class="n">bytesize</span>       <span class="c1">#=&gt; 9</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断字符串是否为空，可用<strong>empty?</strong>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#judge the string if is empty</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">empty?</span>            <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;string&quot;</span><span class="o">.</span><span class="n">empty?</span>  <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>字符串的索引与数组的索引用法一样，可参照使用</em></p>

<h5>字符串的连接</h5>

<p>字符串的连接有以下两种情况： <br/>
- 将字符串合并为一个新的字符串 <br/>
- 扩展原有字符串</p>

<p>使用<strong>+</strong>可以合并两个字符串时，会创建一个新的字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#using &#39;+&#39;, will create a new string object</span>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;hello &quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'><span class="n">str3</span> <span class="o">=</span> <span class="n">str1</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span>             <span class="c1">#=&gt; hello world</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span>                  <span class="c1">#=&gt; hello</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span> <span class="o">=</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span>    <span class="c1">#=&gt; hello world</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span>                  <span class="c1">#=&gt; hello world</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str3</span>                  <span class="c1">#=&gt; hello</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果只想扩展原有字符串，可以使用<strong>&lt;&lt;</strong>或<strong>concat</strong>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#using &#39;&lt;&lt;&#39;, will change the original string object</span>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;hello &quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'><span class="n">str3</span> <span class="o">=</span> <span class="n">str1</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span><span class="o">&lt;&lt;</span><span class="n">str2</span>                <span class="c1">#=&gt; hello world</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span>                  <span class="c1">#=&gt; hello world</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str3</span>                  <span class="c1">#=&gt; hello world</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#using &#39;concat&#39; method, also will change the original string object</span>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;hello &quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'><span class="n">str3</span> <span class="o">=</span> <span class="n">str1</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span><span class="o">.</span><span class="n">concat</span> <span class="n">str2</span>     <span class="c1">#=&gt; hello world</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str1</span>                  <span class="c1">#=&gt; hello world</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str3</span>                  <span class="c1">#=&gt; hello world</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注意：一般情况下使用<strong>&lt;&lt;</strong>和<strong>concat</strong>方法更有效率，但是也可以根据情况而定</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make the Octopress Adapt OS X EI Capitan]]></title>
    <link href="https://stonefishy.github.io/blog/2015/11/11/how-to-make-the-octopress-adapt-os-x-ei-capitan/"/>
    <updated>2015-11-11T22:46:35+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/11/11/how-to-make-the-octopress-adapt-os-x-ei-capitan</id>
    <content type="html"><![CDATA[<p>Octopress was broken after I upgraded Mac to OS X EI Capitan 10.11.1 in these days. The details of the problem is below.</p>

<p>Octopress is work well in Mac10.10. but when I upgraded to Mac10.11.1(OS X EI Capitan). And put <em>rake preview</em> in terminal to see the blog what looks like, got following error.</p>

<pre><code>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
rake aborted!
Errno::ENOENT: No such file or directory - compass
/Users/user/git/octopress/Rakefile:85:in spawn
/Users/user/git/octopress/Rakefile:85:in block in &lt;top (required)&gt;
Tasks: TOP =&gt; preview
(See full trace by running task with --trace)
</code></pre>

<!-- more -->


<p>Why we get this error, this error caused by rake command, so that means maybe it is ruby version problem. let&rsquo;s take a look it.</p>

<pre><code>~-&gt; $ ruby -v
~-&gt; ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]
</code></pre>

<p>The ruby newest version is 2.2.3. Ok, let&rsquo;s upgrade it. There are two ways to do it.</p>

<h4>Using rbenv</h4>

<p>If you don&rsquo;t have rbenv in your local machine. You need to install it firstly.  <br/>
1.Go to <a href="https://github.com/sstephenson/rbenv">https://github.com/sstephenson/rbenv</a> to get it. <br/>
2.install ruby-2.2.3</p>

<pre><code>rbenv install 2.2.3
</code></pre>

<p>3.In the root of your octopress blog, put below commands</p>

<pre><code>rbenv local 2.2.3

gem install bundler

bundle install
</code></pre>

<h4>Using RVM</h4>

<p>1.Clear git cache</p>

<pre><code>rm -rf /usr/local/.git
</code></pre>

<p>2.Install RVM</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>3.Install Ruby 2.2.3</p>

<pre><code>rvm install ruby-2.2.3

rvm use 2.2.3

rvm rubygems latest
</code></pre>

<p>After these steps, make sure you&rsquo;re using Ruby 2.2.3
4.Go to the root of the your octopress blog</p>

<pre><code>gem install bundler

bundle install
</code></pre>

<p>Both ways can bring octopress back.</p>

<p><em>Reference: <a href="https://github.com/imathis/octopress/issues/1749">https://github.com/imathis/octopress/issues/1749</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(13)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/10/26/ruby-practice-13/"/>
    <updated>2015-10-26T22:13:32+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/10/26/ruby-practice-13</id>
    <content type="html"><![CDATA[<h4>替换数组内的元素</h4>

<p>根据指定规则替换数组中的元素，Ruby也提供了以下方法:</p>

<p>ary.<strong>collect</strong> { |item| &hellip;} <br/>
ary.<strong>collect!</strong> { |item| &hellip;} <br/>
ary.<strong>map</strong> { |item| &hellip;} <br/>
ary.<strong>map!</strong> { |item| &hellip;}</p>

<p>将数组ary中的各元素item传递给块做处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary1</span> <span class="o">=</span> <span class="n">ary</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">item</span><span class="o">*</span><span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">ary1</span>                 <span class="c1">#=&gt; [ 2, 4, 6]</span>
</span><span class='line'>
</span><span class='line'><span class="n">ary2</span> <span class="o">=</span> <span class="n">ary</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">item</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">ary2</span>                 <span class="c1">#=&gt; [1, 0, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>ary.<strong>fill</strong>(value)  <br/>
ary.<strong>fill</strong>(value, begin) <br/>
ary.<strong>fill</strong>(value, begin, len) <br/>
ary.<strong>fill</strong>(vlaue, n..m)  <br/>
将数组ary的元素替换为value。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c1">#=&gt; [0, 0, 0]</span>
</span><span class='line'><span class="nb">p</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>        <span class="c1">#=&gt; [1, 0, 0]</span>
</span><span class='line'><span class="nb">p</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>      <span class="c1">#=&gt; [0, 0 ,3]</span>
</span><span class='line'><span class="nb">p</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="p">)</span>       <span class="c1">#=&gt; [1, 0, 0]</span>
</span><span class='line'>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>                      <span class="c1">#=&gt; [0, 0, 0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>*注意，此方法会修改原对象的值。即为破坏方法。</p>

<p>ary.<strong>flatten</strong> <br/>
ary.<strong>flatten</strong> <br/>
平坦化数组ary，所谓平坦化是指展开嵌套数组变为一个大数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]]]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span><span class="o">.</span><span class="n">flatten</span>         <span class="c1">#=&gt; [1, 2, 3, 4, 5, 6]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ary.<strong>reverse</strong>  <br/>
ary.<strong>reverse!</strong>  <br/>
反转数组ary的元素顺序</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span><span class="o">.</span><span class="n">reverse</span>        <span class="c1">#=&gt; [3, 2, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ary.<strong>sort</strong> <br/>
ary.<strong>sort!</strong> <br/>
ary.<strong>sort</strong>{|i, j| &hellip; } <br/>
ary.<strong>sort!</strong>{|i, j| &hellip;} <br/>
ary.<strong>sort_by</strong> {|i| &hellip;}</p>

<p>对数组ary中进行排序，排序方法可以由块指定。没有块时，使用<em>&lt;=></em>运算符比较。其中<strong>sort_by</strong>方法中排序是根据块的运行结果来对数组的所有元素进行排序。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span><span class="o">.</span><span class="n">sort</span>           <span class="c1">#=&gt; [4, 5, 9]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">sort!</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">|</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">&lt;=&gt;</span> <span class="n">j</span> <span class="o">%</span> <span class="mi">3</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [9, 4, 5]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="o">-</span><span class="n">i</span> <span class="p">}</span>  <span class="c1">#=&gt; [4, 3, 2, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>数组的迭代</h4>

<p><strong>each</strong>方法并不知道元素的索引值。当需要指定索引值时，可以使用<strong>each_with_index</strong>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">23</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">14</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="p">}</span> <span class="c1">#=&gt; 23 54 14</span>
</span><span class='line'>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;The &quot;</span><span class="p">,</span> <span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot; element is :&quot;</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果数组内各元素全部处理完毕后该数组就不需要了，此时可以通过逐个删除数组元素使数组变空这样的手段来实现循环。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="n">item</span> <span class="o">=</span> <span class="n">ary</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>  <span class="c1">## the handle of the item</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>多维数组</h4>

<p>数组中的各个元素也可以是数组，也就是数组的数组。可以用它来表示矩阵。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span>       <span class="c1">#=&gt; 4</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#3个元素引用的是同一个数组对象</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [[0, 1], [0, 1], [0, 1]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#避免引用同一个数组对象，在块中，重复创建新的对象</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>        
</span><span class='line'>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [[0, 1], [0, 0], [0, 0]]    </span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<em>Array.new(length, array)</em>创建二维数组。创建的所有元素引用的都是同一个对象array，修改其中一个元素的值，其他元素也会变化。如上示例代码。如何避免？可在创建数组的块中重复创建新对象。</p>

<p>ary.<strong>zip</strong>(ary1, ary2, &hellip;) <br/>
<strong>zip</strong>方法会将接收器和参数传来的数组元素逐一取出，而且每次都会启动块。参数可以是一个或多个。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="o">]</span>
</span><span class='line'><span class="n">ary3</span> <span class="o">=</span> <span class="o">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">ary1</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">ary2</span><span class="p">,</span> <span class="n">ary3</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">result</span>           <span class="c1">#=&gt; [111, 222, 333]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(12)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/10/13/ruby-practice-12/"/>
    <updated>2015-10-13T10:25:41+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/10/13/ruby-practice-12</id>
    <content type="html"><![CDATA[<p>数组(<strong>Array</strong>)也是Ruby中表现一组数据的对象</p>

<h4>数组的创建</h4>

<p>创建方式有一下几种： <br/>
1.使用<strong>Array.new</strong> <br/>
Array#new方法可带两个可选参数，第1个参数表示数组中得个数，第2个参数表示每个元素初始值。如果没有指定第2个参数，其元素的初始值为<strong>nil</strong>。如果不带参数则会创建一个空数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#不带参数c</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>                  <span class="c1">#=&gt; []</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#带1个参数</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>                  <span class="c1">#=&gt; [nil, nil, nil]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#带2个参数</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>                  <span class="c1">#=&gt; [5, 5, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>2.使用<strong>%w</strong>与<strong>%i</strong> <br/>
<strong>%w</strong>用于创建不包含空白的字符串数组, 使用此方法创建字符串数组更加简洁。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w(This is ruby)</span>     <span class="c1">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;ruby&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>%i</strong>用于创建符号(Symbol)数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">%</span><span class="n">i</span><span class="p">(</span><span class="no">This</span> <span class="n">is</span> <span class="n">ruby</span><span class="p">)</span>   <span class="c1">#=&gt; [:This, :is, :ruby]</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<strong>%w</strong>和<strong>%i</strong>创建数组时用到了(). 其实还可以用很多字符来替代，不过建议使用<strong>()</strong>,<strong>&lt;></strong>,<strong>||</strong>.</p>

<p>3.使用<strong>to_a</strong>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">=</span><span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;yu&quot;</span><span class="p">,</span> <span class="ss">gender</span><span class="p">:</span> <span class="s2">&quot;male&quot;</span><span class="p">}</span>          <span class="c1">#=&gt; {:name=&gt;&quot;yu&quot;, :gender=&gt;&quot;male&quot;}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">to_a</span>                                       <span class="c1">#=&gt; [[:name, &quot;yu&quot;], [:gender, &quot;male&quot;]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.使用<strong>split</strong>方法 <br/>
对逗号或空白字符间隔的字符串可以使用split方法来创建数组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;this is ruby&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>                <span class="c1">#=&gt; [&quot;this&quot;, &quot;is&quot;, &quot;ruby&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取元素</h4>

<p>获取元素的方法有以下几种：</p>

<p>1.使用<strong>[]</strong> <br/>
(a) <strong>ary[n]</strong>, 获取索引值为n的元素，当索引值为负数时，从数组的末尾开始获取元素。如果指定的索引值大于元素个数则返回nil。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>                
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>               <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="n">ary</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>          <span class="c1">#=&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>(b) <strong>ary[n..m]</strong>, 获取从a[n]到a[m]的元素，并返回新的数组。如果m大于数组的长度，返回的结果与指定数组最后一个元素是一样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span>          <span class="c1">#=&gt; [2, 3, 4]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span>          <span class="c1">#=&gt;  [2, 3, 4, 5]   </span>
</span></code></pre></td></tr></table></div></figure>


<p>&copy; <strong>ary[n&hellip;m]</strong>, 获取从a[n]到a[m-1]的元素，并返回新数组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">3</span><span class="o">]</span>          <span class="c1">#=&gt; [2, 3]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">7</span><span class="o">]</span>          <span class="c1">#=&gt;  [2, 3, 4, 5]   </span>
</span></code></pre></td></tr></table></div></figure>


<p>(d) <strong>ary[n, len]</strong>, 获取从a[n]开始之后的len个元素，并返回新数组. 如果len的长度大于从n开始后数组的剩余长度，则返回的结果与指定数组最后一个元素是一样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>             <span class="c1">#=&gt; [2, 3, 4]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span>             <span class="c1">#=&gt; [3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.使用<strong>at</strong>方法  <br/>
ary.at(n)与ary[n]等价</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>              <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>                   <span class="c1">#=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.使用<strong>slice</strong>方法 <br/>
ary.slice(n..m)与ary[n..m]等价，ary.slice(n&hellip;m)与ary[n&hellip;m]等价，ary.slice(n, len)与ary[n, len]等价</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span>      <span class="c1">#=&gt; [2, 3, 4]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>      <span class="c1">#=&gt; [2, 3]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>     <span class="c1">#=&gt; [2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.使用<strong>values_at</strong>方法
可以通过此方法来获取多个索引的元素, 其用法如下</p>

<pre><code>ary.values_at(n1, n2, ...)
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>               <span class="c1">#=&gt; [1, 3, 5]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>               <span class="c1">#=&gt; [2, 4, nil]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>元素赋值</h4>

<p>使用[],at,slice方法还可以给元素赋值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span>                        <span class="c1">#=&gt; [&quot;a&quot;, 2, 3, 4, 5]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="o">]</span>          <span class="c1">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 4, 5]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;d&quot;</span>                   <span class="c1">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 5]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;e&quot;</span>                  <span class="c1">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>元素插入</h4>

<p>插入元素其实就是对0个元素进行赋值，因此指定[n, 0]后，就会在索引值为n的元素前插入新元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">10</span>                 <span class="c1">#=&gt; [1, 2, 10, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>数组作为集合使用</h4>

<p>交集：取出同时属于两个集合的元素，并创建新的集合</p>

<pre><code>ary = ary1 &amp; ary2
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="n">ary1</span> <span class="o">&amp;</span> <span class="n">ary2</span>          <span class="c1">#=&gt; [1, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>并集：取出两个集合中的所有元素，并创建新的集合</p>

<pre><code>ary = ary1 | ary2
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="n">ary1</span> <span class="o">|</span> <span class="n">ary2</span>          <span class="c1">#=&gt; [1, 2, 3, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>集合的差：把某个集合中属于另外一个集合的元素删除，并创建新的集合</p>

<pre><code>ary = ary1 - ary2
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="n">ary1</span> <span class="o">-</span> <span class="n">ary2</span>          <span class="c1">#=&gt; [2]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注意：连接数组除了可以使用<strong>|</strong>外还可以使用<strong>+</strong>。但是这两种方法返回的结果是不一样的。即使用|相同的元素只有一个，使用+相同的元素会重复存在</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="n">ary1</span> <span class="o">|</span> <span class="n">ary2</span>          <span class="c1">#=&gt; [1, 2, 3, 5]</span>
</span><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="n">ary1</span> <span class="o">+</span> <span class="n">ary2</span>          <span class="c1">#=&gt; [1, 2, 3, 1, 3, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>数组作为队列和栈</h4>

<table>
<thead>
<tr>
<th>          </th>
<th style="text-align:right;"> 对数组开始元素的操作 </th>
<th> 对数组末尾元素的操作 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 追加元素 </td>
<td style="text-align:right;"> unshift              </td>
<td>     push               </td>
</tr>
<tr>
<td> 删除元素 </td>
<td style="text-align:right;"> shift                </td>
<td>     pop                </td>
</tr>
<tr>
<td> 引用元素 </td>
<td style="text-align:right;"> first                </td>
<td>     last               </td>
</tr>
</tbody>
</table>


<p>使用<strong>push</strong>方法和<strong>shift</strong>方法可以实现队列。使用<strong>push</strong>方法和<strong>pop</strong>方法可以实现栈。</p>

<p><strong>shift</strong>方法和<strong>pop</strong>方法不只是获取数组元素，还会把该元素从数组中删除。如果只是想单纯地引用元素，应该是用
<strong>first</strong>和<strong>last</strong>方法。</p>

<p>1.ary.<strong>unshift</strong>(item) <br/>
将item元素添加到数组的开头</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>         <span class="c1">#=&gt; [0, 1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.ary.<strong>push</strong>(item), ary <strong>&lt;&lt;</strong> item  <br/>
<strong>&lt;&lt;</strong>与<strong>push</strong>是等价的方法，在数组的末尾添加新元素item</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>                <span class="c1">#=&gt; [1, 2, 3, 4]</span>
</span><span class='line'><span class="n">ary</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span>                  <span class="c1">#=&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.ary1.<strong>concat</strong>(ary2) <br/>
连接数组ary1和数组ary2. concat是具有破坏性的方法。会将ary2的元素直接插入到ary1数组的后面。<strong>+</strong>也是连接两个数组的方法，但是不具破坏性，会生成新的数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">ary1</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">ary2</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary1</span>                     <span class="c1">#=&gt; [1, 2, 3, 2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注：能够改变对象值的方法称为具有破坏性的方法，比如pop方法、shift方法等。有些方法后面加上<strong>!</strong>的也是破坏性方法</em></p>

<p>4.ary.<strong>compact</strong> 与ary.<strong>compact!</strong> <br/>
从数组ary中删除所有nil元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">compact</span>              <span class="c1">#=&gt; [1, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>5.ary.<strong>delete</strong>(item)和ary.<strong>delete_at</strong>(n)
从数组a中删除item元素。 第2个方法删除ary[n]元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>              
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>                      <span class="c1">#=&gt; [1, 3]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>                      <span class="c1">#=&gt; [3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>6.ary.<strong>delete_if</strong>{ |item| &hellip;}  <br/>
ary.<strong>reject</strong>{ |item| &hellip;} <br/>
ary.<strong>reject!</strong>{ |item| ..}</p>

<p>判断数组ary中的各元素item，如果块的执行结果为真，则从数组ary中删除item。<strong>delete_if</strong>和<strong>reject!</strong>方法都是具有破坏性的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [1, 2]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>7.ary.<strong>slice</strong>(n)  <br/>
ary.<strong>slice</strong>(n..m)  <br/>
ary.<strong>slice!</strong>(n, len)  <br/>
删除数组ary中指定的部分，并返回删除部分的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>            <span class="c1">#=&gt; 5</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span><span class="o">.</span><span class="n">slice!</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span>       <span class="c1">#=&gt; [3, 4]</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span><span class="o">.</span><span class="n">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>       <span class="c1">#=&gt; [2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>8.ary.<strong>uniq</strong>, ary.<strong>uniq!</strong>删除数组ary中重复的元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">uniq</span>         <span class="c1">#=&gt; [1, 2,3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>9.ary.<strong>shift</strong>. 删除数组ary开头的元素，并返回删除的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="n">j</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">shift</span>        <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>          <span class="c1">#=&gt; [2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>10.ary.<strong>pop</strong>. 删除数组ary末尾的元素，并返回删除的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ary</span><span class="o">.</span><span class="n">pop</span>      <span class="c1">#=&gt; 3</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>          <span class="c1">#=&gt; [1, 2]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby修炼之道(11)]]></title>
    <link href="https://stonefishy.github.io/blog/2015/09/28/ruby-practice-11/"/>
    <updated>2015-09-28T10:33:41+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/09/28/ruby-practice-11</id>
    <content type="html"><![CDATA[<p>Ruby中所有表现数据的类型都称为数值类，他们都是<strong>Numeric</strong>的子类。起详尽的类继承结构如下：</p>

<p><img src="assets/images/numeric-inheritance.png" alt="assets/images/numberic-inheritance.png" /></p>

<!-- more -->


<p>Ruby中一般用到得整数都是在<strong>Fixnum</strong>类范围内的，如果超过了Fixnum的范围，Ruby会自动将其转换为<strong>Bignum</strong>类。</p>

<p>正如上图所示，Ruby可以处理有理数和复数，有理数用<strong>Rational</strong>类表示，复数用<strong>Complex</strong>类表示。其定义形式如下：</p>

<p>1.Rational对象</p>

<pre><code>Rational(分子，分母)
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Rational</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>        <span class="c1">#=&gt; (1/3)</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">to_f</span>                       <span class="c1">#=&gt; 0.3333333</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过<em>Rational#to_f</em>方法可将有理数转为Float对象</p>

<p>2.Complex对象</p>

<pre><code>Complex(实数，虚数)
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="no">Complex</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>     <span class="c1">#=&gt; (1+2i)</span>
</span></code></pre></td></tr></table></div></figure>


<p>单纯的数字罗列表示10进制整数。以0b开头的数值表示2进制数，以0或者0o开头的数值表示8进制数，以0d开头的数值表示10进制数，以0x开头的数值表示16进制数。字面量中的_会被自动忽略。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">123</span>            <span class="c1">#=&gt; 123</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1_23</span>            <span class="c1">#=&gt; 123</span>
</span><span class='line'><span class="nb">p</span> <span class="mo">0123</span>        <span class="c1">#=&gt; 83</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">0</span><span class="n">o123</span>        <span class="c1">#=&gt; 83</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">0</span><span class="n">d123</span>        <span class="c1">#=&gt; 123</span>
</span><span class='line'><span class="nb">p</span> <span class="mh">0x123</span>       <span class="c1">#=&gt; 291</span>
</span></code></pre></td></tr></table></div></figure>


<p>Integer对象与Float对象的计算结果为Float对象。</p>

<p>x.<strong>div</strong>(y)
返回x除以y后的商的整数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">div</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">div</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">#=&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>x.<strong>quo</strong>(y)
返回x除以y后的商，如果x、y都是整数则返回Rational对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">quo</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">#=&gt; (5/2)</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">quo</span><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>   <span class="c1">#=&gt; 2.27272727</span>
</span></code></pre></td></tr></table></div></figure>


<p>x.<strong>modulo</strong>(y)
返回x除以y后的余数，与<em>x % y</em>等价</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">modulo</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>            <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">5</span> <span class="o">%</span> <span class="mi">2</span>                <span class="c1">#=&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>x.<strong>divmod</strong>(y)
将x除以y后的商和余数作为数组返回,余数的符号与y的符号一致。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>            <span class="c1">#=&gt; [2, 1]</span>
</span><span class='line'><span class="nb">p</span> <span class="o">-</span><span class="mi">5</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>     <span class="c1">#=&gt; [-3, 1]</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>     <span class="c1">#=&gt; [-3, -1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>x.<strong>remainder</strong>(y)
返回x除以y的余数，结果的符号与x的符号一致</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">remainder</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>     <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">5</span><span class="o">.</span><span class="n">remainder</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span> <span class="o">-</span><span class="mi">5</span><span class="o">.</span><span class="n">remainder</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1">#=&gt; -1</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注：当除数为0时，Integer类会返回错误，而Float类则会返回Infinity（无限大）或者NaN（Not a Number）。</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">0</span>           <span class="c1">#=&gt; ZeroDivisionError</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span>       <span class="c1">#=&gt; Infinity</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">0</span> <span class="o">/</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>           <span class="c1">#=&gt; NaN</span>
</span></code></pre></td></tr></table></div></figure>


<p>针对数值类型，Ruby提供<strong>Math</strong>模块增强数据的处理功能，包括三角函数，对数函数等常用的函数运算方法。通过调用如下方法可得到<strong>Math</strong>模块提供的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Math</span><span class="o">.</span><span class="n">methods</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>to_f</strong>方法可将Integer对象转换为Float对象，<strong>to_i</strong>方法可将Float对象转换为Integer对象，to_i方法会将小数点以后的值去掉。通过使用<strong>round</strong>方法可对小数进行四舍五入的处理.<strong>ceil</strong>方法返回比比原数值大得最小整数，<strong>floor</strong>方法返回比原数值小的最大整数。通过<strong>to_r</strong>和<strong>to_c</strong>方法可将数值转换为Rational对象和Complex对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="n">to_f</span>           <span class="c1">#=&gt; 1.0</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">23</span><span class="o">.</span><span class="n">to_i</span>      <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">23</span><span class="o">.</span><span class="n">round</span>     <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">50</span><span class="o">.</span><span class="n">round</span>     <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">23</span><span class="o">.</span><span class="n">ceil</span>      <span class="c1">#=&gt; 2</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">23</span><span class="o">.</span><span class="n">floor</span>     <span class="c1">#=&gt; 1</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="n">to_r</span>       <span class="c1">#=&gt; (3/2)</span>
</span><span class='line'><span class="nb">p</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="n">to_c</span>       <span class="c1">#=&gt; (1.5+0i)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Integer类按照指定次数循环处理逻辑</p>

<p>执行指定的n次逻辑</p>

<pre><code>n.times do |i|
    逻辑
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ary</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [0, 1, 2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>从<em>from</em>开始循环加对<em>i</em>进行加1处理，直到<em>i</em>等于<em>to</em></p>

<pre><code>from.upto(to) do |i|
    逻辑
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ary</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>从<em>from</em>开始循环对<em>i</em>进行减1处理，直到<em>i</em>等于<em>to</em></p>

<pre><code>from.downto(to) do |i|
    逻辑
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">downto</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ary</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [5, 4, 3, 2, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>从<em>from</em>开始循环对<em>i</em>进行加<em>step</em>处理，直到<em>i</em>等于<em>to</em></p>

<pre><code>from.step(to, step) do |i|
    逻辑
end
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ary</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">ary</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="n">ary</span>              <span class="c1">#=&gt; [1, 3, 5]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
