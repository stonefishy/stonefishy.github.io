<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-05-19T22:59:51+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Destroy Your Website]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/19/destroy-your-website/"/>
    <updated>2015-05-19T12:16:00+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/19/destroy-your-website</id>
    <content type="html"><![CDATA[<p>Ha, Confusion? Don&rsquo;t, it&rsquo;s true. Let me introduce to you how to destroy the website you want. <br/>
Click the below button:<br/>
<button type="button" onclick="javascript:var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='/javascripts/libs/asteroids.min.js';void(0);">Destroy this website</button>  <br/>
Use the <strong>Arrow</strong> key to move the rocket, and press the <strong>Space</strong> key to fire. And also Press and hold <strong>B</strong> to find targets which can be destroy.</p>

<!-- more -->


<p>Visit <a href="http://erkie.github.com/">http://erkie.github.com/</a> and drag the graphic onto your bookmarks bar to use this on whatever webpage you want to destory.</p>

<p>Actually, it&rsquo;s very easy to do this with javascript. <br/>
1. Download this javascript library from <a href="">here</a>, and put it in your project directory. <br/>
2. Adding below code snippet to your element target you want to triggle</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">javascript</span><span class="o">:</span><span class="kd">var</span> <span class="nx">jst</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">jst</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">jst</span><span class="p">);</span>
</span><span class='line'><span class="nx">jst</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="s1">&#39;/javascripts/libs/asteroids.min.js&#39;</span><span class="p">;</span><span class="k">void</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: you need to change the src of the variable <strong>jst</strong> to your javascript library&rsquo;s location, like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jst</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;YOUR LIBRARY LOCATION&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, it&rsquo;s quite simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text - Keyboard Shortcuts for Mac]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/16/sublime-text-keyboard-shortcuts-for-mac/"/>
    <updated>2015-05-16T12:21:06+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/16/sublime-text-keyboard-shortcuts-for-mac</id>
    <content type="html"><![CDATA[<h3>Editor</h3>

<table>
<thead>
<tr>
<th> Keypress     </th>
<th> Command                                                                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + X        </td>
<td> Cut line                                                                 </td>
</tr>
<tr>
<td> ⌘ + ↩        </td>
<td> Insert line after                                                        </td>
</tr>
<tr>
<td> ⌘ + ⇧ + ↩    </td>
<td> Insert line before                                                       </td>
</tr>
<tr>
<td> ⌘ + ⌃ + ↑    </td>
<td> Move line/selection up                                                   </td>
</tr>
<tr>
<td> ⌘ + ⌃ + ↓    </td>
<td> Move line/selection down                                                 </td>
</tr>
<tr>
<td> ⌘ + L        </td>
<td> Select line - Repeat to select next lines                                </td>
</tr>
<tr>
<td> ⌘ + D        </td>
<td> Select word - Repeat to select next occurrence                           </td>
</tr>
<tr>
<td> ⌃ + ⌘ + G    </td>
<td> Select all occurrences of current selection                              </td>
</tr>
<tr>
<td> ⌃ + ⇧ + ↑    </td>
<td> Extra cursor on the line above                                           </td>
</tr>
<tr>
<td> ⌃ + ⇧ + ↓    </td>
<td> Extra cursor on the line below                                           </td>
</tr>
<tr>
<td> ⌃ + M        </td>
<td> Jump to closing parentheses Repeat to jump to opening parentheses        </td>
</tr>
<tr>
<td> ⌃ + ⇧ + M    </td>
<td> Select all contents of the current parentheses                           </td>
</tr>
<tr>
<td> ⌃ + A        </td>
<td> Move to beginning of line                                                </td>
</tr>
<tr>
<td> ⌃ + E        </td>
<td> Move to end of line                                                      </td>
</tr>
<tr>
<td> ⌘ + K, ⌘ + K </td>
<td> Delete from cursor to end of line                                        </td>
</tr>
<tr>
<td> ⌘ + K + ⌫    </td>
<td> Delete from cursor to start of line                                      </td>
</tr>
<tr>
<td> ⌘ + ]        </td>
<td> Indent current line(s)                                                   </td>
</tr>
<tr>
<td> ⌘ + [        </td>
<td> Un-indent current line(s)                                                </td>
</tr>
<tr>
<td> ⌘ + ⇧ + D    </td>
<td> Duplicate line(s)                                                        </td>
</tr>
<tr>
<td> ⌘ + J        </td>
<td> Join line below to the end of the current line                           </td>
</tr>
<tr>
<td> ⌘ + /        </td>
<td> Comment/un-comment current line                                          </td>
</tr>
<tr>
<td> ⌘ + ⌥ + /    </td>
<td> Block comment current selection                                          </td>
</tr>
<tr>
<td> ⌘ + Y        </td>
<td> Redo, or repeat last keyboard shortcut command                           </td>
</tr>
<tr>
<td> ⌘ + ⇧ + V    </td>
<td> Paste and indent correctly                                               </td>
</tr>
<tr>
<td> ⌃ + Space    </td>
<td> Select next auto-complete suggestion                                     </td>
</tr>
<tr>
<td> ⌃ + U        </td>
<td> Soft undo; jumps to your last change before undoing change when repeated </td>
</tr>
<tr>
<td> ⌃ + ⇧ + Up   </td>
<td> Column selection up                                                      </td>
</tr>
<tr>
<td> ⌃ + ⇧ + Down </td>
<td> Column selection down                                                    </td>
</tr>
<tr>
<td> ⌃ + ⇧ + W    </td>
<td> Wrap Selection in html tag                                               </td>
</tr>
<tr>
<td> ⌃ + ⇧ + K    </td>
<td> Delete current line of cursor                                            </td>
</tr>
</tbody>
</table>


<!-- more -->


<hr />

<h3>Navigation</h3>

<table>
<thead>
<tr>
<th> Keypress       </th>
<th> Command                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + P or ⌘ + T </td>
<td> Quick-open files by name  </td>
</tr>
<tr>
<td> ⌘ + R          </td>
<td> Goto symbol               </td>
</tr>
<tr>
<td> ⌃ + G          </td>
<td> Goto line in current file </td>
</tr>
</tbody>
</table>


<hr />

<h3>General</h3>

<table>
<thead>
<tr>
<th> Keypress      </th>
<th> Command                      </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + ⇧ + P     </td>
<td> Command Palette              </td>
</tr>
<tr>
<td> ⌃ + `         </td>
<td> Python Console               </td>
</tr>
<tr>
<td> ⌃ + ⌘ + F     </td>
<td> Toggle fullscreen mode       </td>
</tr>
<tr>
<td> ⌃ + ⇧ + ⌘ + F </td>
<td> Toggle distraction-free mode </td>
</tr>
<tr>
<td> ⌘ + K, ⌘ + B  </td>
<td> Toggle side bar              </td>
</tr>
<tr>
<td> ⌃ + ⇧ + P     </td>
<td> Show scope in status bar     </td>
</tr>
</tbody>
</table>


<hr />

<h3>Find/Replace</h3>

<table>
<thead>
<tr>
<th> Keypress  </th>
<th> Command       </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + F     </td>
<td> Find          </td>
</tr>
<tr>
<td> ⌘ + ⌥ + F </td>
<td> Replace       </td>
</tr>
<tr>
<td> ⌘ + ⇧ + F </td>
<td> Find in files </td>
</tr>
</tbody>
</table>


<hr />

<h3>Scrolling</h3>

<table>
<thead>
<tr>
<th> Keypress </th>
<th> Command                                </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌃ + V    </td>
<td> Scroll down one page                   </td>
</tr>
<tr>
<td> ⌃ + L    </td>
<td> Center current line vertically in page </td>
</tr>
<tr>
<td> ⌘ + Down </td>
<td> Scroll to end of file                  </td>
</tr>
<tr>
<td> ⌘ + Up   </td>
<td> Scroll to start of file                </td>
</tr>
</tbody>
</table>


<hr />

<h3>Tabs</h3>

<table>
<thead>
<tr>
<th> Keypress    </th>
<th> Command                                       </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + ⇧ + t   </td>
<td> Open last closed tab                          </td>
</tr>
<tr>
<td> ⌘ + [NUM]   </td>
<td> Jump to tab in current group where num is 1-9 </td>
</tr>
<tr>
<td> ⌘ + 0       </td>
<td> Jump to 10th tab in current group             </td>
</tr>
<tr>
<td> ⌘ + ⇧ + [   </td>
<td> Cycle left through tabs                       </td>
</tr>
<tr>
<td> ⌘ + ⇧ + ]   </td>
<td> Cycle right through tabs                      </td>
</tr>
<tr>
<td> ^ + Tab     </td>
<td> Cycle up through recent tabs                  </td>
</tr>
<tr>
<td> ⇧ + ^ + Tab </td>
<td> Cycle down through recent tabs                </td>
</tr>
</tbody>
</table>


<hr />

<h3>Split window</h3>

<table>
<thead>
<tr>
<th> Keypress      </th>
<th> Command                                       </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + ⌥ + 1     </td>
<td> Revert view to single column                  </td>
</tr>
<tr>
<td> ⌘ + ⌥ + 2     </td>
<td> Split view into two columns                   </td>
</tr>
<tr>
<td> ⌘ + ⌥ + 3     </td>
<td> Split view into three columns                 </td>
</tr>
<tr>
<td> ⌘ + ⌥ + 4     </td>
<td> Split view into four columns                  </td>
</tr>
<tr>
<td> ⌘ + ⌥ + 5     </td>
<td> Set view to grid (4 groups)                   </td>
</tr>
<tr>
<td> ⌃ + [NUM]     </td>
<td> Jump to group where num is 1-4                </td>
</tr>
<tr>
<td> ⌃ + ⇧ + [NUM] </td>
<td> Move file to specified group where num is 1-4 </td>
</tr>
</tbody>
</table>


<hr />

<h3>BookMark</h3>

<table>
<thead>
<tr>
<th> Keypress   </th>
<th> Command           </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + F2     </td>
<td> Toggle bookmark   </td>
</tr>
<tr>
<td> F2         </td>
<td> Next bookmark     </td>
</tr>
<tr>
<td> ⇧ + F2     </td>
<td> Previous bookmark </td>
</tr>
<tr>
<td> ⇧ + ⌘ + F2 </td>
<td> Clear bookmarks   </td>
</tr>
</tbody>
</table>


<hr />

<h3>Text manipulation</h3>

<table>
<thead>
<tr>
<th> Keypress                 </th>
<th> Command                       </th>
</tr>
</thead>
<tbody>
<tr>
<td> ⌘ + K, ⌘ + U             </td>
<td> Transform to Uppercase        </td>
</tr>
<tr>
<td> ⌘ + K, ⌘ + L             </td>
<td> Transform to Lowercase        </td>
</tr>
<tr>
<td> ⌘ + ⌃ + up, ⌘ + ⌃ + down </td>
<td> Clip text upwards / downwards </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs - angular.extend()]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/16/angularjs-angular-dot-extend/"/>
    <updated>2015-05-16T11:08:31+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/16/angularjs-angular-dot-extend</id>
    <content type="html"><![CDATA[<p>The <code>angular.extend()</code> function has very powerful to copy object to another object, including all of properties from the source object(s).</p>

<h3>Usage</h3>

<blockquote><p><code>angular.extend(dst, src);</code></p>

<p>dst:        <strong>destination object</strong><br/>
src:        <strong>source object(s)</strong></p>

<p>return:     <strong>refercen to dst object</strong></p></blockquote>

<!-- more -->


<h3>Example</h3>

<p>Let&rsquo;s understand how to use it with example instance. Create a normal controller which contains user&rsquo;s name, gender and age. And create a method to get the full description of the user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">Module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,[])</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UserController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;angular&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">gender</span> <span class="o">=</span> <span class="s1">&#39;male&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="s1">&#39;2&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">getDescription</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;My name is &quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; and I am &quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">gender</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">age</span> <span class="o">+</span>  <span class="s2">&quot; years old&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use angular.extend function to do like above functionality, see below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;UserController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;angular&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">gender</span> <span class="o">:</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">age</span> <span class="o">:</span> <span class="s1">&#39;2&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">getDescription</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;My name is &quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; and I am &quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">gender</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">age</span> <span class="o">+</span> <span class="s2">&quot; years old&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>And also we can use angular.extend() function to implement mixins. Let&rsquo;s consider the below contrived Logging class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Logger</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">debug</span> <span class="o">?</span> <span class="nx">msg</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.</p>

<p>Okay, now we create a controler called LoggerController, and &ldquo;mixin&rdquo; Logger class to it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;LoggerController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Logger</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">print</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>In LoggerController, we &ldquo;mixin&rdquo; the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Jdbc in Spring]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/05/how-to-use-jdbc-in-spring/"/>
    <updated>2015-05-05T16:31:53+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/05/how-to-use-jdbc-in-spring</id>
    <content type="html"><![CDATA[<p>As we know, we can use <code>jdbc</code> to access database in java programming. And now let us use <code>jdbc</code> in spring. The <code>spring framework</code> reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are <code>org.springframework.jdbc.datasource.DriverManagerDataSource</code> and <code>org.springframework.jdbc.core.JdbcTemplate</code>.</p>

<p>And here we use the <code>hsqldb</code> to act as our memory database. You can go to <a href="http://hsqldb.org/">here</a> to look at it. we use the <code>Maven</code> tools to management our project. the dependencies is:</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependencies&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>      &lt;dependency&gt;
</span><span class='line'>          &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;
</span><span class='line'>          &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
</span><span class='line'>          &lt;version&gt;1.8.0.10&lt;/version&gt;
</span><span class='line'>      &lt;/dependency&gt;
</span><span class='line'>&lt;/dependencies&gt;</span></code></pre></td></tr></table></div></figure>


<p>The spring configure file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
</span><span class='line'>          "http://www.springframework.org/dtd/spring-beans-2.0.dtd"&gt;
</span><span class='line'>          
</span><span class='line'>&lt;beans&gt;
</span><span class='line'>
</span><span class='line'>  &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
</span><span class='line'>      &lt;property name="driverClassName" value="org.hsqldb.jdbcDriver"/&gt;
</span><span class='line'>      &lt;property name="url" value="jdbc:hsqldb:mem:MyDB"/&gt;
</span><span class='line'>      &lt;property name="username" value="sa"/&gt;
</span><span class='line'>      &lt;property name="password" value=""/&gt;
</span><span class='line'>  &lt;/bean&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
</span><span class='line'>       &lt;constructor-arg&gt;
</span><span class='line'>          &lt;ref bean="dataSource"/&gt;
</span><span class='line'>       &lt;/constructor-arg&gt;    
</span><span class='line'>  &lt;/bean&gt;
</span><span class='line'>  
</span><span class='line'>    &lt;bean id="createTable" class="java4s.SpringJdbcCreateTable"&gt;
</span><span class='line'>          &lt;property name="jt"&gt;
</span><span class='line'>              &lt;ref bean="jdbcTemplate"/&gt;
</span><span class='line'>          &lt;/property&gt;
</span><span class='line'>  &lt;/bean&gt;
</span><span class='line'> 
</span><span class='line'>&lt;/beans&gt;  </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>we have a SpringJdbcCreateTable class to accesss database, this class has <code>JdbcTemplate</code> property,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">JdbcTemplate</span> <span class="n">jt</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setJt</span><span class="o">(</span><span class="n">JdbcTemplate</span> <span class="n">jt</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">jt</span> <span class="o">=</span> <span class="n">jt</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>we use spring bean to inject value to this property. And you will see it in above spring configure file.</p>

<p>create table, the <code>execute</code> method doesn&rsquo;t return value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createTable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">jt</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;CREATE TABLE user(id int, name varchar(10), age int)&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// execute() returns void</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;table created&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>insert data, using the <code>update</code> method to insert data, this method will return how many rows have been inserted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">jt</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;INSERT INTO user VALUES (99, &#39;user_99&#39;, 49)&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">showDatas</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s row inserted&quot;</span><span class="o">,</span> <span class="n">k</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>update data, using the <code>update</code> method to update data, it will return how many rows are affected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">jt</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;UPDATE user set name=&#39;user_new&#39; where name=&#39;user_99&#39;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">showDatas</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s row updated&quot;</span><span class="o">,</span> <span class="n">k</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>delete data, also using the <code>update</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteData</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">jt</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;DELETE from user where name=&#39;user_new&#39;&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">showDatas</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s row deleted&quot;</span><span class="o">,</span> <span class="n">k</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>query data, the jdbctemplate has many query interfaces. Here we use <code>queryForRowSet</code> method to get the data by condition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">showDatas</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;|  ID |  NAME    |  AGE  |&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">SqlRowSet</span> <span class="n">rowSet</span> <span class="o">=</span> <span class="n">jt</span><span class="o">.</span><span class="na">queryForRowSet</span><span class="o">(</span><span class="s">&quot;SELECT * FROM user&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">rowSet</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rowSet</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">rowSet</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">rowSet</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">String</span>
</span><span class='line'>              <span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;|  %s  |  %s  |  %s   |&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>        
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>okay, to so far, let us call them in main entrance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="n">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;spconfig.xml&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">SpringJdbcCreateTable</span> <span class="n">st</span> <span class="o">=(</span><span class="n">SpringJdbcCreateTable</span><span class="o">)</span><span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&quot;createTable&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>  <span class="n">st</span><span class="o">.</span><span class="na">createTable</span><span class="o">();</span>
</span><span class='line'>  <span class="n">st</span><span class="o">.</span><span class="na">initSomeDatas</span><span class="o">();</span>
</span><span class='line'>  <span class="n">st</span><span class="o">.</span><span class="na">insertData</span><span class="o">();</span>
</span><span class='line'>  <span class="n">st</span><span class="o">.</span><span class="na">updateData</span><span class="o">();</span>
</span><span class='line'>  <span class="n">st</span><span class="o">.</span><span class="na">deleteData</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look, it&rsquo;s very easy to access database with spring framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Give Me a Cup of Coffeescript]]></title>
    <link href="http://stonefishy.github.io/blog/2015/03/19/give-me-a-cup-of-coffeescript/"/>
    <updated>2015-03-19T15:47:18+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/03/19/give-me-a-cup-of-coffeescript</id>
    <content type="html"><![CDATA[<p><img src="http://stonefishy.github.io/assets/images/coffee-script-logo.png" width="200" height="100"> is programming language, which is built on top of <code>JavaScript</code>. CoffeeScript compiles into JavaScript that is efficient and consistent with many best practices. And it offers a clean syntax that should appeal to anyone who likes <code>Python</code> or <code>Ruby</code>.</p>

<p>Actually, The <code>CoffeeScript</code> is just a JavaScript. So you can use any exsiting JavaScript library seamlessly from CoffeeScript. And both <code>client-side</code> and <code>server-side</code> can be written by <code>CoffeeScript</code>. So CoffeeScript can write entire web application completely, not like JavaScript only write client-side.</p>

<!-- more -->


<p></p>

<p>The CoffeeScript is a <code>Node.js</code> package, so you need to install it with <code>Node Package Manager</code>. There assume you have installed node.js. You can watch <a href="https://nodejs.org/">here</a> to see how to install node.js if you dont&#8217; know it. Putting below commands to install CoffeeScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">g</span> <span class="nx">coffee</span><span class="o">-</span><span class="nx">script</span>
</span></code></pre></td></tr></table></div></figure>


<p>CoffeeScript supports many commands to let you build your application. You just need to input below command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">coffee</span> <span class="o">-</span><span class="nx">help</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>It will print awesome useful content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Usage</span><span class="o">:</span> <span class="nx">coffee</span> <span class="p">[</span><span class="nx">options</span><span class="p">]</span> <span class="nx">path</span><span class="o">/</span><span class="nx">to</span><span class="o">/</span><span class="nx">script</span><span class="p">.</span><span class="nx">coffee</span> <span class="o">--</span> <span class="p">[</span><span class="nx">args</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">If</span> <span class="nx">called</span> <span class="nx">without</span> <span class="nx">options</span><span class="p">,</span> <span class="err">`</span><span class="nx">coffee</span><span class="err">`</span> <span class="nx">will</span> <span class="nx">run</span> <span class="nx">your</span> <span class="nx">script</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">-</span><span class="nx">b</span><span class="p">,</span> <span class="o">--</span><span class="nx">bare</span>         <span class="nx">compile</span> <span class="nx">without</span> <span class="nx">a</span> <span class="nx">top</span><span class="o">-</span><span class="nx">level</span> <span class="kd">function</span> <span class="nx">wrapper</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">c</span><span class="p">,</span> <span class="o">--</span><span class="nx">compile</span>      <span class="nx">compile</span> <span class="nx">to</span> <span class="nx">JavaScript</span> <span class="nx">and</span> <span class="nx">save</span> <span class="nx">as</span> <span class="p">.</span><span class="nx">js</span> <span class="nx">files</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">e</span><span class="p">,</span> <span class="o">--</span><span class="nb">eval</span>         <span class="nx">pass</span> <span class="nx">a</span> <span class="nx">string</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">command</span> <span class="nx">line</span> <span class="nx">as</span> <span class="nx">input</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">h</span><span class="p">,</span> <span class="o">--</span><span class="nx">help</span>         <span class="nx">display</span> <span class="k">this</span> <span class="nx">help</span> <span class="nx">message</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">i</span><span class="p">,</span> <span class="o">--</span><span class="nx">interactive</span>  <span class="nx">run</span> <span class="nx">an</span> <span class="nx">interactive</span> <span class="nx">CoffeeScript</span> <span class="nx">REPL</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">j</span><span class="p">,</span> <span class="o">--</span><span class="nx">join</span>         <span class="nx">concatenate</span> <span class="nx">the</span> <span class="nx">source</span> <span class="nx">CoffeeScript</span> <span class="nx">before</span> <span class="nx">compiling</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">m</span><span class="p">,</span> <span class="o">--</span><span class="nx">map</span>          <span class="nx">generate</span> <span class="nx">source</span> <span class="nx">map</span> <span class="nx">and</span> <span class="nx">save</span> <span class="nx">as</span> <span class="p">.</span><span class="nx">js</span><span class="p">.</span><span class="nx">map</span> <span class="nx">files</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">n</span><span class="p">,</span> <span class="o">--</span><span class="nx">nodes</span>        <span class="nx">print</span> <span class="nx">out</span> <span class="nx">the</span> <span class="nx">parse</span> <span class="nx">tree</span> <span class="nx">that</span> <span class="nx">the</span> <span class="nx">parser</span> <span class="nx">produces</span>
</span><span class='line'>      <span class="o">--</span><span class="nx">nodejs</span>       <span class="nx">pass</span> <span class="nx">options</span> <span class="nx">directly</span> <span class="nx">to</span> <span class="nx">the</span> <span class="s2">&quot;node&quot;</span> <span class="nx">binary</span>
</span><span class='line'>      <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">header</span>    <span class="nx">suppress</span> <span class="nx">the</span> <span class="s2">&quot;Generated by&quot;</span> <span class="nx">header</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">o</span><span class="p">,</span> <span class="o">--</span><span class="nx">output</span>       <span class="nx">set</span> <span class="nx">the</span> <span class="nx">output</span> <span class="nx">directory</span> <span class="k">for</span> <span class="nx">compiled</span> <span class="nx">JavaScript</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">p</span><span class="p">,</span> <span class="o">--</span><span class="nx">print</span>        <span class="nx">print</span> <span class="nx">out</span> <span class="nx">the</span> <span class="nx">compiled</span> <span class="nx">JavaScript</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">s</span><span class="p">,</span> <span class="o">--</span><span class="nx">stdio</span>        <span class="nx">listen</span> <span class="k">for</span> <span class="nx">and</span> <span class="nx">compile</span> <span class="nx">scripts</span> <span class="nx">over</span> <span class="nx">stdio</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">l</span><span class="p">,</span> <span class="o">--</span><span class="nx">literate</span>     <span class="nx">treat</span> <span class="nx">stdio</span> <span class="nx">as</span> <span class="nx">literate</span> <span class="nx">style</span> <span class="nx">coffee</span><span class="o">-</span><span class="nx">script</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">t</span><span class="p">,</span> <span class="o">--</span><span class="nx">tokens</span>       <span class="nx">print</span> <span class="nx">out</span> <span class="nx">the</span> <span class="nx">tokens</span> <span class="nx">that</span> <span class="nx">the</span> <span class="nx">lexer</span><span class="o">/</span><span class="nx">rewriter</span> <span class="nx">produce</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">v</span><span class="p">,</span> <span class="o">--</span><span class="nx">version</span>      <span class="nx">display</span> <span class="nx">the</span> <span class="nx">version</span> <span class="nx">number</span>
</span><span class='line'>  <span class="o">-</span><span class="nx">w</span><span class="p">,</span> <span class="o">--</span><span class="nx">watch</span>        <span class="nx">watch</span> <span class="nx">scripts</span> <span class="k">for</span> <span class="nx">changes</span> <span class="nx">and</span> <span class="nx">rerun</span> <span class="nx">commands</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Let&rsquo;s give a example, how to use CoffeeScript to solve a mathematics problem. Here we will solve the first mathematical problem of <code>Project Eluar</code>. The problem is below:</p>

<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.</p></blockquote>

<p>And now we solve this problem with CoffeeScript elegantly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">([</span><span class="mi">1</span><span class="p">..</span><span class="mi">999</span><span class="p">].</span><span class="nx">filter</span> <span class="nf">(x) -&gt;</span> <span class="nx">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">is</span> <span class="mi">0</span> <span class="o">or</span> <span class="nx">x</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">is</span> <span class="mi">0</span><span class="p">).</span><span class="nx">reduce</span> <span class="nf">(x, y) -&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see, just one code line. It&rsquo;s very concise and elegant. Not like JavaScript need to defined many variables and functions to solve it.</p>

<p>Cheers,  I think you will love it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 - New Common Elements]]></title>
    <link href="http://stonefishy.github.io/blog/2015/03/03/html5-new-common-elements/"/>
    <updated>2015-03-03T17:13:53+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/03/03/html5-new-common-elements</id>
    <content type="html"><![CDATA[<p>In <code>HTML5</code>, It adds a mount of elements, these elements are more easier to present the document in browser.</p>

<h3>Structure element</h3>

<p>Before <code>HTML5</code>, we just use <code>div</code> tag to act as the <code>Document Structure Element</code>, but now the <code>HTML5</code> supports more elements like <code>section</code>, <code>article</code>, <code>nav</code>, <code>aside</code>, <code>header</code>, <code>footer</code> and so on.</p>

<!-- more -->


<p></p>

<h5>article</h5>

<p><code>article</code> use to present an entire, independent article. We should use it when we need to present a entire, independent document content. <br/>
It can contain <code>header</code> tag to define the header of the article.    <br/>
It can contain <code>footer</code> tag to define the footer of the article.  <br/>
It can contain <code>section</code> tag to split content to multiple paragraphs.   <br/>
Also, it can be nested by itself.</p>

<h5>section</h5>

<p><code>section</code> splits the page content to multiple blocks, and it usually contains title and content. And here the title stand for <code>h1</code>&hellip;.<code>h6</code> tag. <code>section</code> can contains <code>article</code> and <code>section</code> tag.</p>

<h5>nav</h5>

<p><code>nav</code> tag use to define the navigation bar, include the top of page, the left or right side, and the bottom and so on.</p>

<h5>aside</h5>

<p>It&rsquo;s recommend to use it to present the side of page with <code>CSS</code>.</p>

<h5>header</h5>

<p>The <code>header</code> tag use to define the header of the <code>article</code>, and it can contain multiple title tags (<code>h1</code>&hellip;.<code>h6</code>) with <code>hgroup</code> tag. And also the common tags like <code>p</code>, <code>span</code> can be nested in it.</p>

<h5>hgroup</h5>

<p>It&rsquo;s mainaly use for including multiple title tag.</p>

<h5>footer</h5>

<p>The footer of page, use to contains foot information, copy right and author related stuff.</p>

<h5>figure</h5>

<p><code>figure</code> tag express an independant image area, it may contain one or more images， in addition to this tag can contain a new tag <code>figcaption</code> to express the title of images.</p>

<h3>Semantic related elemnent</h3>

<h5>mark</h5>

<p>It is mark some information need to be noticed.</p>

<h4>time</h4>

<p>It presents some content want to be time, date. Setting the <code>datetime</code> attribute&rsquo;s value to present which date formatter you want.</p>

<h4>Special function element</h4>

<h4>meter</h4>

<p><code>meter</code> tag express an as known maxium and minimum counter. It has many attributes to set. <code>value</code>, <code>min</code>, <code>max</code>, <code>low</code>, <code>high</code>, <code>optimum</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>      current speed of car: <span class="nt">&lt;meter</span> <span class="na">id=</span><span class="s">&quot;meter&quot;</span> <span class="na">max=</span><span class="s">&quot;200&quot;</span> <span class="na">min=</span><span class="s">&quot;0&quot;</span> <span class="na">low=</span><span class="s">&quot;0&quot;</span> <span class="na">high=</span><span class="s">&quot;180&quot;</span> <span class="na">value=</span><span class="s">&quot;150&quot;</span><span class="nt">&gt;</span>kilometre/hour
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://stonefishy.github.io/assets/images/meter-tag.png" width="300" height="80"></p>

<h4>progress</h4>

<p><code>progress</code> tag use to express an progress bar. It has two attributes, one is <code>max</code>, another is <code>value</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>   the progress of un-finished task: <span class="nt">&lt;progress</span> <span class="na">id=</span><span class="s">&quot;progress&quot;</span> <span class="na">max=</span><span class="s">&quot;1&quot;</span> <span class="na">value=</span><span class="s">&quot;0.4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://stonefishy.github.io/assets/images/progress-tag.png" width="350" height="100"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML5 - New Common Attributes]]></title>
    <link href="http://stonefishy.github.io/blog/2015/03/02/html5-new-common-attributes/"/>
    <updated>2015-03-02T20:33:14+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/03/02/html5-new-common-attributes</id>
    <content type="html"><![CDATA[<p><code>HTML5</code> adds new common attributes for original <code>HTML</code> Tag, and these attributes enhances the <code>HTML</code> elements&rsquo;s function.</p>

<h3>contentEditable</h3>

<p>The <code>contentEditable</code> attribute supports most tags. The browser allows user edits the content of element if this attribute is set to true. These elements is not like input or textarea tags. They are not support editable content like table, div, span and so on these tags.</p>

<!-- more -->


<p><code>contentEditable</code> attribute can be inherited by children tags. If the contentEditable is true, all children tags&rsquo;s contentEditable will be true except we define it to false.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>contentEditable<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;style&gt;</span>
</span><span class='line'>        <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">width</span><span class="o">:</span> <span class="m">240px</span><span class="p">;</span>
</span><span class='line'>            <span class="k">height</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nt">table</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">width</span><span class="o">:</span><span class="k">inherit</span><span class="p">;</span>
</span><span class='line'>            <span class="k">height</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>            <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">table</span> <span class="o">&gt;</span> <span class="nt">tr</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nc">.myDiv</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">width</span><span class="o">:</span><span class="k">inherit</span><span class="p">;</span>
</span><span class='line'>            <span class="k">height</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>            <span class="k">line-height</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>            <span class="k">margin-top</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'>            <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">turnOnContentEditable</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;target&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">target</span><span class="p">.</span><span class="nx">contentEditable</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>   <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;target&quot;</span> <span class="na">contentEditable=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>       <span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>           <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>               <span class="nt">&lt;td&gt;</span>Java<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>               <span class="nt">&lt;td&gt;</span>CSharp<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>           <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>           <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>               <span class="nt">&lt;td&gt;</span>Javascript<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>               <span class="nt">&lt;td&gt;</span>Python<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>           <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;myDiv&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>           This is Div Tag
</span><span class='line'>       <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;turnOnContentEditable();&quot;</span><span class="na">value=</span><span class="s">&quot;Turn On Edit Mode&quot;</span><span class="nt">&gt;&lt;/input&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The root div is can&rsquo;t be edited by default. when we click button to turn on contentEditable attribute. all children tags of this tag can be edited.</p>

<p><code>contentEditable</code> attribute is false: <br/>
<img src="http://stonefishy.github.io/assets/images/contentEditable-before.png" width="300" height="350"></p>

<p><code>contentEditable</code> attribute is true: <br/>
<img src="http://stonefishy.github.io/assets/images/contentEditable-after.png" width="300" height="350"></p>

<h3>designMode</h3>

<p><code>designMode</code> attribute is actually entire document&rsquo;s <code>contentEditable</code>. If we turn on the <code>designMode</code> attribute of the entire page, all the elements which supports <code>contentEditable</code> attributes can be edited. It is false by default.</p>

<p>We can just use javascript to turn on the document&rsquo;s <code>designMode</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">designMode</span> <span class="o">=</span> <span class="s2">&quot;on&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>hidden</h3>

<p><code>HTML5</code> supports <code>hidden</code> attribute for all elements. The <code>hidden</code> attribute can be set to &lsquo;false&rsquo; and &lsquo;true&rsquo; both values. The browser doesn&rsquo;t display the element when <code>hidden = 'true'</code>.</p>

<p>The <code>hidden = 'true'</code> actually like we write <code>display:none</code> is <code>CSS</code> file. And also we can get its value by <code>hidden</code>.</p>

<h3>spellcheck</h3>

<p><code>HTML5</code> add new attributes <code>spellcheck</code> for editable elements like <code>input</code>,<code>textarea</code>, &hellip; The <code>spellcheck</code> can be set to &lsquo;true&rsquo;, &lsquo;false&rsquo; both values. The browser will check the content user input and prompt error message for spell error words when it is set to &lsquo;true&rsquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">spellcheck=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
<img src="http://stonefishy.github.io/assets/images/spellcheck.png" width="300" height="80"></p>

<blockquote><p><em>Note: Supports <code>spellcheck</code> attribute&rsquo;s browsers include <code>Chrome</code>, <code>Opera</code>, <code>Safari</code>, the <code>IE</code>, <code>FireFox</code> doesn&rsquo;t support it for now.</em></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Nice Web Design Tool - Bracket]]></title>
    <link href="http://stonefishy.github.io/blog/2015/03/02/a-nice-web-design-tool-bracket/"/>
    <updated>2015-03-02T17:19:17+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/03/02/a-nice-web-design-tool-bracket</id>
    <content type="html"><![CDATA[<p><code>Bracket</code> is open source web design text editor, it focus with visual tools and preprocesssor support. It is easy to design web page in the browser, we can get the page layout in time when we change the html, css, javascript. We don&rsquo;t need to save the file and refresh the browser. That&rsquo;s so convenience.</p>

<!-- more -->


<p><code>Bracket</code> supports the element highlight on the page in time when you put your mouse cursor on the specific html tag.</p>

<p>Absolutly, I recommend you to design you website with it. You can download it from <a href="https://github.com/adobe/brackets/releases/download/release-1.1%2Beb4/Brackets.1.1.Extract.dmg">here</a> for Mac OS. Also you can download it for other platform from <a href="https://github.com/adobe/brackets/releases">this</a>.</p>

<p>The Extract for <code>Brackets</code> (Preview) extension lets you pull out design information from a PSD including colors, fonts, gradients, and measurement information as clean, minimal CSS via contextual code hints. You can also extract layers as images, use information from the PSD to define preprocessor variables, and easily get dimensions between objects. This is very benefit for web designer which want to design web page with PSD source file.</p>

<p>The <code>Bracket</code> has three big features, they are below:</p>

<ul>
<li><p><strong>Inline Editor</strong> <br/>
We don&rsquo;t need to jump between file tabs when we want to change the style of the specific ID.
Just put the mouse cursor on that ID and press <code>Command</code>/<code>Ctrl + E</code>, <code>Bracket</code> will show you all the CSS selectors with that ID in an inline window so you can work on your code side-by-side without any popups.</p></li>
<li><p><strong>Live Preview</strong> <br/>
Get a real-time connection to your browser. Make changes to CSS and HTML and you&rsquo;ll instantly see those changes on the page.</p></li>
<li><p><strong>Preprocessor Support</strong> <br/>
  With Brackets you can use <code>Quick Edit</code> and <code>Live Highlight</code> with your <code>LESS</code> and <code>SCSS</code> files which will make working with them easier than ever.</p></li>
</ul>


<p>With <code>Bracket</code>, you can improve your working efficiency and save your time. This web design tool is so power, and the offical website is <a href="http://brackets.io/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guave - Immutable Collection]]></title>
    <link href="http://stonefishy.github.io/blog/2015/02/13/guave-immutable-collection/"/>
    <updated>2015-02-13T14:58:17+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/02/13/guave-immutable-collection</id>
    <content type="html"><![CDATA[<p><code>Immutable</code> that means it can not be changed. Let&rsquo;s get example to see what&rsquo;s different with <code>mutable</code> objects.</p>

<p>Normal mutable collections:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//define a mutable list</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mutableList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//modify the first item in the mutable list</span>
</span><span class='line'><span class="c1">//will print [aa, b, c]</span>
</span><span class='line'><span class="n">mutableList</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;aa&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mutableList</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<p>Immutable collections:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//define a immutable list</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">immutableList</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//can not modify the first item in the immutable list, any change item operation is unsuppproted.</span>
</span><span class='line'><span class="c1">//it will throw UnsupportedOperationException</span>
</span><span class='line'><span class="n">immutableList</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;aa&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">immutableList</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
From above example, we can get the conclusion is that immutable collections doesn&rsquo;t support any changing content API. So it will throw <code>UnsupportedOperationException</code> when you try to modify it.</p>

<h3>What&rsquo;s advantage of Immutable Objects</h3>

<p>According to Guava Offical explain about <code>Immutable Objects</code>, there have four and more advantages of Immutable Objects:</p>

<ul>
<li>Safe for use by untrusted libraries.</li>
<li><code>Thread-Safe</code>: can be used by many threads with no risk of race conditions.</li>
<li>Doesn&rsquo;t need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.</li>
<li>Can be used as a constant, with the expectation that it will remain fixed.</li>
</ul>


<p>Making immutable copies of objects is a good defensive programming technique, and <code>Guava</code>provides it.</p>

<blockquote><p><em>Note:</em> Each of the <code>Guava</code> immutable collection implementations reject <em>null</em> values.</p></blockquote>

<h3>How create it</h3>

<p>An ImmutableXXX collection can be created in several ways:</p>

<ul>
<li>Using the <code>copyOf</code> method, like <code>ImmutableList.copyOf(collection)</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">mutableList</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using the <code>of</code> method, like <code>ImmutableList.of("a", "b", "c")</code> or <code>ImmutableMap.of("a", 1, "b", 2)</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="s">&quot;c&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Using a <code>Builder</code>, for example:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">builder</span><span class="o">()</span>
</span><span class='line'>                                  <span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">mutableList</span><span class="o">)</span>
</span><span class='line'>                                  <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>All immutable collections provide an ImmutableList view via <code>asList()</code>, so &ndash; for example &ndash; even if you have data stored as an ImmutableSortedSet, you can get the kth smallest element with <code>sortedSet.asList().get(k)</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//get second item. print b</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">immutableList</span><span class="o">.</span><span class="na">asList</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understading MVC, MVP and MVVM Design Patterns]]></title>
    <link href="http://stonefishy.github.io/blog/2015/02/06/understading-mvc-mvp-and-mvvm-design-patterns/"/>
    <updated>2015-02-06T17:26:06+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/02/06/understading-mvc-mvp-and-mvvm-design-patterns</id>
    <content type="html"><![CDATA[<p><code>MVC</code>, <code>MVP</code> and <code>MVVM</code> design patterns are most popular technologies in our web application. Many people don&rsquo;t understand what&rsquo;s difference among them, so do I. But I found a blog which explains the difference of three design patterns, and its&#8217; really good.</p>

<p>To read original article, see <a href="http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html">here</a></p>

<p>There are three most popular MV-* design patterns: <code>MVC</code>, <code>MVP</code> and <code>MVVM</code>. These are widely used by the various technologies.</p>

<!-- more -->


<h3>MVC Pattern</h3>

<p><code>MVC</code> stands for <code>Model-View-Controller</code>. It is a software design pattern which was introduced in 1970s. Also, <code>MVC</code> pattern forces a separation of concerns, it means domain model and controller logic are decoupled from user interface (view). As a result maintenance and testing of the application become simpler and easier.</p>

<p><code>MVC</code> design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Controller</code></p>

<p><img src="http://stonefishy.github.io/assets/images/mvc-pattern.png" alt="mvc-pattern" /></p>

<h4>Model</h4>

<p>The Model represents a set of classes that describe the business logic i.e. business model as well as data access operations i.e. data model. It also defines business rules for data means how the data can be changed and manipulated.</p>

<h4>View</h4>

<p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p>

<h4>Controller</h4>

<p>The Controller is responsible to process incoming requests. It receives input from users via the View, then process the user&rsquo;s data with the help of Model and passing the results back to the View. Typically, it acts as the coordinator between the View and the Model.</p>

<p>Today, this pattern is used by many popular framework like as <code>Ruby on Rails</code>, <code>Spring Framework</code>, <code>Apple iOS</code> Development and <code>ASP.NET MVC</code>.</p>

<h3>MVP Pattern</h3>

<p>This pattern is similar to MVC pattern in which controller has been replaced by the presenter. This design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Presenter</code>.</p>

<p><img src="http://stonefishy.github.io/assets/images/mvp-pattern.png" alt="mvp-pattern" /></p>

<h4>Model</h4>

<p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p>

<h4>View</h4>

<p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the presenter as the result. This also transforms the model(s) into UI.</p>

<h3>Presenter</h3>

<p>The Presenter is responsible for handling all UI events on behalf of the view. This receive input from users via the View, then process the user&rsquo;s data with the help of Model and passing the results back to the View. Unlike view and controller, view and presenter are completely decoupled from each other’s and communicate to each other’s by an interface.</p>

<p>Also, presenter does not manage the incoming request traffic as controller.</p>

<p>This pattern is commonly used with <code>ASP.NET Web Forms</code> applications which require to create automated unit tests for their code-behind pages. This is also used with <code>windows forms</code>.</p>

<h5>Key Points about MVP Pattern:</h5>

<ul>
<li>User interacts with the View.</li>
<li>There is one-to-one relationship between View and Presenter means one View is mapped to only one Presenter.</li>
<li>View has a reference to Presenter but View has not reference to Model.</li>
<li>Provides two way communication between View and Presenter.</li>
</ul>


<h3>MVVM Pattern</h3>

<p><code>MVVM</code> stands for <code>Model-View-View Model</code>. This pattern supports two-way data binding between view and View model. This enables automatic propagation of changes, within the state of view model to the View. Typically, the view model uses the observer pattern to notify changes in the view model to model.</p>

<p><img src="http://stonefishy.github.io/assets/images/mvvm-pattern.png" alt="mvvm-pattern" /></p>

<h4>Model</h4>

<p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p>

<h4>View</h4>

<p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p>

<h4>View Model</h4>

<p>The View Model is responsible for exposing methods, commands, and other properties that helps to maintain the state of the view, manipulate the model as the result of actions on the view, and trigger events in the view itself.</p>

<p>This pattern is commonly used by the <code>WPF</code>, <code>Silverlight</code>, <code>Caliburn</code>, <code>nRoute</code> etc.</p>

<h5>Key Points about MVVM Pattern:</h5>

<ul>
<li>User interacts with the View.</li>
<li>There is many-to-one relationship between View and ViewModel means many View can be mapped to one ViewModel.</li>
<li>View has a reference to ViewModel but View Model has no information about the View.</li>
<li>Supports two-way data binding between View and ViewModel.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conditional Stylesheets for IE Version]]></title>
    <link href="http://stonefishy.github.io/blog/2015/01/28/conditinal-stylesheets-for-ie-version/"/>
    <updated>2015-01-28T17:35:06+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/01/28/conditinal-stylesheets-for-ie-version</id>
    <content type="html"><![CDATA[<p>The tool of choice for fighting IE problems is the <code>conditional stylesheet</code>. IE provides comment tags, supported all the way up to the current IE 8 to target specific versions, as well as greater-than/less-than stuff for targeting multiple versions at once.</p>

<h3>Why use conditional stylesheets?</h3>

<ul>
<li>You got problems, they need fixin&#8217;</li>
<li>Keeps your code hack-free and valid</li>
<li>Keeps your main stylesheet clean</li>
<li>Perfectly acceptable technique, sanctioned by Microsoft</li>
</ul>


<!-- more -->


<p>And remember, these conditional tags don&rsquo;t have to be used only for CSS. You could load JavaScript, or even use them down in the content of your site to display special IE-specific messages.</p>

<h3>The Code</h3>

<p>This would go in your <head> with all the other regular CSS \<link>ed CSS files. The opening and closing tags should be familiar, that&rsquo;s just regular ol&#8217; HTML comments. Then between the brackets, &ldquo;IF&rdquo; and &ldquo;IE&rdquo; should be fairly obvious. The syntax to note is &ldquo;!&rdquo; stand for &ldquo;not&rdquo;, so !IE means &ldquo;not IE&rdquo;. gt means &ldquo;greater than&rdquo;, gte means &ldquo;greater than or equal&rdquo;, lt means &ldquo;less than&rdquo;, lte means &ldquo;less than or equal.&rdquo;</p>

<blockquote><p><strong>Note that IE 10 and up DO NOT support conditional comments at all.</strong></p></blockquote>

<p>Target ALL VERSIONS of IE</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if IE]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;all-ie-only.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target everything EXCEPT IE</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if !IE]&gt;&lt;!--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;not-ie.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'> <span class="c">&lt;!--&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 7 ONLY</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if IE 7]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7.css&quot;&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 6 ONLY</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if IE 6]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 5 ONLY</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if IE 5]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie5.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 5.5 ONLY</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if IE 5.5000]&gt;</span>
</span><span class='line'><span class="c">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie55.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 6 and LOWER</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if lt IE 7]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if lte IE 6]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 7 and LOWER</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if lt IE 8]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if lte IE 7]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 8 and LOWER</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if lt IE 9]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if lte IE 8]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 6 and HIGHER</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if gt IE 5.5]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if gte IE 6]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 7 and HIGHER</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if gt IE 6]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if gte IE 7]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Target IE 8 and HIGHER</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--[if gt IE 7]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if gte IE 8]&gt;</span>
</span><span class='line'><span class="c">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: The original artical you can see <a href="http://css-tricks.com/how-to-create-an-ie-only-stylesheet/">here</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Tricks for IE6,IE7,IE8,IE9]]></title>
    <link href="http://stonefishy.github.io/blog/2015/01/28/css-tricks-for-ie6-ie7-ie8-ie9/"/>
    <updated>2015-01-28T16:35:34+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/01/28/css-tricks-for-ie6-ie7-ie8-ie9</id>
    <content type="html"><![CDATA[<p>As web developer, we usually to fix the style for special version of IE. Here are the newest CSS tricks for <code>IE6</code>, <code>IE7</code>, <code>IE8</code>, <code>IE9</code>. This is very helpful for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#ie-tricks</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* All browsers */</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* All browsers but IE6 */</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">red</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* Only works in IE6 */</span>
</span><span class='line'>  <span class="n">_color</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* IE6, IE7 */</span>
</span><span class='line'>  <span class="o">*</span><span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* Only works in IE7*/</span>
</span><span class='line'>  <span class="o">+</span><span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* Only works in IE7 */</span>
</span><span class='line'>  <span class="o">*+</span><span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* IE6, IE7, IE8, IE9 */</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="err">\</span><span class="m">9</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/* IE8, IE9 */</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="err">\</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">/*Only works in IE9*/</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span><span class="nb">red</span><span class="err">\</span><span class="m">9</span><span class="err">\</span><span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A New Way for Developing Web Application Front-End]]></title>
    <link href="http://stonefishy.github.io/blog/2015/01/13/a-new-way-for-developing-web-application-front-end/"/>
    <updated>2015-01-13T22:43:30+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/01/13/a-new-way-for-developing-web-application-front-end</id>
    <content type="html"><![CDATA[<p>When we develop web application, if we write or modify the HTML structure, CSS style and javascript, we need to compile the code and deploy it, and then refresh page, finally we can see our changes. There are so many steps. So could we skip these steps and just see our changes on page directly when we save the codes. Yes, I can answer you now.</p>

<p>In order to achieve this goal, we need to install <code>Guard</code>, <code>LiveReload</code> and related stuff, configure it in our web application project.</p>

<!-- more -->


<p></p>

<h3>Guard</h3>

<p><code>Guard</code> is a command line tool to easily handle events on file system modifications. The offical website in <a href="http://guardgem.org/">here</a>.</p>

<ul>
<li>File system changes handled by awesome Listen gem.</li>
<li>Support for visual system notifications.</li>
<li>Huge eco-system with more than 220 guard plugins, go to this <a href="https://rubygems.org/search?query=guard-">website</a> to get plugins what you want.</li>
</ul>


<p>The simplest way to install guard is to use <code>Bundler</code>. Go to the guard offical website to see how to install it.</p>

<h3>LiveReload</h3>

<p><code>LiveReload</code> monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed.  <br/>
Even cooler, when you change a CSS file or an image, the browser is updated instantly without reloading the page.</p>

<p>And here, we use <code>guard-livereload</code> plugin to notificate the browser to reload page. this plugin base on <code>Guard</code> and <code>LiveReload</code>, you have to install Guard firstly. Visit this <a href="https://github.com/guard/guard-livereload/">website</a> to see how to install it.</p>

<h3>LiveReload Safari/Chrome extension</h3>

<p>Finally, you need to install <code>LiveReload Safari Or Chrome Extension</code>, and here, we just use chrome to load web application. So go to Chrome Web Store and find livereload extension to install it on your chrome browser. And also you can use Safari browser.</p>

<p>And now the tools we need have been installed. So let&rsquo;s getting started.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ guard init livereload</span></code></pre></td></tr></table></div></figure>


<p>By runing above command line, it will add guard definition to your <code>Guardfile</code>. You can adapt your &lsquo;view&rsquo; files like you want. And the default content of Guardfile by livereload initialize is below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="s1">&#39;livereload&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app/views/.+\.(erb|haml|slim)}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app/helpers/.+\.rb}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{public/.+\.(css|js|html)}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{config/locales/.+\.yml}</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Rails Assets Pipeline</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{(app|vendor)(/assets/\w+/(.+\.(css|js|html))).*}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;/assets/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you can see that there has some watch command in the Guardfile. Changing it by your situation.</p>

<p>Now I will use a login page to test the guard and livereload how to work. This project contains script file, less file and html file. When we change the less file it will generate css file automatically, and here we use Sublime Text plugin to finished it, and also you can use <code>guard-less</code> plugin which is guard plugin. <br/>
<img src="http://stonefishy.github.io/assets/images/project-structure.png" alt="" /></p>

<p>In test project directory, we can find the Gemfile and Guardfile.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A sample Gemfile</span>
</span><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># gem &quot;rails&quot;</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-livereload&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here we just only use <code>guard-livereload plugin</code>, we also can use <code>guard-less</code> to configure the less to auto generate css file. But here we use the <code>Sublime Text</code> development tools to develop this project, it supports plugin to generate less to css.</p>

<p>Let&rsquo;s see the guard how to watch our project files. the content of Guardfile is below:</p>

<figure class='code'><figcaption><span>Guardfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A sample Guardfile</span>
</span><span class='line'><span class="c1"># More info at https://github.com/guard/guard#readme</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## Uncomment and set this to only include directories you want to watch</span>
</span><span class='line'><span class="c1"># directories %w(app lib config test spec feature)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## Uncomment to clear the screen before every task</span>
</span><span class='line'><span class="c1"># clearing :on</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## Guard internally checks for changes in the Guardfile and exits.</span>
</span><span class='line'><span class="c1">## If you want Guard to automatically start up again, run guard in a</span>
</span><span class='line'><span class="c1">## shell loop, e.g.:</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">##  $ while bundle exec guard; do echo &quot;Restarting Guard...&quot;; done</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1">## Note: if you are using the `directories` clause above and you are not</span>
</span><span class='line'><span class="c1">## watching the project directory (&#39;.&#39;), the you will want to move the Guardfile</span>
</span><span class='line'><span class="c1">## to a watched dir and symlink it back, e.g.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#  $ mkdir config</span>
</span><span class='line'><span class="c1">#  $ mv Guardfile config/</span>
</span><span class='line'><span class="c1">#  $ ln -s config/Guardfile .</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># and, you&#39;ll have to watch &quot;config/Guardfile&quot; instead of &quot;Guardfile&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">guard</span> <span class="s1">&#39;livereload&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span> <span class="sr">/.*/</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In there, you will see that the all file in this project directory has been watched by guard-livereload.</p>

<p>Type below commands in your terminal.</p>

<figure class='code'><figcaption><span>Guardfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">guard</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will prompt you that LiveReload is waiting for a browser to connect. And the Guard is now watching at your specific files.</p>

<p>Open the web application on your chrome browser, and click LiveReload extension. And now you will see the terminal has a message said Browser connected.</p>

<p>So far, you have prepared all configurations. And now you can modify the source file and save it, then you will see the web application automatically refresh. <br/>
<img src="http://stonefishy.github.io/assets/images/auto-refresh-page.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run Multiple IE Version on Same Computer]]></title>
    <link href="http://stonefishy.github.io/blog/2015/01/07/how-to-run-multiple-ie-version-on-same-cotim/"/>
    <updated>2015-01-07T16:31:17+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/01/07/how-to-run-multiple-ie-version-on-same-cotim</id>
    <content type="html"><![CDATA[<p>As web developer, we usually need to face the challenge of making cross-browser compatible. Especially IE browser&rsquo;s multiple version. Because its quirks of rendering websites differently across its versions of <code>IE6</code>, <code>IE7</code>, <code>IE8</code> and possibly <code>IE9</code> and <code>IE10</code>.</p>

<p>Most of us have only one version of IE browser on our computer, and the compatible mode of IE is not really specific version which you want to simulate.</p>

<!-- more-->


<p>So how to run multiple version of IE on same time. Many developers install virtual machine to use the different versions. But this is not the best way.</p>

<p>In there, I will tell you there has a free tool called <code>IETester</code> can solve your problem. Use this tool can quick and easy way to run IE6, IE7, IE8 and IE9 on the same computer at the same time. And this tool just only support windows operation system. It also supports develope tool which can help developer to check web application on different version of IE.</p>

<p>This is a screen shot of <code>IETester</code>:  <br/>
<img src="http://stonefishy.github.io/assets/images/ie-tester.png" alt="" /></p>

<p>You can download it from this address <a href="http://www.my-debugbar.com/ietester/install-ietester-v0.5.4.exe">IETester</a></p>

<p>There has another online tools called <code>Browser Sandbox</code> can solve this problem, but it is not free, if you have money, this tool will be better for you. It support any versions of <code>Firefox</code>, <code>Opera</code>, <code>Safari</code>, <code>Chrome</code> and also <code>IE</code>. You can go to this <a href="http://spoon.net/browsers/">website</a> to visit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Packages in Sublime Text 3]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/26/how-to-install-sublime-text-plugin/"/>
    <updated>2014-12-26T22:35:36+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/26/how-to-install-sublime-text-plugin</id>
    <content type="html"><![CDATA[<p><code>Sublime Text</code> is a sophisticated text editor for code, markup and prose. You can go to offical <strong><a href="http://www.sublimetext.com/">website</a></strong> to download and see how to use it. It&rsquo;s a very powerful weapon for developer. And also it has so many packages to expand its functional.</p>

<p>If you want to install packages in your sublime text. First of all, you need to install <code>Package Control</code> that is <code>Sublime Text</code> package manager that makes it exceedingly simple to find, install and keep packages up-to-date.</p>

<p>Open Sublime Text 3 and choose <code>View &gt; Show Console</code> menu. Paste below codes into console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib.request</span><span class="o">,</span><span class="nn">os</span><span class="o">,</span><span class="nn">hashlib</span><span class="p">;</span> <span class="n">h</span> <span class="o">=</span> <span class="s">&#39;2deb499853c4371624f5a07e27c334aa&#39;</span> <span class="o">+</span> <span class="s">&#39;bf8c4e67d14fb0525ba4f89698a6d7e1&#39;</span><span class="p">;</span> <span class="n">pf</span> <span class="o">=</span> <span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span> <span class="o">=</span> <span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">())</span> <span class="p">);</span> <span class="n">by</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span> <span class="s">&#39;http://packagecontrol.io/&#39;</span> <span class="o">+</span> <span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="s">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">();</span> <span class="n">dh</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">by</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">();</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;Error validating download (got </span><span class="si">%s</span><span class="s"> instead of </span><span class="si">%s</span><span class="s">), please try manual install&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">dh</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span> <span class="k">if</span> <span class="n">dh</span> <span class="o">!=</span> <span class="n">h</span> <span class="k">else</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="n">ipp</span><span class="p">,</span> <span class="n">pf</span><span class="p">),</span> <span class="s">&#39;wb&#39;</span> <span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">by</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>This code creates the Installed Packages folder for you (if necessary), and then downloads the <code>Package Control.sublime-package</code> into it.</p>

<p>Since the <code>Package Control</code> install successfull, you can intall any packages which you want, such as less,less2css package. Press <code>Command+Shift+P</code> open the <code>Command palette</code> and find the <code>Package Control: Install Package</code>, like this: <br/>
<img src="http://stonefishy.github.io/assets/images/command-palette.png" alt="command palette" /></p>

<p>Choose <code>Package Control: Install Package</code> menu, and wait a seconds it will prompt package installer, and then you can search packages what you want and install it. <br/>
<img src="http://stonefishy.github.io/assets/images/package-installer.png" alt="package installer" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Cucumber]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/23/what-is-cucumber/"/>
    <updated>2014-12-23T00:23:25+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/23/what-is-cucumber</id>
    <content type="html"><![CDATA[<p><code>Cucumber</code> is a tool that can execute <code>plain-text</code> functional descriptions. And also it&rsquo;s  <code>BDD(Behaviour Driven Development)</code> <code>automated tests</code>. It is written by <code>Ruby</code>, and now it supports more than 40 languages, such as <code>Java</code>, <code>C#</code> and <code>Scala</code> etc.</p>

<h3>Install</h3>

<p>Firstly, we need to install <code>Ruby</code> and <code>RubyGems</code>, to check whether the installation of Ruby and RubyGems is successful. You can inputx the commands to terminal, just like as below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~  ruby --version
</span><span class='line'>ruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]
</span><span class='line'>~  gem --version
</span><span class='line'>2.0.14  </span></code></pre></td></tr></table></div></figure>


<p>And then we can run the command below to install <code>Cucumber</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~  gem install cucumber</span></code></pre></td></tr></table></div></figure>


<p>After this, put below command to see how to use it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~  cucumber --help</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>Gherkin</h3>

<p><code>Gherkin</code> is a language that can be understand by <code>Cucumber</code>. It&rsquo;s a <code>Business Readable</code>, <code>Domain Specific Language</code>. Very easy to understand what the functional want to do.</p>

<p>The <code>Gherkin</code> has two purpose, documention and automated test. The structure is Treetop grammer than is part of Cucumber codebase and use indentation to format it.</p>

<p> The <code>Gherkin</code> has two conventions:
 + Single <code>Gherkin</code> source file contains a description of single feature.
 + The source file is feature extention file(<code>*.feature</code>).</p>

<p>Like <code>YAML(Yet Another Markup Language)</code>, Gherkin is a line-oriented language that uses indentation to define structure. Most lines start with keyword. And you can start with a hash sign(#) to comment the text.</p>

<p>A Gherkin source file usually looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="nf"> </span><span class="s">1</span><span class="nf">: Feature: Some terse yet descriptive text of what is desired</span>
</span><span class='line'><span class="nf"> </span><span class="s">2</span><span class="nf">:   Textual description of the business value of this feature</span>
</span><span class='line'><span class="nf"> </span><span class="s">3</span><span class="nf">:   Business rules that govern the scope of the feature</span>
</span><span class='line'><span class="nf"> </span><span class="s">4</span><span class="nf">:   Any additional information that will make the feature easier to understand</span>
</span><span class='line'><span class="nf"> </span><span class="s">5</span><span class="nf">: </span>
</span><span class='line'><span class="nf"> </span><span class="s">6</span><span class="nf">:   Scenario: Some determinable business situation</span>
</span><span class='line'><span class="nf"> </span><span class="s">7</span><span class="nf">:     Given some precondition</span>
</span><span class='line'><span class="nf"> </span><span class="s">8</span><span class="nf">:       And some other precondition</span>
</span><span class='line'><span class="nf"> </span><span class="s">9</span><span class="nf">:      When some action by the actor</span>
</span><span class='line'><span class="s">10</span><span class="nf">:       And some other action</span>
</span><span class='line'><span class="s">11</span><span class="nf">:       And yet another action</span>
</span><span class='line'><span class="s">12</span><span class="nf">:      Then some testable outcome is achieved</span>
</span><span class='line'><span class="s">13</span><span class="nf">:       And something else we can check happens too</span>
</span><span class='line'><span class="s">14</span><span class="nf">: </span>
</span><span class='line'><span class="s">15</span><span class="nf">:   Scenario: A different situation</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above the codes, It&rsquo;s very similar with <code>Given-When-Then</code> the <code>Feature</code>, <code>Scenario</code>, <code>Given</code>, <code>And</code>, <code>When</code>, <code>Then</code> all are keywords of <code>Gherkin</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Ractive.js]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/19/what-is-ractive-dot-js/"/>
    <updated>2014-12-19T22:18:45+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/19/what-is-ractive-dot-js</id>
    <content type="html"><![CDATA[<p><code>Ractive.js</code> is a <code>template-driven</code> UI library, it transforms your templates into blueprints for application that are interative by default. <code>Ractive.js</code> is very similar with <code>AngularJS</code>, and it supports <code>Two-way binding</code>, <code>animations</code> as well. Another powerfull feature is <code>SVG</code> support.</p>

<h3>Template + Data = UI</h3>

<p>You just need to prepare your html template and datas, and the <code>Ractive.js</code> will automatically to combine them then give you what you want. Whe you change your datas, it intelligently updates the real DOM.</p>

<h3>Usage</h3>

<p>First, you need to include <code>Ractive.js</code> to your application. Just like include other javascript librarys easily. You can download it to local and then include it. And if you want include latest version, you just put below codes to your project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://cdn.ractivejs.org/latest/ractive.js&#39;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Second, we define a container that we want to render. Let&rsquo;s give it id container.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And third, just need to define a template. Load template in many ways, for example we can use ajax call to get the template string. and here, we use script tag to include the template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;template&quot;</span> <span class="na">type=</span><span class="s">&quot;text/ractive&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">svg</span> <span class="nx">width</span><span class="o">=</span><span class="s2">&quot;400&quot;</span> <span class="nx">height</span><span class="o">=</span><span class="s2">&quot;200&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">rect</span> <span class="nx">fill</span><span class="o">=</span><span class="s2">&quot;lightblue&quot;</span> <span class="nx">width</span><span class="o">=</span><span class="s2">&quot;100%&quot;</span> <span class="nx">height</span><span class="o">=</span><span class="s2">&quot;100%&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">circle</span> <span class="nx">cx</span><span class="o">=</span><span class="s2">&quot;25%&quot;</span> <span class="nx">cy</span><span class="o">=</span><span class="s2">&quot;50%&quot;</span> <span class="nx">r</span><span class="o">=</span><span class="s2">&quot;\{\{10+temperature}}&quot;</span> <span class="nx">fill</span><span class="o">=</span><span class="s2">&quot;gold&quot;</span> <span class="nx">stroke</span><span class="o">=</span><span class="s2">&quot;yellow&quot;</span>
</span><span class='line'>        <span class="nx">opacity</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">text</span> <span class="nx">x</span><span class="o">=</span><span class="s2">&quot;50%&quot;</span> <span class="nx">y</span><span class="o">=</span><span class="s2">&quot;65%&quot;</span> <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">=</span><span class="s2">&quot;80&quot;</span> <span class="nx">fill</span><span class="o">=</span><span class="s2">&quot;white&quot;</span><span class="o">&gt;</span><span class="err">\</span><span class="p">{</span><span class="err">\</span><span class="p">{</span><span class="nx">temperature</span><span class="p">}}</span><span class="err">℃</span><span class="o">&lt;</span><span class="err">/text&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/svg&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note:</em> don&rsquo;t mind reverse slash symbol. we just use it to transfer meaning. And when you data binding you don&rsquo;t need to add it. remember that!</p>

<p>As above. We define a svg tag and it contains rectangle,circle shape and text. The circle&rsquo;s radius bind the data {{10 + temperature}}，so the radius will update with ß10 plus temperature when the temperature changed. As we can see the temperature has binded the data as well.</p>

<p>And last step, Let&rsquo;s combine the template and data with <code>Ractive.js</code>. the code as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ractive</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ractive</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">// The el option can be a node, an ID, or a CSS selector.</span>
</span><span class='line'>  <span class="nx">el</span><span class="o">:</span><span class="s1">&#39;container&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// We could pass in a string, but for the sake of convenience</span>
</span><span class='line'>  <span class="c1">// we&#39;re passing the ID of the &lt;script&gt; tag above.</span>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span><span class="s1">&#39;#template&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// Here, we&#39;re passing in some initial data</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">temperature</span><span class="o">:</span><span class="mi">50</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>So the style as we can see below: <br/>
<img src="http://stonefishy.github.io/assets/images/ractive-svg-test.png" width="400" height="200"></p>

<p>Now, we can change the temperature data and let <code>Ractive.js</code> to update the DOM automatically. So there we increase the temperature by 1 per 100 millisecond, and when the temperature larger than 60 then reset it to 0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">ractive</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;temperature&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">temp</span> <span class="o">=</span> <span class="nx">temp</span> <span class="o">&gt;=</span> <span class="mi">60</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">++</span><span class="nx">temp</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">ractive</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;temperature&#39;</span><span class="p">,</span><span class="nx">temp</span><span class="p">);</span>
</span><span class='line'> <span class="p">},</span><span class="mi">100</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the radius of circle and the text will automatically changed. This is <code>Ractive.js</code> simple usage. Hopeful you like it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Learn Any Language in Six Months]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/18/how-to-learn-any-language-in-six-months/"/>
    <updated>2014-12-18T22:19:37+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/18/how-to-learn-any-language-in-six-months</id>
    <content type="html"><![CDATA[<p>Just see a video that teachs you how to learn any language in six months on youtube. It&rsquo;s created by Chris Lonsdale. I think it&rsquo;s very interesting and I believe those ways will be useful for us. So that&rsquo;s why I note it.</p>

<h3>The Big Question</h3>

<ul>
<li>How can normal adults learn a <code>NEW LANGUAGE</code> <strong>Quickly</strong>, <strong>Easily</strong>, <strong>Effectively</strong>?</li>
</ul>


<h3>How</h3>

<ul>
<li>There have <strong><code>5 Principles</code></strong> and <strong><code>7 Actions</code></strong>.</li>
<li>The two things that really don&rsquo;t matter:

<ul>
<li><del>Talent</del></li>
<li><del>Immersion per se</del></li>
</ul>
</li>
</ul>


<!-- more-->


<h3>5 Principles of Rapid Language Acquisition</h3>

<p>There have four words you need to keep in your mind: <strong>Meaning</strong>, <strong>Relevance</strong>, <strong>Attention</strong>, <strong>Memory</strong> <br/>
<img src="http://stonefishy.github.io/assets/images/learning-language-4-words.png" width="300" height="200"></p>

<h4>Principle #1:</h4>

<p><strong><code>Focus</code> on language content that is <code>relevant</code> to you.</strong></p>

<h4>Principle #2:</h4>

<p><strong>User your <code>New Language</code> as a <code>Tool</code> to <code>Communicate</code> &hellip; from Day 1</strong></p>

<h4>Principle #3:</h4>

<p><strong>When you first <code>UNDERSTAND</code> the <code>MESSAGE</code>, you will unconsciously <code>ACQUIRE</code> the Language</strong></p>

<p><img src="http://stonefishy.github.io/assets/images/comprehension-is-key.png" width="400" height="300"></p>

<p><em>Note:</em> <strong>Language learning is NOT ABOUT KNOWLEGE&hellip;, It&rsquo;s about <code>Physiological Training</code></strong></p>

<h4>Principle #4:</h4>

<p><strong>Language learning is about <code>Physiological Training</code></strong> <br/>
- <em>Talking takes muscle&hellip; when your <code>FACE HURTS</code>, you are doing it <code>RIGHT</code></em></p>

<h4>Principle #5:</h4>

<p><strong>Psycho-Physiological <code>STATE Matters</code></strong> <br/>
- <em>Very important idea&hellip; You Must Learn to Tolerate Ambiguity</em></p>

<h3>7 Actions for Rapid Language Acquisition</h3>

<h4>Action #1:</h4>

<p><strong><code>Listen A LOT!</code></strong> <br/>
- <em>Brain Soaking with New Language</em></p>

<h4>Action #2:</h4>

<p><strong>Focus on getting the meaning <code>FIRST</code> (before the words)</strong> <br/>
- <em>Use Body Language</em> <br/>
- <em>Use Patterns You Already Know</em></p>

<h4>Action #3:</h4>

<p><strong>Start Mixing!</strong> <br/>
- <em>So&hellip; get creative&hellip; start mixing!</em></p>

<p><img src="http://stonefishy.github.io/assets/images/words-mixing.png" width="400" height="300"></p>

<h4>Action #4:</h4>

<p><em>*Focus on the <code>Core</code></em>  <br/>
<img src="http://stonefishy.github.io/assets/images/high-frequency-language.png" width="400" height="300"></p>

<h5>Week 1 (The Tool Box)</h5>

<p>-What is this? <br/>
-How do you say? <br/>
-I don&rsquo;t understand&hellip;   <br/>
<em>All in the TARGET LANGUAGE</em></p>

<h5>Week 2-3 (Pronouns, Common Verbs, Adjectives)</h5>

<p>-you <br/>
-that <br/>
-me  <br/>
-give <br/>
-hot <br/>
-&hellip;</p>

<h5>Week 4 (Glue Words)</h5>

<p>-But <br/>
-And <br/>
-Even though <br/>
-&hellip;</p>

<h4>Action #5</h4>

<p><strong>Get a Language Parent</strong>       <br/>
Language Parent &ldquo;Rules&rdquo;:      <br/>
- Works to understand what you are saying <br/>
- Does not correct mistake <br/>
- Confirms understanding by using correct language <br/>
- Uses words the learner knows</p>

<h4>Action #6</h4>

<p><strong>Copy the <code>Face</code></strong></p>

<h4>Action #7</h4>

<p><strong><code>Direct Connect</code> to Mental Images</strong>    <br/>
<img src="http://stonefishy.github.io/assets/images/direct-connect-mental-image.png" width="300" height="200"></p>

<p><em>Note: The original video address is <a href="https://www.youtube.com/watch?v=d0yGdNEWdn0">https://www.youtube.com/watch?v=d0yGdNEWdn0</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava - Ordering]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/12/guava-ordering/"/>
    <updated>2014-12-12T17:28:07+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/12/guava-ordering</id>
    <content type="html"><![CDATA[<p><code>Ordering</code> is Guava&rsquo;s fluent Comparator class and implements Comparator interface. It can be used to build complex comparators and apply them to collections of objects.</p>

<p>Okay, so let&rsquo;s getting started. Firstly, we declared a <code>String</code> type List:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">locations</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;Guang zhou&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Cheng du&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;Shang hai&quot;</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
We will use this locations variable later.</p>

<!-- more -->


<p><code>natural()</code> <br/>
Use natural ordering for comparatable types. such as number from small to large. date from start to end. It is static method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// use natural comparator, such as a -&gt; z</span>
</span><span class='line'><span class="c1">// so the result is: [, Cheng du, Guang zhou, Shang hai]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">().</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>sortedCopy(Iterable)</code> <br/>
Return a sorted copy of the specified elements as a List.  <br/>
We create a customized <code>Ordering</code> that sorted by the length of element from small to large. Let&rsquo;s get the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">private</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getCustomzieStringOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">String</span> <span class="n">first</span><span class="o">,</span> <span class="n">String</span> <span class="n">second</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Ints</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">first</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">second</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Order the locations list with our new customize <code>Ordering</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Ordering</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">byLengthOrdering</span> <span class="o">=</span> <span class="n">getCustomzieStringOrder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use natural comparator, such as a -&gt; z</span>
</span><span class='line'><span class="c1">// so the result is: [, Cheng du, Shang hai, Guang zhou]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>isOrdered(Iterable)</code> <br/>
Return a Boolean variable that can describe the Iterable if sorted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// will return false. because the locations array is not sorted.</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">isOrdered</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>reverse()</code> <br/>
Return the reverse <code>Ordering</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// reverse customize comparator.</span>
</span><span class='line'><span class="c1">// so the result is: [Guang zhou, Shang hai, Cheng du, ]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>nullsFirst()</code> <br/>
Return an <code>Ordering</code> that will put the null object at the first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// add null object to the locations array.</span>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// null obejct will at first.</span>
</span><span class='line'><span class="c1">// so the result is : [null, , Cheng du, Shang hai, Guang zhou]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">nullsFirst</span><span class="o">().</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>nullsLast()</code> <br/>
Return an <code>Ordering</code> that will put the null object at the last.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// null object will at last.</span>
</span><span class='line'><span class="c1">// the result is : [, Cheng du, Shang hai, Guang zhou, null]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">nullsLast</span><span class="o">().</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// will throw NullPointerException, because the location contains null object.</span>
</span><span class='line'><span class="c1">// and here doesn&#39;t have nullsFirst() or nullsLast() to deal with null object.</span>
</span><span class='line'><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// remove the null object.</span>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>compound()</code> <br/>
Returns an <code>Ordering</code> which uses the specified Comparator to &ldquo;break ties.&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// the &quot;AAAAAAAA&quot; length is equal to &quot;Cheng du&quot; length. (8 characters)</span>
</span><span class='line'><span class="c1">// and it will be appended at last.</span>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;AAAAAAAA&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use natrual ordering with second comparator to deal with equal situation.</span>
</span><span class='line'><span class="n">Ordering</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">compoundOrdering</span> <span class="o">=</span> <span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">compound</span><span class="o">(</span><span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the result will be : [, AAAAAAAA, Cheng du, Shang hai, Guang zhou]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">compoundOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>onResultOf(Fuction)</code> <br/>
Returns an Ordering which orders values by applying the function to them and then comparing the results using the original Ordering. <br/>
Declaring a Foo class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Nullable</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Foo</span><span class="o">(</span><span class="n">Integer</span> <span class="n">sortedBy</span><span class="o">,</span> <span class="n">String</span> <span class="n">nonSortedBy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">sortedBy</span> <span class="o">=</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">nonSortedBy</span> <span class="o">=</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getNonSortedBy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNonSortedBy</span><span class="o">(</span><span class="n">String</span> <span class="n">nonSortedBy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">nonSortedBy</span> <span class="o">=</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getSortedBy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSortedBy</span><span class="o">(</span><span class="kt">int</span> <span class="n">sortedBy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">sortedBy</span> <span class="o">=</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s+%s&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">sortedBy</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">nonSortedBy</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Declaring a new List with Foo class type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">fooList</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Foo</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="s">&quot;abc&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Foo</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="s">&quot;abc&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">&quot;abc&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span> 
</span></code></pre></td></tr></table></div></figure>


<p>Define a new function that will return an customized <code>Ordering</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">private</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="nf">getNaturalFooOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">().</span><span class="na">nullsFirst</span><span class="o">().</span><span class="na">onResultOf</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Foo</span> <span class="n">foo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="na">getSortedBy</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">fooOrdering</span> <span class="o">=</span> <span class="n">getNaturalFooOrder</span><span class="o">();</span>
</span><span class='line'><span class="c1">// the result will be [null+abc, 10+abc, 23+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">fooList</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>greatestOf(Iterable iterable, int k)</code> <br/>
Returns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// the result will be [23+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">greatestOf</span><span class="o">(</span><span class="n">fooList</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the result will be [23+abc, 10+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">greatestOf</span><span class="o">(</span><span class="n">fooList</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>leastOf(Iterable iterable, int k)</code> <br/>
Returns the k least elements of the specified iterable, according to this ordering, in order from least to greatest. Not necessarily stable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// the result will be [null+abc, 10+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">leastOf</span><span class="o">(</span><span class="n">fooList</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>min(Iterable)</code> <br/>
Returns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// the result will be null+abc</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">fooList</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>max(Iterable)</code> <br/>
Returns the maximum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">// the result will be 23+abc</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">fooList</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSP - Custom Tag]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/01/jsp-custom-tag/"/>
    <updated>2014-12-01T21:30:41+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/01/jsp-custom-tag</id>
    <content type="html"><![CDATA[<p>Custom Tag is a user-defined JSP language element. When it is contained in JSP page and it will translate into a servlet, the custom tag is converted to opertions on an object called a tag handler. The web container then invokes those operations when the JSP page&rsquo;s servlet is executed.</p>

<p>If we want to create a custom tag, what we need to do is simply extend <code>SimpleTagSupport</code> class and override the <code>doTag()</code> method, where you can place your code to generate content for the tag.</p>

<p>Let&rsquo;s getting started to create a custom tag now. <br/>
As you can see below, consider we want to create two tag, one is user tag with name and isMale attribute, another is system tag with size attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;custom:user</span> <span class="na">name=</span><span class="s">&quot;user1&quot;</span> <span class="na">isMale=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;custom:system</span> <span class="na">size=</span><span class="s">&quot;1024&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>So firstly what we need to do is create two java classes that act as a tag handler for each other tag. and them must extends <code>SimpleTagSupport</code> class.</p>

<figure class='code'><figcaption><span>UserTag.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">jsp</span><span class="o">.</span><span class="na">custom</span><span class="o">.</span><span class="na">tag</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.jsp.JspException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.jsp.JspWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.jsp.tagext.SimpleTagSupport</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.StringWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by yushi on 12/1/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserTag</span> <span class="kd">extends</span> <span class="n">SimpleTagSupport</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Boolean</span> <span class="n">isMale</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringWriter</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doTag</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">JspException</span><span class="o">,</span> <span class="n">IOException</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">JspWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">getJspContext</span><span class="o">().</span><span class="na">getOut</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// print name info with name attribute</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// print gender info via isMale attribute</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">isMale</span> <span class="o">?</span> <span class="s">&quot;I&#39;m male!&quot;</span> <span class="o">:</span> <span class="s">&quot;I&#39;m female!&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">birthday</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;My birthday is %s&quot;</span><span class="o">,</span> <span class="n">birthday</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// print body text with body content</span>
</span><span class='line'>        <span class="n">getJspBody</span><span class="o">().</span><span class="na">invoke</span><span class="o">(</span><span class="n">sw</span><span class="o">);</span>
</span><span class='line'>        <span class="n">getJspContext</span><span class="o">().</span><span class="na">getOut</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIsMale</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">isMale</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">isMale</span> <span class="o">=</span> <span class="n">isMale</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBirthday</span><span class="o">(</span><span class="n">Date</span> <span class="n">birthday</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">birthday</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>SystemTag.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">jsp</span><span class="o">.</span><span class="na">custom</span><span class="o">.</span><span class="na">tag</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.jsp.tagext.SimpleTagSupport</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by yushi on 12/2/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SystemTag</span> <span class="kd">extends</span> <span class="n">SimpleTagSupport</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doTag</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">getJspContext</span><span class="o">().</span><span class="na">getOut</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;The system&#39;s size is: %s&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">size</span><span class="o">))));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above two class just override the <code>doTag()</code> method and take the current <code>JspContext</code> object using <code>getJspContext()</code> method, and then send message content to the current <code>JspWriter</code> object.</p>

<p>Secondly we need to create tld extention file. It&rsquo;s a tag library file. let us see the codes.</p>

<figure class='code'><figcaption><span>customTag.tld</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;taglib&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tlib-version&gt;</span>1.0<span class="nt">&lt;/tlib-version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;jsp-version&gt;</span>2.0<span class="nt">&lt;/jsp-version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;short-name&gt;</span>custom tld<span class="nt">&lt;/short-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tag&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>user<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tag-class&gt;</span>com.jsp.custom.tag.UserTag<span class="nt">&lt;/tag-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;body-content&gt;</span>tagdependent<span class="nt">&lt;/body-content&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute&gt;</span>
</span><span class='line'>            <span class="nt">&lt;name&gt;</span>name<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;required&gt;</span>true<span class="nt">&lt;/required&gt;</span>
</span><span class='line'>            <span class="nt">&lt;description&gt;</span>user name<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- the type default is String if it is not specified --&gt;</span>
</span><span class='line'>            <span class="c">&lt;!--&lt;type&gt;java.lang.String&lt;/type&gt;--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/attribute&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute&gt;</span>
</span><span class='line'>            <span class="nt">&lt;name&gt;</span>isMale<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;required&gt;</span>false<span class="nt">&lt;/required&gt;</span>
</span><span class='line'>            <span class="nt">&lt;description&gt;</span>the use is male or not male<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>            <span class="nt">&lt;type&gt;</span>java.lang.Boolean<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/attribute&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute&gt;</span>
</span><span class='line'>            <span class="nt">&lt;name&gt;</span>birthday<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;type&gt;</span>java.util.Date<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/attribute&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tag&gt;</span>
</span><span class='line'>        <span class="nt">&lt;name&gt;</span>system<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tag-class&gt;</span>com.jsp.custom.tag.SystemTag<span class="nt">&lt;/tag-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;body-content&gt;</span>empty<span class="nt">&lt;/body-content&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attribute&gt;</span>
</span><span class='line'>            <span class="nt">&lt;name&gt;</span>size<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>            <span class="nt">&lt;required&gt;</span>false<span class="nt">&lt;/required&gt;</span>
</span><span class='line'>            <span class="nt">&lt;description&gt;</span>the size of system<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/attribute&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tag&gt;</span>
</span><span class='line'><span class="nt">&lt;/taglib&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can use these both tags in our JSP page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;custom&quot;</span> <span class="n">uri</span><span class="o">=</span><span class="s">&quot;WEB-INF/customTag.tld&quot;</span> <span class="k">%&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>custom tag training<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;custom:user</span> <span class="na">name=</span><span class="s">&quot;user1&quot;</span> <span class="na">isMale=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;custom:system</span> <span class="na">size=</span><span class="s">&quot;1024&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
