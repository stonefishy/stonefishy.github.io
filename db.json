{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/css/animate.min.css","path":"css/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/goTop.js","path":"js/goTop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/jquery3.5.1.js","path":"js/jquery3.5.1.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/local_search.js","path":"js/local_search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/ribbon.min.js","path":"js/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue2.6.11.js","path":"js/vue2.6.11.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/wrapImage.js","path":"js/wrapImage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/cursor/Horizontal.cur","path":"medias/cursor/Horizontal.cur","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/bubble.js","path":"js/bubble/bubble.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/homeBubble.js","path":"js/bubble/homeBubble.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","path":"js/aplayer/APlayer@1.10.1.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","path":"js/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/clicklove.js","path":"js/cursor/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/explosion.min.js","path":"js/cursor/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/fireworks.js","path":"js/cursor/fireworks.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/text.js","path":"js/cursor/text.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/getPhotoOnline/index.js","path":"js/getPhotoOnline/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/barrager.css","path":"js/danmu/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/close.png","path":"js/danmu/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","path":"js/danmu/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/falling/sakura.js","path":"js/falling/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/falling/snow.js","path":"js/falling/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/getSiteOnline/index.js","path":"js/getSiteOnline/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/getTalkOnline/index.js","path":"js/getTalkOnline/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/loaded/index.css","path":"js/loaded/index.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/issues/index.js","path":"js/issues/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/pjax@0.2.8/index.js","path":"js/pjax@0.2.8/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","path":"js/prism/prism-coy.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","path":"js/prism/prism-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","path":"js/prism/prism-funky.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","path":"js/prism/prism-line-numbers.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","path":"js/prism/prism-okaidia.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","path":"js/prism/prism-solarizedlight.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","path":"js/prism/prism-tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","path":"js/prism/prism-twilight.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism.min.css","path":"js/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","path":"js/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","path":"js/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.css","path":"js/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","path":"js/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.animate1.0.3.min.js","path":"js/swiper/swiper.animate1.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.min.js","path":"js/swiper/swiper.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper@5.4.1.min.css","path":"js/swiper/swiper@5.4.1.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/vue-awesome-swiper.js","path":"js/swiper/vue-awesome-swiper.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/font.css","path":"js/shareJs/font.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/share.min.css","path":"js/shareJs/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","path":"js/shareJs/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/utils/index.js","path":"js/utils/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/valine/index.js","path":"js/valine/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","path":"js/vue-seamless-scroll/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.css","path":"js/vue-typed-js/index.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.js","path":"js/vue-typed-js/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/waline/waline.min.js","path":"js/waline/waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","path":"js/shareJs/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","path":"js/shareJs/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","path":"js/shareJs/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","path":"js/shareJs/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"source/assets/images/aws/aws-ec2-hibernation-enable.png","path":"assets/images/aws/aws-ec2-hibernation-enable.png","modified":0,"renderable":0},{"_id":"source/assets/images/aws/aws-ec2-hibernation-flow.png","path":"assets/images/aws/aws-ec2-hibernation-flow.png","modified":0,"renderable":0},{"_id":"source/assets/images/aws/aws-ec2-intro.png","path":"assets/images/aws/aws-ec2-intro.png","modified":0,"renderable":0},{"_id":"source/assets/images/aws/aws-iam-groups.png","path":"assets/images/aws/aws-iam-groups.png","modified":0,"renderable":0},{"_id":"source/assets/images/aws/aws-iam-policies.png","path":"assets/images/aws/aws-iam-policies.png","modified":0,"renderable":0},{"_id":"source/assets/images/aws/aws-iam-users.png","path":"assets/images/aws/aws-iam-users.png","modified":0,"renderable":0},{"_id":"source/assets/images/aws/aws-iam-roles.png","path":"assets/images/aws/aws-iam-roles.png","modified":0,"renderable":0},{"_id":"source/assets/images/ziyuan/community-1.png","path":"assets/images/ziyuan/community-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/ziyuan/license-1.png","path":"assets/images/ziyuan/license-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/ziyuan/search-1.png","path":"assets/images/ziyuan/search-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/ziyuan/laptop-1.png","path":"assets/images/ziyuan/laptop-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/ziyuan/fengjing-1.png","path":"assets/images/ziyuan/fengjing-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/ziyuan/coding-1.png","path":"assets/images/ziyuan/coding-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/android-lifecycle.png","path":"assets/images/legacy/android-lifecycle.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/android.jpg","path":"assets/images/legacy/android.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/angular-ngModel-1.png","path":"assets/images/legacy/angular-ngModel-1.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/angular-ngModel-2.png","path":"assets/images/legacy/angular-ngModel-2.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/auto-refresh-page.png","path":"assets/images/legacy/auto-refresh-page.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/angular-ngModel-3.png","path":"assets/images/legacy/angular-ngModel-3.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/basic-usage-2.png","path":"assets/images/legacy/basic-usage-2.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/basic-usage.png","path":"assets/images/legacy/basic-usage.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/checkout-b-detached.png","path":"assets/images/legacy/checkout-b-detached.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/checkout-after-detached.png","path":"assets/images/legacy/checkout-after-detached.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/checkout-branch.png","path":"assets/images/legacy/checkout-branch.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/checkout-detached.png","path":"assets/images/legacy/checkout-detached.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/checkout-files.png","path":"assets/images/legacy/checkout-files.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/cherry-pick.png","path":"assets/images/legacy/cherry-pick.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/command-palette.png","path":"assets/images/legacy/command-palette.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/coffee-script-logo.png","path":"assets/images/legacy/coffee-script-logo.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/commit-amend.png","path":"assets/images/legacy/commit-amend.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/commit-detached.png","path":"assets/images/legacy/commit-detached.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/commit-maint.png","path":"assets/images/legacy/commit-maint.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/commit-master.png","path":"assets/images/legacy/commit-master.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/comprehension-is-key.png","path":"assets/images/legacy/comprehension-is-key.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/contentEditable-after.png","path":"assets/images/legacy/contentEditable-after.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/contentEditable-before.png","path":"assets/images/legacy/contentEditable-before.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/conventions.png","path":"assets/images/legacy/conventions.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/diff.png","path":"assets/images/legacy/diff.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/direct-connect-mental-image.png","path":"assets/images/legacy/direct-connect-mental-image.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/git-logo.png","path":"assets/images/legacy/git-logo.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/high-frequency-language.png","path":"assets/images/legacy/high-frequency-language.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/ie-tester.png","path":"assets/images/legacy/ie-tester.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/iterm-cobalt2.png","path":"assets/images/legacy/iterm-cobalt2.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/learning-language-4-words.png","path":"assets/images/legacy/learning-language-4-words.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/merge-ff.png","path":"assets/images/legacy/merge-ff.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/merge.png","path":"assets/images/legacy/merge.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/meter-tag.png","path":"assets/images/legacy/meter-tag.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/mvp-pattern.png","path":"assets/images/legacy/mvp-pattern.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/mvc-pattern.png","path":"assets/images/legacy/mvc-pattern.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/nginx-welcome.png","path":"assets/images/legacy/nginx-welcome.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/mvvm-pattern.png","path":"assets/images/legacy/mvvm-pattern.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/numeric-inheritance.png","path":"assets/images/legacy/numeric-inheritance.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/progress-tag.png","path":"assets/images/legacy/progress-tag.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/package-installer.png","path":"assets/images/legacy/package-installer.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/ractive-svg-test.png","path":"assets/images/legacy/ractive-svg-test.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/project-structure.png","path":"assets/images/legacy/project-structure.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/rebase-onto.png","path":"assets/images/legacy/rebase-onto.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/rebase.png","path":"assets/images/legacy/rebase.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/reset-commit.png","path":"assets/images/legacy/reset-commit.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/spellcheck.png","path":"assets/images/legacy/spellcheck.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/stash-pull-request.png","path":"assets/images/legacy/stash-pull-request.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/ruby-logo.png","path":"assets/images/legacy/ruby-logo.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/reset-files.png","path":"assets/images/legacy/reset-files.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/reset.png","path":"assets/images/legacy/reset.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/tsd-file-tree.png","path":"assets/images/legacy/tsd-file-tree.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/tsd-intellisense.png","path":"assets/images/legacy/tsd-intellisense.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/words-mixing.png","path":"assets/images/legacy/words-mixing.png","modified":0,"renderable":0},{"_id":"source/assets/images/legacy/sublime-cobalt2-theme.png","path":"assets/images/legacy/sublime-cobalt2-theme.png","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-03a22891ccba9bccf6424dfd7cbf4be7_1440w.webp","path":"medias/bg-images/v2-03a22891ccba9bccf6424dfd7cbf4be7_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-121618e14ad58dcedf8637127087ff27_1440w.webp","path":"medias/bg-images/v2-121618e14ad58dcedf8637127087ff27_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-154228684029ae0c2183f65a9568c310_1440w.webp","path":"medias/bg-images/v2-154228684029ae0c2183f65a9568c310_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-2f39b553d8a370cb137031f8ca798a56_1440w.webp","path":"medias/bg-images/v2-2f39b553d8a370cb137031f8ca798a56_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-1998dea3bd643074760e2976f831c1dc_1440w.webp","path":"medias/bg-images/v2-1998dea3bd643074760e2976f831c1dc_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-36e669406e3b17fcb8a2ded46b88bf37_1440w.webp","path":"medias/bg-images/v2-36e669406e3b17fcb8a2ded46b88bf37_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-544e3d61bf1b83a6f15cd3c1734e8cae_1440w.webp","path":"medias/bg-images/v2-544e3d61bf1b83a6f15cd3c1734e8cae_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-573ac3e25de03fad9c32add5a05e5cfc_1440w.webp","path":"medias/bg-images/v2-573ac3e25de03fad9c32add5a05e5cfc_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-5c062983ace7db9601880019190fb5a8_1440w.webp","path":"medias/bg-images/v2-5c062983ace7db9601880019190fb5a8_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-5dfab6525ec92b4caf3f09e1ee72a23b_1440w.webp","path":"medias/bg-images/v2-5dfab6525ec92b4caf3f09e1ee72a23b_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-5f7cb7e900b9dcf5354c3d4d2c5cc3c2_1440w.webp","path":"medias/bg-images/v2-5f7cb7e900b9dcf5354c3d4d2c5cc3c2_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-604a15cef201cf177943af2d915eb2e7_1440w.webp","path":"medias/bg-images/v2-604a15cef201cf177943af2d915eb2e7_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-61f99f8dcf899f54cad2a1aa28b21e44_1440w.webp","path":"medias/bg-images/v2-61f99f8dcf899f54cad2a1aa28b21e44_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-63bbdb5b76b8d349ad35ff4281efbd37_1440w.webp","path":"medias/bg-images/v2-63bbdb5b76b8d349ad35ff4281efbd37_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-7cfc909ebe8d83683909846edd6b5232_1440w.webp","path":"medias/bg-images/v2-7cfc909ebe8d83683909846edd6b5232_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-83ea273b88e119d9615aed0d89aad4ab_1440w.webp","path":"medias/bg-images/v2-83ea273b88e119d9615aed0d89aad4ab_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-85c31120acff76826ab53ea8934ef4bb_1440w.webp","path":"medias/bg-images/v2-85c31120acff76826ab53ea8934ef4bb_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-9610c47f088f341cb76f066a59d6fc58_1440w.webp","path":"medias/bg-images/v2-9610c47f088f341cb76f066a59d6fc58_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-9c50d3af0bc62a0e8b6e89e24c769317_1440w.webp","path":"medias/bg-images/v2-9c50d3af0bc62a0e8b6e89e24c769317_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-b44931ea513e5f7b3b06f2703f79653c_1440w.webp","path":"medias/bg-images/v2-b44931ea513e5f7b3b06f2703f79653c_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-b4fed05253022f04664aa0fdc491a9dd_1440w.webp","path":"medias/bg-images/v2-b4fed05253022f04664aa0fdc491a9dd_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-c72bc34662bb500f34f49d6d80881e0f_1440w.webp","path":"medias/bg-images/v2-c72bc34662bb500f34f49d6d80881e0f_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-bf6c555e7c61a57ba4a1fd95a9a32975_1440w.webp","path":"medias/bg-images/v2-bf6c555e7c61a57ba4a1fd95a9a32975_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-d61b1af36a619fec1b32775d75f4900d_1440w.webp","path":"medias/bg-images/v2-d61b1af36a619fec1b32775d75f4900d_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-e22aaad20d20634f506f57fff0fcbc17_1440w.webp","path":"medias/bg-images/v2-e22aaad20d20634f506f57fff0fcbc17_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-e434e3a2888fb4efb1844845b8791d1f_1440w.webp","path":"medias/bg-images/v2-e434e3a2888fb4efb1844845b8791d1f_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-e6f5ee027177096c0950a053ab33a12d_1440w.webp","path":"medias/bg-images/v2-e6f5ee027177096c0950a053ab33a12d_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/bg-images/v2-f94047ce45907e0966a681089835c04d_1440w.webp","path":"medias/bg-images/v2-f94047ce45907e0966a681089835c04d_1440w.webp","modified":0,"renderable":0},{"_id":"source/medias/avatar/totoro1.webp","path":"medias/avatar/totoro1.webp","modified":0,"renderable":0},{"_id":"source/medias/avatar/totoro2.webp","path":"medias/avatar/totoro2.webp","modified":0,"renderable":0},{"_id":"source/medias/avatar/totoro3.webp","path":"medias/avatar/totoro3.webp","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1693034751898},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1693036603454},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1693036602947},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1693036603492},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1693036603494},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1693036603455},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1693036603497},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1693036603496},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1693036603499},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1693036603500},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1693036603501},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1693036603498},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1693036603504},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1693036603502},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1693036603504},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1693036603505},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1693036603506},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1693036603503},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1693036603506},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1693036603508},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1693036603509},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1693036603509},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1693036603507},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1693036603508},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1693036603511},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1693036603510},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1693036603511},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1693036603513},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1693036603512},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1693036603514},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1693036603516},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1693036603514},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1693036603517},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1693036603515},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1693036603518},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1693036603416},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1693036603517},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1693036603519},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1693036603318},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1693036603321},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1693036603252},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1693036603292},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1693036603333},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1693036603344},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1693036603335},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1693036603330},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1693036603231},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1693036603286},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1693036603346},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1693036603341},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1693036603169},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1693036603191},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1693036603257},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1693036603308},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1693036603301},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1693036603311},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1693036603314},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1693036603338},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1693036603203},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1693036603459},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1693036603316},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1693036603460},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1693036603323},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1693036603490},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1693036602998},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1693036603451},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1693036603328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1693036603298},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1693036603281},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1693036603305},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1693036603339},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1693036603348},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1693036603471},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1693036603468},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1693036603479},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1693036603465},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1693036603483},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1693036603472},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1693036603485},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1693036603481},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1693036603480},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1693036603484},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1693036603489},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1693036603487},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1693036603449},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1693036603440},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1693036603413},{"_id":"public/2023/08/26/hello-world/index.html","hash":"6444c4ef8242e13fb67ad49c9714c45da9afbea3","modified":1693668109399},{"_id":"public/index.html","hash":"7d92ce9efa4b6ad93e1ac635370464056e920b23","modified":1693709459222},{"_id":"public/archives/index.html","hash":"6fbfab60fdc6dc13e9ef437294cc419b32b76bea","modified":1693708140935},{"_id":"public/archives/2023/index.html","hash":"036f5b680b0c5be4afa473f07a9e13b952659f46","modified":1693670099006},{"_id":"public/archives/2023/08/index.html","hash":"89b1d6c023fc8a3dda866f3a775ed73376f0fd3a","modified":1693670099006},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1693676016467},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1693676016467},{"_id":"public/css/style.css","hash":"d67f6e30cd771cbdbafba24d63fa07c2700bbc4e","modified":1693676016467},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1693676016467},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1693676016467},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1693676016467},{"_id":"source/categories/index.md","hash":"e25aca51583bb5674503bde77cd6be7fd9562be6","modified":1693649300588},{"_id":"source/tags/index.md","hash":"0e703e21337eb09145088fc33166e9d8151d7e93","modified":1693649336960},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/ghcard.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/package.json","hash":"8c9fc4f5618432c1ae30dcc8d83ec92931fbc393","modified":1693648626457},{"_id":"themes/hexo-theme-bamboo/languages/default.yml","hash":"ae43a14b5e945e350240b25deb503436c72ac9e1","modified":1693675008028},{"_id":"themes/hexo-theme-bamboo/_config.yml","hash":"89c4d493b82a96966531a14c06b81148cac5f7b1","modified":1693707948111},{"_id":"themes/hexo-theme-bamboo/LICENSE","hash":"a169fe9d633c76d88c67c4155ac50d7c33261c5a","modified":1693648626425},{"_id":"themes/hexo-theme-bamboo/README.md","hash":"2057cab45a435145ba9b8e7d3719d61f9860e61f","modified":1693648626426},{"_id":"themes/hexo-theme-bamboo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1693648626455},{"_id":"themes/hexo-theme-bamboo/layout/categories.ejs","hash":"7258b144c22829b972fa819d034c45168b7f722a","modified":1693648626456},{"_id":"themes/hexo-theme-bamboo/layout/category.ejs","hash":"37ffb09fbfaf42173e0dcc12e77733aaf3dc33d5","modified":1693648626456},{"_id":"themes/hexo-theme-bamboo/languages/zh-TW.yml","hash":"0cdab82f5b0b6c975ddae075312764640ba5592d","modified":1693674510542},{"_id":"themes/hexo-theme-bamboo/layout/index.ejs","hash":"c14582ffc3e238d6a09f13a90058afe764d6c224","modified":1693648626456},{"_id":"themes/hexo-theme-bamboo/languages/zh-CN.yml","hash":"caefd6f264b9b29a45dc507aee17683710aef3fe","modified":1693674517855},{"_id":"themes/hexo-theme-bamboo/layout/layout.ejs","hash":"968e93439e171062e289b628c4313cc7ba41a864","modified":1693648626456},{"_id":"themes/hexo-theme-bamboo/layout/post.ejs","hash":"80af2a254bbdb3a2ea535e7aba0ad7771a638fe4","modified":1693648626457},{"_id":"themes/hexo-theme-bamboo/layout/tag.ejs","hash":"3ab775de6366e7e5b5ee3db1b3ca405963d24122","modified":1693675140823},{"_id":"themes/hexo-theme-bamboo/layout/tags.ejs","hash":"9f893119661ef904b9b0a44baf15f5b51389fef7","modified":1693648626457},{"_id":"themes/hexo-theme-bamboo/scripts/events/index.js","hash":"9e23e68ef44cde0b9048ad95292eb565ef7e8df8","modified":1693648626458},{"_id":"themes/hexo-theme-bamboo/scripts/helpers/side_archives.js","hash":"b780ec1516d12b088f81b5ce25a80df460d91f3c","modified":1693648626459},{"_id":"themes/hexo-theme-bamboo/scripts/tag/btn.js","hash":"35d97ecd3b05abc5069483e4817ff075e5e2cf52","modified":1693648626459},{"_id":"themes/hexo-theme-bamboo/source/favicon.ico","hash":"0b35fff20b29446eb8865f31a634f2e51c3a18d1","modified":1693655771240},{"_id":"themes/hexo-theme-bamboo/scripts/tag/btns.js","hash":"e328ebb9b45e4b21f720f65b9c1730596677b964","modified":1693648626460},{"_id":"themes/hexo-theme-bamboo/scripts/tag/checkbox.js","hash":"b398969bd13fa37c90a323242f2d6be5c0dacbd1","modified":1693648626460},{"_id":"themes/hexo-theme-bamboo/scripts/tag/file.js","hash":"8cfdf178ea78639a7c852838ecffe1d1d5febaec","modified":1693648626460},{"_id":"themes/hexo-theme-bamboo/scripts/tag/folding.js","hash":"fa0d60a8b32bb942c9b04cd4256281ed8486f223","modified":1693648626460},{"_id":"themes/hexo-theme-bamboo/scripts/tag/gallery.js","hash":"d47607d31105741a33152c8c39cc2d1f6e2c88f9","modified":1693648626461},{"_id":"themes/hexo-theme-bamboo/scripts/tag/getPhoto.js","hash":"6e747c115bc1c537cd09883f2e0562037a0b9ed8","modified":1693648626461},{"_id":"themes/hexo-theme-bamboo/scripts/tag/getPhotoOnline.js","hash":"1c954fc69665ef1e4a200037108e0e5e593e944a","modified":1693648626461},{"_id":"themes/hexo-theme-bamboo/scripts/tag/getSiteOnline.js","hash":"77687052934895b4bb45564488047b83c5ebd1f6","modified":1693648626462},{"_id":"themes/hexo-theme-bamboo/scripts/tag/getTalkOnline.js","hash":"69484c5cf31d708d2bfa9efad49ec3c51f86f5e9","modified":1693648626462},{"_id":"themes/hexo-theme-bamboo/scripts/tag/ghcard.js","hash":"2e0359ca4bc781b29bdd8c827f6349e7b369ea02","modified":1693648626462},{"_id":"themes/hexo-theme-bamboo/scripts/tag/image.js","hash":"d23c426ca0beb9528a00f0e4185eddd023889ee8","modified":1693648626463},{"_id":"themes/hexo-theme-bamboo/scripts/tag/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1693648626463},{"_id":"themes/hexo-theme-bamboo/scripts/tag/link.js","hash":"226d074278af7ed30516a74655bfa79151422c65","modified":1693648626463},{"_id":"themes/hexo-theme-bamboo/scripts/tag/issues.js","hash":"136c1d2c002b05cd96f0477033ad98583a3379d9","modified":1693648626463},{"_id":"themes/hexo-theme-bamboo/scripts/tag/mermaid.js","hash":"32bc8b283be1f0f3fe99ed979bb2150af3a5ca04","modified":1693648626464},{"_id":"themes/hexo-theme-bamboo/scripts/tag/note.js","hash":"dd0ef71e882691a6d7a0624440b5de53c7ad7342","modified":1693648626464},{"_id":"themes/hexo-theme-bamboo/scripts/tag/progress.js","hash":"62b4170eb844b2bc97cb1aa2082c0669bed287d2","modified":1693648626465},{"_id":"themes/hexo-theme-bamboo/scripts/tag/site.js","hash":"56e270f7242570ab300ec933c9932300e3e3b8fa","modified":1693648626465},{"_id":"themes/hexo-theme-bamboo/scripts/tag/media.js","hash":"04434a1760ec70d23f726921ba3e74898af4b531","modified":1693648626464},{"_id":"themes/hexo-theme-bamboo/scripts/tag/span.js","hash":"377c0ce99bee9eea4930d11d046abbbf72132f0a","modified":1693648626466},{"_id":"themes/hexo-theme-bamboo/scripts/tag/swiper.js","hash":"ae42d6156e39aad54b331e4257131c9b05bfcee4","modified":1693648626466},{"_id":"themes/hexo-theme-bamboo/scripts/tag/tabs.js","hash":"e15327573e6aec73ab7d494b7fefe950e3e5425b","modified":1693648626466},{"_id":"themes/hexo-theme-bamboo/scripts/tag/timeline.js","hash":"c7942e1c59d9d8f25f2d63c6d8b53a6415d11f6b","modified":1693648626467},{"_id":"themes/hexo-theme-bamboo/scripts/tag/title.js","hash":"53b82637070fca5e846fa7f69829e66e83cc2a76","modified":1693648626467},{"_id":"themes/hexo-theme-bamboo/scripts/tag/titleB.js","hash":"fe9bd544ee4bb0b8e653cc05243ab9cc7c1e8f30","modified":1693648626467},{"_id":"themes/hexo-theme-bamboo/scripts/z-lazyload/index.js","hash":"00807c9898fff8f712fc8f311ed0bdd84c71b812","modified":1693648626468},{"_id":"themes/hexo-theme-bamboo/layout/_partial/archive.ejs","hash":"e6381dbd19b931fe9f8da37fcde132e65fbe1d4a","modified":1693648626429},{"_id":"themes/hexo-theme-bamboo/layout/_partial/dark.ejs","hash":"653f56cf403abdf5b5d55cc4174e2877b61ebda3","modified":1693648626438},{"_id":"themes/hexo-theme-bamboo/layout/_partial/goTop.ejs","hash":"8799f7e3b34b919cd274c570d77e10e3085f1a58","modified":1693648626439},{"_id":"themes/hexo-theme-bamboo/layout/_partial/lantern.ejs","hash":"8b3466dbd0158f8297ac336052b8d4fded4081a0","modified":1693648626441},{"_id":"themes/hexo-theme-bamboo/layout/_partial/home_widget.ejs","hash":"e94f14d51791e6239fbab5276a186d875f9b919c","modified":1693648626440},{"_id":"themes/hexo-theme-bamboo/layout/_partial/loaded.ejs","hash":"0144a7eef60a574b43bbc5dfa0a919f5f03c7188","modified":1693648626441},{"_id":"themes/hexo-theme-bamboo/layout/_partial/notice.ejs","hash":"bfb9f2ca32d4932f5754bde29bc91a2781524b8d","modified":1693648626442},{"_id":"themes/hexo-theme-bamboo/layout/_partial/motto.ejs","hash":"d488999468dec7d5b30769e5acc0348d7f479f7f","modified":1693663899152},{"_id":"themes/hexo-theme-bamboo/layout/_partial/paginator.ejs","hash":"ff1b36f73cebd04e72520ceba0d959b56386874d","modified":1693648626442},{"_id":"themes/hexo-theme-bamboo/layout/_partial/topArticle.ejs","hash":"ba26f88c11dcc3ce3a987c4caf071e2f52ad58f0","modified":1693648626455},{"_id":"themes/hexo-theme-bamboo/layout/_partial/swiper.ejs","hash":"bc0ce3be887a734ac71a9b5595b6b366913bc102","modified":1693648626455},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side.ejs","hash":"49ab0cdbcb40e88261e563cea764e2ea1a40db63","modified":1693648626452},{"_id":"themes/hexo-theme-bamboo/source/css/style.styl","hash":"ae78f74d9f502f042e4ba73a351ea6c921507309","modified":1693648626495},{"_id":"themes/hexo-theme-bamboo/source/js/activate-power-mode.js","hash":"3d02584da9dd820d1d9a454c5a93a2c37a8e4e42","modified":1693648626496},{"_id":"themes/hexo-theme-bamboo/source/js/app.js","hash":"38e8d7ce69449ee7fc28db92f6be88ae26e708b2","modified":1693648626497},{"_id":"themes/hexo-theme-bamboo/source/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1693648626495},{"_id":"themes/hexo-theme-bamboo/source/medias/logo.png","hash":"c581f14e3234b9e111be5d0c42825a299b68c4c9","modified":1693654712225},{"_id":"themes/hexo-theme-bamboo/source/js/goTop.js","hash":"dfcbf8a70cfb4465d0afabf5153bd069771a6a1c","modified":1693648626503},{"_id":"themes/hexo-theme-bamboo/source/js/local_search.js","hash":"475dc0727cb85c22f15f86701dd93c4bf449a438","modified":1693648626506},{"_id":"themes/hexo-theme-bamboo/source/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1693648626509},{"_id":"themes/hexo-theme-bamboo/scripts/events/lib/stellar-tag-utils.js","hash":"687727b6846740353f4ba81d8ee1e62cbcfcf887","modified":1693648626458},{"_id":"themes/hexo-theme-bamboo/scripts/z-lazyload/lib/process.js","hash":"e6883b90fbc7c5194ace34f3258f69d411ef25ff","modified":1693648626468},{"_id":"themes/hexo-theme-bamboo/layout/_partial/analytics/baidu-analytics.ejs","hash":"f989e0ee065053d355837ca998eca27c00131d34","modified":1693648626428},{"_id":"themes/hexo-theme-bamboo/layout/_partial/analytics/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1693648626429},{"_id":"themes/hexo-theme-bamboo/layout/_partial/analytics/google-analytics.ejs","hash":"f04decc35047925815621d6a559330cc2c6c2bc9","modified":1693648626429},{"_id":"themes/hexo-theme-bamboo/source/js/wrapImage.js","hash":"346d92890f5a76f72171f909d0a62cba846dc8ee","modified":1693648626535},{"_id":"themes/hexo-theme-bamboo/layout/_partial/card/post.ejs","hash":"004aef800efdd4114f437f29ec1061685dce356e","modified":1693648626431},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/drawer.ejs","hash":"7f58dba694b251049deb73f6a18b94de6d4c82f9","modified":1693648626439},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/head.ejs","hash":"9252f666c7e0b93584bd876d604839e52ee15859","modified":1693648626439},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/header.ejs","hash":"d281dd7066e7f7e60b0b2fefc62353d872cf8413","modified":1693648626440},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head/search.ejs","hash":"5d2acb6b861ad238b208967c9da5c561dd9e5580","modified":1693648626440},{"_id":"themes/hexo-theme-bamboo/layout/_partial/math/mathjax.ejs","hash":"388b78bc00022c6550823ffa70b8f0eb1d1cd8be","modified":1693648626441},{"_id":"themes/hexo-theme-bamboo/layout/_partial/math/mermaid.ejs","hash":"fb9ab8c213fa4516e3688a2aab44326ad1a025e7","modified":1693648626441},{"_id":"themes/hexo-theme-bamboo/layout/_partial/footer/busuanzi.ejs","hash":"e270fd0f16574b86630498c15f013d5ef58b80c0","modified":1693648626438},{"_id":"themes/hexo-theme-bamboo/layout/_partial/footer/fish.ejs","hash":"5b6d29219a57bf34ececaf1b9dc598ec63c24201","modified":1693648626438},{"_id":"themes/hexo-theme-bamboo/layout/_partial/footer/footer.ejs","hash":"e3d5d8e9cf3c735e7ecf591b6a5ef77e819fea41","modified":1693648626439},{"_id":"themes/hexo-theme-bamboo/layout/_partial/meta/aplayer.ejs","hash":"160c39f0810c515cdf5c2364227f59aec3251cc2","modified":1693648626441},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/bgSwiper.ejs","hash":"12a2d8f1d99edf60dd283f74fd99d9c1bfcfaaf8","modified":1693648626442},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/categories.ejs","hash":"45004011cdca22dd0c980a2f90c68054667d0838","modified":1693648626443},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/comment.ejs","hash":"7e76a8705df059d9595b1ba21bace4345a4d6734","modified":1693648626443},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/copyright.ejs","hash":"9f05ed11f3151bf50b843f0429527a523872e098","modified":1693648626443},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/donate.ejs","hash":"72336d4ecc8fb205b620253f950b2080a2aeed0f","modified":1693648626443},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/post-detail-header.ejs","hash":"1ffaf3f042206cb7d64798d0030b2d777be5cbfa","modified":1693648626443},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/post-nav.ejs","hash":"da01c409b1c2b68ff710c5dd83f19d6c435e9776","modified":1693648626444},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/prismjs.ejs","hash":"bff454e36b76dbc06638090ae8d46044dc8ca85b","modified":1693648626444},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/share.ejs","hash":"d1cdbc86207b2113f811742419032d1f6058079b","modified":1693648626444},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/tags.ejs","hash":"ff49ab6225b40e3b2fadcd592f4ffcc8ad3861af","modified":1693648626444},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/toc.ejs","hash":"5daf18775e5cf3c993d65bc6d8a2dfb8b03ee4b7","modified":1693648626444},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_1.ejs","hash":"7558051d554483b392d4b3e2fb2f281bf8032ba5","modified":1693648626445},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_2.ejs","hash":"98f049c1fef78c2635c6e8bc07a1199a295f938b","modified":1693648626445},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_3.ejs","hash":"2da3733ce0441b9c490475f655938a6ce224db64","modified":1693648626445},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_4.ejs","hash":"497d1f80761e9580c953f74485b2ab9878edcfae","modified":1693648626445},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_6.ejs","hash":"d5c6213f9384cafa0e72bb0fa5ae2a6225cd0bfd","modified":1693648626446},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_5.ejs","hash":"937dfb80d40581ab9b194781cd09b5668fcf81d1","modified":1693648626446},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_7.ejs","hash":"2fced8bd111a46fa6c3cd64d22d748d6debee8f9","modified":1693648626447},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_9.ejs","hash":"bcac880397ba0c42409231dab762ae1bc9ae9d75","modified":1693648626447},{"_id":"themes/hexo-theme-bamboo/layout/_partial/preLoader/loader_8.ejs","hash":"cb3d3cd743949b3916059be7ead04ead92710be4","modified":1693648626447},{"_id":"themes/hexo-theme-bamboo/layout/_partial/pjax/animate.ejs","hash":"2528b879755c3471b3f47bdd8ee3806c2c72fba3","modified":1693648626442},{"_id":"themes/hexo-theme-bamboo/layout/_partial/pjax/index.ejs","hash":"59acb62d88b9e66f05d103f0f118eba4c7470cb1","modified":1693648626442},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/sideHeader.ejs","hash":"588fc152cc51e70f2c721555ee53dd2dcbb049c6","modified":1693648626452},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_blogger.ejs","hash":"e88ae04908799f5d6dba38f28d7cd85ff45556a5","modified":1693648626452},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_category.ejs","hash":"8a7a6e42d3e745c3235d119ba0c63bbbc83cd106","modified":1693648626453},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_archives.ejs","hash":"6659a785f112460877a33b7a6f02dd805558cc21","modified":1693648626452},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_recent_post.ejs","hash":"a961783a1b2f04d433faedd0755b66e927ebc1ba","modified":1693648626453},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_toc.ejs","hash":"0400b06628fdd0eeea10e00af90f4521c2bb136a","modified":1693648626454},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_tagcloud.ejs","hash":"5fa40c2b4b6643a2769331f00013fb27dc6ee2c4","modified":1693648626453},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/side_webinfo.ejs","hash":"c81c5471a4a9fc1e8a78fe6a8b2ebb907087c578","modified":1693657570441},{"_id":"themes/hexo-theme-bamboo/layout/_partial/side/widget_library_sticky.ejs","hash":"fe6e8c25240d2d90626b07d47e8b557c27098713","modified":1693648626454},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/copy.ejs","hash":"3b3b4c4bb0a34af119292a948ee29fbcf331b4d2","modified":1693648626448},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/danmu.ejs","hash":"4eff58f4f870de51f9aa08ebb81cdcde8529ef96","modified":1693648626448},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/cursor_effect.ejs","hash":"d9f2e7025cc2f4a3de8419e23371ffdaaab018f5","modified":1693648626448},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/dark.ejs","hash":"29c3a72d4b00a3569b0ce209e428fdf2d73317a0","modified":1693648626448},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/falling.ejs","hash":"103bed9758ac8fa53edfba0a4f1b50faee9dca9b","modified":1693648626449},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/getPhotoOnline.ejs","hash":"48eef0f7d841d18a912acac772693c7764024513","modified":1693648626449},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/getSiteOnline.ejs","hash":"b5d52576a1c0b42f3a98619d680fc8a4ec6aab4a","modified":1693648626449},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/getTalkOnline.ejs","hash":"80786565059147ea40a25a2439ecbf0c37658170","modified":1693648626449},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/global.ejs","hash":"12619a95fc870212a4de1ca08fb1026176679b65","modified":1693648626449},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/head.ejs","hash":"f8217c89fa39e0516200da8ecd0dde2fec3c9891","modified":1693648626449},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/index.ejs","hash":"9850a395301bd467b95609afe05ef46fa650860e","modified":1693648626450},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/inputEffects.ejs","hash":"7630b4cef226f99385bcf01f604d25f4b65318c7","modified":1693648626450},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/issues.ejs","hash":"ab547e88bada03125150327a025be05cd7a9bc8e","modified":1693648626450},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/lazyload.ejs","hash":"eaab6c8252a3ed0706f45c331a9e017cea4a3535","modified":1693648626450},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/scrollreveal.ejs","hash":"bdd17960edce7b40c4e26df00d351bb16614133b","modified":1693648626450},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/setHeader.ejs","hash":"943b4c90fa08b901ca1e016528d20648f9bffd23","modified":1693648626450},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/swiperTag.ejs","hash":"639743741a6de2e7a40d3625c8525560b9734e3a","modified":1693648626451},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/toc.ejs","hash":"ded2bb1a71482d79c346a5e013a0fa6b00d0003e","modified":1693648626451},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/typed.ejs","hash":"73acc534dcfb19f0e674a52eba6a9376ad430b30","modified":1693648626451},{"_id":"themes/hexo-theme-bamboo/source/css/_defines/variable.styl","hash":"460c920078b5367f586b3d17d9f87e53b9fd0843","modified":1693648626469},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/about.styl","hash":"a125f2891f5a088eaa08bcccdbbbba7aa1eda0f7","modified":1693648626470},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/archive.styl","hash":"6b9659d2abc44c4a5081b12556d6fef14a06cdd3","modified":1693648626471},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/base.styl","hash":"fd99167ba0b85301f26496a3452f071f9cd6f31a","modified":1693648626471},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/copyRyght.styl","hash":"21623bb44c7fb00ebde18b9b4673457c86851ce7","modified":1693648626473},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/categories.styl","hash":"5b42b9fde51f5b8649b06ee1bca84a6c072bc8e9","modified":1693648626472},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/category.styl","hash":"bce11b4616beb5329f34501ba415ab7be1736ff2","modified":1693648626472},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/comment.styl","hash":"e2b0fe63766892e47d2600db452439606341c685","modified":1693648626473},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/custom.styl","hash":"84f84a1ae189c1febec63454be00d65ba69e3773","modified":1693648626473},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/donate.styl","hash":"06afbf560ae3caf9d48fe02c8b3d82bca2cebb22","modified":1693648626474},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/danmu.styl","hash":"87406be8f0be56862b77803bd86b3d9f342435ac","modified":1693648626474},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/dark.styl","hash":"9c647bce70ae88a133e5216cb1ca9f37e0f674a1","modified":1693648626474},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/drawer.styl","hash":"47a82cc350cd512399f8d97063499c414eb4662c","modified":1693648626475},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/friends.styl","hash":"d91bf1b489889f25fc7a506be45b3cdf0a5b38a2","modified":1693648626475},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/footer.styl","hash":"29c2efba47d1e356be78a8cbc9acdd6d51362809","modified":1693648626475},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/goTop.styl","hash":"5757627a472b12a05d3a4e2986cc459a978c1071","modified":1693662400180},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/highlight.styl","hash":"b0b5d1a070e470f73038480fe474aca98a258f9e","modified":1693648626476},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/home.styl","hash":"1a6220af4b38d7ec84c726fafe755a2f1b049f4c","modified":1693648626476},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/header.styl","hash":"20807cf5dd56f681851e766f91f847658f9e7cbd","modified":1693648626476},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/motto.styl","hash":"01e8ac7e70ad5510244242ba27e0896652aa3ce2","modified":1693663945807},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/lantern.styl","hash":"2603683ee15aca0933e4e15577be45e1032ef332","modified":1693648626477},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/notice.styl","hash":"57e333bad7ef2983ebe8a8e486827b829249b2e8","modified":1693648626477},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/pace.styl","hash":"fcc30b2d2f8016b0331f6613ce0ae663093cc3ab","modified":1693648626478},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/paginator.styl","hash":"983957412350b651607346ff0cf80d918634537b","modified":1693648626478},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post-detail-header.styl","hash":"a41719ad49655563d89c6dc90bf52e05006d8ddc","modified":1693648626478},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post-nav.styl","hash":"5facbd569de95e032e185816a50941da2379f8fd","modified":1693678124072},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post.styl","hash":"61f916a8933847ae1c3a4f62683dc7ff3f970767","modified":1693660976229},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/posts.styl","hash":"4c9655fb7c23385d572e37534a36922573c0d87f","modified":1693648626484},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/search.styl","hash":"b50899c8347a680a6a451aa38df95583a14d274d","modified":1693648626485},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/side.styl","hash":"5e35f8d5c26005ea9284b56f1b26d98402693143","modified":1693662432854},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/tag.styl","hash":"775005641a93d20496a3f8b3bcf0ce03d6374e6c","modified":1693648626486},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/tags.styl","hash":"e4f9770b29fe47575b7cb3ccaa1e4161bedc6ccf","modified":1693648626486},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/topArticle.styl","hash":"6a3d84770cba2e39533725a1db85367139a80203","modified":1693648626486},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/transition.styl","hash":"893476822b8011c6efc2d4822c237debb1d2752a","modified":1693648626487},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/btn.styl","hash":"8e734421541539c202e2b3f5d690b1d72831133f","modified":1693648626488},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/circle.styl","hash":"8fea937dc6ffb22aa2a435862ce8e06308df5965","modified":1693648626488},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/checkbox.styl","hash":"26647f72de70e61778893887c34080f5d0c3bf64","modified":1693648626488},{"_id":"themes/hexo-theme-bamboo/source/medias/cursor/Horizontal.cur","hash":"c3c5e8485a67b7ab16079a96b53aff7ff52de756","modified":1693648626535},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/folding.styl","hash":"0a93551470fd093d14f6980650617f61cbe358c0","modified":1693648626491},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/galleryGroup.styl","hash":"3bd73e43ff26af03689647d8c87c74ccc1246372","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/gallery.styl","hash":"0a03d1cba6bf4e92cb3bf5ab8ab7c0f921e90e34","modified":1693648626491},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/image.styl","hash":"3806a855d0654b2e31e286884f97c58c4dc35a35","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/inline-label.styl","hash":"1731022ae2dd1e5bf44eca5fc2a4fde5d3e19826","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/media.styl","hash":"5e3e064e46db84536e6f8c83db138a63fbadc232","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/link.styl","hash":"8c8dd27de491f43831b3662a69c0d3729da9c3c4","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/note.styl","hash":"b78ab3f2c95666d6521001b84e92f59707e50d10","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/progress.styl","hash":"a16479bdd1d3e4371d91b4d05bfe6153861851ec","modified":1693648626492},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/site-card.styl","hash":"a6d1e9c1cb501e6d9e241ab97d2184e229e36187","modified":1693648626493},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/span.styl","hash":"6a7734904c4818bc8b379d44642c4bcf1f9798f8","modified":1693648626493},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/swiper.styl","hash":"571a0eedbfc6a9253856d55a357808e4be99d596","modified":1693648626493},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/tabs.styl","hash":"c261bbc2503bf61a343d8f1870ab493e86f9a42c","modified":1693648626494},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/talkByJson.styl","hash":"3a5a2cef26e5600e7a179c62b06391fba4a0ab0c","modified":1693648626494},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/timeline.styl","hash":"23044f0a93ab8a54686b5472d9d6ac56eaf56da2","modified":1693648626494},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/title.styl","hash":"19bbc75baf4a71f4fda883807e0104cdae388d7e","modified":1693648626495},{"_id":"themes/hexo-theme-bamboo/source/css/_plugins/mathjax.styl","hash":"84140a2367b3e2166846a88101e2c2d2180cfe29","modified":1693648626487},{"_id":"themes/hexo-theme-bamboo/source/css/_plugins/pjaxanimate.styl","hash":"75dcb005e509cc352ffc809ef559da19d6c583bf","modified":1693648626487},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/bubble.js","hash":"40cbc57f98407216ba6dc412e2b75e18c036240f","modified":1693648626498},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1693648626498},{"_id":"themes/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1693648626497},{"_id":"themes/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1693648626498},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1693648626499},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1693648626499},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1693648626499},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1693648626499},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1693648626499},{"_id":"themes/hexo-theme-bamboo/source/js/getPhotoOnline/index.js","hash":"f513605485600561123ffae1a70a0eb35cd5c675","modified":1693648626502},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1693648626500},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1693648626500},{"_id":"themes/hexo-theme-bamboo/source/js/falling/snow.js","hash":"6f4ef88304f874ef8bb8ea54f79b5d97f5a8f2f6","modified":1693648626501},{"_id":"themes/hexo-theme-bamboo/source/js/falling/sakura.js","hash":"ab41921e8f6ea1bedfcc348924574dc0caa20858","modified":1693648626501},{"_id":"themes/hexo-theme-bamboo/source/js/getTalkOnline/index.js","hash":"58d9601cfd851c83c2eadd4803698171cd2d8b08","modified":1693648626503},{"_id":"themes/hexo-theme-bamboo/source/js/getSiteOnline/index.js","hash":"8b93e96331bbdcbee0deb33c9aeca6b2dceacb4b","modified":1693648626502},{"_id":"themes/hexo-theme-bamboo/source/js/issues/index.js","hash":"e5f7b37f9dd8e966c7a63b8b6da27d53510eddeb","modified":1693648626504},{"_id":"themes/hexo-theme-bamboo/source/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1693648626505},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1693648626507},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1693648626507},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1693648626507},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1693648626507},{"_id":"themes/hexo-theme-bamboo/source/js/pjax@0.2.8/index.js","hash":"c9b1e349203e558dbe43665353e88c6eafc7dbcd","modified":1693648626506},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1693648626508},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1693648626508},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1693648626508},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1693648626509},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1693648626509},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1693648626524},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.css","hash":"45e469dffa7b9ebc03f99fd09fb97274cdc5e9b4","modified":1693648626518},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.animate1.0.3.min.js","hash":"d26f0ff85f5fea9b0e46bdfc1a4c4b202bc88619","modified":1693648626514},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1693648626518},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1693648626510},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1693648626512},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper@5.4.1.min.css","hash":"de2263f82e7bf0778f31fd05c53000799f60701a","modified":1693648626517},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1693648626517},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1693648626513},{"_id":"themes/hexo-theme-bamboo/source/js/utils/index.js","hash":"54c66b0a396cc3743884cdb979e5c400218613ce","modified":1693648626525},{"_id":"themes/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1693648626528},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.css","hash":"2f4ab64e2ac07c6dde792c13e749b31e0e0cd5e5","modified":1693678807982},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/beaudar/layout.ejs","hash":"52b9a55b6e83bd9a10fc3f66a18be98e3965475b","modified":1693648626432},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/beaudar/script.ejs","hash":"f6c087d32bf103ac42032d0b675eb316e40f958e","modified":1693648626432},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1693648626529},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/changyan/layout.ejs","hash":"b90f7f7e2f77be536f4b97d52419a2f794bdbaec","modified":1693648626432},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/changyan/script.ejs","hash":"03e325fae6afbdf97b6248718da6ae55c7f9713f","modified":1693648626433},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitment/layout.ejs","hash":"25133b120d294dc7bf195ddc175a808970902922","modified":1693648626434},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitment/script.ejs","hash":"f1b1e86772b919f51439ee9f2a1457f1c72b48f6","modified":1693648626434},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitalk/layout.ejs","hash":"6e79a6febb328f25672a30562f42bae83b660d43","modified":1693648626433},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitalk/script.ejs","hash":"0d9ca1cf699ca0833314d200a3c443a169628c27","modified":1693648626434},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/livere/layout.ejs","hash":"5986303fce163c62598a036d4366f3371537d714","modified":1693648626435},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/livere/script.ejs","hash":"15168683633177a1bae9238595ba163da8c31189","modified":1693648626435},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/utterance/layout.ejs","hash":"b9d45f3cc83931c766283e9ad9aab62578d20370","modified":1693648626436},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/utterance/script.ejs","hash":"b533a20a77fd9f85bd05abe1eb32fdb96d62b10e","modified":1693648626437},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/twikoo/layout.ejs","hash":"d0730213e2a736c39a3ca519405c799dfc37311b","modified":1693648626435},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/twikoo/script.ejs","hash":"b35bf06fb2e8bc1b08b8a26e1f967fab398d0945","modified":1693648626436},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/valine/script.ejs","hash":"686825b876be14a69f8a81e575b8ff873c6473bb","modified":1693648626437},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/valine/layout.ejs","hash":"fa5f2280e3159ece2e3185536c2338f30a442d08","modified":1693648626437},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/waline/layout.ejs","hash":"b26e5ea3f5553b65117dc0d260c8a8e91929741c","modified":1693648626437},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/waline/script.ejs","hash":"45e64391a7baef0c8e025640f49a9bdbfac1a756","modified":1693648626437},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_1.styl","hash":"fad3760b5280d5f074e2cddfcd8799271847e817","modified":1693648626484},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_2.styl","hash":"be6d8bead01f83be4301044e5ab902d4203bb2ef","modified":1693648626484},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_3.styl","hash":"0a0cdfd52a2bebc9165f6e74a09377501846baf9","modified":1693648626484},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_4.styl","hash":"d37f0ae9e913ad5f66fa277c27b2f2a091c9861d","modified":1693648626484},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_5.styl","hash":"8d7d41ebf5871a53e62463517a4f6710069187e3","modified":1693648626485},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_7.styl","hash":"6c3801881c8c0d5a72a8ba6e4954627ccb4838fb","modified":1693648626485},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_6.styl","hash":"f6d0a40b5d4802b201f1e703801882d3fff0be4d","modified":1693648626485},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/preLoader/loader_8.styl","hash":"9a769ce1141594c92d7277688617516d900a4c87","modified":1693648626485},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_1.styl","hash":"747203f44b6f1f0cf461ad267adbb4f7a088e384","modified":1693648626489},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_10.styl","hash":"7a56563ac7c5e54890c1503cc26d0b2cce2c5e5f","modified":1693648626489},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_13.styl","hash":"aeafdf3145d4b1e4c29fce168152347fbef06ecb","modified":1693648626489},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_11.styl","hash":"3200f4686a059c720240d79da0499f275f9072ab","modified":1693648626489},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_12.styl","hash":"f30b240ed01589c4a9226bd26b2c9b16fbc4f731","modified":1693648626489},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_15.styl","hash":"c4871320812888cbc02f028cb2e4536d638c9922","modified":1693648626490},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_2.styl","hash":"7c30edb992577ac0972c88a73ba8dca9bc5e3a00","modified":1693648626490},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_3.styl","hash":"f83142b71f4913a97e9f4f38984875ee67c834b6","modified":1693648626490},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_14.styl","hash":"f99ca2a3c04eb5a07c10990bd47a235d2f4bb1d4","modified":1693648626490},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_4.styl","hash":"df3d24ae1d912296a9f4271b7b808c8f4c296f0b","modified":1693648626490},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_5.styl","hash":"14dba613efd1cba5167d5347755063ffdbd98d86","modified":1693648626490},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_6.styl","hash":"2e5a6561325cf920845a21a82452ddd5eecb7c60","modified":1693648626491},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_7.styl","hash":"370ad5362836e7ca7a0cbc1a103680bbfbabe230","modified":1693648626491},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_8.styl","hash":"0611b95238be036de97e4f2777ade6c20c7d8abf","modified":1693648626491},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/coolBtn/coolBtn_9.styl","hash":"5f95065c870432d5b34ef2b550b484848a204bd0","modified":1693648626491},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1693648626510},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1693648626511},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1693648626511},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1693648626512},{"_id":"themes/hexo-theme-bamboo/source/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1693648626505},{"_id":"themes/hexo-theme-bamboo/source/js/swiper/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1693648626516},{"_id":"themes/hexo-theme-bamboo/source/js/valine/index.js","hash":"8809117760e0a7ce8dcc3f14b6421a4d415284a6","modified":1693648626527},{"_id":"themes/hexo-theme-bamboo/source/js/waline/waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1693648626535},{"_id":"themes/hexo-theme-bamboo/source/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1693648626533},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1693648626524},{"_id":"public/search.xml","hash":"b8a72da6449dfdf1e984f4d12b5b96b70231dfda","modified":1693701697083},{"_id":"public/atom.xml","hash":"fbab503951215efd37afc8043b16d0f86db00bc0","modified":1693709411116},{"_id":"public/categories/index.html","hash":"a26cf81ee09c87cdd0ff8de11bc81e7b8e7e1350","modified":1693708140935},{"_id":"public/tags/index.html","hash":"fa0898cc374f0f37dfdfc58e8b6719e795f7e7a7","modified":1693708140935},{"_id":"public/favicon.ico","hash":"0b35fff20b29446eb8865f31a634f2e51c3a18d1","modified":1693676016467},{"_id":"public/medias/cursor/Horizontal.cur","hash":"c3c5e8485a67b7ab16079a96b53aff7ff52de756","modified":1693676016467},{"_id":"public/medias/logo.png","hash":"c581f14e3234b9e111be5d0c42825a299b68c4c9","modified":1693676016467},{"_id":"public/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1693676016467},{"_id":"public/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1693676016467},{"_id":"public/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1693676016467},{"_id":"public/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1693676016467},{"_id":"public/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1693676016467},{"_id":"public/js/shareJs/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1693676016467},{"_id":"public/js/activate-power-mode.js","hash":"3d02584da9dd820d1d9a454c5a93a2c37a8e4e42","modified":1693676016467},{"_id":"public/js/goTop.js","hash":"dfcbf8a70cfb4465d0afabf5153bd069771a6a1c","modified":1693676016467},{"_id":"public/js/app.js","hash":"38e8d7ce69449ee7fc28db92f6be88ae26e708b2","modified":1693676016467},{"_id":"public/js/local_search.js","hash":"475dc0727cb85c22f15f86701dd93c4bf449a438","modified":1693676016467},{"_id":"public/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1693676016467},{"_id":"public/js/wrapImage.js","hash":"346d92890f5a76f72171f909d0a62cba846dc8ee","modified":1693676016467},{"_id":"public/js/bubble/bubble.js","hash":"40cbc57f98407216ba6dc412e2b75e18c036240f","modified":1693676016467},{"_id":"public/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1693676016467},{"_id":"public/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1693676016467},{"_id":"public/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1693676016467},{"_id":"public/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1693676016467},{"_id":"public/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1693676016467},{"_id":"public/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1693676016467},{"_id":"public/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1693676016467},{"_id":"public/js/getPhotoOnline/index.js","hash":"f513605485600561123ffae1a70a0eb35cd5c675","modified":1693676016467},{"_id":"public/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1693676016467},{"_id":"public/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1693676016467},{"_id":"public/js/falling/snow.js","hash":"6f4ef88304f874ef8bb8ea54f79b5d97f5a8f2f6","modified":1693676016467},{"_id":"public/js/getSiteOnline/index.js","hash":"8b93e96331bbdcbee0deb33c9aeca6b2dceacb4b","modified":1693676016467},{"_id":"public/js/issues/index.js","hash":"e5f7b37f9dd8e966c7a63b8b6da27d53510eddeb","modified":1693676016467},{"_id":"public/js/getTalkOnline/index.js","hash":"58d9601cfd851c83c2eadd4803698171cd2d8b08","modified":1693676016467},{"_id":"public/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1693676016467},{"_id":"public/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1693676016467},{"_id":"public/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1693676016467},{"_id":"public/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1693676016467},{"_id":"public/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1693676016467},{"_id":"public/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1693676016467},{"_id":"public/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1693676016467},{"_id":"public/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1693676016467},{"_id":"public/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1693676016467},{"_id":"public/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1693676016467},{"_id":"public/js/tocbot/tocbot.min.js","hash":"bc45d3586a21f7e364cd6efe58844932c00cf11c","modified":1693676016467},{"_id":"public/js/swiper/swiper.animate1.0.3.min.js","hash":"0e48f180ca2f18b787e4b7b6e55ee3b0c6067691","modified":1693676016467},{"_id":"public/js/tocbot/tocbot.css","hash":"45e469dffa7b9ebc03f99fd09fb97274cdc5e9b4","modified":1693676016467},{"_id":"public/js/swiper/swiper@5.4.1.min.css","hash":"de2263f82e7bf0778f31fd05c53000799f60701a","modified":1693676016467},{"_id":"public/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1693676016467},{"_id":"public/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1693676016467},{"_id":"public/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1693676016467},{"_id":"public/js/falling/sakura.js","hash":"ab41921e8f6ea1bedfcc348924574dc0caa20858","modified":1693676016467},{"_id":"public/js/pjax@0.2.8/index.js","hash":"c9b1e349203e558dbe43665353e88c6eafc7dbcd","modified":1693676016467},{"_id":"public/js/swiper/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1693676016467},{"_id":"public/js/swiper/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1693676016467},{"_id":"public/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1693676016467},{"_id":"public/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1693676016467},{"_id":"public/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1693676016467},{"_id":"public/js/utils/index.js","hash":"54c66b0a396cc3743884cdb979e5c400218613ce","modified":1693676016467},{"_id":"public/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1693676016467},{"_id":"public/js/vue-typed-js/index.css","hash":"2f4ab64e2ac07c6dde792c13e749b31e0e0cd5e5","modified":1693701697083},{"_id":"public/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1693676016467},{"_id":"public/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1693676016467},{"_id":"public/js/valine/index.js","hash":"8809117760e0a7ce8dcc3f14b6421a4d415284a6","modified":1693676016467},{"_id":"public/js/waline/waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1693676016467},{"_id":"themes/hexo-theme-bamboo/.DS_Store","hash":"b54aea6bc58bb586667cc92bd92d462f23eb07c9","modified":1693709350507},{"_id":"themes/hexo-theme-bamboo/source/.DS_Store","hash":"40a4667125afb03b83e8fbfeb9bcf6e4972a5ffb","modified":1693708889992},{"_id":"themes/hexo-theme-bamboo/source/medias/.DS_Store","hash":"7d4def7e66285fd545ed137744f6e97b2cbf1f1d","modified":1693655568876},{"_id":"source/weibo/index.css","hash":"b249784a69e1cdda115d309f01c65a4aba416eac","modified":1693667325076},{"_id":"source/weibo/index.js","hash":"ad0d27f211fddca6261698c67a0723e13a02be7d","modified":1693667629252},{"_id":"source/_data/widget.yml","hash":"ca802fede4522cdc609c777a7e6b11daa49dbba2","modified":1693667583523},{"_id":"public/weibo/index.css","hash":"b249784a69e1cdda115d309f01c65a4aba416eac","modified":1693667751430},{"_id":"public/weibo/index.js","hash":"ad0d27f211fddca6261698c67a0723e13a02be7d","modified":1693667751430},{"_id":"source/_weibo/index.css","hash":"9a8df280e2db37d846b8732b621a9a84bc212232","modified":1693667834627},{"_id":"source/_weibo/index.js","hash":"62394bd410c16c09face2d29a07eb8f911c8c2f9","modified":1693667837581},{"_id":"source/.DS_Store","hash":"15edb79c2a4f4a7b70b72aabe699a5e0b50a62c7","modified":1693709333057},{"_id":"source/_posts/2014-10-22-what-is-markdown.md","hash":"2f5194ff0d1ad257501b77a2f850ced2d8b48b66","modified":1693669313564},{"_id":"source/_posts/2014-10-23-markdonw-syntax-for-block-elements.md","hash":"73f7e5680c15a1c4286b059dd929f41d0fb92d81","modified":1693669425940},{"_id":"source/_posts/2014-10-23-what-editor-tools-used-for-markdown.md","hash":"ec9bf421b8498cbd9cc5ca66a32556afcaa8acfc","modified":1693669361527},{"_id":"source/_posts/2014-10-28-backslash-escapes-in-markdown.md","hash":"001593f1aecf5e6b44bb04b0e0ea0ee7ef94a732","modified":1693669478480},{"_id":"source/_posts/2014-11-03-what-is-andriod.md","hash":"e0d59ca4c41828e02fa9466da4dc50825a067efd","modified":1692896328756},{"_id":"source/_posts/2014-11-05-git-commands-1.md","hash":"ff35dc55333674e4669a6eb1c06dcab53185ba8c","modified":1693669670403},{"_id":"source/_posts/2014-10-24-markdown-syntax-for-span-elements.md","hash":"8dd371638cf258bec29805c5006be68c13ac97a6","modified":1693669373562},{"_id":"source/_posts/2014-11-06-git-commands-2.md","hash":"6c58049d8d9be7faf9194f9ed16d2cca8afa9796","modified":1693669670427},{"_id":"source/_posts/2014-11-06-git-commands-3.md","hash":"956a0e884b387da7fffc86c1b1d2c74e892b75ce","modified":1693669670427},{"_id":"source/_posts/2014-11-04-what-is-git.md","hash":"b9aa8404dbb35f25c1fc5b058127a138f0381c93","modified":1693669670427},{"_id":"source/_posts/2014-11-06-visual-git-guide-basic-usage.md","hash":"1111361ccf6846d254e24caa6911c75377a5b064","modified":1693669670427},{"_id":"source/_posts/2014-11-07-visual-git-guide-cherry-pick-command.md","hash":"987e9c3530e551225e90796933a3b16cf39fd6ee","modified":1693669670427},{"_id":"source/_posts/2014-11-07-visual-git-guide-commit-command.md","hash":"1f7d65535535bc668f47638eb0ec6061e29e3ef1","modified":1693669670427},{"_id":"source/_posts/2014-11-07-visual-git-guide-checkout-command.md","hash":"d6922cbf36e705f62d41e876a680e5857738d27b","modified":1693669670427},{"_id":"source/_posts/2014-11-06-visual-git-guide-conventions.md","hash":"64812d4c973ccb77ca9f8ef41871299d7aa7d760","modified":1693669670427},{"_id":"source/_posts/2014-11-07-visual-git-guide-merge-command.md","hash":"a4f664c975545c0bd1e8363d336cc08acc8cdd3a","modified":1693669670427},{"_id":"source/_posts/2014-11-07-visual-git-guide-reset-command.md","hash":"2770a87e810c9a955285343dbf548bb72d53262c","modified":1693669670427},{"_id":"source/_posts/2014-11-07-visual-git-guide-diff-command.md","hash":"16b347a27f227f626dd1183d4785a15c467c2a62","modified":1693669670427},{"_id":"source/_posts/2014-11-07-visual-git-guide-rebase-command.md","hash":"e073009f38936b817dda534a9d256b99b393173a","modified":1693669670427},{"_id":"source/_posts/2014-11-17-the-lifecycle-of-android-activity.md","hash":"e538b073c37431581191c01ac75b9b76b4e136fa","modified":1693675649722},{"_id":"source/_posts/2014-11-13-building-blocks-of-android-application.md","hash":"17e83e85b4fc30c7d0a5da85f691e6896d170d64","modified":1693677636169},{"_id":"source/_posts/2014-11-07-visual-git-guide-technical-notes.md","hash":"ae0701cdf4a93ca7e39d8075df4b31c4dd08d98e","modified":1693669670427},{"_id":"source/_posts/2014-11-21-guava-optional.md","hash":"dbcd07214367d219f079c28d5d5b8a90a83c4e45","modified":1693677636061},{"_id":"source/_posts/2014-12-01-jsp-custom-tag.markdown","hash":"717d8b66e50274bf34b3b77eb840eb987edb16f4","modified":1693677636061},{"_id":"source/_posts/2014-12-12-guava-ordering.markdown","hash":"78f930434f5fd758c05be9c2c1af24cb38ab80c0","modified":1693677636061},{"_id":"source/_posts/2014-11-26-guava-preconditions.markdown","hash":"947e3f88f0fb9a67dc51f4b93eb4ebba233d7daf","modified":1693677636061},{"_id":"source/_posts/2014-11-27-guava-common-object-method.markdown","hash":"9171fbe813674fbd90674bc6ea339a3d9df9bbf7","modified":1693677636061},{"_id":"source/_posts/2014-12-23-what-is-cucumber.markdown","hash":"b1ac6658e6a85312ca708f4ac51ac7f752e52f9d","modified":1693677636061},{"_id":"source/_posts/2014-12-19-what-is-ractive-dot-js.markdown","hash":"252f9fc72c59d29ad8134746551d13ab31dc70c0","modified":1693677636061},{"_id":"source/_posts/2014-12-18-how-to-learn-any-language-in-six-months.markdown","hash":"78c33f572d9ffe9d0fe34ff8f3271263c7d1cc05","modified":1693676891706},{"_id":"source/_posts/2014-12-26-how-to-install-sublime-text-plugin.markdown","hash":"179a213def78d805d326aab76e03dc44e6bd4927","modified":1693675649812},{"_id":"source/_posts/2015-01-28-css-tricks-for-ie6-ie7-ie8-ie9.markdown","hash":"5fcadfab9752cc18b270dc4b0e2c1717f37d321f","modified":1693672673353},{"_id":"source/_posts/2015-01-13-a-new-way-for-developing-web-application-front-end.markdown","hash":"eb10ddfeab88e22c0c9f2ba35d9be605c6fd19e9","modified":1693677636061},{"_id":"source/_posts/2015-01-07-how-to-run-multiple-ie-version-on-same-cotim.markdown","hash":"bca3dd77e2001331b8b394305b6b060e508bbdf4","modified":1693675649812},{"_id":"source/_posts/2015-01-28-conditinal-stylesheets-for-ie-version.markdown","hash":"39bc2dcb52a24deafb7e87cc3fbbc6251b519e18","modified":1693677636061},{"_id":"source/_posts/2015-03-02-a-nice-web-design-tool-bracket.markdown","hash":"912d4a67ffa63d997d6ca6f28babb0879a7c850a","modified":1693677835677},{"_id":"source/_posts/2015-02-06-understading-mvc-mvp-and-mvvm-design-patterns.markdown","hash":"20c9ca093e0fac0688908af14eb02593bd4c9b6e","modified":1693677636061},{"_id":"source/_posts/2015-03-02-html5-new-common-attributes.markdown","hash":"50702fe37285a1c76b88a17c7420716982ceb219","modified":1693677636061},{"_id":"source/_posts/2015-02-13-guave-immutable-collection.markdown","hash":"54c3bd8e615c18687f1eb5e9cf9c4abeee5e5281","modified":1693677636061},{"_id":"source/_posts/2015-03-03-html5-new-common-elements.markdown","hash":"8ed2178fb387341402c045b91e7a86cb65ec5825","modified":1693677636060},{"_id":"source/_posts/2015-03-19-give-me-a-cup-of-coffeescript.markdown","hash":"9949b543f78f0d34e46c490eb096f334a29d123c","modified":1693675649812},{"_id":"source/_posts/2015-05-16-angularjs-angular-dot-extend.markdown","hash":"5bcf246954627a54aa6767149e0be2b50dfe28b1","modified":1693677636061},{"_id":"source/_posts/2015-05-05-how-to-use-jdbc-in-spring.markdown","hash":"24520a17a6f918791ebff9af8b6d6c2039853e8b","modified":1693672978438},{"_id":"source/_posts/2015-05-20-analyze-call-function-of-javascript.markdown","hash":"8f1c023cd7eebfdc6536cf4b12f1ff9dd622c78b","modified":1693677636060},{"_id":"source/_posts/2015-05-16-sublime-text-keyboard-shortcuts-for-mac.markdown","hash":"a865cf5a7d34518ddbebf3fb6ba5536c7d80df84","modified":1693677636060},{"_id":"source/_posts/2015-05-19-destroy-your-website.markdown","hash":"bff5b3f402a2a5bb0352d3fc1e0a5b5267397205","modified":1693673308995},{"_id":"source/_posts/2015-06-04-a-cool-theme-for-sublime-text.markdown","hash":"cb67288cf8771373b82ef3235ce47a970f80d24d","modified":1693677636060},{"_id":"source/_posts/2015-06-05-spring-aop-aspect.markdown","hash":"21ec244a1697856f59011f2e3cb4f4bb08a46763","modified":1693673180394},{"_id":"source/_posts/2015-06-04-spring-aop-what-is-aop.markdown","hash":"8d9a90b1eef4d844842109c43c50fd47225baf0c","modified":1693673151467},{"_id":"source/_posts/2015-06-04-the-cobalt2-theme-for-iterm2-and-zsh.markdown","hash":"eedc3114c9752b7a4269baf9597f025ce9b0b662","modified":1693675649812},{"_id":"source/_posts/2015-06-05-spring-aop-before-advice.markdown","hash":"f754a483a5416656113f756bc4b6c1c65c4d8afa","modified":1693673184341},{"_id":"source/_posts/2015-06-08-spring-aop-around-advice.markdown","hash":"45eeda7bcf65bf88f3abf5f0ba153cb66ad28c7e","modified":1693673191041},{"_id":"source/_posts/2015-06-06-spring-aop-after-advice.markdown","hash":"10e34d57f4b6cb1c731dcabe1ca7767471cd3cff","modified":1693673188054},{"_id":"source/_posts/2015-06-09-spring-aop-joint-point.markdown","hash":"c233b78d1aac0106df533098d96e0eb4e308f0c8","modified":1693675970927},{"_id":"source/_posts/2015-06-08-spring-aop-throws-advice.markdown","hash":"c2a38cec874c13a1bbecfb7fdfc4500774da9f71","modified":1693673194641},{"_id":"source/_posts/2015-06-14-spring-aop-xml-schema.markdown","hash":"ac35ea096e771f84382c84098f74cb02d52a0226","modified":1693675976008},{"_id":"source/_posts/2015-06-12-spring-aop-dynamic-pointcut.markdown","hash":"daf0dc99eb9e5bc086e11b05b50af2154db0f61c","modified":1693675975019},{"_id":"source/_posts/2015-06-10-spring-aop-pointcut.markdown","hash":"fa9c4f53c28971e8938ceeba2701ab09d2109bca","modified":1693675972078},{"_id":"source/_posts/2015-06-11-spring-aop-static-pointcut.markdown","hash":"f4c1c1f259a5534497bf3eac61a1768ba2bd04cc","modified":1693675973089},{"_id":"source/_posts/2015-06-16-spring-aop-at-aspectj-annotation.markdown","hash":"d50a71e9c4d3866c6a2d284b3c272f59f54db938","modified":1693675977092},{"_id":"source/_posts/2015-08-06-how-to-get-or-post-data-via-httpclient-with-proxy.markdown","hash":"e19d86fbb835301b38cf74ad559351a16b443439","modified":1693673346966},{"_id":"source/_posts/2015-06-30-implicit-submission-of-form-when-pressing-enter-key.markdown","hash":"b5749ee7c6e6fcd391ebb00df99af31c35473338","modified":1693677636060},{"_id":"source/_posts/2015-07-30-using-tsd-to-improve-javascript-intellisense-of-ide.markdown","hash":"579398673ffff414b62c993ebba2f30934856c28","modified":1693675649812},{"_id":"source/_posts/2015-08-14-ruby-practice-3.markdown","hash":"ddd116845b36971038f055cf9299043d56cb5826","modified":1693677352928},{"_id":"source/_posts/2015-08-12-ruby-practice-1.markdown","hash":"de5ec92763a36eca54cb7b97555da49ff3cf4dca","modified":1693677636060},{"_id":"source/_posts/2015-08-17-ruby-practice-4.markdown","hash":"9de62c9aa7cc2d9ccbb238e949ae885f8c96d1ac","modified":1693677357042},{"_id":"source/_posts/2015-08-25-ruby-practice-6.markdown","hash":"f4520870d6aa6114f4f3a804cbd5fefcab49ac81","modified":1693677636061},{"_id":"source/_posts/2015-09-01-ruby-practice-7.markdown","hash":"27a627f24530a01d92779de20b407682f0c0b290","modified":1693677636061},{"_id":"source/_posts/2015-08-24-ruby-practice-5.markdown","hash":"a4848bd688f633fa14eb41c439b54793c8e8570b","modified":1693677636060},{"_id":"source/_posts/2015-08-13-ruby-practice-2.markdown","hash":"efcbbd36526d4fa370a585999b76ea6cb63f953c","modified":1693677636060},{"_id":"source/_posts/2015-09-06-ruby-practice-8.markdown","hash":"897e4682107ce294870e19d12e6031400d276295","modified":1693677636060},{"_id":"source/_posts/2015-09-28-ruby-practice-11.markdown","hash":"cb6dd5934c171aa8393531bf367b358255790345","modified":1693677923566},{"_id":"source/_posts/2015-09-15-ruby-practice-10.markdown","hash":"28cbe1df7fb92b18e7c65d2d9ccddcb1e02f5436","modified":1693677636060},{"_id":"source/_posts/2015-09-09-ruby-practice-9.markdown","hash":"ca31ef90a1d39e7fb025dd9e1e2259a1856b8903","modified":1693677636060},{"_id":"source/_posts/2015-09-23-the-initialization-of-the-angular-ngmodel.markdown","hash":"d4d6f5e356bac06925c2779208f07f8d9ce3ec1a","modified":1693675649813},{"_id":"source/_posts/2015-10-26-ruby-practice-13.markdown","hash":"dc2035e7e204d8ce7301c095fd83e47342fc40ac","modified":1693677636060},{"_id":"source/_posts/2015-10-13-ruby-practice-12.markdown","hash":"9d4ba1350ed7a5cd683cf10c3985259e41c45cc8","modified":1693677636060},{"_id":"source/_posts/2015-11-11-how-to-make-the-octopress-adapt-os-x-ei-capitan.markdown","hash":"82602446aa9615dcb5e136a45d81858ce86edcbe","modified":1693675989219},{"_id":"source/_posts/2015-11-12-ruby-practice-14.markdown","hash":"277d57533ca0507ac7f4ea76252c4e195b7938f2","modified":1693677636061},{"_id":"source/_posts/2015-11-17-ruby-practice-15.markdown","hash":"ee48c745303049138f783285a14bb0604d353b05","modified":1693677636060},{"_id":"source/_posts/2015-11-22-code-review-with-pull-request.markdown","hash":"1d904cae1cad80b3999df23e2bb9555e859d7fa5","modified":1693675649921},{"_id":"source/_posts/2016-01-12-how-to-fix-gem-filepermissionerror.markdown","hash":"12382a497ffa79715de434949e98344fa12c3c91","modified":1693673581121},{"_id":"source/_posts/2015-11-18-ruby-practice-16.markdown","hash":"1a5a7de7068563a2d1d70f28225227a59bcd5b55","modified":1693677636060},{"_id":"source/_posts/2015-12-05-using-nginx-in-mac-os-x.markdown","hash":"2d01b97f87b451ca643407cafd29020a7b64abba","modified":1693677636060},{"_id":"source/_posts/2016-02-05-shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he.markdown","hash":"dbff04b3037c82326e7a204adefba546637dae48","modified":1693701888878},{"_id":"source/_posts/2015-12-17-ruby-practice-17.markdown","hash":"15f192f233c7f34e380f8faf892012db12d02c90","modified":1693677636060},{"_id":"source/_posts/2016-01-25-shuang-zhi-zhen-suan-fa.markdown","hash":"52bcc5cf9058242f9137abc6061a0208c4960ad8","modified":1693675956845},{"_id":"source/_posts/2017-02-23-yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai.markdown","hash":"0d21523e5329dccffe0056c48819a19ef2c9186c","modified":1693701789377},{"_id":"source/_posts/2015-12-28-ruby-practice-18.markdown","hash":"0ca726947a1839b6f8ca778bfb545c6c69d875ec","modified":1693677636033},{"_id":"source/_posts/2017-03-16-liao-liao-qian-duan-you-hua-shou-duan-fang-dou.markdown","hash":"8cc8b7f27a43ecad9255095c14d474227ef7205f","modified":1693701776247},{"_id":"source/_posts/2016-03-01-minimum-size-subarray-sum.markdown","hash":"2b7ad9862c83dc9b3a136a5d27425708d0f27908","modified":1693701798662},{"_id":"source/_posts/2022-03-02-aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi.markdown","hash":"c881b7727d225a24a6c3cd3a7398f29b0b6857c5","modified":1693701916785},{"_id":"source/_posts/2022-02-17-aws-iamyuan-li-yi-ji-ru-he-shi-yong.markdown","hash":"701e0ddd7fd4793368182670fa8997d4dfbda473","modified":1693673728908},{"_id":"source/_posts/2022-04-08-shi-yao-shi-aws-ec2-hibernation.markdown","hash":"c37e9bc4433b14a000f74f7b413f962250f3e895","modified":1693701655542},{"_id":"public/2023/08/25/2014-11-21-guava-optional/index.html","hash":"b211226ec335f1791b644e25e40f56cead5e6da1","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-diff-command/index.html","hash":"b24f5b17e404e213a6a827f5633e2413bfa32d16","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-17-the-lifecycle-of-android-activity/index.html","hash":"09006b159994699924c41406255dc29c8e40e28e","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-13-building-blocks-of-android-application/index.html","hash":"e742a748d7457c75eaa04d1255e8fd0feb51bb9d","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-merge-command/index.html","hash":"cc44fd4a63053575bd0277de452a7f878063f80f","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-reset-command/index.html","hash":"d610d503a8f9eedb840083938f39725ac255fa7c","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-rebase-command/index.html","hash":"36201aeb5823e01ba6d63f9cbb31d2f67d556155","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-06-visual-git-guide-conventions/index.html","hash":"e46619b5cb352653c318d8a6cd821c2af03991f5","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-checkout-command/index.html","hash":"5371cedbe7e76602d8ecb20235d826fc76555487","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-commit-command/index.html","hash":"0f5636700449e8cf9851d8ee1651066df883ed1d","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-06-git-commands-2/index.html","hash":"551f654b1350781c9be68f675db37438075a87d6","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-technical-notes/index.html","hash":"64121bbd9cd33ee34d2f14fd97d2f5d2db42f2f7","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-06-git-commands-3/index.html","hash":"843c6a2f6a0a64af6528a6084bcccc4f784d56f7","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-06-visual-git-guide-basic-usage/index.html","hash":"1f40e53d5f92fceef2233e978584e1e312ab726a","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-07-visual-git-guide-cherry-pick-command/index.html","hash":"4da727c14a6125b5cbc5719371b7557b49bfe580","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-05-git-commands-1/index.html","hash":"1fe645543925d69976622c0501e79100dd925ff3","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-04-what-is-git/index.html","hash":"3b236c528aac9934264cfab1fc59a149488ee391","modified":1693670099006},{"_id":"public/2023/08/25/2014-11-03-what-is-andriod/index.html","hash":"8d1cf123baa33bad699503183f6cd6cf61789593","modified":1693670099006},{"_id":"public/2022/02/17/2022-02-17-aws-iamyuan-li-yi-ji-ru-he-shi-yong/index.html","hash":"d2a68c8d2e284003911712e5289f061d52a83ea1","modified":1693709411116},{"_id":"public/2022/04/08/2022-04-08-shi-yao-shi-aws-ec2-hibernation/index.html","hash":"b8cb22cc59e0d7a955988215424fa9b65587768b","modified":1693709411116},{"_id":"public/2017/03/16/2017-03-16-liao-liao-qian-duan-you-hua-shou-duan-fang-dou/index.html","hash":"9d843660f7d5a37e2bd78a0f603e190d6035242d","modified":1693709411116},{"_id":"public/2017/02/23/2017-02-23-yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai/index.html","hash":"65ae13c013d68f00353723e1a962b699f20b7ba9","modified":1693709411116},{"_id":"public/2022/03/02/2022-03-02-aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi/index.html","hash":"30d7a165716ed352ddd17098f753c1847d52a34f","modified":1693709411116},{"_id":"public/2016/02/05/2016-02-05-shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he/index.html","hash":"651e49ff7af8edc276584080be0f15e23d9dd6e3","modified":1693709411116},{"_id":"public/2016/03/01/2016-03-01-minimum-size-subarray-sum/index.html","hash":"9d061e7586b9dacd14af24e1937256d884a0b2d3","modified":1693709411116},{"_id":"public/2016/01/25/2016-01-25-shuang-zhi-zhen-suan-fa/index.html","hash":"6ccd4a623f0df2163940a9ae00fe7989ee291950","modified":1693709411116},{"_id":"public/2015/12/17/2015-12-17-ruby-practice-17/index.html","hash":"c952242bd75e712b6dd1d2d667bb43fd3446ef2b","modified":1693709411116},{"_id":"public/2015/12/05/2015-12-05-using-nginx-in-mac-os-x/index.html","hash":"dea515431e8b5616b203ce141fb01d9e1f1739a1","modified":1693709411116},{"_id":"public/2015/12/28/2015-12-28-ruby-practice-18/index.html","hash":"2a9c4e10fefb833d03b57c20e3aaada1523bb49a","modified":1693709411116},{"_id":"public/2015/11/22/2015-11-22-code-review-with-pull-request/index.html","hash":"8061f9466b4f201fc8db84c7126909f12c945af1","modified":1693709411116},{"_id":"public/2015/11/18/2015-11-18-ruby-practice-16/index.html","hash":"1a90cc3c1b863e36056467075c8b444f96fc4e2e","modified":1693709411116},{"_id":"public/2015/11/12/2015-11-12-ruby-practice-14/index.html","hash":"6ee028c28e84bbc02bca55ad93652387264200de","modified":1693709411116},{"_id":"public/2015/11/11/2015-11-11-how-to-make-the-octopress-adapt-os-x-ei-capitan/index.html","hash":"d02c3886400e4848a2ed610340440c598b32e550","modified":1693709411116},{"_id":"public/2015/10/26/2015-10-26-ruby-practice-13/index.html","hash":"6cffb1a31f455d2dd3e304687efc49042d943ee5","modified":1693709411116},{"_id":"public/2015/11/17/2015-11-17-ruby-practice-15/index.html","hash":"bcc3703a30931c35a483c441a3c8e567ba6ee971","modified":1693709411116},{"_id":"public/2015/09/28/2015-09-28-ruby-practice-11/index.html","hash":"e2c02019e9b883e6bded66ab5e9680934992068b","modified":1693709411116},{"_id":"public/2015/10/13/2015-10-13-ruby-practice-12/index.html","hash":"193d32822e56a52a1bb7c45ba1ca38f9cce3d2d0","modified":1693709411116},{"_id":"public/2015/09/15/2015-09-15-ruby-practice-10/index.html","hash":"04c9c4da307535b6efa767b64648ba9644499384","modified":1693709411116},{"_id":"public/2015/09/09/2015-09-09-ruby-practice-9/index.html","hash":"1c2a43a1ed698c7e5a0ae60163059c168af598cd","modified":1693709411116},{"_id":"public/2016/01/12/2016-01-12-how-to-fix-gem-filepermissionerror/index.html","hash":"eea0cb440856d44b924bcbec19225d3002f8d34c","modified":1693709411116},{"_id":"public/2015/09/06/2015-09-06-ruby-practice-8/index.html","hash":"92ee392e7f4d34ea20f45ac898ccdc48ac753fd9","modified":1693709411116},{"_id":"public/2015/09/01/2015-09-01-ruby-practice-7/index.html","hash":"28badfefc01e3bd32dcbff5cf953e3b4f2ae631d","modified":1693709411116},{"_id":"public/2015/08/24/2015-08-24-ruby-practice-5/index.html","hash":"90adbc54a08c4ac78d9c51d75210f487dbfc0c73","modified":1693709411116},{"_id":"public/2015/08/17/2015-08-17-ruby-practice-4/index.html","hash":"c92e0c52c44d651732e88bcf6da82b67a20c2ff4","modified":1693709411116},{"_id":"public/2015/08/25/2015-08-25-ruby-practice-6/index.html","hash":"44190fdf2430b1ab818a650f30496ee08abb3758","modified":1693709411116},{"_id":"public/2015/08/14/2015-08-14-ruby-practice-3/index.html","hash":"51e1546d9db3b8b1e86dd461e23ea877ca448fe3","modified":1693709411116},{"_id":"public/2015/09/23/2015-09-23-the-initialization-of-the-angular-ngmodel/index.html","hash":"1316cfaf1935efe9cab79acea784d936056d5173","modified":1693709411116},{"_id":"public/2015/08/13/2015-08-13-ruby-practice-2/index.html","hash":"089eff5b778d822a9a03b47fb0da6e9cd3d18424","modified":1693709411116},{"_id":"public/2015/08/12/2015-08-12-ruby-practice-1/index.html","hash":"18724bccc42b52cac7de2488842b9794ed1a1202","modified":1693709411116},{"_id":"public/2015/08/06/2015-08-06-how-to-get-or-post-data-via-httpclient-with-proxy/index.html","hash":"d14509a524cfa36e7d2c03317eaa2e7b21dbafc8","modified":1693709411116},{"_id":"public/2015/06/30/2015-06-30-implicit-submission-of-form-when-pressing-enter-key/index.html","hash":"7bfa4315bf1a3978d9931fbc70b1ce8887728ff6","modified":1693709411116},{"_id":"public/2015/06/16/2015-06-16-spring-aop-at-aspectj-annotation/index.html","hash":"8f85a3eb217a37ff66a713541ce8fe65bee930e0","modified":1693709411116},{"_id":"public/2015/06/14/2015-06-14-spring-aop-xml-schema/index.html","hash":"43e36cb298173e48d331b500ecd7cdcbd459b832","modified":1693709411116},{"_id":"public/2015/06/12/2015-06-12-spring-aop-dynamic-pointcut/index.html","hash":"4315df12dbb5dfb6477aeef5b5ece33da3803c11","modified":1693709411116},{"_id":"public/2015/06/11/2015-06-11-spring-aop-static-pointcut/index.html","hash":"3c8e4aa80c94d30926a166d415f0106d014dbb5e","modified":1693709411116},{"_id":"public/2015/06/10/2015-06-10-spring-aop-pointcut/index.html","hash":"6abfa3d4505d17194b60ae67dff7770246cd3265","modified":1693709411116},{"_id":"public/2015/06/09/2015-06-09-spring-aop-joint-point/index.html","hash":"d059c62e46592482d82895bd5f6f6be71e082539","modified":1693709411116},{"_id":"public/2015/06/08/2015-06-08-spring-aop-throws-advice/index.html","hash":"0bffeca1b0023190a10e45d1e8b498d17299baf6","modified":1693709411116},{"_id":"public/2015/07/30/2015-07-30-using-tsd-to-improve-javascript-intellisense-of-ide/index.html","hash":"df00c817c2abb45240952ef4eb77d18b0e6b8ee3","modified":1693709411116},{"_id":"public/2015/06/08/2015-06-08-spring-aop-around-advice/index.html","hash":"516ef57f4a41af82784e10aaf216cee25374e456","modified":1693709411116},{"_id":"public/2015/06/05/2015-06-05-spring-aop-before-advice/index.html","hash":"b31d37ef5687ca6683eef9b19b746bdc41e3b705","modified":1693709411116},{"_id":"public/2015/06/05/2015-06-05-spring-aop-aspect/index.html","hash":"edb6d1ea6aba72629a967a766577fdc00efa0976","modified":1693709411116},{"_id":"public/2015/06/04/2015-06-04-spring-aop-what-is-aop/index.html","hash":"d6eef9577170f8851b5f95af89d2fbdffde9f68f","modified":1693709411116},{"_id":"public/2015/06/04/2015-06-04-the-cobalt2-theme-for-iterm2-and-zsh/index.html","hash":"eeed553e42803ab32c4cb72184f3edc097afd5ab","modified":1693709411116},{"_id":"public/2015/06/04/2015-06-04-a-cool-theme-for-sublime-text/index.html","hash":"8c3f8b1a8e59368fbfcd4143ace9412f1ee5cb12","modified":1693709411116},{"_id":"public/2015/06/06/2015-06-06-spring-aop-after-advice/index.html","hash":"8c06824dad985298a6e44d665809745f7859c693","modified":1693709411116},{"_id":"public/2015/05/20/2015-05-20-analyze-call-function-of-javascript/index.html","hash":"0a00ab3fa85d6958ad6f4f58749205b837ee2ce3","modified":1693709411116},{"_id":"public/2015/05/19/2015-05-19-destroy-your-website/index.html","hash":"93b26c30715444c6c668d394a7681a269d56793d","modified":1693709411116},{"_id":"public/2015/05/16/2015-05-16-sublime-text-keyboard-shortcuts-for-mac/index.html","hash":"af81568a78107515a5d1dcc30f47138ce60a1f55","modified":1693709411116},{"_id":"public/2015/05/05/2015-05-05-how-to-use-jdbc-in-spring/index.html","hash":"c7c2c003268db9c7a9297abe7175d47725abae20","modified":1693709411116},{"_id":"public/2015/03/19/2015-03-19-give-me-a-cup-of-coffeescript/index.html","hash":"bab9981fb884ebb629288fb3d26d5d2053618eaa","modified":1693709411116},{"_id":"public/2015/05/16/2015-05-16-angularjs-angular-dot-extend/index.html","hash":"f384ce453a897a33b6a2c91dfb071ffc53f936d9","modified":1693709411116},{"_id":"public/2015/03/03/2015-03-03-html5-new-common-elements/index.html","hash":"86a0ab59222a5ddcf226af451aa559c7e3fec29a","modified":1693709411116},{"_id":"public/2015/03/02/2015-03-02-html5-new-common-attributes/index.html","hash":"e0be80483d1044da984082e20fbff455897edc50","modified":1693709411116},{"_id":"public/2015/03/02/2015-03-02-a-nice-web-design-tool-bracket/index.html","hash":"1456f62a7952263c352a245bdbde62a515c32fd3","modified":1693709411116},{"_id":"public/2015/02/13/2015-02-13-guave-immutable-collection/index.html","hash":"5d009816f8e1d10ceeea3b48067f06f8dc4589f4","modified":1693709411116},{"_id":"public/2015/02/06/2015-02-06-understading-mvc-mvp-and-mvvm-design-patterns/index.html","hash":"bec232df452db55009fe5cb45e7022d8f8aaa708","modified":1693709411116},{"_id":"public/2015/01/28/2015-01-28-conditinal-stylesheets-for-ie-version/index.html","hash":"86e41b6d25bd9ba0d7976ddfdb84f03c0e19d2d4","modified":1693709411116},{"_id":"public/2015/01/28/2015-01-28-css-tricks-for-ie6-ie7-ie8-ie9/index.html","hash":"d348b05fa3f893d04654dff8d76d49a47c2acbaa","modified":1693709411116},{"_id":"public/2015/01/13/2015-01-13-a-new-way-for-developing-web-application-front-end/index.html","hash":"df378b92aa2b443b7621882d736e8bc8319ed1e5","modified":1693709411116},{"_id":"public/2015/01/07/2015-01-07-how-to-run-multiple-ie-version-on-same-cotim/index.html","hash":"2ab3bdc3ba3fb03245f66f03705b55ea82cbe88c","modified":1693709411116},{"_id":"public/2014/12/26/2014-12-26-how-to-install-sublime-text-plugin/index.html","hash":"f566168f90c8a915a2a849ae06fb0715f495c7e1","modified":1693709411116},{"_id":"public/2014/12/23/2014-12-23-what-is-cucumber/index.html","hash":"e38dec26d783c194a6d6d5d871681549497e984b","modified":1693709411116},{"_id":"public/2014/12/12/2014-12-12-guava-ordering/index.html","hash":"7d3914be2efa85b438aa9a4ce460870dc77cc7ab","modified":1693709411116},{"_id":"public/2014/12/01/2014-12-01-jsp-custom-tag/index.html","hash":"75943d320bd84e36a215182ad5a8005003b7a1d4","modified":1693709411116},{"_id":"public/2014/12/19/2014-12-19-what-is-ractive-dot-js/index.html","hash":"86475a6ba63e30749c173ef2816b996b1fc5d9a3","modified":1693709411116},{"_id":"public/2014/11/26/2014-11-26-guava-preconditions/index.html","hash":"5b66959fe7d156b95caf1914f3f9c3a13448a27f","modified":1693709411116},{"_id":"public/2014/12/18/2014-12-18-how-to-learn-any-language-in-six-months/index.html","hash":"cfc219a130b5980e8ffa1e2a533d4757c8100196","modified":1693709411116},{"_id":"public/2014/11/27/2014-11-27-guava-common-object-method/index.html","hash":"f1a2e1fafe1582deaae81296402b6ff26251d9df","modified":1693709411116},{"_id":"public/2013/07/03/2014-10-28-backslash-escapes-in-markdown/index.html","hash":"6bcdafe3eedf2bf94ef3bb9b7ba0e95fdd166fcf","modified":1693670099006},{"_id":"public/2013/05/15/2014-10-23-what-editor-tools-used-for-markdown/index.html","hash":"0cb4085a7d27dc71aaeda1e7b7b66b62d9d31006","modified":1693670099006},{"_id":"public/2013/05/15/2014-10-24-markdown-syntax-for-span-elements/index.html","hash":"f5a07bb5ecf912cff7baaa283d73291fa1a7d873","modified":1693670099006},{"_id":"public/2013/04/14/2014-10-22-what-is-markdown/index.html","hash":"15ce8cda4eaf857c4ae29bec20b16dc7d710426e","modified":1693670099006},{"_id":"public/2013/05/11/2014-10-23-markdonw-syntax-for-block-elements/index.html","hash":"8992d0ab49bbf7dc396b91ad28f65f3f87cb2b7e","modified":1693670099006},{"_id":"public/page/3/index.html","hash":"c6adb16b30d3b34e2acd282cefcf23e4f1e852f2","modified":1693709459222},{"_id":"public/page/2/index.html","hash":"c3e84fc9c238662da1e00e1d896db7a6a84a1571","modified":1693709459222},{"_id":"public/page/4/index.html","hash":"977808b09e6961cfca2b0d44588d04279acdff70","modified":1693709459222},{"_id":"public/page/5/index.html","hash":"1f8f0315901126bd4a8a1e2d7fc136fe9ed44af7","modified":1693709459222},{"_id":"public/page/6/index.html","hash":"70ad4d948a7234e97dfd8948e1830d6d670e3471","modified":1693709459222},{"_id":"public/page/7/index.html","hash":"6075797f5eb644641d8dae61d942f03809cf2903","modified":1693709459222},{"_id":"public/page/8/index.html","hash":"43d26ad7fa3add85559ae94f76e2e496f51a1fea","modified":1693709459222},{"_id":"public/page/9/index.html","hash":"653cfdd8448503aa103914db8080281aca7d186c","modified":1693709459222},{"_id":"public/page/10/index.html","hash":"6e531bc2c5534246b5bcb0924ac6d6053315f9b4","modified":1693709459222},{"_id":"public/tags/Markdown/index.html","hash":"d8aa76ec097846ce43e9bd4cf7a95eb3746c0469","modified":1693708140935},{"_id":"public/categories/Tool/index.html","hash":"46d7526d60da21f5264feb7005791d27bb247d8b","modified":1693670099006},{"_id":"public/categories/Android/index.html","hash":"f72ad7be96580b5d8bdcbe6ff56ad488b78754c4","modified":1693670099006},{"_id":"public/categories/Git/index.html","hash":"af70c68095aeb72a5086fe82bbcc2bc4245beb48","modified":1693670099006},{"_id":"public/categories/Git/page/2/index.html","hash":"1f8440f6fbc2981e7c044f0d753a415da502bf0f","modified":1693670099006},{"_id":"public/categories/Java/index.html","hash":"d8fe82a69be746cd904f9bef2156e2f3b2f381d3","modified":1693675667209},{"_id":"public/categories/Java/page/2/index.html","hash":"56ec79d17e8bba49e7c563f7a5c9231b315a8251","modified":1693670099006},{"_id":"public/categories/Guava/index.html","hash":"b28db433cb4cce2df1008ee4de166a9775a8b1cb","modified":1693670099006},{"_id":"public/categories/Java/JSP/index.html","hash":"6474ed0f56509af952412d2f6e84d14285536f62","modified":1693670099006},{"_id":"public/categories/Java/Guava/index.html","hash":"2a3608d6fa511d6785be2499f8580346998900df","modified":1693670099006},{"_id":"public/categories/Learning-Skill/index.html","hash":"d7debf0b5b918e5fc49596f495be78978ba609b5","modified":1693670099006},{"_id":"public/categories/Guava/Java/index.html","hash":"297cfa76b149d01ebf95594b597108dd6af76516","modified":1693670099006},{"_id":"public/categories/Ractive-js/index.html","hash":"0cf8ce555ec5daf804a8dd12c73cea88016303f5","modified":1693670099006},{"_id":"public/categories/Cucumber/index.html","hash":"5d34b48433bb06189a814f54115dd645ccc39185","modified":1693670099006},{"_id":"public/categories/Sublime-Text/index.html","hash":"96622f4a2afe65eb648bcee39dc60cc6d244c07c","modified":1693670099006},{"_id":"public/categories/IETester/index.html","hash":"c50243f32c848197b695cd950796a01382d99889","modified":1693670099006},{"_id":"public/categories/Guard/index.html","hash":"e254476576dac8f0df83a90cc47896c3d8ca9f21","modified":1693670099006},{"_id":"public/categories/IE/index.html","hash":"1b8f64fa3bcfa928854e793b9fcd31d53e5f27ed","modified":1693670099006},{"_id":"public/categories/CSS/index.html","hash":"76a91d9c0d4cdf62ffecad596822cfac21b9e132","modified":1693670099006},{"_id":"public/categories/Pattern/index.html","hash":"6bed8e5252835f386112e54d66500f85ddd5062f","modified":1693670099006},{"_id":"public/categories/Bracket/index.html","hash":"89593222a3c493bf5bedbfa1bbe7974d314bef22","modified":1693676016467},{"_id":"public/categories/HTML5/index.html","hash":"73d26d69db882bc07b4e478813ce9c7c10f3c1bf","modified":1693670099006},{"_id":"public/categories/Java/Spring/page/2/index.html","hash":"86275ab4d0bcb9b12402863fd4c042cf45939eb7","modified":1693670099006},{"_id":"public/categories/Java/Spring/index.html","hash":"a1652346a1377e01e0879edfca161416c324ad24","modified":1693675667209},{"_id":"public/categories/AngularJs/index.html","hash":"6668b0b079a0c97a4eb600bcc0d25d6ebcc751ad","modified":1693670099006},{"_id":"public/categories/Ractive-js/JS/index.html","hash":"84d583c730d1e59582efdf15532859fdaac379cc","modified":1693670099006},{"_id":"public/categories/CoffeeScript/index.html","hash":"0641ced48bb2e4dd01a1df7ad2644bb7decc9a9c","modified":1693670099006},{"_id":"public/categories/sublime-text/index.html","hash":"677b260dfa8000d70b8efe49d8474f23a96f1455","modified":1693670099006},{"_id":"public/categories/javascript/index.html","hash":"b1f9b63edf22ddd06124b6c28d54e171f1a980a8","modified":1693670099006},{"_id":"public/categories/Cucumber/Test/index.html","hash":"394a9f945753136ae8186955c9b592e9275b08af","modified":1693670099006},{"_id":"public/categories/iTerm2/index.html","hash":"7c2198e5f40c81b13bb7450140dd5cd64ea62f0e","modified":1693670099006},{"_id":"public/categories/Sublime-Text/Tools/index.html","hash":"d4bcd5d14a9332d9bb5652faee0e1b66e1095502","modified":1693670099006},{"_id":"public/categories/IETester/IE/index.html","hash":"36a1a1ce97146acac87f83a29fc3c407318f04d2","modified":1693670099006},{"_id":"public/categories/Guard/LiveReload/index.html","hash":"8bdaa50faaffe3d05756238d208bc9814da40c39","modified":1693670099006},{"_id":"public/categories/IE/CSS/index.html","hash":"5ffb8981c60356b5a229c3f10bd8e15c3654f412","modified":1693670099006},{"_id":"public/categories/CSS/IE/index.html","hash":"bf6cc910340c80bc2612be343d93ac767bf75f16","modified":1693670099006},{"_id":"public/categories/html/index.html","hash":"718d410b9854d45828c9926addffdf65846cbaca","modified":1693670099006},{"_id":"public/categories/Tools/index.html","hash":"9568b058b8684ef2b2f82a282dd5a2f687196727","modified":1693708140935},{"_id":"public/categories/Ruby/page/2/index.html","hash":"cb5defa12766e876d1a2dc408e571faa3af3155e","modified":1693675667209},{"_id":"public/categories/Ruby/index.html","hash":"45bddf3ec7d2de62079a19710816414ef37ff201","modified":1693675667209},{"_id":"public/categories/ruby/index.html","hash":"b0ac1613f9c1a8c30d05b0ce3a585f0b920a73a2","modified":1693675667209},{"_id":"public/categories/Bracket/Tools/index.html","hash":"45d638eba24cd2e8fd35f90f98c9415dacd6cf97","modified":1693676016467},{"_id":"public/categories/AngularJs/Javascript/index.html","hash":"9813773e52d84ab0580886ca4993fd9a51c6b72b","modified":1693670099006},{"_id":"public/categories/git/index.html","hash":"7676a88530130081505c229b56b2e189118cd1a8","modified":1693670099006},{"_id":"public/categories/Nginx/index.html","hash":"37eba2bcd7ecedaa32085456649144a60d1ccf86","modified":1693670099006},{"_id":"public/categories/sublime-text/tools/index.html","hash":"97b3bdc90ac73b1f4a8b1708994eeec4b62cf385","modified":1693670099006},{"_id":"public/categories/算法/index.html","hash":"3c365c763208826da3fbbad5386c2336155f4445","modified":1693708140935},{"_id":"public/categories/JavaScript/index.html","hash":"e8fc116da7ae7396972039c3df53834da7b62c83","modified":1693670099006},{"_id":"public/categories/资源/index.html","hash":"5a99d96e769e3651d2685d9503d2ad4fa7dacb9b","modified":1693670099006},{"_id":"public/categories/云计算/index.html","hash":"aca7c1a64c2cfbc40c54923b38bc9c4abbb431c6","modified":1693708140935},{"_id":"public/categories/Java/Spring/AOP/index.html","hash":"f8b43a0ea9b34cdcee7fa3c494a70d3c9812f5bc","modified":1693675667209},{"_id":"public/categories/Java/Spring/AOP/page/2/index.html","hash":"4c2b984e075e74a394b04e7905439caed7c31541","modified":1693670099006},{"_id":"public/categories/iTerm2/tools/index.html","hash":"107dd436d06072dc08ce4f9436314e700e01c4aa","modified":1693670099006},{"_id":"public/categories/IETester/IE/tools/index.html","hash":"3ba29fd48e853b161f24cfb07240343ff2358d81","modified":1693670099006},{"_id":"public/categories/Guard/LiveReload/Tools/index.html","hash":"9ac0faddb2bf35fc5a738c8e15eff88c13d210d2","modified":1693670099006},{"_id":"public/categories/html/html5/index.html","hash":"f889efbe8030a0d5678fc9d0bd4534143d8a6cc2","modified":1693670099006},{"_id":"public/categories/Tools/JavaScript/index.html","hash":"cab90b03f619bd7f13df30b0a4fd9d8b40b83195","modified":1693670099006},{"_id":"public/categories/Ruby/Mac/index.html","hash":"71bf61db9a1d4f823ee8828f8a1015aa9a416a28","modified":1693670099006},{"_id":"public/categories/git/other/index.html","hash":"94aa9bf26df7ed8f38856b9e863c0d5b3dab18dc","modified":1693670099006},{"_id":"public/categories/Nginx/DevOps/index.html","hash":"019137020d89f9535e9e6f267d087e65e03b22ae","modified":1693670099006},{"_id":"public/categories/算法/数据结构/index.html","hash":"623271f6152e301afde3c435671d8c34426ef687","modified":1693675667209},{"_id":"public/categories/云计算/AWS/index.html","hash":"a2e1857f32ae9dc66c83b804b2328e096f375ee3","modified":1693670099006},{"_id":"public/categories/Tools/JavaScript/TypeScript/index.html","hash":"2b73896dcea748b9f098153ddbaa3eb61a11ed54","modified":1693670099006},{"_id":"public/categories/Ruby/Mac/Tools/index.html","hash":"a0d38b388ac9f35d14bf32d01ebd528042c7b530","modified":1693670099006},{"_id":"public/categories/Nginx/DevOps/tools/index.html","hash":"ce6653320d7c0be8c33f6df4bca46dc63b79c32a","modified":1693670099006},{"_id":"public/categories/Tools/JavaScript/TypeScript/VSCode/index.html","hash":"757e6fed8ce923d404c69e08f781f1e44178122a","modified":1693670099006},{"_id":"public/archives/page/2/index.html","hash":"210f967e578beba32fffd137e8d1dd771f8ffa49","modified":1693708140935},{"_id":"public/archives/page/3/index.html","hash":"e3503fa3719c78042c1c92b0d617d69833da501f","modified":1693708140935},{"_id":"public/archives/page/4/index.html","hash":"05977b92611f058c673fc3ae0f528e59aec2f351","modified":1693708140935},{"_id":"public/archives/page/5/index.html","hash":"add9d16972ab224aca624230738772c4cddad1c0","modified":1693708140935},{"_id":"public/archives/page/6/index.html","hash":"439f65bde1ac2698f5b7e2159deed481def980dd","modified":1693708140935},{"_id":"public/archives/page/7/index.html","hash":"5fb092f9d80ef5e8c973570bc02659213154102a","modified":1693708140935},{"_id":"public/archives/page/8/index.html","hash":"ce2df0dc729ccacd9660697967c713066a8572cd","modified":1693708140935},{"_id":"public/archives/page/9/index.html","hash":"8b50c517f005ad4836a6a80832ebc2ab718a8555","modified":1693708140935},{"_id":"public/archives/page/10/index.html","hash":"106cd4b330650ce3becd721959323d8cb54d4564","modified":1693708140935},{"_id":"public/archives/2013/index.html","hash":"6e79b508a0c748957de3a8209cf536120802653c","modified":1693708140935},{"_id":"public/archives/2013/04/index.html","hash":"d97488e0fa3b8809e22db712aaeec03ac41bc634","modified":1693708140935},{"_id":"public/archives/2013/05/index.html","hash":"3f4a7a2b901b2993c244287480d28b5b508dc3fd","modified":1693708140935},{"_id":"public/archives/2013/07/index.html","hash":"6f2acf3c6c953a771d41fb527a4e6d5646b346e4","modified":1693708140935},{"_id":"public/archives/2014/index.html","hash":"c521ec359057f50efeff28aecebc9891c051867a","modified":1693708140935},{"_id":"public/archives/2014/11/index.html","hash":"7ed9edad77dfcc267ac0d3c9b6b49a8e4c39089b","modified":1693708140935},{"_id":"public/archives/2014/12/index.html","hash":"3a703022284191b2bc5514204908475d33bb3bc1","modified":1693708140935},{"_id":"public/archives/2015/index.html","hash":"d3b8d4ecb2ac9236625cf4e5c55a54131cd3d34e","modified":1693708140935},{"_id":"public/archives/2015/page/2/index.html","hash":"d0fb6f46347d601cb12ae18c9f309633b7ed8bca","modified":1693708140935},{"_id":"public/archives/2015/page/3/index.html","hash":"5ac6242bc0abd23240d3878c835f9c9f4be3abd1","modified":1693708140935},{"_id":"public/archives/2015/page/4/index.html","hash":"7c93f729aabe2a8e87464fc7236e5971ec8818a7","modified":1693708140935},{"_id":"public/archives/2015/page/5/index.html","hash":"793ece476f6410da191add6973b8bc68cc2218fe","modified":1693708140935},{"_id":"public/archives/2015/page/6/index.html","hash":"cd958ccdda186aa772f2f3ed9bf1f8a305723d6e","modified":1693708140935},{"_id":"public/archives/2015/01/index.html","hash":"c6075478f0ca93d07e1e2ec10c8d036b6e982f11","modified":1693708140935},{"_id":"public/archives/2015/03/index.html","hash":"3efafe065cdeff543258e3b770a54aacd56e5ceb","modified":1693708140935},{"_id":"public/archives/2015/02/index.html","hash":"cea8e503087b4f38ed4e06c54fe1b64a2144e596","modified":1693708140935},{"_id":"public/archives/2015/05/index.html","hash":"111e8d4add258d81378a4b34fc645470b6877026","modified":1693708140935},{"_id":"public/archives/2015/06/index.html","hash":"484fff29551bf5892986445ad402afbad0f2270c","modified":1693708140935},{"_id":"public/archives/2015/06/page/2/index.html","hash":"ea73352113a4114750f74c9f4181ed1da7c0c428","modified":1693708140935},{"_id":"public/archives/2015/07/index.html","hash":"4e623f88cdef7e649fde5810dcaa4e4c7eb1dc9f","modified":1693708140935},{"_id":"public/archives/2015/08/index.html","hash":"b041a5c9428b7965e12ca5be5bf319f20a055f0d","modified":1693708140935},{"_id":"public/archives/2015/09/index.html","hash":"555c2ac963e66e38a5d960c2f94f6ec22f2e2684","modified":1693708140935},{"_id":"public/archives/2015/10/index.html","hash":"133fdca006947dfc73201a72f7e8e34528ee33de","modified":1693708140935},{"_id":"public/archives/2015/11/index.html","hash":"f254b66aa6ab068dbf993647a2c9e233966ff55d","modified":1693708140935},{"_id":"public/archives/2015/12/index.html","hash":"86423094be7572c17f495716c480f4c9d550f7df","modified":1693708140935},{"_id":"public/archives/2016/index.html","hash":"1cf6aac93916f9b4535f63321f6aa47c525f33d6","modified":1693708140935},{"_id":"public/archives/2016/01/index.html","hash":"780452032e4ec417982df20d656fa448467f2597","modified":1693708140935},{"_id":"public/archives/2016/02/index.html","hash":"7a95075b54df89c2cf9261e58413245a0d5d995f","modified":1693708140935},{"_id":"public/archives/2016/03/index.html","hash":"07e2bfa17d411053dfcb6bca3e6b3beb7499368e","modified":1693708140935},{"_id":"public/archives/2017/index.html","hash":"54944d0e9e875fe543cc0f4b574ed6c468ef6b78","modified":1693708140935},{"_id":"public/archives/2017/02/index.html","hash":"00f019aa43fe79c1e375ce64e7706cc0a3392dd5","modified":1693708140935},{"_id":"public/archives/2017/03/index.html","hash":"dd30b8bb3987487be76d0c97905d0041d3e29778","modified":1693708140935},{"_id":"public/archives/2022/index.html","hash":"551728b08764e3e02a6408ceae32aa0630f827f6","modified":1693708140935},{"_id":"public/archives/2022/02/index.html","hash":"71b9943d74853345a2dac18d31ac40f1d5a0274e","modified":1693708140935},{"_id":"public/archives/2022/03/index.html","hash":"0671a3dcb5d936b7e028f7810263b21ce4d7f6b6","modified":1693708140935},{"_id":"public/archives/2022/04/index.html","hash":"9f29ef307051dbae57e2ac7702e71c8943441385","modified":1693708140935},{"_id":"public/archives/2023/page/2/index.html","hash":"7f578167b5ef1c8f87e3165aee1156e29ecdd79b","modified":1693670099006},{"_id":"public/archives/2023/08/page/2/index.html","hash":"18d3603ae0bd588ace853d5e5244e77a121759f4","modified":1693670099006},{"_id":"source/_posts/2013-04-14-what-is-markdown.md","hash":"aa5a823ad3d73f0df00da7635d67b2d8681ab7d3","modified":1693672534172},{"_id":"source/_posts/2013-05-11-markdonw-syntax-for-block-elements.md","hash":"68ecb4cdb2abb28c41f42611716cc055089808fd","modified":1693676603810},{"_id":"source/_posts/2013-06-24-markdown-syntax-for-span-elements.md","hash":"f7871e5ece9a429a0c82fa3f981cd8095de5cfc1","modified":1693676714467},{"_id":"source/_posts/2013-05-21-what-editor-tools-used-for-markdown.md","hash":"0b692f024536b9f8bf78434ba7e2986605cfecf8","modified":1693676612301},{"_id":"source/_posts/2013-07-03-backslash-escapes-in-markdown.md","hash":"e175765d6a9df764393e2b5f6cfa5acaa8feb0c0","modified":1693672534195},{"_id":"source/_posts/2013-10-03-what-is-andriod.md","hash":"688fbac2765828459e5210c86b1deb8d20476ffa","modified":1693676714467},{"_id":"source/_posts/2014-01-03-what-is-git.md","hash":"8e38f2c200830505991aaf03312d59c0da05ec55","modified":1693676714378},{"_id":"source/_posts/2014-01-16-git-commands-1.md","hash":"b1d5c73d5b40e8e333d250d4655433260f159782","modified":1693676714378},{"_id":"source/_posts/2014-02-09-git-commands-2.md","hash":"bc10668ae54168cdd17b88f3fbd92d62cd4208b8","modified":1693676714378},{"_id":"source/_posts/2014-02-21-git-commands-3.md","hash":"cf87d362057654349b2260343e68a7777bdf164f","modified":1693676714378},{"_id":"source/_posts/2014-03-03-visual-git-guide-basic-usage.md","hash":"dec710ace6bda7557add0c4416925895ec4f61bb","modified":1693676714378},{"_id":"source/_posts/2014-04-13-visual-git-guide-conventions.md","hash":"1b97082a49b96ac1a1d4f1fecdda26c3ee55cb93","modified":1693676714378},{"_id":"source/_posts/2014-04-21-visual-git-guide-checkout-command.md","hash":"53e067e54cb40e8aee8cac21fff6d12d1374d5dc","modified":1693676714378},{"_id":"source/_posts/2014-05-01-visual-git-guide-cherry-pick-command.md","hash":"13e809951fc1718e9d78701c0fa3e1d3bd1a708d","modified":1693676714356},{"_id":"source/_posts/.DS_Store","hash":"fda2a6d8af56df3035efe1a73e4e000aeb20329f","modified":1693671613798},{"_id":"source/_posts/2014-05-03-visual-git-guide-commit-command.md","hash":"0c3d68f9582d1ba59ec9729bab3afa520036c384","modified":1693676714311},{"_id":"source/_posts/2014-05-20-visual-git-guide-diff-command.md","hash":"39b1e61098e317f28bf4e2bd488d6e038eb8eb9f","modified":1693676714311},{"_id":"source/_posts/2014-06-11-visual-git-guide-merge-command.md","hash":"ac37140687bd93dc8a6ae2d16deac3637d489cdd","modified":1693676714311},{"_id":"source/_posts/2014-06-13-visual-git-guide-rebase-command.md","hash":"275a0c880e3a3b6961b650c6909dd266b67a2990","modified":1693676714311},{"_id":"source/_posts/2014-07-07-visual-git-guide-reset-command.md","hash":"7bfe0b5f0dce54adca59da5e565c5cb7adb54120","modified":1693676714311},{"_id":"source/_posts/2014-08-07-visual-git-guide-technical-notes.md","hash":"2b15937dc86db4cbd3884db46b0e7647c2818fd7","modified":1693677636147},{"_id":"public/2014/08/07/2014-08-07-visual-git-guide-technical-notes/index.html","hash":"1b306b2c71364470fcd354cb1ca132f6694bb27a","modified":1693709411116},{"_id":"public/2014/06/13/2014-06-13-visual-git-guide-rebase-command/index.html","hash":"51f26a6f7d293b12d50147082984758adb19b9d9","modified":1693709411116},{"_id":"public/2014/07/07/2014-07-07-visual-git-guide-reset-command/index.html","hash":"7ed15333c8c8fa07a3dbf85376b6db7681e72403","modified":1693709411116},{"_id":"public/2014/06/11/2014-06-11-visual-git-guide-merge-command/index.html","hash":"20999047d6ed3066add09efe6ab3cf03858ed307","modified":1693709411116},{"_id":"public/2014/05/03/2014-05-03-visual-git-guide-commit-command/index.html","hash":"226310c2825e7ad9f4edd957dae00532ea17ffaf","modified":1693709411116},{"_id":"public/2014/05/20/2014-05-20-visual-git-guide-diff-command/index.html","hash":"17c8f12fe674f496eb756ff7e5541ad556edd23e","modified":1693709411116},{"_id":"public/2014/05/01/2014-05-01-visual-git-guide-cherry-pick-command/index.html","hash":"ec90ec850028c8372ef390e008f0dace2fb13846","modified":1693709411116},{"_id":"public/2014/04/21/2014-04-21-visual-git-guide-checkout-command/index.html","hash":"57ebe08df25df6a971c589fd175a9602b955a8f3","modified":1693709411116},{"_id":"public/2014/04/13/2014-04-13-visual-git-guide-conventions/index.html","hash":"c04ed0b30f1542ca337229dd7b197db94e94a7fd","modified":1693709411116},{"_id":"public/2014/03/03/2014-03-03-visual-git-guide-basic-usage/index.html","hash":"efbb7d18bf1ab3c793ed93253dd8c03e037aa249","modified":1693709411116},{"_id":"public/2014/02/21/2014-02-21-git-commands-3/index.html","hash":"07d7d48a6a27986f7ce8c7998ba08266f51cf426","modified":1693709411116},{"_id":"public/2014/02/09/2014-02-09-git-commands-2/index.html","hash":"a4b70f83f14bbc66f938d12616ba6539906b6bf3","modified":1693709411116},{"_id":"public/2014/01/16/2014-01-16-git-commands-1/index.html","hash":"8dffe3f4d7a4847a39f2b5ae5a7fc8bd3cf02a7f","modified":1693709411116},{"_id":"public/2014/01/03/2014-11-13-building-blocks-of-android-application/index.html","hash":"6eec0e2cc34622281c6e039816843ea4f2c71002","modified":1693675667209},{"_id":"public/2014/01/03/2014-01-03-what-is-git/index.html","hash":"46b4832f381da0098c94208cea31f179c6be4f41","modified":1693709411116},{"_id":"public/2013/10/03/2013-10-03-what-is-andriod/index.html","hash":"67d3a39ed128159ad9fd022fddc287ef07a70830","modified":1693709411116},{"_id":"public/2013/06/24/2013-06-24-markdown-syntax-for-span-elements/index.html","hash":"df80052de3727049667fce6d208a2c5904205f45","modified":1693709411116},{"_id":"public/2013/07/03/2013-07-03-backslash-escapes-in-markdown/index.html","hash":"8d7a464b51d982ca0d27a08403758bf31de6317b","modified":1693709411116},{"_id":"public/2013/05/11/2013-05-11-markdonw-syntax-for-block-elements/index.html","hash":"7a8b017eb3f09fcdceb2358f1bc3325df60a0eef","modified":1693709411116},{"_id":"public/2013/04/14/2013-04-14-what-is-markdown/index.html","hash":"1c6049af90a3b37eea5925963566e686c7d1d9b5","modified":1693709411116},{"_id":"public/categories/Tools/page/2/index.html","hash":"79dab34748c8f5487307292512b560402c37a6e8","modified":1693708140935},{"_id":"public/categories/Tools/page/3/index.html","hash":"dc9416e0eae70588114386b01926fc1c0d900cb0","modified":1693708140935},{"_id":"public/2013/05/21/2013-05-21-what-editor-tools-used-for-markdown/index.html","hash":"b5a083306e9d439c0f87c3f19ef1cd0d0d5ab4c8","modified":1693709411116},{"_id":"public/2014/11/21/2014-11-21-guava-optional/index.html","hash":"4b87df76740dadcedba894a77eb70e6d38ac6332","modified":1693709411116},{"_id":"public/2014/11/17/2014-11-17-the-lifecycle-of-android-activity/index.html","hash":"990b5ea77b75c85c7a6c2cf9eefe4298929d4936","modified":1693709411116},{"_id":"public/categories/Backend/index.html","hash":"17739e560cdb5f58453212c295d7f98137771274","modified":1693708140935},{"_id":"public/categories/Mobile/index.html","hash":"ded70d45df4a444960cbccaf704d8359f12e30e5","modified":1693708140935},{"_id":"public/categories/Backend/page/2/index.html","hash":"e2ef49531b56d603abea6b145418011c69fc05d7","modified":1693708140935},{"_id":"public/categories/Frontend/page/2/index.html","hash":"11df6c5f4f3617dfff596f542ff877b882a95a3f","modified":1693708140935},{"_id":"public/categories/Frontend/index.html","hash":"ff5828660f834bd481470256554d75761bbd7481","modified":1693708140935},{"_id":"public/categories/Others/index.html","hash":"6e466245bea756abb6bdc099af0c1d2c321f792f","modified":1693708140935},{"_id":"public/categories/Design-Pattern/index.html","hash":"1de2bb121652ddeefe39825116d39c59917a9029","modified":1693708140935},{"_id":"public/categories/Resources/index.html","hash":"0223f544e4a37b8175ee30142aafb4bacfd1514e","modified":1693708140935},{"_id":"public/categories/Test/index.html","hash":"8208f89b6256ce4fbcb535a0dc9168ca6ce6154d","modified":1693708140935},{"_id":"public/archives/2013/06/index.html","hash":"d9d59ce1032e728aefde712b52d82561607c9d35","modified":1693708140935},{"_id":"public/archives/2013/10/index.html","hash":"f0a75aa0d62e924c3f81294880f0f177f01c801e","modified":1693708140935},{"_id":"public/archives/2014/page/3/index.html","hash":"23946ad3593ab41377545dad4172bfc3d9b3eba8","modified":1693708140935},{"_id":"public/archives/2014/page/2/index.html","hash":"fed122b33897b0d9fe11d02a15e31c168e9235dd","modified":1693708140935},{"_id":"public/archives/2014/01/index.html","hash":"a7773a9d6b20edc7ccb03a62b82bfb758bdf29d8","modified":1693708140935},{"_id":"public/archives/2014/02/index.html","hash":"5971d2e17158cc06b7baf634ea2cfdf70a69d514","modified":1693708140935},{"_id":"public/archives/2014/03/index.html","hash":"8c14600412f05a386d5a3348513791ccbd200852","modified":1693708140935},{"_id":"public/archives/2014/04/index.html","hash":"b438c402cdab8e563850932e284fccc61bb76f45","modified":1693708140935},{"_id":"public/archives/2014/05/index.html","hash":"54a5c7ea591a1c05e19f37ca3e9fd3aff9682b05","modified":1693708140935},{"_id":"public/archives/2014/06/index.html","hash":"68b8ddc99ef23db8ac2a078928e3f8df4f2fdbff","modified":1693708140935},{"_id":"public/archives/2014/07/index.html","hash":"9761f4e7cf77b8ca4e77a0b74a165e9a126af6b6","modified":1693708140935},{"_id":"public/archives/2014/08/index.html","hash":"b08858c3a353fce247d2bae6d6c7e5f3bbaf2cf4","modified":1693708140935},{"_id":"public/tags/Android/index.html","hash":"836a8b221bf6a3887b70eaa2d9689df4d819d3cb","modified":1693708140935},{"_id":"public/tags/Git/index.html","hash":"1b46267710a913e3bd54bae50b6fdfa17204dd58","modified":1693708140935},{"_id":"public/tags/Git/page/2/index.html","hash":"17f55f2d05b46cdf461b7870285a7342f68b5a39","modified":1693708140935},{"_id":"public/tags/Java/index.html","hash":"08c898e601b670041afdcc075307a319238a9c69","modified":1693708140935},{"_id":"public/tags/Java/page/2/index.html","hash":"bc7b270005a8a7795c5358fb9827347cb7332ead","modified":1693708140935},{"_id":"public/tags/Guava/index.html","hash":"3e03bb54f2ad57450bbdb0a60da975ee97c6ca19","modified":1693708140935},{"_id":"public/tags/JSP/index.html","hash":"e1a5a500ef2a5b2a7cbb735f2307a39f557b704e","modified":1693708140935},{"_id":"public/tags/Test/index.html","hash":"cc3fe1e980116cd6b4a4e4a31d38eeb5b4c981f4","modified":1693708140935},{"_id":"public/tags/IETester/index.html","hash":"5e130a2fec27ecb5c6d4e5e003ec4a20760bb401","modified":1693708140935},{"_id":"public/tags/Tool/index.html","hash":"ab83d280f9584ff940d5ff8b51b1bd64b3ff9eb3","modified":1693708140935},{"_id":"public/tags/Cucumber/index.html","hash":"ff4698ff65e328f2075ea7e45ab429563ceccafd","modified":1693708140935},{"_id":"public/tags/Guard/index.html","hash":"d9c3737425dc599d33b81880437e331eda5454ea","modified":1693708140935},{"_id":"public/tags/SoftSkill/index.html","hash":"3598ecd6963e71830881d62108f6e8ed9a07be89","modified":1693708140935},{"_id":"public/tags/CSS/index.html","hash":"800d04a3493abef47219f2755b12c91855a45051","modified":1693708140935},{"_id":"public/tags/IE/index.html","hash":"a5d8dc63123a517f6b72351ee40c24fc268295fe","modified":1693708140935},{"_id":"public/tags/LiveReload/index.html","hash":"b5c0974c6b7c6e9eb9f386f6d8d4963bc0b3b2ad","modified":1693708140935},{"_id":"public/tags/MVP/index.html","hash":"33e76373b3c6161160f41cd04c42232fdf38fa93","modified":1693708140935},{"_id":"public/tags/MVC/index.html","hash":"fb98853017e4613de7c2637d119052342c407063","modified":1693708140935},{"_id":"public/tags/MVVM/index.html","hash":"001a9449905e1520cc981bdc9dbacf832c012c5a","modified":1693708140935},{"_id":"public/tags/HTML5/index.html","hash":"be679775783bafe796176cac096eae2a3fdb505e","modified":1693708140935},{"_id":"public/tags/CoffeeScript/index.html","hash":"b690d2059d020d6adbda50b5319ba4948e25b106","modified":1693708140935},{"_id":"public/tags/Spring/index.html","hash":"2b4e81ae01349ef98167aaaf78cb17093b70171d","modified":1693708140935},{"_id":"public/tags/AngularJs/index.html","hash":"e2b17b709df4da995fb5bfee9dd2dc310a556d33","modified":1693708140935},{"_id":"public/tags/Sublime-Text/index.html","hash":"1c00008e11e2ea28a03a7f5b7caa4016ac9d0f36","modified":1693708140935},{"_id":"public/tags/HTML/index.html","hash":"1922188a955c50338c265773aef4fc72ff8da7f0","modified":1693708140935},{"_id":"public/tags/iTerm2/index.html","hash":"c4422c5f6be32c8e189ad23a49573eae30fbfb6c","modified":1693708140935},{"_id":"public/tags/Tools/index.html","hash":"f23fd50c0c7b97bf0df2b4f6fd7885512a8c4cc5","modified":1693708140935},{"_id":"public/tags/JavaScript/index.html","hash":"88ab8e53a4d14f1a32c2abef21228e92ee8ea542","modified":1693708140935},{"_id":"public/tags/TypeScript/index.html","hash":"88e7d857e61ce4230acd3f7ef27f8fd8386cf3b2","modified":1693708140935},{"_id":"public/tags/Ruby/index.html","hash":"79dac180f8dc460baa5805c9260f6b79d62734c9","modified":1693708140935},{"_id":"public/tags/Collaboration/index.html","hash":"16770be2256e2830d35622b3152b00116e7f11d2","modified":1693708140935},{"_id":"public/tags/VSCode/index.html","hash":"cfcdb2d14034663ea4d640b564a0808317a7c2c6","modified":1693708140935},{"_id":"public/tags/Nginx/index.html","hash":"7541a6844611fa85148ef436f875673c5e1cb734","modified":1693708140935},{"_id":"public/tags/Mac/index.html","hash":"783e077b18815aaf47138088e6fdbca10e6e9b5a","modified":1693675667209},{"_id":"public/tags/算法/index.html","hash":"772b97aae3df7173ef180bee3cbcc41bc832dd64","modified":1693708140935},{"_id":"public/tags/MacOS/index.html","hash":"f5a64b85fa25f51fa7dcfc74b15c19b900df6118","modified":1693708140935},{"_id":"public/tags/数据结构/index.html","hash":"4736b93199be40e7649498c7d04bdfa6a65a8d72","modified":1693708140935},{"_id":"public/tags/高清图片，资源/index.html","hash":"d2b265b1d10116c9c4a64c56c5e79b57ff8db43a","modified":1693676016467},{"_id":"public/tags/AWS/index.html","hash":"bd24727e3def37f86f35df6f174f900df8ab1ebf","modified":1693708140935},{"_id":"public/tags/云计算/index.html","hash":"031b6a3e6e1beabf0a65064baab4e6b0d820fa32","modified":1693708140935},{"_id":"source/assets/images/ziyuan/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1692958263102},{"_id":"source/assets/images/aws/aws-ec2-hibernation-enable.png","hash":"5bce6d0c7c467d4e9288f1ee9cfff3e37247eb59","modified":1693645640635},{"_id":"source/assets/images/aws/aws-iam-users.png","hash":"1e503688b744e1c621063d537e86a33c04ca1260","modified":1693409498508},{"_id":"source/assets/images/aws/aws-iam-groups.png","hash":"2f748a5e68758f34c55e3598a01d7c5f23aed8e5","modified":1693409548408},{"_id":"source/assets/images/aws/aws-iam-policies.png","hash":"9a851fcfe0e5412dd20d0c2f1abed573f5602d74","modified":1693409603487},{"_id":"source/assets/images/aws/aws-iam-roles.png","hash":"b91ae3b5ae59eee7b3dca9d782fb4fd716cbb6e6","modified":1693409572562},{"_id":"source/assets/images/android-lifecycle.png","hash":"45fd765d99d88cb882f2e40526bc19701c9306e7","modified":1692896328776},{"_id":"source/assets/images/.DS_Store","hash":"8b4bda90816aed4dc5943962251b6956156f72a1","modified":1693654651855},{"_id":"source/assets/images/angular-ngModel-1.png","hash":"f000ebbb703b8c526d7e221352986f7d006b8e85","modified":1692896328779},{"_id":"source/assets/images/angular-ngModel-3.png","hash":"d3a212b70bff68f777464b6a30aaf75ba5beb51a","modified":1692896328780},{"_id":"source/assets/images/basic-usage-2.png","hash":"e6d3e2b6f0155dde200bf949e767923aa743649c","modified":1692896328793},{"_id":"source/assets/images/angular-ngModel-2.png","hash":"d421130ea2e5fb7d737b7471eafea856a1b4f63b","modified":1692896328780},{"_id":"source/assets/images/basic-usage.png","hash":"1e229239c968c88744cc8c5ac000926fcae452d4","modified":1692896328794},{"_id":"source/assets/images/checkout-after-detached.png","hash":"bb34310d60136e73af3dd7b8990566a849f09e48","modified":1692896328794},{"_id":"source/assets/images/checkout-b-detached.png","hash":"93cdad724e49180ce157f063eba0a038380e2b74","modified":1692896328795},{"_id":"source/assets/images/checkout-branch.png","hash":"1b7c3ce7fdf200cbde535aa77fca2243c7beaa2f","modified":1692896328795},{"_id":"source/assets/images/checkout-detached.png","hash":"2a7c0df771eb14a5895f0169ebd1885e0f6e6924","modified":1692896328800},{"_id":"source/assets/images/coffee-script-logo.png","hash":"e17b006464b3d6add4d70777c6f60c1b4a39fd6a","modified":1692896328802},{"_id":"source/assets/images/cherry-pick.png","hash":"5a715824182238a266dc43c2513df7244b2bc7f5","modified":1692896328801},{"_id":"source/assets/images/checkout-files.png","hash":"92d9f76eedd58dccfa2e2e6dc5ef32c4d9891b67","modified":1692896328801},{"_id":"source/assets/images/command-palette.png","hash":"70763879d73d9d67fc15e9347111eb3b57d6b966","modified":1692896328802},{"_id":"source/assets/images/commit-amend.png","hash":"6d8285e610adbbd8e86ed3c89be598527b6ddc49","modified":1692896328803},{"_id":"source/assets/images/commit-detached.png","hash":"7867831b4531ca8c690553eca00aca8a3c8ef757","modified":1692896328805},{"_id":"source/assets/images/commit-maint.png","hash":"373e6098614775f8047efcdc1f8d971c0111dd4c","modified":1692896328805},{"_id":"source/assets/images/commit-master.png","hash":"ce3d890f53d71ce2819238bced4dc2d7dd103390","modified":1692896328806},{"_id":"source/assets/images/contentEditable-before.png","hash":"48c9f6e002845826177597c5af2bd27000a090d2","modified":1692896328814},{"_id":"source/assets/images/conventions.png","hash":"e73be3d9fc05e7cfbc1a91500b9c6f14ae116082","modified":1692896328816},{"_id":"source/assets/images/contentEditable-after.png","hash":"86f592cb1082cb645b7a4337d2aeacf4444eab53","modified":1692896328814},{"_id":"source/assets/images/ie-tester.png","hash":"4606d97e8bf0900479ff460e30b31647cf678277","modified":1692896328835},{"_id":"source/assets/images/diff.png","hash":"285a06fb86a5d1c69a9ca5355913679083f528c0","modified":1692896328817},{"_id":"source/assets/images/merge-ff.png","hash":"d2ad6438c58c3d8c2c822937e2ca5e034246da21","modified":1692896328856},{"_id":"source/assets/images/merge.png","hash":"f0be90278cc610d51efeec02a3537bfa2f6dd425","modified":1692896328856},{"_id":"source/assets/images/git-logo.png","hash":"08314acee3d92f0c4df3c356c012927087dfd805","modified":1692896328826},{"_id":"source/assets/images/meter-tag.png","hash":"6df72b5a3b1e669ad96443ff962ee20bee7d00df","modified":1692896328857},{"_id":"source/assets/images/mvp-pattern.png","hash":"5745b53c4cfb526abbade4d661e696a05b7a77ee","modified":1692896328858},{"_id":"source/assets/images/mvvm-pattern.png","hash":"ed84b23b621648e2e43a34f38da394323ad8888e","modified":1692896328858},{"_id":"source/assets/images/mvc-pattern.png","hash":"9c8f44e9c34beda3380c61541136bf73db3e2193","modified":1692896328857},{"_id":"source/assets/images/progress-tag.png","hash":"f89d6f3d6f7de6e5aa1a69571064d3ed43d96df5","modified":1692896328863},{"_id":"source/assets/images/ractive-svg-test.png","hash":"55ee2650b4f7114adfc20a33ddfea8cc70df8be8","modified":1692896328867},{"_id":"source/assets/images/rebase-onto.png","hash":"addaf94740ffda0c185fbbfc1c7a815cf135fca5","modified":1692896328868},{"_id":"source/assets/images/rebase.png","hash":"25bbe5495fb9ac004c613ef0a6ba4c5040509538","modified":1692896328868},{"_id":"source/assets/images/reset-commit.png","hash":"6f12cd511b9a593948ee6741c5ee201fc2592f69","modified":1692896328868},{"_id":"source/assets/images/reset-files.png","hash":"c9a0e951d0c4d86136f03f4b04e322b3920525d5","modified":1692896328869},{"_id":"source/assets/images/ruby-logo.png","hash":"be9dc947ec03ee5d5e695f71ef9adc4dfdf9843c","modified":1692896328870},{"_id":"source/assets/images/reset.png","hash":"573a8103143bbcb43c79fa183cb92e52d5183a6f","modified":1692896328869},{"_id":"source/assets/images/spellcheck.png","hash":"a5256252a8be45a43521efae6c43bf552e829b6f","modified":1692896328870},{"_id":"source/assets/images/tsd-file-tree.png","hash":"83d4efc768021af73fbb73d0d0fbd5e16d231e05","modified":1692896328877},{"_id":"source/assets/images/nginx-welcome.png","hash":"3e5a236ecd26a170610d96ac96fd007c40521670","modified":1692896328859},{"_id":"source/assets/images/stash-pull-request.png","hash":"c905ed063cc4f3c89641912e56ef20bca51e2ff6","modified":1692896328871},{"_id":"source/assets/images/aws/aws-ec2-intro.png","hash":"dbaf3bc0421cfe8feeffe1b9016c7ac1cf876bba","modified":1693628921167},{"_id":"source/assets/images/package-installer.png","hash":"aff7d0194642b62931f694b96ee6c5f283e84686","modified":1692896328862},{"_id":"source/assets/images/numeric-inheritance.png","hash":"6b28237197a9127fc2bd32419edd5e2e5542e6d5","modified":1692896328861},{"_id":"source/assets/images/tsd-intellisense.png","hash":"5b59a322a4cf07f00f22dcac2e2de02fe485660c","modified":1692896328879},{"_id":"source/assets/images/words-mixing.png","hash":"631c382a3366a114aef61ebdd5cd00dd8ad79c85","modified":1692896328880},{"_id":"source/assets/images/direct-connect-mental-image.png","hash":"cff155ec72511b8ba31076b288ba6d1fbaf9d34f","modified":1692896328825},{"_id":"source/assets/images/high-frequency-language.png","hash":"f336799b42f5f02026afc58d1a5fef5f03bb3a8c","modified":1692896328834},{"_id":"source/assets/images/learning-language-4-words.png","hash":"1f0279f5c720f5531fd3d8327e3dfb8e23f323db","modified":1692896328855},{"_id":"source/assets/images/comprehension-is-key.png","hash":"d36c3d06085f55dfa423a36d5b3424e6773aaa56","modified":1692896328813},{"_id":"source/assets/images/project-structure.png","hash":"6f119d1b3e9efcc59d105808d9eeb06fb1be1b4a","modified":1692896328867},{"_id":"source/assets/images/android.jpg","hash":"7e52ca4cbcb1b632c923700b8d345c4aba7ee189","modified":1692896328778},{"_id":"source/assets/images/aws/aws-ec2-hibernation-flow.png","hash":"6799402de394691f504d765e3d6f2a3126e3ed24","modified":1693646132287},{"_id":"source/assets/images/sublime-cobalt2-theme.png","hash":"57a70826a9c1b5828c7196e79b3f42cef40e1b94","modified":1692896328877},{"_id":"source/assets/images/iterm-cobalt2.png","hash":"38d055eb9273795523876743b6fbc95a676d0381","modified":1692896328852},{"_id":"source/assets/images/auto-refresh-page.png","hash":"f558529ecdf7655296c43582a027c1dd28a9f08f","modified":1692896328793},{"_id":"source/assets/images/ziyuan/coding-1.png","hash":"5a11d84c7d8920b743d66cbb5bbce31531b62652","modified":1692958333163},{"_id":"source/assets/images/ziyuan/community-1.png","hash":"285b3e91d2887fa395fa362f8a214096fd9bc595","modified":1692959409921},{"_id":"source/assets/images/ziyuan/license-1.png","hash":"24434a0e0d97559526d7a7f40f29990aa509de92","modified":1692959302815},{"_id":"source/assets/images/ziyuan/search-1.png","hash":"1b9d6f71585ac6681131e99ebe5aa0728cff0b9d","modified":1692959368754},{"_id":"source/assets/images/ziyuan/laptop-1.png","hash":"f65557ae6936a08479751cdfa8cb93d08072d30a","modified":1692959142530},{"_id":"source/assets/images/ziyuan/fengjing-1.png","hash":"3fde30fc9c7c77f302362002be13ee41c949e4e8","modified":1692958954549},{"_id":"source/assets/.DS_Store","hash":"330787844ef2a6ffb106fbf952d022c1c10e6ca7","modified":1693675350967},{"_id":"source/assets/images/legacy/android-lifecycle.png","hash":"45fd765d99d88cb882f2e40526bc19701c9306e7","modified":1692896328776},{"_id":"source/assets/images/legacy/angular-ngModel-3.png","hash":"d3a212b70bff68f777464b6a30aaf75ba5beb51a","modified":1692896328780},{"_id":"source/assets/images/legacy/angular-ngModel-1.png","hash":"f000ebbb703b8c526d7e221352986f7d006b8e85","modified":1692896328779},{"_id":"source/assets/images/legacy/angular-ngModel-2.png","hash":"d421130ea2e5fb7d737b7471eafea856a1b4f63b","modified":1692896328780},{"_id":"source/assets/images/legacy/basic-usage.png","hash":"1e229239c968c88744cc8c5ac000926fcae452d4","modified":1692896328794},{"_id":"source/assets/images/legacy/checkout-after-detached.png","hash":"bb34310d60136e73af3dd7b8990566a849f09e48","modified":1692896328794},{"_id":"source/assets/images/legacy/basic-usage-2.png","hash":"e6d3e2b6f0155dde200bf949e767923aa743649c","modified":1692896328793},{"_id":"source/assets/images/legacy/checkout-b-detached.png","hash":"93cdad724e49180ce157f063eba0a038380e2b74","modified":1692896328795},{"_id":"source/assets/images/legacy/checkout-branch.png","hash":"1b7c3ce7fdf200cbde535aa77fca2243c7beaa2f","modified":1692896328795},{"_id":"source/assets/images/legacy/checkout-files.png","hash":"92d9f76eedd58dccfa2e2e6dc5ef32c4d9891b67","modified":1692896328801},{"_id":"source/assets/images/legacy/checkout-detached.png","hash":"2a7c0df771eb14a5895f0169ebd1885e0f6e6924","modified":1692896328800},{"_id":"source/assets/images/legacy/cherry-pick.png","hash":"5a715824182238a266dc43c2513df7244b2bc7f5","modified":1692896328801},{"_id":"source/assets/images/legacy/command-palette.png","hash":"70763879d73d9d67fc15e9347111eb3b57d6b966","modified":1692896328802},{"_id":"source/assets/images/legacy/commit-amend.png","hash":"6d8285e610adbbd8e86ed3c89be598527b6ddc49","modified":1692896328803},{"_id":"source/assets/images/legacy/coffee-script-logo.png","hash":"e17b006464b3d6add4d70777c6f60c1b4a39fd6a","modified":1692896328802},{"_id":"source/assets/images/legacy/commit-detached.png","hash":"7867831b4531ca8c690553eca00aca8a3c8ef757","modified":1692896328805},{"_id":"source/assets/images/legacy/commit-maint.png","hash":"373e6098614775f8047efcdc1f8d971c0111dd4c","modified":1692896328805},{"_id":"source/assets/images/legacy/commit-master.png","hash":"ce3d890f53d71ce2819238bced4dc2d7dd103390","modified":1692896328806},{"_id":"source/assets/images/legacy/contentEditable-after.png","hash":"86f592cb1082cb645b7a4337d2aeacf4444eab53","modified":1692896328814},{"_id":"source/assets/images/legacy/conventions.png","hash":"e73be3d9fc05e7cfbc1a91500b9c6f14ae116082","modified":1692896328816},{"_id":"source/assets/images/legacy/contentEditable-before.png","hash":"48c9f6e002845826177597c5af2bd27000a090d2","modified":1692896328814},{"_id":"source/assets/images/legacy/diff.png","hash":"285a06fb86a5d1c69a9ca5355913679083f528c0","modified":1692896328817},{"_id":"source/assets/images/legacy/git-logo.png","hash":"08314acee3d92f0c4df3c356c012927087dfd805","modified":1692896328826},{"_id":"source/assets/images/legacy/merge-ff.png","hash":"d2ad6438c58c3d8c2c822937e2ca5e034246da21","modified":1692896328856},{"_id":"source/assets/images/legacy/ie-tester.png","hash":"4606d97e8bf0900479ff460e30b31647cf678277","modified":1692896328835},{"_id":"source/assets/images/legacy/merge.png","hash":"f0be90278cc610d51efeec02a3537bfa2f6dd425","modified":1692896328856},{"_id":"source/assets/images/legacy/meter-tag.png","hash":"6df72b5a3b1e669ad96443ff962ee20bee7d00df","modified":1692896328857},{"_id":"source/assets/images/legacy/mvc-pattern.png","hash":"9c8f44e9c34beda3380c61541136bf73db3e2193","modified":1692896328857},{"_id":"source/assets/images/legacy/mvp-pattern.png","hash":"5745b53c4cfb526abbade4d661e696a05b7a77ee","modified":1692896328858},{"_id":"source/assets/images/legacy/mvvm-pattern.png","hash":"ed84b23b621648e2e43a34f38da394323ad8888e","modified":1692896328858},{"_id":"source/assets/images/legacy/progress-tag.png","hash":"f89d6f3d6f7de6e5aa1a69571064d3ed43d96df5","modified":1692896328863},{"_id":"source/assets/images/legacy/rebase-onto.png","hash":"addaf94740ffda0c185fbbfc1c7a815cf135fca5","modified":1692896328868},{"_id":"source/assets/images/legacy/rebase.png","hash":"25bbe5495fb9ac004c613ef0a6ba4c5040509538","modified":1692896328868},{"_id":"source/assets/images/legacy/ractive-svg-test.png","hash":"55ee2650b4f7114adfc20a33ddfea8cc70df8be8","modified":1692896328867},{"_id":"source/assets/images/legacy/reset-commit.png","hash":"6f12cd511b9a593948ee6741c5ee201fc2592f69","modified":1692896328868},{"_id":"source/assets/images/legacy/spellcheck.png","hash":"a5256252a8be45a43521efae6c43bf552e829b6f","modified":1692896328870},{"_id":"source/assets/images/legacy/reset-files.png","hash":"c9a0e951d0c4d86136f03f4b04e322b3920525d5","modified":1692896328869},{"_id":"source/assets/images/legacy/ruby-logo.png","hash":"be9dc947ec03ee5d5e695f71ef9adc4dfdf9843c","modified":1692896328870},{"_id":"source/assets/images/legacy/reset.png","hash":"573a8103143bbcb43c79fa183cb92e52d5183a6f","modified":1692896328869},{"_id":"source/assets/images/legacy/tsd-file-tree.png","hash":"83d4efc768021af73fbb73d0d0fbd5e16d231e05","modified":1692896328877},{"_id":"source/assets/images/legacy/nginx-welcome.png","hash":"3e5a236ecd26a170610d96ac96fd007c40521670","modified":1692896328859},{"_id":"source/assets/images/legacy/stash-pull-request.png","hash":"c905ed063cc4f3c89641912e56ef20bca51e2ff6","modified":1692896328871},{"_id":"source/assets/images/legacy/numeric-inheritance.png","hash":"6b28237197a9127fc2bd32419edd5e2e5542e6d5","modified":1692896328861},{"_id":"source/assets/images/legacy/package-installer.png","hash":"aff7d0194642b62931f694b96ee6c5f283e84686","modified":1692896328862},{"_id":"source/assets/images/legacy/tsd-intellisense.png","hash":"5b59a322a4cf07f00f22dcac2e2de02fe485660c","modified":1692896328879},{"_id":"source/assets/images/legacy/words-mixing.png","hash":"631c382a3366a114aef61ebdd5cd00dd8ad79c85","modified":1692896328880},{"_id":"source/assets/images/legacy/direct-connect-mental-image.png","hash":"cff155ec72511b8ba31076b288ba6d1fbaf9d34f","modified":1692896328825},{"_id":"source/assets/images/legacy/high-frequency-language.png","hash":"f336799b42f5f02026afc58d1a5fef5f03bb3a8c","modified":1692896328834},{"_id":"source/assets/images/legacy/learning-language-4-words.png","hash":"1f0279f5c720f5531fd3d8327e3dfb8e23f323db","modified":1692896328855},{"_id":"source/assets/images/legacy/comprehension-is-key.png","hash":"d36c3d06085f55dfa423a36d5b3424e6773aaa56","modified":1692896328813},{"_id":"source/assets/images/legacy/project-structure.png","hash":"6f119d1b3e9efcc59d105808d9eeb06fb1be1b4a","modified":1692896328867},{"_id":"source/assets/images/legacy/android.jpg","hash":"7e52ca4cbcb1b632c923700b8d345c4aba7ee189","modified":1692896328778},{"_id":"source/assets/images/legacy/sublime-cobalt2-theme.png","hash":"57a70826a9c1b5828c7196e79b3f42cef40e1b94","modified":1692896328877},{"_id":"source/assets/images/legacy/iterm-cobalt2.png","hash":"38d055eb9273795523876743b6fbc95a676d0381","modified":1692896328852},{"_id":"source/assets/images/legacy/auto-refresh-page.png","hash":"f558529ecdf7655296c43582a027c1dd28a9f08f","modified":1692896328793},{"_id":"public/assets/images/aws/aws-ec2-hibernation-enable.png","hash":"5bce6d0c7c467d4e9288f1ee9cfff3e37247eb59","modified":1693676016467},{"_id":"public/assets/images/legacy/android-lifecycle.png","hash":"45fd765d99d88cb882f2e40526bc19701c9306e7","modified":1693676016467},{"_id":"public/assets/images/legacy/angular-ngModel-2.png","hash":"d421130ea2e5fb7d737b7471eafea856a1b4f63b","modified":1693676016467},{"_id":"public/assets/images/legacy/angular-ngModel-1.png","hash":"f000ebbb703b8c526d7e221352986f7d006b8e85","modified":1693676016467},{"_id":"public/assets/images/legacy/basic-usage-2.png","hash":"e6d3e2b6f0155dde200bf949e767923aa743649c","modified":1693676016467},{"_id":"public/assets/images/legacy/basic-usage.png","hash":"1e229239c968c88744cc8c5ac000926fcae452d4","modified":1693676016467},{"_id":"public/assets/images/legacy/checkout-b-detached.png","hash":"93cdad724e49180ce157f063eba0a038380e2b74","modified":1693676016467},{"_id":"public/assets/images/legacy/angular-ngModel-3.png","hash":"d3a212b70bff68f777464b6a30aaf75ba5beb51a","modified":1693676016467},{"_id":"public/assets/images/legacy/checkout-after-detached.png","hash":"bb34310d60136e73af3dd7b8990566a849f09e48","modified":1693676016467},{"_id":"public/assets/images/legacy/checkout-branch.png","hash":"1b7c3ce7fdf200cbde535aa77fca2243c7beaa2f","modified":1693676016467},{"_id":"public/assets/images/legacy/checkout-files.png","hash":"92d9f76eedd58dccfa2e2e6dc5ef32c4d9891b67","modified":1693676016467},{"_id":"public/assets/images/legacy/checkout-detached.png","hash":"2a7c0df771eb14a5895f0169ebd1885e0f6e6924","modified":1693676016467},{"_id":"public/assets/images/legacy/cherry-pick.png","hash":"5a715824182238a266dc43c2513df7244b2bc7f5","modified":1693676016467},{"_id":"public/assets/images/legacy/coffee-script-logo.png","hash":"e17b006464b3d6add4d70777c6f60c1b4a39fd6a","modified":1693676016467},{"_id":"public/assets/images/legacy/command-palette.png","hash":"70763879d73d9d67fc15e9347111eb3b57d6b966","modified":1693676016467},{"_id":"public/assets/images/legacy/commit-amend.png","hash":"6d8285e610adbbd8e86ed3c89be598527b6ddc49","modified":1693676016467},{"_id":"public/assets/images/legacy/commit-maint.png","hash":"373e6098614775f8047efcdc1f8d971c0111dd4c","modified":1693676016467},{"_id":"public/assets/images/legacy/commit-master.png","hash":"ce3d890f53d71ce2819238bced4dc2d7dd103390","modified":1693676016467},{"_id":"public/assets/images/legacy/commit-detached.png","hash":"7867831b4531ca8c690553eca00aca8a3c8ef757","modified":1693676016467},{"_id":"public/assets/images/legacy/contentEditable-after.png","hash":"86f592cb1082cb645b7a4337d2aeacf4444eab53","modified":1693676016467},{"_id":"public/assets/images/legacy/contentEditable-before.png","hash":"48c9f6e002845826177597c5af2bd27000a090d2","modified":1693676016467},{"_id":"public/assets/images/legacy/conventions.png","hash":"e73be3d9fc05e7cfbc1a91500b9c6f14ae116082","modified":1693676016467},{"_id":"public/assets/images/legacy/git-logo.png","hash":"08314acee3d92f0c4df3c356c012927087dfd805","modified":1693676016467},{"_id":"public/assets/images/legacy/diff.png","hash":"285a06fb86a5d1c69a9ca5355913679083f528c0","modified":1693676016467},{"_id":"public/assets/images/legacy/ie-tester.png","hash":"4606d97e8bf0900479ff460e30b31647cf678277","modified":1693676016467},{"_id":"public/assets/images/legacy/merge-ff.png","hash":"d2ad6438c58c3d8c2c822937e2ca5e034246da21","modified":1693676016467},{"_id":"public/assets/images/legacy/meter-tag.png","hash":"6df72b5a3b1e669ad96443ff962ee20bee7d00df","modified":1693676016467},{"_id":"public/assets/images/legacy/merge.png","hash":"f0be90278cc610d51efeec02a3537bfa2f6dd425","modified":1693676016467},{"_id":"public/assets/images/legacy/mvc-pattern.png","hash":"9c8f44e9c34beda3380c61541136bf73db3e2193","modified":1693676016467},{"_id":"public/assets/images/legacy/mvp-pattern.png","hash":"5745b53c4cfb526abbade4d661e696a05b7a77ee","modified":1693676016467},{"_id":"public/assets/images/legacy/mvvm-pattern.png","hash":"ed84b23b621648e2e43a34f38da394323ad8888e","modified":1693676016467},{"_id":"public/assets/images/legacy/progress-tag.png","hash":"f89d6f3d6f7de6e5aa1a69571064d3ed43d96df5","modified":1693676016467},{"_id":"public/assets/images/legacy/ractive-svg-test.png","hash":"55ee2650b4f7114adfc20a33ddfea8cc70df8be8","modified":1693676016467},{"_id":"public/assets/images/legacy/rebase-onto.png","hash":"addaf94740ffda0c185fbbfc1c7a815cf135fca5","modified":1693676016467},{"_id":"public/assets/images/legacy/spellcheck.png","hash":"a5256252a8be45a43521efae6c43bf552e829b6f","modified":1693676016467},{"_id":"public/assets/images/legacy/rebase.png","hash":"25bbe5495fb9ac004c613ef0a6ba4c5040509538","modified":1693676016467},{"_id":"public/assets/images/legacy/reset-commit.png","hash":"6f12cd511b9a593948ee6741c5ee201fc2592f69","modified":1693676016467},{"_id":"public/assets/images/legacy/reset-files.png","hash":"c9a0e951d0c4d86136f03f4b04e322b3920525d5","modified":1693676016467},{"_id":"public/assets/images/legacy/ruby-logo.png","hash":"be9dc947ec03ee5d5e695f71ef9adc4dfdf9843c","modified":1693676016467},{"_id":"public/assets/images/legacy/reset.png","hash":"573a8103143bbcb43c79fa183cb92e52d5183a6f","modified":1693676016467},{"_id":"public/assets/images/legacy/tsd-file-tree.png","hash":"83d4efc768021af73fbb73d0d0fbd5e16d231e05","modified":1693676016467},{"_id":"public/assets/images/aws/aws-iam-users.png","hash":"1e503688b744e1c621063d537e86a33c04ca1260","modified":1693676016467},{"_id":"public/assets/images/legacy/nginx-welcome.png","hash":"3e5a236ecd26a170610d96ac96fd007c40521670","modified":1693676016467},{"_id":"public/assets/images/legacy/stash-pull-request.png","hash":"c905ed063cc4f3c89641912e56ef20bca51e2ff6","modified":1693676016467},{"_id":"public/assets/images/aws/aws-iam-groups.png","hash":"2f748a5e68758f34c55e3598a01d7c5f23aed8e5","modified":1693676016467},{"_id":"public/assets/images/legacy/numeric-inheritance.png","hash":"6b28237197a9127fc2bd32419edd5e2e5542e6d5","modified":1693676016467},{"_id":"public/assets/images/legacy/package-installer.png","hash":"aff7d0194642b62931f694b96ee6c5f283e84686","modified":1693676016467},{"_id":"public/assets/images/legacy/tsd-intellisense.png","hash":"5b59a322a4cf07f00f22dcac2e2de02fe485660c","modified":1693676016467},{"_id":"public/assets/images/legacy/words-mixing.png","hash":"631c382a3366a114aef61ebdd5cd00dd8ad79c85","modified":1693676016467},{"_id":"public/assets/images/aws/aws-iam-policies.png","hash":"9a851fcfe0e5412dd20d0c2f1abed573f5602d74","modified":1693676016467},{"_id":"public/assets/images/aws/aws-iam-roles.png","hash":"b91ae3b5ae59eee7b3dca9d782fb4fd716cbb6e6","modified":1693676016467},{"_id":"public/assets/images/legacy/direct-connect-mental-image.png","hash":"cff155ec72511b8ba31076b288ba6d1fbaf9d34f","modified":1693676016467},{"_id":"public/assets/images/legacy/high-frequency-language.png","hash":"f336799b42f5f02026afc58d1a5fef5f03bb3a8c","modified":1693676016467},{"_id":"public/assets/images/legacy/learning-language-4-words.png","hash":"1f0279f5c720f5531fd3d8327e3dfb8e23f323db","modified":1693676016467},{"_id":"public/assets/images/legacy/comprehension-is-key.png","hash":"d36c3d06085f55dfa423a36d5b3424e6773aaa56","modified":1693676016467},{"_id":"public/assets/images/legacy/project-structure.png","hash":"6f119d1b3e9efcc59d105808d9eeb06fb1be1b4a","modified":1693676016467},{"_id":"public/assets/images/aws/aws-ec2-intro.png","hash":"dbaf3bc0421cfe8feeffe1b9016c7ac1cf876bba","modified":1693676016467},{"_id":"public/assets/images/legacy/android.jpg","hash":"7e52ca4cbcb1b632c923700b8d345c4aba7ee189","modified":1693676016467},{"_id":"public/assets/images/legacy/sublime-cobalt2-theme.png","hash":"57a70826a9c1b5828c7196e79b3f42cef40e1b94","modified":1693676016467},{"_id":"public/assets/images/aws/aws-ec2-hibernation-flow.png","hash":"6799402de394691f504d765e3d6f2a3126e3ed24","modified":1693676016467},{"_id":"public/assets/images/legacy/iterm-cobalt2.png","hash":"38d055eb9273795523876743b6fbc95a676d0381","modified":1693676016467},{"_id":"public/assets/images/legacy/auto-refresh-page.png","hash":"f558529ecdf7655296c43582a027c1dd28a9f08f","modified":1693676016467},{"_id":"public/assets/images/ziyuan/coding-1.png","hash":"5a11d84c7d8920b743d66cbb5bbce31531b62652","modified":1693676016467},{"_id":"public/assets/images/ziyuan/community-1.png","hash":"285b3e91d2887fa395fa362f8a214096fd9bc595","modified":1693676016467},{"_id":"public/assets/images/ziyuan/license-1.png","hash":"24434a0e0d97559526d7a7f40f29990aa509de92","modified":1693676016467},{"_id":"public/assets/images/ziyuan/search-1.png","hash":"1b9d6f71585ac6681131e99ebe5aa0728cff0b9d","modified":1693676016467},{"_id":"public/assets/images/ziyuan/laptop-1.png","hash":"f65557ae6936a08479751cdfa8cb93d08072d30a","modified":1693676016467},{"_id":"public/assets/images/ziyuan/fengjing-1.png","hash":"3fde30fc9c7c77f302362002be13ee41c949e4e8","modified":1693676016467},{"_id":"public/2014/11/13/2014-11-13-building-blocks-of-android-application/index.html","hash":"b491569200b3c6d572e3f0b904895d7a011bb863","modified":1693709411116},{"_id":"public/categories/Backend/page/3/index.html","hash":"89df2290985e2f5113ee7e3542e861ffd936c520","modified":1693708140935},{"_id":"public/categories/Backend/page/4/index.html","hash":"29503b665a72956de331f27002347dfb615f1594","modified":1693708140935},{"_id":"public/tags/Spring/page/2/index.html","hash":"03233a06c16028f4e40cdb6398efbf716de803a1","modified":1693708140935},{"_id":"public/tags/Ruby/page/2/index.html","hash":"3b616414488bc4005cb61b390613d3f0acd422bd","modified":1693708140935},{"_id":"public/tags/高清图片/index.html","hash":"25750854ff83b8b8c71009fe9c462a72ad9c7771","modified":1693708140935},{"_id":"public/tags/资源/index.html","hash":"675bf416bbe8b118eca692e5c6f945b0bc595c5e","modified":1693708140935},{"_id":"public/tags/Bracket/index.html","hash":"1106b8276b159484c849853e013578b6421b575a","modified":1693708140935},{"_id":"public/tags/Web-Design/index.html","hash":"db5703ab0c36c5bd5820932a4c8cf61871429426","modified":1693708140935},{"_id":"source/medias/.DS_Store","hash":"0f6961f121dab876ed3b95bb8c0da29fe2eae527","modified":1693707387204},{"_id":"source/medias/bg-images/v2-154228684029ae0c2183f65a9568c310_1440w.webp","hash":"62c1a5acf60a0738097e93d09ea5b7cb781f83dd","modified":1693704225961},{"_id":"source/medias/bg-images/v2-544e3d61bf1b83a6f15cd3c1734e8cae_1440w.webp","hash":"d306496219deb63c43d21edb61e7db354b7e9f86","modified":1693704463653},{"_id":"source/medias/bg-images/v2-36e669406e3b17fcb8a2ded46b88bf37_1440w.webp","hash":"e773c39b18c8ef1fc24929911f3744145ea3296a","modified":1693704462510},{"_id":"source/medias/bg-images/v2-5dfab6525ec92b4caf3f09e1ee72a23b_1440w.webp","hash":"3ebe9aff934e4cdcd5e04407da6cee137a696b50","modified":1693704460891},{"_id":"source/medias/bg-images/v2-63bbdb5b76b8d349ad35ff4281efbd37_1440w.webp","hash":"84313824d7955078c2bdc70a6d147e0cf6ae97d9","modified":1693703231613},{"_id":"source/medias/bg-images/v2-61f99f8dcf899f54cad2a1aa28b21e44_1440w.webp","hash":"fdbc1f62c44c0917b89b68b6ad2b6d20cbe313ef","modified":1693704701914},{"_id":"source/medias/bg-images/v2-9610c47f088f341cb76f066a59d6fc58_1440w.webp","hash":"714d57bbf029f780b7b424ddb42028092dacbb03","modified":1693704221786},{"_id":"source/medias/bg-images/v2-b4fed05253022f04664aa0fdc491a9dd_1440w.webp","hash":"c22018c7a14a3493c962f93944dee03362810cf6","modified":1693704151719},{"_id":"source/medias/bg-images/v2-e6f5ee027177096c0950a053ab33a12d_1440w.webp","hash":"f7fb977a1e2ecc67589fb3a3e7b91db7dc5cf381","modified":1693704097786},{"_id":"source/medias/bg-images/v2-e434e3a2888fb4efb1844845b8791d1f_1440w.webp","hash":"e4db0e1dda2802b49054bf739ba6e20db3075292","modified":1693704889430},{"_id":"source/medias/bg-images/v2-121618e14ad58dcedf8637127087ff27_1440w.webp","hash":"d9b33739e1392e13f67904a63ae91ce2ab9f6a33","modified":1693704223637},{"_id":"source/medias/bg-images/v2-1998dea3bd643074760e2976f831c1dc_1440w.webp","hash":"75a5b0cf6a5d247b8888d485d6824f001f2b01c9","modified":1693704466833},{"_id":"source/medias/bg-images/v2-573ac3e25de03fad9c32add5a05e5cfc_1440w.webp","hash":"9cd37fd7e8567495b50e7ccca1e1fc83aa56eae2","modified":1693704646445},{"_id":"source/medias/bg-images/v2-5c062983ace7db9601880019190fb5a8_1440w.webp","hash":"18e478672db69cd95e806c528f34f11c39b9bed3","modified":1693704457616},{"_id":"source/medias/bg-images/v2-5f7cb7e900b9dcf5354c3d4d2c5cc3c2_1440w.webp","hash":"346e750458c2f0c8586cca8b59b38cc4fe51d902","modified":1693704656615},{"_id":"source/medias/bg-images/v2-604a15cef201cf177943af2d915eb2e7_1440w.webp","hash":"33afc5f36c3bb5672b7a5ffd439903dcb67fe4de","modified":1693704465401},{"_id":"source/medias/bg-images/v2-7cfc909ebe8d83683909846edd6b5232_1440w.webp","hash":"0aabdd718ea2ff0789c543f5f899f3386a7d55af","modified":1693704666017},{"_id":"source/medias/bg-images/v2-9c50d3af0bc62a0e8b6e89e24c769317_1440w.webp","hash":"ce2913c32325e90b88e2b42a027396926203e291","modified":1693704623233},{"_id":"source/medias/bg-images/v2-c72bc34662bb500f34f49d6d80881e0f_1440w.webp","hash":"db504dcae7e70c22d9f0b2dbe7fee7eb1984df85","modified":1693703637310},{"_id":"source/medias/bg-images/v2-bf6c555e7c61a57ba4a1fd95a9a32975_1440w.webp","hash":"26d57b316b70617a373b09e74ad84bc2124d1614","modified":1693703553954},{"_id":"source/medias/bg-images/v2-2f39b553d8a370cb137031f8ca798a56_1440w.webp","hash":"02863fe0ae27bb928e7c6d18b1f67d51fbb202cd","modified":1693704887323},{"_id":"source/medias/bg-images/v2-e22aaad20d20634f506f57fff0fcbc17_1440w.webp","hash":"a0fce12f54cd27ccc53291dffb8bb72360857b42","modified":1693704670951},{"_id":"source/medias/bg-images/v2-03a22891ccba9bccf6424dfd7cbf4be7_1440w.webp","hash":"99fbbe5baa0b202738a42eeafdaa6cb3e1c7cc19","modified":1693704610644},{"_id":"source/medias/bg-images/v2-d61b1af36a619fec1b32775d75f4900d_1440w.webp","hash":"1efa485319ab1c7c82b1b48908db36ea6338b89a","modified":1693704150484},{"_id":"source/medias/bg-images/v2-f94047ce45907e0966a681089835c04d_1440w.webp","hash":"0d8f5bc8e1a8b221352685282216073e7fc82028","modified":1693704094716},{"_id":"source/medias/bg-images/v2-85c31120acff76826ab53ea8934ef4bb_1440w.webp","hash":"223c1c42a99a8085444ce7dbe4fc4119bd04e2f7","modified":1693704629710},{"_id":"source/medias/bg-images/v2-83ea273b88e119d9615aed0d89aad4ab_1440w.webp","hash":"505928653ff6e53759c78146b0bdee3a3a3376e8","modified":1693704651405},{"_id":"source/medias/bg-images/v2-b44931ea513e5f7b3b06f2703f79653c_1440w.webp","hash":"bba373a0bf4a35872eb19c81b1611793732a1e03","modified":1693704617203},{"_id":"source/medias/avatar/.DS_Store","hash":"cfb5fd368e27135007fc731f34b2b2c2d967907f","modified":1693708087257},{"_id":"source/medias/avatar/totoro1.webp","hash":"4b880565a0ed27bea761cee36307ecf779c39157","modified":1693707817127},{"_id":"source/medias/avatar/totoro3.webp","hash":"5808092ca0071f8abfb6bc2ccdeeb171eaeb9dbb","modified":1693707821271},{"_id":"source/medias/avatar/totoro2.webp","hash":"53123139a83f1cf670c06001cd305054e32f2002","modified":1693707819782},{"_id":"public/medias/bg-images/v2-544e3d61bf1b83a6f15cd3c1734e8cae_1440w.webp","hash":"d306496219deb63c43d21edb61e7db354b7e9f86","modified":1693708140935},{"_id":"public/medias/bg-images/v2-36e669406e3b17fcb8a2ded46b88bf37_1440w.webp","hash":"e773c39b18c8ef1fc24929911f3744145ea3296a","modified":1693708140935},{"_id":"public/medias/bg-images/v2-154228684029ae0c2183f65a9568c310_1440w.webp","hash":"62c1a5acf60a0738097e93d09ea5b7cb781f83dd","modified":1693708140935},{"_id":"public/medias/bg-images/v2-5dfab6525ec92b4caf3f09e1ee72a23b_1440w.webp","hash":"3ebe9aff934e4cdcd5e04407da6cee137a696b50","modified":1693708140935},{"_id":"public/medias/bg-images/v2-63bbdb5b76b8d349ad35ff4281efbd37_1440w.webp","hash":"84313824d7955078c2bdc70a6d147e0cf6ae97d9","modified":1693708140935},{"_id":"public/medias/bg-images/v2-61f99f8dcf899f54cad2a1aa28b21e44_1440w.webp","hash":"fdbc1f62c44c0917b89b68b6ad2b6d20cbe313ef","modified":1693708140935},{"_id":"public/medias/bg-images/v2-9610c47f088f341cb76f066a59d6fc58_1440w.webp","hash":"714d57bbf029f780b7b424ddb42028092dacbb03","modified":1693708140935},{"_id":"public/medias/bg-images/v2-b4fed05253022f04664aa0fdc491a9dd_1440w.webp","hash":"c22018c7a14a3493c962f93944dee03362810cf6","modified":1693708140935},{"_id":"public/medias/avatar/totoro1.webp","hash":"4b880565a0ed27bea761cee36307ecf779c39157","modified":1693708140935},{"_id":"public/medias/avatar/totoro2.webp","hash":"53123139a83f1cf670c06001cd305054e32f2002","modified":1693708140935},{"_id":"public/medias/avatar/totoro3.webp","hash":"5808092ca0071f8abfb6bc2ccdeeb171eaeb9dbb","modified":1693708140935},{"_id":"public/medias/bg-images/v2-e434e3a2888fb4efb1844845b8791d1f_1440w.webp","hash":"e4db0e1dda2802b49054bf739ba6e20db3075292","modified":1693708140935},{"_id":"public/medias/bg-images/v2-e6f5ee027177096c0950a053ab33a12d_1440w.webp","hash":"f7fb977a1e2ecc67589fb3a3e7b91db7dc5cf381","modified":1693708140935},{"_id":"public/medias/bg-images/v2-121618e14ad58dcedf8637127087ff27_1440w.webp","hash":"d9b33739e1392e13f67904a63ae91ce2ab9f6a33","modified":1693708140935},{"_id":"public/medias/bg-images/v2-1998dea3bd643074760e2976f831c1dc_1440w.webp","hash":"75a5b0cf6a5d247b8888d485d6824f001f2b01c9","modified":1693708140935},{"_id":"public/medias/bg-images/v2-5c062983ace7db9601880019190fb5a8_1440w.webp","hash":"18e478672db69cd95e806c528f34f11c39b9bed3","modified":1693708140935},{"_id":"public/medias/bg-images/v2-604a15cef201cf177943af2d915eb2e7_1440w.webp","hash":"33afc5f36c3bb5672b7a5ffd439903dcb67fe4de","modified":1693708140935},{"_id":"public/medias/bg-images/v2-5f7cb7e900b9dcf5354c3d4d2c5cc3c2_1440w.webp","hash":"346e750458c2f0c8586cca8b59b38cc4fe51d902","modified":1693708140935},{"_id":"public/medias/bg-images/v2-573ac3e25de03fad9c32add5a05e5cfc_1440w.webp","hash":"9cd37fd7e8567495b50e7ccca1e1fc83aa56eae2","modified":1693708140935},{"_id":"public/medias/bg-images/v2-7cfc909ebe8d83683909846edd6b5232_1440w.webp","hash":"0aabdd718ea2ff0789c543f5f899f3386a7d55af","modified":1693708140935},{"_id":"public/medias/bg-images/v2-9c50d3af0bc62a0e8b6e89e24c769317_1440w.webp","hash":"ce2913c32325e90b88e2b42a027396926203e291","modified":1693708140935},{"_id":"public/medias/bg-images/v2-c72bc34662bb500f34f49d6d80881e0f_1440w.webp","hash":"db504dcae7e70c22d9f0b2dbe7fee7eb1984df85","modified":1693708140935},{"_id":"public/medias/bg-images/v2-bf6c555e7c61a57ba4a1fd95a9a32975_1440w.webp","hash":"26d57b316b70617a373b09e74ad84bc2124d1614","modified":1693708140935},{"_id":"public/medias/bg-images/v2-e22aaad20d20634f506f57fff0fcbc17_1440w.webp","hash":"a0fce12f54cd27ccc53291dffb8bb72360857b42","modified":1693708140935},{"_id":"public/medias/bg-images/v2-d61b1af36a619fec1b32775d75f4900d_1440w.webp","hash":"1efa485319ab1c7c82b1b48908db36ea6338b89a","modified":1693708140935},{"_id":"public/medias/bg-images/v2-f94047ce45907e0966a681089835c04d_1440w.webp","hash":"0d8f5bc8e1a8b221352685282216073e7fc82028","modified":1693708140935},{"_id":"public/medias/bg-images/v2-03a22891ccba9bccf6424dfd7cbf4be7_1440w.webp","hash":"99fbbe5baa0b202738a42eeafdaa6cb3e1c7cc19","modified":1693708140935},{"_id":"public/medias/bg-images/v2-2f39b553d8a370cb137031f8ca798a56_1440w.webp","hash":"02863fe0ae27bb928e7c6d18b1f67d51fbb202cd","modified":1693708140935},{"_id":"public/medias/bg-images/v2-83ea273b88e119d9615aed0d89aad4ab_1440w.webp","hash":"505928653ff6e53759c78146b0bdee3a3a3376e8","modified":1693708140935},{"_id":"public/medias/bg-images/v2-85c31120acff76826ab53ea8934ef4bb_1440w.webp","hash":"223c1c42a99a8085444ce7dbe4fc4119bd04e2f7","modified":1693708140935},{"_id":"public/medias/bg-images/v2-b44931ea513e5f7b3b06f2703f79653c_1440w.webp","hash":"bba373a0bf4a35872eb19c81b1611793732a1e03","modified":1693708140935}],"Category":[{"name":"Tool","_id":"clm27g4n60002azv5aj8h53z1"},{"name":"Android","_id":"clm27g4ni000lazv57zdh9agk"},{"name":"Git","_id":"clm27g4nk000sazv54l593edg"},{"name":"Java","_id":"clm27g4o0001lazv5eidp5hg2"},{"name":"Guava","_id":"clm27g4o3001razv554vm8f71"},{"name":"JSP","parent":"clm27g4o0001lazv5eidp5hg2","_id":"clm27g4o60021azv5b2rqeesf"},{"name":"Guava","parent":"clm27g4o0001lazv5eidp5hg2","_id":"clm27g4o80024azv57pt9d4uv"},{"name":"Learning Skill","_id":"clm27g4ob002cazv5f75f3120"},{"name":"Java","parent":"clm27g4o3001razv554vm8f71","_id":"clm27g4od002iazv59c9ddprt"},{"name":"Ractive.js","_id":"clm27g4oe002mazv581bie1xy"},{"name":"Cucumber","_id":"clm27g4og002qazv53scnfvjr"},{"name":"Sublime Text","_id":"clm27g4oj002xazv534ez9cch"},{"name":"IETester","_id":"clm27g4ok0032azv5h4tiboiv"},{"name":"Guard","_id":"clm27g4om0036azv5b45jaxxr"},{"name":"IE","_id":"clm27g4on0039azv589phfonx"},{"name":"CSS","_id":"clm27g4oo003cazv59lza5w30"},{"name":"Pattern","_id":"clm27g4oq003gazv5eup86voh"},{"name":"Bracket","_id":"clm27g4ou003razv52bay1qdy"},{"name":"HTML5","_id":"clm27g4ov003wazv52k8pc4xs"},{"name":"CoffeeScript","_id":"clm27g4ox0044azv5hmm6b021"},{"name":"Spring","parent":"clm27g4o0001lazv5eidp5hg2","_id":"clm27g4oz004aazv51abo5gj5"},{"name":"AngularJs","_id":"clm27g4p0004eazv58pn91ham"},{"name":"JS","parent":"clm27g4oe002mazv581bie1xy","_id":"clm27g4p1004iazv5822j678q"},{"name":"sublime text","_id":"clm27g4p2004mazv53gin6rej"},{"name":"javascript","_id":"clm27g4p4004razv5flxzcjq9"},{"name":"Test","parent":"clm27g4og002qazv53scnfvjr","_id":"clm27g4p6004yazv5fiwg1d3i"},{"name":"iTerm2","_id":"clm27g4pa005cazv5awligdrf"},{"name":"Tools","parent":"clm27g4oj002xazv534ez9cch","_id":"clm27g4pa005dazv5exz70ucf"},{"name":"IE","parent":"clm27g4ok0032azv5h4tiboiv","_id":"clm27g4pb005iazv5bn4e5rdr"},{"name":"LiveReload","parent":"clm27g4om0036azv5b45jaxxr","_id":"clm27g4pb005lazv57h2k13aj"},{"name":"CSS","parent":"clm27g4on0039azv589phfonx","_id":"clm27g4pc005oazv5hy893bnb"},{"name":"IE","parent":"clm27g4oo003cazv59lza5w30","_id":"clm27g4pd005uazv5erlo4r4i"},{"name":"html","_id":"clm27g4pd005wazv5ewll06ns"},{"name":"Tools","_id":"clm27g4pd005zazv5egkte63t"},{"name":"Ruby","_id":"clm27g4pd0060azv5awo7asu6"},{"name":"ruby","_id":"clm27g4pe0062azv5hn3wdzbd"},{"name":"Tools","parent":"clm27g4ou003razv52bay1qdy","_id":"clm27g4pe0066azv5afrk0zv1"},{"name":"Javascript","parent":"clm27g4p0004eazv58pn91ham","_id":"clm27g4ph006sazv59a0mdoix"},{"name":"git","_id":"clm27g4pi0070azv54z9s5rqv"},{"name":"Nginx","_id":"clm27g4pi0073azv5cy51a9nw"},{"name":"tools","parent":"clm27g4p2004mazv53gin6rej","_id":"clm27g4pi0074azv5g7hb5je6"},{"name":"算法","_id":"clm27g4pj007bazv55oe57zsm"},{"name":"资源","_id":"clm27g4pm007gazv54hq56t5j"},{"name":"JavaScript","_id":"clm27g4pm007hazv5hxlkbkb0"},{"name":"云计算","_id":"clm27g4pm007kazv5hh60gahd"},{"name":"AOP","parent":"clm27g4oz004aazv51abo5gj5","_id":"clm27g4pn007pazv5h3kb50ly"},{"name":"tools","parent":"clm27g4pa005cazv5awligdrf","_id":"clm27g4pn007razv5582n20ae"},{"name":"tools","parent":"clm27g4pb005iazv5bn4e5rdr","_id":"clm27g4pp0081azv59u641eih"},{"name":"Tools","parent":"clm27g4pb005lazv57h2k13aj","_id":"clm27g4pq008aazv5eq57cjkh"},{"name":"html5","parent":"clm27g4pd005wazv5ewll06ns","_id":"clm27g4ps008vazv5dbgferwr"},{"name":"JavaScript","parent":"clm27g4pd005zazv5egkte63t","_id":"clm27g4pt008yazv579dweqxw"},{"name":"Mac","parent":"clm27g4pd0060azv5awo7asu6","_id":"clm27g4pt0095azv51p4dfq5u"},{"name":"other","parent":"clm27g4pi0070azv54z9s5rqv","_id":"clm27g4pu0098azv5fcd763aj"},{"name":"DevOps","parent":"clm27g4pi0073azv5cy51a9nw","_id":"clm27g4pu009bazv5bf994eqd"},{"name":"数据结构","parent":"clm27g4pj007bazv55oe57zsm","_id":"clm27g4pu009eazv57uz14au2"},{"name":"AWS","parent":"clm27g4pm007kazv5hh60gahd","_id":"clm27g4pw009oazv5eg2u4c5v"},{"name":"TypeScript","parent":"clm27g4pt008yazv579dweqxw","_id":"clm27g4pw009uazv51as64y26"},{"name":"Tools","parent":"clm27g4pt0095azv51p4dfq5u","_id":"clm27g4px009xazv52yz0cg7w"},{"name":"tools","parent":"clm27g4pu009bazv5bf994eqd","_id":"clm27g4px00a0azv54r0fa9hu"},{"name":"VSCode","parent":"clm27g4pw009uazv51as64y26","_id":"clm27g4py00a4azv59swt5g2b"},{"name":"Mobile","_id":"clm27tcex000jc2v5770i3j7g"},{"name":"Backend","_id":"clm28jkse001yc2v57mrv2hc1"},{"name":"Frontend","_id":"clm28ogby002mc2v5aeptb2dj"},{"name":"Test","_id":"clm28tly2002zc2v5cebo31dw"},{"name":"Other","_id":"clm28uzqe0034c2v5agnecy3r"},{"name":"Others","_id":"clm28vgy00038c2v54xd0ed3z"},{"name":"Design Pattern","_id":"clm2908ye004kc2v5d1x48tvz"},{"name":"JavaScript","parent":"clm27g4p0004eazv58pn91ham","_id":"clm29cxaa006jc2v5f6870myo"},{"name":"Resources","_id":"clm29k9s0007tc2v5bb266q2q"},{"name":"Cloud Compute","_id":"clm29lsyn0081c2v55cpd5b9c"}],"Data":[],"Page":[{"title":"Tags","date":"2020-09-14T07:30:30.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2020-09-14 15:30:30\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2023-09-02T10:08:56.960Z","path":"tags/index.html","comments":1,"_id":"clm1vql450000s3v550gqhcji","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","date":"2014-09-14T07:30:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2014-09-14 15:30:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-09-02T10:08:20.588Z","path":"categories/index.html","comments":1,"_id":"clm1vql4a0001s3v53u61hlfv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Building blocks of Android Application","date":"2014-11-13T07:02:00.000Z","_content":"\nThere are four builidng blocks for Android Application:   \n   \n- **`Activity`**\n- **`Intent Receiver`**\n- **`Service`**\n- **`Content Provider`**\n\nBut Not every application needs have all them.   \n\n`AndroidManifest.xml` is XML file, it contains some information that where you declare the components of your application and what their capabilities and requirements are. \n\n<!--more-->  \n\n### Activity\nActivities are the most common of the four Android building blocks. An activity is usually a single screen in your application. Each activity is implemented as single class that extends the Activity base class.    \n  \nWhen a new screen is opened, the previous screen is paused and put onto a history stack. The user can navigate backward through previously opened screens in the history.\n\n### Intent\nAndroid uses a special class called `Intent` to move from screen to screen. Intent describe what an application wants done. The two most important parts of the intent data structure are the action and the data to act upon.    \n  \nTypical values for actioin are `MAIN` (the front door of the application), VIEW, PICK, EDIT, etc. The data is expressed as a Uniform Resource Indicator (URI).    \n>new Intent(android.content.Intent.VIEW_ACTION, ContentURI.create(\"http://anddev.org\");\n\n### Intent Filter\nNavigating from screen to screen is accomplished by resolving intents. An activity calls `startActivity(myIntent)` to navigation. The system then looks at the intent filters for all installed applications and picks activity whose intent filters best matches `myIntent`. And the new activity is informed by the intent which cause it to be launched.   \n\n### Intent Receiver\nYou can use an IntentReceiver when you want code in your application to execute in reaction to an external event, for example, when the phone rings, or when the data network is available, or when it's midnight. Intent receivers do not display UI.   \n    \nIntent receivers can be registered in the `AndroidManifest.xml` file, and also you can register it in your code with `Context.registerReceiver()`.    \n\nApplications can also send their own intent broadcasts to others with `Context.broadcastIntent()`.   \n\n### Service\nA `Service` is long-lived and runs without a UI, such as media player.   \n\nYou can start a service with `Context.startService()` to run in the background. And you can connect to a service with the `Context.bindService()` method. When you connected to a service. you can communicate with it through an interface exposed by the service. For the music service you can pause and rewind it etc.   \n\n### ContentProvider\nApplications can store their data in files, a SQLite database, preferences or any other mechanism that makes sense.   \n\nA content provider is useful if you want your application's data to be shared with other applications.    \n\nA content provider is a class that implements a standard set of methods to let other applications store and retrieve the type of data that is handled by that content provider.","source":"_posts/2014-11-13-building-blocks-of-android-application.md","raw":"---\n\ntitle: \"Building blocks of Android Application\"\ndate: 2014-11-13 15:02\ncategories: Mobile\ntags: [Android]\n---\n\nThere are four builidng blocks for Android Application:   \n   \n- **`Activity`**\n- **`Intent Receiver`**\n- **`Service`**\n- **`Content Provider`**\n\nBut Not every application needs have all them.   \n\n`AndroidManifest.xml` is XML file, it contains some information that where you declare the components of your application and what their capabilities and requirements are. \n\n<!--more-->  \n\n### Activity\nActivities are the most common of the four Android building blocks. An activity is usually a single screen in your application. Each activity is implemented as single class that extends the Activity base class.    \n  \nWhen a new screen is opened, the previous screen is paused and put onto a history stack. The user can navigate backward through previously opened screens in the history.\n\n### Intent\nAndroid uses a special class called `Intent` to move from screen to screen. Intent describe what an application wants done. The two most important parts of the intent data structure are the action and the data to act upon.    \n  \nTypical values for actioin are `MAIN` (the front door of the application), VIEW, PICK, EDIT, etc. The data is expressed as a Uniform Resource Indicator (URI).    \n>new Intent(android.content.Intent.VIEW_ACTION, ContentURI.create(\"http://anddev.org\");\n\n### Intent Filter\nNavigating from screen to screen is accomplished by resolving intents. An activity calls `startActivity(myIntent)` to navigation. The system then looks at the intent filters for all installed applications and picks activity whose intent filters best matches `myIntent`. And the new activity is informed by the intent which cause it to be launched.   \n\n### Intent Receiver\nYou can use an IntentReceiver when you want code in your application to execute in reaction to an external event, for example, when the phone rings, or when the data network is available, or when it's midnight. Intent receivers do not display UI.   \n    \nIntent receivers can be registered in the `AndroidManifest.xml` file, and also you can register it in your code with `Context.registerReceiver()`.    \n\nApplications can also send their own intent broadcasts to others with `Context.broadcastIntent()`.   \n\n### Service\nA `Service` is long-lived and runs without a UI, such as media player.   \n\nYou can start a service with `Context.startService()` to run in the background. And you can connect to a service with the `Context.bindService()` method. When you connected to a service. you can communicate with it through an interface exposed by the service. For the music service you can pause and rewind it etc.   \n\n### ContentProvider\nApplications can store their data in files, a SQLite database, preferences or any other mechanism that makes sense.   \n\nA content provider is useful if you want your application's data to be shared with other applications.    \n\nA content provider is a class that implements a standard set of methods to let other applications store and retrieve the type of data that is handled by that content provider.","slug":"2014-11-13-building-blocks-of-android-application","published":1,"updated":"2023-09-02T18:00:36.169Z","_id":"clm27g4nu001dazv5cugu3d1g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>There are four builidng blocks for Android Application:   </p>\n<ul>\n<li><strong><code>Activity</code></strong></li>\n<li><strong><code>Intent Receiver</code></strong></li>\n<li><strong><code>Service</code></strong></li>\n<li><strong><code>Content Provider</code></strong></li>\n</ul>\n<p>But Not every application needs have all them.   </p>\n<p><code>AndroidManifest.xml</code> is XML file, it contains some information that where you declare the components of your application and what their capabilities and requirements are. </p>\n<span id=\"more\"></span>  \n\n<h3 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h3><p>Activities are the most common of the four Android building blocks. An activity is usually a single screen in your application. Each activity is implemented as single class that extends the Activity base class.    </p>\n<p>When a new screen is opened, the previous screen is paused and put onto a history stack. The user can navigate backward through previously opened screens in the history.</p>\n<h3 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h3><p>Android uses a special class called <code>Intent</code> to move from screen to screen. Intent describe what an application wants done. The two most important parts of the intent data structure are the action and the data to act upon.    </p>\n<p>Typical values for actioin are <code>MAIN</code> (the front door of the application), VIEW, PICK, EDIT, etc. The data is expressed as a Uniform Resource Indicator (URI).    </p>\n<blockquote>\n<p>new Intent(android.content.Intent.VIEW_ACTION, ContentURI.create(“<a href=\"http://anddev.org/\">http://anddev.org</a>“);</p>\n</blockquote>\n<h3 id=\"Intent-Filter\"><a href=\"#Intent-Filter\" class=\"headerlink\" title=\"Intent Filter\"></a>Intent Filter</h3><p>Navigating from screen to screen is accomplished by resolving intents. An activity calls <code>startActivity(myIntent)</code> to navigation. The system then looks at the intent filters for all installed applications and picks activity whose intent filters best matches <code>myIntent</code>. And the new activity is informed by the intent which cause it to be launched.   </p>\n<h3 id=\"Intent-Receiver\"><a href=\"#Intent-Receiver\" class=\"headerlink\" title=\"Intent Receiver\"></a>Intent Receiver</h3><p>You can use an IntentReceiver when you want code in your application to execute in reaction to an external event, for example, when the phone rings, or when the data network is available, or when it’s midnight. Intent receivers do not display UI.   </p>\n<p>Intent receivers can be registered in the <code>AndroidManifest.xml</code> file, and also you can register it in your code with <code>Context.registerReceiver()</code>.    </p>\n<p>Applications can also send their own intent broadcasts to others with <code>Context.broadcastIntent()</code>.   </p>\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><p>A <code>Service</code> is long-lived and runs without a UI, such as media player.   </p>\n<p>You can start a service with <code>Context.startService()</code> to run in the background. And you can connect to a service with the <code>Context.bindService()</code> method. When you connected to a service. you can communicate with it through an interface exposed by the service. For the music service you can pause and rewind it etc.   </p>\n<h3 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h3><p>Applications can store their data in files, a SQLite database, preferences or any other mechanism that makes sense.   </p>\n<p>A content provider is useful if you want your application’s data to be shared with other applications.    </p>\n<p>A content provider is a class that implements a standard set of methods to let other applications store and retrieve the type of data that is handled by that content provider.</p>\n","site":{"data":{}},"excerpt":"<p>There are four builidng blocks for Android Application:   </p>\n<ul>\n<li><strong><code>Activity</code></strong></li>\n<li><strong><code>Intent Receiver</code></strong></li>\n<li><strong><code>Service</code></strong></li>\n<li><strong><code>Content Provider</code></strong></li>\n</ul>\n<p>But Not every application needs have all them.   </p>\n<p><code>AndroidManifest.xml</code> is XML file, it contains some information that where you declare the components of your application and what their capabilities and requirements are. </p>","more":"<h3 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h3><p>Activities are the most common of the four Android building blocks. An activity is usually a single screen in your application. Each activity is implemented as single class that extends the Activity base class.    </p>\n<p>When a new screen is opened, the previous screen is paused and put onto a history stack. The user can navigate backward through previously opened screens in the history.</p>\n<h3 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h3><p>Android uses a special class called <code>Intent</code> to move from screen to screen. Intent describe what an application wants done. The two most important parts of the intent data structure are the action and the data to act upon.    </p>\n<p>Typical values for actioin are <code>MAIN</code> (the front door of the application), VIEW, PICK, EDIT, etc. The data is expressed as a Uniform Resource Indicator (URI).    </p>\n<blockquote>\n<p>new Intent(android.content.Intent.VIEW_ACTION, ContentURI.create(“<a href=\"http://anddev.org/\">http://anddev.org</a>“);</p>\n</blockquote>\n<h3 id=\"Intent-Filter\"><a href=\"#Intent-Filter\" class=\"headerlink\" title=\"Intent Filter\"></a>Intent Filter</h3><p>Navigating from screen to screen is accomplished by resolving intents. An activity calls <code>startActivity(myIntent)</code> to navigation. The system then looks at the intent filters for all installed applications and picks activity whose intent filters best matches <code>myIntent</code>. And the new activity is informed by the intent which cause it to be launched.   </p>\n<h3 id=\"Intent-Receiver\"><a href=\"#Intent-Receiver\" class=\"headerlink\" title=\"Intent Receiver\"></a>Intent Receiver</h3><p>You can use an IntentReceiver when you want code in your application to execute in reaction to an external event, for example, when the phone rings, or when the data network is available, or when it’s midnight. Intent receivers do not display UI.   </p>\n<p>Intent receivers can be registered in the <code>AndroidManifest.xml</code> file, and also you can register it in your code with <code>Context.registerReceiver()</code>.    </p>\n<p>Applications can also send their own intent broadcasts to others with <code>Context.broadcastIntent()</code>.   </p>\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><p>A <code>Service</code> is long-lived and runs without a UI, such as media player.   </p>\n<p>You can start a service with <code>Context.startService()</code> to run in the background. And you can connect to a service with the <code>Context.bindService()</code> method. When you connected to a service. you can communicate with it through an interface exposed by the service. For the music service you can pause and rewind it etc.   </p>\n<h3 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h3><p>Applications can store their data in files, a SQLite database, preferences or any other mechanism that makes sense.   </p>\n<p>A content provider is useful if you want your application’s data to be shared with other applications.    </p>\n<p>A content provider is a class that implements a standard set of methods to let other applications store and retrieve the type of data that is handled by that content provider.</p>"},{"title":"The lifecycle of Android Activity","date":"2014-11-17T07:02:00.000Z","_content":"\n![lifecycle of activity](/assets/images/legacy/android-lifecycle.png)","source":"_posts/2014-11-17-the-lifecycle-of-android-activity.md","raw":"---\n\ntitle: \"The lifecycle of Android Activity\"\ndate: 2014-11-17 15:02\ncategories: Mobile\ntags: [Android]\n---\n\n![lifecycle of activity](/assets/images/legacy/android-lifecycle.png)","slug":"2014-11-17-the-lifecycle-of-android-activity","published":1,"updated":"2023-09-02T17:27:29.722Z","_id":"clm27g4ny001fazv5csq73t34","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/assets/images/legacy/android-lifecycle.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/android-lifecycle.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"lifecycle of activity\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/assets/images/legacy/android-lifecycle.png\" alt=\"lifecycle of activity\"></p>\n"},{"title":"Guava -- Optional","date":"2014-11-21T12:14:00.000Z","_content":"\n`Optional<T>` is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is \"present\"), or it may contain nothing (in which case we say the reference is \"absent\"). It is never said to \"contain null.\"\n\n<!--more-->\n### Usage\n\n`Optional.of(T)`      \nMake an Optional containing the given non-null value, or fail fast on null.    \n\n`Optional.absent()`   \nReturn an absent Optional of some type.\n\n`Optional.fromNullable(T)`   \nTurn the given possibly-null reference into an Optional, treating non-null as present and null as absent.   \n\n`boolean isPresent()`      \nReturns true if this Optional contains a non-null instance.\n\n`T get()`   \nReturns the contained T instance, which must be present; otherwise, throws an IllegalStateException.\n\n`T or()`   \nReturns the present value in this Optional, or if there is none, returns the specified default.\n\n`T orNull()`   \nReturns the present value in this Optional, or if there is none, returns null. The inverse operation of fromNullable.\n\n\n### Example:\n\n``` java   \nOptional<Integer> numberOptional = Optional.of(100);\nnumberOptional.isPresent(); //return true\nnumberOptional.get(); //return 100\n\nnumberOptional = Optional.absent();\nnumberOptional.isPresent(); // return false\nnumberOptional.or(0); //return 0;\nnumberOptional.orNull(); //return null;\n\nnumberOptional = Optional.fromNullable(1);\nnumberOptional.get(); //return 1;\n\nnumberOptional = Optional.fromNullable(null);\nnumberOptional.isPresent(); //return false;\nnumberOptional.orNull(); //return null;\n\n```  \n\n","source":"_posts/2014-11-21-guava-optional.md","raw":"---\n\ntitle: \"Guava -- Optional\"\ndate: 2014-11-21 20:14\ncategories: Backend\ntags: [Java, Guava]\n\n---\n\n`Optional<T>` is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is \"present\"), or it may contain nothing (in which case we say the reference is \"absent\"). It is never said to \"contain null.\"\n\n<!--more-->\n### Usage\n\n`Optional.of(T)`      \nMake an Optional containing the given non-null value, or fail fast on null.    \n\n`Optional.absent()`   \nReturn an absent Optional of some type.\n\n`Optional.fromNullable(T)`   \nTurn the given possibly-null reference into an Optional, treating non-null as present and null as absent.   \n\n`boolean isPresent()`      \nReturns true if this Optional contains a non-null instance.\n\n`T get()`   \nReturns the contained T instance, which must be present; otherwise, throws an IllegalStateException.\n\n`T or()`   \nReturns the present value in this Optional, or if there is none, returns the specified default.\n\n`T orNull()`   \nReturns the present value in this Optional, or if there is none, returns null. The inverse operation of fromNullable.\n\n\n### Example:\n\n``` java   \nOptional<Integer> numberOptional = Optional.of(100);\nnumberOptional.isPresent(); //return true\nnumberOptional.get(); //return 100\n\nnumberOptional = Optional.absent();\nnumberOptional.isPresent(); // return false\nnumberOptional.or(0); //return 0;\nnumberOptional.orNull(); //return null;\n\nnumberOptional = Optional.fromNullable(1);\nnumberOptional.get(); //return 1;\n\nnumberOptional = Optional.fromNullable(null);\nnumberOptional.isPresent(); //return false;\nnumberOptional.orNull(); //return null;\n\n```  \n\n","slug":"2014-11-21-guava-optional","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4nz001hazv5a5rq2c53","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>Optional&lt;T&gt;</code> is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is “present”), or it may contain nothing (in which case we say the reference is “absent”). It is never said to “contain null.”</p>\n<span id=\"more\"></span>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><code>Optional.of(T)</code><br>Make an Optional containing the given non-null value, or fail fast on null.    </p>\n<p><code>Optional.absent()</code><br>Return an absent Optional of some type.</p>\n<p><code>Optional.fromNullable(T)</code><br>Turn the given possibly-null reference into an Optional, treating non-null as present and null as absent.   </p>\n<p><code>boolean isPresent()</code><br>Returns true if this Optional contains a non-null instance.</p>\n<p><code>T get()</code><br>Returns the contained T instance, which must be present; otherwise, throws an IllegalStateException.</p>\n<p><code>T or()</code><br>Returns the present value in this Optional, or if there is none, returns the specified default.</p>\n<p><code>T orNull()</code><br>Returns the present value in this Optional, or if there is none, returns null. The inverse operation of fromNullable.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><pre><code class=\"java\">Optional&lt;Integer&gt; numberOptional = Optional.of(100);\nnumberOptional.isPresent(); //return true\nnumberOptional.get(); //return 100\n\nnumberOptional = Optional.absent();\nnumberOptional.isPresent(); // return false\nnumberOptional.or(0); //return 0;\nnumberOptional.orNull(); //return null;\n\nnumberOptional = Optional.fromNullable(1);\nnumberOptional.get(); //return 1;\n\nnumberOptional = Optional.fromNullable(null);\nnumberOptional.isPresent(); //return false;\nnumberOptional.orNull(); //return null;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p><code>Optional&lt;T&gt;</code> is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is “present”), or it may contain nothing (in which case we say the reference is “absent”). It is never said to “contain null.”</p>","more":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><code>Optional.of(T)</code><br>Make an Optional containing the given non-null value, or fail fast on null.    </p>\n<p><code>Optional.absent()</code><br>Return an absent Optional of some type.</p>\n<p><code>Optional.fromNullable(T)</code><br>Turn the given possibly-null reference into an Optional, treating non-null as present and null as absent.   </p>\n<p><code>boolean isPresent()</code><br>Returns true if this Optional contains a non-null instance.</p>\n<p><code>T get()</code><br>Returns the contained T instance, which must be present; otherwise, throws an IllegalStateException.</p>\n<p><code>T or()</code><br>Returns the present value in this Optional, or if there is none, returns the specified default.</p>\n<p><code>T orNull()</code><br>Returns the present value in this Optional, or if there is none, returns null. The inverse operation of fromNullable.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><pre><code class=\"java\">Optional&lt;Integer&gt; numberOptional = Optional.of(100);\nnumberOptional.isPresent(); //return true\nnumberOptional.get(); //return 100\n\nnumberOptional = Optional.absent();\nnumberOptional.isPresent(); // return false\nnumberOptional.or(0); //return 0;\nnumberOptional.orNull(); //return null;\n\nnumberOptional = Optional.fromNullable(1);\nnumberOptional.get(); //return 1;\n\nnumberOptional = Optional.fromNullable(null);\nnumberOptional.isPresent(); //return false;\nnumberOptional.orNull(); //return null;\n</code></pre>"},{"title":"Guava -- Preconditions","date":"2014-11-26T14:36:07.000Z","comments":1,"_content":"\nGuava provides a number of precondition checking utilities. It's `Preconditions` class. You can use it into your project.\n\n### Usage\n`checkArgument(boolean)`   \nChecks that the boolean is true. Use for validating arguments to methods.   \n\n`checkNotNull(T)`   \nChecks that the value is not null. Returns the value directly, so you can use checkNotNull(value) inline. \n<!--more-->  \n\n`checkElementIndex(int index, int size)`   \nChecks that index is a valid element index into a list, string, or array with the specified size. An element index may range from 0 inclusive to size exclusive. You don't pass the list, string, or array directly; you just pass its size.\nReturns index.   \n\n`checkPositionIndex(int index, int size)`   \nChecks that index is a valid position index into a list, string, or array with the specified size. A position index may range from 0 inclusive to size inclusive. You don't pass the list, string, or array directly; you just pass its size.\nReturns index.   \n\n### Example\n\n``` java \n\nint i = 3;\nPreconditions.checkArgument(i > 5, \"Argument %s is not larger than 5\", i);\n// will throw IllegalArgumentException with \"Argument 3 is not larger than 5\"\n\nPreconditions.checkNotNull(i); // return 3;\nPreconditions.checkNotNull(null); // throw NullPointerException;\n\nPreconditions.checkElementIndex(i,4); // return 3\nPreconditions.checkElementIndex(i,3); // throw IndexOutOfBoundsException\n\nPreconditions.checkPositionIndex(i,3); // return 3\nPreconditions.checkPositionIndex(i,2); // throw IndexOutOfBoundsException\n\n```\n\n","source":"_posts/2014-11-26-guava-preconditions.markdown","raw":"---\n\ntitle: \"Guava -- Preconditions\"\ndate: 2014-11-26 22:36:07 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Guava]\n---\n\nGuava provides a number of precondition checking utilities. It's `Preconditions` class. You can use it into your project.\n\n### Usage\n`checkArgument(boolean)`   \nChecks that the boolean is true. Use for validating arguments to methods.   \n\n`checkNotNull(T)`   \nChecks that the value is not null. Returns the value directly, so you can use checkNotNull(value) inline. \n<!--more-->  \n\n`checkElementIndex(int index, int size)`   \nChecks that index is a valid element index into a list, string, or array with the specified size. An element index may range from 0 inclusive to size exclusive. You don't pass the list, string, or array directly; you just pass its size.\nReturns index.   \n\n`checkPositionIndex(int index, int size)`   \nChecks that index is a valid position index into a list, string, or array with the specified size. A position index may range from 0 inclusive to size inclusive. You don't pass the list, string, or array directly; you just pass its size.\nReturns index.   \n\n### Example\n\n``` java \n\nint i = 3;\nPreconditions.checkArgument(i > 5, \"Argument %s is not larger than 5\", i);\n// will throw IllegalArgumentException with \"Argument 3 is not larger than 5\"\n\nPreconditions.checkNotNull(i); // return 3;\nPreconditions.checkNotNull(null); // throw NullPointerException;\n\nPreconditions.checkElementIndex(i,4); // return 3\nPreconditions.checkElementIndex(i,3); // throw IndexOutOfBoundsException\n\nPreconditions.checkPositionIndex(i,3); // return 3\nPreconditions.checkPositionIndex(i,2); // throw IndexOutOfBoundsException\n\n```\n\n","slug":"2014-11-26-guava-preconditions","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o0001jazv5d9qkdvlz","layout":"post","photos":[],"link":"","content":"<p>Guava provides a number of precondition checking utilities. It’s <code>Preconditions</code> class. You can use it into your project.</p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><code>checkArgument(boolean)</code><br>Checks that the boolean is true. Use for validating arguments to methods.   </p>\n<p><code>checkNotNull(T)</code><br>Checks that the value is not null. Returns the value directly, so you can use checkNotNull(value) inline. </p>\n<span id=\"more\"></span>  \n\n<p><code>checkElementIndex(int index, int size)</code><br>Checks that index is a valid element index into a list, string, or array with the specified size. An element index may range from 0 inclusive to size exclusive. You don’t pass the list, string, or array directly; you just pass its size.<br>Returns index.   </p>\n<p><code>checkPositionIndex(int index, int size)</code><br>Checks that index is a valid position index into a list, string, or array with the specified size. A position index may range from 0 inclusive to size inclusive. You don’t pass the list, string, or array directly; you just pass its size.<br>Returns index.   </p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">Preconditions.checkArgument(i &gt; <span class=\"number\">5</span>, <span class=\"string\">&quot;Argument %s is not larger than 5&quot;</span>, i);</span><br><span class=\"line\"><span class=\"comment\">// will throw IllegalArgumentException with &quot;Argument 3 is not larger than 5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Preconditions.checkNotNull(i); <span class=\"comment\">// return 3;</span></span><br><span class=\"line\">Preconditions.checkNotNull(<span class=\"literal\">null</span>); <span class=\"comment\">// throw NullPointerException;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Preconditions.checkElementIndex(i,<span class=\"number\">4</span>); <span class=\"comment\">// return 3</span></span><br><span class=\"line\">Preconditions.checkElementIndex(i,<span class=\"number\">3</span>); <span class=\"comment\">// throw IndexOutOfBoundsException</span></span><br><span class=\"line\"></span><br><span class=\"line\">Preconditions.checkPositionIndex(i,<span class=\"number\">3</span>); <span class=\"comment\">// return 3</span></span><br><span class=\"line\">Preconditions.checkPositionIndex(i,<span class=\"number\">2</span>); <span class=\"comment\">// throw IndexOutOfBoundsException</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Guava provides a number of precondition checking utilities. It’s <code>Preconditions</code> class. You can use it into your project.</p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><code>checkArgument(boolean)</code><br>Checks that the boolean is true. Use for validating arguments to methods.   </p>\n<p><code>checkNotNull(T)</code><br>Checks that the value is not null. Returns the value directly, so you can use checkNotNull(value) inline. </p>","more":"<p><code>checkElementIndex(int index, int size)</code><br>Checks that index is a valid element index into a list, string, or array with the specified size. An element index may range from 0 inclusive to size exclusive. You don’t pass the list, string, or array directly; you just pass its size.<br>Returns index.   </p>\n<p><code>checkPositionIndex(int index, int size)</code><br>Checks that index is a valid position index into a list, string, or array with the specified size. A position index may range from 0 inclusive to size inclusive. You don’t pass the list, string, or array directly; you just pass its size.<br>Returns index.   </p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">Preconditions.checkArgument(i &gt; <span class=\"number\">5</span>, <span class=\"string\">&quot;Argument %s is not larger than 5&quot;</span>, i);</span><br><span class=\"line\"><span class=\"comment\">// will throw IllegalArgumentException with &quot;Argument 3 is not larger than 5&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Preconditions.checkNotNull(i); <span class=\"comment\">// return 3;</span></span><br><span class=\"line\">Preconditions.checkNotNull(<span class=\"literal\">null</span>); <span class=\"comment\">// throw NullPointerException;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Preconditions.checkElementIndex(i,<span class=\"number\">4</span>); <span class=\"comment\">// return 3</span></span><br><span class=\"line\">Preconditions.checkElementIndex(i,<span class=\"number\">3</span>); <span class=\"comment\">// throw IndexOutOfBoundsException</span></span><br><span class=\"line\"></span><br><span class=\"line\">Preconditions.checkPositionIndex(i,<span class=\"number\">3</span>); <span class=\"comment\">// return 3</span></span><br><span class=\"line\">Preconditions.checkPositionIndex(i,<span class=\"number\">2</span>); <span class=\"comment\">// throw IndexOutOfBoundsException</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Guava -- Common Object Methods","date":"2014-11-27T12:41:45.000Z","comments":1,"_content":"\n### Usage\n`Objects.equal(Object, Object)`   \nInvoking this method then it will avoid the risking of NullPointerException when we need to compare two object whether they equal.\n\n``` java\nObjects.equal(\"a\", \"a\"); // return true;\nObjects.equal(null, \"a\"); // return false;\nObjects.equal(null, null); // return true;\n```\n\n<!--more-->\n`Objects.hashCode(Object, ....)`   \nGenerating hash code with multiple object will be simple. And it also can hash all fields of an Object to get more sensible code value.   \n\n``` java\n// generate hash code with multi object\nObjects.hashCode(this.intField, this.charField, this.stringField, this.dateField); \n```\n\n`ComparisonChain`   \nComparisonChain is a fluent idiom and much more readable. less prone to accidental typos, and smart enough not to do more work than it must.   \nIt only performs comparisons until it finds a non-zero result, after which it ignores further input.\n\n``` java\nObjectsTraining objectsTraining = new ObjectsTraining();\nint result = ComparisonChain.start()\n\t\t\t   .compare(this.intField, objectsTraining.intField)\n             .compare(this.stringField, objectsTraining.stringField)\n             .compare(this.charField, objectsTraining.charField)\n             .compare(this.dateField, objectsTraining.dateField)\n             .result();\n```\n\n","source":"_posts/2014-11-27-guava-common-object-method.markdown","raw":"---\n\ntitle: \"Guava -- Common Object Methods\"\ndate: 2014-11-27 20:41:45 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Guava]\n---\n\n### Usage\n`Objects.equal(Object, Object)`   \nInvoking this method then it will avoid the risking of NullPointerException when we need to compare two object whether they equal.\n\n``` java\nObjects.equal(\"a\", \"a\"); // return true;\nObjects.equal(null, \"a\"); // return false;\nObjects.equal(null, null); // return true;\n```\n\n<!--more-->\n`Objects.hashCode(Object, ....)`   \nGenerating hash code with multiple object will be simple. And it also can hash all fields of an Object to get more sensible code value.   \n\n``` java\n// generate hash code with multi object\nObjects.hashCode(this.intField, this.charField, this.stringField, this.dateField); \n```\n\n`ComparisonChain`   \nComparisonChain is a fluent idiom and much more readable. less prone to accidental typos, and smart enough not to do more work than it must.   \nIt only performs comparisons until it finds a non-zero result, after which it ignores further input.\n\n``` java\nObjectsTraining objectsTraining = new ObjectsTraining();\nint result = ComparisonChain.start()\n\t\t\t   .compare(this.intField, objectsTraining.intField)\n             .compare(this.stringField, objectsTraining.stringField)\n             .compare(this.charField, objectsTraining.charField)\n             .compare(this.dateField, objectsTraining.dateField)\n             .result();\n```\n\n","slug":"2014-11-27-guava-common-object-method","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o1001mazv51qhj31tk","layout":"post","photos":[],"link":"","content":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><code>Objects.equal(Object, Object)</code><br>Invoking this method then it will avoid the risking of NullPointerException when we need to compare two object whether they equal.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Objects.equal(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// return true;</span></span><br><span class=\"line\">Objects.equal(<span class=\"literal\">null</span>, <span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// return false;</span></span><br><span class=\"line\">Objects.equal(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>); <span class=\"comment\">// return true;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n<p><code>Objects.hashCode(Object, ....)</code><br>Generating hash code with multiple object will be simple. And it also can hash all fields of an Object to get more sensible code value.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// generate hash code with multi object</span></span><br><span class=\"line\">Objects.hashCode(<span class=\"built_in\">this</span>.intField, <span class=\"built_in\">this</span>.charField, <span class=\"built_in\">this</span>.stringField, <span class=\"built_in\">this</span>.dateField); </span><br></pre></td></tr></table></figure>\n\n<p><code>ComparisonChain</code><br>ComparisonChain is a fluent idiom and much more readable. less prone to accidental typos, and smart enough not to do more work than it must.<br>It only performs comparisons until it finds a non-zero result, after which it ignores further input.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ObjectsTraining</span> <span class=\"variable\">objectsTraining</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectsTraining</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> ComparisonChain.start()</span><br><span class=\"line\">\t\t\t   .compare(<span class=\"built_in\">this</span>.intField, objectsTraining.intField)</span><br><span class=\"line\">             .compare(<span class=\"built_in\">this</span>.stringField, objectsTraining.stringField)</span><br><span class=\"line\">             .compare(<span class=\"built_in\">this</span>.charField, objectsTraining.charField)</span><br><span class=\"line\">             .compare(<span class=\"built_in\">this</span>.dateField, objectsTraining.dateField)</span><br><span class=\"line\">             .result();</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p><code>Objects.equal(Object, Object)</code><br>Invoking this method then it will avoid the risking of NullPointerException when we need to compare two object whether they equal.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Objects.equal(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// return true;</span></span><br><span class=\"line\">Objects.equal(<span class=\"literal\">null</span>, <span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// return false;</span></span><br><span class=\"line\">Objects.equal(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>); <span class=\"comment\">// return true;</span></span><br></pre></td></tr></table></figure>","more":"<p><code>Objects.hashCode(Object, ....)</code><br>Generating hash code with multiple object will be simple. And it also can hash all fields of an Object to get more sensible code value.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// generate hash code with multi object</span></span><br><span class=\"line\">Objects.hashCode(<span class=\"built_in\">this</span>.intField, <span class=\"built_in\">this</span>.charField, <span class=\"built_in\">this</span>.stringField, <span class=\"built_in\">this</span>.dateField); </span><br></pre></td></tr></table></figure>\n\n<p><code>ComparisonChain</code><br>ComparisonChain is a fluent idiom and much more readable. less prone to accidental typos, and smart enough not to do more work than it must.<br>It only performs comparisons until it finds a non-zero result, after which it ignores further input.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ObjectsTraining</span> <span class=\"variable\">objectsTraining</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectsTraining</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> ComparisonChain.start()</span><br><span class=\"line\">\t\t\t   .compare(<span class=\"built_in\">this</span>.intField, objectsTraining.intField)</span><br><span class=\"line\">             .compare(<span class=\"built_in\">this</span>.stringField, objectsTraining.stringField)</span><br><span class=\"line\">             .compare(<span class=\"built_in\">this</span>.charField, objectsTraining.charField)</span><br><span class=\"line\">             .compare(<span class=\"built_in\">this</span>.dateField, objectsTraining.dateField)</span><br><span class=\"line\">             .result();</span><br></pre></td></tr></table></figure>"},{"title":"JSP - Custom Tag","date":"2014-12-01T13:30:41.000Z","comments":1,"_content":"Custom Tag is a user-defined JSP language element. When it is contained in JSP page and it will translate into a servlet, the custom tag is converted to opertions on an object called a tag handler. The web container then invokes those operations when the JSP page's servlet is executed.   \n\nIf we want to create a custom tag, what we need to do is simply extend `SimpleTagSupport` class and override the `doTag()` method, where you can place your code to generate content for the tag.   \n\nLet's getting started to create a custom tag now.   \nAs you can see below, consider we want to create two tag, one is user tag with name and isMale attribute, another is system tag with size attribute.\n\n``` jsp\n<custom:user name=\"user1\" isMale=\"true\"/>\n<custom:system size=\"1024\"/>\n```\n<!-- more -->\nSo firstly what we need to do is create two java classes that act as a tag handler for each other tag. and them must extends `SimpleTagSupport` class.   \n\n``` java UserTag.java\npackage com.jsp.custom.tag;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.SimpleTagSupport;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Date;\n\n/**\n * Created by yushi on 12/1/14.\n */\npublic class UserTag extends SimpleTagSupport {\n    private String name;\n    private Boolean isMale;\n    private Date birthday;\n\n    private StringWriter sw = new StringWriter();\n\n    public void doTag() throws JspException, IOException\n    {\n        JspWriter out = getJspContext().getOut();\n\n        // print name info with name attribute\n        out.println(name);\n\n        // print gender info via isMale attribute\n        out.println(isMale ? \"I'm male!\" : \"I'm female!\");\n\n        if (birthday != null) {\n            out.println(String.format(\"My birthday is %s\", birthday.toString()));\n        }\n\n        // print body text with body content\n        getJspBody().invoke(sw);\n        getJspContext().getOut().println(sw.toString());\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setIsMale(Boolean isMale) {\n        this.isMale = isMale;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n}\n``` \n\n``` java SystemTag.java\npackage com.jsp.custom.tag;\n\nimport javax.servlet.jsp.tagext.SimpleTagSupport;\nimport java.io.IOException;\n\n/**\n * Created by yushi on 12/2/14.\n */\npublic class SystemTag extends SimpleTagSupport {\n    private int size;\n\n    public void doTag() throws IOException {\n        getJspContext().getOut().println(String.valueOf(String.format(\"The system's size is: %s\", String.valueOf(size))));\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n}\n```\n\nAbove two class just override the `doTag()` method and take the current `JspContext` object using `getJspContext()` method, and then send message content to the current `JspWriter` object.   \n\nSecondly we need to create tld extention file. It's a tag library file. let us see the codes.    \n``` xml customTag.tld\n<taglib>\n    <tlib-version>1.0</tlib-version>\n    <jsp-version>2.0</jsp-version>\n    <short-name>custom tld</short-name>\n    <tag>\n        <name>user</name>\n        <tag-class>com.jsp.custom.tag.UserTag</tag-class>\n        <body-content>tagdependent</body-content>\n        <attribute>\n            <name>name</name>\n            <required>true</required>\n            <description>user name</description>\n            <!-- the type default is String if it is not specified -->\n            <!--<type>java.lang.String</type>-->\n        </attribute>\n        <attribute>\n            <name>isMale</name>\n            <required>false</required>\n            <description>the use is male or not male</description>\n            <type>java.lang.Boolean</type>\n        </attribute>\n        <attribute>\n            <name>birthday</name>\n            <type>java.util.Date</type>\n        </attribute>\n    </tag>\n    <tag>\n        <name>system</name>\n        <tag-class>com.jsp.custom.tag.SystemTag</tag-class>\n        <body-content>empty</body-content>\n        <attribute>\n            <name>size</name>\n            <required>false</required>\n            <description>the size of system</description>\n        </attribute>\n    </tag>\n</taglib>\n```\n\nFinally, we can use these both tags in our JSP page.\n\n``` jsp\n<%@ taglib prefix=\"custom\" uri=\"WEB-INF/customTag.tld\" %>\n<html>\n    <head>\n        <title>custom tag training</title>\n    </head>\n    <body>\n        <custom:user name=\"user1\" isMale=\"true\"/>\n        <custom:system size=\"1024\"/>\n    </body>\n</html>\n```\n\n","source":"_posts/2014-12-01-jsp-custom-tag.markdown","raw":"---\n\ntitle: \"JSP - Custom Tag\"\ndate: 2014-12-01 21:30:41 +0800\ncomments: true\ncategories: Backend\ntags: [Java, JSP]\n---\nCustom Tag is a user-defined JSP language element. When it is contained in JSP page and it will translate into a servlet, the custom tag is converted to opertions on an object called a tag handler. The web container then invokes those operations when the JSP page's servlet is executed.   \n\nIf we want to create a custom tag, what we need to do is simply extend `SimpleTagSupport` class and override the `doTag()` method, where you can place your code to generate content for the tag.   \n\nLet's getting started to create a custom tag now.   \nAs you can see below, consider we want to create two tag, one is user tag with name and isMale attribute, another is system tag with size attribute.\n\n``` jsp\n<custom:user name=\"user1\" isMale=\"true\"/>\n<custom:system size=\"1024\"/>\n```\n<!-- more -->\nSo firstly what we need to do is create two java classes that act as a tag handler for each other tag. and them must extends `SimpleTagSupport` class.   \n\n``` java UserTag.java\npackage com.jsp.custom.tag;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.tagext.SimpleTagSupport;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.Date;\n\n/**\n * Created by yushi on 12/1/14.\n */\npublic class UserTag extends SimpleTagSupport {\n    private String name;\n    private Boolean isMale;\n    private Date birthday;\n\n    private StringWriter sw = new StringWriter();\n\n    public void doTag() throws JspException, IOException\n    {\n        JspWriter out = getJspContext().getOut();\n\n        // print name info with name attribute\n        out.println(name);\n\n        // print gender info via isMale attribute\n        out.println(isMale ? \"I'm male!\" : \"I'm female!\");\n\n        if (birthday != null) {\n            out.println(String.format(\"My birthday is %s\", birthday.toString()));\n        }\n\n        // print body text with body content\n        getJspBody().invoke(sw);\n        getJspContext().getOut().println(sw.toString());\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setIsMale(Boolean isMale) {\n        this.isMale = isMale;\n    }\n\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n}\n``` \n\n``` java SystemTag.java\npackage com.jsp.custom.tag;\n\nimport javax.servlet.jsp.tagext.SimpleTagSupport;\nimport java.io.IOException;\n\n/**\n * Created by yushi on 12/2/14.\n */\npublic class SystemTag extends SimpleTagSupport {\n    private int size;\n\n    public void doTag() throws IOException {\n        getJspContext().getOut().println(String.valueOf(String.format(\"The system's size is: %s\", String.valueOf(size))));\n    }\n\n    public void setSize(int size) {\n        this.size = size;\n    }\n}\n```\n\nAbove two class just override the `doTag()` method and take the current `JspContext` object using `getJspContext()` method, and then send message content to the current `JspWriter` object.   \n\nSecondly we need to create tld extention file. It's a tag library file. let us see the codes.    \n``` xml customTag.tld\n<taglib>\n    <tlib-version>1.0</tlib-version>\n    <jsp-version>2.0</jsp-version>\n    <short-name>custom tld</short-name>\n    <tag>\n        <name>user</name>\n        <tag-class>com.jsp.custom.tag.UserTag</tag-class>\n        <body-content>tagdependent</body-content>\n        <attribute>\n            <name>name</name>\n            <required>true</required>\n            <description>user name</description>\n            <!-- the type default is String if it is not specified -->\n            <!--<type>java.lang.String</type>-->\n        </attribute>\n        <attribute>\n            <name>isMale</name>\n            <required>false</required>\n            <description>the use is male or not male</description>\n            <type>java.lang.Boolean</type>\n        </attribute>\n        <attribute>\n            <name>birthday</name>\n            <type>java.util.Date</type>\n        </attribute>\n    </tag>\n    <tag>\n        <name>system</name>\n        <tag-class>com.jsp.custom.tag.SystemTag</tag-class>\n        <body-content>empty</body-content>\n        <attribute>\n            <name>size</name>\n            <required>false</required>\n            <description>the size of system</description>\n        </attribute>\n    </tag>\n</taglib>\n```\n\nFinally, we can use these both tags in our JSP page.\n\n``` jsp\n<%@ taglib prefix=\"custom\" uri=\"WEB-INF/customTag.tld\" %>\n<html>\n    <head>\n        <title>custom tag training</title>\n    </head>\n    <body>\n        <custom:user name=\"user1\" isMale=\"true\"/>\n        <custom:system size=\"1024\"/>\n    </body>\n</html>\n```\n\n","slug":"2014-12-01-jsp-custom-tag","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o1001oazv59hcyfuy0","layout":"post","photos":[],"link":"","content":"<p>Custom Tag is a user-defined JSP language element. When it is contained in JSP page and it will translate into a servlet, the custom tag is converted to opertions on an object called a tag handler. The web container then invokes those operations when the JSP page’s servlet is executed.   </p>\n<p>If we want to create a custom tag, what we need to do is simply extend <code>SimpleTagSupport</code> class and override the <code>doTag()</code> method, where you can place your code to generate content for the tag.   </p>\n<p>Let’s getting started to create a custom tag now.<br>As you can see below, consider we want to create two tag, one is user tag with name and isMale attribute, another is system tag with size attribute.</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;custom:user name=<span class=\"string\">&quot;user1&quot;</span> isMale=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">&lt;custom:system size=<span class=\"string\">&quot;1024&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>So firstly what we need to do is create two java classes that act as a tag handler for each other tag. and them must extends <code>SimpleTagSupport</code> class.   </p>\n<figure class=\"highlight java\"><figcaption><span>UserTag.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jsp.custom.tag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.JspException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.JspWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 12/1/14.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserTag</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleTagSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isMale;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">StringWriter</span> <span class=\"variable\">sw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringWriter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doTag</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JspException, IOException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">JspWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> getJspContext().getOut();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// print name info with name attribute</span></span><br><span class=\"line\">        out.println(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// print gender info via isMale attribute</span></span><br><span class=\"line\">        out.println(isMale ? <span class=\"string\">&quot;I&#x27;m male!&quot;</span> : <span class=\"string\">&quot;I&#x27;m female!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (birthday != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            out.println(String.format(<span class=\"string\">&quot;My birthday is %s&quot;</span>, birthday.toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// print body text with body content</span></span><br><span class=\"line\">        getJspBody().invoke(sw);</span><br><span class=\"line\">        getJspContext().getOut().println(sw.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setIsMale</span><span class=\"params\">(Boolean isMale)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isMale = isMale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBirthday</span><span class=\"params\">(Date birthday)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>SystemTag.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jsp.custom.tag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 12/2/14.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SystemTag</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleTagSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doTag</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        getJspContext().getOut().println(String.valueOf(String.format(<span class=\"string\">&quot;The system&#x27;s size is: %s&quot;</span>, String.valueOf(size))));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSize</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Above two class just override the <code>doTag()</code> method and take the current <code>JspContext</code> object using <code>getJspContext()</code> method, and then send message content to the current <code>JspWriter</code> object.   </p>\n<p>Secondly we need to create tld extention file. It’s a tag library file. let us see the codes.    </p>\n<figure class=\"highlight xml\"><figcaption><span>customTag.tld</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">taglib</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tlib-version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">tlib-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jsp-version</span>&gt;</span>2.0<span class=\"tag\">&lt;/<span class=\"name\">jsp-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">short-name</span>&gt;</span>custom tld<span class=\"tag\">&lt;/<span class=\"name\">short-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tag-class</span>&gt;</span>com.jsp.custom.tag.UserTag<span class=\"tag\">&lt;/<span class=\"name\">tag-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">body-content</span>&gt;</span>tagdependent<span class=\"tag\">&lt;/<span class=\"name\">body-content</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">required</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>user name<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- the type default is String if it is not specified --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;type&gt;java.lang.String&lt;/type&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>isMale<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">required</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>the use is male or not male<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>java.lang.Boolean<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>birthday<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>java.util.Date<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tag-class</span>&gt;</span>com.jsp.custom.tag.SystemTag<span class=\"tag\">&lt;/<span class=\"name\">tag-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">body-content</span>&gt;</span>empty<span class=\"tag\">&lt;/<span class=\"name\">body-content</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">required</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>the size of system<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Finally, we can use these both tags in our JSP page.</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;custom&quot;</span> uri=<span class=\"string\">&quot;WEB-INF/customTag.tld&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;custom tag training&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;custom:user name=<span class=\"string\">&quot;user1&quot;</span> isMale=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;custom:system size=<span class=\"string\">&quot;1024&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Custom Tag is a user-defined JSP language element. When it is contained in JSP page and it will translate into a servlet, the custom tag is converted to opertions on an object called a tag handler. The web container then invokes those operations when the JSP page’s servlet is executed.   </p>\n<p>If we want to create a custom tag, what we need to do is simply extend <code>SimpleTagSupport</code> class and override the <code>doTag()</code> method, where you can place your code to generate content for the tag.   </p>\n<p>Let’s getting started to create a custom tag now.<br>As you can see below, consider we want to create two tag, one is user tag with name and isMale attribute, another is system tag with size attribute.</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;custom:user name=<span class=\"string\">&quot;user1&quot;</span> isMale=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">&lt;custom:system size=<span class=\"string\">&quot;1024&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>","more":"<p>So firstly what we need to do is create two java classes that act as a tag handler for each other tag. and them must extends <code>SimpleTagSupport</code> class.   </p>\n<figure class=\"highlight java\"><figcaption><span>UserTag.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jsp.custom.tag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.JspException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.JspWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 12/1/14.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserTag</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleTagSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isMale;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">StringWriter</span> <span class=\"variable\">sw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringWriter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doTag</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JspException, IOException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">JspWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> getJspContext().getOut();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// print name info with name attribute</span></span><br><span class=\"line\">        out.println(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// print gender info via isMale attribute</span></span><br><span class=\"line\">        out.println(isMale ? <span class=\"string\">&quot;I&#x27;m male!&quot;</span> : <span class=\"string\">&quot;I&#x27;m female!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (birthday != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            out.println(String.format(<span class=\"string\">&quot;My birthday is %s&quot;</span>, birthday.toString()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// print body text with body content</span></span><br><span class=\"line\">        getJspBody().invoke(sw);</span><br><span class=\"line\">        getJspContext().getOut().println(sw.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setIsMale</span><span class=\"params\">(Boolean isMale)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isMale = isMale;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBirthday</span><span class=\"params\">(Date birthday)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.birthday = birthday;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>SystemTag.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jsp.custom.tag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 12/2/14.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SystemTag</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleTagSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doTag</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        getJspContext().getOut().println(String.valueOf(String.format(<span class=\"string\">&quot;The system&#x27;s size is: %s&quot;</span>, String.valueOf(size))));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSize</span><span class=\"params\">(<span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Above two class just override the <code>doTag()</code> method and take the current <code>JspContext</code> object using <code>getJspContext()</code> method, and then send message content to the current <code>JspWriter</code> object.   </p>\n<p>Secondly we need to create tld extention file. It’s a tag library file. let us see the codes.    </p>\n<figure class=\"highlight xml\"><figcaption><span>customTag.tld</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">taglib</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tlib-version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">tlib-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jsp-version</span>&gt;</span>2.0<span class=\"tag\">&lt;/<span class=\"name\">jsp-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">short-name</span>&gt;</span>custom tld<span class=\"tag\">&lt;/<span class=\"name\">short-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tag-class</span>&gt;</span>com.jsp.custom.tag.UserTag<span class=\"tag\">&lt;/<span class=\"name\">tag-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">body-content</span>&gt;</span>tagdependent<span class=\"tag\">&lt;/<span class=\"name\">body-content</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">required</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>user name<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- the type default is String if it is not specified --&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;type&gt;java.lang.String&lt;/type&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>isMale<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">required</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>the use is male or not male<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>java.lang.Boolean<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>birthday<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>java.util.Date<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tag-class</span>&gt;</span>com.jsp.custom.tag.SystemTag<span class=\"tag\">&lt;/<span class=\"name\">tag-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">body-content</span>&gt;</span>empty<span class=\"tag\">&lt;/<span class=\"name\">body-content</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>size<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">required</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">required</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>the size of system<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">attribute</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tag</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Finally, we can use these both tags in our JSP page.</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;custom&quot;</span> uri=<span class=\"string\">&quot;WEB-INF/customTag.tld&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;custom tag training&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;custom:user name=<span class=\"string\">&quot;user1&quot;</span> isMale=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;custom:system size=<span class=\"string\">&quot;1024&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Guava - Ordering","date":"2014-12-12T09:28:07.000Z","comments":1,"_content":"\n`Ordering` is Guava's fluent Comparator class and implements Comparator interface. It can be used to build complex comparators and apply them to collections of objects. \n\nOkay, so let's getting started. Firstly, we declared a `String` type List:   \n\n``` Java\n    private List<String> locations = Lists.newArrayList(\n            \"Guang zhou\",\n            \"Cheng du\",\n            \"\",\n            \"Shang hai\"\n    );\n``` \nWe will use this locations variable later.\n<!-- more -->\n\n`natural()`   \nUse natural ordering for comparatable types. such as number from small to large. date from start to end. It is static method.   \n\n``` Java\n    // use natural comparator, such as a -> z\n    // so the result is: [, Cheng du, Guang zhou, Shang hai]\n    System.out.println(Ordering.natural().sortedCopy(locations));\n```\n\n`sortedCopy(Iterable)`   \nReturn a sorted copy of the specified elements as a List.    \nWe create a customized `Ordering` that sorted by the length of element from small to large. Let's get the code:\n\n``` Java\n    private Ordering<String> getCustomzieStringOrder() {\n        return new Ordering<String>() {\n            @Override\n            public int compare(String first, String second) {\n                return Ints.compare(first.length(), second.length());\n            }\n        };\n    }\n```\nOrder the locations list with our new customize `Ordering`:   \n\n``` Java\n\tOrdering<String> byLengthOrdering = getCustomzieStringOrder();\n\n    // use natural comparator, such as a -> z\n    // so the result is: [, Cheng du, Shang hai, Guang zhou]\n    System.out.println(byLengthOrdering.sortedCopy(locations));\n```\n\n`isOrdered(Iterable)`   \nReturn a Boolean variable that can describe the Iterable if sorted.\n\n``` Java\n\t// will return false. because the locations array is not sorted.\n    System.out.println(byLengthOrdering.isOrdered(locations));\n```\n\n`reverse()`   \nReturn the reverse `Ordering`.\n\n``` Java\n    // reverse customize comparator.\n    // so the result is: [Guang zhou, Shang hai, Cheng du, ]\n    System.out.println(byLengthOrdering.reverse().sortedCopy(locations));\n```\n\n`nullsFirst()`   \nReturn an `Ordering` that will put the null object at the first.\n\n``` Java\n    // add null object to the locations array.\n    locations.add(null);\n\n    // null obejct will at first.\n    // so the result is : [null, , Cheng du, Shang hai, Guang zhou]\n    System.out.println(byLengthOrdering.nullsFirst().sortedCopy(locations));\n```\n\n`nullsLast()`   \nReturn an `Ordering` that will put the null object at the last.\n\n``` Java\n\t// null object will at last.\n    // the result is : [, Cheng du, Shang hai, Guang zhou, null]\n    System.out.println(byLengthOrdering.nullsLast().sortedCopy(locations));\n    \n    // will throw NullPointerException, because the location contains null object.\n    // and here doesn't have nullsFirst() or nullsLast() to deal with null object.\n    byLengthOrdering.sortedCopy(locations);\n\n    // remove the null object.\n    locations.remove(null);\n```\n\n`compound()`   \nReturns an `Ordering` which uses the specified Comparator to \"break ties.\"\n\n``` Java\n    // the \"AAAAAAAA\" length is equal to \"Cheng du\" length. (8 characters)\n    // and it will be appended at last.\n    locations.add(\"AAAAAAAA\");\n\n    // use natrual ordering with second comparator to deal with equal situation.\n    Ordering<String> compoundOrdering = byLengthOrdering.compound(Ordering.natural());\n\n    // the result will be : [, AAAAAAAA, Cheng du, Shang hai, Guang zhou]\n    System.out.println(compoundOrdering.sortedCopy(locations));\n```\n\n`onResultOf(Fuction)`   \nReturns an Ordering which orders values by applying the function to them and then comparing the results using the original Ordering.   \nDeclaring a Foo class:\n\n``` Java\n\t public class Foo {\n        @Nullable\n        private Integer sortedBy;\n\n        private String nonSortedBy;\n\n        public Foo(Integer sortedBy, String nonSortedBy) {\n            this.sortedBy = sortedBy;\n            this.nonSortedBy = nonSortedBy;\n        }\n\n        public String getNonSortedBy() {\n            return nonSortedBy;\n        }\n\n        public void setNonSortedBy(String nonSortedBy) {\n            this.nonSortedBy = nonSortedBy;\n        }\n\n        public Integer getSortedBy() {\n            return sortedBy;\n        }\n\n        public void setSortedBy(int sortedBy) {\n            this.sortedBy = sortedBy;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"%s+%s\", this.sortedBy, this.nonSortedBy);\n        }\n    }\n```\nDeclaring a new List with Foo class type:\n\n``` Java\n\tprivate List<Foo> fooList = Lists.newArrayList(\n        new Foo(null, \"abc\"),\n        new Foo(23, \"abc\"),\n        new Foo(10, \"abc\")\n    );\t\n```\nDefine a new function that will return an customized `Ordering`:\n\n``` Java\n    private Ordering<Foo> getNaturalFooOrder() {\n        return Ordering.natural().nullsFirst().onResultOf(new Function<Foo, Integer>() {\n            @Override\n            public Integer apply(@Nullable Foo foo) {\n                return foo.getSortedBy();\n            }\n        });\n    }\n    \n    Ordering<Foo> fooOrdering = getNaturalFooOrder();\n    // the result will be [null+abc, 10+abc, 23+abc]\n    System.out.println(fooOrdering.sortedCopy(fooList));\n```\n\n`greatestOf(Iterable iterable, int k)`   \nReturns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable.\n\n``` Java\n    // the result will be [23+abc]\n    System.out.println(fooOrdering.greatestOf(fooList, 1));\n\n    // the result will be [23+abc, 10+abc]\n    System.out.println(fooOrdering.greatestOf(fooList, 2));\n```\n\n`leastOf(Iterable iterable, int k)`   \nReturns the k least elements of the specified iterable, according to this ordering, in order from least to greatest. Not necessarily stable.\n\n``` Java\n    // the result will be [null+abc, 10+abc]\n    System.out.println(fooOrdering.leastOf(fooList, 2));\n``` \n\n`min(Iterable)`   \nReturns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   \n\n``` Java\n    // the result will be null+abc\n    System.out.println(fooOrdering.min(fooList));\n```\n\n`max(Iterable)`   \nReturns the maximum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   \n\n``` Java\n    // the result will be 23+abc\n    System.out.println(fooOrdering.max(fooList));\n```\n\n\n\n\n\n\n\n\n","source":"_posts/2014-12-12-guava-ordering.markdown","raw":"---\n\ntitle: \"Guava - Ordering\"\ndate: 2014-12-12 17:28:07 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Guava]\n---\n\n`Ordering` is Guava's fluent Comparator class and implements Comparator interface. It can be used to build complex comparators and apply them to collections of objects. \n\nOkay, so let's getting started. Firstly, we declared a `String` type List:   \n\n``` Java\n    private List<String> locations = Lists.newArrayList(\n            \"Guang zhou\",\n            \"Cheng du\",\n            \"\",\n            \"Shang hai\"\n    );\n``` \nWe will use this locations variable later.\n<!-- more -->\n\n`natural()`   \nUse natural ordering for comparatable types. such as number from small to large. date from start to end. It is static method.   \n\n``` Java\n    // use natural comparator, such as a -> z\n    // so the result is: [, Cheng du, Guang zhou, Shang hai]\n    System.out.println(Ordering.natural().sortedCopy(locations));\n```\n\n`sortedCopy(Iterable)`   \nReturn a sorted copy of the specified elements as a List.    \nWe create a customized `Ordering` that sorted by the length of element from small to large. Let's get the code:\n\n``` Java\n    private Ordering<String> getCustomzieStringOrder() {\n        return new Ordering<String>() {\n            @Override\n            public int compare(String first, String second) {\n                return Ints.compare(first.length(), second.length());\n            }\n        };\n    }\n```\nOrder the locations list with our new customize `Ordering`:   \n\n``` Java\n\tOrdering<String> byLengthOrdering = getCustomzieStringOrder();\n\n    // use natural comparator, such as a -> z\n    // so the result is: [, Cheng du, Shang hai, Guang zhou]\n    System.out.println(byLengthOrdering.sortedCopy(locations));\n```\n\n`isOrdered(Iterable)`   \nReturn a Boolean variable that can describe the Iterable if sorted.\n\n``` Java\n\t// will return false. because the locations array is not sorted.\n    System.out.println(byLengthOrdering.isOrdered(locations));\n```\n\n`reverse()`   \nReturn the reverse `Ordering`.\n\n``` Java\n    // reverse customize comparator.\n    // so the result is: [Guang zhou, Shang hai, Cheng du, ]\n    System.out.println(byLengthOrdering.reverse().sortedCopy(locations));\n```\n\n`nullsFirst()`   \nReturn an `Ordering` that will put the null object at the first.\n\n``` Java\n    // add null object to the locations array.\n    locations.add(null);\n\n    // null obejct will at first.\n    // so the result is : [null, , Cheng du, Shang hai, Guang zhou]\n    System.out.println(byLengthOrdering.nullsFirst().sortedCopy(locations));\n```\n\n`nullsLast()`   \nReturn an `Ordering` that will put the null object at the last.\n\n``` Java\n\t// null object will at last.\n    // the result is : [, Cheng du, Shang hai, Guang zhou, null]\n    System.out.println(byLengthOrdering.nullsLast().sortedCopy(locations));\n    \n    // will throw NullPointerException, because the location contains null object.\n    // and here doesn't have nullsFirst() or nullsLast() to deal with null object.\n    byLengthOrdering.sortedCopy(locations);\n\n    // remove the null object.\n    locations.remove(null);\n```\n\n`compound()`   \nReturns an `Ordering` which uses the specified Comparator to \"break ties.\"\n\n``` Java\n    // the \"AAAAAAAA\" length is equal to \"Cheng du\" length. (8 characters)\n    // and it will be appended at last.\n    locations.add(\"AAAAAAAA\");\n\n    // use natrual ordering with second comparator to deal with equal situation.\n    Ordering<String> compoundOrdering = byLengthOrdering.compound(Ordering.natural());\n\n    // the result will be : [, AAAAAAAA, Cheng du, Shang hai, Guang zhou]\n    System.out.println(compoundOrdering.sortedCopy(locations));\n```\n\n`onResultOf(Fuction)`   \nReturns an Ordering which orders values by applying the function to them and then comparing the results using the original Ordering.   \nDeclaring a Foo class:\n\n``` Java\n\t public class Foo {\n        @Nullable\n        private Integer sortedBy;\n\n        private String nonSortedBy;\n\n        public Foo(Integer sortedBy, String nonSortedBy) {\n            this.sortedBy = sortedBy;\n            this.nonSortedBy = nonSortedBy;\n        }\n\n        public String getNonSortedBy() {\n            return nonSortedBy;\n        }\n\n        public void setNonSortedBy(String nonSortedBy) {\n            this.nonSortedBy = nonSortedBy;\n        }\n\n        public Integer getSortedBy() {\n            return sortedBy;\n        }\n\n        public void setSortedBy(int sortedBy) {\n            this.sortedBy = sortedBy;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"%s+%s\", this.sortedBy, this.nonSortedBy);\n        }\n    }\n```\nDeclaring a new List with Foo class type:\n\n``` Java\n\tprivate List<Foo> fooList = Lists.newArrayList(\n        new Foo(null, \"abc\"),\n        new Foo(23, \"abc\"),\n        new Foo(10, \"abc\")\n    );\t\n```\nDefine a new function that will return an customized `Ordering`:\n\n``` Java\n    private Ordering<Foo> getNaturalFooOrder() {\n        return Ordering.natural().nullsFirst().onResultOf(new Function<Foo, Integer>() {\n            @Override\n            public Integer apply(@Nullable Foo foo) {\n                return foo.getSortedBy();\n            }\n        });\n    }\n    \n    Ordering<Foo> fooOrdering = getNaturalFooOrder();\n    // the result will be [null+abc, 10+abc, 23+abc]\n    System.out.println(fooOrdering.sortedCopy(fooList));\n```\n\n`greatestOf(Iterable iterable, int k)`   \nReturns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable.\n\n``` Java\n    // the result will be [23+abc]\n    System.out.println(fooOrdering.greatestOf(fooList, 1));\n\n    // the result will be [23+abc, 10+abc]\n    System.out.println(fooOrdering.greatestOf(fooList, 2));\n```\n\n`leastOf(Iterable iterable, int k)`   \nReturns the k least elements of the specified iterable, according to this ordering, in order from least to greatest. Not necessarily stable.\n\n``` Java\n    // the result will be [null+abc, 10+abc]\n    System.out.println(fooOrdering.leastOf(fooList, 2));\n``` \n\n`min(Iterable)`   \nReturns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   \n\n``` Java\n    // the result will be null+abc\n    System.out.println(fooOrdering.min(fooList));\n```\n\n`max(Iterable)`   \nReturns the maximum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   \n\n``` Java\n    // the result will be 23+abc\n    System.out.println(fooOrdering.max(fooList));\n```\n\n\n\n\n\n\n\n\n","slug":"2014-12-12-guava-ordering","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o2001qazv50j51cyft","layout":"post","photos":[],"link":"","content":"<p><code>Ordering</code> is Guava’s fluent Comparator class and implements Comparator interface. It can be used to build complex comparators and apply them to collections of objects. </p>\n<p>Okay, so let’s getting started. Firstly, we declared a <code>String</code> type List:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; locations = Lists.newArrayList(</span><br><span class=\"line\">        <span class=\"string\">&quot;Guang zhou&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Cheng du&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Shang hai&quot;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>We will use this locations variable later.</p>\n<span id=\"more\"></span>\n\n<p><code>natural()</code><br>Use natural ordering for comparatable types. such as number from small to large. date from start to end. It is static method.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// use natural comparator, such as a -&gt; z</span></span><br><span class=\"line\"><span class=\"comment\">// so the result is: [, Cheng du, Guang zhou, Shang hai]</span></span><br><span class=\"line\">System.out.println(Ordering.natural().sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>sortedCopy(Iterable)</code><br>Return a sorted copy of the specified elements as a List.<br>We create a customized <code>Ordering</code> that sorted by the length of element from small to large. Let’s get the code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Ordering&lt;String&gt; <span class=\"title function_\">getCustomzieStringOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ordering</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String first, String second)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ints.compare(first.length(), second.length());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Order the locations list with our new customize <code>Ordering</code>:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ordering&lt;String&gt; byLengthOrdering = getCustomzieStringOrder();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// use natural comparator, such as a -&gt; z</span></span><br><span class=\"line\">   <span class=\"comment\">// so the result is: [, Cheng du, Shang hai, Guang zhou]</span></span><br><span class=\"line\">   System.out.println(byLengthOrdering.sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>isOrdered(Iterable)</code><br>Return a Boolean variable that can describe the Iterable if sorted.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// will return false. because the locations array is not sorted.</span></span><br><span class=\"line\">   System.out.println(byLengthOrdering.isOrdered(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>reverse()</code><br>Return the reverse <code>Ordering</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reverse customize comparator.</span></span><br><span class=\"line\"><span class=\"comment\">// so the result is: [Guang zhou, Shang hai, Cheng du, ]</span></span><br><span class=\"line\">System.out.println(byLengthOrdering.reverse().sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>nullsFirst()</code><br>Return an <code>Ordering</code> that will put the null object at the first.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add null object to the locations array.</span></span><br><span class=\"line\">locations.add(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null obejct will at first.</span></span><br><span class=\"line\"><span class=\"comment\">// so the result is : [null, , Cheng du, Shang hai, Guang zhou]</span></span><br><span class=\"line\">System.out.println(byLengthOrdering.nullsFirst().sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>nullsLast()</code><br>Return an <code>Ordering</code> that will put the null object at the last.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// null object will at last.</span></span><br><span class=\"line\">   <span class=\"comment\">// the result is : [, Cheng du, Shang hai, Guang zhou, null]</span></span><br><span class=\"line\">   System.out.println(byLengthOrdering.nullsLast().sortedCopy(locations));</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// will throw NullPointerException, because the location contains null object.</span></span><br><span class=\"line\">   <span class=\"comment\">// and here doesn&#x27;t have nullsFirst() or nullsLast() to deal with null object.</span></span><br><span class=\"line\">   byLengthOrdering.sortedCopy(locations);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// remove the null object.</span></span><br><span class=\"line\">   locations.remove(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>compound()</code><br>Returns an <code>Ordering</code> which uses the specified Comparator to “break ties.”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the &quot;AAAAAAAA&quot; length is equal to &quot;Cheng du&quot; length. (8 characters)</span></span><br><span class=\"line\"><span class=\"comment\">// and it will be appended at last.</span></span><br><span class=\"line\">locations.add(<span class=\"string\">&quot;AAAAAAAA&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use natrual ordering with second comparator to deal with equal situation.</span></span><br><span class=\"line\">Ordering&lt;String&gt; compoundOrdering = byLengthOrdering.compound(Ordering.natural());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the result will be : [, AAAAAAAA, Cheng du, Shang hai, Guang zhou]</span></span><br><span class=\"line\">System.out.println(compoundOrdering.sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>onResultOf(Fuction)</code><br>Returns an Ordering which orders values by applying the function to them and then comparing the results using the original Ordering.<br>Declaring a Foo class:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">      <span class=\"keyword\">private</span> Integer sortedBy;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">private</span> String nonSortedBy;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"title function_\">Foo</span><span class=\"params\">(Integer sortedBy, String nonSortedBy)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.sortedBy = sortedBy;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.nonSortedBy = nonSortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">getNonSortedBy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> nonSortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonSortedBy</span><span class=\"params\">(String nonSortedBy)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.nonSortedBy = nonSortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getSortedBy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> sortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSortedBy</span><span class=\"params\">(<span class=\"type\">int</span> sortedBy)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.sortedBy = sortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s+%s&quot;</span>, <span class=\"built_in\">this</span>.sortedBy, <span class=\"built_in\">this</span>.nonSortedBy);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Declaring a new List with Foo class type:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Foo&gt; fooList = Lists.newArrayList(</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"literal\">null</span>, <span class=\"string\">&quot;abc&quot;</span>),</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"number\">23</span>, <span class=\"string\">&quot;abc&quot;</span>),</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"number\">10</span>, <span class=\"string\">&quot;abc&quot;</span>)</span><br><span class=\"line\">   );\t</span><br></pre></td></tr></table></figure>\n<p>Define a new function that will return an customized <code>Ordering</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Ordering&lt;Foo&gt; <span class=\"title function_\">getNaturalFooOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ordering.natural().nullsFirst().onResultOf(<span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>&lt;Foo, Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Integer <span class=\"title function_\">apply</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Foo foo)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> foo.getSortedBy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Ordering&lt;Foo&gt; fooOrdering = getNaturalFooOrder();</span><br><span class=\"line\"><span class=\"comment\">// the result will be [null+abc, 10+abc, 23+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.sortedCopy(fooList));</span><br></pre></td></tr></table></figure>\n\n<p><code>greatestOf(Iterable iterable, int k)</code><br>Returns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be [23+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.greatestOf(fooList, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the result will be [23+abc, 10+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.greatestOf(fooList, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>leastOf(Iterable iterable, int k)</code><br>Returns the k least elements of the specified iterable, according to this ordering, in order from least to greatest. Not necessarily stable.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be [null+abc, 10+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.leastOf(fooList, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>min(Iterable)</code><br>Returns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be null+abc</span></span><br><span class=\"line\">System.out.println(fooOrdering.min(fooList));</span><br></pre></td></tr></table></figure>\n\n<p><code>max(Iterable)</code><br>Returns the maximum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be 23+abc</span></span><br><span class=\"line\">System.out.println(fooOrdering.max(fooList));</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p><code>Ordering</code> is Guava’s fluent Comparator class and implements Comparator interface. It can be used to build complex comparators and apply them to collections of objects. </p>\n<p>Okay, so let’s getting started. Firstly, we declared a <code>String</code> type List:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; locations = Lists.newArrayList(</span><br><span class=\"line\">        <span class=\"string\">&quot;Guang zhou&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Cheng du&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Shang hai&quot;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>We will use this locations variable later.</p>","more":"<p><code>natural()</code><br>Use natural ordering for comparatable types. such as number from small to large. date from start to end. It is static method.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// use natural comparator, such as a -&gt; z</span></span><br><span class=\"line\"><span class=\"comment\">// so the result is: [, Cheng du, Guang zhou, Shang hai]</span></span><br><span class=\"line\">System.out.println(Ordering.natural().sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>sortedCopy(Iterable)</code><br>Return a sorted copy of the specified elements as a List.<br>We create a customized <code>Ordering</code> that sorted by the length of element from small to large. Let’s get the code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Ordering&lt;String&gt; <span class=\"title function_\">getCustomzieStringOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Ordering</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(String first, String second)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ints.compare(first.length(), second.length());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Order the locations list with our new customize <code>Ordering</code>:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ordering&lt;String&gt; byLengthOrdering = getCustomzieStringOrder();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// use natural comparator, such as a -&gt; z</span></span><br><span class=\"line\">   <span class=\"comment\">// so the result is: [, Cheng du, Shang hai, Guang zhou]</span></span><br><span class=\"line\">   System.out.println(byLengthOrdering.sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>isOrdered(Iterable)</code><br>Return a Boolean variable that can describe the Iterable if sorted.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// will return false. because the locations array is not sorted.</span></span><br><span class=\"line\">   System.out.println(byLengthOrdering.isOrdered(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>reverse()</code><br>Return the reverse <code>Ordering</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reverse customize comparator.</span></span><br><span class=\"line\"><span class=\"comment\">// so the result is: [Guang zhou, Shang hai, Cheng du, ]</span></span><br><span class=\"line\">System.out.println(byLengthOrdering.reverse().sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>nullsFirst()</code><br>Return an <code>Ordering</code> that will put the null object at the first.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add null object to the locations array.</span></span><br><span class=\"line\">locations.add(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null obejct will at first.</span></span><br><span class=\"line\"><span class=\"comment\">// so the result is : [null, , Cheng du, Shang hai, Guang zhou]</span></span><br><span class=\"line\">System.out.println(byLengthOrdering.nullsFirst().sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>nullsLast()</code><br>Return an <code>Ordering</code> that will put the null object at the last.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// null object will at last.</span></span><br><span class=\"line\">   <span class=\"comment\">// the result is : [, Cheng du, Shang hai, Guang zhou, null]</span></span><br><span class=\"line\">   System.out.println(byLengthOrdering.nullsLast().sortedCopy(locations));</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// will throw NullPointerException, because the location contains null object.</span></span><br><span class=\"line\">   <span class=\"comment\">// and here doesn&#x27;t have nullsFirst() or nullsLast() to deal with null object.</span></span><br><span class=\"line\">   byLengthOrdering.sortedCopy(locations);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// remove the null object.</span></span><br><span class=\"line\">   locations.remove(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p><code>compound()</code><br>Returns an <code>Ordering</code> which uses the specified Comparator to “break ties.”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the &quot;AAAAAAAA&quot; length is equal to &quot;Cheng du&quot; length. (8 characters)</span></span><br><span class=\"line\"><span class=\"comment\">// and it will be appended at last.</span></span><br><span class=\"line\">locations.add(<span class=\"string\">&quot;AAAAAAAA&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use natrual ordering with second comparator to deal with equal situation.</span></span><br><span class=\"line\">Ordering&lt;String&gt; compoundOrdering = byLengthOrdering.compound(Ordering.natural());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the result will be : [, AAAAAAAA, Cheng du, Shang hai, Guang zhou]</span></span><br><span class=\"line\">System.out.println(compoundOrdering.sortedCopy(locations));</span><br></pre></td></tr></table></figure>\n\n<p><code>onResultOf(Fuction)</code><br>Returns an Ordering which orders values by applying the function to them and then comparing the results using the original Ordering.<br>Declaring a Foo class:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">      <span class=\"keyword\">private</span> Integer sortedBy;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">private</span> String nonSortedBy;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"title function_\">Foo</span><span class=\"params\">(Integer sortedBy, String nonSortedBy)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.sortedBy = sortedBy;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.nonSortedBy = nonSortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">getNonSortedBy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> nonSortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonSortedBy</span><span class=\"params\">(String nonSortedBy)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.nonSortedBy = nonSortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getSortedBy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> sortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSortedBy</span><span class=\"params\">(<span class=\"type\">int</span> sortedBy)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.sortedBy = sortedBy;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;%s+%s&quot;</span>, <span class=\"built_in\">this</span>.sortedBy, <span class=\"built_in\">this</span>.nonSortedBy);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>Declaring a new List with Foo class type:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Foo&gt; fooList = Lists.newArrayList(</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"literal\">null</span>, <span class=\"string\">&quot;abc&quot;</span>),</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"number\">23</span>, <span class=\"string\">&quot;abc&quot;</span>),</span><br><span class=\"line\">       <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"number\">10</span>, <span class=\"string\">&quot;abc&quot;</span>)</span><br><span class=\"line\">   );\t</span><br></pre></td></tr></table></figure>\n<p>Define a new function that will return an customized <code>Ordering</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Ordering&lt;Foo&gt; <span class=\"title function_\">getNaturalFooOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ordering.natural().nullsFirst().onResultOf(<span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>&lt;Foo, Integer&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Integer <span class=\"title function_\">apply</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Foo foo)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> foo.getSortedBy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Ordering&lt;Foo&gt; fooOrdering = getNaturalFooOrder();</span><br><span class=\"line\"><span class=\"comment\">// the result will be [null+abc, 10+abc, 23+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.sortedCopy(fooList));</span><br></pre></td></tr></table></figure>\n\n<p><code>greatestOf(Iterable iterable, int k)</code><br>Returns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be [23+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.greatestOf(fooList, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the result will be [23+abc, 10+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.greatestOf(fooList, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>leastOf(Iterable iterable, int k)</code><br>Returns the k least elements of the specified iterable, according to this ordering, in order from least to greatest. Not necessarily stable.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be [null+abc, 10+abc]</span></span><br><span class=\"line\">System.out.println(fooOrdering.leastOf(fooList, <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n\n<p><code>min(Iterable)</code><br>Returns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be null+abc</span></span><br><span class=\"line\">System.out.println(fooOrdering.min(fooList));</span><br></pre></td></tr></table></figure>\n\n<p><code>max(Iterable)</code><br>Returns the maximum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the result will be 23+abc</span></span><br><span class=\"line\">System.out.println(fooOrdering.max(fooList));</span><br></pre></td></tr></table></figure>"},{"title":"how to learn any language in six months","date":"2014-12-18T14:19:37.000Z","comments":1,"_content":"Just see a video that teachs you how to learn any language in six months on youtube. It's created by Chris Lonsdale. I think it's very interesting and I believe those ways will be useful for us. So that's why I note it.\n\n### The Big Question\n- How can normal adults learn a `NEW LANGUAGE` **Quickly**, **Easily**, **Effectively**?\n\n### How\n- There have **`5 Principles`** and **`7 Actions`**.    \n- The two things that really don't matter:\n  - <del>Talent</del>\n  - <del>Immersion per se</del>\n<!-- more-->\n### 5 Principles of Rapid Language Acquisition\nThere have four words you need to keep in your mind: **Meaning**, **Relevance**, **Attention**, **Memory**   \n{% img /assets/images/legacy/learning-language-4-words.png 300 200 %}\n\n#### Principle #1:\n**`Focus` on language content that is `relevant` to you.**\n\n#### Principle #2:\n**User your `New Language` as a `Tool` to `Communicate` ... from Day 1**\n\n#### Principle #3:\n**When you first `UNDERSTAND` the `MESSAGE`, you will unconsciously `ACQUIRE` the Language**\n\n{% img /assets/images/legacy/comprehension-is-key.png 400 300 %}\n\n*Note:* **Language learning is NOT ABOUT KNOWLEGE..., It's about `Physiological Training`**\n\n#### Principle #4:\n**Language learning is about `Physiological Training`**   \n- *Talking takes muscle... when your `FACE HURTS`, you are doing it `RIGHT`*\n\n#### Principle #5:\n**Psycho-Physiological `STATE Matters`**   \n- *Very important idea... You Must Learn to Tolerate Ambiguity*\n\n\n### 7 Actions for Rapid Language Acquisition\n#### Action #1:\n**`Listen A LOT!`**   \n- *Brain Soaking with New Language*\n\n#### Action #2:\n**Focus on getting the meaning `FIRST` (before the words)**   \n- *Use Body Language*   \n- *Use Patterns You Already Know*\n\n#### Action #3:\n**Start Mixing!**   \n- *So... get creative... start mixing!*   \n \n{% img /assets/images/legacy/words-mixing.png 400 300%}\n\n#### Action #4:\n**Focus on the `Core`*    \n{% img /assets/images/legacy/high-frequency-language.png 400 300 %}\n##### Week 1 (The Tool Box)   \n-What is this?   \n-How do you say?   \n-I don't understand...     \n*All in the TARGET LANGUAGE*\n \n##### Week 2-3 (Pronouns, Common Verbs, Adjectives)\n-you   \n-that   \n-me    \n-give   \n-hot   \n-...\n\n##### Week 4 (Glue Words)\n-But   \n-And   \n-Even though   \n-...   \n\n \n#### Action #5\n**Get a Language Parent**         \nLanguage Parent \"Rules\":        \n- Works to understand what you are saying   \n- Does not correct mistake   \n- Confirms understanding by using correct language   \n- Uses words the learner knows   \n\n#### Action #6\n**Copy the `Face`**\n\n#### Action #7\n**`Direct Connect` to Mental Images**      \n{% img /assets/images/legacy/direct-connect-mental-image.png 300 200 %}\n\t\n*Note: The original video address is [https://www.youtube.com/watch?v=d0yGdNEWdn0](https://www.youtube.com/watch?v=d0yGdNEWdn0)*   ","source":"_posts/2014-12-18-how-to-learn-any-language-in-six-months.markdown","raw":"---\n\ntitle: \"how to learn any language in six months\"\ndate: 2014-12-18 22:19:37 +0800\ncomments: true\ncategories: Others\ntags: [SoftSkill]\n---\nJust see a video that teachs you how to learn any language in six months on youtube. It's created by Chris Lonsdale. I think it's very interesting and I believe those ways will be useful for us. So that's why I note it.\n\n### The Big Question\n- How can normal adults learn a `NEW LANGUAGE` **Quickly**, **Easily**, **Effectively**?\n\n### How\n- There have **`5 Principles`** and **`7 Actions`**.    \n- The two things that really don't matter:\n  - <del>Talent</del>\n  - <del>Immersion per se</del>\n<!-- more-->\n### 5 Principles of Rapid Language Acquisition\nThere have four words you need to keep in your mind: **Meaning**, **Relevance**, **Attention**, **Memory**   \n{% img /assets/images/legacy/learning-language-4-words.png 300 200 %}\n\n#### Principle #1:\n**`Focus` on language content that is `relevant` to you.**\n\n#### Principle #2:\n**User your `New Language` as a `Tool` to `Communicate` ... from Day 1**\n\n#### Principle #3:\n**When you first `UNDERSTAND` the `MESSAGE`, you will unconsciously `ACQUIRE` the Language**\n\n{% img /assets/images/legacy/comprehension-is-key.png 400 300 %}\n\n*Note:* **Language learning is NOT ABOUT KNOWLEGE..., It's about `Physiological Training`**\n\n#### Principle #4:\n**Language learning is about `Physiological Training`**   \n- *Talking takes muscle... when your `FACE HURTS`, you are doing it `RIGHT`*\n\n#### Principle #5:\n**Psycho-Physiological `STATE Matters`**   \n- *Very important idea... You Must Learn to Tolerate Ambiguity*\n\n\n### 7 Actions for Rapid Language Acquisition\n#### Action #1:\n**`Listen A LOT!`**   \n- *Brain Soaking with New Language*\n\n#### Action #2:\n**Focus on getting the meaning `FIRST` (before the words)**   \n- *Use Body Language*   \n- *Use Patterns You Already Know*\n\n#### Action #3:\n**Start Mixing!**   \n- *So... get creative... start mixing!*   \n \n{% img /assets/images/legacy/words-mixing.png 400 300%}\n\n#### Action #4:\n**Focus on the `Core`*    \n{% img /assets/images/legacy/high-frequency-language.png 400 300 %}\n##### Week 1 (The Tool Box)   \n-What is this?   \n-How do you say?   \n-I don't understand...     \n*All in the TARGET LANGUAGE*\n \n##### Week 2-3 (Pronouns, Common Verbs, Adjectives)\n-you   \n-that   \n-me    \n-give   \n-hot   \n-...\n\n##### Week 4 (Glue Words)\n-But   \n-And   \n-Even though   \n-...   \n\n \n#### Action #5\n**Get a Language Parent**         \nLanguage Parent \"Rules\":        \n- Works to understand what you are saying   \n- Does not correct mistake   \n- Confirms understanding by using correct language   \n- Uses words the learner knows   \n\n#### Action #6\n**Copy the `Face`**\n\n#### Action #7\n**`Direct Connect` to Mental Images**      \n{% img /assets/images/legacy/direct-connect-mental-image.png 300 200 %}\n\t\n*Note: The original video address is [https://www.youtube.com/watch?v=d0yGdNEWdn0](https://www.youtube.com/watch?v=d0yGdNEWdn0)*   ","slug":"2014-12-18-how-to-learn-any-language-in-six-months","published":1,"updated":"2023-09-02T17:48:11.706Z","_id":"clm27g4o3001tazv59hdyccm4","layout":"post","photos":[],"link":"","content":"<p>Just see a video that teachs you how to learn any language in six months on youtube. It’s created by Chris Lonsdale. I think it’s very interesting and I believe those ways will be useful for us. So that’s why I note it.</p>\n<h3 id=\"The-Big-Question\"><a href=\"#The-Big-Question\" class=\"headerlink\" title=\"The Big Question\"></a>The Big Question</h3><ul>\n<li>How can normal adults learn a <code>NEW LANGUAGE</code> <strong>Quickly</strong>, <strong>Easily</strong>, <strong>Effectively</strong>?</li>\n</ul>\n<h3 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h3><ul>\n<li>There have <strong><code>5 Principles</code></strong> and <strong><code>7 Actions</code></strong>.    </li>\n<li>The two things that really don’t matter:<ul>\n<li><del>Talent</del></li>\n<li><del>Immersion per se</del><span id=\"more\"></span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-Principles-of-Rapid-Language-Acquisition\"><a href=\"#5-Principles-of-Rapid-Language-Acquisition\" class=\"headerlink\" title=\"5 Principles of Rapid Language Acquisition\"></a>5 Principles of Rapid Language Acquisition</h3><p>There have four words you need to keep in your mind: <strong>Meaning</strong>, <strong>Relevance</strong>, <strong>Attention</strong>, <strong>Memory</strong>   </p>\n<img src=\"/assets/images/legacy/learning-language-4-words.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/learning-language-4-words.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"300\" height=\"200\">\n\n<h4 id=\"Principle-1\"><a href=\"#Principle-1\" class=\"headerlink\" title=\"Principle #1:\"></a>Principle #1:</h4><p><strong><code>Focus</code> on language content that is <code>relevant</code> to you.</strong></p>\n<h4 id=\"Principle-2\"><a href=\"#Principle-2\" class=\"headerlink\" title=\"Principle #2:\"></a>Principle #2:</h4><p><strong>User your <code>New Language</code> as a <code>Tool</code> to <code>Communicate</code> … from Day 1</strong></p>\n<h4 id=\"Principle-3\"><a href=\"#Principle-3\" class=\"headerlink\" title=\"Principle #3:\"></a>Principle #3:</h4><p><strong>When you first <code>UNDERSTAND</code> the <code>MESSAGE</code>, you will unconsciously <code>ACQUIRE</code> the Language</strong></p>\n<img src=\"/assets/images/legacy/comprehension-is-key.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/comprehension-is-key.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"400\" height=\"300\">\n\n<p><em>Note:</em> <strong>Language learning is NOT ABOUT KNOWLEGE…, It’s about <code>Physiological Training</code></strong></p>\n<h4 id=\"Principle-4\"><a href=\"#Principle-4\" class=\"headerlink\" title=\"Principle #4:\"></a>Principle #4:</h4><p><strong>Language learning is about <code>Physiological Training</code></strong>   </p>\n<ul>\n<li><em>Talking takes muscle… when your <code>FACE HURTS</code>, you are doing it <code>RIGHT</code></em></li>\n</ul>\n<h4 id=\"Principle-5\"><a href=\"#Principle-5\" class=\"headerlink\" title=\"Principle #5:\"></a>Principle #5:</h4><p><strong>Psycho-Physiological <code>STATE Matters</code></strong>   </p>\n<ul>\n<li><em>Very important idea… You Must Learn to Tolerate Ambiguity</em></li>\n</ul>\n<h3 id=\"7-Actions-for-Rapid-Language-Acquisition\"><a href=\"#7-Actions-for-Rapid-Language-Acquisition\" class=\"headerlink\" title=\"7 Actions for Rapid Language Acquisition\"></a>7 Actions for Rapid Language Acquisition</h3><h4 id=\"Action-1\"><a href=\"#Action-1\" class=\"headerlink\" title=\"Action #1:\"></a>Action #1:</h4><p><strong><code>Listen A LOT!</code></strong>   </p>\n<ul>\n<li><em>Brain Soaking with New Language</em></li>\n</ul>\n<h4 id=\"Action-2\"><a href=\"#Action-2\" class=\"headerlink\" title=\"Action #2:\"></a>Action #2:</h4><p><strong>Focus on getting the meaning <code>FIRST</code> (before the words)</strong>   </p>\n<ul>\n<li><em>Use Body Language</em>   </li>\n<li><em>Use Patterns You Already Know</em></li>\n</ul>\n<h4 id=\"Action-3\"><a href=\"#Action-3\" class=\"headerlink\" title=\"Action #3:\"></a>Action #3:</h4><p><strong>Start Mixing!</strong>   </p>\n<ul>\n<li><em>So… get creative… start mixing!</em></li>\n</ul>\n<img src=\"/assets/images/legacy/words-mixing.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/words-mixing.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"400\" height=\"300\">\n\n<h4 id=\"Action-4\"><a href=\"#Action-4\" class=\"headerlink\" title=\"Action #4:\"></a>Action #4:</h4><p>*<em>Focus on the <code>Core</code></em>    </p>\n<img src=\"/assets/images/legacy/high-frequency-language.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/high-frequency-language.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"400\" height=\"300\">\n<h5 id=\"Week-1-The-Tool-Box\"><a href=\"#Week-1-The-Tool-Box\" class=\"headerlink\" title=\"Week 1 (The Tool Box)\"></a>Week 1 (The Tool Box)</h5><p>-What is this?<br>-How do you say?<br>-I don’t understand…<br><em>All in the TARGET LANGUAGE</em></p>\n<h5 id=\"Week-2-3-Pronouns-Common-Verbs-Adjectives\"><a href=\"#Week-2-3-Pronouns-Common-Verbs-Adjectives\" class=\"headerlink\" title=\"Week 2-3 (Pronouns, Common Verbs, Adjectives)\"></a>Week 2-3 (Pronouns, Common Verbs, Adjectives)</h5><p>-you<br>-that<br>-me<br>-give<br>-hot<br>-…</p>\n<h5 id=\"Week-4-Glue-Words\"><a href=\"#Week-4-Glue-Words\" class=\"headerlink\" title=\"Week 4 (Glue Words)\"></a>Week 4 (Glue Words)</h5><p>-But<br>-And<br>-Even though<br>-…   </p>\n<h4 id=\"Action-5\"><a href=\"#Action-5\" class=\"headerlink\" title=\"Action #5\"></a>Action #5</h4><p><strong>Get a Language Parent</strong><br>Language Parent “Rules”:        </p>\n<ul>\n<li>Works to understand what you are saying   </li>\n<li>Does not correct mistake   </li>\n<li>Confirms understanding by using correct language   </li>\n<li>Uses words the learner knows</li>\n</ul>\n<h4 id=\"Action-6\"><a href=\"#Action-6\" class=\"headerlink\" title=\"Action #6\"></a>Action #6</h4><p><strong>Copy the <code>Face</code></strong></p>\n<h4 id=\"Action-7\"><a href=\"#Action-7\" class=\"headerlink\" title=\"Action #7\"></a>Action #7</h4><p><strong><code>Direct Connect</code> to Mental Images</strong>      </p>\n<img src=\"/assets/images/legacy/direct-connect-mental-image.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/direct-connect-mental-image.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"300\" height=\"200\">\n<p><em>Note: The original video address is <a href=\"https://www.youtube.com/watch?v=d0yGdNEWdn0\">https://www.youtube.com/watch?v=d0yGdNEWdn0</a></em>   </p>\n","site":{"data":{}},"excerpt":"<p>Just see a video that teachs you how to learn any language in six months on youtube. It’s created by Chris Lonsdale. I think it’s very interesting and I believe those ways will be useful for us. So that’s why I note it.</p>\n<h3 id=\"The-Big-Question\"><a href=\"#The-Big-Question\" class=\"headerlink\" title=\"The Big Question\"></a>The Big Question</h3><ul>\n<li>How can normal adults learn a <code>NEW LANGUAGE</code> <strong>Quickly</strong>, <strong>Easily</strong>, <strong>Effectively</strong>?</li>\n</ul>\n<h3 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h3><ul>\n<li>There have <strong><code>5 Principles</code></strong> and <strong><code>7 Actions</code></strong>.    </li>\n<li>The two things that really don’t matter:<ul>\n<li><del>Talent</del></li>\n<li><del>Immersion per se</del>","more":"</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-Principles-of-Rapid-Language-Acquisition\"><a href=\"#5-Principles-of-Rapid-Language-Acquisition\" class=\"headerlink\" title=\"5 Principles of Rapid Language Acquisition\"></a>5 Principles of Rapid Language Acquisition</h3><p>There have four words you need to keep in your mind: <strong>Meaning</strong>, <strong>Relevance</strong>, <strong>Attention</strong>, <strong>Memory</strong>   </p>\n<img src=\"/assets/images/legacy/learning-language-4-words.png\" class=\"\" width=\"300\" height=\"200\">\n\n<h4 id=\"Principle-1\"><a href=\"#Principle-1\" class=\"headerlink\" title=\"Principle #1:\"></a>Principle #1:</h4><p><strong><code>Focus</code> on language content that is <code>relevant</code> to you.</strong></p>\n<h4 id=\"Principle-2\"><a href=\"#Principle-2\" class=\"headerlink\" title=\"Principle #2:\"></a>Principle #2:</h4><p><strong>User your <code>New Language</code> as a <code>Tool</code> to <code>Communicate</code> … from Day 1</strong></p>\n<h4 id=\"Principle-3\"><a href=\"#Principle-3\" class=\"headerlink\" title=\"Principle #3:\"></a>Principle #3:</h4><p><strong>When you first <code>UNDERSTAND</code> the <code>MESSAGE</code>, you will unconsciously <code>ACQUIRE</code> the Language</strong></p>\n<img src=\"/assets/images/legacy/comprehension-is-key.png\" class=\"\" width=\"400\" height=\"300\">\n\n<p><em>Note:</em> <strong>Language learning is NOT ABOUT KNOWLEGE…, It’s about <code>Physiological Training</code></strong></p>\n<h4 id=\"Principle-4\"><a href=\"#Principle-4\" class=\"headerlink\" title=\"Principle #4:\"></a>Principle #4:</h4><p><strong>Language learning is about <code>Physiological Training</code></strong>   </p>\n<ul>\n<li><em>Talking takes muscle… when your <code>FACE HURTS</code>, you are doing it <code>RIGHT</code></em></li>\n</ul>\n<h4 id=\"Principle-5\"><a href=\"#Principle-5\" class=\"headerlink\" title=\"Principle #5:\"></a>Principle #5:</h4><p><strong>Psycho-Physiological <code>STATE Matters</code></strong>   </p>\n<ul>\n<li><em>Very important idea… You Must Learn to Tolerate Ambiguity</em></li>\n</ul>\n<h3 id=\"7-Actions-for-Rapid-Language-Acquisition\"><a href=\"#7-Actions-for-Rapid-Language-Acquisition\" class=\"headerlink\" title=\"7 Actions for Rapid Language Acquisition\"></a>7 Actions for Rapid Language Acquisition</h3><h4 id=\"Action-1\"><a href=\"#Action-1\" class=\"headerlink\" title=\"Action #1:\"></a>Action #1:</h4><p><strong><code>Listen A LOT!</code></strong>   </p>\n<ul>\n<li><em>Brain Soaking with New Language</em></li>\n</ul>\n<h4 id=\"Action-2\"><a href=\"#Action-2\" class=\"headerlink\" title=\"Action #2:\"></a>Action #2:</h4><p><strong>Focus on getting the meaning <code>FIRST</code> (before the words)</strong>   </p>\n<ul>\n<li><em>Use Body Language</em>   </li>\n<li><em>Use Patterns You Already Know</em></li>\n</ul>\n<h4 id=\"Action-3\"><a href=\"#Action-3\" class=\"headerlink\" title=\"Action #3:\"></a>Action #3:</h4><p><strong>Start Mixing!</strong>   </p>\n<ul>\n<li><em>So… get creative… start mixing!</em></li>\n</ul>\n<img src=\"/assets/images/legacy/words-mixing.png\" class=\"\" width=\"400\" height=\"300\">\n\n<h4 id=\"Action-4\"><a href=\"#Action-4\" class=\"headerlink\" title=\"Action #4:\"></a>Action #4:</h4><p>*<em>Focus on the <code>Core</code></em>    </p>\n<img src=\"/assets/images/legacy/high-frequency-language.png\" class=\"\" width=\"400\" height=\"300\">\n<h5 id=\"Week-1-The-Tool-Box\"><a href=\"#Week-1-The-Tool-Box\" class=\"headerlink\" title=\"Week 1 (The Tool Box)\"></a>Week 1 (The Tool Box)</h5><p>-What is this?<br>-How do you say?<br>-I don’t understand…<br><em>All in the TARGET LANGUAGE</em></p>\n<h5 id=\"Week-2-3-Pronouns-Common-Verbs-Adjectives\"><a href=\"#Week-2-3-Pronouns-Common-Verbs-Adjectives\" class=\"headerlink\" title=\"Week 2-3 (Pronouns, Common Verbs, Adjectives)\"></a>Week 2-3 (Pronouns, Common Verbs, Adjectives)</h5><p>-you<br>-that<br>-me<br>-give<br>-hot<br>-…</p>\n<h5 id=\"Week-4-Glue-Words\"><a href=\"#Week-4-Glue-Words\" class=\"headerlink\" title=\"Week 4 (Glue Words)\"></a>Week 4 (Glue Words)</h5><p>-But<br>-And<br>-Even though<br>-…   </p>\n<h4 id=\"Action-5\"><a href=\"#Action-5\" class=\"headerlink\" title=\"Action #5\"></a>Action #5</h4><p><strong>Get a Language Parent</strong><br>Language Parent “Rules”:        </p>\n<ul>\n<li>Works to understand what you are saying   </li>\n<li>Does not correct mistake   </li>\n<li>Confirms understanding by using correct language   </li>\n<li>Uses words the learner knows</li>\n</ul>\n<h4 id=\"Action-6\"><a href=\"#Action-6\" class=\"headerlink\" title=\"Action #6\"></a>Action #6</h4><p><strong>Copy the <code>Face</code></strong></p>\n<h4 id=\"Action-7\"><a href=\"#Action-7\" class=\"headerlink\" title=\"Action #7\"></a>Action #7</h4><p><strong><code>Direct Connect</code> to Mental Images</strong>      </p>\n<img src=\"/assets/images/legacy/direct-connect-mental-image.png\" class=\"\" width=\"300\" height=\"200\">\n<p><em>Note: The original video address is <a href=\"https://www.youtube.com/watch?v=d0yGdNEWdn0\">https://www.youtube.com/watch?v=d0yGdNEWdn0</a></em>   </p>"},{"title":"What is Ractive.js","date":"2014-12-19T14:18:45.000Z","comments":1,"_content":"\n`Ractive.js` is a `template-driven` UI library, it transforms your templates into blueprints for application that are interative by default. `Ractive.js` is very similar with `AngularJS`, and it supports `Two-way binding`, `animations` as well. Another powerfull feature is `SVG` support.   \n\n### Template + Data = UI\nYou just need to prepare your html template and datas, and the `Ractive.js` will automatically to combine them then give you what you want. Whe you change your datas, it intelligently updates the real DOM.   \n\n### Usage\nFirst, you need to include `Ractive.js` to your application. Just like include other javascript librarys easily. You can download it to local and then include it. And if you want include latest version, you just put below codes to your project.   \n``` javascript\n    <script src='http://cdn.ractivejs.org/latest/ractive.js'></script>\n```\n<!-- more -->\nSecond, we define a container that we want to render. Let's give it id container.\n``` html\n\t<div id=\"container\"></div>\n```\nAnd third, just need to define a template. Load template in many ways, for example we can use ajax call to get the template string. and here, we use script tag to include the template.  \n``` html\n    <script id=\"template\" type=\"text/ractive\">\n\t\t<svg width=\"400\" height=\"200\">\n    \t\t<rect fill=\"lightblue\" width=\"100%\" height=\"100%\"/>\n    \t\t<circle cx=\"25%\" cy=\"50%\" r=\"\\{\\{10+temperature}}\" fill=\"gold\" stroke=\"yellow\" \n            opacity=\"{{0.4+temperature/100}}\"/>\n    \t\t<text x=\"50%\" y=\"65%\" font-size=\"80\" fill=\"white\">\\{\\{temperature}}℃</text>\n\t\t</svg>\n\t</script>\n```\n*Note:* don't mind reverse slash symbol. we just use it to transfer meaning. And when you data binding you don't need to add it. remember that!   \n\nAs above. We define a svg tag and it contains rectangle,circle shape and text. The circle's radius bind the data \\{\\{10 + temperature}}，so the radius will update with ß10 plus temperature when the temperature changed. As we can see the temperature has binded the data as well.   \n\nAnd last step, Let's combine the template and data with `Ractive.js`. the code as below:   \n\n``` javascript\n    var ractive = new Ractive({\n\t \t// The el option can be a node, an ID, or a CSS selector.\n    \tel:'container',\n    \t// We could pass in a string, but for the sake of convenience\n    \t// we're passing the ID of the <script> tag above.\n    \ttemplate:'#template',\n    \t// Here, we're passing in some initial data\n    \tdata: {\n       \t temperature:50\n    \t}\n    });\n```  \n\nSo the style as we can see below:   \n{% img /assets/images/legacy/ractive-svg-test.png 400 200 %}\n\nNow, we can change the temperature data and let `Ractive.js` to update the DOM automatically. So there we increase the temperature by 1 per 100 millisecond, and when the temperature larger than 60 then reset it to 0.   \n``` javascript\n\t setInterval(function(){\n    \tvar temp = ractive.get('temperature');\n    \ttemp = temp >= 60 ? 0 : ++temp; \n    \tractive.set('temperature',temp);\n\t },100);\n```\nSo the radius of circle and the text will automatically changed. This is `Ractive.js` simple usage. Hopeful you like it.\n ","source":"_posts/2014-12-19-what-is-ractive-dot-js.markdown","raw":"---\n\ntitle: \"What is Ractive.js\"\ndate: 2014-12-19 22:18:45 +0800\ncomments: true\ncategories: Frontend\ntags: [JavaScript]\n---\n\n`Ractive.js` is a `template-driven` UI library, it transforms your templates into blueprints for application that are interative by default. `Ractive.js` is very similar with `AngularJS`, and it supports `Two-way binding`, `animations` as well. Another powerfull feature is `SVG` support.   \n\n### Template + Data = UI\nYou just need to prepare your html template and datas, and the `Ractive.js` will automatically to combine them then give you what you want. Whe you change your datas, it intelligently updates the real DOM.   \n\n### Usage\nFirst, you need to include `Ractive.js` to your application. Just like include other javascript librarys easily. You can download it to local and then include it. And if you want include latest version, you just put below codes to your project.   \n``` javascript\n    <script src='http://cdn.ractivejs.org/latest/ractive.js'></script>\n```\n<!-- more -->\nSecond, we define a container that we want to render. Let's give it id container.\n``` html\n\t<div id=\"container\"></div>\n```\nAnd third, just need to define a template. Load template in many ways, for example we can use ajax call to get the template string. and here, we use script tag to include the template.  \n``` html\n    <script id=\"template\" type=\"text/ractive\">\n\t\t<svg width=\"400\" height=\"200\">\n    \t\t<rect fill=\"lightblue\" width=\"100%\" height=\"100%\"/>\n    \t\t<circle cx=\"25%\" cy=\"50%\" r=\"\\{\\{10+temperature}}\" fill=\"gold\" stroke=\"yellow\" \n            opacity=\"{{0.4+temperature/100}}\"/>\n    \t\t<text x=\"50%\" y=\"65%\" font-size=\"80\" fill=\"white\">\\{\\{temperature}}℃</text>\n\t\t</svg>\n\t</script>\n```\n*Note:* don't mind reverse slash symbol. we just use it to transfer meaning. And when you data binding you don't need to add it. remember that!   \n\nAs above. We define a svg tag and it contains rectangle,circle shape and text. The circle's radius bind the data \\{\\{10 + temperature}}，so the radius will update with ß10 plus temperature when the temperature changed. As we can see the temperature has binded the data as well.   \n\nAnd last step, Let's combine the template and data with `Ractive.js`. the code as below:   \n\n``` javascript\n    var ractive = new Ractive({\n\t \t// The el option can be a node, an ID, or a CSS selector.\n    \tel:'container',\n    \t// We could pass in a string, but for the sake of convenience\n    \t// we're passing the ID of the <script> tag above.\n    \ttemplate:'#template',\n    \t// Here, we're passing in some initial data\n    \tdata: {\n       \t temperature:50\n    \t}\n    });\n```  \n\nSo the style as we can see below:   \n{% img /assets/images/legacy/ractive-svg-test.png 400 200 %}\n\nNow, we can change the temperature data and let `Ractive.js` to update the DOM automatically. So there we increase the temperature by 1 per 100 millisecond, and when the temperature larger than 60 then reset it to 0.   \n``` javascript\n\t setInterval(function(){\n    \tvar temp = ractive.get('temperature');\n    \ttemp = temp >= 60 ? 0 : ++temp; \n    \tractive.set('temperature',temp);\n\t },100);\n```\nSo the radius of circle and the text will automatically changed. This is `Ractive.js` simple usage. Hopeful you like it.\n ","slug":"2014-12-19-what-is-ractive-dot-js","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o4001vazv5b0ga8cpm","layout":"post","photos":[],"link":"","content":"<p><code>Ractive.js</code> is a <code>template-driven</code> UI library, it transforms your templates into blueprints for application that are interative by default. <code>Ractive.js</code> is very similar with <code>AngularJS</code>, and it supports <code>Two-way binding</code>, <code>animations</code> as well. Another powerfull feature is <code>SVG</code> support.   </p>\n<h3 id=\"Template-Data-UI\"><a href=\"#Template-Data-UI\" class=\"headerlink\" title=\"Template + Data &#x3D; UI\"></a>Template + Data &#x3D; UI</h3><p>You just need to prepare your html template and datas, and the <code>Ractive.js</code> will automatically to combine them then give you what you want. Whe you change your datas, it intelligently updates the real DOM.   </p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p>First, you need to include <code>Ractive.js</code> to your application. Just like include other javascript librarys easily. You can download it to local and then include it. And if you want include latest version, you just put below codes to your project.   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&#x27;http://cdn.ractivejs.org/latest/ractive.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>Second, we define a container that we want to render. Let’s give it id container.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And third, just need to define a template. Load template in many ways, for example we can use ajax call to get the template string. and here, we use script tag to include the template.  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;template&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/ractive&quot;</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">\t<span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;lightblue&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100%&quot;</span>/&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;25%&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;50%&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;\\&#123;\\&#123;10+temperature&#125;&#125;&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;gold&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;yellow&quot;</span> </span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-handlebars\">           <span class=\"attr\">opacity</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">0.4</span>+temperature/100&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">&quot;</span>/&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;50%&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;65%&quot;</span> <span class=\"attr\">font-size</span>=<span class=\"string\">&quot;80&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;white&quot;</span>&gt;</span>\\&#123;\\&#123;temperature&#125;&#125;℃<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">\t<span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>Note:</em> don’t mind reverse slash symbol. we just use it to transfer meaning. And when you data binding you don’t need to add it. remember that!   </p>\n<p>As above. We define a svg tag and it contains rectangle,circle shape and text. The circle’s radius bind the data NaN，so the radius will update with ß10 plus temperature when the temperature changed. As we can see the temperature has binded the data as well.   </p>\n<p>And last step, Let’s combine the template and data with <code>Ractive.js</code>. the code as below:   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> ractive = <span class=\"keyword\">new</span> <span class=\"title class_\">Ractive</span>(&#123;</span><br><span class=\"line\">\t \t<span class=\"comment\">// The el option can be a node, an ID, or a CSS selector.</span></span><br><span class=\"line\">    \t<span class=\"attr\">el</span>:<span class=\"string\">&#x27;container&#x27;</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// We could pass in a string, but for the sake of convenience</span></span><br><span class=\"line\">    \t<span class=\"comment\">// we&#x27;re passing the ID of the &lt;script&gt; tag above.</span></span><br><span class=\"line\">    \t<span class=\"attr\">template</span>:<span class=\"string\">&#x27;#template&#x27;</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// Here, we&#x27;re passing in some initial data</span></span><br><span class=\"line\">    \t<span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">       \t <span class=\"attr\">temperature</span>:<span class=\"number\">50</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">So the style as we can see below:   </span></span><br><span class=\"line\"><span class=\"string\">&#123;% img /assets/images/legacy/ractive-svg-test.png 400 200 %&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Now, we can change the temperature data and let `</span><span class=\"title class_\">Ractive</span>.<span class=\"property\">js</span><span class=\"string\">` to update the DOM automatically. So there we increase the temperature by 1 per 100 millisecond, and when the temperature larger than 60 then reset it to 0.   </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</span><br><span class=\"line\">\t <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">var</span> temp = ractive.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;temperature&#x27;</span>);</span><br><span class=\"line\">    \ttemp = temp &gt;= <span class=\"number\">60</span> ? <span class=\"number\">0</span> : ++temp; </span><br><span class=\"line\">    \tractive.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;temperature&#x27;</span>,temp);</span><br><span class=\"line\">\t &#125;,<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>So the radius of circle and the text will automatically changed. This is <code>Ractive.js</code> simple usage. Hopeful you like it.\n </p>\n","site":{"data":{}},"excerpt":"<p><code>Ractive.js</code> is a <code>template-driven</code> UI library, it transforms your templates into blueprints for application that are interative by default. <code>Ractive.js</code> is very similar with <code>AngularJS</code>, and it supports <code>Two-way binding</code>, <code>animations</code> as well. Another powerfull feature is <code>SVG</code> support.   </p>\n<h3 id=\"Template-Data-UI\"><a href=\"#Template-Data-UI\" class=\"headerlink\" title=\"Template + Data &#x3D; UI\"></a>Template + Data &#x3D; UI</h3><p>You just need to prepare your html template and datas, and the <code>Ractive.js</code> will automatically to combine them then give you what you want. Whe you change your datas, it intelligently updates the real DOM.   </p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p>First, you need to include <code>Ractive.js</code> to your application. Just like include other javascript librarys easily. You can download it to local and then include it. And if you want include latest version, you just put below codes to your project.   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&#x27;http://cdn.ractivejs.org/latest/ractive.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>","more":"<p>Second, we define a container that we want to render. Let’s give it id container.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And third, just need to define a template. Load template in many ways, for example we can use ajax call to get the template string. and here, we use script tag to include the template.  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;template&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/ractive&quot;</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">\t<span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;lightblue&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100%&quot;</span>/&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;25%&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;50%&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;\\&#123;\\&#123;10+temperature&#125;&#125;&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;gold&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;yellow&quot;</span> </span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-handlebars\">           <span class=\"attr\">opacity</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">0.4</span>+temperature/100&#125;&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">&quot;</span>/&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">   \t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;50%&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;65%&quot;</span> <span class=\"attr\">font-size</span>=<span class=\"string\">&quot;80&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;white&quot;</span>&gt;</span>\\&#123;\\&#123;temperature&#125;&#125;℃<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">\t<span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>Note:</em> don’t mind reverse slash symbol. we just use it to transfer meaning. And when you data binding you don’t need to add it. remember that!   </p>\n<p>As above. We define a svg tag and it contains rectangle,circle shape and text. The circle’s radius bind the data NaN，so the radius will update with ß10 plus temperature when the temperature changed. As we can see the temperature has binded the data as well.   </p>\n<p>And last step, Let’s combine the template and data with <code>Ractive.js</code>. the code as below:   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> ractive = <span class=\"keyword\">new</span> <span class=\"title class_\">Ractive</span>(&#123;</span><br><span class=\"line\">\t \t<span class=\"comment\">// The el option can be a node, an ID, or a CSS selector.</span></span><br><span class=\"line\">    \t<span class=\"attr\">el</span>:<span class=\"string\">&#x27;container&#x27;</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// We could pass in a string, but for the sake of convenience</span></span><br><span class=\"line\">    \t<span class=\"comment\">// we&#x27;re passing the ID of the &lt;script&gt; tag above.</span></span><br><span class=\"line\">    \t<span class=\"attr\">template</span>:<span class=\"string\">&#x27;#template&#x27;</span>,</span><br><span class=\"line\">    \t<span class=\"comment\">// Here, we&#x27;re passing in some initial data</span></span><br><span class=\"line\">    \t<span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">       \t <span class=\"attr\">temperature</span>:<span class=\"number\">50</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">So the style as we can see below:   </span></span><br><span class=\"line\"><span class=\"string\">&#123;% img /assets/images/legacy/ractive-svg-test.png 400 200 %&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Now, we can change the temperature data and let `</span><span class=\"title class_\">Ractive</span>.<span class=\"property\">js</span><span class=\"string\">` to update the DOM automatically. So there we increase the temperature by 1 per 100 millisecond, and when the temperature larger than 60 then reset it to 0.   </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> javascript</span><br><span class=\"line\">\t <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">var</span> temp = ractive.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;temperature&#x27;</span>);</span><br><span class=\"line\">    \ttemp = temp &gt;= <span class=\"number\">60</span> ? <span class=\"number\">0</span> : ++temp; </span><br><span class=\"line\">    \tractive.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;temperature&#x27;</span>,temp);</span><br><span class=\"line\">\t &#125;,<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>So the radius of circle and the text will automatically changed. This is <code>Ractive.js</code> simple usage. Hopeful you like it.\n </p>"},{"title":"What is cucumber","date":"2014-12-22T16:23:25.000Z","comments":1,"_content":"\n`Cucumber` is a tool that can execute `plain-text` functional descriptions. And also it's  `BDD(Behaviour Driven Development)` `automated tests`. It is written by `Ruby`, and now it supports more than 40 languages, such as `Java`, `C#` and `Scala` etc.\n\n### Install\nFirstly, we need to install `Ruby` and `RubyGems`, to check whether the installation of Ruby and RubyGems is successful. You can inputx the commands to terminal, just like as below:\n```\n~  ruby --version\nruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]\n~  gem --version\n2.0.14  \n```\n\nAnd then we can run the command below to install `Cucumber`:\n```\n~  gem install cucumber\n```\n\nAfter this, put below command to see how to use it.\n```\n~  cucumber --help\n```\n<!--more-->\n\n### Gherkin\n`Gherkin` is a language that can be understand by `Cucumber`. It's a `Business Readable`, `Domain Specific Language`. Very easy to understand what the functional want to do.    \n\nThe `Gherkin` has two purpose, documention and automated test. The structure is Treetop grammer than is part of Cucumber codebase and use indentation to format it.   \n\n The `Gherkin` has two conventions:\n + Single `Gherkin` source file contains a description of single feature.\n + The source file is feature extention file(`*.feature`).\n\nLike `YAML(Yet Another Markup Language)`, Gherkin is a line-oriented language that uses indentation to define structure. Most lines start with keyword. And you can start with a hash sign(#) to comment the text.\n\nA Gherkin source file usually looks like this\n\n``` gherkin\n 1: Feature: Some terse yet descriptive text of what is desired\n 2:   Textual description of the business value of this feature\n 3:   Business rules that govern the scope of the feature\n 4:   Any additional information that will make the feature easier to understand\n 5: \n 6:   Scenario: Some determinable business situation\n 7:     Given some precondition\n 8:       And some other precondition\n 9:      When some action by the actor\n10:       And some other action\n11:       And yet another action\n12:      Then some testable outcome is achieved\n13:       And something else we can check happens too\n14: \n15:   Scenario: A different situation\n```\nAbove the codes, It's very similar with `Given-When-Then` the `Feature`, `Scenario`, `Given`, `And`, `When`, `Then` all are keywords of `Gherkin`.","source":"_posts/2014-12-23-what-is-cucumber.markdown","raw":"---\n\ntitle: \"What is cucumber\"\ndate: 2014-12-23 00:23:25 +0800\ncomments: true\ncategories: Test\ntags: [Cucumber, Test]\n---\n\n`Cucumber` is a tool that can execute `plain-text` functional descriptions. And also it's  `BDD(Behaviour Driven Development)` `automated tests`. It is written by `Ruby`, and now it supports more than 40 languages, such as `Java`, `C#` and `Scala` etc.\n\n### Install\nFirstly, we need to install `Ruby` and `RubyGems`, to check whether the installation of Ruby and RubyGems is successful. You can inputx the commands to terminal, just like as below:\n```\n~  ruby --version\nruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]\n~  gem --version\n2.0.14  \n```\n\nAnd then we can run the command below to install `Cucumber`:\n```\n~  gem install cucumber\n```\n\nAfter this, put below command to see how to use it.\n```\n~  cucumber --help\n```\n<!--more-->\n\n### Gherkin\n`Gherkin` is a language that can be understand by `Cucumber`. It's a `Business Readable`, `Domain Specific Language`. Very easy to understand what the functional want to do.    \n\nThe `Gherkin` has two purpose, documention and automated test. The structure is Treetop grammer than is part of Cucumber codebase and use indentation to format it.   \n\n The `Gherkin` has two conventions:\n + Single `Gherkin` source file contains a description of single feature.\n + The source file is feature extention file(`*.feature`).\n\nLike `YAML(Yet Another Markup Language)`, Gherkin is a line-oriented language that uses indentation to define structure. Most lines start with keyword. And you can start with a hash sign(#) to comment the text.\n\nA Gherkin source file usually looks like this\n\n``` gherkin\n 1: Feature: Some terse yet descriptive text of what is desired\n 2:   Textual description of the business value of this feature\n 3:   Business rules that govern the scope of the feature\n 4:   Any additional information that will make the feature easier to understand\n 5: \n 6:   Scenario: Some determinable business situation\n 7:     Given some precondition\n 8:       And some other precondition\n 9:      When some action by the actor\n10:       And some other action\n11:       And yet another action\n12:      Then some testable outcome is achieved\n13:       And something else we can check happens too\n14: \n15:   Scenario: A different situation\n```\nAbove the codes, It's very similar with `Given-When-Then` the `Feature`, `Scenario`, `Given`, `And`, `When`, `Then` all are keywords of `Gherkin`.","slug":"2014-12-23-what-is-cucumber","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o5001yazv52wts2pl3","layout":"post","photos":[],"link":"","content":"<p><code>Cucumber</code> is a tool that can execute <code>plain-text</code> functional descriptions. And also it’s  <code>BDD(Behaviour Driven Development)</code> <code>automated tests</code>. It is written by <code>Ruby</code>, and now it supports more than 40 languages, such as <code>Java</code>, <code>C#</code> and <code>Scala</code> etc.</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>Firstly, we need to install <code>Ruby</code> and <code>RubyGems</code>, to check whether the installation of Ruby and RubyGems is successful. You can inputx the commands to terminal, just like as below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~  ruby --version</span><br><span class=\"line\">ruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]</span><br><span class=\"line\">~  gem --version</span><br><span class=\"line\">2.0.14  </span><br></pre></td></tr></table></figure>\n\n<p>And then we can run the command below to install <code>Cucumber</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~  gem install cucumber</span><br></pre></td></tr></table></figure>\n\n<p>After this, put below command to see how to use it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~  cucumber --help</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h3 id=\"Gherkin\"><a href=\"#Gherkin\" class=\"headerlink\" title=\"Gherkin\"></a>Gherkin</h3><p><code>Gherkin</code> is a language that can be understand by <code>Cucumber</code>. It’s a <code>Business Readable</code>, <code>Domain Specific Language</code>. Very easy to understand what the functional want to do.    </p>\n<p>The <code>Gherkin</code> has two purpose, documention and automated test. The structure is Treetop grammer than is part of Cucumber codebase and use indentation to format it.   </p>\n<p> The <code>Gherkin</code> has two conventions:</p>\n<ul>\n<li>Single <code>Gherkin</code> source file contains a description of single feature.</li>\n<li>The source file is feature extention file(<code>*.feature</code>).</li>\n</ul>\n<p>Like <code>YAML(Yet Another Markup Language)</code>, Gherkin is a line-oriented language that uses indentation to define structure. Most lines start with keyword. And you can start with a hash sign(#) to comment the text.</p>\n<p>A Gherkin source file usually looks like this</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1: <span class=\"keyword\">Feature</span>: Some terse yet descriptive text of what is desired</span><br><span class=\"line\"> 2:   Textual description of the business value of this feature</span><br><span class=\"line\"> 3:   <span class=\"keyword\">Business</span> rules that govern the scope of the feature</span><br><span class=\"line\"> 4:   Any additional information that will make the feature easier to understand</span><br><span class=\"line\"> 5: </span><br><span class=\"line\"> 6:   <span class=\"keyword\">Scenario</span>: Some determinable business situation</span><br><span class=\"line\"> 7:     <span class=\"keyword\">Given</span> some precondition</span><br><span class=\"line\"> 8:       <span class=\"keyword\">And</span> some other precondition</span><br><span class=\"line\"> 9:      <span class=\"keyword\">When</span> some action by the actor</span><br><span class=\"line\">10:       <span class=\"keyword\">And</span> some other action</span><br><span class=\"line\">11:       <span class=\"keyword\">And</span> yet another action</span><br><span class=\"line\">12:      <span class=\"keyword\">Then</span> some testable outcome is achieved</span><br><span class=\"line\">13:       <span class=\"keyword\">And</span> something else we can check happens too</span><br><span class=\"line\">14: </span><br><span class=\"line\">15:   <span class=\"keyword\">Scenario</span>: A different situation</span><br></pre></td></tr></table></figure>\n<p>Above the codes, It’s very similar with <code>Given-When-Then</code> the <code>Feature</code>, <code>Scenario</code>, <code>Given</code>, <code>And</code>, <code>When</code>, <code>Then</code> all are keywords of <code>Gherkin</code>.</p>\n","site":{"data":{}},"excerpt":"<p><code>Cucumber</code> is a tool that can execute <code>plain-text</code> functional descriptions. And also it’s  <code>BDD(Behaviour Driven Development)</code> <code>automated tests</code>. It is written by <code>Ruby</code>, and now it supports more than 40 languages, such as <code>Java</code>, <code>C#</code> and <code>Scala</code> etc.</p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><p>Firstly, we need to install <code>Ruby</code> and <code>RubyGems</code>, to check whether the installation of Ruby and RubyGems is successful. You can inputx the commands to terminal, just like as below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~  ruby --version</span><br><span class=\"line\">ruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]</span><br><span class=\"line\">~  gem --version</span><br><span class=\"line\">2.0.14  </span><br></pre></td></tr></table></figure>\n\n<p>And then we can run the command below to install <code>Cucumber</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~  gem install cucumber</span><br></pre></td></tr></table></figure>\n\n<p>After this, put below command to see how to use it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~  cucumber --help</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Gherkin\"><a href=\"#Gherkin\" class=\"headerlink\" title=\"Gherkin\"></a>Gherkin</h3><p><code>Gherkin</code> is a language that can be understand by <code>Cucumber</code>. It’s a <code>Business Readable</code>, <code>Domain Specific Language</code>. Very easy to understand what the functional want to do.    </p>\n<p>The <code>Gherkin</code> has two purpose, documention and automated test. The structure is Treetop grammer than is part of Cucumber codebase and use indentation to format it.   </p>\n<p> The <code>Gherkin</code> has two conventions:</p>\n<ul>\n<li>Single <code>Gherkin</code> source file contains a description of single feature.</li>\n<li>The source file is feature extention file(<code>*.feature</code>).</li>\n</ul>\n<p>Like <code>YAML(Yet Another Markup Language)</code>, Gherkin is a line-oriented language that uses indentation to define structure. Most lines start with keyword. And you can start with a hash sign(#) to comment the text.</p>\n<p>A Gherkin source file usually looks like this</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 1: <span class=\"keyword\">Feature</span>: Some terse yet descriptive text of what is desired</span><br><span class=\"line\"> 2:   Textual description of the business value of this feature</span><br><span class=\"line\"> 3:   <span class=\"keyword\">Business</span> rules that govern the scope of the feature</span><br><span class=\"line\"> 4:   Any additional information that will make the feature easier to understand</span><br><span class=\"line\"> 5: </span><br><span class=\"line\"> 6:   <span class=\"keyword\">Scenario</span>: Some determinable business situation</span><br><span class=\"line\"> 7:     <span class=\"keyword\">Given</span> some precondition</span><br><span class=\"line\"> 8:       <span class=\"keyword\">And</span> some other precondition</span><br><span class=\"line\"> 9:      <span class=\"keyword\">When</span> some action by the actor</span><br><span class=\"line\">10:       <span class=\"keyword\">And</span> some other action</span><br><span class=\"line\">11:       <span class=\"keyword\">And</span> yet another action</span><br><span class=\"line\">12:      <span class=\"keyword\">Then</span> some testable outcome is achieved</span><br><span class=\"line\">13:       <span class=\"keyword\">And</span> something else we can check happens too</span><br><span class=\"line\">14: </span><br><span class=\"line\">15:   <span class=\"keyword\">Scenario</span>: A different situation</span><br></pre></td></tr></table></figure>\n<p>Above the codes, It’s very similar with <code>Given-When-Then</code> the <code>Feature</code>, <code>Scenario</code>, <code>Given</code>, <code>And</code>, <code>When</code>, <code>Then</code> all are keywords of <code>Gherkin</code>.</p>"},{"title":"how to install packages in sublime text 3","date":"2014-12-26T14:35:36.000Z","comments":1,"_content":"`Sublime Text` is a sophisticated text editor for code, markup and prose. You can go to offical **[website](http://www.sublimetext.com/)** to download and see how to use it. It's a very powerful weapon for developer. And also it has so many packages to expand its functional.   \n\nIf you want to install packages in your sublime text. First of all, you need to install `Package Control` that is `Sublime Text` package manager that makes it exceedingly simple to find, install and keep packages up-to-date.  \n\nOpen Sublime Text 3 and choose `View > Show Console` menu. Paste below codes into console.\n``` python\nimport urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n<!--more-->\nThis code creates the Installed Packages folder for you (if necessary), and then downloads the `Package Control.sublime-package` into it.   \n\nSince the `Package Control` install successfull, you can intall any packages which you want, such as less,less2css package. Press `Command+Shift+P` open the `Command palette` and find the `Package Control: Install Package`, like this:   \n![command palette](/assets/images/legacy/command-palette.png)\n\nChoose `Package Control: Install Package` menu, and wait a seconds it will prompt package installer, and then you can search packages what you want and install it.   \n![package installer](/assets/images/legacy/package-installer.png) \n\n\n\n\n\n ","source":"_posts/2014-12-26-how-to-install-sublime-text-plugin.markdown","raw":"---\n\ntitle: \"how to install packages in sublime text 3\"\ndate: 2014-12-26 22:35:36 +0800\ncomments: true\ncategories: Tools\ntags: [Sublime Text, Tool]\n---\n`Sublime Text` is a sophisticated text editor for code, markup and prose. You can go to offical **[website](http://www.sublimetext.com/)** to download and see how to use it. It's a very powerful weapon for developer. And also it has so many packages to expand its functional.   \n\nIf you want to install packages in your sublime text. First of all, you need to install `Package Control` that is `Sublime Text` package manager that makes it exceedingly simple to find, install and keep packages up-to-date.  \n\nOpen Sublime Text 3 and choose `View > Show Console` menu. Paste below codes into console.\n``` python\nimport urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n<!--more-->\nThis code creates the Installed Packages folder for you (if necessary), and then downloads the `Package Control.sublime-package` into it.   \n\nSince the `Package Control` install successfull, you can intall any packages which you want, such as less,less2css package. Press `Command+Shift+P` open the `Command palette` and find the `Package Control: Install Package`, like this:   \n![command palette](/assets/images/legacy/command-palette.png)\n\nChoose `Package Control: Install Package` menu, and wait a seconds it will prompt package installer, and then you can search packages what you want and install it.   \n![package installer](/assets/images/legacy/package-installer.png) \n\n\n\n\n\n ","slug":"2014-12-26-how-to-install-sublime-text-plugin","published":1,"updated":"2023-09-02T17:27:29.812Z","_id":"clm27g4o60020azv57cvqdjyx","layout":"post","photos":[],"link":"","content":"<p><code>Sublime Text</code> is a sophisticated text editor for code, markup and prose. You can go to offical <strong><a href=\"http://www.sublimetext.com/\">website</a></strong> to download and see how to use it. It’s a very powerful weapon for developer. And also it has so many packages to expand its functional.   </p>\n<p>If you want to install packages in your sublime text. First of all, you need to install <code>Package Control</code> that is <code>Sublime Text</code> package manager that makes it exceedingly simple to find, install and keep packages up-to-date.  </p>\n<p>Open Sublime Text 3 and choose <code>View &gt; Show Console</code> menu. Paste below codes into console.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">&#x27;2deb499853c4371624f5a07e27c334aa&#x27;</span> + <span class=\"string\">&#x27;bf8c4e67d14fb0525ba4f89698a6d7e1&#x27;</span>; pf = <span class=\"string\">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;%20&#x27;</span>)).read(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"built_in\">open</span>(os.path.join( ipp, pf), <span class=\"string\">&#x27;wb&#x27;</span> ).write(by)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>This code creates the Installed Packages folder for you (if necessary), and then downloads the <code>Package Control.sublime-package</code> into it.   </p>\n<p>Since the <code>Package Control</code> install successfull, you can intall any packages which you want, such as less,less2css package. Press <code>Command+Shift+P</code> open the <code>Command palette</code> and find the <code>Package Control: Install Package</code>, like this:<br><img src=\"/assets/images/legacy/command-palette.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/command-palette.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"command palette\"></p>\n<p>Choose <code>Package Control: Install Package</code> menu, and wait a seconds it will prompt package installer, and then you can search packages what you want and install it.<br><img src=\"/assets/images/legacy/package-installer.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/package-installer.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"package installer\"> </p>\n","site":{"data":{}},"excerpt":"<p><code>Sublime Text</code> is a sophisticated text editor for code, markup and prose. You can go to offical <strong><a href=\"http://www.sublimetext.com/\">website</a></strong> to download and see how to use it. It’s a very powerful weapon for developer. And also it has so many packages to expand its functional.   </p>\n<p>If you want to install packages in your sublime text. First of all, you need to install <code>Package Control</code> that is <code>Sublime Text</code> package manager that makes it exceedingly simple to find, install and keep packages up-to-date.  </p>\n<p>Open Sublime Text 3 and choose <code>View &gt; Show Console</code> menu. Paste below codes into console.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">&#x27;2deb499853c4371624f5a07e27c334aa&#x27;</span> + <span class=\"string\">&#x27;bf8c4e67d14fb0525ba4f89698a6d7e1&#x27;</span>; pf = <span class=\"string\">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;%20&#x27;</span>)).read(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"built_in\">open</span>(os.path.join( ipp, pf), <span class=\"string\">&#x27;wb&#x27;</span> ).write(by)</span><br></pre></td></tr></table></figure>","more":"<p>This code creates the Installed Packages folder for you (if necessary), and then downloads the <code>Package Control.sublime-package</code> into it.   </p>\n<p>Since the <code>Package Control</code> install successfull, you can intall any packages which you want, such as less,less2css package. Press <code>Command+Shift+P</code> open the <code>Command palette</code> and find the <code>Package Control: Install Package</code>, like this:<br><img src=\"/assets/images/legacy/command-palette.png\" alt=\"command palette\"></p>\n<p>Choose <code>Package Control: Install Package</code> menu, and wait a seconds it will prompt package installer, and then you can search packages what you want and install it.<br><img src=\"/assets/images/legacy/package-installer.png\" alt=\"package installer\"> </p>"},{"title":"How to run multiple IE version on same computer","date":"2015-01-07T08:31:17.000Z","comments":1,"_content":"\nAs web developer, we usually need to face the challenge of making cross-browser compatible. Especially IE browser's multiple version. Because its quirks of rendering websites differently across its versions of `IE6`, `IE7`, `IE8` and possibly `IE9` and `IE10`.   \n\nMost of us have only one version of IE browser on our computer, and the compatible mode of IE is not really specific version which you want to simulate.   \n<!-- more-->\n\nSo how to run multiple version of IE on same time. Many developers install virtual machine to use the different versions. But this is not the best way.   \n\nIn there, I will tell you there has a free tool called `IETester` can solve your problem. Use this tool can quick and easy way to run IE6, IE7, IE8 and IE9 on the same computer at the same time. And this tool just only support windows operation system. It also supports develope tool which can help developer to check web application on different version of IE.   \n\nThis is a screen shot of `IETester`:    \n![](/assets/images/legacy/ie-tester.png)\n\nYou can download it from this address [IETester](http://www.my-debugbar.com/ietester/install-ietester-v0.5.4.exe)   \n\nThere has another online tools called `Browser Sandbox` can solve this problem, but it is not free, if you have money, this tool will be better for you. It support any versions of `Firefox`, `Opera`, `Safari`, `Chrome` and also `IE`. You can go to this [website](http://spoon.net/browsers/) to visit.\n","source":"_posts/2015-01-07-how-to-run-multiple-ie-version-on-same-cotim.markdown","raw":"---\n\ntitle: \"How to run multiple IE version on same computer\"\ndate: 2015-01-07 16:31:17 +0800\ncomments: true\ncategories: Frontend\ntags: [IETester, IE, Tool]\n---\n\nAs web developer, we usually need to face the challenge of making cross-browser compatible. Especially IE browser's multiple version. Because its quirks of rendering websites differently across its versions of `IE6`, `IE7`, `IE8` and possibly `IE9` and `IE10`.   \n\nMost of us have only one version of IE browser on our computer, and the compatible mode of IE is not really specific version which you want to simulate.   \n<!-- more-->\n\nSo how to run multiple version of IE on same time. Many developers install virtual machine to use the different versions. But this is not the best way.   \n\nIn there, I will tell you there has a free tool called `IETester` can solve your problem. Use this tool can quick and easy way to run IE6, IE7, IE8 and IE9 on the same computer at the same time. And this tool just only support windows operation system. It also supports develope tool which can help developer to check web application on different version of IE.   \n\nThis is a screen shot of `IETester`:    \n![](/assets/images/legacy/ie-tester.png)\n\nYou can download it from this address [IETester](http://www.my-debugbar.com/ietester/install-ietester-v0.5.4.exe)   \n\nThere has another online tools called `Browser Sandbox` can solve this problem, but it is not free, if you have money, this tool will be better for you. It support any versions of `Firefox`, `Opera`, `Safari`, `Chrome` and also `IE`. You can go to this [website](http://spoon.net/browsers/) to visit.\n","slug":"2015-01-07-how-to-run-multiple-ie-version-on-same-cotim","published":1,"updated":"2023-09-02T17:27:29.812Z","_id":"clm27g4o70022azv5aku299g7","layout":"post","photos":[],"link":"","content":"<p>As web developer, we usually need to face the challenge of making cross-browser compatible. Especially IE browser’s multiple version. Because its quirks of rendering websites differently across its versions of <code>IE6</code>, <code>IE7</code>, <code>IE8</code> and possibly <code>IE9</code> and <code>IE10</code>.   </p>\n<p>Most of us have only one version of IE browser on our computer, and the compatible mode of IE is not really specific version which you want to simulate.   </p>\n<span id=\"more\"></span>\n\n<p>So how to run multiple version of IE on same time. Many developers install virtual machine to use the different versions. But this is not the best way.   </p>\n<p>In there, I will tell you there has a free tool called <code>IETester</code> can solve your problem. Use this tool can quick and easy way to run IE6, IE7, IE8 and IE9 on the same computer at the same time. And this tool just only support windows operation system. It also supports develope tool which can help developer to check web application on different version of IE.   </p>\n<p>This is a screen shot of <code>IETester</code>:<br><img src=\"/assets/images/legacy/ie-tester.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/ie-tester.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>You can download it from this address <a href=\"http://www.my-debugbar.com/ietester/install-ietester-v0.5.4.exe\">IETester</a>   </p>\n<p>There has another online tools called <code>Browser Sandbox</code> can solve this problem, but it is not free, if you have money, this tool will be better for you. It support any versions of <code>Firefox</code>, <code>Opera</code>, <code>Safari</code>, <code>Chrome</code> and also <code>IE</code>. You can go to this <a href=\"http://spoon.net/browsers/\">website</a> to visit.</p>\n","site":{"data":{}},"excerpt":"<p>As web developer, we usually need to face the challenge of making cross-browser compatible. Especially IE browser’s multiple version. Because its quirks of rendering websites differently across its versions of <code>IE6</code>, <code>IE7</code>, <code>IE8</code> and possibly <code>IE9</code> and <code>IE10</code>.   </p>\n<p>Most of us have only one version of IE browser on our computer, and the compatible mode of IE is not really specific version which you want to simulate.   </p>","more":"<p>So how to run multiple version of IE on same time. Many developers install virtual machine to use the different versions. But this is not the best way.   </p>\n<p>In there, I will tell you there has a free tool called <code>IETester</code> can solve your problem. Use this tool can quick and easy way to run IE6, IE7, IE8 and IE9 on the same computer at the same time. And this tool just only support windows operation system. It also supports develope tool which can help developer to check web application on different version of IE.   </p>\n<p>This is a screen shot of <code>IETester</code>:<br><img src=\"/assets/images/legacy/ie-tester.png\"></p>\n<p>You can download it from this address <a href=\"http://www.my-debugbar.com/ietester/install-ietester-v0.5.4.exe\">IETester</a>   </p>\n<p>There has another online tools called <code>Browser Sandbox</code> can solve this problem, but it is not free, if you have money, this tool will be better for you. It support any versions of <code>Firefox</code>, <code>Opera</code>, <code>Safari</code>, <code>Chrome</code> and also <code>IE</code>. You can go to this <a href=\"http://spoon.net/browsers/\">website</a> to visit.</p>"},{"title":"A New Way For Developing Web Application Front-End","date":"2015-01-13T14:43:30.000Z","comments":1,"_content":"When we develop web application, if we write or modify the HTML structure, CSS style and javascript, we need to compile the code and deploy it, and then refresh page, finally we can see our changes. There are so many steps. So could we skip these steps and just see our changes on page directly when we save the codes. Yes, I can answer you now.    \n\nIn order to achieve this goal, we need to install `Guard`, `LiveReload` and related stuff, configure it in our web application project.  \n\n<!-- more -->  \n\n### Guard ###\n`Guard` is a command line tool to easily handle events on file system modifications. The offical website in [here](http://guardgem.org/).\n\n+ File system changes handled by awesome Listen gem.\n+ Support for visual system notifications.\n+ Huge eco-system with more than 220 guard plugins, go to this [website](https://rubygems.org/search?query=guard-) to get plugins what you want.   \n\nThe simplest way to install guard is to use `Bundler`. Go to the guard offical website to see how to install it.    \n\n### LiveReload ###\n`LiveReload` monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed.    \nEven cooler, when you change a CSS file or an image, the browser is updated instantly without reloading the page.\n\nAnd here, we use `guard-livereload` plugin to notificate the browser to reload page. this plugin base on `Guard` and `LiveReload`, you have to install Guard firstly. Visit this [website](https://github.com/guard/guard-livereload/) to see how to install it.\n\n###LiveReload Safari/Chrome extension###\nFinally, you need to install `LiveReload Safari Or Chrome Extension`, and here, we just use chrome to load web application. So go to Chrome Web Store and find livereload extension to install it on your chrome browser. And also you can use Safari browser.\n\nAnd now the tools we need have been installed. So let's getting started.\n```\n$ guard init livereload\n```\nBy runing above command line, it will add guard definition to your `Guardfile`. You can adapt your 'view' files like you want. And the default content of Guardfile by livereload initialize is below:    \n``` ruby\nguard 'livereload' do\n  watch(%r{app/views/.+\\.(erb|haml|slim)})\n  watch(%r{app/helpers/.+\\.rb})\n  watch(%r{public/.+\\.(css|js|html)})\n  watch(%r{config/locales/.+\\.yml})\n  # Rails Assets Pipeline\n  watch(%r{(app|vendor)(/assets/\\w+/(.+\\.(css|js|html))).*}) { |m| \"/assets/#{m[3]}\" }\nend\n```\nAnd you can see that there has some watch command in the Guardfile. Changing it by your situation.\n\nNow I will use a login page to test the guard and livereload how to work. This project contains script file, less file and html file. When we change the less file it will generate css file automatically, and here we use Sublime Text plugin to finished it, and also you can use `guard-less` plugin which is guard plugin.   \n![](/assets/images/legacy/project-structure.png)\n\nIn test project directory, we can find the Gemfile and Guardfile.\n``` ruby Gemfile\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\ngroup :development do \n\tgem 'guard'\n\tgem 'guard-livereload', require: false\nend\n```\nAnd here we just only use `guard-livereload plugin`, we also can use `guard-less` to configure the less to auto generate css file. But here we use the `Sublime Text` development tools to develop this project, it supports plugin to generate less to css.    \n\nLet's see the guard how to watch our project files. the content of Guardfile is below:\n``` ruby Guardfile\n# A sample Guardfile\n# More info at https://github.com/guard/guard#readme\n\n## Uncomment and set this to only include directories you want to watch\n# directories %w(app lib config test spec feature)\n\n## Uncomment to clear the screen before every task\n# clearing :on\n\n## Guard internally checks for changes in the Guardfile and exits.\n## If you want Guard to automatically start up again, run guard in a\n## shell loop, e.g.:\n##\n##  $ while bundle exec guard; do echo \"Restarting Guard...\"; done\n##\n## Note: if you are using the `directories` clause above and you are not\n## watching the project directory ('.'), the you will want to move the Guardfile\n## to a watched dir and symlink it back, e.g.\n#\n#  $ mkdir config\n#  $ mv Guardfile config/\n#  $ ln -s config/Guardfile .\n#\n# and, you'll have to watch \"config/Guardfile\" instead of \"Guardfile\"\n\nguard 'livereload' do\n\twatch /.*/\nend\n```\nIn there, you will see that the all file in this project directory has been watched by guard-livereload. \n\nType below commands in your terminal.\n```\n$ guard\n```\nIt will prompt you that LiveReload is waiting for a browser to connect. And the Guard is now watching at your specific files.\n\nOpen the web application on your chrome browser, and click LiveReload extension. And now you will see the terminal has a message said Browser connected.    \n\nSo far, you have prepared all configurations. And now you can modify the source file and save it, then you will see the web application automatically refresh.   \n![](/assets/images/legacy/auto-refresh-page.png)\n\n\n","source":"_posts/2015-01-13-a-new-way-for-developing-web-application-front-end.markdown","raw":"---\n\ntitle: \"A New Way For Developing Web Application Front-End\"\ndate: 2015-01-13 22:43:30 +0800\ncomments: true\ncategories: Frontend\ntags: [Guard, LiveReload, Tool]\n---\nWhen we develop web application, if we write or modify the HTML structure, CSS style and javascript, we need to compile the code and deploy it, and then refresh page, finally we can see our changes. There are so many steps. So could we skip these steps and just see our changes on page directly when we save the codes. Yes, I can answer you now.    \n\nIn order to achieve this goal, we need to install `Guard`, `LiveReload` and related stuff, configure it in our web application project.  \n\n<!-- more -->  \n\n### Guard ###\n`Guard` is a command line tool to easily handle events on file system modifications. The offical website in [here](http://guardgem.org/).\n\n+ File system changes handled by awesome Listen gem.\n+ Support for visual system notifications.\n+ Huge eco-system with more than 220 guard plugins, go to this [website](https://rubygems.org/search?query=guard-) to get plugins what you want.   \n\nThe simplest way to install guard is to use `Bundler`. Go to the guard offical website to see how to install it.    \n\n### LiveReload ###\n`LiveReload` monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed.    \nEven cooler, when you change a CSS file or an image, the browser is updated instantly without reloading the page.\n\nAnd here, we use `guard-livereload` plugin to notificate the browser to reload page. this plugin base on `Guard` and `LiveReload`, you have to install Guard firstly. Visit this [website](https://github.com/guard/guard-livereload/) to see how to install it.\n\n###LiveReload Safari/Chrome extension###\nFinally, you need to install `LiveReload Safari Or Chrome Extension`, and here, we just use chrome to load web application. So go to Chrome Web Store and find livereload extension to install it on your chrome browser. And also you can use Safari browser.\n\nAnd now the tools we need have been installed. So let's getting started.\n```\n$ guard init livereload\n```\nBy runing above command line, it will add guard definition to your `Guardfile`. You can adapt your 'view' files like you want. And the default content of Guardfile by livereload initialize is below:    \n``` ruby\nguard 'livereload' do\n  watch(%r{app/views/.+\\.(erb|haml|slim)})\n  watch(%r{app/helpers/.+\\.rb})\n  watch(%r{public/.+\\.(css|js|html)})\n  watch(%r{config/locales/.+\\.yml})\n  # Rails Assets Pipeline\n  watch(%r{(app|vendor)(/assets/\\w+/(.+\\.(css|js|html))).*}) { |m| \"/assets/#{m[3]}\" }\nend\n```\nAnd you can see that there has some watch command in the Guardfile. Changing it by your situation.\n\nNow I will use a login page to test the guard and livereload how to work. This project contains script file, less file and html file. When we change the less file it will generate css file automatically, and here we use Sublime Text plugin to finished it, and also you can use `guard-less` plugin which is guard plugin.   \n![](/assets/images/legacy/project-structure.png)\n\nIn test project directory, we can find the Gemfile and Guardfile.\n``` ruby Gemfile\n# A sample Gemfile\nsource \"https://rubygems.org\"\n\n# gem \"rails\"\ngroup :development do \n\tgem 'guard'\n\tgem 'guard-livereload', require: false\nend\n```\nAnd here we just only use `guard-livereload plugin`, we also can use `guard-less` to configure the less to auto generate css file. But here we use the `Sublime Text` development tools to develop this project, it supports plugin to generate less to css.    \n\nLet's see the guard how to watch our project files. the content of Guardfile is below:\n``` ruby Guardfile\n# A sample Guardfile\n# More info at https://github.com/guard/guard#readme\n\n## Uncomment and set this to only include directories you want to watch\n# directories %w(app lib config test spec feature)\n\n## Uncomment to clear the screen before every task\n# clearing :on\n\n## Guard internally checks for changes in the Guardfile and exits.\n## If you want Guard to automatically start up again, run guard in a\n## shell loop, e.g.:\n##\n##  $ while bundle exec guard; do echo \"Restarting Guard...\"; done\n##\n## Note: if you are using the `directories` clause above and you are not\n## watching the project directory ('.'), the you will want to move the Guardfile\n## to a watched dir and symlink it back, e.g.\n#\n#  $ mkdir config\n#  $ mv Guardfile config/\n#  $ ln -s config/Guardfile .\n#\n# and, you'll have to watch \"config/Guardfile\" instead of \"Guardfile\"\n\nguard 'livereload' do\n\twatch /.*/\nend\n```\nIn there, you will see that the all file in this project directory has been watched by guard-livereload. \n\nType below commands in your terminal.\n```\n$ guard\n```\nIt will prompt you that LiveReload is waiting for a browser to connect. And the Guard is now watching at your specific files.\n\nOpen the web application on your chrome browser, and click LiveReload extension. And now you will see the terminal has a message said Browser connected.    \n\nSo far, you have prepared all configurations. And now you can modify the source file and save it, then you will see the web application automatically refresh.   \n![](/assets/images/legacy/auto-refresh-page.png)\n\n\n","slug":"2015-01-13-a-new-way-for-developing-web-application-front-end","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o70023azv5f34oe1w2","layout":"post","photos":[],"link":"","content":"<p>When we develop web application, if we write or modify the HTML structure, CSS style and javascript, we need to compile the code and deploy it, and then refresh page, finally we can see our changes. There are so many steps. So could we skip these steps and just see our changes on page directly when we save the codes. Yes, I can answer you now.    </p>\n<p>In order to achieve this goal, we need to install <code>Guard</code>, <code>LiveReload</code> and related stuff, configure it in our web application project.  </p>\n<span id=\"more\"></span>  \n\n<h3 id=\"Guard\"><a href=\"#Guard\" class=\"headerlink\" title=\"Guard\"></a>Guard</h3><p><code>Guard</code> is a command line tool to easily handle events on file system modifications. The offical website in <a href=\"http://guardgem.org/\">here</a>.</p>\n<ul>\n<li>File system changes handled by awesome Listen gem.</li>\n<li>Support for visual system notifications.</li>\n<li>Huge eco-system with more than 220 guard plugins, go to this <a href=\"https://rubygems.org/search?query=guard-\">website</a> to get plugins what you want.</li>\n</ul>\n<p>The simplest way to install guard is to use <code>Bundler</code>. Go to the guard offical website to see how to install it.    </p>\n<h3 id=\"LiveReload\"><a href=\"#LiveReload\" class=\"headerlink\" title=\"LiveReload\"></a>LiveReload</h3><p><code>LiveReload</code> monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed.<br>Even cooler, when you change a CSS file or an image, the browser is updated instantly without reloading the page.</p>\n<p>And here, we use <code>guard-livereload</code> plugin to notificate the browser to reload page. this plugin base on <code>Guard</code> and <code>LiveReload</code>, you have to install Guard firstly. Visit this <a href=\"https://github.com/guard/guard-livereload/\">website</a> to see how to install it.</p>\n<p>###LiveReload Safari&#x2F;Chrome extension###<br>Finally, you need to install <code>LiveReload Safari Or Chrome Extension</code>, and here, we just use chrome to load web application. So go to Chrome Web Store and find livereload extension to install it on your chrome browser. And also you can use Safari browser.</p>\n<p>And now the tools we need have been installed. So let’s getting started.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ guard init livereload</span><br></pre></td></tr></table></figure>\n<p>By runing above command line, it will add guard definition to your <code>Guardfile</code>. You can adapt your ‘view’ files like you want. And the default content of Guardfile by livereload initialize is below:    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">guard <span class=\"string\">&#x27;livereload&#x27;</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;app/views/.+\\.(erb|haml|slim)&#125;</span>)</span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;app/helpers/.+\\.rb&#125;</span>)</span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;public/.+\\.(css|js|html)&#125;</span>)</span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;config/locales/.+\\.yml&#125;</span>)</span><br><span class=\"line\">  <span class=\"comment\"># Rails Assets Pipeline</span></span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;(app|vendor)(/assets/\\w+/(.+\\.(css|js|html))).*&#125;</span>) &#123; |<span class=\"params\">m</span>| <span class=\"string\">&quot;/assets/<span class=\"subst\">#&#123;m[<span class=\"number\">3</span>]&#125;</span>&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>And you can see that there has some watch command in the Guardfile. Changing it by your situation.</p>\n<p>Now I will use a login page to test the guard and livereload how to work. This project contains script file, less file and html file. When we change the less file it will generate css file automatically, and here we use Sublime Text plugin to finished it, and also you can use <code>guard-less</code> plugin which is guard plugin.<br><img src=\"/assets/images/legacy/project-structure.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/project-structure.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>In test project directory, we can find the Gemfile and Guardfile.</p>\n<figure class=\"highlight ruby\"><figcaption><span>Gemfile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A sample Gemfile</span></span><br><span class=\"line\">source <span class=\"string\">&quot;https://rubygems.org&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gem &quot;rails&quot;</span></span><br><span class=\"line\">group <span class=\"symbol\">:development</span> <span class=\"keyword\">do</span> </span><br><span class=\"line\">\tgem <span class=\"string\">&#x27;guard&#x27;</span></span><br><span class=\"line\">\tgem <span class=\"string\">&#x27;guard-livereload&#x27;</span>, <span class=\"symbol\">require:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>And here we just only use <code>guard-livereload plugin</code>, we also can use <code>guard-less</code> to configure the less to auto generate css file. But here we use the <code>Sublime Text</code> development tools to develop this project, it supports plugin to generate less to css.    </p>\n<p>Let’s see the guard how to watch our project files. the content of Guardfile is below:</p>\n<figure class=\"highlight ruby\"><figcaption><span>Guardfile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A sample Guardfile</span></span><br><span class=\"line\"><span class=\"comment\"># More info at https://github.com/guard/guard#readme</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Uncomment and set this to only include directories you want to watch</span></span><br><span class=\"line\"><span class=\"comment\"># directories %w(app lib config test spec feature)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Uncomment to clear the screen before every task</span></span><br><span class=\"line\"><span class=\"comment\"># clearing :on</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Guard internally checks for changes in the Guardfile and exits.</span></span><br><span class=\"line\"><span class=\"comment\">## If you want Guard to automatically start up again, run guard in a</span></span><br><span class=\"line\"><span class=\"comment\">## shell loop, e.g.:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">##  $ while bundle exec guard; do echo &quot;Restarting Guard...&quot;; done</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## Note: if you are using the `directories` clause above and you are not</span></span><br><span class=\"line\"><span class=\"comment\">## watching the project directory (&#x27;.&#x27;), the you will want to move the Guardfile</span></span><br><span class=\"line\"><span class=\"comment\">## to a watched dir and symlink it back, e.g.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  $ mkdir config</span></span><br><span class=\"line\"><span class=\"comment\">#  $ mv Guardfile config/</span></span><br><span class=\"line\"><span class=\"comment\">#  $ ln -s config/Guardfile .</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># and, you&#x27;ll have to watch &quot;config/Guardfile&quot; instead of &quot;Guardfile&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">guard <span class=\"string\">&#x27;livereload&#x27;</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\twatch /.*<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">end</span></span><br></pre></td></tr></table></figure>\n<p>In there, you will see that the all file in this project directory has been watched by guard-livereload. </p>\n<p>Type below commands in your terminal.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ guard</span><br></pre></td></tr></table></figure>\n<p>It will prompt you that LiveReload is waiting for a browser to connect. And the Guard is now watching at your specific files.</p>\n<p>Open the web application on your chrome browser, and click LiveReload extension. And now you will see the terminal has a message said Browser connected.    </p>\n<p>So far, you have prepared all configurations. And now you can modify the source file and save it, then you will see the web application automatically refresh.<br><img src=\"/assets/images/legacy/auto-refresh-page.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/auto-refresh-page.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n","site":{"data":{}},"excerpt":"<p>When we develop web application, if we write or modify the HTML structure, CSS style and javascript, we need to compile the code and deploy it, and then refresh page, finally we can see our changes. There are so many steps. So could we skip these steps and just see our changes on page directly when we save the codes. Yes, I can answer you now.    </p>\n<p>In order to achieve this goal, we need to install <code>Guard</code>, <code>LiveReload</code> and related stuff, configure it in our web application project.  </p>","more":"<h3 id=\"Guard\"><a href=\"#Guard\" class=\"headerlink\" title=\"Guard\"></a>Guard</h3><p><code>Guard</code> is a command line tool to easily handle events on file system modifications. The offical website in <a href=\"http://guardgem.org/\">here</a>.</p>\n<ul>\n<li>File system changes handled by awesome Listen gem.</li>\n<li>Support for visual system notifications.</li>\n<li>Huge eco-system with more than 220 guard plugins, go to this <a href=\"https://rubygems.org/search?query=guard-\">website</a> to get plugins what you want.</li>\n</ul>\n<p>The simplest way to install guard is to use <code>Bundler</code>. Go to the guard offical website to see how to install it.    </p>\n<h3 id=\"LiveReload\"><a href=\"#LiveReload\" class=\"headerlink\" title=\"LiveReload\"></a>LiveReload</h3><p><code>LiveReload</code> monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed.<br>Even cooler, when you change a CSS file or an image, the browser is updated instantly without reloading the page.</p>\n<p>And here, we use <code>guard-livereload</code> plugin to notificate the browser to reload page. this plugin base on <code>Guard</code> and <code>LiveReload</code>, you have to install Guard firstly. Visit this <a href=\"https://github.com/guard/guard-livereload/\">website</a> to see how to install it.</p>\n<p>###LiveReload Safari&#x2F;Chrome extension###<br>Finally, you need to install <code>LiveReload Safari Or Chrome Extension</code>, and here, we just use chrome to load web application. So go to Chrome Web Store and find livereload extension to install it on your chrome browser. And also you can use Safari browser.</p>\n<p>And now the tools we need have been installed. So let’s getting started.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ guard init livereload</span><br></pre></td></tr></table></figure>\n<p>By runing above command line, it will add guard definition to your <code>Guardfile</code>. You can adapt your ‘view’ files like you want. And the default content of Guardfile by livereload initialize is below:    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">guard <span class=\"string\">&#x27;livereload&#x27;</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;app/views/.+\\.(erb|haml|slim)&#125;</span>)</span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;app/helpers/.+\\.rb&#125;</span>)</span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;public/.+\\.(css|js|html)&#125;</span>)</span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;config/locales/.+\\.yml&#125;</span>)</span><br><span class=\"line\">  <span class=\"comment\"># Rails Assets Pipeline</span></span><br><span class=\"line\">  watch(<span class=\"regexp\">%r&#123;(app|vendor)(/assets/\\w+/(.+\\.(css|js|html))).*&#125;</span>) &#123; |<span class=\"params\">m</span>| <span class=\"string\">&quot;/assets/<span class=\"subst\">#&#123;m[<span class=\"number\">3</span>]&#125;</span>&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>And you can see that there has some watch command in the Guardfile. Changing it by your situation.</p>\n<p>Now I will use a login page to test the guard and livereload how to work. This project contains script file, less file and html file. When we change the less file it will generate css file automatically, and here we use Sublime Text plugin to finished it, and also you can use <code>guard-less</code> plugin which is guard plugin.<br><img src=\"/assets/images/legacy/project-structure.png\"></p>\n<p>In test project directory, we can find the Gemfile and Guardfile.</p>\n<figure class=\"highlight ruby\"><figcaption><span>Gemfile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A sample Gemfile</span></span><br><span class=\"line\">source <span class=\"string\">&quot;https://rubygems.org&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gem &quot;rails&quot;</span></span><br><span class=\"line\">group <span class=\"symbol\">:development</span> <span class=\"keyword\">do</span> </span><br><span class=\"line\">\tgem <span class=\"string\">&#x27;guard&#x27;</span></span><br><span class=\"line\">\tgem <span class=\"string\">&#x27;guard-livereload&#x27;</span>, <span class=\"symbol\">require:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>And here we just only use <code>guard-livereload plugin</code>, we also can use <code>guard-less</code> to configure the less to auto generate css file. But here we use the <code>Sublime Text</code> development tools to develop this project, it supports plugin to generate less to css.    </p>\n<p>Let’s see the guard how to watch our project files. the content of Guardfile is below:</p>\n<figure class=\"highlight ruby\"><figcaption><span>Guardfile</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A sample Guardfile</span></span><br><span class=\"line\"><span class=\"comment\"># More info at https://github.com/guard/guard#readme</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Uncomment and set this to only include directories you want to watch</span></span><br><span class=\"line\"><span class=\"comment\"># directories %w(app lib config test spec feature)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Uncomment to clear the screen before every task</span></span><br><span class=\"line\"><span class=\"comment\"># clearing :on</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Guard internally checks for changes in the Guardfile and exits.</span></span><br><span class=\"line\"><span class=\"comment\">## If you want Guard to automatically start up again, run guard in a</span></span><br><span class=\"line\"><span class=\"comment\">## shell loop, e.g.:</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">##  $ while bundle exec guard; do echo &quot;Restarting Guard...&quot;; done</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## Note: if you are using the `directories` clause above and you are not</span></span><br><span class=\"line\"><span class=\"comment\">## watching the project directory (&#x27;.&#x27;), the you will want to move the Guardfile</span></span><br><span class=\"line\"><span class=\"comment\">## to a watched dir and symlink it back, e.g.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  $ mkdir config</span></span><br><span class=\"line\"><span class=\"comment\">#  $ mv Guardfile config/</span></span><br><span class=\"line\"><span class=\"comment\">#  $ ln -s config/Guardfile .</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># and, you&#x27;ll have to watch &quot;config/Guardfile&quot; instead of &quot;Guardfile&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">guard <span class=\"string\">&#x27;livereload&#x27;</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\twatch /.*<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">end</span></span><br></pre></td></tr></table></figure>\n<p>In there, you will see that the all file in this project directory has been watched by guard-livereload. </p>\n<p>Type below commands in your terminal.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ guard</span><br></pre></td></tr></table></figure>\n<p>It will prompt you that LiveReload is waiting for a browser to connect. And the Guard is now watching at your specific files.</p>\n<p>Open the web application on your chrome browser, and click LiveReload extension. And now you will see the terminal has a message said Browser connected.    </p>\n<p>So far, you have prepared all configurations. And now you can modify the source file and save it, then you will see the web application automatically refresh.<br><img src=\"/assets/images/legacy/auto-refresh-page.png\"></p>"},{"title":"Conditional Stylesheets for IE version","date":"2015-01-28T09:35:06.000Z","comments":1,"_content":"\nThe tool of choice for fighting IE problems is the `conditional stylesheet`. IE provides comment tags, supported all the way up to the current IE 8 to target specific versions, as well as greater-than/less-than stuff for targeting multiple versions at once.\n\n### Why use conditional stylesheets?   \n*  You got problems, they need fixin'\n*  Keeps your code hack-free and valid\n*  Keeps your main stylesheet clean\n*  Perfectly acceptable technique, sanctioned by Microsoft   \n\n<!-- more -->\nAnd remember, these conditional tags don't have to be used only for CSS. You could load JavaScript, or even use them down in the content of your site to display special IE-specific messages.\n\n### The Code\n\nThis would go in your <head> with all the other regular CSS \\<link>ed CSS files. The opening and closing tags should be familiar, that's just regular ol' HTML comments. Then between the brackets, \"IF\" and \"IE\" should be fairly obvious. The syntax to note is \"!\" stand for \"not\", so !IE means \"not IE\". gt means \"greater than\", gte means \"greater than or equal\", lt means \"less than\", lte means \"less than or equal.\"\n\n> **Note that IE 10 and up DO NOT support conditional comments at all.**\n\nTarget ALL VERSIONS of IE\n``` html\n<!--[if IE]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"all-ie-only.css\" />\n<![endif]-->\n```\nTarget everything EXCEPT IE\n``` html\n<!--[if !IE]><!-->\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"not-ie.css\" />\n <!--<![endif]-->\n```\nTarget IE 7 ONLY\n``` html\n<!--[if IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7.css\">\n<![endif]-->\n```\nTarget IE 6 ONLY\n``` html\n<!--[if IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6.css\" />\n<![endif]-->\n```\nTarget IE 5 ONLY\n``` html\n<!--[if IE 5]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie5.css\" />\n<![endif]-->\n```\nTarget IE 5.5 ONLY\n``` html\n<!--[if IE 5.5000]>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"ie55.css\" />\n<![endif]-->\n```\nTarget IE 6 and LOWER\n``` html\n<!--[if lt IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-down.css\" />\n<![endif]-->\n<!--[if lte IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-down.css\" />\n<![endif]-->\n```\nTarget IE 7 and LOWER\n``` html\n<!--[if lt IE 8]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-down.css\" />\n<![endif]-->\n<!--[if lte IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-down.css\" />\n<![endif]-->\n```\nTarget IE 8 and LOWER\n``` html\n<!--[if lt IE 9]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-down.css\" />\n<![endif]-->\n<!--[if lte IE 8]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-down.css\" />\n<![endif]-->\n```\nTarget IE 6 and HIGHER\n``` html\n<!--[if gt IE 5.5]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-up.css\" />\n<![endif]-->\n<!--[if gte IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-up.css\" />\n<![endif]-->\n```\nTarget IE 7 and HIGHER\n``` html\n<!--[if gt IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-up.css\" />\n<![endif]-->\n<!--[if gte IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-up.css\" />\n<![endif]-->\n```\nTarget IE 8 and HIGHER\n``` html\n<!--[if gt IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-up.css\" />\n<![endif]-->\n<!--[if gte IE 8]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-up.css\" />\n<![endif]-->\n```\n\n*Note: The original artical you can see [here](http://css-tricks.com/how-to-create-an-ie-only-stylesheet/)*","source":"_posts/2015-01-28-conditinal-stylesheets-for-ie-version.markdown","raw":"---\n\ntitle: \"Conditional Stylesheets for IE version\"\ndate: 2015-01-28 17:35:06 +0800\ncomments: true\ncategories: Frontend\ntags: [CSS, IE]\n---\n\nThe tool of choice for fighting IE problems is the `conditional stylesheet`. IE provides comment tags, supported all the way up to the current IE 8 to target specific versions, as well as greater-than/less-than stuff for targeting multiple versions at once.\n\n### Why use conditional stylesheets?   \n*  You got problems, they need fixin'\n*  Keeps your code hack-free and valid\n*  Keeps your main stylesheet clean\n*  Perfectly acceptable technique, sanctioned by Microsoft   \n\n<!-- more -->\nAnd remember, these conditional tags don't have to be used only for CSS. You could load JavaScript, or even use them down in the content of your site to display special IE-specific messages.\n\n### The Code\n\nThis would go in your <head> with all the other regular CSS \\<link>ed CSS files. The opening and closing tags should be familiar, that's just regular ol' HTML comments. Then between the brackets, \"IF\" and \"IE\" should be fairly obvious. The syntax to note is \"!\" stand for \"not\", so !IE means \"not IE\". gt means \"greater than\", gte means \"greater than or equal\", lt means \"less than\", lte means \"less than or equal.\"\n\n> **Note that IE 10 and up DO NOT support conditional comments at all.**\n\nTarget ALL VERSIONS of IE\n``` html\n<!--[if IE]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"all-ie-only.css\" />\n<![endif]-->\n```\nTarget everything EXCEPT IE\n``` html\n<!--[if !IE]><!-->\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"not-ie.css\" />\n <!--<![endif]-->\n```\nTarget IE 7 ONLY\n``` html\n<!--[if IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7.css\">\n<![endif]-->\n```\nTarget IE 6 ONLY\n``` html\n<!--[if IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6.css\" />\n<![endif]-->\n```\nTarget IE 5 ONLY\n``` html\n<!--[if IE 5]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie5.css\" />\n<![endif]-->\n```\nTarget IE 5.5 ONLY\n``` html\n<!--[if IE 5.5000]>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"ie55.css\" />\n<![endif]-->\n```\nTarget IE 6 and LOWER\n``` html\n<!--[if lt IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-down.css\" />\n<![endif]-->\n<!--[if lte IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-down.css\" />\n<![endif]-->\n```\nTarget IE 7 and LOWER\n``` html\n<!--[if lt IE 8]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-down.css\" />\n<![endif]-->\n<!--[if lte IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-down.css\" />\n<![endif]-->\n```\nTarget IE 8 and LOWER\n``` html\n<!--[if lt IE 9]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-down.css\" />\n<![endif]-->\n<!--[if lte IE 8]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-down.css\" />\n<![endif]-->\n```\nTarget IE 6 and HIGHER\n``` html\n<!--[if gt IE 5.5]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-up.css\" />\n<![endif]-->\n<!--[if gte IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie6-and-up.css\" />\n<![endif]-->\n```\nTarget IE 7 and HIGHER\n``` html\n<!--[if gt IE 6]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-up.css\" />\n<![endif]-->\n<!--[if gte IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie7-and-up.css\" />\n<![endif]-->\n```\nTarget IE 8 and HIGHER\n``` html\n<!--[if gt IE 7]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-up.css\" />\n<![endif]-->\n<!--[if gte IE 8]>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"ie8-and-up.css\" />\n<![endif]-->\n```\n\n*Note: The original artical you can see [here](http://css-tricks.com/how-to-create-an-ie-only-stylesheet/)*","slug":"2015-01-28-conditinal-stylesheets-for-ie-version","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o80025azv50dpc1zpq","layout":"post","photos":[],"link":"","content":"<p>The tool of choice for fighting IE problems is the <code>conditional stylesheet</code>. IE provides comment tags, supported all the way up to the current IE 8 to target specific versions, as well as greater-than&#x2F;less-than stuff for targeting multiple versions at once.</p>\n<h3 id=\"Why-use-conditional-stylesheets\"><a href=\"#Why-use-conditional-stylesheets\" class=\"headerlink\" title=\"Why use conditional stylesheets?\"></a>Why use conditional stylesheets?</h3><ul>\n<li>You got problems, they need fixin’</li>\n<li>Keeps your code hack-free and valid</li>\n<li>Keeps your main stylesheet clean</li>\n<li>Perfectly acceptable technique, sanctioned by Microsoft</li>\n</ul>\n<span id=\"more\"></span>\n<p>And remember, these conditional tags don’t have to be used only for CSS. You could load JavaScript, or even use them down in the content of your site to display special IE-specific messages.</p>\n<h3 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h3><p>This would go in your <head> with all the other regular CSS &lt;link&gt;ed CSS files. The opening and closing tags should be familiar, that’s just regular ol’ HTML comments. Then between the brackets, “IF” and “IE” should be fairly obvious. The syntax to note is “!” stand for “not”, so !IE means “not IE”. gt means “greater than”, gte means “greater than or equal”, lt means “less than”, lte means “less than or equal.”</p>\n<blockquote>\n<p><strong>Note that IE 10 and up DO NOT support conditional comments at all.</strong></p>\n</blockquote>\n<p>Target ALL VERSIONS of IE</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;all-ie-only.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target everything EXCEPT IE</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if !IE]&gt;&lt;!--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;not-ie.css&quot;</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 7 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7.css&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 6 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 5 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 5]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie5.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 5.5 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 5.5000]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie55.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 6 and LOWER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 7 and LOWER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 8]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 8 and LOWER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 8]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 6 and HIGHER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 5.5]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 7 and HIGHER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 8 and HIGHER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 8]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Note: The original artical you can see <a href=\"http://css-tricks.com/how-to-create-an-ie-only-stylesheet/\">here</a></em></p>\n","site":{"data":{}},"excerpt":"<p>The tool of choice for fighting IE problems is the <code>conditional stylesheet</code>. IE provides comment tags, supported all the way up to the current IE 8 to target specific versions, as well as greater-than&#x2F;less-than stuff for targeting multiple versions at once.</p>\n<h3 id=\"Why-use-conditional-stylesheets\"><a href=\"#Why-use-conditional-stylesheets\" class=\"headerlink\" title=\"Why use conditional stylesheets?\"></a>Why use conditional stylesheets?</h3><ul>\n<li>You got problems, they need fixin’</li>\n<li>Keeps your code hack-free and valid</li>\n<li>Keeps your main stylesheet clean</li>\n<li>Perfectly acceptable technique, sanctioned by Microsoft</li>\n</ul>","more":"<p>And remember, these conditional tags don’t have to be used only for CSS. You could load JavaScript, or even use them down in the content of your site to display special IE-specific messages.</p>\n<h3 id=\"The-Code\"><a href=\"#The-Code\" class=\"headerlink\" title=\"The Code\"></a>The Code</h3><p>This would go in your <head> with all the other regular CSS &lt;link&gt;ed CSS files. The opening and closing tags should be familiar, that’s just regular ol’ HTML comments. Then between the brackets, “IF” and “IE” should be fairly obvious. The syntax to note is “!” stand for “not”, so !IE means “not IE”. gt means “greater than”, gte means “greater than or equal”, lt means “less than”, lte means “less than or equal.”</p>\n<blockquote>\n<p><strong>Note that IE 10 and up DO NOT support conditional comments at all.</strong></p>\n</blockquote>\n<p>Target ALL VERSIONS of IE</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;all-ie-only.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target everything EXCEPT IE</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if !IE]&gt;&lt;!--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;not-ie.css&quot;</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 7 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7.css&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 6 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 5 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 5]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie5.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 5.5 ONLY</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if IE 5.5000]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie55.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 6 and LOWER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 7 and LOWER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 8]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 8 and LOWER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE 9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lte IE 8]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 6 and HIGHER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 5.5]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 7 and HIGHER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 6]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Target IE 8 and HIGHER</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--[if gt IE 7]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if gte IE 8]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Note: The original artical you can see <a href=\"http://css-tricks.com/how-to-create-an-ie-only-stylesheet/\">here</a></em></p>"},{"title":"CSS tricks for IE6,IE7,IE8,IE9","date":"2015-01-28T08:35:34.000Z","comments":1,"_content":"\nAs web developer, we usually to fix the style for special version of IE. Here are the newest CSS tricks for `IE6`, `IE7`, `IE8`, `IE9`. This is very helpful for you.   \n\n``` css\n#ie-tricks{\n \n\t/* All browsers */\n\tcolor:red;\n\n\t/* All browsers but IE6 */\n\tcolor:red !important;\n\n\t/* Only works in IE6 */\n\t_color:red;\n\n\t/* IE6, IE7 */ \n\t*color:red; \n\n\t/* Only works in IE7*/\n\t+color:red;\n\n\t/* Only works in IE7 */\n\t*+color:red;\n\n\t/* IE6, IE7, IE8, IE9 */ \n\tcolor:red\\9;\n\n\t/* IE8, IE9 */ \n\tcolor:red\\0; \n\n\t/*Only works in IE9*/\n\tcolor:red\\9\\0;\n\n}\n```\n","source":"_posts/2015-01-28-css-tricks-for-ie6-ie7-ie8-ie9.markdown","raw":"---\n\ntitle: \"CSS tricks for IE6,IE7,IE8,IE9\"\ndate: 2015-01-28 16:35:34 +0800\ncomments: true\ncategories: Frontend\ntags: [CSS, IE] \n---\n\nAs web developer, we usually to fix the style for special version of IE. Here are the newest CSS tricks for `IE6`, `IE7`, `IE8`, `IE9`. This is very helpful for you.   \n\n``` css\n#ie-tricks{\n \n\t/* All browsers */\n\tcolor:red;\n\n\t/* All browsers but IE6 */\n\tcolor:red !important;\n\n\t/* Only works in IE6 */\n\t_color:red;\n\n\t/* IE6, IE7 */ \n\t*color:red; \n\n\t/* Only works in IE7*/\n\t+color:red;\n\n\t/* Only works in IE7 */\n\t*+color:red;\n\n\t/* IE6, IE7, IE8, IE9 */ \n\tcolor:red\\9;\n\n\t/* IE8, IE9 */ \n\tcolor:red\\0; \n\n\t/*Only works in IE9*/\n\tcolor:red\\9\\0;\n\n}\n```\n","slug":"2015-01-28-css-tricks-for-ie6-ie7-ie8-ie9","published":1,"updated":"2023-09-02T16:37:53.353Z","_id":"clm27g4o80026azv5773zgna7","layout":"post","photos":[],"link":"","content":"<p>As web developer, we usually to fix the style for special version of IE. Here are the newest CSS tricks for <code>IE6</code>, <code>IE7</code>, <code>IE8</code>, <code>IE9</code>. This is very helpful for you.   </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#ie-tricks</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/* All browsers */</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* All browsers but IE6 */</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red <span class=\"meta\">!important</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Only works in IE6 */</span></span><br><span class=\"line\">\t_color:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* IE6, IE7 */</span> </span><br><span class=\"line\">\t*<span class=\"attribute\">color</span>:red; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Only works in IE7*/</span></span><br><span class=\"line\">\t+<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Only works in IE7 */</span></span><br><span class=\"line\">\t*+<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* IE6, IE7, IE8, IE9 */</span> </span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red\\<span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* IE8, IE9 */</span> </span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red\\<span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*Only works in IE9*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red\\<span class=\"number\">9</span>\\<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>As web developer, we usually to fix the style for special version of IE. Here are the newest CSS tricks for <code>IE6</code>, <code>IE7</code>, <code>IE8</code>, <code>IE9</code>. This is very helpful for you.   </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#ie-tricks</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">/* All browsers */</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* All browsers but IE6 */</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red <span class=\"meta\">!important</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Only works in IE6 */</span></span><br><span class=\"line\">\t_color:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* IE6, IE7 */</span> </span><br><span class=\"line\">\t*<span class=\"attribute\">color</span>:red; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Only works in IE7*/</span></span><br><span class=\"line\">\t+<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Only works in IE7 */</span></span><br><span class=\"line\">\t*+<span class=\"attribute\">color</span>:red;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* IE6, IE7, IE8, IE9 */</span> </span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red\\<span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* IE8, IE9 */</span> </span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red\\<span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*Only works in IE9*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:red\\<span class=\"number\">9</span>\\<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Understading MVC, MVP and MVVM Design Patterns","date":"2015-02-06T09:26:06.000Z","comments":1,"_content":"\n`MVC`, `MVP` and `MVVM` design patterns are most popular technologies in our web application. Many people don't understand what's difference among them, so do I. But I found a blog which explains the difference of three design patterns, and its' really good.    \n\nTo read original article, see [here](http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html)    \n\nThere are three most popular MV-* design patterns: `MVC`, `MVP` and `MVVM`. These are widely used by the various technologies.   \n\n<!-- more -->\n### MVC Pattern\n\n`MVC` stands for `Model-View-Controller`. It is a software design pattern which was introduced in 1970s. Also, `MVC` pattern forces a separation of concerns, it means domain model and controller logic are decoupled from user interface (view). As a result maintenance and testing of the application become simpler and easier.   \n\n`MVC` design pattern splits an application into three main aspects: `Model`, `View` and `Controller`\n\n![mvc-pattern](/assets/images/legacy/mvc-pattern.png)\n\n#### Model\nThe Model represents a set of classes that describe the business logic i.e. business model as well as data access operations i.e. data model. It also defines business rules for data means how the data can be changed and manipulated.\n\n#### View\nThe View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.\n\n#### Controller\nThe Controller is responsible to process incoming requests. It receives input from users via the View, then process the user's data with the help of Model and passing the results back to the View. Typically, it acts as the coordinator between the View and the Model.    \n\nToday, this pattern is used by many popular framework like as `Ruby on Rails`, `Spring Framework`, `Apple iOS` Development and `ASP.NET MVC`.\n\n### MVP Pattern\nThis pattern is similar to MVC pattern in which controller has been replaced by the presenter. This design pattern splits an application into three main aspects: `Model`, `View` and `Presenter`.   \n\n![mvp-pattern](/assets/images/legacy/mvp-pattern.png)\n\n#### Model\nThe Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.\n\n#### View\nThe View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the presenter as the result. This also transforms the model(s) into UI.\n\n### Presenter\nThe Presenter is responsible for handling all UI events on behalf of the view. This receive input from users via the View, then process the user's data with the help of Model and passing the results back to the View. Unlike view and controller, view and presenter are completely decoupled from each other’s and communicate to each other’s by an interface.   \n\nAlso, presenter does not manage the incoming request traffic as controller.   \n\nThis pattern is commonly used with `ASP.NET Web Forms` applications which require to create automated unit tests for their code-behind pages. This is also used with `windows forms`.   \n\n##### Key Points about MVP Pattern:\n- User interacts with the View.\n- There is one-to-one relationship between View and Presenter means one View is mapped to only one Presenter.\n- View has a reference to Presenter but View has not reference to Model.\n- Provides two way communication between View and Presenter.\n\n### MVVM Pattern\n`MVVM` stands for `Model-View-View Model`. This pattern supports two-way data binding between view and View model. This enables automatic propagation of changes, within the state of view model to the View. Typically, the view model uses the observer pattern to notify changes in the view model to model.\n\n![mvvm-pattern](/assets/images/legacy/mvvm-pattern.png)\n\n#### Model\nThe Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.\n\n#### View\nThe View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.\n\n#### View Model\nThe View Model is responsible for exposing methods, commands, and other properties that helps to maintain the state of the view, manipulate the model as the result of actions on the view, and trigger events in the view itself.    \n\nThis pattern is commonly used by the `WPF`, `Silverlight`, `Caliburn`, `nRoute` etc.\n\n##### Key Points about MVVM Pattern:\n- User interacts with the View.\n- There is many-to-one relationship between View and ViewModel means many View can be mapped to one ViewModel.\n- View has a reference to ViewModel but View Model has no information about the View.\n- Supports two-way data binding between View and ViewModel.\n\n\n\n\n","source":"_posts/2015-02-06-understading-mvc-mvp-and-mvvm-design-patterns.markdown","raw":"---\n\ntitle: \"Understading MVC, MVP and MVVM Design Patterns\"\ndate: 2015-02-06 17:26:06 +0800\ncomments: true\ncategories: Design Pattern\ntags: [MVC, MVP, MVVM]\n---\n\n`MVC`, `MVP` and `MVVM` design patterns are most popular technologies in our web application. Many people don't understand what's difference among them, so do I. But I found a blog which explains the difference of three design patterns, and its' really good.    \n\nTo read original article, see [here](http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html)    \n\nThere are three most popular MV-* design patterns: `MVC`, `MVP` and `MVVM`. These are widely used by the various technologies.   \n\n<!-- more -->\n### MVC Pattern\n\n`MVC` stands for `Model-View-Controller`. It is a software design pattern which was introduced in 1970s. Also, `MVC` pattern forces a separation of concerns, it means domain model and controller logic are decoupled from user interface (view). As a result maintenance and testing of the application become simpler and easier.   \n\n`MVC` design pattern splits an application into three main aspects: `Model`, `View` and `Controller`\n\n![mvc-pattern](/assets/images/legacy/mvc-pattern.png)\n\n#### Model\nThe Model represents a set of classes that describe the business logic i.e. business model as well as data access operations i.e. data model. It also defines business rules for data means how the data can be changed and manipulated.\n\n#### View\nThe View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.\n\n#### Controller\nThe Controller is responsible to process incoming requests. It receives input from users via the View, then process the user's data with the help of Model and passing the results back to the View. Typically, it acts as the coordinator between the View and the Model.    \n\nToday, this pattern is used by many popular framework like as `Ruby on Rails`, `Spring Framework`, `Apple iOS` Development and `ASP.NET MVC`.\n\n### MVP Pattern\nThis pattern is similar to MVC pattern in which controller has been replaced by the presenter. This design pattern splits an application into three main aspects: `Model`, `View` and `Presenter`.   \n\n![mvp-pattern](/assets/images/legacy/mvp-pattern.png)\n\n#### Model\nThe Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.\n\n#### View\nThe View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the presenter as the result. This also transforms the model(s) into UI.\n\n### Presenter\nThe Presenter is responsible for handling all UI events on behalf of the view. This receive input from users via the View, then process the user's data with the help of Model and passing the results back to the View. Unlike view and controller, view and presenter are completely decoupled from each other’s and communicate to each other’s by an interface.   \n\nAlso, presenter does not manage the incoming request traffic as controller.   \n\nThis pattern is commonly used with `ASP.NET Web Forms` applications which require to create automated unit tests for their code-behind pages. This is also used with `windows forms`.   \n\n##### Key Points about MVP Pattern:\n- User interacts with the View.\n- There is one-to-one relationship between View and Presenter means one View is mapped to only one Presenter.\n- View has a reference to Presenter but View has not reference to Model.\n- Provides two way communication between View and Presenter.\n\n### MVVM Pattern\n`MVVM` stands for `Model-View-View Model`. This pattern supports two-way data binding between view and View model. This enables automatic propagation of changes, within the state of view model to the View. Typically, the view model uses the observer pattern to notify changes in the view model to model.\n\n![mvvm-pattern](/assets/images/legacy/mvvm-pattern.png)\n\n#### Model\nThe Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.\n\n#### View\nThe View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.\n\n#### View Model\nThe View Model is responsible for exposing methods, commands, and other properties that helps to maintain the state of the view, manipulate the model as the result of actions on the view, and trigger events in the view itself.    \n\nThis pattern is commonly used by the `WPF`, `Silverlight`, `Caliburn`, `nRoute` etc.\n\n##### Key Points about MVVM Pattern:\n- User interacts with the View.\n- There is many-to-one relationship between View and ViewModel means many View can be mapped to one ViewModel.\n- View has a reference to ViewModel but View Model has no information about the View.\n- Supports two-way data binding between View and ViewModel.\n\n\n\n\n","slug":"2015-02-06-understading-mvc-mvp-and-mvvm-design-patterns","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4o90029azv57gi0ewgn","layout":"post","photos":[],"link":"","content":"<p><code>MVC</code>, <code>MVP</code> and <code>MVVM</code> design patterns are most popular technologies in our web application. Many people don’t understand what’s difference among them, so do I. But I found a blog which explains the difference of three design patterns, and its’ really good.    </p>\n<p>To read original article, see <a href=\"http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html\">here</a>    </p>\n<p>There are three most popular MV-* design patterns: <code>MVC</code>, <code>MVP</code> and <code>MVVM</code>. These are widely used by the various technologies.   </p>\n<span id=\"more\"></span>\n<h3 id=\"MVC-Pattern\"><a href=\"#MVC-Pattern\" class=\"headerlink\" title=\"MVC Pattern\"></a>MVC Pattern</h3><p><code>MVC</code> stands for <code>Model-View-Controller</code>. It is a software design pattern which was introduced in 1970s. Also, <code>MVC</code> pattern forces a separation of concerns, it means domain model and controller logic are decoupled from user interface (view). As a result maintenance and testing of the application become simpler and easier.   </p>\n<p><code>MVC</code> design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Controller</code></p>\n<p><img src=\"/assets/images/legacy/mvc-pattern.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/mvc-pattern.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"mvc-pattern\"></p>\n<h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>The Model represents a set of classes that describe the business logic i.e. business model as well as data access operations i.e. data model. It also defines business rules for data means how the data can be changed and manipulated.</p>\n<h4 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p>\n<h4 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h4><p>The Controller is responsible to process incoming requests. It receives input from users via the View, then process the user’s data with the help of Model and passing the results back to the View. Typically, it acts as the coordinator between the View and the Model.    </p>\n<p>Today, this pattern is used by many popular framework like as <code>Ruby on Rails</code>, <code>Spring Framework</code>, <code>Apple iOS</code> Development and <code>ASP.NET MVC</code>.</p>\n<h3 id=\"MVP-Pattern\"><a href=\"#MVP-Pattern\" class=\"headerlink\" title=\"MVP Pattern\"></a>MVP Pattern</h3><p>This pattern is similar to MVC pattern in which controller has been replaced by the presenter. This design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Presenter</code>.   </p>\n<p><img src=\"/assets/images/legacy/mvp-pattern.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/mvp-pattern.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"mvp-pattern\"></p>\n<h4 id=\"Model-1\"><a href=\"#Model-1\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p>\n<h4 id=\"View-1\"><a href=\"#View-1\" class=\"headerlink\" title=\"View\"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the presenter as the result. This also transforms the model(s) into UI.</p>\n<h3 id=\"Presenter\"><a href=\"#Presenter\" class=\"headerlink\" title=\"Presenter\"></a>Presenter</h3><p>The Presenter is responsible for handling all UI events on behalf of the view. This receive input from users via the View, then process the user’s data with the help of Model and passing the results back to the View. Unlike view and controller, view and presenter are completely decoupled from each other’s and communicate to each other’s by an interface.   </p>\n<p>Also, presenter does not manage the incoming request traffic as controller.   </p>\n<p>This pattern is commonly used with <code>ASP.NET Web Forms</code> applications which require to create automated unit tests for their code-behind pages. This is also used with <code>windows forms</code>.   </p>\n<h5 id=\"Key-Points-about-MVP-Pattern\"><a href=\"#Key-Points-about-MVP-Pattern\" class=\"headerlink\" title=\"Key Points about MVP Pattern:\"></a>Key Points about MVP Pattern:</h5><ul>\n<li>User interacts with the View.</li>\n<li>There is one-to-one relationship between View and Presenter means one View is mapped to only one Presenter.</li>\n<li>View has a reference to Presenter but View has not reference to Model.</li>\n<li>Provides two way communication between View and Presenter.</li>\n</ul>\n<h3 id=\"MVVM-Pattern\"><a href=\"#MVVM-Pattern\" class=\"headerlink\" title=\"MVVM Pattern\"></a>MVVM Pattern</h3><p><code>MVVM</code> stands for <code>Model-View-View Model</code>. This pattern supports two-way data binding between view and View model. This enables automatic propagation of changes, within the state of view model to the View. Typically, the view model uses the observer pattern to notify changes in the view model to model.</p>\n<p><img src=\"/assets/images/legacy/mvvm-pattern.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/mvvm-pattern.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"mvvm-pattern\"></p>\n<h4 id=\"Model-2\"><a href=\"#Model-2\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p>\n<h4 id=\"View-2\"><a href=\"#View-2\" class=\"headerlink\" title=\"View\"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p>\n<h4 id=\"View-Model\"><a href=\"#View-Model\" class=\"headerlink\" title=\"View Model\"></a>View Model</h4><p>The View Model is responsible for exposing methods, commands, and other properties that helps to maintain the state of the view, manipulate the model as the result of actions on the view, and trigger events in the view itself.    </p>\n<p>This pattern is commonly used by the <code>WPF</code>, <code>Silverlight</code>, <code>Caliburn</code>, <code>nRoute</code> etc.</p>\n<h5 id=\"Key-Points-about-MVVM-Pattern\"><a href=\"#Key-Points-about-MVVM-Pattern\" class=\"headerlink\" title=\"Key Points about MVVM Pattern:\"></a>Key Points about MVVM Pattern:</h5><ul>\n<li>User interacts with the View.</li>\n<li>There is many-to-one relationship between View and ViewModel means many View can be mapped to one ViewModel.</li>\n<li>View has a reference to ViewModel but View Model has no information about the View.</li>\n<li>Supports two-way data binding between View and ViewModel.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><code>MVC</code>, <code>MVP</code> and <code>MVVM</code> design patterns are most popular technologies in our web application. Many people don’t understand what’s difference among them, so do I. But I found a blog which explains the difference of three design patterns, and its’ really good.    </p>\n<p>To read original article, see <a href=\"http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html\">here</a>    </p>\n<p>There are three most popular MV-* design patterns: <code>MVC</code>, <code>MVP</code> and <code>MVVM</code>. These are widely used by the various technologies.   </p>","more":"<h3 id=\"MVC-Pattern\"><a href=\"#MVC-Pattern\" class=\"headerlink\" title=\"MVC Pattern\"></a>MVC Pattern</h3><p><code>MVC</code> stands for <code>Model-View-Controller</code>. It is a software design pattern which was introduced in 1970s. Also, <code>MVC</code> pattern forces a separation of concerns, it means domain model and controller logic are decoupled from user interface (view). As a result maintenance and testing of the application become simpler and easier.   </p>\n<p><code>MVC</code> design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Controller</code></p>\n<p><img src=\"/assets/images/legacy/mvc-pattern.png\" alt=\"mvc-pattern\"></p>\n<h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>The Model represents a set of classes that describe the business logic i.e. business model as well as data access operations i.e. data model. It also defines business rules for data means how the data can be changed and manipulated.</p>\n<h4 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p>\n<h4 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h4><p>The Controller is responsible to process incoming requests. It receives input from users via the View, then process the user’s data with the help of Model and passing the results back to the View. Typically, it acts as the coordinator between the View and the Model.    </p>\n<p>Today, this pattern is used by many popular framework like as <code>Ruby on Rails</code>, <code>Spring Framework</code>, <code>Apple iOS</code> Development and <code>ASP.NET MVC</code>.</p>\n<h3 id=\"MVP-Pattern\"><a href=\"#MVP-Pattern\" class=\"headerlink\" title=\"MVP Pattern\"></a>MVP Pattern</h3><p>This pattern is similar to MVC pattern in which controller has been replaced by the presenter. This design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Presenter</code>.   </p>\n<p><img src=\"/assets/images/legacy/mvp-pattern.png\" alt=\"mvp-pattern\"></p>\n<h4 id=\"Model-1\"><a href=\"#Model-1\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p>\n<h4 id=\"View-1\"><a href=\"#View-1\" class=\"headerlink\" title=\"View\"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the presenter as the result. This also transforms the model(s) into UI.</p>\n<h3 id=\"Presenter\"><a href=\"#Presenter\" class=\"headerlink\" title=\"Presenter\"></a>Presenter</h3><p>The Presenter is responsible for handling all UI events on behalf of the view. This receive input from users via the View, then process the user’s data with the help of Model and passing the results back to the View. Unlike view and controller, view and presenter are completely decoupled from each other’s and communicate to each other’s by an interface.   </p>\n<p>Also, presenter does not manage the incoming request traffic as controller.   </p>\n<p>This pattern is commonly used with <code>ASP.NET Web Forms</code> applications which require to create automated unit tests for their code-behind pages. This is also used with <code>windows forms</code>.   </p>\n<h5 id=\"Key-Points-about-MVP-Pattern\"><a href=\"#Key-Points-about-MVP-Pattern\" class=\"headerlink\" title=\"Key Points about MVP Pattern:\"></a>Key Points about MVP Pattern:</h5><ul>\n<li>User interacts with the View.</li>\n<li>There is one-to-one relationship between View and Presenter means one View is mapped to only one Presenter.</li>\n<li>View has a reference to Presenter but View has not reference to Model.</li>\n<li>Provides two way communication between View and Presenter.</li>\n</ul>\n<h3 id=\"MVVM-Pattern\"><a href=\"#MVVM-Pattern\" class=\"headerlink\" title=\"MVVM Pattern\"></a>MVVM Pattern</h3><p><code>MVVM</code> stands for <code>Model-View-View Model</code>. This pattern supports two-way data binding between view and View model. This enables automatic propagation of changes, within the state of view model to the View. Typically, the view model uses the observer pattern to notify changes in the view model to model.</p>\n<p><img src=\"/assets/images/legacy/mvvm-pattern.png\" alt=\"mvvm-pattern\"></p>\n<h4 id=\"Model-2\"><a href=\"#Model-2\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p>\n<h4 id=\"View-2\"><a href=\"#View-2\" class=\"headerlink\" title=\"View\"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p>\n<h4 id=\"View-Model\"><a href=\"#View-Model\" class=\"headerlink\" title=\"View Model\"></a>View Model</h4><p>The View Model is responsible for exposing methods, commands, and other properties that helps to maintain the state of the view, manipulate the model as the result of actions on the view, and trigger events in the view itself.    </p>\n<p>This pattern is commonly used by the <code>WPF</code>, <code>Silverlight</code>, <code>Caliburn</code>, <code>nRoute</code> etc.</p>\n<h5 id=\"Key-Points-about-MVVM-Pattern\"><a href=\"#Key-Points-about-MVVM-Pattern\" class=\"headerlink\" title=\"Key Points about MVVM Pattern:\"></a>Key Points about MVVM Pattern:</h5><ul>\n<li>User interacts with the View.</li>\n<li>There is many-to-one relationship between View and ViewModel means many View can be mapped to one ViewModel.</li>\n<li>View has a reference to ViewModel but View Model has no information about the View.</li>\n<li>Supports two-way data binding between View and ViewModel.</li>\n</ul>"},{"title":"Guave - Immutable Collection","date":"2015-02-13T06:58:17.000Z","comments":1,"_content":"`Immutable` that means it can not be changed. Let's get example to see what's different with `mutable` objects.\n\nNormal mutable collections:   \n``` Java\n//define a mutable list\nprivate final List<String> mutableList = Arrays.asList(\"a\", \"b\", \"c\");\n   \n//modify the first item in the mutable list\n//will print [aa, b, c]\nmutableList.set(0, \"aa\");\nSystem.out.println(mutableList);\n```    \n<!-- more -->\nImmutable collections:\n``` Java\n//define a immutable list\nprivate final ImmutableList<String> immutableList = ImmutableList.of(\"a\", \"b\", \"c\");\n    \n//can not modify the first item in the immutable list, any change item operation is unsuppproted.\n//it will throw UnsupportedOperationException\nimmutableList.set(0, \"aa\");\nSystem.out.println(immutableList);\n```    \nFrom above example, we can get the conclusion is that immutable collections doesn't support any changing content API. So it will throw `UnsupportedOperationException` when you try to modify it.    \n\n### What's advantage of Immutable Objects\nAccording to Guava Offical explain about `Immutable Objects`, there have four and more advantages of Immutable Objects:\n\n - Safe for use by untrusted libraries.\n - `Thread-Safe`: can be used by many threads with no risk of race conditions.\n - Doesn't need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.\n - Can be used as a constant, with the expectation that it will remain fixed.\n\nMaking immutable copies of objects is a good defensive programming technique, and `Guava`provides it.\n\n> *Note:* Each of the `Guava` immutable collection implementations reject *null* values.\n\n### How create it\nAn ImmutableXXX collection can be created in several ways:\n\n- Using the `copyOf` method, like `ImmutableList.copyOf(collection)`:  \n\n``` Java\nImmutableList<String> result = ImmutableList.copyOf(mutableList);\n```\n\n- Using the `of` method, like `ImmutableList.of(\"a\", \"b\", \"c\")` or `ImmutableMap.of(\"a\", 1, \"b\", 2)`\n\n``` Java\nImmutableList<String> result = ImmutableList.of(\"a\", \"b\", \"c\");\n```\n\n- Using a `Builder`, for example:\n\n``` Java\nImmutableList<String> result = ImmutableList.<String>builder()\n                \t\t\t\t\t.addAll(mutableList)\n                \t\t\t\t\t.build();\n```\n\nAll immutable collections provide an ImmutableList view via `asList()`, so -- for example -- even if you have data stored as an ImmutableSortedSet, you can get the kth smallest element with `sortedSet.asList().get(k)`.\n``` Java\n//get second item. print b\nSystem.out.println(immutableList.asList().get(1));\n```","source":"_posts/2015-02-13-guave-immutable-collection.markdown","raw":"---\n\ntitle: \"Guave - Immutable Collection\"\ndate: 2015-02-13 14:58:17 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Guava]\n---\n`Immutable` that means it can not be changed. Let's get example to see what's different with `mutable` objects.\n\nNormal mutable collections:   \n``` Java\n//define a mutable list\nprivate final List<String> mutableList = Arrays.asList(\"a\", \"b\", \"c\");\n   \n//modify the first item in the mutable list\n//will print [aa, b, c]\nmutableList.set(0, \"aa\");\nSystem.out.println(mutableList);\n```    \n<!-- more -->\nImmutable collections:\n``` Java\n//define a immutable list\nprivate final ImmutableList<String> immutableList = ImmutableList.of(\"a\", \"b\", \"c\");\n    \n//can not modify the first item in the immutable list, any change item operation is unsuppproted.\n//it will throw UnsupportedOperationException\nimmutableList.set(0, \"aa\");\nSystem.out.println(immutableList);\n```    \nFrom above example, we can get the conclusion is that immutable collections doesn't support any changing content API. So it will throw `UnsupportedOperationException` when you try to modify it.    \n\n### What's advantage of Immutable Objects\nAccording to Guava Offical explain about `Immutable Objects`, there have four and more advantages of Immutable Objects:\n\n - Safe for use by untrusted libraries.\n - `Thread-Safe`: can be used by many threads with no risk of race conditions.\n - Doesn't need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.\n - Can be used as a constant, with the expectation that it will remain fixed.\n\nMaking immutable copies of objects is a good defensive programming technique, and `Guava`provides it.\n\n> *Note:* Each of the `Guava` immutable collection implementations reject *null* values.\n\n### How create it\nAn ImmutableXXX collection can be created in several ways:\n\n- Using the `copyOf` method, like `ImmutableList.copyOf(collection)`:  \n\n``` Java\nImmutableList<String> result = ImmutableList.copyOf(mutableList);\n```\n\n- Using the `of` method, like `ImmutableList.of(\"a\", \"b\", \"c\")` or `ImmutableMap.of(\"a\", 1, \"b\", 2)`\n\n``` Java\nImmutableList<String> result = ImmutableList.of(\"a\", \"b\", \"c\");\n```\n\n- Using a `Builder`, for example:\n\n``` Java\nImmutableList<String> result = ImmutableList.<String>builder()\n                \t\t\t\t\t.addAll(mutableList)\n                \t\t\t\t\t.build();\n```\n\nAll immutable collections provide an ImmutableList view via `asList()`, so -- for example -- even if you have data stored as an ImmutableSortedSet, you can get the kth smallest element with `sortedSet.asList().get(k)`.\n``` Java\n//get second item. print b\nSystem.out.println(immutableList.asList().get(1));\n```","slug":"2015-02-13-guave-immutable-collection","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4oa002bazv563eghlsm","layout":"post","photos":[],"link":"","content":"<p><code>Immutable</code> that means it can not be changed. Let’s get example to see what’s different with <code>mutable</code> objects.</p>\n<p>Normal mutable collections:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//define a mutable list</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mutableList = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">//modify the first item in the mutable list</span></span><br><span class=\"line\"><span class=\"comment\">//will print [aa, b, c]</span></span><br><span class=\"line\">mutableList.set(<span class=\"number\">0</span>, <span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">System.out.println(mutableList);</span><br><span class=\"line\">```    </span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">Immutable collections:</span><br><span class=\"line\">``` Java</span><br><span class=\"line\"><span class=\"comment\">//define a immutable list</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ImmutableList&lt;String&gt; immutableList = ImmutableList.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//can not modify the first item in the immutable list, any change item operation is unsuppproted.</span></span><br><span class=\"line\"><span class=\"comment\">//it will throw UnsupportedOperationException</span></span><br><span class=\"line\">immutableList.set(<span class=\"number\">0</span>, <span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">System.out.println(immutableList);</span><br><span class=\"line\">```    </span><br><span class=\"line\">From above example, we can get the conclusion is that immutable collections doesn<span class=\"string\">&#x27;t support any changing content API. So it will throw `UnsupportedOperationException` when you try to modify it.    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### What&#x27;</span>s advantage of Immutable Objects</span><br><span class=\"line\">According to Guava Offical explain about `Immutable Objects`, there have four and more advantages of Immutable Objects:</span><br><span class=\"line\"></span><br><span class=\"line\"> - Safe <span class=\"keyword\">for</span> use by untrusted libraries.</span><br><span class=\"line\"> - `Thread-Safe`: can be used by many threads with no risk of race conditions.</span><br><span class=\"line\"> - Doesn<span class=\"string\">&#x27;t need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.</span></span><br><span class=\"line\"><span class=\"string\"> - Can be used as a constant, with the expectation that it will remain fixed.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Making immutable copies of objects is a good defensive programming technique, and `Guava`provides it.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&gt; *Note:* Each of the `Guava` immutable collection implementations reject *null* values.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### How create it</span></span><br><span class=\"line\"><span class=\"string\">An ImmutableXXX collection can be created in several ways:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- Using the `copyOf` method, like `ImmutableList.copyOf(collection)`:  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">``` Java</span></span><br><span class=\"line\"><span class=\"string\">ImmutableList&lt;String&gt; result = ImmutableList.copyOf(mutableList);</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Using the <code>of</code> method, like <code>ImmutableList.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> or <code>ImmutableMap.of(&quot;a&quot;, 1, &quot;b&quot;, 2)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImmutableList&lt;String&gt; result = ImmutableList.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Using a <code>Builder</code>, for example:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImmutableList&lt;String&gt; result = ImmutableList.&lt;String&gt;builder()</span><br><span class=\"line\">                \t\t\t\t\t.addAll(mutableList)</span><br><span class=\"line\">                \t\t\t\t\t.build();</span><br></pre></td></tr></table></figure>\n\n<p>All immutable collections provide an ImmutableList view via <code>asList()</code>, so – for example – even if you have data stored as an ImmutableSortedSet, you can get the kth smallest element with <code>sortedSet.asList().get(k)</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//get second item. print b</span></span><br><span class=\"line\">System.out.println(immutableList.asList().get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><code>Immutable</code> that means it can not be changed. Let’s get example to see what’s different with <code>mutable</code> objects.</p>\n<p>Normal mutable collections:   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//define a mutable list</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; mutableList = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">//modify the first item in the mutable list</span></span><br><span class=\"line\"><span class=\"comment\">//will print [aa, b, c]</span></span><br><span class=\"line\">mutableList.set(<span class=\"number\">0</span>, <span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">System.out.println(mutableList);</span><br><span class=\"line\">```    </span><br><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">Immutable collections:</span><br><span class=\"line\">``` Java</span><br><span class=\"line\"><span class=\"comment\">//define a immutable list</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ImmutableList&lt;String&gt; immutableList = ImmutableList.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//can not modify the first item in the immutable list, any change item operation is unsuppproted.</span></span><br><span class=\"line\"><span class=\"comment\">//it will throw UnsupportedOperationException</span></span><br><span class=\"line\">immutableList.set(<span class=\"number\">0</span>, <span class=\"string\">&quot;aa&quot;</span>);</span><br><span class=\"line\">System.out.println(immutableList);</span><br><span class=\"line\">```    </span><br><span class=\"line\">From above example, we can get the conclusion is that immutable collections doesn<span class=\"string\">&#x27;t support any changing content API. So it will throw `UnsupportedOperationException` when you try to modify it.    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### What&#x27;</span>s advantage of Immutable Objects</span><br><span class=\"line\">According to Guava Offical explain about `Immutable Objects`, there have four and more advantages of Immutable Objects:</span><br><span class=\"line\"></span><br><span class=\"line\"> - Safe <span class=\"keyword\">for</span> use by untrusted libraries.</span><br><span class=\"line\"> - `Thread-Safe`: can be used by many threads with no risk of race conditions.</span><br><span class=\"line\"> - Doesn<span class=\"string\">&#x27;t need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.</span></span><br><span class=\"line\"><span class=\"string\"> - Can be used as a constant, with the expectation that it will remain fixed.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Making immutable copies of objects is a good defensive programming technique, and `Guava`provides it.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&gt; *Note:* Each of the `Guava` immutable collection implementations reject *null* values.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### How create it</span></span><br><span class=\"line\"><span class=\"string\">An ImmutableXXX collection can be created in several ways:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- Using the `copyOf` method, like `ImmutableList.copyOf(collection)`:  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">``` Java</span></span><br><span class=\"line\"><span class=\"string\">ImmutableList&lt;String&gt; result = ImmutableList.copyOf(mutableList);</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Using the <code>of</code> method, like <code>ImmutableList.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> or <code>ImmutableMap.of(&quot;a&quot;, 1, &quot;b&quot;, 2)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImmutableList&lt;String&gt; result = ImmutableList.of(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Using a <code>Builder</code>, for example:</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImmutableList&lt;String&gt; result = ImmutableList.&lt;String&gt;builder()</span><br><span class=\"line\">                \t\t\t\t\t.addAll(mutableList)</span><br><span class=\"line\">                \t\t\t\t\t.build();</span><br></pre></td></tr></table></figure>\n\n<p>All immutable collections provide an ImmutableList view via <code>asList()</code>, so – for example – even if you have data stored as an ImmutableSortedSet, you can get the kth smallest element with <code>sortedSet.asList().get(k)</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//get second item. print b</span></span><br><span class=\"line\">System.out.println(immutableList.asList().get(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>"},{"title":"A nice web design tool - Bracket","date":"2015-03-02T09:19:17.000Z","comments":1,"_content":"\n`Bracket` is open source web design text editor, it focus with visual tools and preprocesssor support. It is easy to design web page in the browser, we can get the page layout in time when we change the html, css, javascript. We don't need to save the file and refresh the browser. That's so convenience.   \n\n<!-- more -->\n\n`Bracket` supports the element highlight on the page in time when you put your mouse cursor on the specific html tag.\n\nAbsolutly, I recommend you to design you website with it. You can download it from [here](https://github.com/adobe/brackets/releases/download/release-1.1%2Beb4/Brackets.1.1.Extract.dmg) for Mac OS. Also you can download it for other platform from [this](https://github.com/adobe/brackets/releases).    \n\nThe Extract for `Brackets` (Preview) extension lets you pull out design information from a PSD including colors, fonts, gradients, and measurement information as clean, minimal CSS via contextual code hints. You can also extract layers as images, use information from the PSD to define preprocessor variables, and easily get dimensions between objects. This is very benefit for web designer which want to design web page with PSD source file.   \n\nThe `Bracket` has three big features, they are below:\n\n* **Inline Editor**   \n  We don't need to jump between file tabs when we want to change the style of the specific ID. \n  Just put the mouse cursor on that ID and press `Command`/`Ctrl + E`, `Bracket` will show you all the CSS selectors with that ID in an inline window so you can work on your code side-by-side without any popups.\n\n* **Live Preview**   \n  Get a real-time connection to your browser. Make changes to CSS and HTML and you'll instantly see those changes on the page.\n  \n* **Preprocessor Support**   \n\tWith Brackets you can use `Quick Edit` and `Live Highlight` with your `LESS` and `SCSS` files which will make working with them easier than ever.   \n\t\nWith `Bracket`, you can improve your working efficiency and save your time. This web design tool is so power, and the offical website is [here](http://brackets.io/).","source":"_posts/2015-03-02-a-nice-web-design-tool-bracket.markdown","raw":"---\n\ntitle: \"A nice web design tool - Bracket\"\ndate: 2015-03-02 17:19:17 +0800\ncomments: true\ncategories: Tools\ntags: [Bracket, Web Design]\n---\n\n`Bracket` is open source web design text editor, it focus with visual tools and preprocesssor support. It is easy to design web page in the browser, we can get the page layout in time when we change the html, css, javascript. We don't need to save the file and refresh the browser. That's so convenience.   \n\n<!-- more -->\n\n`Bracket` supports the element highlight on the page in time when you put your mouse cursor on the specific html tag.\n\nAbsolutly, I recommend you to design you website with it. You can download it from [here](https://github.com/adobe/brackets/releases/download/release-1.1%2Beb4/Brackets.1.1.Extract.dmg) for Mac OS. Also you can download it for other platform from [this](https://github.com/adobe/brackets/releases).    \n\nThe Extract for `Brackets` (Preview) extension lets you pull out design information from a PSD including colors, fonts, gradients, and measurement information as clean, minimal CSS via contextual code hints. You can also extract layers as images, use information from the PSD to define preprocessor variables, and easily get dimensions between objects. This is very benefit for web designer which want to design web page with PSD source file.   \n\nThe `Bracket` has three big features, they are below:\n\n* **Inline Editor**   \n  We don't need to jump between file tabs when we want to change the style of the specific ID. \n  Just put the mouse cursor on that ID and press `Command`/`Ctrl + E`, `Bracket` will show you all the CSS selectors with that ID in an inline window so you can work on your code side-by-side without any popups.\n\n* **Live Preview**   \n  Get a real-time connection to your browser. Make changes to CSS and HTML and you'll instantly see those changes on the page.\n  \n* **Preprocessor Support**   \n\tWith Brackets you can use `Quick Edit` and `Live Highlight` with your `LESS` and `SCSS` files which will make working with them easier than ever.   \n\t\nWith `Bracket`, you can improve your working efficiency and save your time. This web design tool is so power, and the offical website is [here](http://brackets.io/).","slug":"2015-03-02-a-nice-web-design-tool-bracket","published":1,"updated":"2023-09-02T18:03:55.677Z","_id":"clm27g4ob002eazv53e4wdp7o","layout":"post","photos":[],"link":"","content":"<p><code>Bracket</code> is open source web design text editor, it focus with visual tools and preprocesssor support. It is easy to design web page in the browser, we can get the page layout in time when we change the html, css, javascript. We don’t need to save the file and refresh the browser. That’s so convenience.   </p>\n<span id=\"more\"></span>\n\n<p><code>Bracket</code> supports the element highlight on the page in time when you put your mouse cursor on the specific html tag.</p>\n<p>Absolutly, I recommend you to design you website with it. You can download it from <a href=\"https://github.com/adobe/brackets/releases/download/release-1.1%2Beb4/Brackets.1.1.Extract.dmg\">here</a> for Mac OS. Also you can download it for other platform from <a href=\"https://github.com/adobe/brackets/releases\">this</a>.    </p>\n<p>The Extract for <code>Brackets</code> (Preview) extension lets you pull out design information from a PSD including colors, fonts, gradients, and measurement information as clean, minimal CSS via contextual code hints. You can also extract layers as images, use information from the PSD to define preprocessor variables, and easily get dimensions between objects. This is very benefit for web designer which want to design web page with PSD source file.   </p>\n<p>The <code>Bracket</code> has three big features, they are below:</p>\n<ul>\n<li><p><strong>Inline Editor</strong><br>We don’t need to jump between file tabs when we want to change the style of the specific ID.<br>Just put the mouse cursor on that ID and press <code>Command</code>&#x2F;<code>Ctrl + E</code>, <code>Bracket</code> will show you all the CSS selectors with that ID in an inline window so you can work on your code side-by-side without any popups.</p>\n</li>\n<li><p><strong>Live Preview</strong><br>Get a real-time connection to your browser. Make changes to CSS and HTML and you’ll instantly see those changes on the page.</p>\n</li>\n<li><p><strong>Preprocessor Support</strong><br>  With Brackets you can use <code>Quick Edit</code> and <code>Live Highlight</code> with your <code>LESS</code> and <code>SCSS</code> files which will make working with them easier than ever.</p>\n</li>\n</ul>\n<p>With <code>Bracket</code>, you can improve your working efficiency and save your time. This web design tool is so power, and the offical website is <a href=\"http://brackets.io/\">here</a>.</p>\n","site":{"data":{}},"excerpt":"<p><code>Bracket</code> is open source web design text editor, it focus with visual tools and preprocesssor support. It is easy to design web page in the browser, we can get the page layout in time when we change the html, css, javascript. We don’t need to save the file and refresh the browser. That’s so convenience.   </p>","more":"<p><code>Bracket</code> supports the element highlight on the page in time when you put your mouse cursor on the specific html tag.</p>\n<p>Absolutly, I recommend you to design you website with it. You can download it from <a href=\"https://github.com/adobe/brackets/releases/download/release-1.1%2Beb4/Brackets.1.1.Extract.dmg\">here</a> for Mac OS. Also you can download it for other platform from <a href=\"https://github.com/adobe/brackets/releases\">this</a>.    </p>\n<p>The Extract for <code>Brackets</code> (Preview) extension lets you pull out design information from a PSD including colors, fonts, gradients, and measurement information as clean, minimal CSS via contextual code hints. You can also extract layers as images, use information from the PSD to define preprocessor variables, and easily get dimensions between objects. This is very benefit for web designer which want to design web page with PSD source file.   </p>\n<p>The <code>Bracket</code> has three big features, they are below:</p>\n<ul>\n<li><p><strong>Inline Editor</strong><br>We don’t need to jump between file tabs when we want to change the style of the specific ID.<br>Just put the mouse cursor on that ID and press <code>Command</code>&#x2F;<code>Ctrl + E</code>, <code>Bracket</code> will show you all the CSS selectors with that ID in an inline window so you can work on your code side-by-side without any popups.</p>\n</li>\n<li><p><strong>Live Preview</strong><br>Get a real-time connection to your browser. Make changes to CSS and HTML and you’ll instantly see those changes on the page.</p>\n</li>\n<li><p><strong>Preprocessor Support</strong><br>  With Brackets you can use <code>Quick Edit</code> and <code>Live Highlight</code> with your <code>LESS</code> and <code>SCSS</code> files which will make working with them easier than ever.</p>\n</li>\n</ul>\n<p>With <code>Bracket</code>, you can improve your working efficiency and save your time. This web design tool is so power, and the offical website is <a href=\"http://brackets.io/\">here</a>.</p>"},{"title":"HTML5 - New Common Attributes","date":"2015-03-02T12:33:14.000Z","comments":1,"_content":"`HTML5` adds new common attributes for original `HTML` Tag, and these attributes enhances the `HTML` elements's function.   \n\n### contentEditable\nThe `contentEditable` attribute supports most tags. The browser allows user edits the content of element if this attribute is set to true. These elements is not like input or textarea tags. They are not support editable content like table, div, span and so on these tags.   \n\n<!-- more -->\n\n`contentEditable` attribute can be inherited by children tags. If the contentEditable is true, all children tags's contentEditable will be true except we define it to false.   \n\n``` html\n<!DOCTYPE html>\n<head>\n    <title>contentEditable</title>\n    <style>\n        div {\n            width: 240px;\n            height: 150px;\n        }\n        table {\n            width:inherit;\n            height: 100px;\n            border: 1px solid black;\n        }\n        \n        table > tr {\n            background-color: blue;\n        }\n        \n        .myDiv {\n            width:inherit;\n            height: 30px;\n            line-height: 30px;\n            margin-top:10px;\n            border: 1px solid black;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        var turnOnContentEditable = function() {\n            var target = document.getElementById(\"target\");\n            target.contentEditable = true;\n        };\n    </script>\n</head>\n<body>\n   <div id=\"target\" contentEditable=\"false\">\n       <table border=\"1\">\n           <tr>\n               <td>Java</td>\n               <td>CSharp</td>\n           </tr>\n           <tr>\n               <td>JavaScript</td>\n               <td>Python</td>\n           </tr>\n       </table>\n       <div class=\"myDiv\">\n           This is Div Tag\n       </div>\n   </div>\n    <input type=\"button\" onclick=\"turnOnContentEditable();\"value=\"Turn On Edit Mode\"></input>\n</body>\n```\n\nThe root div is can't be edited by default. when we click button to turn on contentEditable attribute. all children tags of this tag can be edited.   \n\n`contentEditable` attribute is false:   \n{% img /assets/images/legacy/contentEditable-before.png 300 350 %}  \n\n`contentEditable` attribute is true:   \n{% img /assets/images/legacy/contentEditable-after.png 300 350 %}  \n\n### designMode\n`designMode` attribute is actually entire document's `contentEditable`. If we turn on the `designMode` attribute of the entire page, all the elements which supports `contentEditable` attributes can be edited. It is false by default.    \n\nWe can just use javascript to turn on the document's `designMode`.   \n\n``` javascript\ndocument.designMode = \"on\";\n```\n\n### hidden\n`HTML5` supports `hidden` attribute for all elements. The `hidden` attribute can be set to 'false' and 'true' both values. The browser doesn't display the element when `hidden = 'true'`.   \n\nThe `hidden = 'true'` actually like we write `display:none` is `CSS` file. And also we can get its value by `hidden`.\n\n### spellcheck\n`HTML5` add new attributes `spellcheck` for editable elements like `input`,`textarea`, ... The `spellcheck` can be set to 'true', 'false' both values. The browser will check the content user input and prompt error message for spell error words when it is set to 'true'. \n\n``` html\n<input type=\"text\" spellcheck=\"true\"/>\n```   \n{% img /assets/images/legacy/spellcheck.png 300 80 %}\n>*Note: Supports `spellcheck` attribute's browsers include `Chrome`, `Opera`, `Safari`, the `IE`, `FireFox` doesn't support it for now.*\n","source":"_posts/2015-03-02-html5-new-common-attributes.markdown","raw":"---\n\ntitle: \"HTML5 - New Common Attributes\"\ndate: 2015-03-02 20:33:14 +0800\ncomments: true\ncategories: Frontend\ntags: [HTML5]\n---\n`HTML5` adds new common attributes for original `HTML` Tag, and these attributes enhances the `HTML` elements's function.   \n\n### contentEditable\nThe `contentEditable` attribute supports most tags. The browser allows user edits the content of element if this attribute is set to true. These elements is not like input or textarea tags. They are not support editable content like table, div, span and so on these tags.   \n\n<!-- more -->\n\n`contentEditable` attribute can be inherited by children tags. If the contentEditable is true, all children tags's contentEditable will be true except we define it to false.   \n\n``` html\n<!DOCTYPE html>\n<head>\n    <title>contentEditable</title>\n    <style>\n        div {\n            width: 240px;\n            height: 150px;\n        }\n        table {\n            width:inherit;\n            height: 100px;\n            border: 1px solid black;\n        }\n        \n        table > tr {\n            background-color: blue;\n        }\n        \n        .myDiv {\n            width:inherit;\n            height: 30px;\n            line-height: 30px;\n            margin-top:10px;\n            border: 1px solid black;\n        }\n    </style>\n    <script type=\"text/javascript\">\n        var turnOnContentEditable = function() {\n            var target = document.getElementById(\"target\");\n            target.contentEditable = true;\n        };\n    </script>\n</head>\n<body>\n   <div id=\"target\" contentEditable=\"false\">\n       <table border=\"1\">\n           <tr>\n               <td>Java</td>\n               <td>CSharp</td>\n           </tr>\n           <tr>\n               <td>JavaScript</td>\n               <td>Python</td>\n           </tr>\n       </table>\n       <div class=\"myDiv\">\n           This is Div Tag\n       </div>\n   </div>\n    <input type=\"button\" onclick=\"turnOnContentEditable();\"value=\"Turn On Edit Mode\"></input>\n</body>\n```\n\nThe root div is can't be edited by default. when we click button to turn on contentEditable attribute. all children tags of this tag can be edited.   \n\n`contentEditable` attribute is false:   \n{% img /assets/images/legacy/contentEditable-before.png 300 350 %}  \n\n`contentEditable` attribute is true:   \n{% img /assets/images/legacy/contentEditable-after.png 300 350 %}  \n\n### designMode\n`designMode` attribute is actually entire document's `contentEditable`. If we turn on the `designMode` attribute of the entire page, all the elements which supports `contentEditable` attributes can be edited. It is false by default.    \n\nWe can just use javascript to turn on the document's `designMode`.   \n\n``` javascript\ndocument.designMode = \"on\";\n```\n\n### hidden\n`HTML5` supports `hidden` attribute for all elements. The `hidden` attribute can be set to 'false' and 'true' both values. The browser doesn't display the element when `hidden = 'true'`.   \n\nThe `hidden = 'true'` actually like we write `display:none` is `CSS` file. And also we can get its value by `hidden`.\n\n### spellcheck\n`HTML5` add new attributes `spellcheck` for editable elements like `input`,`textarea`, ... The `spellcheck` can be set to 'true', 'false' both values. The browser will check the content user input and prompt error message for spell error words when it is set to 'true'. \n\n``` html\n<input type=\"text\" spellcheck=\"true\"/>\n```   \n{% img /assets/images/legacy/spellcheck.png 300 80 %}\n>*Note: Supports `spellcheck` attribute's browsers include `Chrome`, `Opera`, `Safari`, the `IE`, `FireFox` doesn't support it for now.*\n","slug":"2015-03-02-html5-new-common-attributes","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4ob002gazv59ucq12pz","layout":"post","photos":[],"link":"","content":"<p><code>HTML5</code> adds new common attributes for original <code>HTML</code> Tag, and these attributes enhances the <code>HTML</code> elements’s function.   </p>\n<h3 id=\"contentEditable\"><a href=\"#contentEditable\" class=\"headerlink\" title=\"contentEditable\"></a>contentEditable</h3><p>The <code>contentEditable</code> attribute supports most tags. The browser allows user edits the content of element if this attribute is set to true. These elements is not like input or textarea tags. They are not support editable content like table, div, span and so on these tags.   </p>\n<span id=\"more\"></span>\n\n<p><code>contentEditable</code> attribute can be inherited by children tags. If the contentEditable is true, all children tags’s contentEditable will be true except we define it to false.   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>contentEditable<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">table</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>:inherit;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">table</span> &gt; <span class=\"selector-tag\">tr</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: blue;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.myDiv</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>:inherit;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> turnOnContentEditable = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> target = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;target&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            target.<span class=\"property\">contentEditable</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">contentEditable</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Java<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>CSharp<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>JavaScript<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Python<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;myDiv&quot;</span>&gt;</span></span><br><span class=\"line\">           This is Div Tag</span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;turnOnContentEditable();&quot;</span><span class=\"attr\">value</span>=<span class=\"string\">&quot;Turn On Edit Mode&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The root div is can’t be edited by default. when we click button to turn on contentEditable attribute. all children tags of this tag can be edited.   </p>\n<p><code>contentEditable</code> attribute is false:   </p>\n<img src=\"/assets/images/legacy/contentEditable-before.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/contentEditable-before.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"300\" height=\"350\">  \n\n<p><code>contentEditable</code> attribute is true:   </p>\n<img src=\"/assets/images/legacy/contentEditable-after.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/contentEditable-after.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"300\" height=\"350\">  \n\n<h3 id=\"designMode\"><a href=\"#designMode\" class=\"headerlink\" title=\"designMode\"></a>designMode</h3><p><code>designMode</code> attribute is actually entire document’s <code>contentEditable</code>. If we turn on the <code>designMode</code> attribute of the entire page, all the elements which supports <code>contentEditable</code> attributes can be edited. It is false by default.    </p>\n<p>We can just use javascript to turn on the document’s <code>designMode</code>.   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">designMode</span> = <span class=\"string\">&quot;on&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p><code>HTML5</code> supports <code>hidden</code> attribute for all elements. The <code>hidden</code> attribute can be set to ‘false’ and ‘true’ both values. The browser doesn’t display the element when <code>hidden = &#39;true&#39;</code>.   </p>\n<p>The <code>hidden = &#39;true&#39;</code> actually like we write <code>display:none</code> is <code>CSS</code> file. And also we can get its value by <code>hidden</code>.</p>\n<h3 id=\"spellcheck\"><a href=\"#spellcheck\" class=\"headerlink\" title=\"spellcheck\"></a>spellcheck</h3><p><code>HTML5</code> add new attributes <code>spellcheck</code> for editable elements like <code>input</code>,<code>textarea</code>, … The <code>spellcheck</code> can be set to ‘true’, ‘false’ both values. The browser will check the content user input and prompt error message for spell error words when it is set to ‘true’. </p>\n<pre><code class=\"html\">&lt;input type=&quot;text&quot; spellcheck=&quot;true&quot;/&gt;\n</code></pre>\n<img src=\"/assets/images/legacy/spellcheck.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/spellcheck.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"300\" height=\"80\">\n<blockquote>\n<p><em>Note: Supports <code>spellcheck</code> attribute’s browsers include <code>Chrome</code>, <code>Opera</code>, <code>Safari</code>, the <code>IE</code>, <code>FireFox</code> doesn’t support it for now.</em></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><code>HTML5</code> adds new common attributes for original <code>HTML</code> Tag, and these attributes enhances the <code>HTML</code> elements’s function.   </p>\n<h3 id=\"contentEditable\"><a href=\"#contentEditable\" class=\"headerlink\" title=\"contentEditable\"></a>contentEditable</h3><p>The <code>contentEditable</code> attribute supports most tags. The browser allows user edits the content of element if this attribute is set to true. These elements is not like input or textarea tags. They are not support editable content like table, div, span and so on these tags.   </p>","more":"<p><code>contentEditable</code> attribute can be inherited by children tags. If the contentEditable is true, all children tags’s contentEditable will be true except we define it to false.   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>contentEditable<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">table</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>:inherit;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">table</span> &gt; <span class=\"selector-tag\">tr</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: blue;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        </span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.myDiv</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>:inherit;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-top</span>:<span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> turnOnContentEditable = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> target = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;target&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            target.<span class=\"property\">contentEditable</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">contentEditable</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Java<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>CSharp<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>JavaScript<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Python<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;myDiv&quot;</span>&gt;</span></span><br><span class=\"line\">           This is Div Tag</span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;turnOnContentEditable();&quot;</span><span class=\"attr\">value</span>=<span class=\"string\">&quot;Turn On Edit Mode&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The root div is can’t be edited by default. when we click button to turn on contentEditable attribute. all children tags of this tag can be edited.   </p>\n<p><code>contentEditable</code> attribute is false:   </p>\n<img src=\"/assets/images/legacy/contentEditable-before.png\" class=\"\" width=\"300\" height=\"350\">  \n\n<p><code>contentEditable</code> attribute is true:   </p>\n<img src=\"/assets/images/legacy/contentEditable-after.png\" class=\"\" width=\"300\" height=\"350\">  \n\n<h3 id=\"designMode\"><a href=\"#designMode\" class=\"headerlink\" title=\"designMode\"></a>designMode</h3><p><code>designMode</code> attribute is actually entire document’s <code>contentEditable</code>. If we turn on the <code>designMode</code> attribute of the entire page, all the elements which supports <code>contentEditable</code> attributes can be edited. It is false by default.    </p>\n<p>We can just use javascript to turn on the document’s <code>designMode</code>.   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">designMode</span> = <span class=\"string\">&quot;on&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hidden\"><a href=\"#hidden\" class=\"headerlink\" title=\"hidden\"></a>hidden</h3><p><code>HTML5</code> supports <code>hidden</code> attribute for all elements. The <code>hidden</code> attribute can be set to ‘false’ and ‘true’ both values. The browser doesn’t display the element when <code>hidden = &#39;true&#39;</code>.   </p>\n<p>The <code>hidden = &#39;true&#39;</code> actually like we write <code>display:none</code> is <code>CSS</code> file. And also we can get its value by <code>hidden</code>.</p>\n<h3 id=\"spellcheck\"><a href=\"#spellcheck\" class=\"headerlink\" title=\"spellcheck\"></a>spellcheck</h3><p><code>HTML5</code> add new attributes <code>spellcheck</code> for editable elements like <code>input</code>,<code>textarea</code>, … The <code>spellcheck</code> can be set to ‘true’, ‘false’ both values. The browser will check the content user input and prompt error message for spell error words when it is set to ‘true’. </p>\n<pre><code class=\"html\">&lt;input type=&quot;text&quot; spellcheck=&quot;true&quot;/&gt;\n</code></pre>\n<img src=\"/assets/images/legacy/spellcheck.png\" class=\"\" width=\"300\" height=\"80\">\n<blockquote>\n<p><em>Note: Supports <code>spellcheck</code> attribute’s browsers include <code>Chrome</code>, <code>Opera</code>, <code>Safari</code>, the <code>IE</code>, <code>FireFox</code> doesn’t support it for now.</em></p>\n</blockquote>"},{"title":"HTML5 - New Common Elements","date":"2015-03-03T09:13:53.000Z","comments":1,"_content":"\nIn `HTML5`, It adds a mount of elements, these elements are more easier to present the document in browser.\n\n###Structure element\nBefore `HTML5`, we just use `div` tag to act as the `Document Structure Element`, but now the `HTML5` supports more elements like `section`, `article`, `nav`, `aside`, `header`, `footer` and so on.  \n\n<!-- more --> \n\n##### article\n`article` use to present an entire, independent article. We should use it when we need to present a entire, independent document content.   \nIt can contain `header` tag to define the header of the article.      \nIt can contain `footer` tag to define the footer of the article.    \nIt can contain `section` tag to split content to multiple paragraphs.     \nAlso, it can be nested by itself.   \n\n##### section\n`section` splits the page content to multiple blocks, and it usually contains title and content. And here the title stand for `h1`....`h6` tag. `section` can contains `article` and `section` tag.\n\n##### nav\n`nav` tag use to define the navigation bar, include the top of page, the left or right side, and the bottom and so on.\n\n##### aside\nIt's recommend to use it to present the side of page with `CSS`.\n\n##### header\nThe `header` tag use to define the header of the `article`, and it can contain multiple title tags (`h1`....`h6`) with `hgroup` tag. And also the common tags like `p`, `span` can be nested in it.   \n\n##### hgroup\nIt's mainaly use for including multiple title tag.\n\n##### footer\nThe footer of page, use to contains foot information, copy right and author related stuff.\n\n##### figure\n`figure` tag express an independant image area, it may contain one or more images， in addition to this tag can contain a new tag `figcaption` to express the title of images.\n\n### Semantic related elemnent\n##### mark\nIt is mark some information need to be noticed.\n\n#### time\nIt presents some content want to be time, date. Setting the `datetime` attribute's value to present which date formatter you want.\n\n#### Special function element\n#### meter\n`meter` tag express an as known maxium and minimum counter. It has many attributes to set. `value`, `min`, `max`, `low`, `high`, `optimum`.   \n``` html\n<div>\n  \tcurrent speed of car: <meter id=\"meter\" max=\"200\" min=\"0\" low=\"0\" high=\"180\" value=\"150\">kilometre/hour\n</div>\n```\n{% img /assets/images/legacy/meter-tag.png 300 80 %}\n\n#### progress\n`progress` tag use to express an progress bar. It has two attributes, one is `max`, another is `value`.\n\n``` html\n<div>\n   the progress of un-finished task: <progress id=\"progress\" max=\"1\" value=\"0.4\"/>\n</div>\n```\n{% img /assets/images/legacy/progress-tag.png 350 100 %}","source":"_posts/2015-03-03-html5-new-common-elements.markdown","raw":"---\n\ntitle: \"HTML5 - New Common Elements\"\ndate: 2015-03-03 17:13:53 +0800\ncomments: true\ncategories: Frontend\ntags: [HTML5]\n---\n\nIn `HTML5`, It adds a mount of elements, these elements are more easier to present the document in browser.\n\n###Structure element\nBefore `HTML5`, we just use `div` tag to act as the `Document Structure Element`, but now the `HTML5` supports more elements like `section`, `article`, `nav`, `aside`, `header`, `footer` and so on.  \n\n<!-- more --> \n\n##### article\n`article` use to present an entire, independent article. We should use it when we need to present a entire, independent document content.   \nIt can contain `header` tag to define the header of the article.      \nIt can contain `footer` tag to define the footer of the article.    \nIt can contain `section` tag to split content to multiple paragraphs.     \nAlso, it can be nested by itself.   \n\n##### section\n`section` splits the page content to multiple blocks, and it usually contains title and content. And here the title stand for `h1`....`h6` tag. `section` can contains `article` and `section` tag.\n\n##### nav\n`nav` tag use to define the navigation bar, include the top of page, the left or right side, and the bottom and so on.\n\n##### aside\nIt's recommend to use it to present the side of page with `CSS`.\n\n##### header\nThe `header` tag use to define the header of the `article`, and it can contain multiple title tags (`h1`....`h6`) with `hgroup` tag. And also the common tags like `p`, `span` can be nested in it.   \n\n##### hgroup\nIt's mainaly use for including multiple title tag.\n\n##### footer\nThe footer of page, use to contains foot information, copy right and author related stuff.\n\n##### figure\n`figure` tag express an independant image area, it may contain one or more images， in addition to this tag can contain a new tag `figcaption` to express the title of images.\n\n### Semantic related elemnent\n##### mark\nIt is mark some information need to be noticed.\n\n#### time\nIt presents some content want to be time, date. Setting the `datetime` attribute's value to present which date formatter you want.\n\n#### Special function element\n#### meter\n`meter` tag express an as known maxium and minimum counter. It has many attributes to set. `value`, `min`, `max`, `low`, `high`, `optimum`.   \n``` html\n<div>\n  \tcurrent speed of car: <meter id=\"meter\" max=\"200\" min=\"0\" low=\"0\" high=\"180\" value=\"150\">kilometre/hour\n</div>\n```\n{% img /assets/images/legacy/meter-tag.png 300 80 %}\n\n#### progress\n`progress` tag use to express an progress bar. It has two attributes, one is `max`, another is `value`.\n\n``` html\n<div>\n   the progress of un-finished task: <progress id=\"progress\" max=\"1\" value=\"0.4\"/>\n</div>\n```\n{% img /assets/images/legacy/progress-tag.png 350 100 %}","slug":"2015-03-03-html5-new-common-elements","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4oc002hazv5enf588ik","layout":"post","photos":[],"link":"","content":"<p>In <code>HTML5</code>, It adds a mount of elements, these elements are more easier to present the document in browser.</p>\n<p>###Structure element<br>Before <code>HTML5</code>, we just use <code>div</code> tag to act as the <code>Document Structure Element</code>, but now the <code>HTML5</code> supports more elements like <code>section</code>, <code>article</code>, <code>nav</code>, <code>aside</code>, <code>header</code>, <code>footer</code> and so on.  </p>\n<span id=\"more\"></span> \n\n<h5 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a>article</h5><p><code>article</code> use to present an entire, independent article. We should use it when we need to present a entire, independent document content.<br>It can contain <code>header</code> tag to define the header of the article.<br>It can contain <code>footer</code> tag to define the footer of the article.<br>It can contain <code>section</code> tag to split content to multiple paragraphs.<br>Also, it can be nested by itself.   </p>\n<h5 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>section</h5><p><code>section</code> splits the page content to multiple blocks, and it usually contains title and content. And here the title stand for <code>h1</code>….<code>h6</code> tag. <code>section</code> can contains <code>article</code> and <code>section</code> tag.</p>\n<h5 id=\"nav\"><a href=\"#nav\" class=\"headerlink\" title=\"nav\"></a>nav</h5><p><code>nav</code> tag use to define the navigation bar, include the top of page, the left or right side, and the bottom and so on.</p>\n<h5 id=\"aside\"><a href=\"#aside\" class=\"headerlink\" title=\"aside\"></a>aside</h5><p>It’s recommend to use it to present the side of page with <code>CSS</code>.</p>\n<h5 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h5><p>The <code>header</code> tag use to define the header of the <code>article</code>, and it can contain multiple title tags (<code>h1</code>….<code>h6</code>) with <code>hgroup</code> tag. And also the common tags like <code>p</code>, <code>span</code> can be nested in it.   </p>\n<h5 id=\"hgroup\"><a href=\"#hgroup\" class=\"headerlink\" title=\"hgroup\"></a>hgroup</h5><p>It’s mainaly use for including multiple title tag.</p>\n<h5 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a>footer</h5><p>The footer of page, use to contains foot information, copy right and author related stuff.</p>\n<h5 id=\"figure\"><a href=\"#figure\" class=\"headerlink\" title=\"figure\"></a>figure</h5><p><code>figure</code> tag express an independant image area, it may contain one or more images， in addition to this tag can contain a new tag <code>figcaption</code> to express the title of images.</p>\n<h3 id=\"Semantic-related-elemnent\"><a href=\"#Semantic-related-elemnent\" class=\"headerlink\" title=\"Semantic related elemnent\"></a>Semantic related elemnent</h3><h5 id=\"mark\"><a href=\"#mark\" class=\"headerlink\" title=\"mark\"></a>mark</h5><p>It is mark some information need to be noticed.</p>\n<h4 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time\"></a>time</h4><p>It presents some content want to be time, date. Setting the <code>datetime</code> attribute’s value to present which date formatter you want.</p>\n<h4 id=\"Special-function-element\"><a href=\"#Special-function-element\" class=\"headerlink\" title=\"Special function element\"></a>Special function element</h4><h4 id=\"meter\"><a href=\"#meter\" class=\"headerlink\" title=\"meter\"></a>meter</h4><p><code>meter</code> tag express an as known maxium and minimum counter. It has many attributes to set. <code>value</code>, <code>min</code>, <code>max</code>, <code>low</code>, <code>high</code>, <code>optimum</code>.   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  \tcurrent speed of car: <span class=\"tag\">&lt;<span class=\"name\">meter</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;meter&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">min</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">low</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">high</span>=<span class=\"string\">&quot;180&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;150&quot;</span>&gt;</span>kilometre/hour</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/assets/images/legacy/meter-tag.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/meter-tag.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"300\" height=\"80\">\n\n<h4 id=\"progress\"><a href=\"#progress\" class=\"headerlink\" title=\"progress\"></a>progress</h4><p><code>progress</code> tag use to express an progress bar. It has two attributes, one is <code>max</code>, another is <code>value</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   the progress of un-finished task: <span class=\"tag\">&lt;<span class=\"name\">progress</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;progress&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0.4&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/assets/images/legacy/progress-tag.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/progress-tag.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"350\" height=\"100\">","site":{"data":{}},"excerpt":"<p>In <code>HTML5</code>, It adds a mount of elements, these elements are more easier to present the document in browser.</p>\n<p>###Structure element<br>Before <code>HTML5</code>, we just use <code>div</code> tag to act as the <code>Document Structure Element</code>, but now the <code>HTML5</code> supports more elements like <code>section</code>, <code>article</code>, <code>nav</code>, <code>aside</code>, <code>header</code>, <code>footer</code> and so on.  </p>","more":"<h5 id=\"article\"><a href=\"#article\" class=\"headerlink\" title=\"article\"></a>article</h5><p><code>article</code> use to present an entire, independent article. We should use it when we need to present a entire, independent document content.<br>It can contain <code>header</code> tag to define the header of the article.<br>It can contain <code>footer</code> tag to define the footer of the article.<br>It can contain <code>section</code> tag to split content to multiple paragraphs.<br>Also, it can be nested by itself.   </p>\n<h5 id=\"section\"><a href=\"#section\" class=\"headerlink\" title=\"section\"></a>section</h5><p><code>section</code> splits the page content to multiple blocks, and it usually contains title and content. And here the title stand for <code>h1</code>….<code>h6</code> tag. <code>section</code> can contains <code>article</code> and <code>section</code> tag.</p>\n<h5 id=\"nav\"><a href=\"#nav\" class=\"headerlink\" title=\"nav\"></a>nav</h5><p><code>nav</code> tag use to define the navigation bar, include the top of page, the left or right side, and the bottom and so on.</p>\n<h5 id=\"aside\"><a href=\"#aside\" class=\"headerlink\" title=\"aside\"></a>aside</h5><p>It’s recommend to use it to present the side of page with <code>CSS</code>.</p>\n<h5 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h5><p>The <code>header</code> tag use to define the header of the <code>article</code>, and it can contain multiple title tags (<code>h1</code>….<code>h6</code>) with <code>hgroup</code> tag. And also the common tags like <code>p</code>, <code>span</code> can be nested in it.   </p>\n<h5 id=\"hgroup\"><a href=\"#hgroup\" class=\"headerlink\" title=\"hgroup\"></a>hgroup</h5><p>It’s mainaly use for including multiple title tag.</p>\n<h5 id=\"footer\"><a href=\"#footer\" class=\"headerlink\" title=\"footer\"></a>footer</h5><p>The footer of page, use to contains foot information, copy right and author related stuff.</p>\n<h5 id=\"figure\"><a href=\"#figure\" class=\"headerlink\" title=\"figure\"></a>figure</h5><p><code>figure</code> tag express an independant image area, it may contain one or more images， in addition to this tag can contain a new tag <code>figcaption</code> to express the title of images.</p>\n<h3 id=\"Semantic-related-elemnent\"><a href=\"#Semantic-related-elemnent\" class=\"headerlink\" title=\"Semantic related elemnent\"></a>Semantic related elemnent</h3><h5 id=\"mark\"><a href=\"#mark\" class=\"headerlink\" title=\"mark\"></a>mark</h5><p>It is mark some information need to be noticed.</p>\n<h4 id=\"time\"><a href=\"#time\" class=\"headerlink\" title=\"time\"></a>time</h4><p>It presents some content want to be time, date. Setting the <code>datetime</code> attribute’s value to present which date formatter you want.</p>\n<h4 id=\"Special-function-element\"><a href=\"#Special-function-element\" class=\"headerlink\" title=\"Special function element\"></a>Special function element</h4><h4 id=\"meter\"><a href=\"#meter\" class=\"headerlink\" title=\"meter\"></a>meter</h4><p><code>meter</code> tag express an as known maxium and minimum counter. It has many attributes to set. <code>value</code>, <code>min</code>, <code>max</code>, <code>low</code>, <code>high</code>, <code>optimum</code>.   </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  \tcurrent speed of car: <span class=\"tag\">&lt;<span class=\"name\">meter</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;meter&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">min</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">low</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">high</span>=<span class=\"string\">&quot;180&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;150&quot;</span>&gt;</span>kilometre/hour</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/assets/images/legacy/meter-tag.png\" class=\"\" width=\"300\" height=\"80\">\n\n<h4 id=\"progress\"><a href=\"#progress\" class=\"headerlink\" title=\"progress\"></a>progress</h4><p><code>progress</code> tag use to express an progress bar. It has two attributes, one is <code>max</code>, another is <code>value</code>.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   the progress of un-finished task: <span class=\"tag\">&lt;<span class=\"name\">progress</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;progress&quot;</span> <span class=\"attr\">max</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0.4&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<img src=\"/assets/images/legacy/progress-tag.png\" class=\"\" width=\"350\" height=\"100\">"},{"title":"Give me a cup of coffeescript","date":"2015-03-19T07:47:18.000Z","comments":1,"_content":"{% img /assets/images/legacy/coffee-script-logo.png 200 100 %} is programming language, which is built on top of `JavaScript`. CoffeeScript compiles into JavaScript that is efficient and consistent with many best practices. And it offers a clean syntax that should appeal to anyone who likes `Python` or `Ruby`.    \n\nActually, The `CoffeeScript` is just a JavaScript. So you can use any exsiting JavaScript library seamlessly from CoffeeScript. And both `client-side` and `server-side` can be written by `CoffeeScript`. So CoffeeScript can write entire web application completely, not like JavaScript only write client-side.  \n\n<!-- more -->  \n\nThe CoffeeScript is a `Node.js` package, so you need to install it with `Node Package Manager`. There assume you have installed node.js. You can watch [here](https://nodejs.org/) to see how to install node.js if you dont' know it. Putting below commands to install CoffeeScript:\n    \n``` js\nnpm install -g coffee-script\n```\n\nCoffeeScript supports many commands to let you build your application. You just need to input below command line: \n  \n``` js\ncoffee -help\n``` \n  \nIt will print awesome useful content: \n\n``` js  \nUsage: coffee [options] path/to/script.coffee -- [args]\n\nIf called without options, `coffee` will run your script.\n\n  -b, --bare         compile without a top-level function wrapper\n  -c, --compile      compile to JavaScript and save as .js files\n  -e, --eval         pass a string from the command line as input\n  -h, --help         display this help message\n  -i, --interactive  run an interactive CoffeeScript REPL\n  -j, --join         concatenate the source CoffeeScript before compiling\n  -m, --map          generate source map and save as .js.map files\n  -n, --nodes        print out the parse tree that the parser produces\n      --nodejs       pass options directly to the \"node\" binary\n      --no-header    suppress the \"Generated by\" header\n  -o, --output       set the output directory for compiled JavaScript\n  -p, --print        print out the compiled JavaScript\n  -s, --stdio        listen for and compile scripts over stdio\n  -l, --literate     treat stdio as literate style coffee-script\n  -t, --tokens       print out the tokens that the lexer/rewriter produce\n  -v, --version      display the version number\n  -w, --watch        watch scripts for changes and rerun commands\n```    \n\nLet's give a example, how to use CoffeeScript to solve a mathematics problem. Here we will solve the first mathematical problem of `Project Eluar`. The problem is below:\n\n> If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n> Find the sum of all the multiples of 3 or 5 below 1000.\n\nAnd now we solve this problem with CoffeeScript elegantly:\n\n``` coffeescript\n([1..999].filter (x) -> x % 3 is 0 or x % 5 is 0).reduce (x, y) -> x + y\n```\n\nYou see, just one code line. It's very concise and elegant. Not like JavaScript need to defined many variables and functions to solve it.    \n\nCheers,  I think you will love it.\n\n","source":"_posts/2015-03-19-give-me-a-cup-of-coffeescript.markdown","raw":"---\n\ntitle: \"Give me a cup of coffeescript\"\ndate: 2015-03-19 15:47:18 +0800\ncomments: true\ncategories: Frontend\ntags: [CoffeeScript]\n---\n{% img /assets/images/legacy/coffee-script-logo.png 200 100 %} is programming language, which is built on top of `JavaScript`. CoffeeScript compiles into JavaScript that is efficient and consistent with many best practices. And it offers a clean syntax that should appeal to anyone who likes `Python` or `Ruby`.    \n\nActually, The `CoffeeScript` is just a JavaScript. So you can use any exsiting JavaScript library seamlessly from CoffeeScript. And both `client-side` and `server-side` can be written by `CoffeeScript`. So CoffeeScript can write entire web application completely, not like JavaScript only write client-side.  \n\n<!-- more -->  \n\nThe CoffeeScript is a `Node.js` package, so you need to install it with `Node Package Manager`. There assume you have installed node.js. You can watch [here](https://nodejs.org/) to see how to install node.js if you dont' know it. Putting below commands to install CoffeeScript:\n    \n``` js\nnpm install -g coffee-script\n```\n\nCoffeeScript supports many commands to let you build your application. You just need to input below command line: \n  \n``` js\ncoffee -help\n``` \n  \nIt will print awesome useful content: \n\n``` js  \nUsage: coffee [options] path/to/script.coffee -- [args]\n\nIf called without options, `coffee` will run your script.\n\n  -b, --bare         compile without a top-level function wrapper\n  -c, --compile      compile to JavaScript and save as .js files\n  -e, --eval         pass a string from the command line as input\n  -h, --help         display this help message\n  -i, --interactive  run an interactive CoffeeScript REPL\n  -j, --join         concatenate the source CoffeeScript before compiling\n  -m, --map          generate source map and save as .js.map files\n  -n, --nodes        print out the parse tree that the parser produces\n      --nodejs       pass options directly to the \"node\" binary\n      --no-header    suppress the \"Generated by\" header\n  -o, --output       set the output directory for compiled JavaScript\n  -p, --print        print out the compiled JavaScript\n  -s, --stdio        listen for and compile scripts over stdio\n  -l, --literate     treat stdio as literate style coffee-script\n  -t, --tokens       print out the tokens that the lexer/rewriter produce\n  -v, --version      display the version number\n  -w, --watch        watch scripts for changes and rerun commands\n```    \n\nLet's give a example, how to use CoffeeScript to solve a mathematics problem. Here we will solve the first mathematical problem of `Project Eluar`. The problem is below:\n\n> If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n> Find the sum of all the multiples of 3 or 5 below 1000.\n\nAnd now we solve this problem with CoffeeScript elegantly:\n\n``` coffeescript\n([1..999].filter (x) -> x % 3 is 0 or x % 5 is 0).reduce (x, y) -> x + y\n```\n\nYou see, just one code line. It's very concise and elegant. Not like JavaScript need to defined many variables and functions to solve it.    \n\nCheers,  I think you will love it.\n\n","slug":"2015-03-19-give-me-a-cup-of-coffeescript","published":1,"updated":"2023-09-02T17:27:29.812Z","_id":"clm27g4od002jazv5fhmw1kw5","layout":"post","photos":[],"link":"","content":"<img src=\"/assets/images/legacy/coffee-script-logo.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/coffee-script-logo.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"200\" height=\"100\"> is programming language, which is built on top of `JavaScript`. CoffeeScript compiles into JavaScript that is efficient and consistent with many best practices. And it offers a clean syntax that should appeal to anyone who likes `Python` or `Ruby`.    \n\n<p>Actually, The <code>CoffeeScript</code> is just a JavaScript. So you can use any exsiting JavaScript library seamlessly from CoffeeScript. And both <code>client-side</code> and <code>server-side</code> can be written by <code>CoffeeScript</code>. So CoffeeScript can write entire web application completely, not like JavaScript only write client-side.  </p>\n<span id=\"more\"></span>  \n\n<p>The CoffeeScript is a <code>Node.js</code> package, so you need to install it with <code>Node Package Manager</code>. There assume you have installed node.js. You can watch <a href=\"https://nodejs.org/\">here</a> to see how to install node.js if you dont’ know it. Putting below commands to install CoffeeScript:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g coffee-script</span><br></pre></td></tr></table></figure>\n\n<p>CoffeeScript supports many commands to let you build your application. You just need to input below command line: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coffee -help</span><br></pre></td></tr></table></figure>\n<p>It will print awesome useful content: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Usage</span>: coffee [options] path/to/script.<span class=\"property\">coffee</span> -- [args]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">If</span> called without options, <span class=\"string\">`coffee`</span> will run your script.</span><br><span class=\"line\"></span><br><span class=\"line\">  -b, --bare         compile without a top-level <span class=\"keyword\">function</span> wrapper</span><br><span class=\"line\">  -c, --compile      compile to <span class=\"title class_\">JavaScript</span> and save <span class=\"keyword\">as</span> .<span class=\"property\">js</span> files</span><br><span class=\"line\">  -e, --<span class=\"built_in\">eval</span>         pass a string <span class=\"keyword\">from</span> the command line <span class=\"keyword\">as</span> input</span><br><span class=\"line\">  -h, --help         display <span class=\"variable language_\">this</span> help message</span><br><span class=\"line\">  -i, --interactive  run an interactive <span class=\"title class_\">CoffeeScript</span> <span class=\"variable constant_\">REPL</span></span><br><span class=\"line\">  -j, --join         concatenate the source <span class=\"title class_\">CoffeeScript</span> before compiling</span><br><span class=\"line\">  -m, --map          generate source map and save <span class=\"keyword\">as</span> .<span class=\"property\">js</span>.<span class=\"property\">map</span> files</span><br><span class=\"line\">  -n, --nodes        print out the parse tree that the parser produces</span><br><span class=\"line\">      --nodejs       pass options directly to the <span class=\"string\">&quot;node&quot;</span> binary</span><br><span class=\"line\">      --no-header    suppress the <span class=\"string\">&quot;Generated by&quot;</span> header</span><br><span class=\"line\">  -o, --output       set the output directory <span class=\"keyword\">for</span> compiled <span class=\"title class_\">JavaScript</span></span><br><span class=\"line\">  -p, --print        print out the compiled <span class=\"title class_\">JavaScript</span></span><br><span class=\"line\">  -s, --stdio        listen <span class=\"keyword\">for</span> and compile scripts over stdio</span><br><span class=\"line\">  -l, --literate     treat stdio <span class=\"keyword\">as</span> literate style coffee-script</span><br><span class=\"line\">  -t, --tokens       print out the tokens that the lexer/rewriter produce</span><br><span class=\"line\">  -v, --version      display the version number</span><br><span class=\"line\">  -w, --watch        watch scripts <span class=\"keyword\">for</span> changes and rerun commands</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Let&#x27;s give a example, how to use CoffeeScript to solve a mathematics problem. Here we will solve the first mathematical problem of `</span><span class=\"title class_\">Project</span> <span class=\"title class_\">Eluar</span><span class=\"string\">`. The problem is below:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&gt; If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</span></span><br><span class=\"line\"><span class=\"string\">&gt; Find the sum of all the multiples of 3 or 5 below 1000.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">And now we solve this problem with CoffeeScript elegantly:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> coffeescript</span><br><span class=\"line\">([<span class=\"number\">1.</span><span class=\"number\">.999</span>].<span class=\"property\">filter</span> (x) -&gt; x % <span class=\"number\">3</span> is <span class=\"number\">0</span> or x % <span class=\"number\">5</span> is <span class=\"number\">0</span>).<span class=\"property\">reduce</span> (x, y) -&gt; x + y</span><br></pre></td></tr></table></figure>\n\n<p>You see, just one code line. It’s very concise and elegant. Not like JavaScript need to defined many variables and functions to solve it.    </p>\n<p>Cheers,  I think you will love it.</p>\n","site":{"data":{}},"excerpt":"<img src=\"/assets/images/legacy/coffee-script-logo.png\" class=\"\" width=\"200\" height=\"100\"> is programming language, which is built on top of `JavaScript`. CoffeeScript compiles into JavaScript that is efficient and consistent with many best practices. And it offers a clean syntax that should appeal to anyone who likes `Python` or `Ruby`.    \n\n<p>Actually, The <code>CoffeeScript</code> is just a JavaScript. So you can use any exsiting JavaScript library seamlessly from CoffeeScript. And both <code>client-side</code> and <code>server-side</code> can be written by <code>CoffeeScript</code>. So CoffeeScript can write entire web application completely, not like JavaScript only write client-side.  </p>","more":"<p>The CoffeeScript is a <code>Node.js</code> package, so you need to install it with <code>Node Package Manager</code>. There assume you have installed node.js. You can watch <a href=\"https://nodejs.org/\">here</a> to see how to install node.js if you dont’ know it. Putting below commands to install CoffeeScript:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g coffee-script</span><br></pre></td></tr></table></figure>\n\n<p>CoffeeScript supports many commands to let you build your application. You just need to input below command line: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">coffee -help</span><br></pre></td></tr></table></figure>\n<p>It will print awesome useful content: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Usage</span>: coffee [options] path/to/script.<span class=\"property\">coffee</span> -- [args]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">If</span> called without options, <span class=\"string\">`coffee`</span> will run your script.</span><br><span class=\"line\"></span><br><span class=\"line\">  -b, --bare         compile without a top-level <span class=\"keyword\">function</span> wrapper</span><br><span class=\"line\">  -c, --compile      compile to <span class=\"title class_\">JavaScript</span> and save <span class=\"keyword\">as</span> .<span class=\"property\">js</span> files</span><br><span class=\"line\">  -e, --<span class=\"built_in\">eval</span>         pass a string <span class=\"keyword\">from</span> the command line <span class=\"keyword\">as</span> input</span><br><span class=\"line\">  -h, --help         display <span class=\"variable language_\">this</span> help message</span><br><span class=\"line\">  -i, --interactive  run an interactive <span class=\"title class_\">CoffeeScript</span> <span class=\"variable constant_\">REPL</span></span><br><span class=\"line\">  -j, --join         concatenate the source <span class=\"title class_\">CoffeeScript</span> before compiling</span><br><span class=\"line\">  -m, --map          generate source map and save <span class=\"keyword\">as</span> .<span class=\"property\">js</span>.<span class=\"property\">map</span> files</span><br><span class=\"line\">  -n, --nodes        print out the parse tree that the parser produces</span><br><span class=\"line\">      --nodejs       pass options directly to the <span class=\"string\">&quot;node&quot;</span> binary</span><br><span class=\"line\">      --no-header    suppress the <span class=\"string\">&quot;Generated by&quot;</span> header</span><br><span class=\"line\">  -o, --output       set the output directory <span class=\"keyword\">for</span> compiled <span class=\"title class_\">JavaScript</span></span><br><span class=\"line\">  -p, --print        print out the compiled <span class=\"title class_\">JavaScript</span></span><br><span class=\"line\">  -s, --stdio        listen <span class=\"keyword\">for</span> and compile scripts over stdio</span><br><span class=\"line\">  -l, --literate     treat stdio <span class=\"keyword\">as</span> literate style coffee-script</span><br><span class=\"line\">  -t, --tokens       print out the tokens that the lexer/rewriter produce</span><br><span class=\"line\">  -v, --version      display the version number</span><br><span class=\"line\">  -w, --watch        watch scripts <span class=\"keyword\">for</span> changes and rerun commands</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Let&#x27;s give a example, how to use CoffeeScript to solve a mathematics problem. Here we will solve the first mathematical problem of `</span><span class=\"title class_\">Project</span> <span class=\"title class_\">Eluar</span><span class=\"string\">`. The problem is below:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&gt; If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</span></span><br><span class=\"line\"><span class=\"string\">&gt; Find the sum of all the multiples of 3 or 5 below 1000.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">And now we solve this problem with CoffeeScript elegantly:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> coffeescript</span><br><span class=\"line\">([<span class=\"number\">1.</span><span class=\"number\">.999</span>].<span class=\"property\">filter</span> (x) -&gt; x % <span class=\"number\">3</span> is <span class=\"number\">0</span> or x % <span class=\"number\">5</span> is <span class=\"number\">0</span>).<span class=\"property\">reduce</span> (x, y) -&gt; x + y</span><br></pre></td></tr></table></figure>\n\n<p>You see, just one code line. It’s very concise and elegant. Not like JavaScript need to defined many variables and functions to solve it.    </p>\n<p>Cheers,  I think you will love it.</p>"},{"title":"how to use jdbc in spring","date":"2015-05-05T08:31:53.000Z","comments":1,"_content":"\nAs we know, we can use `jdbc` to access database in java programming. And now let us use `jdbc` in spring. The `spring framework` reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are `org.springframework.jdbc.datasource.DriverManagerDataSource` and `org.springframework.jdbc.core.JdbcTemplate`.   \n\nAnd here we use the `hsqldb` to act as our memory database. You can go to [here](http://hsqldb.org/) to look at it. we use the `Maven` tools to management our project. the dependencies is:    \n\n<!-- more -->\n``` \n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-jdbc</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.hsqldb</groupId>\n\t\t\t<artifactId>hsqldb</artifactId>\n\t\t\t<version>1.8.0.10</version>\n\t\t</dependency>\n</dependencies>\n```\nThe spring configure file:    \n \n```\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\t\t\t\n<beans>\n\n \t<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n\t    <property name=\"driverClassName\" value=\"org.hsqldb.jdbcDriver\"/>\n\t    <property name=\"url\" value=\"jdbc:hsqldb:mem:MyDB\"/>\n\t    <property name=\"username\" value=\"sa\"/>\n\t    <property name=\"password\" value=\"\"/>\n \t</bean>\n \t\n \t<bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">\n\t\t <constructor-arg>\n\t\t   \t<ref bean=\"dataSource\"/>\n\t\t </constructor-arg>    \n \t</bean>\n \t\n    <bean id=\"createTable\" class=\"java4s.SpringJdbcCreateTable\">\n   \t\t<property name=\"jt\">\n      \t\t<ref bean=\"jdbcTemplate\"/>\n   \t\t</property>\n \t</bean>\n \n</beans>  \n```  \n\nwe have a SpringJdbcCreateTable class to accesss database, this class has `JdbcTemplate` property,    \n    \n``` java\nJdbcTemplate jt;\n\npublic void setJt(JdbcTemplate jt) {\n\tthis.jt = jt;\n}\n```\nwe use spring bean to inject value to this property. And you will see it in above spring configure file.\n\ncreate table, the `execute` method doesn't return value.      \n\n``` java \npublic void createTable() {\n\tjt.execute(\"CREATE TABLE user(id int, name varchar(10), age int)\");\n\t// execute() returns void\n\tSystem.out.println(\"table created\");\n}\n```\n\ninsert data, using the `update` method to insert data, this method will return how many rows have been inserted. \n\n``` java\npublic void insertData() {\n\tint k = jt.update(\"INSERT INTO user VALUES (99, 'user_99', 49)\");\n\tshowDatas();\n\t\t\n\tSystem.out.println(String.format(\"%s row inserted\", k));\n}\n```\nupdate data, using the `update` method to update data, it will return how many rows are affected.\n\n``` java\npublic void updateData() {\n\tint k = jt.update(\"UPDATE user set name='user_new' where name='user_99'\");\n\tshowDatas();\n\t\t\n\tSystem.out.println(String.format(\"%s row updated\", k));\n}\n```\n\ndelete data, also using the `update` method.\n\n``` java\npublic void deleteData() {\n\tint k = jt.update(\"DELETE from user where name='user_new'\");\n\t\t\n\tshowDatas();\n\tSystem.out.println(String.format(\"%s row deleted\", k));\n}\n```\n\nquery data, the jdbctemplate has many query interfaces. Here we use `queryForRowSet` method to get the data by condition.\n\n``` java\n\nprivate void showDatas() {\n\tSystem.out.println(\"|  ID |  NAME    |  AGE  |\");\n\tSqlRowSet rowSet = jt.queryForRowSet(\"SELECT * FROM user\");\n\n\twhile (rowSet.next()) {\n\t\tint id = rowSet.getInt(1);\n\t\tString name = rowSet.getString(2);\n\t\tint age = rowSet.getInt(3);\n\n\t\tString msg = String\n\t\t\t\t.format(\"|  %s  |  %s  |  %s   |\", id, name, age);\n\t\t\t\n\t\tSystem.out.println(msg);\n\t}\t\t\n}\n```\nokay, to so far, let us call them in main entrance.\n\n``` java\npublic static void main(String args[])\n{\n\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"spconfig.xml\");\n\tSpringJdbcCreateTable st =(SpringJdbcCreateTable)applicationContext.getBean(\"createTable\");\n\t\t\n\tst.createTable();\n\tst.initSomeDatas();\n\tst.insertData();\n\tst.updateData();\n\tst.deleteData();\n}\n```\n\nLook, it's very easy to access database with spring framework.","source":"_posts/2015-05-05-how-to-use-jdbc-in-spring.markdown","raw":"---\n\ntitle: \"how to use jdbc in spring\"\ndate: 2015-05-05 16:31:53 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n\nAs we know, we can use `jdbc` to access database in java programming. And now let us use `jdbc` in spring. The `spring framework` reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are `org.springframework.jdbc.datasource.DriverManagerDataSource` and `org.springframework.jdbc.core.JdbcTemplate`.   \n\nAnd here we use the `hsqldb` to act as our memory database. You can go to [here](http://hsqldb.org/) to look at it. we use the `Maven` tools to management our project. the dependencies is:    \n\n<!-- more -->\n``` \n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-jdbc</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.hsqldb</groupId>\n\t\t\t<artifactId>hsqldb</artifactId>\n\t\t\t<version>1.8.0.10</version>\n\t\t</dependency>\n</dependencies>\n```\nThe spring configure file:    \n \n```\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\t\t\t\n<beans>\n\n \t<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n\t    <property name=\"driverClassName\" value=\"org.hsqldb.jdbcDriver\"/>\n\t    <property name=\"url\" value=\"jdbc:hsqldb:mem:MyDB\"/>\n\t    <property name=\"username\" value=\"sa\"/>\n\t    <property name=\"password\" value=\"\"/>\n \t</bean>\n \t\n \t<bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">\n\t\t <constructor-arg>\n\t\t   \t<ref bean=\"dataSource\"/>\n\t\t </constructor-arg>    \n \t</bean>\n \t\n    <bean id=\"createTable\" class=\"java4s.SpringJdbcCreateTable\">\n   \t\t<property name=\"jt\">\n      \t\t<ref bean=\"jdbcTemplate\"/>\n   \t\t</property>\n \t</bean>\n \n</beans>  \n```  \n\nwe have a SpringJdbcCreateTable class to accesss database, this class has `JdbcTemplate` property,    \n    \n``` java\nJdbcTemplate jt;\n\npublic void setJt(JdbcTemplate jt) {\n\tthis.jt = jt;\n}\n```\nwe use spring bean to inject value to this property. And you will see it in above spring configure file.\n\ncreate table, the `execute` method doesn't return value.      \n\n``` java \npublic void createTable() {\n\tjt.execute(\"CREATE TABLE user(id int, name varchar(10), age int)\");\n\t// execute() returns void\n\tSystem.out.println(\"table created\");\n}\n```\n\ninsert data, using the `update` method to insert data, this method will return how many rows have been inserted. \n\n``` java\npublic void insertData() {\n\tint k = jt.update(\"INSERT INTO user VALUES (99, 'user_99', 49)\");\n\tshowDatas();\n\t\t\n\tSystem.out.println(String.format(\"%s row inserted\", k));\n}\n```\nupdate data, using the `update` method to update data, it will return how many rows are affected.\n\n``` java\npublic void updateData() {\n\tint k = jt.update(\"UPDATE user set name='user_new' where name='user_99'\");\n\tshowDatas();\n\t\t\n\tSystem.out.println(String.format(\"%s row updated\", k));\n}\n```\n\ndelete data, also using the `update` method.\n\n``` java\npublic void deleteData() {\n\tint k = jt.update(\"DELETE from user where name='user_new'\");\n\t\t\n\tshowDatas();\n\tSystem.out.println(String.format(\"%s row deleted\", k));\n}\n```\n\nquery data, the jdbctemplate has many query interfaces. Here we use `queryForRowSet` method to get the data by condition.\n\n``` java\n\nprivate void showDatas() {\n\tSystem.out.println(\"|  ID |  NAME    |  AGE  |\");\n\tSqlRowSet rowSet = jt.queryForRowSet(\"SELECT * FROM user\");\n\n\twhile (rowSet.next()) {\n\t\tint id = rowSet.getInt(1);\n\t\tString name = rowSet.getString(2);\n\t\tint age = rowSet.getInt(3);\n\n\t\tString msg = String\n\t\t\t\t.format(\"|  %s  |  %s  |  %s   |\", id, name, age);\n\t\t\t\n\t\tSystem.out.println(msg);\n\t}\t\t\n}\n```\nokay, to so far, let us call them in main entrance.\n\n``` java\npublic static void main(String args[])\n{\n\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"spconfig.xml\");\n\tSpringJdbcCreateTable st =(SpringJdbcCreateTable)applicationContext.getBean(\"createTable\");\n\t\t\n\tst.createTable();\n\tst.initSomeDatas();\n\tst.insertData();\n\tst.updateData();\n\tst.deleteData();\n}\n```\n\nLook, it's very easy to access database with spring framework.","slug":"2015-05-05-how-to-use-jdbc-in-spring","published":1,"updated":"2023-09-02T16:42:58.438Z","_id":"clm27g4oe002kazv52z7f45jk","layout":"post","photos":[],"link":"","content":"<p>As we know, we can use <code>jdbc</code> to access database in java programming. And now let us use <code>jdbc</code> in spring. The <code>spring framework</code> reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are <code>org.springframework.jdbc.datasource.DriverManagerDataSource</code> and <code>org.springframework.jdbc.core.JdbcTemplate</code>.   </p>\n<p>And here we use the <code>hsqldb</code> to act as our memory database. You can go to <a href=\"http://hsqldb.org/\">here</a> to look at it. we use the <code>Maven</code> tools to management our project. the dependencies is:    </p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.hsqldb&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;hsqldb&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.8.0.10&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>The spring configure file:    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span><br><span class=\"line\">\t\t\t&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">&lt;beans&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;driverClassName&quot; value=&quot;org.hsqldb.jdbcDriver&quot;/&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;url&quot; value=&quot;jdbc:hsqldb:mem:MyDB&quot;/&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;username&quot; value=&quot;sa&quot;/&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class=\"line\">\t\t &lt;constructor-arg&gt;</span><br><span class=\"line\">\t\t   \t&lt;ref bean=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">\t\t &lt;/constructor-arg&gt;    </span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\">    &lt;bean id=&quot;createTable&quot; class=&quot;java4s.SpringJdbcCreateTable&quot;&gt;</span><br><span class=\"line\">   \t\t&lt;property name=&quot;jt&quot;&gt;</span><br><span class=\"line\">      \t\t&lt;ref bean=&quot;jdbcTemplate&quot;/&gt;</span><br><span class=\"line\">   \t\t&lt;/property&gt;</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/beans&gt;  </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">we have a SpringJdbcCreateTable class to accesss database, this class has `JdbcTemplate` property,    </span><br><span class=\"line\">    </span><br><span class=\"line\">``` java</span><br><span class=\"line\">JdbcTemplate jt;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setJt(JdbcTemplate jt) &#123;</span><br><span class=\"line\">\tthis.jt = jt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we use spring bean to inject value to this property. And you will see it in above spring configure file.</p>\n<p>create table, the <code>execute</code> method doesn’t return value.      </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTable</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tjt.execute(<span class=\"string\">&quot;CREATE TABLE user(id int, name varchar(10), age int)&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// execute() returns void</span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;table created&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>insert data, using the <code>update</code> method to insert data, this method will return how many rows have been inserted. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> jt.update(<span class=\"string\">&quot;INSERT INTO user VALUES (99, &#x27;user_99&#x27;, 49)&quot;</span>);</span><br><span class=\"line\">\tshowDatas();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tSystem.out.println(String.format(<span class=\"string\">&quot;%s row inserted&quot;</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>update data, using the <code>update</code> method to update data, it will return how many rows are affected.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> jt.update(<span class=\"string\">&quot;UPDATE user set name=&#x27;user_new&#x27; where name=&#x27;user_99&#x27;&quot;</span>);</span><br><span class=\"line\">\tshowDatas();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tSystem.out.println(String.format(<span class=\"string\">&quot;%s row updated&quot;</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>delete data, also using the <code>update</code> method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> jt.update(<span class=\"string\">&quot;DELETE from user where name=&#x27;user_new&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tshowDatas();</span><br><span class=\"line\">\tSystem.out.println(String.format(<span class=\"string\">&quot;%s row deleted&quot;</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>query data, the jdbctemplate has many query interfaces. Here we use <code>queryForRowSet</code> method to get the data by condition.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDatas</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;|  ID |  NAME    |  AGE  |&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">SqlRowSet</span> <span class=\"variable\">rowSet</span> <span class=\"operator\">=</span> jt.queryForRowSet(<span class=\"string\">&quot;SELECT * FROM user&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (rowSet.next()) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> rowSet.getInt(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> rowSet.getString(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> rowSet.getInt(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> String</span><br><span class=\"line\">\t\t\t\t.format(<span class=\"string\">&quot;|  %s  |  %s  |  %s   |&quot;</span>, id, name, age);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\tSystem.out.println(msg);</span><br><span class=\"line\">\t&#125;\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>okay, to so far, let us call them in main entrance.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;spconfig.xml&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">SpringJdbcCreateTable</span> <span class=\"variable\">st</span> <span class=\"operator\">=</span>(SpringJdbcCreateTable)applicationContext.getBean(<span class=\"string\">&quot;createTable&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tst.createTable();</span><br><span class=\"line\">\tst.initSomeDatas();</span><br><span class=\"line\">\tst.insertData();</span><br><span class=\"line\">\tst.updateData();</span><br><span class=\"line\">\tst.deleteData();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Look, it’s very easy to access database with spring framework.</p>\n","site":{"data":{}},"excerpt":"<p>As we know, we can use <code>jdbc</code> to access database in java programming. And now let us use <code>jdbc</code> in spring. The <code>spring framework</code> reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are <code>org.springframework.jdbc.datasource.DriverManagerDataSource</code> and <code>org.springframework.jdbc.core.JdbcTemplate</code>.   </p>\n<p>And here we use the <code>hsqldb</code> to act as our memory database. You can go to <a href=\"http://hsqldb.org/\">here</a> to look at it. we use the <code>Maven</code> tools to management our project. the dependencies is:    </p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.hsqldb&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;hsqldb&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.8.0.10&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>The spring configure file:    </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span><br><span class=\"line\">\t\t\t&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">&lt;beans&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;driverClassName&quot; value=&quot;org.hsqldb.jdbcDriver&quot;/&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;url&quot; value=&quot;jdbc:hsqldb:mem:MyDB&quot;/&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;username&quot; value=&quot;sa&quot;/&gt;</span><br><span class=\"line\">\t    &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \t&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class=\"line\">\t\t &lt;constructor-arg&gt;</span><br><span class=\"line\">\t\t   \t&lt;ref bean=&quot;dataSource&quot;/&gt;</span><br><span class=\"line\">\t\t &lt;/constructor-arg&gt;    </span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> \t</span><br><span class=\"line\">    &lt;bean id=&quot;createTable&quot; class=&quot;java4s.SpringJdbcCreateTable&quot;&gt;</span><br><span class=\"line\">   \t\t&lt;property name=&quot;jt&quot;&gt;</span><br><span class=\"line\">      \t\t&lt;ref bean=&quot;jdbcTemplate&quot;/&gt;</span><br><span class=\"line\">   \t\t&lt;/property&gt;</span><br><span class=\"line\"> \t&lt;/bean&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/beans&gt;  </span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">we have a SpringJdbcCreateTable class to accesss database, this class has `JdbcTemplate` property,    </span><br><span class=\"line\">    </span><br><span class=\"line\">``` java</span><br><span class=\"line\">JdbcTemplate jt;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setJt(JdbcTemplate jt) &#123;</span><br><span class=\"line\">\tthis.jt = jt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>we use spring bean to inject value to this property. And you will see it in above spring configure file.</p>\n<p>create table, the <code>execute</code> method doesn’t return value.      </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createTable</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tjt.execute(<span class=\"string\">&quot;CREATE TABLE user(id int, name varchar(10), age int)&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// execute() returns void</span></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;table created&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>insert data, using the <code>update</code> method to insert data, this method will return how many rows have been inserted. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> jt.update(<span class=\"string\">&quot;INSERT INTO user VALUES (99, &#x27;user_99&#x27;, 49)&quot;</span>);</span><br><span class=\"line\">\tshowDatas();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tSystem.out.println(String.format(<span class=\"string\">&quot;%s row inserted&quot;</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>update data, using the <code>update</code> method to update data, it will return how many rows are affected.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> jt.update(<span class=\"string\">&quot;UPDATE user set name=&#x27;user_new&#x27; where name=&#x27;user_99&#x27;&quot;</span>);</span><br><span class=\"line\">\tshowDatas();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tSystem.out.println(String.format(<span class=\"string\">&quot;%s row updated&quot;</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>delete data, also using the <code>update</code> method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> jt.update(<span class=\"string\">&quot;DELETE from user where name=&#x27;user_new&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tshowDatas();</span><br><span class=\"line\">\tSystem.out.println(String.format(<span class=\"string\">&quot;%s row deleted&quot;</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>query data, the jdbctemplate has many query interfaces. Here we use <code>queryForRowSet</code> method to get the data by condition.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDatas</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;|  ID |  NAME    |  AGE  |&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">SqlRowSet</span> <span class=\"variable\">rowSet</span> <span class=\"operator\">=</span> jt.queryForRowSet(<span class=\"string\">&quot;SELECT * FROM user&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (rowSet.next()) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> rowSet.getInt(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> rowSet.getString(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> rowSet.getInt(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> String</span><br><span class=\"line\">\t\t\t\t.format(<span class=\"string\">&quot;|  %s  |  %s  |  %s   |&quot;</span>, id, name, age);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\tSystem.out.println(msg);</span><br><span class=\"line\">\t&#125;\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>okay, to so far, let us call them in main entrance.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;spconfig.xml&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">SpringJdbcCreateTable</span> <span class=\"variable\">st</span> <span class=\"operator\">=</span>(SpringJdbcCreateTable)applicationContext.getBean(<span class=\"string\">&quot;createTable&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tst.createTable();</span><br><span class=\"line\">\tst.initSomeDatas();</span><br><span class=\"line\">\tst.insertData();</span><br><span class=\"line\">\tst.updateData();</span><br><span class=\"line\">\tst.deleteData();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Look, it’s very easy to access database with spring framework.</p>"},{"title":"AngularJs - angular.extend()","date":"2015-05-16T03:08:31.000Z","comments":1,"_content":"The `angular.extend()` function has very powerful to copy object to another object, including all of properties from the source object(s).\n\n### Usage\n> `angular.extend(dst, src);`\n> \n> dst:        **destination object**  \n> src:        **source object(s)**   \n> \n> return:     **refercen to dst object**\n\n<!-- more -->\n### Example\nLet's understand how to use it with example instance. Create a normal controller which contains user's name, gender and age. And create a method to get the full description of the user.\n\n``` javascript\nangular.Module('app',[])\n\n.app.controller('UserController', ['$scope', function ($scope) {\n\t$scope.name = 'angular';\n  \t$scope.gender = 'male';\n  \t$scope.age = '2';\n\n  \t$scope.getDescription = function() {\n    \treturn \"My name is \" + $scope.name + \" and I am \" + $scope.gender + \" \" + $scope.age + \t\" years old\";\n  \t}\n}]);\n```\n\nWe can use angular.extend function to do like above functionality, see below:\n\n``` javascript\napp.controller('UserController', ['$scope', function($scope) {\n  angular.extend($scope, {\n    name : 'angular',\n    gender : 'male',\n    age : '2'\n  });\n\n  angular.extend($scope, {\n    getDescription : function() {\n      return \"My name is \" + $scope.name + \" and I am \" + $scope.gender + \" \" + $scope.age + \" years old\";\n    }\n  });\n}])\n```\nAnd also we can use angular.extend() function to implement mixins. Let's consider the below contrived Logging class.\n\n``` javascript\nvar debug = true;\nvar Logger = {\n  log: function (msg) {\n    console.log(debug ? msg : '');      \n  }\n};\n```\n\nIf we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.\n\nOkay, now we create a controler called LoggerController, and \"mixin\" Logger class to it.\n\n``` javascript\napp.controller('LoggerController', ['$scope', function($scope) {\n  angular.extend($scope, Logger);\n\n  $scope.print = function (msg) {\n    this.log(msg);\n  }\n}])\n\n``` \n\nIn LoggerController, we \"mixin\" the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.\n\n","source":"_posts/2015-05-16-angularjs-angular-dot-extend.markdown","raw":"---\n\ntitle: \"AngularJs - angular.extend()\"\ndate: 2015-05-16 11:08:31 +0800\ncomments: true\ncategories: Frontend\ntags: [AngularJs, JavaScript]\n---\nThe `angular.extend()` function has very powerful to copy object to another object, including all of properties from the source object(s).\n\n### Usage\n> `angular.extend(dst, src);`\n> \n> dst:        **destination object**  \n> src:        **source object(s)**   \n> \n> return:     **refercen to dst object**\n\n<!-- more -->\n### Example\nLet's understand how to use it with example instance. Create a normal controller which contains user's name, gender and age. And create a method to get the full description of the user.\n\n``` javascript\nangular.Module('app',[])\n\n.app.controller('UserController', ['$scope', function ($scope) {\n\t$scope.name = 'angular';\n  \t$scope.gender = 'male';\n  \t$scope.age = '2';\n\n  \t$scope.getDescription = function() {\n    \treturn \"My name is \" + $scope.name + \" and I am \" + $scope.gender + \" \" + $scope.age + \t\" years old\";\n  \t}\n}]);\n```\n\nWe can use angular.extend function to do like above functionality, see below:\n\n``` javascript\napp.controller('UserController', ['$scope', function($scope) {\n  angular.extend($scope, {\n    name : 'angular',\n    gender : 'male',\n    age : '2'\n  });\n\n  angular.extend($scope, {\n    getDescription : function() {\n      return \"My name is \" + $scope.name + \" and I am \" + $scope.gender + \" \" + $scope.age + \" years old\";\n    }\n  });\n}])\n```\nAnd also we can use angular.extend() function to implement mixins. Let's consider the below contrived Logging class.\n\n``` javascript\nvar debug = true;\nvar Logger = {\n  log: function (msg) {\n    console.log(debug ? msg : '');      \n  }\n};\n```\n\nIf we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.\n\nOkay, now we create a controler called LoggerController, and \"mixin\" Logger class to it.\n\n``` javascript\napp.controller('LoggerController', ['$scope', function($scope) {\n  angular.extend($scope, Logger);\n\n  $scope.print = function (msg) {\n    this.log(msg);\n  }\n}])\n\n``` \n\nIn LoggerController, we \"mixin\" the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.\n\n","slug":"2015-05-16-angularjs-angular-dot-extend","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4of002nazv580v620zp","layout":"post","photos":[],"link":"","content":"<p>The <code>angular.extend()</code> function has very powerful to copy object to another object, including all of properties from the source object(s).</p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><blockquote>\n<p><code>angular.extend(dst, src);</code></p>\n<p>dst:        <strong>destination object</strong><br>src:        <strong>source object(s)</strong>   </p>\n<p>return:     <strong>refercen to dst object</strong></p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Let’s understand how to use it with example instance. Create a normal controller which contains user’s name, gender and age. And create a method to get the full description of the user.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.<span class=\"title class_\">Module</span>(<span class=\"string\">&#x27;app&#x27;</span>,[])</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"property\">app</span>.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;UserController&#x27;</span>, [<span class=\"string\">&#x27;$scope&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">\t$scope.<span class=\"property\">name</span> = <span class=\"string\">&#x27;angular&#x27;</span>;</span><br><span class=\"line\">  \t$scope.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;male&#x27;</span>;</span><br><span class=\"line\">  \t$scope.<span class=\"property\">age</span> = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t$scope.<span class=\"property\">getDescription</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"string\">&quot;My name is &quot;</span> + $scope.<span class=\"property\">name</span> + <span class=\"string\">&quot; and I am &quot;</span> + $scope.<span class=\"property\">gender</span> + <span class=\"string\">&quot; &quot;</span> + $scope.<span class=\"property\">age</span> + \t<span class=\"string\">&quot; years old&quot;</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n\n<p>We can use angular.extend function to do like above functionality, see below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;UserController&#x27;</span>, [<span class=\"string\">&#x27;$scope&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">  angular.<span class=\"title function_\">extend</span>($scope, &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&#x27;angular&#x27;</span>,</span><br><span class=\"line\">    gender : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    age : <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  angular.<span class=\"title function_\">extend</span>($scope, &#123;</span><br><span class=\"line\">    getDescription : <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;My name is &quot;</span> + $scope.<span class=\"property\">name</span> + <span class=\"string\">&quot; and I am &quot;</span> + $scope.<span class=\"property\">gender</span> + <span class=\"string\">&quot; &quot;</span> + $scope.<span class=\"property\">age</span> + <span class=\"string\">&quot; years old&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n<p>And also we can use angular.extend() function to implement mixins. Let’s consider the below contrived Logging class.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> debug = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Logger</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">log</span>: <span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(debug ? msg : <span class=\"string\">&#x27;&#x27;</span>);      </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>If we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.</p>\n<p>Okay, now we create a controler called LoggerController, and “mixin” Logger class to it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;LoggerController&#x27;</span>, [<span class=\"string\">&#x27;$scope&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">  angular.<span class=\"title function_\">extend</span>($scope, <span class=\"title class_\">Logger</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  $scope.<span class=\"property\">print</span> = <span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In LoggerController, we “mixin” the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.</p>\n","site":{"data":{}},"excerpt":"<p>The <code>angular.extend()</code> function has very powerful to copy object to another object, including all of properties from the source object(s).</p>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><blockquote>\n<p><code>angular.extend(dst, src);</code></p>\n<p>dst:        <strong>destination object</strong><br>src:        <strong>source object(s)</strong>   </p>\n<p>return:     <strong>refercen to dst object</strong></p>\n</blockquote>","more":"<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Let’s understand how to use it with example instance. Create a normal controller which contains user’s name, gender and age. And create a method to get the full description of the user.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.<span class=\"title class_\">Module</span>(<span class=\"string\">&#x27;app&#x27;</span>,[])</span><br><span class=\"line\"></span><br><span class=\"line\">.<span class=\"property\">app</span>.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;UserController&#x27;</span>, [<span class=\"string\">&#x27;$scope&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">\t$scope.<span class=\"property\">name</span> = <span class=\"string\">&#x27;angular&#x27;</span>;</span><br><span class=\"line\">  \t$scope.<span class=\"property\">gender</span> = <span class=\"string\">&#x27;male&#x27;</span>;</span><br><span class=\"line\">  \t$scope.<span class=\"property\">age</span> = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  \t$scope.<span class=\"property\">getDescription</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"string\">&quot;My name is &quot;</span> + $scope.<span class=\"property\">name</span> + <span class=\"string\">&quot; and I am &quot;</span> + $scope.<span class=\"property\">gender</span> + <span class=\"string\">&quot; &quot;</span> + $scope.<span class=\"property\">age</span> + \t<span class=\"string\">&quot; years old&quot;</span>;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure>\n\n<p>We can use angular.extend function to do like above functionality, see below:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;UserController&#x27;</span>, [<span class=\"string\">&#x27;$scope&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">  angular.<span class=\"title function_\">extend</span>($scope, &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&#x27;angular&#x27;</span>,</span><br><span class=\"line\">    gender : <span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    age : <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  angular.<span class=\"title function_\">extend</span>($scope, &#123;</span><br><span class=\"line\">    getDescription : <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;My name is &quot;</span> + $scope.<span class=\"property\">name</span> + <span class=\"string\">&quot; and I am &quot;</span> + $scope.<span class=\"property\">gender</span> + <span class=\"string\">&quot; &quot;</span> + $scope.<span class=\"property\">age</span> + <span class=\"string\">&quot; years old&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n<p>And also we can use angular.extend() function to implement mixins. Let’s consider the below contrived Logging class.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> debug = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Logger</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">log</span>: <span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(debug ? msg : <span class=\"string\">&#x27;&#x27;</span>);      </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>If we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.</p>\n<p>Okay, now we create a controler called LoggerController, and “mixin” Logger class to it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;LoggerController&#x27;</span>, [<span class=\"string\">&#x27;$scope&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">  angular.<span class=\"title function_\">extend</span>($scope, <span class=\"title class_\">Logger</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  $scope.<span class=\"property\">print</span> = <span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In LoggerController, we “mixin” the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.</p>"},{"title":"Sublime Text - Keyboard Shortcuts For Mac","date":"2015-05-16T04:21:06.000Z","comments":1,"_content":"\n### Editor\n\n| Keypress     | Command                                                                  |\n|--------------|--------------------------------------------------------------------------|\n| ⌘ + X        | Cut line                                                                 |\n| ⌘ + ↩        | Insert line after                                                        |\n| ⌘ + ⇧ + ↩    | Insert line before                                                       |\n| ⌘ + ⌃ + ↑    | Move line/selection up                                                   |\n| ⌘ + ⌃ + ↓    | Move line/selection down                                                 |\n| ⌘ + L        | Select line - Repeat to select next lines                                |\n| ⌘ + D        | Select word - Repeat to select next occurrence                           |\n| ⌃ + ⌘ + G    | Select all occurrences of current selection                              |\n| ⌃ + ⇧ + ↑    | Extra cursor on the line above                                           |\n| ⌃ + ⇧ + ↓    | Extra cursor on the line below                                           |\n| ⌃ + M        | Jump to closing parentheses Repeat to jump to opening parentheses        |\n| ⌃ + ⇧ + M    | Select all contents of the current parentheses                           |\n| ⌃ + A        | Move to beginning of line                                                |\n| ⌃ + E        | Move to end of line                                                      |\n| ⌘ + K, ⌘ + K | Delete from cursor to end of line                                        |\n| ⌘ + K + ⌫    | Delete from cursor to start of line                                      |\n| ⌘ + ]        | Indent current line(s)                                                   |\n| ⌘ + [        | Un-indent current line(s)                                                |\n| ⌘ + ⇧ + D    | Duplicate line(s)                                                        |\n| ⌘ + J        | Join line below to the end of the current line                           |\n| ⌘ + /        | Comment/un-comment current line                                          |\n| ⌘ + ⌥ + /    | Block comment current selection                                          |\n| ⌘ + Y        | Redo, or repeat last keyboard shortcut command                           |\n| ⌘ + ⇧ + V    | Paste and indent correctly                                               |\n| ⌃ + Space    | Select next auto-complete suggestion                                     |\n| ⌃ + U        | Soft undo; jumps to your last change before undoing change when repeated |\n| ⌃ + ⇧ + Up   | Column selection up                                                      |\n| ⌃ + ⇧ + Down | Column selection down                                                    |\n| ⌃ + ⇧ + W    | Wrap Selection in html tag                                               |\n| ⌃ + ⇧ + K    | Delete current line of cursor                                            |\n\n<!-- more -->\n---         \n### Navigation\n| Keypress       | Command                   |\n|----------------|---------------------------|\n| ⌘ + P or ⌘ + T | Quick-open files by name  |\n| ⌘ + R          | Goto symbol               |\n| ⌃ + G          | Goto line in current file |\n\n---   \n### General\n| Keypress      | Command                      |\n|---------------|------------------------------|\n| ⌘ + ⇧ + P     | Command Palette              |\n| ⌃ + `         | Python Console               |\n| ⌃ + ⌘ + F     | Toggle fullscreen mode       |\n| ⌃ + ⇧ + ⌘ + F | Toggle distraction-free mode |\n| ⌘ + K, ⌘ + B  | Toggle side bar              |\n| ⌃ + ⇧ + P     | Show scope in status bar     |\n\n---   \n### Find/Replace\n| Keypress  | Command       |\n|-----------|---------------|\n| ⌘ + F     | Find          |\n| ⌘ + ⌥ + F | Replace       |\n| ⌘ + ⇧ + F | Find in files |\n\n---   \n### Scrolling\n| Keypress | Command                                |\n|----------|----------------------------------------|\n| ⌃ + V    | Scroll down one page                   |\n| ⌃ + L    | Center current line vertically in page |\n| ⌘ + Down | Scroll to end of file                  |\n| ⌘ + Up   | Scroll to start of file                |\n\n---   \n### Tabs\n| Keypress    | Command                                       |\n|-------------|-----------------------------------------------|\n| ⌘ + ⇧ + t   | Open last closed tab                          |\n| ⌘ + [NUM]   | Jump to tab in current group where num is 1-9 |\n| ⌘ + 0       | Jump to 10th tab in current group             |\n| ⌘ + ⇧ + [   | Cycle left through tabs                       |\n| ⌘ + ⇧ + ]   | Cycle right through tabs                      |\n| ^ + Tab     | Cycle up through recent tabs                  |\n| ⇧ + ^ + Tab | Cycle down through recent tabs                |\n\n---   \n### Split window\n| Keypress      | Command                                       |\n|---------------|-----------------------------------------------|\n| ⌘ + ⌥ + 1     | Revert view to single column                  |\n| ⌘ + ⌥ + 2     | Split view into two columns                   |\n| ⌘ + ⌥ + 3     | Split view into three columns                 |\n| ⌘ + ⌥ + 4     | Split view into four columns                  |\n| ⌘ + ⌥ + 5     | Set view to grid (4 groups)                   |\n| ⌃ + [NUM]     | Jump to group where num is 1-4                |\n| ⌃ + ⇧ + [NUM] | Move file to specified group where num is 1-4 |\n\n---   \n### BookMark\n| Keypress   | Command           |\n|------------|-------------------|\n| ⌘ + F2     | Toggle bookmark   |\n| F2         | Next bookmark     |\n| ⇧ + F2     | Previous bookmark |\n| ⇧ + ⌘ + F2 | Clear bookmarks   |\n\n---   \n### Text manipulation\n| Keypress                 | Command                       |\n|--------------------------|-------------------------------|\n| ⌘ + K, ⌘ + U             | Transform to Uppercase        |\n| ⌘ + K, ⌘ + L             | Transform to Lowercase        |\n| ⌘ + ⌃ + up, ⌘ + ⌃ + down | Clip text upwards / downwards |","source":"_posts/2015-05-16-sublime-text-keyboard-shortcuts-for-mac.markdown","raw":"---\n\ntitle: \"Sublime Text - Keyboard Shortcuts For Mac\"\ndate: 2015-05-16 12:21:06 +0800\ncomments: true\ncategories: Tools\ntags: [Sublime Text, Tool]\n---\n\n### Editor\n\n| Keypress     | Command                                                                  |\n|--------------|--------------------------------------------------------------------------|\n| ⌘ + X        | Cut line                                                                 |\n| ⌘ + ↩        | Insert line after                                                        |\n| ⌘ + ⇧ + ↩    | Insert line before                                                       |\n| ⌘ + ⌃ + ↑    | Move line/selection up                                                   |\n| ⌘ + ⌃ + ↓    | Move line/selection down                                                 |\n| ⌘ + L        | Select line - Repeat to select next lines                                |\n| ⌘ + D        | Select word - Repeat to select next occurrence                           |\n| ⌃ + ⌘ + G    | Select all occurrences of current selection                              |\n| ⌃ + ⇧ + ↑    | Extra cursor on the line above                                           |\n| ⌃ + ⇧ + ↓    | Extra cursor on the line below                                           |\n| ⌃ + M        | Jump to closing parentheses Repeat to jump to opening parentheses        |\n| ⌃ + ⇧ + M    | Select all contents of the current parentheses                           |\n| ⌃ + A        | Move to beginning of line                                                |\n| ⌃ + E        | Move to end of line                                                      |\n| ⌘ + K, ⌘ + K | Delete from cursor to end of line                                        |\n| ⌘ + K + ⌫    | Delete from cursor to start of line                                      |\n| ⌘ + ]        | Indent current line(s)                                                   |\n| ⌘ + [        | Un-indent current line(s)                                                |\n| ⌘ + ⇧ + D    | Duplicate line(s)                                                        |\n| ⌘ + J        | Join line below to the end of the current line                           |\n| ⌘ + /        | Comment/un-comment current line                                          |\n| ⌘ + ⌥ + /    | Block comment current selection                                          |\n| ⌘ + Y        | Redo, or repeat last keyboard shortcut command                           |\n| ⌘ + ⇧ + V    | Paste and indent correctly                                               |\n| ⌃ + Space    | Select next auto-complete suggestion                                     |\n| ⌃ + U        | Soft undo; jumps to your last change before undoing change when repeated |\n| ⌃ + ⇧ + Up   | Column selection up                                                      |\n| ⌃ + ⇧ + Down | Column selection down                                                    |\n| ⌃ + ⇧ + W    | Wrap Selection in html tag                                               |\n| ⌃ + ⇧ + K    | Delete current line of cursor                                            |\n\n<!-- more -->\n---         \n### Navigation\n| Keypress       | Command                   |\n|----------------|---------------------------|\n| ⌘ + P or ⌘ + T | Quick-open files by name  |\n| ⌘ + R          | Goto symbol               |\n| ⌃ + G          | Goto line in current file |\n\n---   \n### General\n| Keypress      | Command                      |\n|---------------|------------------------------|\n| ⌘ + ⇧ + P     | Command Palette              |\n| ⌃ + `         | Python Console               |\n| ⌃ + ⌘ + F     | Toggle fullscreen mode       |\n| ⌃ + ⇧ + ⌘ + F | Toggle distraction-free mode |\n| ⌘ + K, ⌘ + B  | Toggle side bar              |\n| ⌃ + ⇧ + P     | Show scope in status bar     |\n\n---   \n### Find/Replace\n| Keypress  | Command       |\n|-----------|---------------|\n| ⌘ + F     | Find          |\n| ⌘ + ⌥ + F | Replace       |\n| ⌘ + ⇧ + F | Find in files |\n\n---   \n### Scrolling\n| Keypress | Command                                |\n|----------|----------------------------------------|\n| ⌃ + V    | Scroll down one page                   |\n| ⌃ + L    | Center current line vertically in page |\n| ⌘ + Down | Scroll to end of file                  |\n| ⌘ + Up   | Scroll to start of file                |\n\n---   \n### Tabs\n| Keypress    | Command                                       |\n|-------------|-----------------------------------------------|\n| ⌘ + ⇧ + t   | Open last closed tab                          |\n| ⌘ + [NUM]   | Jump to tab in current group where num is 1-9 |\n| ⌘ + 0       | Jump to 10th tab in current group             |\n| ⌘ + ⇧ + [   | Cycle left through tabs                       |\n| ⌘ + ⇧ + ]   | Cycle right through tabs                      |\n| ^ + Tab     | Cycle up through recent tabs                  |\n| ⇧ + ^ + Tab | Cycle down through recent tabs                |\n\n---   \n### Split window\n| Keypress      | Command                                       |\n|---------------|-----------------------------------------------|\n| ⌘ + ⌥ + 1     | Revert view to single column                  |\n| ⌘ + ⌥ + 2     | Split view into two columns                   |\n| ⌘ + ⌥ + 3     | Split view into three columns                 |\n| ⌘ + ⌥ + 4     | Split view into four columns                  |\n| ⌘ + ⌥ + 5     | Set view to grid (4 groups)                   |\n| ⌃ + [NUM]     | Jump to group where num is 1-4                |\n| ⌃ + ⇧ + [NUM] | Move file to specified group where num is 1-4 |\n\n---   \n### BookMark\n| Keypress   | Command           |\n|------------|-------------------|\n| ⌘ + F2     | Toggle bookmark   |\n| F2         | Next bookmark     |\n| ⇧ + F2     | Previous bookmark |\n| ⇧ + ⌘ + F2 | Clear bookmarks   |\n\n---   \n### Text manipulation\n| Keypress                 | Command                       |\n|--------------------------|-------------------------------|\n| ⌘ + K, ⌘ + U             | Transform to Uppercase        |\n| ⌘ + K, ⌘ + L             | Transform to Lowercase        |\n| ⌘ + ⌃ + up, ⌘ + ⌃ + down | Clip text upwards / downwards |","slug":"2015-05-16-sublime-text-keyboard-shortcuts-for-mac","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4of002oazv5ey6m948l","layout":"post","photos":[],"link":"","content":"<h3 id=\"Editor\"><a href=\"#Editor\" class=\"headerlink\" title=\"Editor\"></a>Editor</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + X</td>\n<td>Cut line</td>\n</tr>\n<tr>\n<td>⌘ + ↩</td>\n<td>Insert line after</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + ↩</td>\n<td>Insert line before</td>\n</tr>\n<tr>\n<td>⌘ + ⌃ + ↑</td>\n<td>Move line&#x2F;selection up</td>\n</tr>\n<tr>\n<td>⌘ + ⌃ + ↓</td>\n<td>Move line&#x2F;selection down</td>\n</tr>\n<tr>\n<td>⌘ + L</td>\n<td>Select line - Repeat to select next lines</td>\n</tr>\n<tr>\n<td>⌘ + D</td>\n<td>Select word - Repeat to select next occurrence</td>\n</tr>\n<tr>\n<td>⌃ + ⌘ + G</td>\n<td>Select all occurrences of current selection</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + ↑</td>\n<td>Extra cursor on the line above</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + ↓</td>\n<td>Extra cursor on the line below</td>\n</tr>\n<tr>\n<td>⌃ + M</td>\n<td>Jump to closing parentheses Repeat to jump to opening parentheses</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + M</td>\n<td>Select all contents of the current parentheses</td>\n</tr>\n<tr>\n<td>⌃ + A</td>\n<td>Move to beginning of line</td>\n</tr>\n<tr>\n<td>⌃ + E</td>\n<td>Move to end of line</td>\n</tr>\n<tr>\n<td>⌘ + K, ⌘ + K</td>\n<td>Delete from cursor to end of line</td>\n</tr>\n<tr>\n<td>⌘ + K + ⌫</td>\n<td>Delete from cursor to start of line</td>\n</tr>\n<tr>\n<td>⌘ + ]</td>\n<td>Indent current line(s)</td>\n</tr>\n<tr>\n<td>⌘ + [</td>\n<td>Un-indent current line(s)</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + D</td>\n<td>Duplicate line(s)</td>\n</tr>\n<tr>\n<td>⌘ + J</td>\n<td>Join line below to the end of the current line</td>\n</tr>\n<tr>\n<td>⌘ + &#x2F;</td>\n<td>Comment&#x2F;un-comment current line</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + &#x2F;</td>\n<td>Block comment current selection</td>\n</tr>\n<tr>\n<td>⌘ + Y</td>\n<td>Redo, or repeat last keyboard shortcut command</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + V</td>\n<td>Paste and indent correctly</td>\n</tr>\n<tr>\n<td>⌃ + Space</td>\n<td>Select next auto-complete suggestion</td>\n</tr>\n<tr>\n<td>⌃ + U</td>\n<td>Soft undo; jumps to your last change before undoing change when repeated</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + Up</td>\n<td>Column selection up</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + Down</td>\n<td>Column selection down</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + W</td>\n<td>Wrap Selection in html tag</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + K</td>\n<td>Delete current line of cursor</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + P or ⌘ + T</td>\n<td>Quick-open files by name</td>\n</tr>\n<tr>\n<td>⌘ + R</td>\n<td>Goto symbol</td>\n</tr>\n<tr>\n<td>⌃ + G</td>\n<td>Goto line in current file</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + ⇧ + P</td>\n<td>Command Palette</td>\n</tr>\n<tr>\n<td>⌃ + &#96;</td>\n<td>Python Console</td>\n</tr>\n<tr>\n<td>⌃ + ⌘ + F</td>\n<td>Toggle fullscreen mode</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + ⌘ + F</td>\n<td>Toggle distraction-free mode</td>\n</tr>\n<tr>\n<td>⌘ + K, ⌘ + B</td>\n<td>Toggle side bar</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + P</td>\n<td>Show scope in status bar</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Find-Replace\"><a href=\"#Find-Replace\" class=\"headerlink\" title=\"Find&#x2F;Replace\"></a>Find&#x2F;Replace</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + F</td>\n<td>Find</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + F</td>\n<td>Replace</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + F</td>\n<td>Find in files</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Scrolling\"><a href=\"#Scrolling\" class=\"headerlink\" title=\"Scrolling\"></a>Scrolling</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌃ + V</td>\n<td>Scroll down one page</td>\n</tr>\n<tr>\n<td>⌃ + L</td>\n<td>Center current line vertically in page</td>\n</tr>\n<tr>\n<td>⌘ + Down</td>\n<td>Scroll to end of file</td>\n</tr>\n<tr>\n<td>⌘ + Up</td>\n<td>Scroll to start of file</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Tabs\"><a href=\"#Tabs\" class=\"headerlink\" title=\"Tabs\"></a>Tabs</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + ⇧ + t</td>\n<td>Open last closed tab</td>\n</tr>\n<tr>\n<td>⌘ + [NUM]</td>\n<td>Jump to tab in current group where num is 1-9</td>\n</tr>\n<tr>\n<td>⌘ + 0</td>\n<td>Jump to 10th tab in current group</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + [</td>\n<td>Cycle left through tabs</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + ]</td>\n<td>Cycle right through tabs</td>\n</tr>\n<tr>\n<td>^ + Tab</td>\n<td>Cycle up through recent tabs</td>\n</tr>\n<tr>\n<td>⇧ + ^ + Tab</td>\n<td>Cycle down through recent tabs</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Split-window\"><a href=\"#Split-window\" class=\"headerlink\" title=\"Split window\"></a>Split window</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + ⌥ + 1</td>\n<td>Revert view to single column</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 2</td>\n<td>Split view into two columns</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 3</td>\n<td>Split view into three columns</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 4</td>\n<td>Split view into four columns</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 5</td>\n<td>Set view to grid (4 groups)</td>\n</tr>\n<tr>\n<td>⌃ + [NUM]</td>\n<td>Jump to group where num is 1-4</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + [NUM]</td>\n<td>Move file to specified group where num is 1-4</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"BookMark\"><a href=\"#BookMark\" class=\"headerlink\" title=\"BookMark\"></a>BookMark</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + F2</td>\n<td>Toggle bookmark</td>\n</tr>\n<tr>\n<td>F2</td>\n<td>Next bookmark</td>\n</tr>\n<tr>\n<td>⇧ + F2</td>\n<td>Previous bookmark</td>\n</tr>\n<tr>\n<td>⇧ + ⌘ + F2</td>\n<td>Clear bookmarks</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Text-manipulation\"><a href=\"#Text-manipulation\" class=\"headerlink\" title=\"Text manipulation\"></a>Text manipulation</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + K, ⌘ + U</td>\n<td>Transform to Uppercase</td>\n</tr>\n<tr>\n<td>⌘ + K, ⌘ + L</td>\n<td>Transform to Lowercase</td>\n</tr>\n<tr>\n<td>⌘ + ⌃ + up, ⌘ + ⌃ + down</td>\n<td>Clip text upwards &#x2F; downwards</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h3 id=\"Editor\"><a href=\"#Editor\" class=\"headerlink\" title=\"Editor\"></a>Editor</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + X</td>\n<td>Cut line</td>\n</tr>\n<tr>\n<td>⌘ + ↩</td>\n<td>Insert line after</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + ↩</td>\n<td>Insert line before</td>\n</tr>\n<tr>\n<td>⌘ + ⌃ + ↑</td>\n<td>Move line&#x2F;selection up</td>\n</tr>\n<tr>\n<td>⌘ + ⌃ + ↓</td>\n<td>Move line&#x2F;selection down</td>\n</tr>\n<tr>\n<td>⌘ + L</td>\n<td>Select line - Repeat to select next lines</td>\n</tr>\n<tr>\n<td>⌘ + D</td>\n<td>Select word - Repeat to select next occurrence</td>\n</tr>\n<tr>\n<td>⌃ + ⌘ + G</td>\n<td>Select all occurrences of current selection</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + ↑</td>\n<td>Extra cursor on the line above</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + ↓</td>\n<td>Extra cursor on the line below</td>\n</tr>\n<tr>\n<td>⌃ + M</td>\n<td>Jump to closing parentheses Repeat to jump to opening parentheses</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + M</td>\n<td>Select all contents of the current parentheses</td>\n</tr>\n<tr>\n<td>⌃ + A</td>\n<td>Move to beginning of line</td>\n</tr>\n<tr>\n<td>⌃ + E</td>\n<td>Move to end of line</td>\n</tr>\n<tr>\n<td>⌘ + K, ⌘ + K</td>\n<td>Delete from cursor to end of line</td>\n</tr>\n<tr>\n<td>⌘ + K + ⌫</td>\n<td>Delete from cursor to start of line</td>\n</tr>\n<tr>\n<td>⌘ + ]</td>\n<td>Indent current line(s)</td>\n</tr>\n<tr>\n<td>⌘ + [</td>\n<td>Un-indent current line(s)</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + D</td>\n<td>Duplicate line(s)</td>\n</tr>\n<tr>\n<td>⌘ + J</td>\n<td>Join line below to the end of the current line</td>\n</tr>\n<tr>\n<td>⌘ + &#x2F;</td>\n<td>Comment&#x2F;un-comment current line</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + &#x2F;</td>\n<td>Block comment current selection</td>\n</tr>\n<tr>\n<td>⌘ + Y</td>\n<td>Redo, or repeat last keyboard shortcut command</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + V</td>\n<td>Paste and indent correctly</td>\n</tr>\n<tr>\n<td>⌃ + Space</td>\n<td>Select next auto-complete suggestion</td>\n</tr>\n<tr>\n<td>⌃ + U</td>\n<td>Soft undo; jumps to your last change before undoing change when repeated</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + Up</td>\n<td>Column selection up</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + Down</td>\n<td>Column selection down</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + W</td>\n<td>Wrap Selection in html tag</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + K</td>\n<td>Delete current line of cursor</td>\n</tr>\n</tbody></table>","more":"<hr>\n<h3 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + P or ⌘ + T</td>\n<td>Quick-open files by name</td>\n</tr>\n<tr>\n<td>⌘ + R</td>\n<td>Goto symbol</td>\n</tr>\n<tr>\n<td>⌃ + G</td>\n<td>Goto line in current file</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + ⇧ + P</td>\n<td>Command Palette</td>\n</tr>\n<tr>\n<td>⌃ + &#96;</td>\n<td>Python Console</td>\n</tr>\n<tr>\n<td>⌃ + ⌘ + F</td>\n<td>Toggle fullscreen mode</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + ⌘ + F</td>\n<td>Toggle distraction-free mode</td>\n</tr>\n<tr>\n<td>⌘ + K, ⌘ + B</td>\n<td>Toggle side bar</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + P</td>\n<td>Show scope in status bar</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Find-Replace\"><a href=\"#Find-Replace\" class=\"headerlink\" title=\"Find&#x2F;Replace\"></a>Find&#x2F;Replace</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + F</td>\n<td>Find</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + F</td>\n<td>Replace</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + F</td>\n<td>Find in files</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Scrolling\"><a href=\"#Scrolling\" class=\"headerlink\" title=\"Scrolling\"></a>Scrolling</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌃ + V</td>\n<td>Scroll down one page</td>\n</tr>\n<tr>\n<td>⌃ + L</td>\n<td>Center current line vertically in page</td>\n</tr>\n<tr>\n<td>⌘ + Down</td>\n<td>Scroll to end of file</td>\n</tr>\n<tr>\n<td>⌘ + Up</td>\n<td>Scroll to start of file</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Tabs\"><a href=\"#Tabs\" class=\"headerlink\" title=\"Tabs\"></a>Tabs</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + ⇧ + t</td>\n<td>Open last closed tab</td>\n</tr>\n<tr>\n<td>⌘ + [NUM]</td>\n<td>Jump to tab in current group where num is 1-9</td>\n</tr>\n<tr>\n<td>⌘ + 0</td>\n<td>Jump to 10th tab in current group</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + [</td>\n<td>Cycle left through tabs</td>\n</tr>\n<tr>\n<td>⌘ + ⇧ + ]</td>\n<td>Cycle right through tabs</td>\n</tr>\n<tr>\n<td>^ + Tab</td>\n<td>Cycle up through recent tabs</td>\n</tr>\n<tr>\n<td>⇧ + ^ + Tab</td>\n<td>Cycle down through recent tabs</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Split-window\"><a href=\"#Split-window\" class=\"headerlink\" title=\"Split window\"></a>Split window</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + ⌥ + 1</td>\n<td>Revert view to single column</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 2</td>\n<td>Split view into two columns</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 3</td>\n<td>Split view into three columns</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 4</td>\n<td>Split view into four columns</td>\n</tr>\n<tr>\n<td>⌘ + ⌥ + 5</td>\n<td>Set view to grid (4 groups)</td>\n</tr>\n<tr>\n<td>⌃ + [NUM]</td>\n<td>Jump to group where num is 1-4</td>\n</tr>\n<tr>\n<td>⌃ + ⇧ + [NUM]</td>\n<td>Move file to specified group where num is 1-4</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"BookMark\"><a href=\"#BookMark\" class=\"headerlink\" title=\"BookMark\"></a>BookMark</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + F2</td>\n<td>Toggle bookmark</td>\n</tr>\n<tr>\n<td>F2</td>\n<td>Next bookmark</td>\n</tr>\n<tr>\n<td>⇧ + F2</td>\n<td>Previous bookmark</td>\n</tr>\n<tr>\n<td>⇧ + ⌘ + F2</td>\n<td>Clear bookmarks</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"Text-manipulation\"><a href=\"#Text-manipulation\" class=\"headerlink\" title=\"Text manipulation\"></a>Text manipulation</h3><table>\n<thead>\n<tr>\n<th>Keypress</th>\n<th>Command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>⌘ + K, ⌘ + U</td>\n<td>Transform to Uppercase</td>\n</tr>\n<tr>\n<td>⌘ + K, ⌘ + L</td>\n<td>Transform to Lowercase</td>\n</tr>\n<tr>\n<td>⌘ + ⌃ + up, ⌘ + ⌃ + down</td>\n<td>Clip text upwards &#x2F; downwards</td>\n</tr>\n</tbody></table>"},{"title":"Destroy your website","date":"2015-05-19T04:16:00.000Z","comments":1,"_content":"\nHa, Confusion? Don't, it's true. Let me introduce to you how to destroy the website you want.   \nClick the below button:  \n<button type=\"button\" onclick=\"javascript:var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='/javascripts/libs/asteroids.min.js';void(0);\">Destroy this website</button>    \nUse the **Arrow** key to move the rocket, and press the **Space** key to fire. And also Press and hold **B** to find targets which can be destroy.  \n<!-- more -->\nVisit [http://erkie.github.com/](http://erkie.github.com/) and drag the graphic onto your bookmarks bar to use this on whatever webpage you want to destory.\n\nActually, it's very easy to do this with javascript.   \n1. Download this javascript library from [here](), and put it in your project directory.   \n2. Adding below code snippet to your element target you want to triggle   \n\n``` javascript\njavascript:var jst = document.createElement('script');\njst.type='text/javascript';\ndocument.body.appendChild(jst);\njst.src='/javascripts/libs/asteroids.min.js';void(0);\n```\n\nNote: you need to change the src of the variable **jst** to your javascript library's location, like below:   \n\n``` javascript\n\tjst.src = 'YOUR LIBRARY LOCATION';\n```\n\nSo, it's quite simple.","source":"_posts/2015-05-19-destroy-your-website.markdown","raw":"---\n\ntitle: \"Destroy your website\"\ndate: 2015-05-19 12:16:00 +0800\ncomments: true\ncategories: Frontend\ntags: [JavaScript]\n---\n\nHa, Confusion? Don't, it's true. Let me introduce to you how to destroy the website you want.   \nClick the below button:  \n<button type=\"button\" onclick=\"javascript:var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='/javascripts/libs/asteroids.min.js';void(0);\">Destroy this website</button>    \nUse the **Arrow** key to move the rocket, and press the **Space** key to fire. And also Press and hold **B** to find targets which can be destroy.  \n<!-- more -->\nVisit [http://erkie.github.com/](http://erkie.github.com/) and drag the graphic onto your bookmarks bar to use this on whatever webpage you want to destory.\n\nActually, it's very easy to do this with javascript.   \n1. Download this javascript library from [here](), and put it in your project directory.   \n2. Adding below code snippet to your element target you want to triggle   \n\n``` javascript\njavascript:var jst = document.createElement('script');\njst.type='text/javascript';\ndocument.body.appendChild(jst);\njst.src='/javascripts/libs/asteroids.min.js';void(0);\n```\n\nNote: you need to change the src of the variable **jst** to your javascript library's location, like below:   \n\n``` javascript\n\tjst.src = 'YOUR LIBRARY LOCATION';\n```\n\nSo, it's quite simple.","slug":"2015-05-19-destroy-your-website","published":1,"updated":"2023-09-02T16:48:28.995Z","_id":"clm27g4og002razv56ce9fhpz","layout":"post","photos":[],"link":"","content":"<p>Ha, Confusion? Don’t, it’s true. Let me introduce to you how to destroy the website you want.<br>Click the below button:<br><button type=\"button\" onclick=\"javascript:var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='/javascripts/libs/asteroids.min.js';void(0);\">Destroy this website</button><br>Use the <strong>Arrow</strong> key to move the rocket, and press the <strong>Space</strong> key to fire. And also Press and hold <strong>B</strong> to find targets which can be destroy.  </p>\n<span id=\"more\"></span>\n<p>Visit <a href=\"http://erkie.github.com/\">http://erkie.github.com/</a> and drag the graphic onto your bookmarks bar to use this on whatever webpage you want to destory.</p>\n<p>Actually, it’s very easy to do this with javascript.   </p>\n<ol>\n<li>Download this javascript library from <a href=\"\">here</a>, and put it in your project directory.   </li>\n<li>Adding below code snippet to your element target you want to triggle</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">javascript</span>:<span class=\"keyword\">var</span> jst = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">jst.<span class=\"property\">type</span>=<span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(jst);</span><br><span class=\"line\">jst.<span class=\"property\">src</span>=<span class=\"string\">&#x27;/javascripts/libs/asteroids.min.js&#x27;</span>;<span class=\"title function_\">void</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Note: you need to change the src of the variable <strong>jst</strong> to your javascript library’s location, like below:   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jst.<span class=\"property\">src</span> = <span class=\"string\">&#x27;YOUR LIBRARY LOCATION&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>So, it’s quite simple.</p>\n","site":{"data":{}},"excerpt":"<p>Ha, Confusion? Don’t, it’s true. Let me introduce to you how to destroy the website you want.<br>Click the below button:<br><button type=\"button\" onclick=\"javascript:var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='/javascripts/libs/asteroids.min.js';void(0);\">Destroy this website</button><br>Use the <strong>Arrow</strong> key to move the rocket, and press the <strong>Space</strong> key to fire. And also Press and hold <strong>B</strong> to find targets which can be destroy.  </p>","more":"<p>Visit <a href=\"http://erkie.github.com/\">http://erkie.github.com/</a> and drag the graphic onto your bookmarks bar to use this on whatever webpage you want to destory.</p>\n<p>Actually, it’s very easy to do this with javascript.   </p>\n<ol>\n<li>Download this javascript library from <a href=\"\">here</a>, and put it in your project directory.   </li>\n<li>Adding below code snippet to your element target you want to triggle</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">javascript</span>:<span class=\"keyword\">var</span> jst = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">jst.<span class=\"property\">type</span>=<span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(jst);</span><br><span class=\"line\">jst.<span class=\"property\">src</span>=<span class=\"string\">&#x27;/javascripts/libs/asteroids.min.js&#x27;</span>;<span class=\"title function_\">void</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Note: you need to change the src of the variable <strong>jst</strong> to your javascript library’s location, like below:   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jst.<span class=\"property\">src</span> = <span class=\"string\">&#x27;YOUR LIBRARY LOCATION&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>So, it’s quite simple.</p>"},{"title":"Analyze call function of javascript","date":"2015-05-20T11:24:35.000Z","comments":1,"_content":"\nThe `call()` function is a fantastic method in javascript. It makes some people confusion some times, like me. Here let us to make it clear.    \n\n### Syntax\n`call([thisObj[,arg1[, arg2[, [,.argN]]]]])`   \n - **thisObj** (optional): it's object which can be act as currently `this` object.   \n - **arg1, arg2, argN** (optional) : the parameters which can be passed to the method.\n\nThe *call* method can be used to instead of another object to invoke a method. It can change the object context of a function to a new object which *thisObj* referenced.    \n\n<!-- more --> \n\n**Note**: *The thisObj is a optional parameter, it will reference to Global object if it is not provided. And the `call` method is only used by `Function` object.*  \n\n### Example\nLet's use fake code to explain it firstly. see below code:     \n\n``` javascript\nobj1.method1.call(obj2, arg1, arg2);\n```\nThe functionality of *call* method is that *obj2* is able to invoke the *method1* of *obj1* with *arg1*, *arg2* parameters.      \n\nLet's see a simple example:\n\n``` javascript\nvar add = function(a, b) {\n\treturn a + b;\n};\n\nvar sub = function(a, b) {\n\treturn a - b;\n};\n\nvar result = add.call(sub, 1, 2);\n\n```\nThe value of *result* variable is 3, not -1. Because the *sub* function object has been insteaded by *add* function object. So the `add.call(sub, 1, 2)` actually is `add(1, 2)`.  \n   \n**Note**: *The *function* actually is a *object* in javascript, and the function name is a reference of `Fuction` object.   \n\nOkay, so let's see a little complex example:\n \n``` javascript\nfunction ClassOne() {\n\tthis.message = \"class one\";\n\tthis.showMessage = function () {\n\t\tconsole.log(this.message);\n\t};\n};\n\nfunction ClassTwo() {\n\tthis.message = \"class two\";\n};\n\nvar classOne = new ClassOne();\nvar classTwo = new ClassTwo();\nclassOne.showMessage.call(classTwo);\n```\nThis will print the 'class two' message in the console window of browser. You can execute above code fragment to check it.    \nIn this example, the *classTwo* object doesn't have *showMesage* function, but he want to display his message, so he can invoke *classOne*'s with `call` method.   \n\nSo far, maybe you will think we can use the `call` function to simulate the `Inheritance` of `OOP`. You are right, let's get the example.\n\n``` javascript\nfunction BaseClass() {\n\tthis.message = \"base class\";\n\tthis.showMessage = function () {\n\t\tconsole.log(this.message);\n\t};\n};\n\nfunction MyClass() {\n\tBaseClass.call(this);\n};\n\nvar myClass = new MyClass();\nmyClass.showMessage();\n``` \nSo the *MyClass* inherites the *BaseClass*. The `BaseClass.call(this)` that means using the object of *BaseClass* to instead of *this* object. So the *MyClass* can access the property and function of *BaseClass*.   \n\n\n\n","source":"_posts/2015-05-20-analyze-call-function-of-javascript.markdown","raw":"---\n\ntitle: \"Analyze call function of javascript\"\ndate: 2015-05-20 19:24:35 +0800\ncomments: true\ncategories: Frontend\ntags: [JavaScript]\n---\n\nThe `call()` function is a fantastic method in javascript. It makes some people confusion some times, like me. Here let us to make it clear.    \n\n### Syntax\n`call([thisObj[,arg1[, arg2[, [,.argN]]]]])`   \n - **thisObj** (optional): it's object which can be act as currently `this` object.   \n - **arg1, arg2, argN** (optional) : the parameters which can be passed to the method.\n\nThe *call* method can be used to instead of another object to invoke a method. It can change the object context of a function to a new object which *thisObj* referenced.    \n\n<!-- more --> \n\n**Note**: *The thisObj is a optional parameter, it will reference to Global object if it is not provided. And the `call` method is only used by `Function` object.*  \n\n### Example\nLet's use fake code to explain it firstly. see below code:     \n\n``` javascript\nobj1.method1.call(obj2, arg1, arg2);\n```\nThe functionality of *call* method is that *obj2* is able to invoke the *method1* of *obj1* with *arg1*, *arg2* parameters.      \n\nLet's see a simple example:\n\n``` javascript\nvar add = function(a, b) {\n\treturn a + b;\n};\n\nvar sub = function(a, b) {\n\treturn a - b;\n};\n\nvar result = add.call(sub, 1, 2);\n\n```\nThe value of *result* variable is 3, not -1. Because the *sub* function object has been insteaded by *add* function object. So the `add.call(sub, 1, 2)` actually is `add(1, 2)`.  \n   \n**Note**: *The *function* actually is a *object* in javascript, and the function name is a reference of `Fuction` object.   \n\nOkay, so let's see a little complex example:\n \n``` javascript\nfunction ClassOne() {\n\tthis.message = \"class one\";\n\tthis.showMessage = function () {\n\t\tconsole.log(this.message);\n\t};\n};\n\nfunction ClassTwo() {\n\tthis.message = \"class two\";\n};\n\nvar classOne = new ClassOne();\nvar classTwo = new ClassTwo();\nclassOne.showMessage.call(classTwo);\n```\nThis will print the 'class two' message in the console window of browser. You can execute above code fragment to check it.    \nIn this example, the *classTwo* object doesn't have *showMesage* function, but he want to display his message, so he can invoke *classOne*'s with `call` method.   \n\nSo far, maybe you will think we can use the `call` function to simulate the `Inheritance` of `OOP`. You are right, let's get the example.\n\n``` javascript\nfunction BaseClass() {\n\tthis.message = \"base class\";\n\tthis.showMessage = function () {\n\t\tconsole.log(this.message);\n\t};\n};\n\nfunction MyClass() {\n\tBaseClass.call(this);\n};\n\nvar myClass = new MyClass();\nmyClass.showMessage();\n``` \nSo the *MyClass* inherites the *BaseClass*. The `BaseClass.call(this)` that means using the object of *BaseClass* to instead of *this* object. So the *MyClass* can access the property and function of *BaseClass*.   \n\n\n\n","slug":"2015-05-20-analyze-call-function-of-javascript","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4oh002tazv5cfzq7ui5","layout":"post","photos":[],"link":"","content":"<p>The <code>call()</code> function is a fantastic method in javascript. It makes some people confusion some times, like me. Here let us to make it clear.    </p>\n<h3 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h3><p><code>call([thisObj[,arg1[, arg2[, [,.argN]]]]])</code>   </p>\n<ul>\n<li><strong>thisObj</strong> (optional): it’s object which can be act as currently <code>this</code> object.   </li>\n<li><strong>arg1, arg2, argN</strong> (optional) : the parameters which can be passed to the method.</li>\n</ul>\n<p>The <em>call</em> method can be used to instead of another object to invoke a method. It can change the object context of a function to a new object which <em>thisObj</em> referenced.    </p>\n<span id=\"more\"></span> \n\n<p><strong>Note</strong>: <em>The thisObj is a optional parameter, it will reference to Global object if it is not provided. And the <code>call</code> method is only used by <code>Function</code> object.</em>  </p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Let’s use fake code to explain it firstly. see below code:     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1.<span class=\"property\">method1</span>.<span class=\"title function_\">call</span>(obj2, arg1, arg2);</span><br></pre></td></tr></table></figure>\n<p>The functionality of <em>call</em> method is that <em>obj2</em> is able to invoke the <em>method1</em> of <em>obj1</em> with <em>arg1</em>, <em>arg2</em> parameters.      </p>\n<p>Let’s see a simple example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sub = <span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = add.<span class=\"title function_\">call</span>(sub, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The value of <em>result</em> variable is 3, not -1. Because the <em>sub</em> function object has been insteaded by <em>add</em> function object. So the <code>add.call(sub, 1, 2)</code> actually is <code>add(1, 2)</code>.  </p>\n<p><strong>Note</strong>: *The <em>function</em> actually is a <em>object</em> in javascript, and the function name is a reference of <code>Fuction</code> object.   </p>\n<p>Okay, so let’s see a little complex example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ClassOne</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;class one&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">showMessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">message</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ClassTwo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;class two&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> classOne = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassOne</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> classTwo = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassTwo</span>();</span><br><span class=\"line\">classOne.<span class=\"property\">showMessage</span>.<span class=\"title function_\">call</span>(classTwo);</span><br></pre></td></tr></table></figure>\n<p>This will print the ‘class two’ message in the console window of browser. You can execute above code fragment to check it.<br>In this example, the <em>classTwo</em> object doesn’t have <em>showMesage</em> function, but he want to display his message, so he can invoke <em>classOne</em>‘s with <code>call</code> method.   </p>\n<p>So far, maybe you will think we can use the <code>call</code> function to simulate the <code>Inheritance</code> of <code>OOP</code>. You are right, let’s get the example.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BaseClass</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;base class&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">showMessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">message</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BaseClass</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myClass = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">myClass.<span class=\"title function_\">showMessage</span>();</span><br></pre></td></tr></table></figure>\n<p>So the <em>MyClass</em> inherites the <em>BaseClass</em>. The <code>BaseClass.call(this)</code> that means using the object of <em>BaseClass</em> to instead of <em>this</em> object. So the <em>MyClass</em> can access the property and function of <em>BaseClass</em>.   </p>\n","site":{"data":{}},"excerpt":"<p>The <code>call()</code> function is a fantastic method in javascript. It makes some people confusion some times, like me. Here let us to make it clear.    </p>\n<h3 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h3><p><code>call([thisObj[,arg1[, arg2[, [,.argN]]]]])</code>   </p>\n<ul>\n<li><strong>thisObj</strong> (optional): it’s object which can be act as currently <code>this</code> object.   </li>\n<li><strong>arg1, arg2, argN</strong> (optional) : the parameters which can be passed to the method.</li>\n</ul>\n<p>The <em>call</em> method can be used to instead of another object to invoke a method. It can change the object context of a function to a new object which <em>thisObj</em> referenced.    </p>","more":"<p><strong>Note</strong>: <em>The thisObj is a optional parameter, it will reference to Global object if it is not provided. And the <code>call</code> method is only used by <code>Function</code> object.</em>  </p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Let’s use fake code to explain it firstly. see below code:     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj1.<span class=\"property\">method1</span>.<span class=\"title function_\">call</span>(obj2, arg1, arg2);</span><br></pre></td></tr></table></figure>\n<p>The functionality of <em>call</em> method is that <em>obj2</em> is able to invoke the <em>method1</em> of <em>obj1</em> with <em>arg1</em>, <em>arg2</em> parameters.      </p>\n<p>Let’s see a simple example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sub = <span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = add.<span class=\"title function_\">call</span>(sub, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>The value of <em>result</em> variable is 3, not -1. Because the <em>sub</em> function object has been insteaded by <em>add</em> function object. So the <code>add.call(sub, 1, 2)</code> actually is <code>add(1, 2)</code>.  </p>\n<p><strong>Note</strong>: *The <em>function</em> actually is a <em>object</em> in javascript, and the function name is a reference of <code>Fuction</code> object.   </p>\n<p>Okay, so let’s see a little complex example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ClassOne</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;class one&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">showMessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">message</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ClassTwo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;class two&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> classOne = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassOne</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> classTwo = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassTwo</span>();</span><br><span class=\"line\">classOne.<span class=\"property\">showMessage</span>.<span class=\"title function_\">call</span>(classTwo);</span><br></pre></td></tr></table></figure>\n<p>This will print the ‘class two’ message in the console window of browser. You can execute above code fragment to check it.<br>In this example, the <em>classTwo</em> object doesn’t have <em>showMesage</em> function, but he want to display his message, so he can invoke <em>classOne</em>‘s with <code>call</code> method.   </p>\n<p>So far, maybe you will think we can use the <code>call</code> function to simulate the <code>Inheritance</code> of <code>OOP</code>. You are right, let’s get the example.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BaseClass</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">message</span> = <span class=\"string\">&quot;base class&quot;</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">showMessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">message</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyClass</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BaseClass</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myClass = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">myClass.<span class=\"title function_\">showMessage</span>();</span><br></pre></td></tr></table></figure>\n<p>So the <em>MyClass</em> inherites the <em>BaseClass</em>. The <code>BaseClass.call(this)</code> that means using the object of <em>BaseClass</em> to instead of <em>this</em> object. So the <em>MyClass</em> can access the property and function of <em>BaseClass</em>.   </p>"},{"title":"A cool theme for Sublime Text","date":"2015-06-04T08:01:24.000Z","comments":1,"_content":"\nThere is a sublime text theme I want to introduce to you guys. It's called `Cobalt2`, it not only colour scheme for editor window, but also it includes all sublime theme(e.g. sidebar, search, tabs, etc...). You can get it from github [cobalt2](https://github.com/wesbos/cobalt2).   \n\n<!-- more -->\n\n#### Installation\n1. Open package control via pressing `Command + Shift + P` (mac os) or `Ctrl + Shift + P` (windows) to open the command window, and then type `Install Package`.\n2. Search for `Cobalt2` and hit `enter` key.\n3. Once you installed finish, open `Preference` -> `Settings - User` and add the below lines:\n\n```\n\"color_scheme\": \"Packages/Theme - Cobalt2/cobalt2.tmTheme\",\n\"theme\": \"Cobalt2.sublime-theme\",\n```\n`color_scheme` defines how the code looks and `theme` defines how the sidebar, tabs, search, command palette work.\n\n*Note: the sidebar icons only supports  the latest version of sublime text3.*\n\n#### Screenshots\nThere have some screenshots of Cobalt2 theme from [cobalt2](https://github.com/wesbos/cobalt2).    \n\n![cobalt2-theme](/assets/images/legacy/sublime-cobalt2-theme.png)\n\nSo, it's really cool. Hope you like it.\n","source":"_posts/2015-06-04-a-cool-theme-for-sublime-text.markdown","raw":"---\n\ntitle: \"A cool theme for Sublime Text\"\ndate: 2015-06-04 16:01:24 +0800\ncomments: true\ncategories: Tools\ntags: [Sublime Text, Tool]\n---\n\nThere is a sublime text theme I want to introduce to you guys. It's called `Cobalt2`, it not only colour scheme for editor window, but also it includes all sublime theme(e.g. sidebar, search, tabs, etc...). You can get it from github [cobalt2](https://github.com/wesbos/cobalt2).   \n\n<!-- more -->\n\n#### Installation\n1. Open package control via pressing `Command + Shift + P` (mac os) or `Ctrl + Shift + P` (windows) to open the command window, and then type `Install Package`.\n2. Search for `Cobalt2` and hit `enter` key.\n3. Once you installed finish, open `Preference` -> `Settings - User` and add the below lines:\n\n```\n\"color_scheme\": \"Packages/Theme - Cobalt2/cobalt2.tmTheme\",\n\"theme\": \"Cobalt2.sublime-theme\",\n```\n`color_scheme` defines how the code looks and `theme` defines how the sidebar, tabs, search, command palette work.\n\n*Note: the sidebar icons only supports  the latest version of sublime text3.*\n\n#### Screenshots\nThere have some screenshots of Cobalt2 theme from [cobalt2](https://github.com/wesbos/cobalt2).    \n\n![cobalt2-theme](/assets/images/legacy/sublime-cobalt2-theme.png)\n\nSo, it's really cool. Hope you like it.\n","slug":"2015-06-04-a-cool-theme-for-sublime-text","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4oh002vazv56pmcennq","layout":"post","photos":[],"link":"","content":"<p>There is a sublime text theme I want to introduce to you guys. It’s called <code>Cobalt2</code>, it not only colour scheme for editor window, but also it includes all sublime theme(e.g. sidebar, search, tabs, etc…). You can get it from github <a href=\"https://github.com/wesbos/cobalt2\">cobalt2</a>.   </p>\n<span id=\"more\"></span>\n\n<h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><ol>\n<li>Open package control via pressing <code>Command + Shift + P</code> (mac os) or <code>Ctrl + Shift + P</code> (windows) to open the command window, and then type <code>Install Package</code>.</li>\n<li>Search for <code>Cobalt2</code> and hit <code>enter</code> key.</li>\n<li>Once you installed finish, open <code>Preference</code> -&gt; <code>Settings - User</code> and add the below lines:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;color_scheme&quot;: &quot;Packages/Theme - Cobalt2/cobalt2.tmTheme&quot;,</span><br><span class=\"line\">&quot;theme&quot;: &quot;Cobalt2.sublime-theme&quot;,</span><br></pre></td></tr></table></figure>\n<p><code>color_scheme</code> defines how the code looks and <code>theme</code> defines how the sidebar, tabs, search, command palette work.</p>\n<p><em>Note: the sidebar icons only supports  the latest version of sublime text3.</em></p>\n<h4 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h4><p>There have some screenshots of Cobalt2 theme from <a href=\"https://github.com/wesbos/cobalt2\">cobalt2</a>.    </p>\n<p><img src=\"/assets/images/legacy/sublime-cobalt2-theme.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/sublime-cobalt2-theme.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"cobalt2-theme\"></p>\n<p>So, it’s really cool. Hope you like it.</p>\n","site":{"data":{}},"excerpt":"<p>There is a sublime text theme I want to introduce to you guys. It’s called <code>Cobalt2</code>, it not only colour scheme for editor window, but also it includes all sublime theme(e.g. sidebar, search, tabs, etc…). You can get it from github <a href=\"https://github.com/wesbos/cobalt2\">cobalt2</a>.   </p>","more":"<h4 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h4><ol>\n<li>Open package control via pressing <code>Command + Shift + P</code> (mac os) or <code>Ctrl + Shift + P</code> (windows) to open the command window, and then type <code>Install Package</code>.</li>\n<li>Search for <code>Cobalt2</code> and hit <code>enter</code> key.</li>\n<li>Once you installed finish, open <code>Preference</code> -&gt; <code>Settings - User</code> and add the below lines:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;color_scheme&quot;: &quot;Packages/Theme - Cobalt2/cobalt2.tmTheme&quot;,</span><br><span class=\"line\">&quot;theme&quot;: &quot;Cobalt2.sublime-theme&quot;,</span><br></pre></td></tr></table></figure>\n<p><code>color_scheme</code> defines how the code looks and <code>theme</code> defines how the sidebar, tabs, search, command palette work.</p>\n<p><em>Note: the sidebar icons only supports  the latest version of sublime text3.</em></p>\n<h4 id=\"Screenshots\"><a href=\"#Screenshots\" class=\"headerlink\" title=\"Screenshots\"></a>Screenshots</h4><p>There have some screenshots of Cobalt2 theme from <a href=\"https://github.com/wesbos/cobalt2\">cobalt2</a>.    </p>\n<p><img src=\"/assets/images/legacy/sublime-cobalt2-theme.png\" alt=\"cobalt2-theme\"></p>\n<p>So, it’s really cool. Hope you like it.</p>"},{"title":"Spring AOP - What is AOP?","date":"2015-06-04T12:43:03.000Z","comments":1,"_content":"What is `AOP`?, `AOP` stand for `Aspect Oriented Programming`. It's very important module for `Spring` framework. In the enterprise level application programming we used to add different types of services to our application at runtime automatically, like logging, email, transaction, authentication services. These actions we called `cross-cutting` functionalities. `AOP` do this job.    \n<!-- more -->\nLet's see a normal instance:\n\n``` java\npublic class MyLogicClass\n{\n\tpublic void logicOne() {\n\t\t//There is my logic for one.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n\n\tpublic void logicTwo() {\n\t\t//There is my logic for two.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n}\n```\nIn above codes, we have a class called MyLogicClass, in this class there are two logic methods, and both them call authentication, logging, transaction, email services. We called these service are `cross-cutting` functionalities. So there are some problems, one is these `cross-cutting` functionalities increase the class size. Second is we need changed this class and recompile, re-deploy it again when we changed the services.    \n\nSo how to overcome these problems, can we separate the services and our logic client? Yep, we can do this in Spring `AOP`, adding these `cross-cutting` functionalities at runtime don't need to write them in the logic codes. \n\nSo if we use `AOP`, our logic class will be like this:\n``` java\npublic class MyLogicClass\n{\n\tpublic void logicOne() {\n\t\t//There is my logic for one.\n\t\t\n\t\t//Services will be injected here automatically at runtime, but in the codebase there is nothing\n\t}\n\n\tpublic void logicTwo() {\n\t\t//There is my logic for two.\n\n\t\t//Services will be injected here automatically at runtime, but in the codebase there is nothing\n\t}\n}\n```\n\nIn above codes, we separate the business logic and the services, we call this process of separation as `AOP`. So Using `AOP` business logic and `cross-cutting` functionalities are implemented separately and executed at runtime as combine automatically.","source":"_posts/2015-06-04-spring-aop-what-is-aop.markdown","raw":"---\n\ntitle: \"Spring AOP - What is AOP?\"\ndate: 2015-06-04 20:43:03 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\nWhat is `AOP`?, `AOP` stand for `Aspect Oriented Programming`. It's very important module for `Spring` framework. In the enterprise level application programming we used to add different types of services to our application at runtime automatically, like logging, email, transaction, authentication services. These actions we called `cross-cutting` functionalities. `AOP` do this job.    \n<!-- more -->\nLet's see a normal instance:\n\n``` java\npublic class MyLogicClass\n{\n\tpublic void logicOne() {\n\t\t//There is my logic for one.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n\n\tpublic void logicTwo() {\n\t\t//There is my logic for two.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n}\n```\nIn above codes, we have a class called MyLogicClass, in this class there are two logic methods, and both them call authentication, logging, transaction, email services. We called these service are `cross-cutting` functionalities. So there are some problems, one is these `cross-cutting` functionalities increase the class size. Second is we need changed this class and recompile, re-deploy it again when we changed the services.    \n\nSo how to overcome these problems, can we separate the services and our logic client? Yep, we can do this in Spring `AOP`, adding these `cross-cutting` functionalities at runtime don't need to write them in the logic codes. \n\nSo if we use `AOP`, our logic class will be like this:\n``` java\npublic class MyLogicClass\n{\n\tpublic void logicOne() {\n\t\t//There is my logic for one.\n\t\t\n\t\t//Services will be injected here automatically at runtime, but in the codebase there is nothing\n\t}\n\n\tpublic void logicTwo() {\n\t\t//There is my logic for two.\n\n\t\t//Services will be injected here automatically at runtime, but in the codebase there is nothing\n\t}\n}\n```\n\nIn above codes, we separate the business logic and the services, we call this process of separation as `AOP`. So Using `AOP` business logic and `cross-cutting` functionalities are implemented separately and executed at runtime as combine automatically.","slug":"2015-06-04-spring-aop-what-is-aop","published":1,"updated":"2023-09-02T16:45:51.467Z","_id":"clm27g4oi002wazv5apya4ty7","layout":"post","photos":[],"link":"","content":"<p>What is <code>AOP</code>?, <code>AOP</code> stand for <code>Aspect Oriented Programming</code>. It’s very important module for <code>Spring</code> framework. In the enterprise level application programming we used to add different types of services to our application at runtime automatically, like logging, email, transaction, authentication services. These actions we called <code>cross-cutting</code> functionalities. <code>AOP</code> do this job.    </p>\n<span id=\"more\"></span>\n<p>Let’s see a normal instance:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for one.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for two.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In above codes, we have a class called MyLogicClass, in this class there are two logic methods, and both them call authentication, logging, transaction, email services. We called these service are <code>cross-cutting</code> functionalities. So there are some problems, one is these <code>cross-cutting</code> functionalities increase the class size. Second is we need changed this class and recompile, re-deploy it again when we changed the services.    </p>\n<p>So how to overcome these problems, can we separate the services and our logic client? Yep, we can do this in Spring <code>AOP</code>, adding these <code>cross-cutting</code> functionalities at runtime don’t need to write them in the logic codes. </p>\n<p>So if we use <code>AOP</code>, our logic class will be like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for one.</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for two.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In above codes, we separate the business logic and the services, we call this process of separation as <code>AOP</code>. So Using <code>AOP</code> business logic and <code>cross-cutting</code> functionalities are implemented separately and executed at runtime as combine automatically.</p>\n","site":{"data":{}},"excerpt":"<p>What is <code>AOP</code>?, <code>AOP</code> stand for <code>Aspect Oriented Programming</code>. It’s very important module for <code>Spring</code> framework. In the enterprise level application programming we used to add different types of services to our application at runtime automatically, like logging, email, transaction, authentication services. These actions we called <code>cross-cutting</code> functionalities. <code>AOP</code> do this job.    </p>","more":"<p>Let’s see a normal instance:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for one.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for two.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In above codes, we have a class called MyLogicClass, in this class there are two logic methods, and both them call authentication, logging, transaction, email services. We called these service are <code>cross-cutting</code> functionalities. So there are some problems, one is these <code>cross-cutting</code> functionalities increase the class size. Second is we need changed this class and recompile, re-deploy it again when we changed the services.    </p>\n<p>So how to overcome these problems, can we separate the services and our logic client? Yep, we can do this in Spring <code>AOP</code>, adding these <code>cross-cutting</code> functionalities at runtime don’t need to write them in the logic codes. </p>\n<p>So if we use <code>AOP</code>, our logic class will be like this:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for one.</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//There is my logic for two.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In above codes, we separate the business logic and the services, we call this process of separation as <code>AOP</code>. So Using <code>AOP</code> business logic and <code>cross-cutting</code> functionalities are implemented separately and executed at runtime as combine automatically.</p>"},{"title":"Spring AOP - Aspect","date":"2015-06-05T01:25:53.000Z","comments":1,"_content":"An `Aspect` represent the **name** of a `cross-cutting` functionality, it's only name not implementation.\n\nLet us see the example.\n\n``` java\npublic class MyLogicClass\n{\n\tpublic void logicOne() {\n\t\t//This is my logic for one.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n\n\tpublic void logicTwo() {\n\t\t//This is my logic for two.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n}\n```\n<!-- more -->\nFrom above codes, we have four `cross-cutting` functionalities for *logicOne* and *logicTwo* method, So this means we have four `Aspect`s which are *Authentication*, *Logging*, *Transaction*, *Email*.  \n\n*Note: `Aspect` is only denote the name of the `cross-cutting` functionality, not the implementation*","source":"_posts/2015-06-05-spring-aop-aspect.markdown","raw":"---\n\ntitle: \"Spring AOP - Aspect\"\ndate: 2015-06-05 09:25:53 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\nAn `Aspect` represent the **name** of a `cross-cutting` functionality, it's only name not implementation.\n\nLet us see the example.\n\n``` java\npublic class MyLogicClass\n{\n\tpublic void logicOne() {\n\t\t//This is my logic for one.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n\n\tpublic void logicTwo() {\n\t\t//This is my logic for two.\n\n\t\t//Call Authentication Service \n\t\t//Call Logging Service\n\t\t//Call Transcation Service\n\t\t//Call Email Service\n\t}\n}\n```\n<!-- more -->\nFrom above codes, we have four `cross-cutting` functionalities for *logicOne* and *logicTwo* method, So this means we have four `Aspect`s which are *Authentication*, *Logging*, *Transaction*, *Email*.  \n\n*Note: `Aspect` is only denote the name of the `cross-cutting` functionality, not the implementation*","slug":"2015-06-05-spring-aop-aspect","published":1,"updated":"2023-09-02T16:46:20.394Z","_id":"clm27g4oj002yazv57uxsax0e","layout":"post","photos":[],"link":"","content":"<p>An <code>Aspect</code> represent the <strong>name</strong> of a <code>cross-cutting</code> functionality, it’s only name not implementation.</p>\n<p>Let us see the example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//This is my logic for one.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//This is my logic for two.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>From above codes, we have four <code>cross-cutting</code> functionalities for <em>logicOne</em> and <em>logicTwo</em> method, So this means we have four <code>Aspect</code>s which are <em>Authentication</em>, <em>Logging</em>, <em>Transaction</em>, <em>Email</em>.  </p>\n<p><em>Note: <code>Aspect</code> is only denote the name of the <code>cross-cutting</code> functionality, not the implementation</em></p>\n","site":{"data":{}},"excerpt":"<p>An <code>Aspect</code> represent the <strong>name</strong> of a <code>cross-cutting</code> functionality, it’s only name not implementation.</p>\n<p>Let us see the example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//This is my logic for one.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//This is my logic for two.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Authentication Service </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Logging Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Transcation Service</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//Call Email Service</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>From above codes, we have four <code>cross-cutting</code> functionalities for <em>logicOne</em> and <em>logicTwo</em> method, So this means we have four <code>Aspect</code>s which are <em>Authentication</em>, <em>Logging</em>, <em>Transaction</em>, <em>Email</em>.  </p>\n<p><em>Note: <code>Aspect</code> is only denote the name of the <code>cross-cutting</code> functionality, not the implementation</em></p>"},{"title":"The Cobalt2 theme for iTerm2 and ZSH","date":"2015-06-04T08:40:06.000Z","comments":1,"_content":"From last blog, maybe you already love the `Cobalt2` theme, like me. We usually use the terminal to do something we need. So can changed the theme for our terminal?    \nThe answer is yes, we can. Let me show you screenshots firstly.   \n![item-cobalt2](/assets/images/legacy/iterm-cobalt2.png)\n<!--more -->\n\nBut for Mac OS X, we should use `iTerm2` instead of system default terminal. The `iTerm2` is power than the system default. It is a terminal  emulator for Mac OS X that does amazing things. And it has many feature you never knew you always wanted. just like me. So don't hesitate to go to offical website [iTerm2](https://www.iterm2.com/f) and download it.    \n\nFor `ZSH`, it's open source and very cool thing to decorate your terminal. If you don't have yet. I strongly recommand you install it for your terminal. Go to [Oh My Zsh](http://ohmyz.sh/) offical website to see how to install.    \n\nOkay, after you already prepare these tools, go to [Cobalt2-item](https://github.com/wesbos/Cobalt2-iterm) and follow step to install it.   \n\n","source":"_posts/2015-06-04-the-cobalt2-theme-for-iterm2-and-zsh.markdown","raw":"---\n\ntitle: \"The Cobalt2 theme for iTerm2 and ZSH\"\ndate: 2015-06-04 16:40:06 +0800\ncomments: true\ncategories: Tools\ntags: [Tools, iTerm2]\n---\nFrom last blog, maybe you already love the `Cobalt2` theme, like me. We usually use the terminal to do something we need. So can changed the theme for our terminal?    \nThe answer is yes, we can. Let me show you screenshots firstly.   \n![item-cobalt2](/assets/images/legacy/iterm-cobalt2.png)\n<!--more -->\n\nBut for Mac OS X, we should use `iTerm2` instead of system default terminal. The `iTerm2` is power than the system default. It is a terminal  emulator for Mac OS X that does amazing things. And it has many feature you never knew you always wanted. just like me. So don't hesitate to go to offical website [iTerm2](https://www.iterm2.com/f) and download it.    \n\nFor `ZSH`, it's open source and very cool thing to decorate your terminal. If you don't have yet. I strongly recommand you install it for your terminal. Go to [Oh My Zsh](http://ohmyz.sh/) offical website to see how to install.    \n\nOkay, after you already prepare these tools, go to [Cobalt2-item](https://github.com/wesbos/Cobalt2-iterm) and follow step to install it.   \n\n","slug":"2015-06-04-the-cobalt2-theme-for-iterm2-and-zsh","published":1,"updated":"2023-09-02T17:27:29.812Z","_id":"clm27g4oj002zazv582uea0t6","layout":"post","photos":[],"link":"","content":"<p>From last blog, maybe you already love the <code>Cobalt2</code> theme, like me. We usually use the terminal to do something we need. So can changed the theme for our terminal?<br>The answer is yes, we can. Let me show you screenshots firstly.<br><img src=\"/assets/images/legacy/iterm-cobalt2.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/iterm-cobalt2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"item-cobalt2\"></p>\n<span id=\"more\"></span>\n\n<p>But for Mac OS X, we should use <code>iTerm2</code> instead of system default terminal. The <code>iTerm2</code> is power than the system default. It is a terminal  emulator for Mac OS X that does amazing things. And it has many feature you never knew you always wanted. just like me. So don’t hesitate to go to offical website <a href=\"https://www.iterm2.com/f\">iTerm2</a> and download it.    </p>\n<p>For <code>ZSH</code>, it’s open source and very cool thing to decorate your terminal. If you don’t have yet. I strongly recommand you install it for your terminal. Go to <a href=\"http://ohmyz.sh/\">Oh My Zsh</a> offical website to see how to install.    </p>\n<p>Okay, after you already prepare these tools, go to <a href=\"https://github.com/wesbos/Cobalt2-iterm\">Cobalt2-item</a> and follow step to install it.   </p>\n","site":{"data":{}},"excerpt":"<p>From last blog, maybe you already love the <code>Cobalt2</code> theme, like me. We usually use the terminal to do something we need. So can changed the theme for our terminal?<br>The answer is yes, we can. Let me show you screenshots firstly.<br><img src=\"/assets/images/legacy/iterm-cobalt2.png\" alt=\"item-cobalt2\"></p>","more":"<p>But for Mac OS X, we should use <code>iTerm2</code> instead of system default terminal. The <code>iTerm2</code> is power than the system default. It is a terminal  emulator for Mac OS X that does amazing things. And it has many feature you never knew you always wanted. just like me. So don’t hesitate to go to offical website <a href=\"https://www.iterm2.com/f\">iTerm2</a> and download it.    </p>\n<p>For <code>ZSH</code>, it’s open source and very cool thing to decorate your terminal. If you don’t have yet. I strongly recommand you install it for your terminal. Go to <a href=\"http://ohmyz.sh/\">Oh My Zsh</a> offical website to see how to install.    </p>\n<p>Okay, after you already prepare these tools, go to <a href=\"https://github.com/wesbos/Cobalt2-iterm\">Cobalt2-item</a> and follow step to install it.   </p>"},{"title":"Spring AOP - Before Advice","date":"2015-06-05T07:33:00.000Z","comments":1,"_content":"As we know the `Aspect` is just the name of the `cross-cutting` functionality, not the implementation. So what's the implementation of the `cross-cutting` functionality? It's called `Advice`. An `Advice` provides the code for implementation of the service. It is like *Logging* service, *Logging* is a `Aspect` and `Advice` denotes the implementation of *Log4j*.   \n<!-- more -->\nThere are four types of `Adivce`:\n\n- **Before Advice**\n- After Advice\n- Around Advice\n- Throws Advice         \n\nIn this article, we only explain `Before Advice`. The other advices we will talk about it in later blogs.   \n\nThe `Before Advice` is the implementation of the service. It will be applied before the business logic of method is going to execute. So this means this advice will execute before the business logic. we can use it to do something like authentication before the business logic execution.    \n\nIt will be applied in the runtime of application, not the compilation of the code. And also it will generate a new *proxy* class which is combined by this advice and business logic class in the runtime automatically.   \n\nWhen we create a `Before Advice`, we should implement the `MethodBeforeAdvice` interface, this interface is given by _org.springframework.aop.*_ package. And then we need to override the `before` method of it.    \n\n``` java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.MethodBeforeAdvice;\n\npublic class MyBeforeAdvice implements MethodBeforeAdvice {\n\n\t@Override\n\tpublic void before(Method method, Object[] args, Object target)\n\t\t\tthrows Throwable {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n}\n```\nThere are 3 parameters in the *before* method.   \n\nThe first parameter *`Method` method* is used to access the method name of the business logic via `getName()`.    \n\nThe second parameter *Object[] args* is Object array, it is used to access the arguments of the logic method.    \n\nThe last parameter *Object target* is an object to whom this service will be going to apply, usually this will taken care by *container*, actually we no need to care it.     \n\nOkay, let's see a full example.\n\n``` xml\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aop</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t</dependencies>\n```\n\nIn the pom.xml file, we add above dependencies to our project. (this project use maven to manage)   \n\nOkay, let us create our logic class, firstly we need to create interface for it.\n\n``` java\npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tvoid add(int a, int b);\n\t\n\tvoid subtract(int a, int b);\n}\n```\n\nWe created two method in this interface, this interface is very important for our `AOP` project.\n\n``` java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic void add(int a, int b) {\n\t\tString result = String.format(\"%s + %s = %s\", a, b, a + b);\n\t\tSystem.out.println(result);\n\t}\n\n\t@Override\n\tpublic void subtract(int a, int b) {\n\t\tString result = String.format(\"%s - %s = %s\", a, b, a - b);\n\t\tSystem.out.println(result);\n\t}\n\n}\n```\nOur class implements the interface, just print the result of the add or subtract.\n\nFor now, we have our logic class. but now we want to do something before the method logic is going to execute. So the `Before Advice` is comming.\n\n``` java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.MethodBeforeAdvice;\n\npublic class MyBeforeAdvice implements MethodBeforeAdvice {\n\n\t@Override\n\tpublic void before(Method method, Object[] args, Object target) throws Throwable {\n\t\tSystem.out.println(String.format(\"This will be executed before the %s method\", method.getName()));\n\t}\n}\n\n```\nWe print some messages in our `Before Advice`, this will be printed before the logic method result.\n\nFinally, we need to make the logic class and our `Before Advice` are combined together. so we need to config them in the xml file.\n\n``` xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myBeforeAdvice\" class=\"spring.test.aop.MyBeforeAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myBeforeAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\nIn `AOP` always we need to create a spring bean in the form of interface and implementation class only, because the IOC container internally creates proxy class by implementing that interface with the help of `ProxyFactoryBean`.\nTo run this application, we need a class which with *main* method. See below codes.\n\n``` java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface myLogicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tmyLogicInterface.add(10, 20);\n\t\tmyLogicInterface.subtract(10, 5);\n\t}\n\n}\n\n```\nIn the client application, we are passing id of `ProxyFactoryBean` (proxyFactoryBean) to get the object, because we need proxyed object to invoke our logic method.\n\nThe result of the execution is below:   \n\n\tThis will be executed before the add method\n\t10 + 20 = 30\n\tThis will be executed before the subtract method\n\t10 - 5 = 5\n\t\nSo, it is simple to use it. and we separated the logic and the services completely, only need to config the xml file when the services changed.","source":"_posts/2015-06-05-spring-aop-before-advice.markdown","raw":"---\n\ntitle: \"Spring AOP - Before Advice\"\ndate: 2015-06-05 15:33:00 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\nAs we know the `Aspect` is just the name of the `cross-cutting` functionality, not the implementation. So what's the implementation of the `cross-cutting` functionality? It's called `Advice`. An `Advice` provides the code for implementation of the service. It is like *Logging* service, *Logging* is a `Aspect` and `Advice` denotes the implementation of *Log4j*.   \n<!-- more -->\nThere are four types of `Adivce`:\n\n- **Before Advice**\n- After Advice\n- Around Advice\n- Throws Advice         \n\nIn this article, we only explain `Before Advice`. The other advices we will talk about it in later blogs.   \n\nThe `Before Advice` is the implementation of the service. It will be applied before the business logic of method is going to execute. So this means this advice will execute before the business logic. we can use it to do something like authentication before the business logic execution.    \n\nIt will be applied in the runtime of application, not the compilation of the code. And also it will generate a new *proxy* class which is combined by this advice and business logic class in the runtime automatically.   \n\nWhen we create a `Before Advice`, we should implement the `MethodBeforeAdvice` interface, this interface is given by _org.springframework.aop.*_ package. And then we need to override the `before` method of it.    \n\n``` java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.MethodBeforeAdvice;\n\npublic class MyBeforeAdvice implements MethodBeforeAdvice {\n\n\t@Override\n\tpublic void before(Method method, Object[] args, Object target)\n\t\t\tthrows Throwable {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n}\n```\nThere are 3 parameters in the *before* method.   \n\nThe first parameter *`Method` method* is used to access the method name of the business logic via `getName()`.    \n\nThe second parameter *Object[] args* is Object array, it is used to access the arguments of the logic method.    \n\nThe last parameter *Object target* is an object to whom this service will be going to apply, usually this will taken care by *container*, actually we no need to care it.     \n\nOkay, let's see a full example.\n\n``` xml\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aop</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t</dependencies>\n```\n\nIn the pom.xml file, we add above dependencies to our project. (this project use maven to manage)   \n\nOkay, let us create our logic class, firstly we need to create interface for it.\n\n``` java\npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tvoid add(int a, int b);\n\t\n\tvoid subtract(int a, int b);\n}\n```\n\nWe created two method in this interface, this interface is very important for our `AOP` project.\n\n``` java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic void add(int a, int b) {\n\t\tString result = String.format(\"%s + %s = %s\", a, b, a + b);\n\t\tSystem.out.println(result);\n\t}\n\n\t@Override\n\tpublic void subtract(int a, int b) {\n\t\tString result = String.format(\"%s - %s = %s\", a, b, a - b);\n\t\tSystem.out.println(result);\n\t}\n\n}\n```\nOur class implements the interface, just print the result of the add or subtract.\n\nFor now, we have our logic class. but now we want to do something before the method logic is going to execute. So the `Before Advice` is comming.\n\n``` java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.MethodBeforeAdvice;\n\npublic class MyBeforeAdvice implements MethodBeforeAdvice {\n\n\t@Override\n\tpublic void before(Method method, Object[] args, Object target) throws Throwable {\n\t\tSystem.out.println(String.format(\"This will be executed before the %s method\", method.getName()));\n\t}\n}\n\n```\nWe print some messages in our `Before Advice`, this will be printed before the logic method result.\n\nFinally, we need to make the logic class and our `Before Advice` are combined together. so we need to config them in the xml file.\n\n``` xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myBeforeAdvice\" class=\"spring.test.aop.MyBeforeAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myBeforeAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\nIn `AOP` always we need to create a spring bean in the form of interface and implementation class only, because the IOC container internally creates proxy class by implementing that interface with the help of `ProxyFactoryBean`.\nTo run this application, we need a class which with *main* method. See below codes.\n\n``` java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface myLogicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tmyLogicInterface.add(10, 20);\n\t\tmyLogicInterface.subtract(10, 5);\n\t}\n\n}\n\n```\nIn the client application, we are passing id of `ProxyFactoryBean` (proxyFactoryBean) to get the object, because we need proxyed object to invoke our logic method.\n\nThe result of the execution is below:   \n\n\tThis will be executed before the add method\n\t10 + 20 = 30\n\tThis will be executed before the subtract method\n\t10 - 5 = 5\n\t\nSo, it is simple to use it. and we separated the logic and the services completely, only need to config the xml file when the services changed.","slug":"2015-06-05-spring-aop-before-advice","published":1,"updated":"2023-09-02T16:46:24.341Z","_id":"clm27g4ok0031azv5h98zheu4","layout":"post","photos":[],"link":"","content":"<p>As we know the <code>Aspect</code> is just the name of the <code>cross-cutting</code> functionality, not the implementation. So what’s the implementation of the <code>cross-cutting</code> functionality? It’s called <code>Advice</code>. An <code>Advice</code> provides the code for implementation of the service. It is like <em>Logging</em> service, <em>Logging</em> is a <code>Aspect</code> and <code>Advice</code> denotes the implementation of <em>Log4j</em>.   </p>\n<span id=\"more\"></span>\n<p>There are four types of <code>Adivce</code>:</p>\n<ul>\n<li><strong>Before Advice</strong></li>\n<li>After Advice</li>\n<li>Around Advice</li>\n<li>Throws Advice</li>\n</ul>\n<p>In this article, we only explain <code>Before Advice</code>. The other advices we will talk about it in later blogs.   </p>\n<p>The <code>Before Advice</code> is the implementation of the service. It will be applied before the business logic of method is going to execute. So this means this advice will execute before the business logic. we can use it to do something like authentication before the business logic execution.    </p>\n<p>It will be applied in the runtime of application, not the compilation of the code. And also it will generate a new <em>proxy</em> class which is combined by this advice and business logic class in the runtime automatically.   </p>\n<p>When we create a <code>Before Advice</code>, we should implement the <code>MethodBeforeAdvice</code> interface, this interface is given by <em>org.springframework.aop.*</em> package. And then we need to override the <code>before</code> method of it.    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeforeAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodBeforeAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Method method, Object[] args, Object target)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>There are 3 parameters in the <em>before</em> method.   </p>\n<p>The first parameter <em><code>Method</code> method</em> is used to access the method name of the business logic via <code>getName()</code>.    </p>\n<p>The second parameter <em>Object[] args</em> is Object array, it is used to access the arguments of the logic method.    </p>\n<p>The last parameter <em>Object target</em> is an object to whom this service will be going to apply, usually this will taken care by <em>container</em>, actually we no need to care it.     </p>\n<p>Okay, let’s see a full example.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>In the pom.xml file, we add above dependencies to our project. (this project use maven to manage)   </p>\n<p>Okay, let us create our logic class, firstly we need to create interface for it.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We created two method in this interface, this interface is very important for our <code>AOP</code> project.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;%s + %s = %s&quot;</span>, a, b, a + b);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;%s - %s = %s&quot;</span>, a, b, a - b);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Our class implements the interface, just print the result of the add or subtract.</p>\n<p>For now, we have our logic class. but now we want to do something before the method logic is going to execute. So the <code>Before Advice</code> is comming.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeforeAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodBeforeAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Method method, Object[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;This will be executed before the %s method&quot;</span>, method.getName()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>We print some messages in our <code>Before Advice</code>, this will be printed before the logic method result.</p>\n<p>Finally, we need to make the logic class and our <code>Before Advice</code> are combined together. so we need to config them in the xml file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBeforeAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyBeforeAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;proxyInterfaces&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myBeforeAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In <code>AOP</code> always we need to create a spring bean in the form of interface and implementation class only, because the IOC container internally creates proxy class by implementing that interface with the help of <code>ProxyFactoryBean</code>.<br>To run this application, we need a class which with <em>main</em> method. See below codes.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">myLogicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.add(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\tmyLogicInterface.subtract(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In the client application, we are passing id of <code>ProxyFactoryBean</code> (proxyFactoryBean) to get the object, because we need proxyed object to invoke our logic method.</p>\n<p>The result of the execution is below:   </p>\n<pre><code>This will be executed before the add method\n10 + 20 = 30\nThis will be executed before the subtract method\n10 - 5 = 5\n</code></pre>\n<p>So, it is simple to use it. and we separated the logic and the services completely, only need to config the xml file when the services changed.</p>\n","site":{"data":{}},"excerpt":"<p>As we know the <code>Aspect</code> is just the name of the <code>cross-cutting</code> functionality, not the implementation. So what’s the implementation of the <code>cross-cutting</code> functionality? It’s called <code>Advice</code>. An <code>Advice</code> provides the code for implementation of the service. It is like <em>Logging</em> service, <em>Logging</em> is a <code>Aspect</code> and <code>Advice</code> denotes the implementation of <em>Log4j</em>.   </p>","more":"<p>There are four types of <code>Adivce</code>:</p>\n<ul>\n<li><strong>Before Advice</strong></li>\n<li>After Advice</li>\n<li>Around Advice</li>\n<li>Throws Advice</li>\n</ul>\n<p>In this article, we only explain <code>Before Advice</code>. The other advices we will talk about it in later blogs.   </p>\n<p>The <code>Before Advice</code> is the implementation of the service. It will be applied before the business logic of method is going to execute. So this means this advice will execute before the business logic. we can use it to do something like authentication before the business logic execution.    </p>\n<p>It will be applied in the runtime of application, not the compilation of the code. And also it will generate a new <em>proxy</em> class which is combined by this advice and business logic class in the runtime automatically.   </p>\n<p>When we create a <code>Before Advice</code>, we should implement the <code>MethodBeforeAdvice</code> interface, this interface is given by <em>org.springframework.aop.*</em> package. And then we need to override the <code>before</code> method of it.    </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeforeAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodBeforeAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Method method, Object[] args, Object target)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>There are 3 parameters in the <em>before</em> method.   </p>\n<p>The first parameter <em><code>Method</code> method</em> is used to access the method name of the business logic via <code>getName()</code>.    </p>\n<p>The second parameter <em>Object[] args</em> is Object array, it is used to access the arguments of the logic method.    </p>\n<p>The last parameter <em>Object target</em> is an object to whom this service will be going to apply, usually this will taken care by <em>container</em>, actually we no need to care it.     </p>\n<p>Okay, let’s see a full example.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>In the pom.xml file, we add above dependencies to our project. (this project use maven to manage)   </p>\n<p>Okay, let us create our logic class, firstly we need to create interface for it.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We created two method in this interface, this interface is very important for our <code>AOP</code> project.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;%s + %s = %s&quot;</span>, a, b, a + b);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;%s - %s = %s&quot;</span>, a, b, a - b);</span><br><span class=\"line\">\t\tSystem.out.println(result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Our class implements the interface, just print the result of the add or subtract.</p>\n<p>For now, we have our logic class. but now we want to do something before the method logic is going to execute. So the <code>Before Advice</code> is comming.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeforeAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodBeforeAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Method method, Object[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;This will be executed before the %s method&quot;</span>, method.getName()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>We print some messages in our <code>Before Advice</code>, this will be printed before the logic method result.</p>\n<p>Finally, we need to make the logic class and our <code>Before Advice</code> are combined together. so we need to config them in the xml file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBeforeAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyBeforeAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;proxyInterfaces&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myBeforeAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>In <code>AOP</code> always we need to create a spring bean in the form of interface and implementation class only, because the IOC container internally creates proxy class by implementing that interface with the help of <code>ProxyFactoryBean</code>.<br>To run this application, we need a class which with <em>main</em> method. See below codes.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">myLogicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.add(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\tmyLogicInterface.subtract(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In the client application, we are passing id of <code>ProxyFactoryBean</code> (proxyFactoryBean) to get the object, because we need proxyed object to invoke our logic method.</p>\n<p>The result of the execution is below:   </p>\n<pre><code>This will be executed before the add method\n10 + 20 = 30\nThis will be executed before the subtract method\n10 - 5 = 5\n</code></pre>\n<p>So, it is simple to use it. and we separated the logic and the services completely, only need to config the xml file when the services changed.</p>"},{"title":"Spring AOP - After Advice","date":"2015-06-06T02:14:46.000Z","comments":1,"_content":"`Advice` is the implementation of the `cross-cutting` functionality. An `Adivce` provides the code for implementation of the service.\n\nThere are four types of Advice:    \n\n- Before Advice\n- **After Advice**\n- Around Advice\n- Throws Advice\n<!-- more -->\n`After Advice` is same as `Before Advice`. But in order to create our after advice in spring, our class should implement an interface called `AfterReturningAdvice`, this interface is given in _org.springframework.aop.*_ package. And we need to override a method given by this interface called `afterReturning()`.   \n\n``` java\npublic class MyAfterAdvice implements AfterReturningAdvice {\n\n\t@Override\n\tpublic void afterReturning(Object returnValue, Method method,\n\t\t\tObject[] args, Object target) throws Throwable {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n}\n``` \nThe *returnValuef* is the return value of the logic method, we can use it to access the return of the logic function. The *method* parameter is the logic method, we can use *getName()* to access the name of method. And the *args* parameter is arguments of logic method.   \n\nLet's see full example.\n\n``` java \npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tint add(int a, int b);\n\t\n\tint subtract(int a, int b);\n}\n\n```\nIn this interface, we changed the method's signature, we have return value for both two method.   \n\n``` java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic int add(int a, int b) {\n\t\treturn a + b;\n\t}\n\n\t@Override\n\tpublic int subtract(int a, int b) {\n\t\treturn a - b;\n\t}\n\n}\n\n```\nIn *MyLogicClass*, we implemented the two methods *add* and *subtract*, and return the value.\n``` java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.AfterReturningAdvice;\n\npublic class MyAfterAdvice implements AfterReturningAdvice {\n\n\t@Override\n\tpublic void afterReturning(Object returnValue, Method method,\n\t\t\tObject[] args, Object target) throws Throwable {\n\n\t\tString message = String.format(\n\t\t\t\t\"The result from method %s(%s, %s) is: %s\", method.getName(),\n\t\t\t\targs[0], args[1], returnValue);\n\n\t\tSystem.out.println(message);\n\n\t}\n\n}\n```\nWe print all the messages of the logic method in our `After Advice`, include method name, the return value of method, the arguments etc.   \n\nOkay, let's see our spring config file.\n\n``` java\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAfterAdvice\" class=\"spring.test.aop.MyAfterAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myAfterAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\nIt is same with last spring config file of `Before After`. We just use *MyAfterAdvice* to instead of *MyBeforeAdvice*.   \n\nTo make this application run, we should read spring config file.   \n\n``` java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface myLogicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tmyLogicInterface.add(10, 20);\n\t\tmyLogicInterface.subtract(10, 5);\n\t}\n\n}\n\n```\n\nThe result of the application executioin.\n\n\tThe result from method add(10, 20) is: 30\n\tThe result from method subtract(10, 5) is: 5","source":"_posts/2015-06-06-spring-aop-after-advice.markdown","raw":"---\n\ntitle: \"Spring AOP - After Advice\"\ndate: 2015-06-06 10:14:46 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n`Advice` is the implementation of the `cross-cutting` functionality. An `Adivce` provides the code for implementation of the service.\n\nThere are four types of Advice:    \n\n- Before Advice\n- **After Advice**\n- Around Advice\n- Throws Advice\n<!-- more -->\n`After Advice` is same as `Before Advice`. But in order to create our after advice in spring, our class should implement an interface called `AfterReturningAdvice`, this interface is given in _org.springframework.aop.*_ package. And we need to override a method given by this interface called `afterReturning()`.   \n\n``` java\npublic class MyAfterAdvice implements AfterReturningAdvice {\n\n\t@Override\n\tpublic void afterReturning(Object returnValue, Method method,\n\t\t\tObject[] args, Object target) throws Throwable {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n}\n``` \nThe *returnValuef* is the return value of the logic method, we can use it to access the return of the logic function. The *method* parameter is the logic method, we can use *getName()* to access the name of method. And the *args* parameter is arguments of logic method.   \n\nLet's see full example.\n\n``` java \npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tint add(int a, int b);\n\t\n\tint subtract(int a, int b);\n}\n\n```\nIn this interface, we changed the method's signature, we have return value for both two method.   \n\n``` java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic int add(int a, int b) {\n\t\treturn a + b;\n\t}\n\n\t@Override\n\tpublic int subtract(int a, int b) {\n\t\treturn a - b;\n\t}\n\n}\n\n```\nIn *MyLogicClass*, we implemented the two methods *add* and *subtract*, and return the value.\n``` java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.AfterReturningAdvice;\n\npublic class MyAfterAdvice implements AfterReturningAdvice {\n\n\t@Override\n\tpublic void afterReturning(Object returnValue, Method method,\n\t\t\tObject[] args, Object target) throws Throwable {\n\n\t\tString message = String.format(\n\t\t\t\t\"The result from method %s(%s, %s) is: %s\", method.getName(),\n\t\t\t\targs[0], args[1], returnValue);\n\n\t\tSystem.out.println(message);\n\n\t}\n\n}\n```\nWe print all the messages of the logic method in our `After Advice`, include method name, the return value of method, the arguments etc.   \n\nOkay, let's see our spring config file.\n\n``` java\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAfterAdvice\" class=\"spring.test.aop.MyAfterAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myAfterAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\nIt is same with last spring config file of `Before After`. We just use *MyAfterAdvice* to instead of *MyBeforeAdvice*.   \n\nTo make this application run, we should read spring config file.   \n\n``` java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface myLogicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tmyLogicInterface.add(10, 20);\n\t\tmyLogicInterface.subtract(10, 5);\n\t}\n\n}\n\n```\n\nThe result of the application executioin.\n\n\tThe result from method add(10, 20) is: 30\n\tThe result from method subtract(10, 5) is: 5","slug":"2015-06-06-spring-aop-after-advice","published":1,"updated":"2023-09-02T16:46:28.054Z","_id":"clm27g4ol0034azv5fb0b8kyk","layout":"post","photos":[],"link":"","content":"<p><code>Advice</code> is the implementation of the <code>cross-cutting</code> functionality. An <code>Adivce</code> provides the code for implementation of the service.</p>\n<p>There are four types of Advice:    </p>\n<ul>\n<li>Before Advice</li>\n<li><strong>After Advice</strong></li>\n<li>Around Advice</li>\n<li>Throws Advice<span id=\"more\"></span>\n<code>After Advice</code> is same as <code>Before Advice</code>. But in order to create our after advice in spring, our class should implement an interface called <code>AfterReturningAdvice</code>, this interface is given in <em>org.springframework.aop.*</em> package. And we need to override a method given by this interface called <code>afterReturning()</code>.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAfterAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterReturningAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object returnValue, Method method,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tObject[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <em>returnValuef</em> is the return value of the logic method, we can use it to access the return of the logic function. The <em>method</em> parameter is the logic method, we can use <em>getName()</em> to access the name of method. And the <em>args</em> parameter is arguments of logic method.   </p>\n<p>Let’s see full example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In this interface, we changed the method’s signature, we have return value for both two method.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In <em>MyLogicClass</em>, we implemented the two methods <em>add</em> and <em>subtract</em>, and return the value.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAfterAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterReturningAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object returnValue, Method method,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tObject[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;The result from method %s(%s, %s) is: %s&quot;</span>, method.getName(),</span><br><span class=\"line\">\t\t\t\targs[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>], returnValue);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(message);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We print all the messages of the logic method in our <code>After Advice</code>, include method name, the return value of method, the arguments etc.   </p>\n<p>Okay, let’s see our spring config file.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE beans PUBLIC <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;beans&gt;</span><br><span class=\"line\">\t&lt;bean id=<span class=\"string\">&quot;myAfterAdvice&quot;</span> class=<span class=\"string\">&quot;spring.test.aop.MyAfterAdvice&quot;</span>/&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=<span class=\"string\">&quot;myLogicClass&quot;</span> class=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> class=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;property name=<span class=\"string\">&quot;proxyInterfaces&quot;</span> value=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span><br><span class=\"line\">\t\t&lt;property name=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;list&gt;</span><br><span class=\"line\">\t\t\t\t&lt;value&gt;myAfterAdvice&lt;/value&gt;</span><br><span class=\"line\">\t\t\t&lt;/list&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=<span class=\"string\">&quot;target&quot;</span> ref=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>It is same with last spring config file of <code>Before After</code>. We just use <em>MyAfterAdvice</em> to instead of <em>MyBeforeAdvice</em>.   </p>\n<p>To make this application run, we should read spring config file.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">myLogicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.add(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\tmyLogicInterface.subtract(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The result of the application executioin.</p>\n<pre><code>The result from method add(10, 20) is: 30\nThe result from method subtract(10, 5) is: 5\n</code></pre>\n","site":{"data":{}},"excerpt":"<p><code>Advice</code> is the implementation of the <code>cross-cutting</code> functionality. An <code>Adivce</code> provides the code for implementation of the service.</p>\n<p>There are four types of Advice:    </p>\n<ul>\n<li>Before Advice</li>\n<li><strong>After Advice</strong></li>\n<li>Around Advice</li>\n<li>Throws Advice","more":"<code>After Advice</code> is same as <code>Before Advice</code>. But in order to create our after advice in spring, our class should implement an interface called <code>AfterReturningAdvice</code>, this interface is given in <em>org.springframework.aop.*</em> package. And we need to override a method given by this interface called <code>afterReturning()</code>.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAfterAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterReturningAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object returnValue, Method method,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tObject[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <em>returnValuef</em> is the return value of the logic method, we can use it to access the return of the logic function. The <em>method</em> parameter is the logic method, we can use <em>getName()</em> to access the name of method. And the <em>args</em> parameter is arguments of logic method.   </p>\n<p>Let’s see full example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In this interface, we changed the method’s signature, we have return value for both two method.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">subtract</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In <em>MyLogicClass</em>, we implemented the two methods <em>add</em> and <em>subtract</em>, and return the value.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAfterAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AfterReturningAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object returnValue, Method method,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tObject[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;The result from method %s(%s, %s) is: %s&quot;</span>, method.getName(),</span><br><span class=\"line\">\t\t\t\targs[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>], returnValue);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(message);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We print all the messages of the logic method in our <code>After Advice</code>, include method name, the return value of method, the arguments etc.   </p>\n<p>Okay, let’s see our spring config file.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE beans PUBLIC <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;beans&gt;</span><br><span class=\"line\">\t&lt;bean id=<span class=\"string\">&quot;myAfterAdvice&quot;</span> class=<span class=\"string\">&quot;spring.test.aop.MyAfterAdvice&quot;</span>/&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=<span class=\"string\">&quot;myLogicClass&quot;</span> class=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;bean id=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> class=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;property name=<span class=\"string\">&quot;proxyInterfaces&quot;</span> value=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span><br><span class=\"line\">\t\t&lt;property name=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;list&gt;</span><br><span class=\"line\">\t\t\t\t&lt;value&gt;myAfterAdvice&lt;/value&gt;</span><br><span class=\"line\">\t\t\t&lt;/list&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=<span class=\"string\">&quot;target&quot;</span> ref=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>It is same with last spring config file of <code>Before After</code>. We just use <em>MyAfterAdvice</em> to instead of <em>MyBeforeAdvice</em>.   </p>\n<p>To make this application run, we should read spring config file.   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">myLogicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.add(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\tmyLogicInterface.subtract(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>The result of the application executioin.</p>\n<pre><code>The result from method add(10, 20) is: 30\nThe result from method subtract(10, 5) is: 5\n</code></pre>"},{"title":"Spring AOP - Around Advice","date":"2015-06-08T01:42:08.000Z","comments":1,"_content":"\nIn this blog, let us talk about `Around Advice`. There are some few points about it.   \n\n- `Around Advice` is combination of `Before Advice` and `After Advice`.\n- In a single `Around Advice` we can implement both *before* and *after* services.\n- **Note**, `Around Advice` is not given by *spring framework*, it is from *Open Source* implementation called `AOP` alliance.\n- `Around Advice` can be used by any framework which supports `AOP`.    \n- `Around Advice` can access the return value of business method and it can modify the value and it can return a different value back to the client, as return type is Object, but in the `After Advice` its not possible right, as its return type is void.\n<!-- more -->\n\nIn order to create `Around Advice`, we should implement an interface called `MethodInterceptor` and override the method called `invoke` which has a prarameter `MethodInvocation` type. We can use this parameter to invoke our business logic method like ``` methodInvoation.proceed() ```. And we can add our before services before this code execution and put after services after this code.   \n\nLet's see an instance.\n\n``` java \npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor{\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\t// Adding before service in here.\n\t\t\n\t\tinvocation.proceed();\n\t\t\n\t\t// Adding after service in here.\n\t\t// we can change the return value we want via below return codes.\n\t\t\n\t\treturn null;\n\t}\n\n}\n```\n\nIn above codes, we can see that we put the before services before the `proceed()` method and put the after services after it. and we can change the return value of the logic method.   \n\nSo now let us to see a full expample.\n\n``` java MyLogicInterface.java\npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tint add(int a, int b);\n}\n\n```\n\n``` java MyLogicClass.java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic int add(int a, int b) {\n\t\tSystem.out.println(String.format(\"The internal result of %s + %s is: %s\", a, b, a + b));\n\t\treturn a + b;\n\t}\n\n}\n```\nIn our logic class, we print the result value before the return of method.\n\n``` java MyAroundAdvice.java\npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor {\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\t// Adding before service\n\t\tmethodDescription(invocation);\n\n\t\tObject currentResult = invocation.proceed();\n\n\t\t// Adding after service.\n\t\tObject changedResult = changedReturnValue(invocation);\n\n\t\treturn changedResult == null ? currentResult : changedResult;\n\t}\n\n\tprivate void methodDescription(MethodInvocation invocation) {\n\t\tString methodName = invocation.getMethod().getName();\n\t\tObject[] args = invocation.getArguments();\n\n\t\tString description = String.format(\"Before Services : %s(%s, %s)\",\n\t\t\t\tmethodName, args[0], args[1]);\n\t\tSystem.out.println(description);\n\t}\n\n\tprivate Object changedReturnValue(MethodInvocation invocation) {\n\t\tObject[] args = invocation.getArguments();\n\t\tint secondParam = (int) args[1];\n\n\t\t// changed the return value to 0 when the second parameter is less than 0.\n\t\tif (secondParam < 0)\n\t\t\treturn 0;\n\n\t\treturn null;\n\t}\n\n}\n```\nIn this our around advice. we print the method description in our before service and changed the return value to 0 when the second parameter is less than 0 in after service.   \n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myAroundAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\nThe spring config xml is same with before except the interceptorNames.\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface logicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tint result1 = logicInterface.add(1, 10);\n\t\tSystem.out.println(String.format(\"After Advice - The result is: %s \\n\", result1));\n\t\t\n\t\tint result2 = logicInterface.add(1, -10);\n\t\tSystem.out.println(String.format(\"After Advice - The result is: %s\", result2));\n\t}\n\n}\n```\n\nYou will notice that we pass -10 to second parameter in second times method called. Let's see the result:    \n\n\tBefore Services : add(1, 10)\n\tThe internal result of 1 + 10 is: 11\n\tAfter Advice - The result is: 11 \n\n\tBefore Services : add(1, -10)\n\tThe internal result of 1 + -10 is: -9\n\tAfter Advice - The result is: 0\n\nYou see, the internal result is -9, but after service, the result is changed to 0. So the return value is changed by our `Around Advice`.\n\n***Note again:** The `Around Advice` can change the return value of business logic method, but `After Advice` cannot.*","source":"_posts/2015-06-08-spring-aop-around-advice.markdown","raw":"---\n\ntitle: \"Spring AOP - Around Advice\"\ndate: 2015-06-08 09:42:08 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n\nIn this blog, let us talk about `Around Advice`. There are some few points about it.   \n\n- `Around Advice` is combination of `Before Advice` and `After Advice`.\n- In a single `Around Advice` we can implement both *before* and *after* services.\n- **Note**, `Around Advice` is not given by *spring framework*, it is from *Open Source* implementation called `AOP` alliance.\n- `Around Advice` can be used by any framework which supports `AOP`.    \n- `Around Advice` can access the return value of business method and it can modify the value and it can return a different value back to the client, as return type is Object, but in the `After Advice` its not possible right, as its return type is void.\n<!-- more -->\n\nIn order to create `Around Advice`, we should implement an interface called `MethodInterceptor` and override the method called `invoke` which has a prarameter `MethodInvocation` type. We can use this parameter to invoke our business logic method like ``` methodInvoation.proceed() ```. And we can add our before services before this code execution and put after services after this code.   \n\nLet's see an instance.\n\n``` java \npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor{\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\t// Adding before service in here.\n\t\t\n\t\tinvocation.proceed();\n\t\t\n\t\t// Adding after service in here.\n\t\t// we can change the return value we want via below return codes.\n\t\t\n\t\treturn null;\n\t}\n\n}\n```\n\nIn above codes, we can see that we put the before services before the `proceed()` method and put the after services after it. and we can change the return value of the logic method.   \n\nSo now let us to see a full expample.\n\n``` java MyLogicInterface.java\npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tint add(int a, int b);\n}\n\n```\n\n``` java MyLogicClass.java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic int add(int a, int b) {\n\t\tSystem.out.println(String.format(\"The internal result of %s + %s is: %s\", a, b, a + b));\n\t\treturn a + b;\n\t}\n\n}\n```\nIn our logic class, we print the result value before the return of method.\n\n``` java MyAroundAdvice.java\npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor {\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\t// Adding before service\n\t\tmethodDescription(invocation);\n\n\t\tObject currentResult = invocation.proceed();\n\n\t\t// Adding after service.\n\t\tObject changedResult = changedReturnValue(invocation);\n\n\t\treturn changedResult == null ? currentResult : changedResult;\n\t}\n\n\tprivate void methodDescription(MethodInvocation invocation) {\n\t\tString methodName = invocation.getMethod().getName();\n\t\tObject[] args = invocation.getArguments();\n\n\t\tString description = String.format(\"Before Services : %s(%s, %s)\",\n\t\t\t\tmethodName, args[0], args[1]);\n\t\tSystem.out.println(description);\n\t}\n\n\tprivate Object changedReturnValue(MethodInvocation invocation) {\n\t\tObject[] args = invocation.getArguments();\n\t\tint secondParam = (int) args[1];\n\n\t\t// changed the return value to 0 when the second parameter is less than 0.\n\t\tif (secondParam < 0)\n\t\t\treturn 0;\n\n\t\treturn null;\n\t}\n\n}\n```\nIn this our around advice. we print the method description in our before service and changed the return value to 0 when the second parameter is less than 0 in after service.   \n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myAroundAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\nThe spring config xml is same with before except the interceptorNames.\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface logicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tint result1 = logicInterface.add(1, 10);\n\t\tSystem.out.println(String.format(\"After Advice - The result is: %s \\n\", result1));\n\t\t\n\t\tint result2 = logicInterface.add(1, -10);\n\t\tSystem.out.println(String.format(\"After Advice - The result is: %s\", result2));\n\t}\n\n}\n```\n\nYou will notice that we pass -10 to second parameter in second times method called. Let's see the result:    \n\n\tBefore Services : add(1, 10)\n\tThe internal result of 1 + 10 is: 11\n\tAfter Advice - The result is: 11 \n\n\tBefore Services : add(1, -10)\n\tThe internal result of 1 + -10 is: -9\n\tAfter Advice - The result is: 0\n\nYou see, the internal result is -9, but after service, the result is changed to 0. So the return value is changed by our `Around Advice`.\n\n***Note again:** The `Around Advice` can change the return value of business logic method, but `After Advice` cannot.*","slug":"2015-06-08-spring-aop-around-advice","published":1,"updated":"2023-09-02T16:46:31.041Z","_id":"clm27g4ol0035azv5goc5fdy9","layout":"post","photos":[],"link":"","content":"<p>In this blog, let us talk about <code>Around Advice</code>. There are some few points about it.   </p>\n<ul>\n<li><code>Around Advice</code> is combination of <code>Before Advice</code> and <code>After Advice</code>.</li>\n<li>In a single <code>Around Advice</code> we can implement both <em>before</em> and <em>after</em> services.</li>\n<li><strong>Note</strong>, <code>Around Advice</code> is not given by <em>spring framework</em>, it is from <em>Open Source</em> implementation called <code>AOP</code> alliance.</li>\n<li><code>Around Advice</code> can be used by any framework which supports <code>AOP</code>.    </li>\n<li><code>Around Advice</code> can access the return value of business method and it can modify the value and it can return a different value back to the client, as return type is Object, but in the <code>After Advice</code> its not possible right, as its return type is void.<span id=\"more\"></span></li>\n</ul>\n<p>In order to create <code>Around Advice</code>, we should implement an interface called <code>MethodInterceptor</code> and override the method called <code>invoke</code> which has a prarameter <code>MethodInvocation</code> type. We can use this parameter to invoke our business logic method like <code>methodInvoation.proceed()</code>. And we can add our before services before this code execution and put after services after this code.   </p>\n<p>Let’s see an instance.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding before service in here.</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tinvocation.proceed();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding after service in here.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// we can change the return value we want via below return codes.</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In above codes, we can see that we put the before services before the <code>proceed()</code> method and put the after services after it. and we can change the return value of the logic method.   </p>\n<p>So now let us to see a full expample.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogicInterface.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyLogicClass.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;The internal result of %s + %s is: %s&quot;</span>, a, b, a + b));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our logic class, we print the result value before the return of method.</p>\n<figure class=\"highlight java\"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding before service</span></span><br><span class=\"line\">\t\tmethodDescription(invocation);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">currentResult</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding after service.</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">changedResult</span> <span class=\"operator\">=</span> changedReturnValue(invocation);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> changedResult == <span class=\"literal\">null</span> ? currentResult : changedResult;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodDescription</span><span class=\"params\">(MethodInvocation invocation)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> invocation.getMethod().getName();</span><br><span class=\"line\">\t\tObject[] args = invocation.getArguments();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">description</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;Before Services : %s(%s, %s)&quot;</span>,</span><br><span class=\"line\">\t\t\t\tmethodName, args[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\tSystem.out.println(description);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object <span class=\"title function_\">changedReturnValue</span><span class=\"params\">(MethodInvocation invocation)</span> &#123;</span><br><span class=\"line\">\t\tObject[] args = invocation.getArguments();</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">secondParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) args[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// changed the return value to 0 when the second parameter is less than 0.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (secondParam &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this our around advice. we print the method description in our before service and changed the return value to 0 when the second parameter is less than 0 in after service.   </p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;proxyInterfaces&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myAroundAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The spring config xml is same with before except the interceptorNames.</p>\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">logicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result1</span> <span class=\"operator\">=</span> logicInterface.add(<span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;After Advice - The result is: %s \\n&quot;</span>, result1));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result2</span> <span class=\"operator\">=</span> logicInterface.add(<span class=\"number\">1</span>, -<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;After Advice - The result is: %s&quot;</span>, result2));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that we pass -10 to second parameter in second times method called. Let’s see the result:    </p>\n<pre><code>Before Services : add(1, 10)\nThe internal result of 1 + 10 is: 11\nAfter Advice - The result is: 11 \n\nBefore Services : add(1, -10)\nThe internal result of 1 + -10 is: -9\nAfter Advice - The result is: 0\n</code></pre>\n<p>You see, the internal result is -9, but after service, the result is changed to 0. So the return value is changed by our <code>Around Advice</code>.</p>\n<p><em><strong>Note again:</strong> The <code>Around Advice</code> can change the return value of business logic method, but <code>After Advice</code> cannot.</em></p>\n","site":{"data":{}},"excerpt":"<p>In this blog, let us talk about <code>Around Advice</code>. There are some few points about it.   </p>\n<ul>\n<li><code>Around Advice</code> is combination of <code>Before Advice</code> and <code>After Advice</code>.</li>\n<li>In a single <code>Around Advice</code> we can implement both <em>before</em> and <em>after</em> services.</li>\n<li><strong>Note</strong>, <code>Around Advice</code> is not given by <em>spring framework</em>, it is from <em>Open Source</em> implementation called <code>AOP</code> alliance.</li>\n<li><code>Around Advice</code> can be used by any framework which supports <code>AOP</code>.    </li>\n<li><code>Around Advice</code> can access the return value of business method and it can modify the value and it can return a different value back to the client, as return type is Object, but in the <code>After Advice</code> its not possible right, as its return type is void.","more":"</li>\n</ul>\n<p>In order to create <code>Around Advice</code>, we should implement an interface called <code>MethodInterceptor</code> and override the method called <code>invoke</code> which has a prarameter <code>MethodInvocation</code> type. We can use this parameter to invoke our business logic method like <code>methodInvoation.proceed()</code>. And we can add our before services before this code execution and put after services after this code.   </p>\n<p>Let’s see an instance.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding before service in here.</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tinvocation.proceed();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding after service in here.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// we can change the return value we want via below return codes.</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In above codes, we can see that we put the before services before the <code>proceed()</code> method and put the after services after it. and we can change the return value of the logic method.   </p>\n<p>So now let us to see a full expample.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogicInterface.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyLogicClass.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;The internal result of %s + %s is: %s&quot;</span>, a, b, a + b));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our logic class, we print the result value before the return of method.</p>\n<figure class=\"highlight java\"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding before service</span></span><br><span class=\"line\">\t\tmethodDescription(invocation);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">currentResult</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Adding after service.</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">changedResult</span> <span class=\"operator\">=</span> changedReturnValue(invocation);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> changedResult == <span class=\"literal\">null</span> ? currentResult : changedResult;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodDescription</span><span class=\"params\">(MethodInvocation invocation)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> invocation.getMethod().getName();</span><br><span class=\"line\">\t\tObject[] args = invocation.getArguments();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">description</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;Before Services : %s(%s, %s)&quot;</span>,</span><br><span class=\"line\">\t\t\t\tmethodName, args[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\tSystem.out.println(description);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object <span class=\"title function_\">changedReturnValue</span><span class=\"params\">(MethodInvocation invocation)</span> &#123;</span><br><span class=\"line\">\t\tObject[] args = invocation.getArguments();</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">secondParam</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) args[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// changed the return value to 0 when the second parameter is less than 0.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (secondParam &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In this our around advice. we print the method description in our before service and changed the return value to 0 when the second parameter is less than 0 in after service.   </p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;proxyInterfaces&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myAroundAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The spring config xml is same with before except the interceptorNames.</p>\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">logicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result1</span> <span class=\"operator\">=</span> logicInterface.add(<span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;After Advice - The result is: %s \\n&quot;</span>, result1));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result2</span> <span class=\"operator\">=</span> logicInterface.add(<span class=\"number\">1</span>, -<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;After Advice - The result is: %s&quot;</span>, result2));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You will notice that we pass -10 to second parameter in second times method called. Let’s see the result:    </p>\n<pre><code>Before Services : add(1, 10)\nThe internal result of 1 + 10 is: 11\nAfter Advice - The result is: 11 \n\nBefore Services : add(1, -10)\nThe internal result of 1 + -10 is: -9\nAfter Advice - The result is: 0\n</code></pre>\n<p>You see, the internal result is -9, but after service, the result is changed to 0. So the return value is changed by our <code>Around Advice</code>.</p>\n<p><em><strong>Note again:</strong> The <code>Around Advice</code> can change the return value of business logic method, but <code>After Advice</code> cannot.</em></p>"},{"title":"Spring AOP - Throws Advice","date":"2015-06-08T06:39:43.000Z","comments":1,"_content":"\nIn this type of Advice. This service executed when the logic method throws exceptions. To create Throws Advice, we should implement the interface called `ThrowsAdvice`.    \n\n`ThrowsAdvice` is provided by _org.springframework.aop.*_ package. But it has not any method we need to override.  \n<!-- more --> \n\nWhile creating a ThrowsAdvice class in spring AOP, we should implement our services in a method called `afterThrowing()` with 1 or 4 parameter(s). In fact, this method not given in `ThrowsAdvice` interface, but we should implement our services in afterThrowing() method only because when ever an Exception is occurred in the business logic then the IOC container internally calls afterThrowing() method to apply the services.   \n\nLet's see the `afterThrowing()` method.\n\n``` java \npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.ThrowsAdvice;\n\npublic class MyThrowsAdvice implements ThrowsAdvice {\n\n\t// just exception\n\tpublic void afterThrowing(Exception e) {\n\n\t}\n\t\n\t// specific null pointer exception\n\tpublic void afterThrowing(NullPointerException e) {\n\n\t}\n\n\t// with 4 parameters\n\tpublic void afterThrowing(Method method, Object[] args, Object target, Exception e) {\n\n\t}\n}\n```\nIf we write multiple afterThrowing methods in a class, then the `IOC` container will give the preference as below:\n\nSpecific exception > 4 parameters > just exception.   \n\nLet's take a practice.\n\n``` java MyLogicInterface.java\npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tvoid divide(int a, int b);\n}\n```\n\n``` java MyLogicClass.java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic void divide(int a, int b) {\n\t\tSystem.out.println(String.format(\"%s divide %s is %s\\n\", a, b, a / b));\n\t}\n\n}\n```\nIn our logic class. We print the message about one param divided by another one.\n\n``` java MyThrowsAdvice.java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.ThrowsAdvice;\n\npublic class MyThrowsAdvice implements ThrowsAdvice {\n\n\t// just exception\n\tpublic void afterThrowing(Exception e) {\n\t\tSystem.out.println(\"Exception: \" + e.getMessage());\n\t}\n\t\n\t// specific exception\n\tpublic void afterThrowing(ArithmeticException e) {\n\t\tSystem.out.println(\"Specific ArithmeticException: \" + e.getMessage());\n\t}\n\n\t// with 4 parameters\n\tpublic void afterThrowing(Method method, Object[] args, Object target, Exception e) {\n\t\tSystem.out.println(\"With 4 parameters exception: \" + e.getMessage());\n\t}\n}\n```\n\nThere have three implementations of afterThrowing method. And also we can add our handle exception logic in them.   \n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myThrowsAdvice\" class=\"spring.test.aop.MyThrowsAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myThrowsAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface myLogicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tmyLogicInterface.divide(10, 5);\n\t\t\n\t\tmyLogicInterface.divide(10, 0);\n\t}\n\n}\n```\nIn our client, we can see the divide method is called twice. The First one will not throw exception, but second will throw ArithmeticException.    \n\nLet's see the result of execution:\n\n\t10 divide 5 is 2\n\n\tException in thread \"main\" Specific ArithmeticException: / by zero\n\t\t\nWe can see the specific ArithmeticException is executed. Okay, let us remove the specific exception method and run it again.\n\n\t10 divide 5 is 2\n\n\tWith 4 parameters exception: / by zero\n\t\nThe afterThrowing method with 4 parameters has been executed. Keep remove this method and run it.\n\n\t10 divide 5 is 2\n\n\tException: / by zero\n\t\nSo there is only one afterThrowing method is executed when there have multiple implementation.\n","source":"_posts/2015-06-08-spring-aop-throws-advice.markdown","raw":"---\n\ntitle: \"Spring AOP - Throws Advice\"\ndate: 2015-06-08 14:39:43 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n\nIn this type of Advice. This service executed when the logic method throws exceptions. To create Throws Advice, we should implement the interface called `ThrowsAdvice`.    \n\n`ThrowsAdvice` is provided by _org.springframework.aop.*_ package. But it has not any method we need to override.  \n<!-- more --> \n\nWhile creating a ThrowsAdvice class in spring AOP, we should implement our services in a method called `afterThrowing()` with 1 or 4 parameter(s). In fact, this method not given in `ThrowsAdvice` interface, but we should implement our services in afterThrowing() method only because when ever an Exception is occurred in the business logic then the IOC container internally calls afterThrowing() method to apply the services.   \n\nLet's see the `afterThrowing()` method.\n\n``` java \npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.ThrowsAdvice;\n\npublic class MyThrowsAdvice implements ThrowsAdvice {\n\n\t// just exception\n\tpublic void afterThrowing(Exception e) {\n\n\t}\n\t\n\t// specific null pointer exception\n\tpublic void afterThrowing(NullPointerException e) {\n\n\t}\n\n\t// with 4 parameters\n\tpublic void afterThrowing(Method method, Object[] args, Object target, Exception e) {\n\n\t}\n}\n```\nIf we write multiple afterThrowing methods in a class, then the `IOC` container will give the preference as below:\n\nSpecific exception > 4 parameters > just exception.   \n\nLet's take a practice.\n\n``` java MyLogicInterface.java\npackage spring.test.aop;\n\npublic interface MyLogicInterface {\n\tvoid divide(int a, int b);\n}\n```\n\n``` java MyLogicClass.java\npackage spring.test.aop;\n\npublic class MyLogicClass implements MyLogicInterface {\n\n\t@Override\n\tpublic void divide(int a, int b) {\n\t\tSystem.out.println(String.format(\"%s divide %s is %s\\n\", a, b, a / b));\n\t}\n\n}\n```\nIn our logic class. We print the message about one param divided by another one.\n\n``` java MyThrowsAdvice.java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.ThrowsAdvice;\n\npublic class MyThrowsAdvice implements ThrowsAdvice {\n\n\t// just exception\n\tpublic void afterThrowing(Exception e) {\n\t\tSystem.out.println(\"Exception: \" + e.getMessage());\n\t}\n\t\n\t// specific exception\n\tpublic void afterThrowing(ArithmeticException e) {\n\t\tSystem.out.println(\"Specific ArithmeticException: \" + e.getMessage());\n\t}\n\n\t// with 4 parameters\n\tpublic void afterThrowing(Method method, Object[] args, Object target, Exception e) {\n\t\tSystem.out.println(\"With 4 parameters exception: \" + e.getMessage());\n\t}\n}\n```\n\nThere have three implementations of afterThrowing method. And also we can add our handle exception logic in them.   \n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myThrowsAdvice\" class=\"spring.test.aop.MyThrowsAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"proxyInterfaces\" value=\"spring.test.aop.MyLogicInterface\"/>\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myThrowsAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\tMyLogicInterface myLogicInterface = (MyLogicInterface)applicationContext.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tmyLogicInterface.divide(10, 5);\n\t\t\n\t\tmyLogicInterface.divide(10, 0);\n\t}\n\n}\n```\nIn our client, we can see the divide method is called twice. The First one will not throw exception, but second will throw ArithmeticException.    \n\nLet's see the result of execution:\n\n\t10 divide 5 is 2\n\n\tException in thread \"main\" Specific ArithmeticException: / by zero\n\t\t\nWe can see the specific ArithmeticException is executed. Okay, let us remove the specific exception method and run it again.\n\n\t10 divide 5 is 2\n\n\tWith 4 parameters exception: / by zero\n\t\nThe afterThrowing method with 4 parameters has been executed. Keep remove this method and run it.\n\n\t10 divide 5 is 2\n\n\tException: / by zero\n\t\nSo there is only one afterThrowing method is executed when there have multiple implementation.\n","slug":"2015-06-08-spring-aop-throws-advice","published":1,"updated":"2023-09-02T16:46:34.641Z","_id":"clm27g4om0037azv51mri116c","layout":"post","photos":[],"link":"","content":"<p>In this type of Advice. This service executed when the logic method throws exceptions. To create Throws Advice, we should implement the interface called <code>ThrowsAdvice</code>.    </p>\n<p><code>ThrowsAdvice</code> is provided by <em>org.springframework.aop.*</em> package. But it has not any method we need to override.  </p>\n<span id=\"more\"></span> \n\n<p>While creating a ThrowsAdvice class in spring AOP, we should implement our services in a method called <code>afterThrowing()</code> with 1 or 4 parameter(s). In fact, this method not given in <code>ThrowsAdvice</code> interface, but we should implement our services in afterThrowing() method only because when ever an Exception is occurred in the business logic then the IOC container internally calls afterThrowing() method to apply the services.   </p>\n<p>Let’s see the <code>afterThrowing()</code> method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThrowsAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThrowsAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// just exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// specific null pointer exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(NullPointerException e)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// with 4 parameters</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Method method, Object[] args, Object target, Exception e)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If we write multiple afterThrowing methods in a class, then the <code>IOC</code> container will give the preference as below:</p>\n<p>Specific exception &gt; 4 parameters &gt; just exception.   </p>\n<p>Let’s take a practice.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogicInterface.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyLogicClass.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;%s divide %s is %s\\n&quot;</span>, a, b, a / b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our logic class. We print the message about one param divided by another one.</p>\n<figure class=\"highlight java\"><figcaption><span>MyThrowsAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThrowsAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThrowsAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// just exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// specific exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(ArithmeticException e)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Specific ArithmeticException: &quot;</span> + e.getMessage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// with 4 parameters</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Method method, Object[] args, Object target, Exception e)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;With 4 parameters exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There have three implementations of afterThrowing method. And also we can add our handle exception logic in them.   </p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myThrowsAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyThrowsAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;proxyInterfaces&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myThrowsAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">myLogicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.divide(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our client, we can see the divide method is called twice. The First one will not throw exception, but second will throw ArithmeticException.    </p>\n<p>Let’s see the result of execution:</p>\n<pre><code>10 divide 5 is 2\n\nException in thread &quot;main&quot; Specific ArithmeticException: / by zero\n    \n</code></pre>\n<p>We can see the specific ArithmeticException is executed. Okay, let us remove the specific exception method and run it again.</p>\n<pre><code>10 divide 5 is 2\n\nWith 4 parameters exception: / by zero\n</code></pre>\n<p>The afterThrowing method with 4 parameters has been executed. Keep remove this method and run it.</p>\n<pre><code>10 divide 5 is 2\n\nException: / by zero\n</code></pre>\n<p>So there is only one afterThrowing method is executed when there have multiple implementation.</p>\n","site":{"data":{}},"excerpt":"<p>In this type of Advice. This service executed when the logic method throws exceptions. To create Throws Advice, we should implement the interface called <code>ThrowsAdvice</code>.    </p>\n<p><code>ThrowsAdvice</code> is provided by <em>org.springframework.aop.*</em> package. But it has not any method we need to override.  </p>","more":"<p>While creating a ThrowsAdvice class in spring AOP, we should implement our services in a method called <code>afterThrowing()</code> with 1 or 4 parameter(s). In fact, this method not given in <code>ThrowsAdvice</code> interface, but we should implement our services in afterThrowing() method only because when ever an Exception is occurred in the business logic then the IOC container internally calls afterThrowing() method to apply the services.   </p>\n<p>Let’s see the <code>afterThrowing()</code> method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThrowsAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThrowsAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// just exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// specific null pointer exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(NullPointerException e)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// with 4 parameters</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Method method, Object[] args, Object target, Exception e)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If we write multiple afterThrowing methods in a class, then the <code>IOC</code> container will give the preference as below:</p>\n<p>Specific exception &gt; 4 parameters &gt; just exception.   </p>\n<p>Let’s take a practice.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogicInterface.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyLogicClass.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyLogicInterface</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">divide</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;%s divide %s is %s\\n&quot;</span>, a, b, a / b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our logic class. We print the message about one param divided by another one.</p>\n<figure class=\"highlight java\"><figcaption><span>MyThrowsAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyThrowsAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThrowsAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// just exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Exception e)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// specific exception</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(ArithmeticException e)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Specific ArithmeticException: &quot;</span> + e.getMessage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// with 4 parameters</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Method method, Object[] args, Object target, Exception e)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;With 4 parameters exception: &quot;</span> + e.getMessage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There have three implementations of afterThrowing method. And also we can add our handle exception logic in them.   </p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myThrowsAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyThrowsAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;proxyInterfaces&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myThrowsAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicInterface</span> <span class=\"variable\">myLogicInterface</span> <span class=\"operator\">=</span> (MyLogicInterface)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.divide(<span class=\"number\">10</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tmyLogicInterface.divide(<span class=\"number\">10</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our client, we can see the divide method is called twice. The First one will not throw exception, but second will throw ArithmeticException.    </p>\n<p>Let’s see the result of execution:</p>\n<pre><code>10 divide 5 is 2\n\nException in thread &quot;main&quot; Specific ArithmeticException: / by zero\n    \n</code></pre>\n<p>We can see the specific ArithmeticException is executed. Okay, let us remove the specific exception method and run it again.</p>\n<pre><code>10 divide 5 is 2\n\nWith 4 parameters exception: / by zero\n</code></pre>\n<p>The afterThrowing method with 4 parameters has been executed. Keep remove this method and run it.</p>\n<pre><code>10 divide 5 is 2\n\nException: / by zero\n</code></pre>\n<p>So there is only one afterThrowing method is executed when there have multiple implementation.</p>"},{"title":"Spring AOP - Join Point","date":"2015-06-09T09:19:23.000Z","comments":1,"_content":"\nIn Spring AOP, while we create business logic of the method we usually need to inject the services at different places or points. So we call these places or points as `JoinPoint`.   \n\nAt a join point place services will be injected at run time. And while executing business logic of method, the services can be injected in following 3 join points.\n\n- Before business logic of method starts\n- After business logic of method complete\n- If business logic of method throws exception at run time.   \n\nIn a `join point`, many `Aspect`s(just name, not implementation) can be injected. Actually the `Advice`(the implementation of Aspect) is injected.","source":"_posts/2015-06-09-spring-aop-joint-point.markdown","raw":"---\n\ntitle: \"Spring AOP - Join Point\"\ndate: 2015-06-09 17:19:23 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n\nIn Spring AOP, while we create business logic of the method we usually need to inject the services at different places or points. So we call these places or points as `JoinPoint`.   \n\nAt a join point place services will be injected at run time. And while executing business logic of method, the services can be injected in following 3 join points.\n\n- Before business logic of method starts\n- After business logic of method complete\n- If business logic of method throws exception at run time.   \n\nIn a `join point`, many `Aspect`s(just name, not implementation) can be injected. Actually the `Advice`(the implementation of Aspect) is injected.","slug":"2015-06-09-spring-aop-joint-point","published":1,"updated":"2023-09-02T17:32:50.927Z","_id":"clm27g4on0038azv5fo4pbfnm","layout":"post","photos":[],"link":"","content":"<p>In Spring AOP, while we create business logic of the method we usually need to inject the services at different places or points. So we call these places or points as <code>JoinPoint</code>.   </p>\n<p>At a join point place services will be injected at run time. And while executing business logic of method, the services can be injected in following 3 join points.</p>\n<ul>\n<li>Before business logic of method starts</li>\n<li>After business logic of method complete</li>\n<li>If business logic of method throws exception at run time.</li>\n</ul>\n<p>In a <code>join point</code>, many <code>Aspect</code>s(just name, not implementation) can be injected. Actually the <code>Advice</code>(the implementation of Aspect) is injected.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In Spring AOP, while we create business logic of the method we usually need to inject the services at different places or points. So we call these places or points as <code>JoinPoint</code>.   </p>\n<p>At a join point place services will be injected at run time. And while executing business logic of method, the services can be injected in following 3 join points.</p>\n<ul>\n<li>Before business logic of method starts</li>\n<li>After business logic of method complete</li>\n<li>If business logic of method throws exception at run time.</li>\n</ul>\n<p>In a <code>join point</code>, many <code>Aspect</code>s(just name, not implementation) can be injected. Actually the <code>Advice</code>(the implementation of Aspect) is injected.</p>\n"},{"title":"Spring AOP - Pointcut","date":"2015-06-10T03:19:44.000Z","comments":1,"_content":"\nWhat is `Pointcut` of Spring AOP? let's describe it. A `Pointcut` defines what `Advice`s are required at what `Join Point`s. In fact all business logic methods of the class are not required all services, that means each business logic method might require different service even some methods don't require. So Pointcut can informs IOC container that what business methods of a class needs what type of services.    \n<!-- more -->\nThere are two types of AOP:\n\n- StaticMethodMatcherPointcut\n- DynamicMethodMatcherPointcut\n\nPointcut verifys whether a particular method of particular class is eligible for getting the advice or not. Spring AOP has two static pointcut class.\n\n- NameMatchMethodPointcut\n- RegexpMethodPointcutAdvisor\n\nIn above two static pointcut class, they given by spring AOP framework. And they only verify whether the method name is matching with given condition or not, but they doesn't check whether the class names are matching or not. If you want to verify the class name, you can implement `StaticMethodMatcherPointcut` abstract class and override the `getClassFilter()`, `matches()` methods.\n\nThe dynamic pointcut is almost same with static pointcut, the only difference is that the dynamic pointcut can verify the arguments of the method at runtime, but static pointcut couldn't.","source":"_posts/2015-06-10-spring-aop-pointcut.markdown","raw":"---\n\ntitle: \"Spring AOP - Pointcut\"\ndate: 2015-06-10 11:19:44 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n\nWhat is `Pointcut` of Spring AOP? let's describe it. A `Pointcut` defines what `Advice`s are required at what `Join Point`s. In fact all business logic methods of the class are not required all services, that means each business logic method might require different service even some methods don't require. So Pointcut can informs IOC container that what business methods of a class needs what type of services.    \n<!-- more -->\nThere are two types of AOP:\n\n- StaticMethodMatcherPointcut\n- DynamicMethodMatcherPointcut\n\nPointcut verifys whether a particular method of particular class is eligible for getting the advice or not. Spring AOP has two static pointcut class.\n\n- NameMatchMethodPointcut\n- RegexpMethodPointcutAdvisor\n\nIn above two static pointcut class, they given by spring AOP framework. And they only verify whether the method name is matching with given condition or not, but they doesn't check whether the class names are matching or not. If you want to verify the class name, you can implement `StaticMethodMatcherPointcut` abstract class and override the `getClassFilter()`, `matches()` methods.\n\nThe dynamic pointcut is almost same with static pointcut, the only difference is that the dynamic pointcut can verify the arguments of the method at runtime, but static pointcut couldn't.","slug":"2015-06-10-spring-aop-pointcut","published":1,"updated":"2023-09-02T17:32:52.078Z","_id":"clm27g4on003aazv5ev6sal7f","layout":"post","photos":[],"link":"","content":"<p>What is <code>Pointcut</code> of Spring AOP? let’s describe it. A <code>Pointcut</code> defines what <code>Advice</code>s are required at what <code>Join Point</code>s. In fact all business logic methods of the class are not required all services, that means each business logic method might require different service even some methods don’t require. So Pointcut can informs IOC container that what business methods of a class needs what type of services.    </p>\n<span id=\"more\"></span>\n<p>There are two types of AOP:</p>\n<ul>\n<li>StaticMethodMatcherPointcut</li>\n<li>DynamicMethodMatcherPointcut</li>\n</ul>\n<p>Pointcut verifys whether a particular method of particular class is eligible for getting the advice or not. Spring AOP has two static pointcut class.</p>\n<ul>\n<li>NameMatchMethodPointcut</li>\n<li>RegexpMethodPointcutAdvisor</li>\n</ul>\n<p>In above two static pointcut class, they given by spring AOP framework. And they only verify whether the method name is matching with given condition or not, but they doesn’t check whether the class names are matching or not. If you want to verify the class name, you can implement <code>StaticMethodMatcherPointcut</code> abstract class and override the <code>getClassFilter()</code>, <code>matches()</code> methods.</p>\n<p>The dynamic pointcut is almost same with static pointcut, the only difference is that the dynamic pointcut can verify the arguments of the method at runtime, but static pointcut couldn’t.</p>\n","site":{"data":{}},"excerpt":"<p>What is <code>Pointcut</code> of Spring AOP? let’s describe it. A <code>Pointcut</code> defines what <code>Advice</code>s are required at what <code>Join Point</code>s. In fact all business logic methods of the class are not required all services, that means each business logic method might require different service even some methods don’t require. So Pointcut can informs IOC container that what business methods of a class needs what type of services.    </p>","more":"<p>There are two types of AOP:</p>\n<ul>\n<li>StaticMethodMatcherPointcut</li>\n<li>DynamicMethodMatcherPointcut</li>\n</ul>\n<p>Pointcut verifys whether a particular method of particular class is eligible for getting the advice or not. Spring AOP has two static pointcut class.</p>\n<ul>\n<li>NameMatchMethodPointcut</li>\n<li>RegexpMethodPointcutAdvisor</li>\n</ul>\n<p>In above two static pointcut class, they given by spring AOP framework. And they only verify whether the method name is matching with given condition or not, but they doesn’t check whether the class names are matching or not. If you want to verify the class name, you can implement <code>StaticMethodMatcherPointcut</code> abstract class and override the <code>getClassFilter()</code>, <code>matches()</code> methods.</p>\n<p>The dynamic pointcut is almost same with static pointcut, the only difference is that the dynamic pointcut can verify the arguments of the method at runtime, but static pointcut couldn’t.</p>"},{"title":"Spring AOP - Static Pointcut","date":"2015-06-11T08:08:48.000Z","comments":1,"_content":"Let's first to see the three very technical terms as below.\n\n- Adivce - Indicate the action to take either before or after the method execution.\n- Pointcut - Indicate which method should be intercept, by method name or regular expression pattern.\n- Advisor - Group ‘Advice’ and ‘Pointcut’ into a single unit, and pass it to a proxy factory object\n<!-- more -->\n### No pointcut example\n\n``` java MyLogicClass\npackage spring.test.aop;\n\npublic class MyLogicClass {\n\n\tpublic void logicMethodOne() {\n\t\tSystem.out.println(\"This is from logicMethodOne\");\n\t}\n\t\n\tpublic void logicMethodTwo() {\n\t\tSystem.out.println(\"This is from logicMethodTwo\");\n\t}\n\t\n\tpublic void testLogic() {\n\t\tSystem.out.println(\"This is from testLogic\");\n\t}\n}\n\n```\n\n``` java MyAroundAdvice.java\npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor {\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\tSystem.out.println(\"Before method execuation\");\n\n\t\tObject result = invocation.proceed();\n\t\t\n\t\tSystem.out.println(\"After method execuation\");\n\n\t\treturn result;\n\t}\n\n}\n\n```\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\t\n\t\tMyLogicClass logicClass = (MyLogicClass)applicationContext.getBean(\"proxyFactoryBean\");\n\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tlogicClass.logicMethodOne();\n\t\t\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tlogicClass.logicMethodTwo();\n\t\t\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tlogicClass.testLogic();\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\n\t}\n\n}\n```\n\n``` xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myAroundAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\n\n``` text output\n--------------------\n\nBefore method execuation\nThis is from logicMethodOne\nAfter method execuation\n\n--------------------\n\nBefore method execuation\nThis is from logicMethodTwo\nAfter method execuation\n\n--------------------\n\nBefore method execuation\nThis is from testLogic\nAfter method execuation\n\n--------------------\n```\n\nIn above example, all logic methods of the class has been intercepted due to the application doesn't use the pointcut to specific.\n\n### Name match example\nAnd now, we just want to intercept the method *testLogic*, so we need to create **NameMatchMethodPointcut** bean in spring config xml. and put the method name you want to intercept to the **mappedName** property value.\n\n``` xml\n<bean id=\"nameMatchPointcut\" class=\"org.springframework.aop.support.NameMatchMethodPointcut\">\n\t\t<property name=\"mappedName\" value=\"testLogic\"/>\n</bean>\n```\n\nAnd also you can mapped multiple methods with **mappedNames**, like below.\n\n``` xml\n<bean id=\"nameMatchPointcut\" class=\"org.springframework.aop.support.NameMatchMethodPointcut\">\n\t\t<property name=\"mappedNames\">\n\t\t\t<list>\n\t\t\t\t<value>logicMethodOne</value>\n\t\t\t\t<value>logicMethodTwo</value>\n\t\t\t</list>\n\t\t</property>\n</bean>\n```\n\n\nThen create **DefaultPointcutAdvisor** bean to group and associate the pointcut and advice.\n\n``` xml\n<bean id=\"myPointcutAdvisor\" class=\"org.springframework.aop.support.DefaultPointcutAdvisor\">\n\t\t<property name=\"pointcut\" ref=\"nameMatchPointcut\"/>\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n</bean>\n```\n\nReplace the **interceptorNames** of **ProxyFactoryBean** with the new Advisor.\n\n``` xml\n<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myPointcutAdvisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n</bean>\n```\n\nIt's done, let's see the full spring config file and output.\n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"nameMatchPointcut\" class=\"org.springframework.aop.support.NameMatchMethodPointcut\">\n\t\t<property name=\"mappedName\" value=\"testLogic\"/>\n\t\t<!-- <property name=\"mappedNames\">\n\t\t\t<list>\n\t\t\t\t<value>logicMethodOne</value>\n\t\t\t\t<value>logicMethodTwo</value>\n\t\t\t</list>\n\t\t</property> -->\n\t</bean>\n\t\n\t<bean id=\"myPointcutAdvisor\" class=\"org.springframework.aop.support.DefaultPointcutAdvisor\">\n\t\t<property name=\"pointcut\" ref=\"nameMatchPointcut\"/>\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n\t</bean>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myPointcutAdvisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\n\n``` text output\n--------------------\n\nThis is from logicMethodOne\n\n--------------------\n\nThis is from logicMethodTwo\n\n--------------------\n\nBefore method execuation\nThis is from testLogic\nAfter method execuation\n\n--------------------\n```\n### Regular expression example\nAlso we can use regular expression to match methods which should be intercepted. Create **RegexpMethodPointcutAdvisor** bean and set the *pattern* property value with regular expression and combine with advice.\n\n``` xml \n<bean id=\"regexPointcutAdvisor\" class=\"org.springframework.aop.support.RegexpMethodPointcutAdvisor\">\n\t\t<property name=\"pattern\" value=\".*Method.*\"/>\n\t\t\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n</bean>\n```\nAnd you can specific multiple patterns with *patterns* property.\n\n``` xml \n<bean id=\"regexPointcutAdvisor\" class=\"org.springframework.aop.support.RegexpMethodPointcutAdvisor\">\n\t\t<property name=\"patterns\">\n\t\t\t<list>\n\t\t\t\t<value>.*Method.*</value>\n\t\t\t</list>\n\t\t</property>\n\t\t\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n</bean>\n```\nFinally pass the advisor to the **ProxyFactoryBean**.\n\n``` xml\n<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>regexPointcutAdvisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n</bean>\n```\n\n``` text output\n--------------------\n\nBefore method execuation\nThis is from logicMethodOne\nAfter method execuation\n\n--------------------\n\nBefore method execuation\nThis is from logicMethodTwo\nAfter method execuation\n\n--------------------\n\nThis is from testLogic\n\n--------------------\n```\n\nIn practice, you can use it to manage DAO layer, where you can declare “.\\*DAO.*” to intercept all your DAO classes to support transaction.","source":"_posts/2015-06-11-spring-aop-static-pointcut.markdown","raw":"---\n\ntitle: \"Spring AOP - Static Pointcut\"\ndate: 2015-06-11 16:08:48 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\nLet's first to see the three very technical terms as below.\n\n- Adivce - Indicate the action to take either before or after the method execution.\n- Pointcut - Indicate which method should be intercept, by method name or regular expression pattern.\n- Advisor - Group ‘Advice’ and ‘Pointcut’ into a single unit, and pass it to a proxy factory object\n<!-- more -->\n### No pointcut example\n\n``` java MyLogicClass\npackage spring.test.aop;\n\npublic class MyLogicClass {\n\n\tpublic void logicMethodOne() {\n\t\tSystem.out.println(\"This is from logicMethodOne\");\n\t}\n\t\n\tpublic void logicMethodTwo() {\n\t\tSystem.out.println(\"This is from logicMethodTwo\");\n\t}\n\t\n\tpublic void testLogic() {\n\t\tSystem.out.println(\"This is from testLogic\");\n\t}\n}\n\n```\n\n``` java MyAroundAdvice.java\npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor {\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\tSystem.out.println(\"Before method execuation\");\n\n\t\tObject result = invocation.proceed();\n\t\t\n\t\tSystem.out.println(\"After method execuation\");\n\n\t\treturn result;\n\t}\n\n}\n\n```\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext applicationContext;\n\n\tpublic static void main(String[] args) {\n\n\t\tapplicationContext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\t\n\t\tMyLogicClass logicClass = (MyLogicClass)applicationContext.getBean(\"proxyFactoryBean\");\n\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tlogicClass.logicMethodOne();\n\t\t\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tlogicClass.logicMethodTwo();\n\t\t\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tlogicClass.testLogic();\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\n\t}\n\n}\n```\n\n``` xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myAroundAdvice</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\n\n``` text output\n--------------------\n\nBefore method execuation\nThis is from logicMethodOne\nAfter method execuation\n\n--------------------\n\nBefore method execuation\nThis is from logicMethodTwo\nAfter method execuation\n\n--------------------\n\nBefore method execuation\nThis is from testLogic\nAfter method execuation\n\n--------------------\n```\n\nIn above example, all logic methods of the class has been intercepted due to the application doesn't use the pointcut to specific.\n\n### Name match example\nAnd now, we just want to intercept the method *testLogic*, so we need to create **NameMatchMethodPointcut** bean in spring config xml. and put the method name you want to intercept to the **mappedName** property value.\n\n``` xml\n<bean id=\"nameMatchPointcut\" class=\"org.springframework.aop.support.NameMatchMethodPointcut\">\n\t\t<property name=\"mappedName\" value=\"testLogic\"/>\n</bean>\n```\n\nAnd also you can mapped multiple methods with **mappedNames**, like below.\n\n``` xml\n<bean id=\"nameMatchPointcut\" class=\"org.springframework.aop.support.NameMatchMethodPointcut\">\n\t\t<property name=\"mappedNames\">\n\t\t\t<list>\n\t\t\t\t<value>logicMethodOne</value>\n\t\t\t\t<value>logicMethodTwo</value>\n\t\t\t</list>\n\t\t</property>\n</bean>\n```\n\n\nThen create **DefaultPointcutAdvisor** bean to group and associate the pointcut and advice.\n\n``` xml\n<bean id=\"myPointcutAdvisor\" class=\"org.springframework.aop.support.DefaultPointcutAdvisor\">\n\t\t<property name=\"pointcut\" ref=\"nameMatchPointcut\"/>\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n</bean>\n```\n\nReplace the **interceptorNames** of **ProxyFactoryBean** with the new Advisor.\n\n``` xml\n<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myPointcutAdvisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n</bean>\n```\n\nIt's done, let's see the full spring config file and output.\n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\"/>\n\t\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\"/>\n\t\n\t<bean id=\"nameMatchPointcut\" class=\"org.springframework.aop.support.NameMatchMethodPointcut\">\n\t\t<property name=\"mappedName\" value=\"testLogic\"/>\n\t\t<!-- <property name=\"mappedNames\">\n\t\t\t<list>\n\t\t\t\t<value>logicMethodOne</value>\n\t\t\t\t<value>logicMethodTwo</value>\n\t\t\t</list>\n\t\t</property> -->\n\t</bean>\n\t\n\t<bean id=\"myPointcutAdvisor\" class=\"org.springframework.aop.support.DefaultPointcutAdvisor\">\n\t\t<property name=\"pointcut\" ref=\"nameMatchPointcut\"/>\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n\t</bean>\n\t\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>myPointcutAdvisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n\t</bean>\n</beans>\n```\n\n``` text output\n--------------------\n\nThis is from logicMethodOne\n\n--------------------\n\nThis is from logicMethodTwo\n\n--------------------\n\nBefore method execuation\nThis is from testLogic\nAfter method execuation\n\n--------------------\n```\n### Regular expression example\nAlso we can use regular expression to match methods which should be intercepted. Create **RegexpMethodPointcutAdvisor** bean and set the *pattern* property value with regular expression and combine with advice.\n\n``` xml \n<bean id=\"regexPointcutAdvisor\" class=\"org.springframework.aop.support.RegexpMethodPointcutAdvisor\">\n\t\t<property name=\"pattern\" value=\".*Method.*\"/>\n\t\t\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n</bean>\n```\nAnd you can specific multiple patterns with *patterns* property.\n\n``` xml \n<bean id=\"regexPointcutAdvisor\" class=\"org.springframework.aop.support.RegexpMethodPointcutAdvisor\">\n\t\t<property name=\"patterns\">\n\t\t\t<list>\n\t\t\t\t<value>.*Method.*</value>\n\t\t\t</list>\n\t\t</property>\n\t\t\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\"/>\n</bean>\n```\nFinally pass the advisor to the **ProxyFactoryBean**.\n\n``` xml\n<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>regexPointcutAdvisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\"/>\n</bean>\n```\n\n``` text output\n--------------------\n\nBefore method execuation\nThis is from logicMethodOne\nAfter method execuation\n\n--------------------\n\nBefore method execuation\nThis is from logicMethodTwo\nAfter method execuation\n\n--------------------\n\nThis is from testLogic\n\n--------------------\n```\n\nIn practice, you can use it to manage DAO layer, where you can declare “.\\*DAO.*” to intercept all your DAO classes to support transaction.","slug":"2015-06-11-spring-aop-static-pointcut","published":1,"updated":"2023-09-02T17:32:53.089Z","_id":"clm27g4oo003bazv5bsedb54n","layout":"post","photos":[],"link":"","content":"<p>Let’s first to see the three very technical terms as below.</p>\n<ul>\n<li>Adivce - Indicate the action to take either before or after the method execution.</li>\n<li>Pointcut - Indicate which method should be intercept, by method name or regular expression pattern.</li>\n<li>Advisor - Group ‘Advice’ and ‘Pointcut’ into a single unit, and pass it to a proxy factory object<span id=\"more\"></span></li>\n</ul>\n<h3 id=\"No-pointcut-example\"><a href=\"#No-pointcut-example\" class=\"headerlink\" title=\"No pointcut example\"></a>No pointcut example</h3><figure class=\"highlight java\"><figcaption><span>MyLogicClass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicMethodOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;This is from logicMethodOne&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicMethodTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;This is from logicMethodTwo&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLogic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;This is from testLogic&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Before method execuation&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;After method execuation&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicClass</span> <span class=\"variable\">logicClass</span> <span class=\"operator\">=</span> (MyLogicClass)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tlogicClass.logicMethodOne();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tlogicClass.logicMethodTwo();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tlogicClass.testLogic();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myAroundAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><figcaption><span>output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodOne</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodTwo</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from testLogic</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br></pre></td></tr></table></figure>\n\n<p>In above example, all logic methods of the class has been intercepted due to the application doesn’t use the pointcut to specific.</p>\n<h3 id=\"Name-match-example\"><a href=\"#Name-match-example\" class=\"headerlink\" title=\"Name match example\"></a>Name match example</h3><p>And now, we just want to intercept the method <em>testLogic</em>, so we need to create <strong>NameMatchMethodPointcut</strong> bean in spring config xml. and put the method name you want to intercept to the <strong>mappedName</strong> property value.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mappedName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;testLogic&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And also you can mapped multiple methods with <strong>mappedNames</strong>, like below.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mappedNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>logicMethodOne<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>logicMethodTwo<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Then create <strong>DefaultPointcutAdvisor</strong> bean to group and associate the pointcut and advice.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Replace the <strong>interceptorNames</strong> of <strong>ProxyFactoryBean</strong> with the new Advisor.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myPointcutAdvisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It’s done, let’s see the full spring config file and output.</p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mappedName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;testLogic&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;property name=&quot;mappedNames&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;list&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&lt;value&gt;logicMethodOne&lt;/value&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&lt;value&gt;logicMethodTwo&lt;/value&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/list&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;/property&gt; --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myPointcutAdvisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><figcaption><span>output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">This is from logicMethodOne</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">This is from logicMethodTwo</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from testLogic</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br></pre></td></tr></table></figure>\n<h3 id=\"Regular-expression-example\"><a href=\"#Regular-expression-example\" class=\"headerlink\" title=\"Regular expression example\"></a>Regular expression example</h3><p>Also we can use regular expression to match methods which should be intercepted. Create <strong>RegexpMethodPointcutAdvisor</strong> bean and set the <em>pattern</em> property value with regular expression and combine with advice.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;regexPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.*Method.*&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And you can specific multiple patterns with <em>patterns</em> property.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;regexPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;patterns&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>.*Method.*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Finally pass the advisor to the <strong>ProxyFactoryBean</strong>.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>regexPointcutAdvisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><figcaption><span>output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodOne</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodTwo</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">This is from testLogic</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br></pre></td></tr></table></figure>\n\n<p>In practice, you can use it to manage DAO layer, where you can declare “.*DAO.*” to intercept all your DAO classes to support transaction.</p>\n","site":{"data":{}},"excerpt":"<p>Let’s first to see the three very technical terms as below.</p>\n<ul>\n<li>Adivce - Indicate the action to take either before or after the method execution.</li>\n<li>Pointcut - Indicate which method should be intercept, by method name or regular expression pattern.</li>\n<li>Advisor - Group ‘Advice’ and ‘Pointcut’ into a single unit, and pass it to a proxy factory object","more":"</li>\n</ul>\n<h3 id=\"No-pointcut-example\"><a href=\"#No-pointcut-example\" class=\"headerlink\" title=\"No pointcut example\"></a>No pointcut example</h3><figure class=\"highlight java\"><figcaption><span>MyLogicClass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicMethodOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;This is from logicMethodOne&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">logicMethodTwo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;This is from logicMethodTwo&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLogic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;This is from testLogic&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Before method execuation&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;After method execuation&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tapplicationContext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicClass</span> <span class=\"variable\">logicClass</span> <span class=\"operator\">=</span> (MyLogicClass)applicationContext.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tlogicClass.logicMethodOne();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tlogicClass.logicMethodTwo();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tlogicClass.testLogic();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myAroundAdvice<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><figcaption><span>output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodOne</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodTwo</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from testLogic</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br></pre></td></tr></table></figure>\n\n<p>In above example, all logic methods of the class has been intercepted due to the application doesn’t use the pointcut to specific.</p>\n<h3 id=\"Name-match-example\"><a href=\"#Name-match-example\" class=\"headerlink\" title=\"Name match example\"></a>Name match example</h3><p>And now, we just want to intercept the method <em>testLogic</em>, so we need to create <strong>NameMatchMethodPointcut</strong> bean in spring config xml. and put the method name you want to intercept to the <strong>mappedName</strong> property value.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mappedName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;testLogic&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And also you can mapped multiple methods with <strong>mappedNames</strong>, like below.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mappedNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>logicMethodOne<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>logicMethodTwo<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>Then create <strong>DefaultPointcutAdvisor</strong> bean to group and associate the pointcut and advice.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Replace the <strong>interceptorNames</strong> of <strong>ProxyFactoryBean</strong> with the new Advisor.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myPointcutAdvisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It’s done, let’s see the full spring config file and output.</p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mappedName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;testLogic&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;property name=&quot;mappedNames&quot;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;list&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&lt;value&gt;logicMethodOne&lt;/value&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&lt;value&gt;logicMethodTwo&lt;/value&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;/list&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&lt;/property&gt; --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;nameMatchPointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>myPointcutAdvisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><figcaption><span>output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">This is from logicMethodOne</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">This is from logicMethodTwo</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from testLogic</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br></pre></td></tr></table></figure>\n<h3 id=\"Regular-expression-example\"><a href=\"#Regular-expression-example\" class=\"headerlink\" title=\"Regular expression example\"></a>Regular expression example</h3><p>Also we can use regular expression to match methods which should be intercepted. Create <strong>RegexpMethodPointcutAdvisor</strong> bean and set the <em>pattern</em> property value with regular expression and combine with advice.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;regexPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.*Method.*&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>And you can specific multiple patterns with <em>patterns</em> property.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;regexPointcutAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;patterns&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>.*Method.*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Finally pass the advisor to the <strong>ProxyFactoryBean</strong>.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>regexPointcutAdvisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight text\"><figcaption><span>output</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodOne</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Before method execuation</span><br><span class=\"line\">This is from logicMethodTwo</span><br><span class=\"line\">After method execuation</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\">This is from testLogic</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br></pre></td></tr></table></figure>\n\n<p>In practice, you can use it to manage DAO layer, where you can declare “.*DAO.*” to intercept all your DAO classes to support transaction.</p>"},{"title":"Spring AOP - Dynamic Pointcut","date":"2015-06-12T08:23:30.000Z","comments":1,"_content":"If we want to intercept methods with dynamic pointcut, we need to override *matches* and *getClassFilter* methods of **DynamicMethodMatcher** abstract class. The dynamic pointcut can verify the arguments of the method at runtime. This is a difference with static pointcut.\n\n<!-- more -->\n``` java MyDynamicPointcut.java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.ClassFilter;\nimport org.springframework.aop.support.DynamicMethodMatcherPointcut;\n\npublic class MyDynamicPointcut extends DynamicMethodMatcherPointcut {\n\n\t@Override\n\tpublic boolean matches(Method method, Class<?> targetClass, Object[] args) {\n\t\tSystem.out.println(\"Dynamic check for \" + method.getName());\n\n\t\tif (args.length > 0 && (int) args[0] > 10)\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic ClassFilter getClassFilter() {\n\t\treturn new ClassFilter() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(Class<?> clazz) {\n\t\t\t\treturn clazz.equals(MyLogicClass.class);\n\t\t\t}\n\n\t\t};\n\t}\n\n}\n\n```\nIn above dynamic pointcut class, we verify the class name must be *MyLogicClass* and the value of the first argument in method must larger than 10, otherwise the method will not be intercepted.\n\n``` java MyAroundAdvice.java\npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor {\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\tSystem.out.println(\">>>>>> Invoking method \"\n\t\t\t\t+ invocation.getMethod().getName());\n\n\t\tObject result = invocation.proceed();\n\n\t\tSystem.out.println(\">>>>>> Invoked Done\");\n\n\t\treturn result;\n\t}\n\n}\n```\nWe print some message before and after the invocation of method.\n\n``` java MyLogicClass\npackage spring.test.aop;\n\npublic class MyLogicClass {\n\n\tpublic void methodOne() {\n\t\tSystem.out.println(\"MethodOne is Running\");\n\t}\n\n\tpublic void methodTwo(int x) {\n\t\tSystem.out.println(String.format(\n\t\t\t\t\"MethodTwo is running with argument %s\", x));\n\t}\n}\n```\n\nHere, in our logic class, there are two methods, one without argument, another with int type argument. Both method print message in console.\n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\" />\n\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\" />\n\n\t<bean id=\"myDynamicPointcut\" class=\"spring.test.aop.MyDynamicPointcut\" />\n\n\t<bean id=\"advisor\" class=\"org.springframework.aop.support.DefaultPointcutAdvisor\">\n\t\t<property name=\"pointcut\" ref=\"myDynamicPointcut\" />\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\" />\n\t</bean>\n\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>advisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\" />\n\t</bean>\n</beans>\n```\nCreate our *MyDynamicPointcut* bean and *MyAroundAdvice* bean and put them into **DefaultPointcutAdvisor** bean. Finally put the advisor and target class to the **ProxyFactoryBean**.\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\tprivate static ApplicationContext context;\n\n\tpublic static void main(String[] args) {\n\t\tcontext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\t\n\t\tMyLogicClass proxy = (MyLogicClass) context.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tproxy.methodOne();\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tproxy.methodTwo(1);\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tproxy.methodTwo(11);\n\t\n\t}\n}\n```\nWe call the *methodTwo* twice with different arguments. Let's see the output.\n\n\tDynamic check for methodOne\n\tMethodOne is Running\n\n\t--------------------\n\n\tDynamic check for methodTwo\n\tMethodTwo is running with argument 1\n\n\t--------------------\n\n\tDynamic check for methodTwo\n\t>>>>>> Invoking method methodTwo\n\tMethodTwo is running with argument 11\n\t>>>>>> Invoked Done\n\t\nYou see, only *methodTwo* with argument 11 (larger than 10) is intercepted.","source":"_posts/2015-06-12-spring-aop-dynamic-pointcut.markdown","raw":"---\n\ntitle: \"Spring AOP - Dynamic Pointcut\"\ndate: 2015-06-12 16:23:30 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\nIf we want to intercept methods with dynamic pointcut, we need to override *matches* and *getClassFilter* methods of **DynamicMethodMatcher** abstract class. The dynamic pointcut can verify the arguments of the method at runtime. This is a difference with static pointcut.\n\n<!-- more -->\n``` java MyDynamicPointcut.java\npackage spring.test.aop;\n\nimport java.lang.reflect.Method;\n\nimport org.springframework.aop.ClassFilter;\nimport org.springframework.aop.support.DynamicMethodMatcherPointcut;\n\npublic class MyDynamicPointcut extends DynamicMethodMatcherPointcut {\n\n\t@Override\n\tpublic boolean matches(Method method, Class<?> targetClass, Object[] args) {\n\t\tSystem.out.println(\"Dynamic check for \" + method.getName());\n\n\t\tif (args.length > 0 && (int) args[0] > 10)\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic ClassFilter getClassFilter() {\n\t\treturn new ClassFilter() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(Class<?> clazz) {\n\t\t\t\treturn clazz.equals(MyLogicClass.class);\n\t\t\t}\n\n\t\t};\n\t}\n\n}\n\n```\nIn above dynamic pointcut class, we verify the class name must be *MyLogicClass* and the value of the first argument in method must larger than 10, otherwise the method will not be intercepted.\n\n``` java MyAroundAdvice.java\npackage spring.test.aop;\n\nimport org.aopalliance.intercept.MethodInterceptor;\nimport org.aopalliance.intercept.MethodInvocation;\n\npublic class MyAroundAdvice implements MethodInterceptor {\n\n\t@Override\n\tpublic Object invoke(MethodInvocation invocation) throws Throwable {\n\t\tSystem.out.println(\">>>>>> Invoking method \"\n\t\t\t\t+ invocation.getMethod().getName());\n\n\t\tObject result = invocation.proceed();\n\n\t\tSystem.out.println(\">>>>>> Invoked Done\");\n\n\t\treturn result;\n\t}\n\n}\n```\nWe print some message before and after the invocation of method.\n\n``` java MyLogicClass\npackage spring.test.aop;\n\npublic class MyLogicClass {\n\n\tpublic void methodOne() {\n\t\tSystem.out.println(\"MethodOne is Running\");\n\t}\n\n\tpublic void methodTwo(int x) {\n\t\tSystem.out.println(String.format(\n\t\t\t\t\"MethodTwo is running with argument %s\", x));\n\t}\n}\n```\n\nHere, in our logic class, there are two methods, one without argument, another with int type argument. Both method print message in console.\n\n``` xml springConfig.xml\n<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN 2.0//EN\"\n\t\t\t\"http://www.springframework.org/dtd/spring-beans-2.0.dtd\">\n\n<beans>\n\t<bean id=\"myAroundAdvice\" class=\"spring.test.aop.MyAroundAdvice\" />\n\n\t<bean id=\"myLogicClass\" class=\"spring.test.aop.MyLogicClass\" />\n\n\t<bean id=\"myDynamicPointcut\" class=\"spring.test.aop.MyDynamicPointcut\" />\n\n\t<bean id=\"advisor\" class=\"org.springframework.aop.support.DefaultPointcutAdvisor\">\n\t\t<property name=\"pointcut\" ref=\"myDynamicPointcut\" />\n\t\t<property name=\"advice\" ref=\"myAroundAdvice\" />\n\t</bean>\n\n\t<bean id=\"proxyFactoryBean\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n\t\t<property name=\"interceptorNames\">\n\t\t\t<list>\n\t\t\t\t<value>advisor</value>\n\t\t\t</list>\n\t\t</property>\n\t\t<property name=\"target\" ref=\"myLogicClass\" />\n\t</bean>\n</beans>\n```\nCreate our *MyDynamicPointcut* bean and *MyAroundAdvice* bean and put them into **DefaultPointcutAdvisor** bean. Finally put the advisor and target class to the **ProxyFactoryBean**.\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\tprivate static ApplicationContext context;\n\n\tpublic static void main(String[] args) {\n\t\tcontext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\t\t\n\t\tMyLogicClass proxy = (MyLogicClass) context.getBean(\"proxyFactoryBean\");\n\t\t\n\t\tproxy.methodOne();\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tproxy.methodTwo(1);\n\t\tSystem.out.println(\"\\n--------------------\\n\");\n\t\tproxy.methodTwo(11);\n\t\n\t}\n}\n```\nWe call the *methodTwo* twice with different arguments. Let's see the output.\n\n\tDynamic check for methodOne\n\tMethodOne is Running\n\n\t--------------------\n\n\tDynamic check for methodTwo\n\tMethodTwo is running with argument 1\n\n\t--------------------\n\n\tDynamic check for methodTwo\n\t>>>>>> Invoking method methodTwo\n\tMethodTwo is running with argument 11\n\t>>>>>> Invoked Done\n\t\nYou see, only *methodTwo* with argument 11 (larger than 10) is intercepted.","slug":"2015-06-12-spring-aop-dynamic-pointcut","published":1,"updated":"2023-09-02T17:32:55.019Z","_id":"clm27g4op003dazv57xxpgh43","layout":"post","photos":[],"link":"","content":"<p>If we want to intercept methods with dynamic pointcut, we need to override <em>matches</em> and <em>getClassFilter</em> methods of <strong>DynamicMethodMatcher</strong> abstract class. The dynamic pointcut can verify the arguments of the method at runtime. This is a difference with static pointcut.</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><figcaption><span>MyDynamicPointcut.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.ClassFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.support.DynamicMethodMatcherPointcut;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDynamicPointcut</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DynamicMethodMatcherPointcut</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(Method method, Class&lt;?&gt; targetClass, Object[] args)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Dynamic check for &quot;</span> + method.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span> &amp;&amp; (<span class=\"type\">int</span>) args[<span class=\"number\">0</span>] &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ClassFilter <span class=\"title function_\">getClassFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassFilter</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> clazz.equals(MyLogicClass.class);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In above dynamic pointcut class, we verify the class name must be <em>MyLogicClass</em> and the value of the first argument in method must larger than 10, otherwise the method will not be intercepted.</p>\n<figure class=\"highlight java\"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Invoking method &quot;</span></span><br><span class=\"line\">\t\t\t\t+ invocation.getMethod().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Invoked Done&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We print some message before and after the invocation of method.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogicClass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;MethodOne is Running&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodTwo</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;MethodTwo is running with argument %s&quot;</span>, x));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Here, in our logic class, there are two methods, one without argument, another with int type argument. Both method print message in console.</p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myDynamicPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyDynamicPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;advisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myDynamicPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>advisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Create our <em>MyDynamicPointcut</em> bean and <em>MyAroundAdvice</em> bean and put them into <strong>DefaultPointcutAdvisor</strong> bean. Finally put the advisor and target class to the <strong>ProxyFactoryBean</strong>.</p>\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tcontext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicClass</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (MyLogicClass) context.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tproxy.methodOne();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tproxy.methodTwo(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tproxy.methodTwo(<span class=\"number\">11</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We call the <em>methodTwo</em> twice with different arguments. Let’s see the output.</p>\n<pre><code>Dynamic check for methodOne\nMethodOne is Running\n\n--------------------\n\nDynamic check for methodTwo\nMethodTwo is running with argument 1\n\n--------------------\n\nDynamic check for methodTwo\n&gt;&gt;&gt;&gt;&gt;&gt; Invoking method methodTwo\nMethodTwo is running with argument 11\n&gt;&gt;&gt;&gt;&gt;&gt; Invoked Done\n</code></pre>\n<p>You see, only <em>methodTwo</em> with argument 11 (larger than 10) is intercepted.</p>\n","site":{"data":{}},"excerpt":"<p>If we want to intercept methods with dynamic pointcut, we need to override <em>matches</em> and <em>getClassFilter</em> methods of <strong>DynamicMethodMatcher</strong> abstract class. The dynamic pointcut can verify the arguments of the method at runtime. This is a difference with static pointcut.</p>","more":"<figure class=\"highlight java\"><figcaption><span>MyDynamicPointcut.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.ClassFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.support.DynamicMethodMatcherPointcut;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDynamicPointcut</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DynamicMethodMatcherPointcut</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(Method method, Class&lt;?&gt; targetClass, Object[] args)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Dynamic check for &quot;</span> + method.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span> &amp;&amp; (<span class=\"type\">int</span>) args[<span class=\"number\">0</span>] &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ClassFilter <span class=\"title function_\">getClassFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassFilter</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> clazz.equals(MyLogicClass.class);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>In above dynamic pointcut class, we verify the class name must be <em>MyLogicClass</em> and the value of the first argument in method must larger than 10, otherwise the method will not be intercepted.</p>\n<figure class=\"highlight java\"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAroundAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(MethodInvocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Invoking method &quot;</span></span><br><span class=\"line\">\t\t\t\t+ invocation.getMethod().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Invoked Done&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We print some message before and after the invocation of method.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogicClass</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogicClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodOne</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;MethodOne is Running&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">methodTwo</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;MethodTwo is running with argument %s&quot;</span>, x));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Here, in our logic class, there are two methods, one without argument, another with int type argument. Both method print message in console.</p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">beans</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t<span class=\"string\">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyAroundAdvice&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogicClass&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myDynamicPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyDynamicPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;advisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myDynamicPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myAroundAdvice&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxyFactoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>advisor<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogicClass&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Create our <em>MyDynamicPointcut</em> bean and <em>MyAroundAdvice</em> bean and put them into <strong>DefaultPointcutAdvisor</strong> bean. Finally put the advisor and target class to the <strong>ProxyFactoryBean</strong>.</p>\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tcontext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">MyLogicClass</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (MyLogicClass) context.getBean(<span class=\"string\">&quot;proxyFactoryBean&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tproxy.methodOne();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tproxy.methodTwo(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;\\n--------------------\\n&quot;</span>);</span><br><span class=\"line\">\t\tproxy.methodTwo(<span class=\"number\">11</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We call the <em>methodTwo</em> twice with different arguments. Let’s see the output.</p>\n<pre><code>Dynamic check for methodOne\nMethodOne is Running\n\n--------------------\n\nDynamic check for methodTwo\nMethodTwo is running with argument 1\n\n--------------------\n\nDynamic check for methodTwo\n&gt;&gt;&gt;&gt;&gt;&gt; Invoking method methodTwo\nMethodTwo is running with argument 11\n&gt;&gt;&gt;&gt;&gt;&gt; Invoked Done\n</code></pre>\n<p>You see, only <em>methodTwo</em> with argument 11 (larger than 10) is intercepted.</p>"},{"title":"Spring AOP - XML Schema","date":"2015-06-14T07:48:55.000Z","comments":1,"_content":"Previously, we created AOP with Spring framework via implementing interface of spring AOP. And now we can use XML Schema to achieve it. We need to add below **AspectJ** libraries to our project. So downloading and adding them to the *CLASSPATH* of application,  and also we can use the maven to build our application.    \n - *aspectjrt.jar*   \n - *aspectjweaver.jar*   \n - *aopalliance.jar*   \n<!-- more -->\nLet's see our pom.xml\n``` xml pom.xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>Spring-AOP-XML-Schema</groupId>\n\t<artifactId>Spring-AOP-XML-Schema</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<build>\n\t\t<sourceDirectory>src</sourceDirectory>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<version>3.1</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.7</source>\n\t\t\t\t\t<target>1.7</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aop</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.aspectj</groupId>\n\t\t\t<artifactId>aspectjweaver</artifactId>\n\t\t\t<version>1.8.6</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.aspectj</groupId>\n\t\t\t<artifactId>aspectjrt</artifactId>\n\t\t\t<version>1.8.6</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>aopalliance</groupId>\n\t\t\t<artifactId>aopalliance</artifactId>\n\t\t\t<version>1.0</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n```\n\nOkay, so we start to config the AOP with xml schema. \n\n1. Declaring Aspect:\n\n``` xml\n<aop:config>\n\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t</aop:aspect>\n</aop:config>\n\t\n<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n```\nCreate our service bean called *myLogging*. this service should be injected before or after in the logic method. And use `<aop:aspect>` to reference it.\n\n2. Declaring Pointcut:\n\n``` xml\n<aop:config>\n\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t\t<aop:pointcut id=\"saveDataPointcut\" expression=\"execution(* spring.test.aop.*.saveData(..))\" />\n\t\t\t<aop:pointcut id=\"getDataPointcut\" expression=\"execution(* spring.test.aop.*.getData())\"/>\n\t</aop:aspect>\n</aop:config>\n\t\n<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\n<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n```   \n\nCreate logic class bean and pointcut with `<aop:pointcut>` , define the expression matcher to match the methods which will be executed with AOP. To see the expression of pointcut, go to [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html).\n\n3. Declaring Advice:\n\n``` xml\n<aop:config>\n\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t\t\n\t\t<aop:pointcut id=\"saveDataPointcut\" expression=\"execution(* spring.test.aop.*.saveData(..))\" />\n\t\t\n\t\t<aop:pointcut id=\"getDataPointcut\" expression=\"execution(* spring.test.aop.*.getData())\"/>\n\t\t\t\n\t\t<aop:before method=\"beforeSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t<aop:after method=\"afterSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t<aop:before method=\"beforeGetData\" pointcut=\"execution(* spring.test.aop.MyData.getData())\"/>\n\t\t\t\n\t\t<aop:after method=\"afterGetData\" pointcut=\"execution(* spring.test.aop.*.get*())\"/>\n\t\t\t\n\t\t<aop:after-returning method=\"afterReturningAdvice\"\n\t\t\t\tpointcut-ref=\"getDataPointcut\" returning=\"returnValue\" />\n\t\t\t\t\n\t\t<aop:after-throwing method=\"throwingAdvice\"\n\t\t\t\tpointcut=\"execution(* spring.test.aop.MyData.concatData(String))\" throwing=\"ex\" />\n\t</aop:aspect>\n</aop:config>\n\t\n<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\t\n<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n```\n\nUse `<aop:before>`, `<aop:after>`, `<aop:after-returning>` and `<aop:after-throwing>` to create each advices. Reference to pointcut bean and appoint which method of service can be injected. Note, for *after-returning* and *after-throwing*, we should add attributes *returning* and *throwing* to access their variables.   \n\nThe full configration file is: \n\n``` xml springConfig.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd \n    http://www.springframework.org/schema/aop \n    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \">\n\n\t<aop:config>\n\t\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t\t\n\t\t\t<aop:pointcut id=\"saveDataPointcut\" expression=\"execution(* spring.test.aop.*.saveData(..))\" />\n\t\t\t\n\t\t\t<aop:pointcut id=\"getDataPointcut\" expression=\"execution(* spring.test.aop.*.getData())\"/>\n\t\t\t\n\t\t\t<aop:before method=\"beforeSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t\t<aop:after method=\"afterSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t\t<aop:before method=\"beforeGetData\" pointcut=\"execution(* spring.test.aop.MyData.getData())\"/>\n\t\t\t\n\t\t\t<aop:after method=\"afterGetData\" pointcut=\"execution(* spring.test.aop.*.get*())\"/>\n\t\t\t\n\t\t\t<aop:after-returning method=\"afterReturningAdvice\"\n\t\t\t\tpointcut-ref=\"getDataPointcut\" returning=\"returnValue\" />\n\t\t\t\t\n\t\t\t<aop:after-throwing method=\"throwingAdvice\"\n\t\t\t\tpointcut=\"execution(* spring.test.aop.MyData.concatData(String))\" throwing=\"ex\" />\n\t\t\t\t\n\t\t</aop:aspect>\n\t</aop:config>\n\t\n\t<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\t\n\t<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n</beans>\n```\n\nFrom now, the AOP configration completed. Let's see our Logging service and Logic class.\n\n``` java MyLogging.java\npackage spring.test.aop;\n\npublic class MyLogging {\n\n\tpublic void beforeSaveData() {\n\t\tSystem.out.println(\"The Data is going to be saved\");\n\t}\n\n\tpublic void afterSaveData() {\n\t\tSystem.out.println(\"The Data has been saved\");\n\t}\n\t\n\tpublic void beforeGetData() {\n\t\tSystem.out.println(\"Ready to get the data\");\n\t}\n\t\n\tpublic void afterGetData() {\n\t\tSystem.out.println(\"The data has been got\");\n\t}\n\n\tpublic void afterReturningAdvice(Object returnValue) {\n\t\tSystem.out.println(String.format(\n\t\t\t\t\"The return value is: %s \", returnValue.toString()));\n\t}\n\n\tpublic void throwingAdvice(NullPointerException ex) {\n\t\tSystem.out.println(String.format(\n\t\t\t\t\"Throw exception is: %s\", ex.getMessage()));\n\t}\n\n}\n```\nIn our Logging service, the *afterReturningAdvice* and *throwingAdvice* methods should take *returnValue* which is Object type and Exception type *ex* paramters.  \n\n``` java MyData.java\npackage spring.test.aop;\n\npublic class MyData {\n\tpublic String data;\n\n\tpublic void saveData(String data) {\n\t\tSystem.out.println(\"Saving the data: \" + data);\n\t\tthis.data = data;\n\t}\n\n\tpublic String getData() {\n\t\tSystem.out.println(\"Get the data: \" + this.data);\n\t\treturn this.data;\n\t}\n\t\n\tpublic void concatData(String data) {\n\t\tthis.data.concat(data);\n\t}\n}\n\n```\n\nWe use the different pointcut to decide which service method can be injected which logic method.   \n\nFinally, let's get our main class:\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext context;\n\n\tpublic static void main(String[] args) {\n\t\tcontext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\n\t\tMyData myData = (MyData) context.getBean(\"myData\");\n\n\t\tmyData.saveData(\"This is my data\");\n\t\t\n\t\tSystem.out.println(\"-----------------\");\n\t\tmyData.getData();\n\t}\n\n}\n```\n\nSee the output of application:\n\n\the Data is going to be saved\n\tSaving the data: This is my data\n\tThe Data has been saved\n\t-----------------\n\tReady to get the data\n\tGet the data: This is my data\n\tThe return value is: This is my data \n\tThe data has been got\n\t-----------------\n\tThrow exception is: null\n\tException in thread \"main\" java.lang.NullPointerException\n\tat java.lang.String.concat(String.java:1970)\n\tat spring.test.aop.MyData.concatData(MyData.java:17)\n\tat spring.test.aop.MyData$$FastClassBySpringCGLIB$$731fbdfd.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\n\tat spring.test.aop.MyData$$EnhancerBySpringCGLIB$$5a76fbda.concatData(<generated>)\n\tat spring.test.aop.App.main(App.java:21)\n","source":"_posts/2015-06-14-spring-aop-xml-schema.markdown","raw":"---\n\ntitle: \"Spring AOP - XML Schema\"\ndate: 2015-06-14 15:48:55 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\nPreviously, we created AOP with Spring framework via implementing interface of spring AOP. And now we can use XML Schema to achieve it. We need to add below **AspectJ** libraries to our project. So downloading and adding them to the *CLASSPATH* of application,  and also we can use the maven to build our application.    \n - *aspectjrt.jar*   \n - *aspectjweaver.jar*   \n - *aopalliance.jar*   \n<!-- more -->\nLet's see our pom.xml\n``` xml pom.xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>Spring-AOP-XML-Schema</groupId>\n\t<artifactId>Spring-AOP-XML-Schema</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<build>\n\t\t<sourceDirectory>src</sourceDirectory>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<version>3.1</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.7</source>\n\t\t\t\t\t<target>1.7</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-beans</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-aop</artifactId>\n\t\t\t<version>4.1.6.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.aspectj</groupId>\n\t\t\t<artifactId>aspectjweaver</artifactId>\n\t\t\t<version>1.8.6</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.aspectj</groupId>\n\t\t\t<artifactId>aspectjrt</artifactId>\n\t\t\t<version>1.8.6</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>aopalliance</groupId>\n\t\t\t<artifactId>aopalliance</artifactId>\n\t\t\t<version>1.0</version>\n\t\t</dependency>\n\t</dependencies>\n</project>\n```\n\nOkay, so we start to config the AOP with xml schema. \n\n1. Declaring Aspect:\n\n``` xml\n<aop:config>\n\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t</aop:aspect>\n</aop:config>\n\t\n<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n```\nCreate our service bean called *myLogging*. this service should be injected before or after in the logic method. And use `<aop:aspect>` to reference it.\n\n2. Declaring Pointcut:\n\n``` xml\n<aop:config>\n\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t\t<aop:pointcut id=\"saveDataPointcut\" expression=\"execution(* spring.test.aop.*.saveData(..))\" />\n\t\t\t<aop:pointcut id=\"getDataPointcut\" expression=\"execution(* spring.test.aop.*.getData())\"/>\n\t</aop:aspect>\n</aop:config>\n\t\n<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\n<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n```   \n\nCreate logic class bean and pointcut with `<aop:pointcut>` , define the expression matcher to match the methods which will be executed with AOP. To see the expression of pointcut, go to [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html).\n\n3. Declaring Advice:\n\n``` xml\n<aop:config>\n\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t\t\n\t\t<aop:pointcut id=\"saveDataPointcut\" expression=\"execution(* spring.test.aop.*.saveData(..))\" />\n\t\t\n\t\t<aop:pointcut id=\"getDataPointcut\" expression=\"execution(* spring.test.aop.*.getData())\"/>\n\t\t\t\n\t\t<aop:before method=\"beforeSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t<aop:after method=\"afterSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t<aop:before method=\"beforeGetData\" pointcut=\"execution(* spring.test.aop.MyData.getData())\"/>\n\t\t\t\n\t\t<aop:after method=\"afterGetData\" pointcut=\"execution(* spring.test.aop.*.get*())\"/>\n\t\t\t\n\t\t<aop:after-returning method=\"afterReturningAdvice\"\n\t\t\t\tpointcut-ref=\"getDataPointcut\" returning=\"returnValue\" />\n\t\t\t\t\n\t\t<aop:after-throwing method=\"throwingAdvice\"\n\t\t\t\tpointcut=\"execution(* spring.test.aop.MyData.concatData(String))\" throwing=\"ex\" />\n\t</aop:aspect>\n</aop:config>\n\t\n<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\t\n<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n```\n\nUse `<aop:before>`, `<aop:after>`, `<aop:after-returning>` and `<aop:after-throwing>` to create each advices. Reference to pointcut bean and appoint which method of service can be injected. Note, for *after-returning* and *after-throwing*, we should add attributes *returning* and *throwing* to access their variables.   \n\nThe full configration file is: \n\n``` xml springConfig.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd \n    http://www.springframework.org/schema/aop \n    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \">\n\n\t<aop:config>\n\t\t<aop:aspect id=\"logging\" ref=\"myLogging\">\n\t\t\n\t\t\t<aop:pointcut id=\"saveDataPointcut\" expression=\"execution(* spring.test.aop.*.saveData(..))\" />\n\t\t\t\n\t\t\t<aop:pointcut id=\"getDataPointcut\" expression=\"execution(* spring.test.aop.*.getData())\"/>\n\t\t\t\n\t\t\t<aop:before method=\"beforeSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t\t<aop:after method=\"afterSaveData\" pointcut-ref=\"saveDataPointcut\" />\n\t\t\t\n\t\t\t<aop:before method=\"beforeGetData\" pointcut=\"execution(* spring.test.aop.MyData.getData())\"/>\n\t\t\t\n\t\t\t<aop:after method=\"afterGetData\" pointcut=\"execution(* spring.test.aop.*.get*())\"/>\n\t\t\t\n\t\t\t<aop:after-returning method=\"afterReturningAdvice\"\n\t\t\t\tpointcut-ref=\"getDataPointcut\" returning=\"returnValue\" />\n\t\t\t\t\n\t\t\t<aop:after-throwing method=\"throwingAdvice\"\n\t\t\t\tpointcut=\"execution(* spring.test.aop.MyData.concatData(String))\" throwing=\"ex\" />\n\t\t\t\t\n\t\t</aop:aspect>\n\t</aop:config>\n\t\n\t<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\t\n\t<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n</beans>\n```\n\nFrom now, the AOP configration completed. Let's see our Logging service and Logic class.\n\n``` java MyLogging.java\npackage spring.test.aop;\n\npublic class MyLogging {\n\n\tpublic void beforeSaveData() {\n\t\tSystem.out.println(\"The Data is going to be saved\");\n\t}\n\n\tpublic void afterSaveData() {\n\t\tSystem.out.println(\"The Data has been saved\");\n\t}\n\t\n\tpublic void beforeGetData() {\n\t\tSystem.out.println(\"Ready to get the data\");\n\t}\n\t\n\tpublic void afterGetData() {\n\t\tSystem.out.println(\"The data has been got\");\n\t}\n\n\tpublic void afterReturningAdvice(Object returnValue) {\n\t\tSystem.out.println(String.format(\n\t\t\t\t\"The return value is: %s \", returnValue.toString()));\n\t}\n\n\tpublic void throwingAdvice(NullPointerException ex) {\n\t\tSystem.out.println(String.format(\n\t\t\t\t\"Throw exception is: %s\", ex.getMessage()));\n\t}\n\n}\n```\nIn our Logging service, the *afterReturningAdvice* and *throwingAdvice* methods should take *returnValue* which is Object type and Exception type *ex* paramters.  \n\n``` java MyData.java\npackage spring.test.aop;\n\npublic class MyData {\n\tpublic String data;\n\n\tpublic void saveData(String data) {\n\t\tSystem.out.println(\"Saving the data: \" + data);\n\t\tthis.data = data;\n\t}\n\n\tpublic String getData() {\n\t\tSystem.out.println(\"Get the data: \" + this.data);\n\t\treturn this.data;\n\t}\n\t\n\tpublic void concatData(String data) {\n\t\tthis.data.concat(data);\n\t}\n}\n\n```\n\nWe use the different pointcut to decide which service method can be injected which logic method.   \n\nFinally, let's get our main class:\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext context;\n\n\tpublic static void main(String[] args) {\n\t\tcontext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\n\t\tMyData myData = (MyData) context.getBean(\"myData\");\n\n\t\tmyData.saveData(\"This is my data\");\n\t\t\n\t\tSystem.out.println(\"-----------------\");\n\t\tmyData.getData();\n\t}\n\n}\n```\n\nSee the output of application:\n\n\the Data is going to be saved\n\tSaving the data: This is my data\n\tThe Data has been saved\n\t-----------------\n\tReady to get the data\n\tGet the data: This is my data\n\tThe return value is: This is my data \n\tThe data has been got\n\t-----------------\n\tThrow exception is: null\n\tException in thread \"main\" java.lang.NullPointerException\n\tat java.lang.String.concat(String.java:1970)\n\tat spring.test.aop.MyData.concatData(MyData.java:17)\n\tat spring.test.aop.MyData$$FastClassBySpringCGLIB$$731fbdfd.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\n\tat spring.test.aop.MyData$$EnhancerBySpringCGLIB$$5a76fbda.concatData(<generated>)\n\tat spring.test.aop.App.main(App.java:21)\n","slug":"2015-06-14-spring-aop-xml-schema","published":1,"updated":"2023-09-02T17:32:56.008Z","_id":"clm27g4op003eazv51pzvhul6","layout":"post","photos":[],"link":"","content":"<p>Previously, we created AOP with Spring framework via implementing interface of spring AOP. And now we can use XML Schema to achieve it. We need to add below <strong>AspectJ</strong> libraries to our project. So downloading and adding them to the <em>CLASSPATH</em> of application,  and also we can use the maven to build our application.    </p>\n<ul>\n<li><em>aspectjrt.jar</em>   </li>\n<li><em>aspectjweaver.jar</em>   </li>\n<li><em>aopalliance.jar</em>   <span id=\"more\"></span>\nLet’s see our pom.xml<figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>Spring-AOP-XML-Schema<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>Spring-AOP-XML-Schema<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjrt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>aopalliance<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aopalliance<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Okay, so we start to config the AOP with xml schema. </p>\n<ol>\n<li>Declaring Aspect:</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Create our service bean called <em>myLogging</em>. this service should be injected before or after in the logic method. And use <code>&lt;aop:aspect&gt;</code> to reference it.</p>\n<ol start=\"2\">\n<li>Declaring Pointcut:</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">Create logic class bean and pointcut with `<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span>&gt;</span>` , define the expression matcher to match the methods which will be executed with AOP. To see the expression of pointcut, go to [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html).</span><br><span class=\"line\"></span><br><span class=\"line\">3. Declaring Advice:</span><br><span class=\"line\"></span><br><span class=\"line\">``` xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.get*())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterReturningAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">returning</span>=<span class=\"string\">&quot;returnValue&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;throwingAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.concatData(String))&quot;</span> <span class=\"attr\">throwing</span>=<span class=\"string\">&quot;ex&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Use <code>&lt;aop:before&gt;</code>, <code>&lt;aop:after&gt;</code>, <code>&lt;aop:after-returning&gt;</code> and <code>&lt;aop:after-throwing&gt;</code> to create each advices. Reference to pointcut bean and appoint which method of service can be injected. Note, for <em>after-returning</em> and <em>after-throwing</em>, we should add attributes <em>returning</em> and <em>throwing</em> to access their variables.   </p>\n<p>The full configration file is: </p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.get*())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterReturningAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">returning</span>=<span class=\"string\">&quot;returnValue&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;throwingAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.concatData(String))&quot;</span> <span class=\"attr\">throwing</span>=<span class=\"string\">&quot;ex&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>From now, the AOP configration completed. Let’s see our Logging service and Logic class.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogging.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data is going to be saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data has been saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Ready to get the data&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The data has been got&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningAdvice</span><span class=\"params\">(Object returnValue)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;The return value is: %s &quot;</span>, returnValue.toString()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwingAdvice</span><span class=\"params\">(NullPointerException ex)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;Throw exception is: %s&quot;</span>, ex.getMessage()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our Logging service, the <em>afterReturningAdvice</em> and <em>throwingAdvice</em> methods should take <em>returnValue</em> which is Object type and Exception type <em>ex</em> paramters.  </p>\n<figure class=\"highlight java\"><figcaption><span>MyData.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving the data: &quot;</span> + data);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Get the data: &quot;</span> + <span class=\"built_in\">this</span>.data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">concatData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data.concat(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We use the different pointcut to decide which service method can be injected which logic method.   </p>\n<p>Finally, let’s get our main class:</p>\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tcontext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">MyData</span> <span class=\"variable\">myData</span> <span class=\"operator\">=</span> (MyData) context.getBean(<span class=\"string\">&quot;myData&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmyData.saveData(<span class=\"string\">&quot;This is my data&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">\t\tmyData.getData();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>See the output of application:</p>\n<pre><code>he Data is going to be saved\nSaving the data: This is my data\nThe Data has been saved\n-----------------\nReady to get the data\nGet the data: This is my data\nThe return value is: This is my data \nThe data has been got\n-----------------\nThrow exception is: null\nException in thread &quot;main&quot; java.lang.NullPointerException\nat java.lang.String.concat(String.java:1970)\nat spring.test.aop.MyData.concatData(MyData.java:17)\nat spring.test.aop.MyData$$FastClassBySpringCGLIB$$731fbdfd.invoke(&lt;generated&gt;)\nat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\nat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\nat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\nat spring.test.aop.MyData$$EnhancerBySpringCGLIB$$5a76fbda.concatData(&lt;generated&gt;)\nat spring.test.aop.App.main(App.java:21)\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>Previously, we created AOP with Spring framework via implementing interface of spring AOP. And now we can use XML Schema to achieve it. We need to add below <strong>AspectJ</strong> libraries to our project. So downloading and adding them to the <em>CLASSPATH</em> of application,  and also we can use the maven to build our application.    </p>\n<ul>\n<li><em>aspectjrt.jar</em>   </li>\n<li><em>aspectjweaver.jar</em>   </li>\n<li><em>aopalliance.jar</em>","more":"Let’s see our pom.xml<figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>Spring-AOP-XML-Schema<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>Spring-AOP-XML-Schema<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">sourceDirectory</span>&gt;</span>src<span class=\"tag\">&lt;/<span class=\"name\">sourceDirectory</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjrt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>aopalliance<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aopalliance<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Okay, so we start to config the AOP with xml schema. </p>\n<ol>\n<li>Declaring Aspect:</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Create our service bean called <em>myLogging</em>. this service should be injected before or after in the logic method. And use <code>&lt;aop:aspect&gt;</code> to reference it.</p>\n<ol start=\"2\">\n<li>Declaring Pointcut:</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">Create logic class bean and pointcut with `<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span>&gt;</span>` , define the expression matcher to match the methods which will be executed with AOP. To see the expression of pointcut, go to [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html).</span><br><span class=\"line\"></span><br><span class=\"line\">3. Declaring Advice:</span><br><span class=\"line\"></span><br><span class=\"line\">``` xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.get*())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterReturningAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">returning</span>=<span class=\"string\">&quot;returnValue&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;throwingAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.concatData(String))&quot;</span> <span class=\"attr\">throwing</span>=<span class=\"string\">&quot;ex&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Use <code>&lt;aop:before&gt;</code>, <code>&lt;aop:after&gt;</code>, <code>&lt;aop:after-returning&gt;</code> and <code>&lt;aop:after-throwing&gt;</code> to create each advices. Reference to pointcut bean and appoint which method of service can be injected. Note, for <em>after-returning</em> and <em>after-throwing</em>, we should add attributes <em>returning</em> and <em>throwing</em> to access their variables.   </p>\n<p>The full configration file is: </p>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logging&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myLogging&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterSaveData&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;beforeGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.getData())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterGetData&quot;</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.*.get*())&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;afterReturningAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;getDataPointcut&quot;</span> <span class=\"attr\">returning</span>=<span class=\"string\">&quot;returnValue&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;throwingAdvice&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">pointcut</span>=<span class=\"string\">&quot;execution(* spring.test.aop.MyData.concatData(String))&quot;</span> <span class=\"attr\">throwing</span>=<span class=\"string\">&quot;ex&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>From now, the AOP configration completed. Let’s see our Logging service and Logic class.</p>\n<figure class=\"highlight java\"><figcaption><span>MyLogging.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data is going to be saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data has been saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Ready to get the data&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The data has been got&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningAdvice</span><span class=\"params\">(Object returnValue)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;The return value is: %s &quot;</span>, returnValue.toString()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwingAdvice</span><span class=\"params\">(NullPointerException ex)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;Throw exception is: %s&quot;</span>, ex.getMessage()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In our Logging service, the <em>afterReturningAdvice</em> and <em>throwingAdvice</em> methods should take <em>returnValue</em> which is Object type and Exception type <em>ex</em> paramters.  </p>\n<figure class=\"highlight java\"><figcaption><span>MyData.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving the data: &quot;</span> + data);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Get the data: &quot;</span> + <span class=\"built_in\">this</span>.data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">concatData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data.concat(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We use the different pointcut to decide which service method can be injected which logic method.   </p>\n<p>Finally, let’s get our main class:</p>\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tcontext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">MyData</span> <span class=\"variable\">myData</span> <span class=\"operator\">=</span> (MyData) context.getBean(<span class=\"string\">&quot;myData&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmyData.saveData(<span class=\"string\">&quot;This is my data&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">\t\tmyData.getData();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>See the output of application:</p>\n<pre><code>he Data is going to be saved\nSaving the data: This is my data\nThe Data has been saved\n-----------------\nReady to get the data\nGet the data: This is my data\nThe return value is: This is my data \nThe data has been got\n-----------------\nThrow exception is: null\nException in thread &quot;main&quot; java.lang.NullPointerException\nat java.lang.String.concat(String.java:1970)\nat spring.test.aop.MyData.concatData(MyData.java:17)\nat spring.test.aop.MyData$$FastClassBySpringCGLIB$$731fbdfd.invoke(&lt;generated&gt;)\nat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\nat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\nat org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\nat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\nat spring.test.aop.MyData$$EnhancerBySpringCGLIB$$5a76fbda.concatData(&lt;generated&gt;)\nat spring.test.aop.App.main(App.java:21)\n</code></pre>"},{"title":"Spring AOP - @AspectJ Annotation","date":"2015-06-16T09:46:08.000Z","comments":1,"_content":"\nIn this article, we introduce how to use `AOP` with the `@AspectJ` Annotation. If we want to use this Annotation. we should include below code in the XML schema-based configuration file.\n\n``` xml\n <aop:aspectj-autoproxy/> \n``` \n\nAnd also you need to add these libraries to your project, *aspectjrt.jar*, *aspectjweaver.jar*, *aspectj.jar* and *aopalliance.jar*.\n\n<!-- more -->\n#### Declare Aspect\nUsing `@Aspect` annotation to the class which you want to appoint it as an `Aspect`.\n\n``` java\n@Aspect\npublic class MyLogging {\n\t// some codes in here\n}\n```\n\n#### Declare Pointcut\nDeclaring pointcut in your aspect module with `@Pointcut` annotation.\n``` java\n@Aspect\npublic class MyLogging {\n\t\n\t@Pointcut(\"execution(* spring.test.aop.MyData.saveData(..))\")\n\tprivate void saveDataPointcut() {\n\t\t\n\t}\n}\n```\nIn above codes, the pointcut is only work for *saveData* method of *MyData* class in the *spring.test.aop* package. To see the regular expression, go to [here](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-pointcuts-examples)\n\n#### Delcare Advice\nWe can declare more types of advice using specific annotation in the aspect module, like `@Before`, `@After`, `@AfterReturning`, `@AfterThrowing`, `@Around`. Let's see the codes directly.\n\n``` java \n@Aspect\npublic class MyLogging {\n\n\t@Pointcut(\"execution(* spring.test.aop.MyData.saveData(..))\")\n\tprivate void saveDataPointcut() {\n\n\t}\n\n\t@Before(\"saveDataPointcut()\")\n\tpublic void beforeSaveData() {\n\t\tSystem.out.println(\"The Data is going to be saved\");\n\t}\n\n\t@After(\"saveDataPointcut()\")\n\tpublic void afterSaveData() {\n\t\tSystem.out.println(\"The Data has been saved\");\n\t}\n\n\t@Before(\"execution(* spring.test.aop.MyData.getData())\")\n\tpublic void beforeGetData() {\n\t\tSystem.out.println(\"Ready to get the data\");\n\t}\n\n\t@After(\"execution(* spring.test.aop.*.getData())\")\n\tpublic void afterGetData() {\n\t\tSystem.out.println(\"The data has been got\");\n\t}\n\n\t@AfterReturning(pointcut = \"execution(* spring.test.aop.MyData.getData())\", returning = \"returnValue\")\n\tpublic void afterReturningAdvice(Object returnValue) {\n\t\tSystem.out.println(String.format(\"The return value is: %s \",\n\t\t\t\treturnValue.toString()));\n\t}\n\n\t@AfterThrowing(pointcut = \"execution(* spring.test.aop.*.concatData(..))\", throwing = \"ex\")\n\tpublic void throwingAdvice(NullPointerException ex) {\n\t\tSystem.out.println(String.format(\"Throw exception is: %s\",\n\t\t\t\tex.getMessage()));\n\t}\n\n\t@Around(\"saveDataPointcut()\")\n\tpublic void aroundAdvice(ProceedingJoinPoint point) throws Throwable {\n\t\tSystem.out.println(\"Saving Data....\");\n\n\t\tpoint.proceed();\n\n\t\tSystem.out.println(\"Saved Data!\");\n\t}\n\n}\n```\nYou can specify the pointcut name or pointcut expression to advice. whatever you want. One important thing is you must let the advice know which pointcut works for.\n\n#### Simple Instance\n``` java MyData.java\npackage spring.test.aop;\n\npublic class MyData {\n\tpublic String data;\n\n\tpublic void saveData(String data) {\n\t\tSystem.out.println(\"Saving the data: \" + data);\n\t\tthis.data = data;\n\t}\n\n\tpublic String getData() {\n\t\tSystem.out.println(\"Get the data: \" + this.data);\n\t\treturn this.data;\n\t}\n\t\n\tpublic void concatData(String data) {\n\t\tthis.data.concat(data);\n\t}\n}\n```\n\n``` java MyLogging.java\npackage spring.test.aop;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\n\n@Aspect\npublic class MyLogging {\n\n\t@Pointcut(\"execution(* spring.test.aop.MyData.saveData(..))\")\n\tprivate void saveDataPointcut() {\n\n\t}\n\n\t@Before(\"saveDataPointcut()\")\n\tpublic void beforeSaveData() {\n\t\tSystem.out.println(\"The Data is going to be saved\");\n\t}\n\n\t@After(\"saveDataPointcut()\")\n\tpublic void afterSaveData() {\n\t\tSystem.out.println(\"The Data has been saved\");\n\t}\n\n\t@Before(\"execution(* spring.test.aop.MyData.getData())\")\n\tpublic void beforeGetData() {\n\t\tSystem.out.println(\"Ready to get the data\");\n\t}\n\n\t@After(\"execution(* spring.test.aop.*.getData())\")\n\tpublic void afterGetData() {\n\t\tSystem.out.println(\"The data has been got\");\n\t}\n\n\t@AfterReturning(pointcut = \"execution(* spring.test.aop.MyData.getData())\", returning = \"returnValue\")\n\tpublic void afterReturningAdvice(Object returnValue) {\n\t\tSystem.out.println(String.format(\"The return value is: %s \",\n\t\t\t\treturnValue.toString()));\n\t}\n\n\t@AfterThrowing(pointcut = \"execution(* spring.test.aop.*.concatData(..))\", throwing = \"ex\")\n\tpublic void throwingAdvice(NullPointerException ex) {\n\t\tSystem.out.println(String.format(\"Throw exception is: %s\",\n\t\t\t\tex.getMessage()));\n\t}\n\n\t@Around(\"saveDataPointcut()\")\n\tpublic void aroundAdvice(ProceedingJoinPoint point) throws Throwable {\n\t\tSystem.out.println(\"Saving Data....\");\n\n\t\tpoint.proceed();\n\n\t\tSystem.out.println(\"Saved Data!\");\n\t}\n\n}\n```\n``` xml springConfig.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd \n    http://www.springframework.org/schema/aop \n    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \">\n    \n    <aop:aspectj-autoproxy/>\n\t\n\t<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\t\n\t<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n</beans>\n```\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext context;\n\n\tpublic static void main(String[] args) {\n\t\tcontext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\n\t\tMyData myData = (MyData) context.getBean(\"myData\");\n\n\t\tmyData.saveData(\"35\");\n\t\t\n\t\tSystem.out.println(\"-----------------\");\n\t\tmyData.getData();\n\t\t\n\t\tSystem.out.println(\"-----------------\");\n\t\tmyData.concatData(null);\n\t}\n\n}\n```\n\nOkay, run above simple instance. the output is below:\n\n\tSaving Data....\n\tThe Data is going to be saved\n\tSaving the data: 35\n\tSaved Data!\n\tThe Data has been saved\n\t-----------------\n\tReady to get the data\n\tGet the data: 35\n\tThe data has been got\n\tThe return value is: 35 \n\t-----------------\n\tThrow exception is: null\n\tException in thread \"main\" java.lang.NullPointerException\n\t...","source":"_posts/2015-06-16-spring-aop-at-aspectj-annotation.markdown","raw":"---\n\ntitle: \"Spring AOP - @AspectJ Annotation\"\ndate: 2015-06-16 17:46:08 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n\nIn this article, we introduce how to use `AOP` with the `@AspectJ` Annotation. If we want to use this Annotation. we should include below code in the XML schema-based configuration file.\n\n``` xml\n <aop:aspectj-autoproxy/> \n``` \n\nAnd also you need to add these libraries to your project, *aspectjrt.jar*, *aspectjweaver.jar*, *aspectj.jar* and *aopalliance.jar*.\n\n<!-- more -->\n#### Declare Aspect\nUsing `@Aspect` annotation to the class which you want to appoint it as an `Aspect`.\n\n``` java\n@Aspect\npublic class MyLogging {\n\t// some codes in here\n}\n```\n\n#### Declare Pointcut\nDeclaring pointcut in your aspect module with `@Pointcut` annotation.\n``` java\n@Aspect\npublic class MyLogging {\n\t\n\t@Pointcut(\"execution(* spring.test.aop.MyData.saveData(..))\")\n\tprivate void saveDataPointcut() {\n\t\t\n\t}\n}\n```\nIn above codes, the pointcut is only work for *saveData* method of *MyData* class in the *spring.test.aop* package. To see the regular expression, go to [here](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-pointcuts-examples)\n\n#### Delcare Advice\nWe can declare more types of advice using specific annotation in the aspect module, like `@Before`, `@After`, `@AfterReturning`, `@AfterThrowing`, `@Around`. Let's see the codes directly.\n\n``` java \n@Aspect\npublic class MyLogging {\n\n\t@Pointcut(\"execution(* spring.test.aop.MyData.saveData(..))\")\n\tprivate void saveDataPointcut() {\n\n\t}\n\n\t@Before(\"saveDataPointcut()\")\n\tpublic void beforeSaveData() {\n\t\tSystem.out.println(\"The Data is going to be saved\");\n\t}\n\n\t@After(\"saveDataPointcut()\")\n\tpublic void afterSaveData() {\n\t\tSystem.out.println(\"The Data has been saved\");\n\t}\n\n\t@Before(\"execution(* spring.test.aop.MyData.getData())\")\n\tpublic void beforeGetData() {\n\t\tSystem.out.println(\"Ready to get the data\");\n\t}\n\n\t@After(\"execution(* spring.test.aop.*.getData())\")\n\tpublic void afterGetData() {\n\t\tSystem.out.println(\"The data has been got\");\n\t}\n\n\t@AfterReturning(pointcut = \"execution(* spring.test.aop.MyData.getData())\", returning = \"returnValue\")\n\tpublic void afterReturningAdvice(Object returnValue) {\n\t\tSystem.out.println(String.format(\"The return value is: %s \",\n\t\t\t\treturnValue.toString()));\n\t}\n\n\t@AfterThrowing(pointcut = \"execution(* spring.test.aop.*.concatData(..))\", throwing = \"ex\")\n\tpublic void throwingAdvice(NullPointerException ex) {\n\t\tSystem.out.println(String.format(\"Throw exception is: %s\",\n\t\t\t\tex.getMessage()));\n\t}\n\n\t@Around(\"saveDataPointcut()\")\n\tpublic void aroundAdvice(ProceedingJoinPoint point) throws Throwable {\n\t\tSystem.out.println(\"Saving Data....\");\n\n\t\tpoint.proceed();\n\n\t\tSystem.out.println(\"Saved Data!\");\n\t}\n\n}\n```\nYou can specify the pointcut name or pointcut expression to advice. whatever you want. One important thing is you must let the advice know which pointcut works for.\n\n#### Simple Instance\n``` java MyData.java\npackage spring.test.aop;\n\npublic class MyData {\n\tpublic String data;\n\n\tpublic void saveData(String data) {\n\t\tSystem.out.println(\"Saving the data: \" + data);\n\t\tthis.data = data;\n\t}\n\n\tpublic String getData() {\n\t\tSystem.out.println(\"Get the data: \" + this.data);\n\t\treturn this.data;\n\t}\n\t\n\tpublic void concatData(String data) {\n\t\tthis.data.concat(data);\n\t}\n}\n```\n\n``` java MyLogging.java\npackage spring.test.aop;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\n\n@Aspect\npublic class MyLogging {\n\n\t@Pointcut(\"execution(* spring.test.aop.MyData.saveData(..))\")\n\tprivate void saveDataPointcut() {\n\n\t}\n\n\t@Before(\"saveDataPointcut()\")\n\tpublic void beforeSaveData() {\n\t\tSystem.out.println(\"The Data is going to be saved\");\n\t}\n\n\t@After(\"saveDataPointcut()\")\n\tpublic void afterSaveData() {\n\t\tSystem.out.println(\"The Data has been saved\");\n\t}\n\n\t@Before(\"execution(* spring.test.aop.MyData.getData())\")\n\tpublic void beforeGetData() {\n\t\tSystem.out.println(\"Ready to get the data\");\n\t}\n\n\t@After(\"execution(* spring.test.aop.*.getData())\")\n\tpublic void afterGetData() {\n\t\tSystem.out.println(\"The data has been got\");\n\t}\n\n\t@AfterReturning(pointcut = \"execution(* spring.test.aop.MyData.getData())\", returning = \"returnValue\")\n\tpublic void afterReturningAdvice(Object returnValue) {\n\t\tSystem.out.println(String.format(\"The return value is: %s \",\n\t\t\t\treturnValue.toString()));\n\t}\n\n\t@AfterThrowing(pointcut = \"execution(* spring.test.aop.*.concatData(..))\", throwing = \"ex\")\n\tpublic void throwingAdvice(NullPointerException ex) {\n\t\tSystem.out.println(String.format(\"Throw exception is: %s\",\n\t\t\t\tex.getMessage()));\n\t}\n\n\t@Around(\"saveDataPointcut()\")\n\tpublic void aroundAdvice(ProceedingJoinPoint point) throws Throwable {\n\t\tSystem.out.println(\"Saving Data....\");\n\n\t\tpoint.proceed();\n\n\t\tSystem.out.println(\"Saved Data!\");\n\t}\n\n}\n```\n``` xml springConfig.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd \n    http://www.springframework.org/schema/aop \n    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd \">\n    \n    <aop:aspectj-autoproxy/>\n\t\n\t<bean id=\"myLogging\" class=\"spring.test.aop.MyLogging\" />\n\t\n\t<bean id=\"myData\" class=\"spring.test.aop.MyData\" />\n</beans>\n```\n\n``` java App.java\npackage spring.test.aop;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App {\n\n\tprivate static ApplicationContext context;\n\n\tpublic static void main(String[] args) {\n\t\tcontext = new ClassPathXmlApplicationContext(\"springConfig.xml\");\n\n\t\tMyData myData = (MyData) context.getBean(\"myData\");\n\n\t\tmyData.saveData(\"35\");\n\t\t\n\t\tSystem.out.println(\"-----------------\");\n\t\tmyData.getData();\n\t\t\n\t\tSystem.out.println(\"-----------------\");\n\t\tmyData.concatData(null);\n\t}\n\n}\n```\n\nOkay, run above simple instance. the output is below:\n\n\tSaving Data....\n\tThe Data is going to be saved\n\tSaving the data: 35\n\tSaved Data!\n\tThe Data has been saved\n\t-----------------\n\tReady to get the data\n\tGet the data: 35\n\tThe data has been got\n\tThe return value is: 35 \n\t-----------------\n\tThrow exception is: null\n\tException in thread \"main\" java.lang.NullPointerException\n\t...","slug":"2015-06-16-spring-aop-at-aspectj-annotation","published":1,"updated":"2023-09-02T17:32:57.092Z","_id":"clm27g4oq003fazv54hhw2ho9","layout":"post","photos":[],"link":"","content":"<p>In this article, we introduce how to use <code>AOP</code> with the <code>@AspectJ</code> Annotation. If we want to use this Annotation. we should include below code in the XML schema-based configuration file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>And also you need to add these libraries to your project, <em>aspectjrt.jar</em>, <em>aspectjweaver.jar</em>, <em>aspectj.jar</em> and <em>aopalliance.jar</em>.</p>\n<span id=\"more\"></span>\n<h4 id=\"Declare-Aspect\"><a href=\"#Declare-Aspect\" class=\"headerlink\" title=\"Declare Aspect\"></a>Declare Aspect</h4><p>Using <code>@Aspect</code> annotation to the class which you want to appoint it as an <code>Aspect</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// some codes in here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Declare-Pointcut\"><a href=\"#Declare-Pointcut\" class=\"headerlink\" title=\"Declare Pointcut\"></a>Declare Pointcut</h4><p>Declaring pointcut in your aspect module with <code>@Pointcut</code> annotation.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveDataPointcut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In above codes, the pointcut is only work for <em>saveData</em> method of <em>MyData</em> class in the <em>spring.test.aop</em> package. To see the regular expression, go to <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-pointcuts-examples\">here</a></p>\n<h4 id=\"Delcare-Advice\"><a href=\"#Delcare-Advice\" class=\"headerlink\" title=\"Delcare Advice\"></a>Delcare Advice</h4><p>We can declare more types of advice using specific annotation in the aspect module, like <code>@Before</code>, <code>@After</code>, <code>@AfterReturning</code>, <code>@AfterThrowing</code>, <code>@Around</code>. Let’s see the codes directly.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveDataPointcut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data is going to be saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data has been saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;execution(* spring.test.aop.MyData.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Ready to get the data&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;execution(* spring.test.aop.*.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The data has been got&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterReturning(pointcut = &quot;execution(* spring.test.aop.MyData.getData())&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningAdvice</span><span class=\"params\">(Object returnValue)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;The return value is: %s &quot;</span>,</span><br><span class=\"line\">\t\t\t\treturnValue.toString()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterThrowing(pointcut = &quot;execution(* spring.test.aop.*.concatData(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwingAdvice</span><span class=\"params\">(NullPointerException ex)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;Throw exception is: %s&quot;</span>,</span><br><span class=\"line\">\t\t\t\tex.getMessage()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Around(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving Data....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpoint.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saved Data!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You can specify the pointcut name or pointcut expression to advice. whatever you want. One important thing is you must let the advice know which pointcut works for.</p>\n<h4 id=\"Simple-Instance\"><a href=\"#Simple-Instance\" class=\"headerlink\" title=\"Simple Instance\"></a>Simple Instance</h4><figure class=\"highlight java\"><figcaption><span>MyData.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving the data: &quot;</span> + data);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Get the data: &quot;</span> + <span class=\"built_in\">this</span>.data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">concatData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data.concat(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyLogging.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveDataPointcut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data is going to be saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data has been saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;execution(* spring.test.aop.MyData.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Ready to get the data&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;execution(* spring.test.aop.*.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The data has been got&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterReturning(pointcut = &quot;execution(* spring.test.aop.MyData.getData())&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningAdvice</span><span class=\"params\">(Object returnValue)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;The return value is: %s &quot;</span>,</span><br><span class=\"line\">\t\t\t\treturnValue.toString()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterThrowing(pointcut = &quot;execution(* spring.test.aop.*.concatData(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwingAdvice</span><span class=\"params\">(NullPointerException ex)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;Throw exception is: %s&quot;</span>,</span><br><span class=\"line\">\t\t\t\tex.getMessage()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Around(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving Data....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpoint.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saved Data!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tcontext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">MyData</span> <span class=\"variable\">myData</span> <span class=\"operator\">=</span> (MyData) context.getBean(<span class=\"string\">&quot;myData&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmyData.saveData(<span class=\"string\">&quot;35&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">\t\tmyData.getData();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">\t\tmyData.concatData(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Okay, run above simple instance. the output is below:</p>\n<pre><code>Saving Data....\nThe Data is going to be saved\nSaving the data: 35\nSaved Data!\nThe Data has been saved\n-----------------\nReady to get the data\nGet the data: 35\nThe data has been got\nThe return value is: 35 \n-----------------\nThrow exception is: null\nException in thread &quot;main&quot; java.lang.NullPointerException\n...\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>In this article, we introduce how to use <code>AOP</code> with the <code>@AspectJ</code> Annotation. If we want to use this Annotation. we should include below code in the XML schema-based configuration file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>And also you need to add these libraries to your project, <em>aspectjrt.jar</em>, <em>aspectjweaver.jar</em>, <em>aspectj.jar</em> and <em>aopalliance.jar</em>.</p>","more":"<h4 id=\"Declare-Aspect\"><a href=\"#Declare-Aspect\" class=\"headerlink\" title=\"Declare Aspect\"></a>Declare Aspect</h4><p>Using <code>@Aspect</code> annotation to the class which you want to appoint it as an <code>Aspect</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// some codes in here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Declare-Pointcut\"><a href=\"#Declare-Pointcut\" class=\"headerlink\" title=\"Declare Pointcut\"></a>Declare Pointcut</h4><p>Declaring pointcut in your aspect module with <code>@Pointcut</code> annotation.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveDataPointcut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In above codes, the pointcut is only work for <em>saveData</em> method of <em>MyData</em> class in the <em>spring.test.aop</em> package. To see the regular expression, go to <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-pointcuts-examples\">here</a></p>\n<h4 id=\"Delcare-Advice\"><a href=\"#Delcare-Advice\" class=\"headerlink\" title=\"Delcare Advice\"></a>Delcare Advice</h4><p>We can declare more types of advice using specific annotation in the aspect module, like <code>@Before</code>, <code>@After</code>, <code>@AfterReturning</code>, <code>@AfterThrowing</code>, <code>@Around</code>. Let’s see the codes directly.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveDataPointcut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data is going to be saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data has been saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;execution(* spring.test.aop.MyData.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Ready to get the data&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;execution(* spring.test.aop.*.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The data has been got&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterReturning(pointcut = &quot;execution(* spring.test.aop.MyData.getData())&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningAdvice</span><span class=\"params\">(Object returnValue)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;The return value is: %s &quot;</span>,</span><br><span class=\"line\">\t\t\t\treturnValue.toString()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterThrowing(pointcut = &quot;execution(* spring.test.aop.*.concatData(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwingAdvice</span><span class=\"params\">(NullPointerException ex)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;Throw exception is: %s&quot;</span>,</span><br><span class=\"line\">\t\t\t\tex.getMessage()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Around(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving Data....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpoint.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saved Data!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You can specify the pointcut name or pointcut expression to advice. whatever you want. One important thing is you must let the advice know which pointcut works for.</p>\n<h4 id=\"Simple-Instance\"><a href=\"#Simple-Instance\" class=\"headerlink\" title=\"Simple Instance\"></a>Simple Instance</h4><figure class=\"highlight java\"><figcaption><span>MyData.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyData</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving the data: &quot;</span> + data);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Get the data: &quot;</span> + <span class=\"built_in\">this</span>.data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">concatData</span><span class=\"params\">(String data)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.data.concat(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>MyLogging.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLogging</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveDataPointcut</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data is going to be saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSaveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The Data has been saved&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before(&quot;execution(* spring.test.aop.MyData.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Ready to get the data&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@After(&quot;execution(* spring.test.aop.*.getData())&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterGetData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;The data has been got&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterReturning(pointcut = &quot;execution(* spring.test.aop.MyData.getData())&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningAdvice</span><span class=\"params\">(Object returnValue)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;The return value is: %s &quot;</span>,</span><br><span class=\"line\">\t\t\t\treturnValue.toString()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@AfterThrowing(pointcut = &quot;execution(* spring.test.aop.*.concatData(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwingAdvice</span><span class=\"params\">(NullPointerException ex)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;Throw exception is: %s&quot;</span>,</span><br><span class=\"line\">\t\t\t\tex.getMessage()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Around(&quot;saveDataPointcut()&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saving Data....&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpoint.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Saved Data!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myLogging&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myData&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><figcaption><span>App.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> spring.test.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tcontext = <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;springConfig.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">MyData</span> <span class=\"variable\">myData</span> <span class=\"operator\">=</span> (MyData) context.getBean(<span class=\"string\">&quot;myData&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmyData.saveData(<span class=\"string\">&quot;35&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">\t\tmyData.getData();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">\t\tmyData.concatData(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Okay, run above simple instance. the output is below:</p>\n<pre><code>Saving Data....\nThe Data is going to be saved\nSaving the data: 35\nSaved Data!\nThe Data has been saved\n-----------------\nReady to get the data\nGet the data: 35\nThe data has been got\nThe return value is: 35 \n-----------------\nThrow exception is: null\nException in thread &quot;main&quot; java.lang.NullPointerException\n...\n</code></pre>"},{"title":"Implicit submission of form when pressing enter key","date":"2015-06-30T07:08:03.000Z","comments":1,"_content":"As we know, if we want to submit data in the form, we just need to create a *input* or *button* element in the form and give them the *submit* value to the type attribute. Or using javascript to call `form.submit()`.\n\nBut there is third way to submit form. That's the implicit submission of form when pressing the enter key under some situations. The form implicit subbmission supported by all browsers, and html spec strongly recommand do this.\n<!-- more -->\n#### Implicit submission situation 1\nThe form will be submitted automatically when there is only one input element in the form and pressing the enter key in the input element.\n\n``` html\n<form action=\"/abc.txt\">\n\t<label for=\"name\">Name:</label>\n\t<input id=\"name\" name=\"name\" type=\"text\" />\n</form>\n```\nThe form will be submitted and get the data from *abc.txt* file when we press the enter key in the input element.\n\nBut if the form has multiple input elements, the form can not be submitted automatically. like below codes.\n\n``` html\n<form action=\"/abc.txt\">\n\t<label for=\"name\">Name:</label>\n\t<input type=\"text\" id=\"name\" name=\"name\">\n\t<label for=\"age\">Age:</label>\n\t<input type=\"text\" id=\"age\" name=\"age\">\n</form>\n```\n\n#### Implicit submission situation 2\nFor multiple input elements in the form situation, the form can not be submitted automatically. So how to make it implicit submission. This is second situation we are introducing.\n\nIf the form has *submit* type element(input, button), the form will be submitted when pressing the enter key in the input element regardless of how many input elements in this form.\n\n``` html \n<form action=\"/abc.txt\">\n\t<label for=\"name\">Name:</label>\n\t<input type=\"text\" id=\"name\" name=\"name\">\n\t<label for=\"age\">Age:</label>\n\t<input type=\"text\" id=\"age\" name=\"age\">\n\t<input type=\"submit\">\n</form>\n```\n\nIf you need to run some JavaScript before the form is submitted (validation, data manipulation, etc), do it in a `submit` event handler on the form, not a `click` handler on a button.\n\n#### How to suppress it\nThe solution is very simple, just prevent the event trigger when pressing the enter key. So we can deal with it in the `keypress` event handler.\n\n``` html\n\t<form action=\"/abc.txt\">\n\t\t<label for=\"name\">Name:</label>\n\t\t<input type=\"text\" id=\"name\" name=\"name\">\n\t\t<label for=\"age\">Age:</label>\n\t\t<input type=\"text\" id=\"age\" name=\"age\">\n\t\t<input type=\"submit\">\n\t</form>\n\t<script>\n\t\t(function(){\n\t\t\tvar age = document.getElementById('age');\n\t\t\tage.addEventListener('keypress',function(event){\n\t\t\t\tif(event.keyCode == 13) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\t\t}());\n\t</script>\n```\nNote, the code of enter key is 13. Using `event.preventDefault()` to stop the form submission when the keycode is 13. And for above codes, we only suppress the age input element, so when pressing enter key in the name input element, the form still is submitted.","source":"_posts/2015-06-30-implicit-submission-of-form-when-pressing-enter-key.markdown","raw":"---\n\ntitle: \"Implicit submission of form when pressing enter key\"\ndate: 2015-06-30 15:08:03 +0800\ncomments: true\ncategories: Frontend\ntags: [HTML, HTML5]\n---\nAs we know, if we want to submit data in the form, we just need to create a *input* or *button* element in the form and give them the *submit* value to the type attribute. Or using javascript to call `form.submit()`.\n\nBut there is third way to submit form. That's the implicit submission of form when pressing the enter key under some situations. The form implicit subbmission supported by all browsers, and html spec strongly recommand do this.\n<!-- more -->\n#### Implicit submission situation 1\nThe form will be submitted automatically when there is only one input element in the form and pressing the enter key in the input element.\n\n``` html\n<form action=\"/abc.txt\">\n\t<label for=\"name\">Name:</label>\n\t<input id=\"name\" name=\"name\" type=\"text\" />\n</form>\n```\nThe form will be submitted and get the data from *abc.txt* file when we press the enter key in the input element.\n\nBut if the form has multiple input elements, the form can not be submitted automatically. like below codes.\n\n``` html\n<form action=\"/abc.txt\">\n\t<label for=\"name\">Name:</label>\n\t<input type=\"text\" id=\"name\" name=\"name\">\n\t<label for=\"age\">Age:</label>\n\t<input type=\"text\" id=\"age\" name=\"age\">\n</form>\n```\n\n#### Implicit submission situation 2\nFor multiple input elements in the form situation, the form can not be submitted automatically. So how to make it implicit submission. This is second situation we are introducing.\n\nIf the form has *submit* type element(input, button), the form will be submitted when pressing the enter key in the input element regardless of how many input elements in this form.\n\n``` html \n<form action=\"/abc.txt\">\n\t<label for=\"name\">Name:</label>\n\t<input type=\"text\" id=\"name\" name=\"name\">\n\t<label for=\"age\">Age:</label>\n\t<input type=\"text\" id=\"age\" name=\"age\">\n\t<input type=\"submit\">\n</form>\n```\n\nIf you need to run some JavaScript before the form is submitted (validation, data manipulation, etc), do it in a `submit` event handler on the form, not a `click` handler on a button.\n\n#### How to suppress it\nThe solution is very simple, just prevent the event trigger when pressing the enter key. So we can deal with it in the `keypress` event handler.\n\n``` html\n\t<form action=\"/abc.txt\">\n\t\t<label for=\"name\">Name:</label>\n\t\t<input type=\"text\" id=\"name\" name=\"name\">\n\t\t<label for=\"age\">Age:</label>\n\t\t<input type=\"text\" id=\"age\" name=\"age\">\n\t\t<input type=\"submit\">\n\t</form>\n\t<script>\n\t\t(function(){\n\t\t\tvar age = document.getElementById('age');\n\t\t\tage.addEventListener('keypress',function(event){\n\t\t\t\tif(event.keyCode == 13) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\t\t}());\n\t</script>\n```\nNote, the code of enter key is 13. Using `event.preventDefault()` to stop the form submission when the keycode is 13. And for above codes, we only suppress the age input element, so when pressing enter key in the name input element, the form still is submitted.","slug":"2015-06-30-implicit-submission-of-form-when-pressing-enter-key","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4oq003hazv58kmefqec","layout":"post","photos":[],"link":"","content":"<p>As we know, if we want to submit data in the form, we just need to create a <em>input</em> or <em>button</em> element in the form and give them the <em>submit</em> value to the type attribute. Or using javascript to call <code>form.submit()</code>.</p>\n<p>But there is third way to submit form. That’s the implicit submission of form when pressing the enter key under some situations. The form implicit subbmission supported by all browsers, and html spec strongly recommand do this.</p>\n<span id=\"more\"></span>\n<h4 id=\"Implicit-submission-situation-1\"><a href=\"#Implicit-submission-situation-1\" class=\"headerlink\" title=\"Implicit submission situation 1\"></a>Implicit submission situation 1</h4><p>The form will be submitted automatically when there is only one input element in the form and pressing the enter key in the input element.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The form will be submitted and get the data from <em>abc.txt</em> file when we press the enter key in the input element.</p>\n<p>But if the form has multiple input elements, the form can not be submitted automatically. like below codes.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Implicit-submission-situation-2\"><a href=\"#Implicit-submission-situation-2\" class=\"headerlink\" title=\"Implicit submission situation 2\"></a>Implicit submission situation 2</h4><p>For multiple input elements in the form situation, the form can not be submitted automatically. So how to make it implicit submission. This is second situation we are introducing.</p>\n<p>If the form has <em>submit</em> type element(input, button), the form will be submitted when pressing the enter key in the input element regardless of how many input elements in this form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you need to run some JavaScript before the form is submitted (validation, data manipulation, etc), do it in a <code>submit</code> event handler on the form, not a <code>click</code> handler on a button.</p>\n<h4 id=\"How-to-suppress-it\"><a href=\"#How-to-suppress-it\" class=\"headerlink\" title=\"How to suppress it\"></a>How to suppress it</h4><p>The solution is very simple, just prevent the event trigger when pressing the enter key. So we can deal with it in the <code>keypress</code> event handler.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> age = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;age&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tage.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keypress&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">if</span>(event.<span class=\"property\">keyCode</span> == <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\tevent.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note, the code of enter key is 13. Using <code>event.preventDefault()</code> to stop the form submission when the keycode is 13. And for above codes, we only suppress the age input element, so when pressing enter key in the name input element, the form still is submitted.</p>\n","site":{"data":{}},"excerpt":"<p>As we know, if we want to submit data in the form, we just need to create a <em>input</em> or <em>button</em> element in the form and give them the <em>submit</em> value to the type attribute. Or using javascript to call <code>form.submit()</code>.</p>\n<p>But there is third way to submit form. That’s the implicit submission of form when pressing the enter key under some situations. The form implicit subbmission supported by all browsers, and html spec strongly recommand do this.</p>","more":"<h4 id=\"Implicit-submission-situation-1\"><a href=\"#Implicit-submission-situation-1\" class=\"headerlink\" title=\"Implicit submission situation 1\"></a>Implicit submission situation 1</h4><p>The form will be submitted automatically when there is only one input element in the form and pressing the enter key in the input element.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The form will be submitted and get the data from <em>abc.txt</em> file when we press the enter key in the input element.</p>\n<p>But if the form has multiple input elements, the form can not be submitted automatically. like below codes.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Implicit-submission-situation-2\"><a href=\"#Implicit-submission-situation-2\" class=\"headerlink\" title=\"Implicit submission situation 2\"></a>Implicit submission situation 2</h4><p>For multiple input elements in the form situation, the form can not be submitted automatically. So how to make it implicit submission. This is second situation we are introducing.</p>\n<p>If the form has <em>submit</em> type element(input, button), the form will be submitted when pressing the enter key in the input element regardless of how many input elements in this form.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you need to run some JavaScript before the form is submitted (validation, data manipulation, etc), do it in a <code>submit</code> event handler on the form, not a <code>click</code> handler on a button.</p>\n<h4 id=\"How-to-suppress-it\"><a href=\"#How-to-suppress-it\" class=\"headerlink\" title=\"How to suppress it\"></a>How to suppress it</h4><p>The solution is very simple, just prevent the event trigger when pressing the enter key. So we can deal with it in the <code>keypress</code> event handler.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span>Age:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> age = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;age&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tage.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keypress&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">if</span>(event.<span class=\"property\">keyCode</span> == <span class=\"number\">13</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\tevent.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;());</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Note, the code of enter key is 13. Using <code>event.preventDefault()</code> to stop the form submission when the keycode is 13. And for above codes, we only suppress the age input element, so when pressing enter key in the name input element, the form still is submitted.</p>"},{"title":"Using TSD to improve javascript intellisense of IDE","date":"2015-07-30T15:27:10.000Z","comments":1,"_content":"\nAs we know, it's very difficult to make the IDE to recognise the function of JavaScript, we called code intellisense, because JavaScript is weak language. So how to solve this problem. There is a way.\n\n`TSD` is TypeScript Definition manager for DefinitelyTyped. It can search and install `TypeScript` definition files directly from repository. The `TypeScript` definition file actually is TypeScript file, and TypeScript is strong type language. So IDE can intellisense the code, like Java and C#.\n\n`TypeScipt` is also like `CoffeeScript`, it can be compiled to `JavaScript`. It is developed by Microsoft company. To See the TypeScript, go to this official [website](http://www.typescriptlang.org/).\n\n<!-- more -->\n\nIf you used the `NPM` before, I believe you also can use `TSD` quickly. The `TSD` usage is very similar with `NPM`. And also it has `tsd.json` file to contains javascript libraries type definitions which you want to make them intellisense, just like `package.json` file of `NPM`.\n\nTo install it, we can using `NPM` command.\n\n```\nnpm install tsd -g\n```\n\nUse below command to search the DefinitelyTyped file of JavaScript library.\n\n```\ntsd query <javascript library name> -i -r\n```\n\nfor example, we search the definitelyTyped file of angular:\n\n```\ntsd query angular -i -r\n```\nthis will print below information:\n\n```\n- angularjs / angular\n   -> jquery > jquery\n    v latest\n    v 1.0.0\n    v 1.2.0\n   >> Angular JS 1.4            : angularjs.org\n    @ Diego Vilar               : github.com/diegovilar\n    < angular (external module)\n```\n\nTo install the definitelyTyped file into your project. Just follow below commands:\n\n```\ntsd install angular --save\n```\nalso like using NPM to install the package. For tsd, this will create `tsd.json` file firstly, and then create `typing` directory, put the related definitelytyped file which is the `.d.ts` extension TypeScript file. \n\nThe example of `tsd.json` file:\n\n``` json\n{\n  \"version\": \"v4\",\n  \"repo\": \"borisyankov/DefinitelyTyped\",\n  \"ref\": \"master\",\n  \"path\": \"typings\",\n  \"bundle\": \"typings/tsd.d.ts\",\n  \"installed\": {\n    \"angularjs/angular.d.ts\": {\n      \"commit\": \"383a3bc8e654a77eb8bd07d9feb7208735dcb6fa\"\n    },\n    \"jquery/jquery.d.ts\": {\n      \"commit\": \"383a3bc8e654a77eb8bd07d9feb7208735dcb6fa\"\n    }\n  }\n}\n```\n\nThe example of `tsd.d.ts` file, this file is reference the definitelytyped file. and it under the `typings` directory.\n\n``` javascript\n\t/// <reference path=\"angularjs/angular.d.ts\" />\n\t/// <reference path=\"jquery/jquery.d.ts\" />\n```\n\nSee below screenshots of files or directories:\n\n{% img /assets/images/legacy/tsd-file-tree.png 300 %}\n\nGo to [https://github.com/DefinitelyTyped/tsd](https://github.com/DefinitelyTyped/tsd) to see the tsd command details.\n\nAnd TSD has supports many javascript libraries, you can search them which you want in [definitelytyped repositorty](http://definitelytyped.org/tsd/).\n\nCurrently, I found this is only work on [Visual Studio Code](https://code.visualstudio.com/), The `VSCode` is cross platform web develop tools, include Linux, Windows and Mac OS.\n\nTo make the VSCode intellisense for javascript. you need to add tsd.d.ts file reference codes to your javascript file, like below.\n\n``` javascript\n /// <reference path=\"../../typings/tsd.d.ts\"/>\n```\n\nOkay, lets test the `underscore` javascript library, first install definitely typed file with TSD, and then put the reference code to the js file which is you are working.\n\n``` javascript\n/**\n * Created by yushi on 30/07/15.\n */\n \n/// <reference path=\"../../typings/tsd.d.ts\"/>\n  \nfunction sayHello(name){\n    return \"Hello \" + name;\n}\n```\nSo when you invoke the undercore functions, the IDE will intellisense the method.\n\n![intellisense](/assets/images/legacy/tsd-intellisense.png)\n\n","source":"_posts/2015-07-30-using-tsd-to-improve-javascript-intellisense-of-ide.markdown","raw":"---\n\ntitle: \"Using TSD to improve javascript intellisense of IDE\"\ndate: 2015-07-30 23:27:10 +0800\ncomments: true\ncategories: Frontend\ntags: [JavaScript, TypeScript, VSCode, Tool]\n---\n\nAs we know, it's very difficult to make the IDE to recognise the function of JavaScript, we called code intellisense, because JavaScript is weak language. So how to solve this problem. There is a way.\n\n`TSD` is TypeScript Definition manager for DefinitelyTyped. It can search and install `TypeScript` definition files directly from repository. The `TypeScript` definition file actually is TypeScript file, and TypeScript is strong type language. So IDE can intellisense the code, like Java and C#.\n\n`TypeScipt` is also like `CoffeeScript`, it can be compiled to `JavaScript`. It is developed by Microsoft company. To See the TypeScript, go to this official [website](http://www.typescriptlang.org/).\n\n<!-- more -->\n\nIf you used the `NPM` before, I believe you also can use `TSD` quickly. The `TSD` usage is very similar with `NPM`. And also it has `tsd.json` file to contains javascript libraries type definitions which you want to make them intellisense, just like `package.json` file of `NPM`.\n\nTo install it, we can using `NPM` command.\n\n```\nnpm install tsd -g\n```\n\nUse below command to search the DefinitelyTyped file of JavaScript library.\n\n```\ntsd query <javascript library name> -i -r\n```\n\nfor example, we search the definitelyTyped file of angular:\n\n```\ntsd query angular -i -r\n```\nthis will print below information:\n\n```\n- angularjs / angular\n   -> jquery > jquery\n    v latest\n    v 1.0.0\n    v 1.2.0\n   >> Angular JS 1.4            : angularjs.org\n    @ Diego Vilar               : github.com/diegovilar\n    < angular (external module)\n```\n\nTo install the definitelyTyped file into your project. Just follow below commands:\n\n```\ntsd install angular --save\n```\nalso like using NPM to install the package. For tsd, this will create `tsd.json` file firstly, and then create `typing` directory, put the related definitelytyped file which is the `.d.ts` extension TypeScript file. \n\nThe example of `tsd.json` file:\n\n``` json\n{\n  \"version\": \"v4\",\n  \"repo\": \"borisyankov/DefinitelyTyped\",\n  \"ref\": \"master\",\n  \"path\": \"typings\",\n  \"bundle\": \"typings/tsd.d.ts\",\n  \"installed\": {\n    \"angularjs/angular.d.ts\": {\n      \"commit\": \"383a3bc8e654a77eb8bd07d9feb7208735dcb6fa\"\n    },\n    \"jquery/jquery.d.ts\": {\n      \"commit\": \"383a3bc8e654a77eb8bd07d9feb7208735dcb6fa\"\n    }\n  }\n}\n```\n\nThe example of `tsd.d.ts` file, this file is reference the definitelytyped file. and it under the `typings` directory.\n\n``` javascript\n\t/// <reference path=\"angularjs/angular.d.ts\" />\n\t/// <reference path=\"jquery/jquery.d.ts\" />\n```\n\nSee below screenshots of files or directories:\n\n{% img /assets/images/legacy/tsd-file-tree.png 300 %}\n\nGo to [https://github.com/DefinitelyTyped/tsd](https://github.com/DefinitelyTyped/tsd) to see the tsd command details.\n\nAnd TSD has supports many javascript libraries, you can search them which you want in [definitelytyped repositorty](http://definitelytyped.org/tsd/).\n\nCurrently, I found this is only work on [Visual Studio Code](https://code.visualstudio.com/), The `VSCode` is cross platform web develop tools, include Linux, Windows and Mac OS.\n\nTo make the VSCode intellisense for javascript. you need to add tsd.d.ts file reference codes to your javascript file, like below.\n\n``` javascript\n /// <reference path=\"../../typings/tsd.d.ts\"/>\n```\n\nOkay, lets test the `underscore` javascript library, first install definitely typed file with TSD, and then put the reference code to the js file which is you are working.\n\n``` javascript\n/**\n * Created by yushi on 30/07/15.\n */\n \n/// <reference path=\"../../typings/tsd.d.ts\"/>\n  \nfunction sayHello(name){\n    return \"Hello \" + name;\n}\n```\nSo when you invoke the undercore functions, the IDE will intellisense the method.\n\n![intellisense](/assets/images/legacy/tsd-intellisense.png)\n\n","slug":"2015-07-30-using-tsd-to-improve-javascript-intellisense-of-ide","published":1,"updated":"2023-09-02T17:27:29.812Z","_id":"clm27g4or003iazv56jzx1hf7","layout":"post","photos":[],"link":"","content":"<p>As we know, it’s very difficult to make the IDE to recognise the function of JavaScript, we called code intellisense, because JavaScript is weak language. So how to solve this problem. There is a way.</p>\n<p><code>TSD</code> is TypeScript Definition manager for DefinitelyTyped. It can search and install <code>TypeScript</code> definition files directly from repository. The <code>TypeScript</code> definition file actually is TypeScript file, and TypeScript is strong type language. So IDE can intellisense the code, like Java and C#.</p>\n<p><code>TypeScipt</code> is also like <code>CoffeeScript</code>, it can be compiled to <code>JavaScript</code>. It is developed by Microsoft company. To See the TypeScript, go to this official <a href=\"http://www.typescriptlang.org/\">website</a>.</p>\n<span id=\"more\"></span>\n\n<p>If you used the <code>NPM</code> before, I believe you also can use <code>TSD</code> quickly. The <code>TSD</code> usage is very similar with <code>NPM</code>. And also it has <code>tsd.json</code> file to contains javascript libraries type definitions which you want to make them intellisense, just like <code>package.json</code> file of <code>NPM</code>.</p>\n<p>To install it, we can using <code>NPM</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install tsd -g</span><br></pre></td></tr></table></figure>\n\n<p>Use below command to search the DefinitelyTyped file of JavaScript library.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsd query &lt;javascript library name&gt; -i -r</span><br></pre></td></tr></table></figure>\n\n<p>for example, we search the definitelyTyped file of angular:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsd query angular -i -r</span><br></pre></td></tr></table></figure>\n<p>this will print below information:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- angularjs / angular</span><br><span class=\"line\">   -&gt; jquery &gt; jquery</span><br><span class=\"line\">    v latest</span><br><span class=\"line\">    v 1.0.0</span><br><span class=\"line\">    v 1.2.0</span><br><span class=\"line\">   &gt;&gt; Angular JS 1.4            : angularjs.org</span><br><span class=\"line\">    @ Diego Vilar               : github.com/diegovilar</span><br><span class=\"line\">    &lt; angular (external module)</span><br></pre></td></tr></table></figure>\n\n<p>To install the definitelyTyped file into your project. Just follow below commands:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsd install angular --save</span><br></pre></td></tr></table></figure>\n<p>also like using NPM to install the package. For tsd, this will create <code>tsd.json</code> file firstly, and then create <code>typing</code> directory, put the related definitelytyped file which is the <code>.d.ts</code> extension TypeScript file. </p>\n<p>The example of <code>tsd.json</code> file:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;repo&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;borisyankov/DefinitelyTyped&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;master&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;typings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;bundle&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;typings/tsd.d.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;installed&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;angularjs/angular.d.ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;383a3bc8e654a77eb8bd07d9feb7208735dcb6fa&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jquery/jquery.d.ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;383a3bc8e654a77eb8bd07d9feb7208735dcb6fa&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>The example of <code>tsd.d.ts</code> file, this file is reference the definitelytyped file. and it under the <code>typings</code> directory.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;angularjs/angular.d.ts&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;jquery/jquery.d.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>See below screenshots of files or directories:</p>\n<img src=\"/assets/images/legacy/tsd-file-tree.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/tsd-file-tree.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"300\">\n\n<p>Go to <a href=\"https://github.com/DefinitelyTyped/tsd\">https://github.com/DefinitelyTyped/tsd</a> to see the tsd command details.</p>\n<p>And TSD has supports many javascript libraries, you can search them which you want in <a href=\"http://definitelytyped.org/tsd/\">definitelytyped repositorty</a>.</p>\n<p>Currently, I found this is only work on <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, The <code>VSCode</code> is cross platform web develop tools, include Linux, Windows and Mac OS.</p>\n<p>To make the VSCode intellisense for javascript. you need to add tsd.d.ts file reference codes to your javascript file, like below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;../../typings/tsd.d.ts&quot;/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Okay, lets test the <code>underscore</code> javascript library, first install definitely typed file with TSD, and then put the reference code to the js file which is you are working.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 30/07/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;../../typings/tsd.d.ts&quot;/&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So when you invoke the undercore functions, the IDE will intellisense the method.</p>\n<p><img src=\"/assets/images/legacy/tsd-intellisense.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/tsd-intellisense.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"intellisense\"></p>\n","site":{"data":{}},"excerpt":"<p>As we know, it’s very difficult to make the IDE to recognise the function of JavaScript, we called code intellisense, because JavaScript is weak language. So how to solve this problem. There is a way.</p>\n<p><code>TSD</code> is TypeScript Definition manager for DefinitelyTyped. It can search and install <code>TypeScript</code> definition files directly from repository. The <code>TypeScript</code> definition file actually is TypeScript file, and TypeScript is strong type language. So IDE can intellisense the code, like Java and C#.</p>\n<p><code>TypeScipt</code> is also like <code>CoffeeScript</code>, it can be compiled to <code>JavaScript</code>. It is developed by Microsoft company. To See the TypeScript, go to this official <a href=\"http://www.typescriptlang.org/\">website</a>.</p>","more":"<p>If you used the <code>NPM</code> before, I believe you also can use <code>TSD</code> quickly. The <code>TSD</code> usage is very similar with <code>NPM</code>. And also it has <code>tsd.json</code> file to contains javascript libraries type definitions which you want to make them intellisense, just like <code>package.json</code> file of <code>NPM</code>.</p>\n<p>To install it, we can using <code>NPM</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install tsd -g</span><br></pre></td></tr></table></figure>\n\n<p>Use below command to search the DefinitelyTyped file of JavaScript library.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsd query &lt;javascript library name&gt; -i -r</span><br></pre></td></tr></table></figure>\n\n<p>for example, we search the definitelyTyped file of angular:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsd query angular -i -r</span><br></pre></td></tr></table></figure>\n<p>this will print below information:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- angularjs / angular</span><br><span class=\"line\">   -&gt; jquery &gt; jquery</span><br><span class=\"line\">    v latest</span><br><span class=\"line\">    v 1.0.0</span><br><span class=\"line\">    v 1.2.0</span><br><span class=\"line\">   &gt;&gt; Angular JS 1.4            : angularjs.org</span><br><span class=\"line\">    @ Diego Vilar               : github.com/diegovilar</span><br><span class=\"line\">    &lt; angular (external module)</span><br></pre></td></tr></table></figure>\n\n<p>To install the definitelyTyped file into your project. Just follow below commands:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsd install angular --save</span><br></pre></td></tr></table></figure>\n<p>also like using NPM to install the package. For tsd, this will create <code>tsd.json</code> file firstly, and then create <code>typing</code> directory, put the related definitelytyped file which is the <code>.d.ts</code> extension TypeScript file. </p>\n<p>The example of <code>tsd.json</code> file:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;repo&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;borisyankov/DefinitelyTyped&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ref&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;master&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;typings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;bundle&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;typings/tsd.d.ts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;installed&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;angularjs/angular.d.ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;383a3bc8e654a77eb8bd07d9feb7208735dcb6fa&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jquery/jquery.d.ts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;383a3bc8e654a77eb8bd07d9feb7208735dcb6fa&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>The example of <code>tsd.d.ts</code> file, this file is reference the definitelytyped file. and it under the <code>typings</code> directory.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;angularjs/angular.d.ts&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;jquery/jquery.d.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>See below screenshots of files or directories:</p>\n<img src=\"/assets/images/legacy/tsd-file-tree.png\" class=\"\" width=\"300\">\n\n<p>Go to <a href=\"https://github.com/DefinitelyTyped/tsd\">https://github.com/DefinitelyTyped/tsd</a> to see the tsd command details.</p>\n<p>And TSD has supports many javascript libraries, you can search them which you want in <a href=\"http://definitelytyped.org/tsd/\">definitelytyped repositorty</a>.</p>\n<p>Currently, I found this is only work on <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, The <code>VSCode</code> is cross platform web develop tools, include Linux, Windows and Mac OS.</p>\n<p>To make the VSCode intellisense for javascript. you need to add tsd.d.ts file reference codes to your javascript file, like below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;../../typings/tsd.d.ts&quot;/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Okay, lets test the <code>underscore</code> javascript library, first install definitely typed file with TSD, and then put the reference code to the js file which is you are working.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 30/07/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/// &lt;reference path=&quot;../../typings/tsd.d.ts&quot;/&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So when you invoke the undercore functions, the IDE will intellisense the method.</p>\n<p><img src=\"/assets/images/legacy/tsd-intellisense.png\" alt=\"intellisense\"></p>"},{"title":"How to get or post data via HttpClient with proxy","date":"2015-08-06T14:22:33.000Z","comments":1,"_content":"\nThe **HttpClient** is library which is support by apache. It can post or get data from specific  webservice and represents only the most basic contract for HTTP request execution.\n\nWe explain how to use this library with a example. In this example, we are going to use it to access the google tranlated API. Translating some text from specific language to other language. And this example using the Spring framework and Maven tool to build.\n\n<!-- more -->\n\nFirst, let us create our properties file which configures the google api url and some httpclient related stuff. Put it in our resource directory.\n\n``` java\ngoogle.translation.api=https://www.googleapis.com/language/translate/v2\nproxy.host=\nproxy.port=\nproxy.user=\nproxy.password=\n```\n\nAnd then we create the util class which access the properties file.\n\n``` java \npackage org.httpclient.tutorial.utils;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Properties;\n\n/**\n * Created by yushi on 8/7/15.\n */\n@Component\npublic final class ConstantUtil {\n\n    private static final String PROXY_HOST = \"proxy.host\";\n    private static final String PROXY_PORT = \"proxy.port\";\n    private static final String PROXY_USER = \"proxy.user\";\n    private static final String PROXY_PASSWORD = \"proxy.password\";\n    private static final String GOOGLE_TRANSLATION_API =\"google.translation.api\";\n\n    private Properties configurationProperties;\n\n\n    @Autowired\n    public ConstantUtil(Properties configurationProperties) {\n        this.configurationProperties = configurationProperties;\n    }\n\n    public String getProxyHost() {\n        return this.configurationProperties.getProperty(PROXY_HOST);\n    }\n\n    public int getProxyPort() {\n        return Integer.parseInt(this.configurationProperties.getProperty(PROXY_PORT));\n    }\n\n    public String getProxyUser() {\n        return this.configurationProperties.getProperty(PROXY_USER);\n    }\n\n    public String getProxyPassword() {\n        return this.configurationProperties.getProperty(PROXY_PASSWORD);\n    }\n\n    public String getGoogleTranslationApi() {\n        return  this.configurationProperties.getProperty(GOOGLE_TRANSLATION_API);\n    }\n}\n```\nSo our configuration is completed. We also will create the HttpClient which can be used to access the webservice.\n\n``` java\npackage org.httpclient.tutorial;\n\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.client.HttpClients;\nimport org.httpclient.tutorial.utils.ConstantUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by yushi on 8/7/15.\n */\n@Component\npublic final class HttpClientFactory {\n\n    private ConstantUtil constantUtil;\n\n    @Autowired\n    public HttpClientFactory(ConstantUtil constantUtil) {\n\n        this.constantUtil = constantUtil;\n    }\n\n    public CloseableHttpClient createHttpClient() {\n        return HttpClients.createDefault();\n    }\n\n    public HttpClientBuilder createHttpClientWithProxy() {\n\n        HttpHost proxy = new HttpHost(constantUtil.getProxyHost(), constantUtil.getProxyPort());\n        Credentials credentials = new UsernamePasswordCredentials(constantUtil.getProxyUser(), constantUtil.getProxyPassword());\n        AuthScope authScope = new AuthScope(constantUtil.getProxyHost(), constantUtil.getProxyPort());\n        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n        credentialsProvider.setCredentials(authScope, credentials);\n\n        return HttpClients.custom().setDefaultCredentialsProvider(credentialsProvider).setProxy(proxy);\n    }\n}\n```\nIn above codes, there are two methods, one is for default httpclient which is not need the proxy, another is httpclient with proxy.\n\nSo far, we have our own httpclient. let's create our own translation component with httpclient.\n\n``` java\npackage org.httpclient.tutorial;\n\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.util.EntityUtils;\nimport org.httpclient.tutorial.utils.ConstantUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by yushi on 8/7/15.\n */\n@Component\npublic final class TranslateCore {\n    private static final String KEY = \"AIzaSyAFaWbO3r-9FNeHU6Obj5tm6wWSnIAlBkg\";\n\n    private HttpClientFactory httpClientFactory;\n    private ConstantUtil constantUtil;\n\n    @Autowired\n    public TranslateCore(HttpClientFactory httpClientFactory, ConstantUtil constantUtil) {\n        this.httpClientFactory = httpClientFactory;\n        this.constantUtil = constantUtil;\n    }\n\n    public String translateContext(String sourceLanguage, String targetLanguage, String context) {\n        String url = String.format(\"%s?key=%s&source=%s&target=%s&q=%s&\", constantUtil.getGoogleTranslationApi(),\n                KEY, sourceLanguage, targetLanguage, context);\n\n        HttpGet httpGet = new HttpGet(url);\n        CloseableHttpClient httpClient = httpClientFactory.createHttpClient();\n\n        try {\n            CloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n            String result = EntityUtils.toString(httpResponse.getEntity());\n\n            return result;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n}\n```\nYou will notice that KEY constant variable, which is support by google developer, you need to register google developer and then get you developer key.\n\nTake your feet to [here](https://cloud.google.com/translate/v2/using_rest?hl=en)to see the google translate API usage.\n\nOkay, then creating translation interface:\n\n``` java\npackage org.httpclient.tutorial;\n\n/**\n * Created by yushi on 8/7/15.\n */\npublic interface ITranslation {\n    String translateToJapanese(String context);\n\n    String translateToChinese(String context);\n\n    String translate(String language, String context);\n}\n```\nLet's implement our translation interfer, in this class, we just translat english to other language.\n\n``` java \npackage org.httpclient.tutorial;\n\n/**\n * Created by yushi on 8/7/15.\n */\n\npublic class Translation implements ITranslation {\n    public static final String ZH = \"zh-CN\";\n    public static final String EN = \"en\";\n    public static final String JA = \"ja\";\n\n    private TranslateCore translateCore;\n\n    public Translation(TranslateCore translateCore) {\n        this.translateCore = translateCore;\n    }\n\n    @Override\n    public String translateToJapanese(String context) {\n        return translateCore.translateContext(EN, JA, context);\n    }\n\n    @Override\n    public String translateToChinese(String context) {\n        return translateCore.translateContext(EN, ZH, context);\n    }\n\n    @Override\n    public String translate(String language, String context) {\n        return translateCore.translateContext(EN, language, context);\n    }\n}\n```\n\nTo run our application.\n``` java \npackage org.httpclient.tutorial;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n\n/**\n * Created by yushi on 8/7/15.\n */\npublic class Application {\n\n    public static void main(String[] args) {\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"application-context.xml\");\n        ITranslation translation = (ITranslation)context.getBean(\"translation\");\n\n        System.out.println(translation.translateToChinese(\"Hello\"));\n        System.out.println(translation.translateToJapanese(\"Hello\"));\n\n    }\n\n}\n```\nWe using the spring framework to create bean and run it. The spring configuration xml file is below.\n\n``` java \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <util:properties id=\"configurationProperties\" location=\"classpath:configuration.properties\"/>\n    <context:component-scan base-package=\"org.httpclient.tutorial\"/>\n\n    <bean id=\"translation\" class=\"org.httpclient.tutorial.Translation\">\n        <constructor-arg ref=\"translateCore\"/>\n    </bean>\n</beans>\n```\nThe output is below:\n\n\t{\n \t\t\"error\": {\n  \t\t\"errors\": [\n   \t\t{\n    \t\t\"domain\": \"usageLimits\",\n    \t\t\"reason\": \"dailyLimitExceeded\",\n    \t\t\"message\": \"Daily Limit Exceeded\"\n   \t\t}\n  \t\t],\n  \t\t\"code\": 403,\n  \t\t\"message\": \"Daily Limit Exceeded\"\n \t\t}\n\t\t}\n\nThis indicate our access the google translate API with httpclient is successful. But why response these text. Because you need to price to google and then are able to use this api.\nTo see the pricing of google translate API, visit [here](https://cloud.google.com/translate/v2/pricing).\n\n","source":"_posts/2015-08-06-how-to-get-or-post-data-via-httpclient-with-proxy.markdown","raw":"---\n\ntitle: \"How to get or post data via HttpClient with proxy\"\ndate: 2015-08-06 22:22:33 +0800\ncomments: true\ncategories: Backend\ntags: [Java, Spring]\n---\n\nThe **HttpClient** is library which is support by apache. It can post or get data from specific  webservice and represents only the most basic contract for HTTP request execution.\n\nWe explain how to use this library with a example. In this example, we are going to use it to access the google tranlated API. Translating some text from specific language to other language. And this example using the Spring framework and Maven tool to build.\n\n<!-- more -->\n\nFirst, let us create our properties file which configures the google api url and some httpclient related stuff. Put it in our resource directory.\n\n``` java\ngoogle.translation.api=https://www.googleapis.com/language/translate/v2\nproxy.host=\nproxy.port=\nproxy.user=\nproxy.password=\n```\n\nAnd then we create the util class which access the properties file.\n\n``` java \npackage org.httpclient.tutorial.utils;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Properties;\n\n/**\n * Created by yushi on 8/7/15.\n */\n@Component\npublic final class ConstantUtil {\n\n    private static final String PROXY_HOST = \"proxy.host\";\n    private static final String PROXY_PORT = \"proxy.port\";\n    private static final String PROXY_USER = \"proxy.user\";\n    private static final String PROXY_PASSWORD = \"proxy.password\";\n    private static final String GOOGLE_TRANSLATION_API =\"google.translation.api\";\n\n    private Properties configurationProperties;\n\n\n    @Autowired\n    public ConstantUtil(Properties configurationProperties) {\n        this.configurationProperties = configurationProperties;\n    }\n\n    public String getProxyHost() {\n        return this.configurationProperties.getProperty(PROXY_HOST);\n    }\n\n    public int getProxyPort() {\n        return Integer.parseInt(this.configurationProperties.getProperty(PROXY_PORT));\n    }\n\n    public String getProxyUser() {\n        return this.configurationProperties.getProperty(PROXY_USER);\n    }\n\n    public String getProxyPassword() {\n        return this.configurationProperties.getProperty(PROXY_PASSWORD);\n    }\n\n    public String getGoogleTranslationApi() {\n        return  this.configurationProperties.getProperty(GOOGLE_TRANSLATION_API);\n    }\n}\n```\nSo our configuration is completed. We also will create the HttpClient which can be used to access the webservice.\n\n``` java\npackage org.httpclient.tutorial;\n\nimport org.apache.http.HttpHost;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.Credentials;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.impl.client.BasicCredentialsProvider;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.client.HttpClients;\nimport org.httpclient.tutorial.utils.ConstantUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by yushi on 8/7/15.\n */\n@Component\npublic final class HttpClientFactory {\n\n    private ConstantUtil constantUtil;\n\n    @Autowired\n    public HttpClientFactory(ConstantUtil constantUtil) {\n\n        this.constantUtil = constantUtil;\n    }\n\n    public CloseableHttpClient createHttpClient() {\n        return HttpClients.createDefault();\n    }\n\n    public HttpClientBuilder createHttpClientWithProxy() {\n\n        HttpHost proxy = new HttpHost(constantUtil.getProxyHost(), constantUtil.getProxyPort());\n        Credentials credentials = new UsernamePasswordCredentials(constantUtil.getProxyUser(), constantUtil.getProxyPassword());\n        AuthScope authScope = new AuthScope(constantUtil.getProxyHost(), constantUtil.getProxyPort());\n        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n        credentialsProvider.setCredentials(authScope, credentials);\n\n        return HttpClients.custom().setDefaultCredentialsProvider(credentialsProvider).setProxy(proxy);\n    }\n}\n```\nIn above codes, there are two methods, one is for default httpclient which is not need the proxy, another is httpclient with proxy.\n\nSo far, we have our own httpclient. let's create our own translation component with httpclient.\n\n``` java\npackage org.httpclient.tutorial;\n\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.util.EntityUtils;\nimport org.httpclient.tutorial.utils.ConstantUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by yushi on 8/7/15.\n */\n@Component\npublic final class TranslateCore {\n    private static final String KEY = \"AIzaSyAFaWbO3r-9FNeHU6Obj5tm6wWSnIAlBkg\";\n\n    private HttpClientFactory httpClientFactory;\n    private ConstantUtil constantUtil;\n\n    @Autowired\n    public TranslateCore(HttpClientFactory httpClientFactory, ConstantUtil constantUtil) {\n        this.httpClientFactory = httpClientFactory;\n        this.constantUtil = constantUtil;\n    }\n\n    public String translateContext(String sourceLanguage, String targetLanguage, String context) {\n        String url = String.format(\"%s?key=%s&source=%s&target=%s&q=%s&\", constantUtil.getGoogleTranslationApi(),\n                KEY, sourceLanguage, targetLanguage, context);\n\n        HttpGet httpGet = new HttpGet(url);\n        CloseableHttpClient httpClient = httpClientFactory.createHttpClient();\n\n        try {\n            CloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n            String result = EntityUtils.toString(httpResponse.getEntity());\n\n            return result;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n}\n```\nYou will notice that KEY constant variable, which is support by google developer, you need to register google developer and then get you developer key.\n\nTake your feet to [here](https://cloud.google.com/translate/v2/using_rest?hl=en)to see the google translate API usage.\n\nOkay, then creating translation interface:\n\n``` java\npackage org.httpclient.tutorial;\n\n/**\n * Created by yushi on 8/7/15.\n */\npublic interface ITranslation {\n    String translateToJapanese(String context);\n\n    String translateToChinese(String context);\n\n    String translate(String language, String context);\n}\n```\nLet's implement our translation interfer, in this class, we just translat english to other language.\n\n``` java \npackage org.httpclient.tutorial;\n\n/**\n * Created by yushi on 8/7/15.\n */\n\npublic class Translation implements ITranslation {\n    public static final String ZH = \"zh-CN\";\n    public static final String EN = \"en\";\n    public static final String JA = \"ja\";\n\n    private TranslateCore translateCore;\n\n    public Translation(TranslateCore translateCore) {\n        this.translateCore = translateCore;\n    }\n\n    @Override\n    public String translateToJapanese(String context) {\n        return translateCore.translateContext(EN, JA, context);\n    }\n\n    @Override\n    public String translateToChinese(String context) {\n        return translateCore.translateContext(EN, ZH, context);\n    }\n\n    @Override\n    public String translate(String language, String context) {\n        return translateCore.translateContext(EN, language, context);\n    }\n}\n```\n\nTo run our application.\n``` java \npackage org.httpclient.tutorial;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n\n/**\n * Created by yushi on 8/7/15.\n */\npublic class Application {\n\n    public static void main(String[] args) {\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"application-context.xml\");\n        ITranslation translation = (ITranslation)context.getBean(\"translation\");\n\n        System.out.println(translation.translateToChinese(\"Hello\"));\n        System.out.println(translation.translateToJapanese(\"Hello\"));\n\n    }\n\n}\n```\nWe using the spring framework to create bean and run it. The spring configuration xml file is below.\n\n``` java \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:util=\"http://www.springframework.org/schema/util\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <util:properties id=\"configurationProperties\" location=\"classpath:configuration.properties\"/>\n    <context:component-scan base-package=\"org.httpclient.tutorial\"/>\n\n    <bean id=\"translation\" class=\"org.httpclient.tutorial.Translation\">\n        <constructor-arg ref=\"translateCore\"/>\n    </bean>\n</beans>\n```\nThe output is below:\n\n\t{\n \t\t\"error\": {\n  \t\t\"errors\": [\n   \t\t{\n    \t\t\"domain\": \"usageLimits\",\n    \t\t\"reason\": \"dailyLimitExceeded\",\n    \t\t\"message\": \"Daily Limit Exceeded\"\n   \t\t}\n  \t\t],\n  \t\t\"code\": 403,\n  \t\t\"message\": \"Daily Limit Exceeded\"\n \t\t}\n\t\t}\n\nThis indicate our access the google translate API with httpclient is successful. But why response these text. Because you need to price to google and then are able to use this api.\nTo see the pricing of google translate API, visit [here](https://cloud.google.com/translate/v2/pricing).\n\n","slug":"2015-08-06-how-to-get-or-post-data-via-httpclient-with-proxy","published":1,"updated":"2023-09-02T16:49:06.966Z","_id":"clm27g4or003kazv5cd3vcjzt","layout":"post","photos":[],"link":"","content":"<p>The <strong>HttpClient</strong> is library which is support by apache. It can post or get data from specific  webservice and represents only the most basic contract for HTTP request execution.</p>\n<p>We explain how to use this library with a example. In this example, we are going to use it to access the google tranlated API. Translating some text from specific language to other language. And this example using the Spring framework and Maven tool to build.</p>\n<span id=\"more\"></span>\n\n<p>First, let us create our properties file which configures the google api url and some httpclient related stuff. Put it in our resource directory.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">google.translation.api=https:<span class=\"comment\">//www.googleapis.com/language/translate/v2</span></span><br><span class=\"line\">proxy.host=</span><br><span class=\"line\">proxy.port=</span><br><span class=\"line\">proxy.user=</span><br><span class=\"line\">proxy.password=</span><br></pre></td></tr></table></figure>\n\n<p>And then we create the util class which access the properties file.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstantUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_HOST</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.host&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_PORT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.port&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_USER</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.user&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_PASSWORD</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.password&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">GOOGLE_TRANSLATION_API</span> <span class=\"operator\">=</span><span class=\"string\">&quot;google.translation.api&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Properties configurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConstantUtil</span><span class=\"params\">(Properties configurationProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configurationProperties = configurationProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyHost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_HOST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getProxyPort</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.parseInt(<span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_PORT));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_USER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_PASSWORD);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGoogleTranslationApi</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"built_in\">this</span>.configurationProperties.getProperty(GOOGLE_TRANSLATION_API);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So our configuration is completed. We also will create the HttpClient which can be used to access the webservice.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpHost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.auth.AuthScope;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.auth.Credentials;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.CredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.httpclient.tutorial.utils.ConstantUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpClientFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConstantUtil constantUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HttpClientFactory</span><span class=\"params\">(ConstantUtil constantUtil)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.constantUtil = constantUtil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CloseableHttpClient <span class=\"title function_\">createHttpClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpClients.createDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpClientBuilder <span class=\"title function_\">createHttpClientWithProxy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HttpHost</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHost</span>(constantUtil.getProxyHost(), constantUtil.getProxyPort());</span><br><span class=\"line\">        <span class=\"type\">Credentials</span> <span class=\"variable\">credentials</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordCredentials</span>(constantUtil.getProxyUser(), constantUtil.getProxyPassword());</span><br><span class=\"line\">        <span class=\"type\">AuthScope</span> <span class=\"variable\">authScope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AuthScope</span>(constantUtil.getProxyHost(), constantUtil.getProxyPort());</span><br><span class=\"line\">        <span class=\"type\">CredentialsProvider</span> <span class=\"variable\">credentialsProvider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicCredentialsProvider</span>();</span><br><span class=\"line\">        credentialsProvider.setCredentials(authScope, credentials);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpClients.custom().setDefaultCredentialsProvider(credentialsProvider).setProxy(proxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In above codes, there are two methods, one is for default httpclient which is not need the proxy, another is httpclient with proxy.</p>\n<p>So far, we have our own httpclient. let’s create our own translation component with httpclient.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.httpclient.tutorial.utils.ConstantUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TranslateCore</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AIzaSyAFaWbO3r-9FNeHU6Obj5tm6wWSnIAlBkg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpClientFactory httpClientFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConstantUtil constantUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TranslateCore</span><span class=\"params\">(HttpClientFactory httpClientFactory, ConstantUtil constantUtil)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.httpClientFactory = httpClientFactory;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.constantUtil = constantUtil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translateContext</span><span class=\"params\">(String sourceLanguage, String targetLanguage, String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;%s?key=%s&amp;source=%s&amp;target=%s&amp;q=%s&amp;&quot;</span>, constantUtil.getGoogleTranslationApi(),</span><br><span class=\"line\">                KEY, sourceLanguage, targetLanguage, context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HttpGet</span> <span class=\"variable\">httpGet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpGet</span>(url);</span><br><span class=\"line\">        <span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">httpClient</span> <span class=\"operator\">=</span> httpClientFactory.createHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">CloseableHttpResponse</span> <span class=\"variable\">httpResponse</span> <span class=\"operator\">=</span> httpClient.execute(httpGet);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> EntityUtils.toString(httpResponse.getEntity());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You will notice that KEY constant variable, which is support by google developer, you need to register google developer and then get you developer key.</p>\n<p>Take your feet to <a href=\"https://cloud.google.com/translate/v2/using_rest?hl=en\">here</a>to see the google translate API usage.</p>\n<p>Okay, then creating translation interface:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ITranslation</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">translateToJapanese</span><span class=\"params\">(String context)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">translateToChinese</span><span class=\"params\">(String context)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">translate</span><span class=\"params\">(String language, String context)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Let’s implement our translation interfer, in this class, we just translat english to other language.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Translation</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ITranslation</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ZH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zh-CN&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">EN</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;en&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">JA</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ja&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TranslateCore translateCore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Translation</span><span class=\"params\">(TranslateCore translateCore)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.translateCore = translateCore;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translateToJapanese</span><span class=\"params\">(String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> translateCore.translateContext(EN, JA, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translateToChinese</span><span class=\"params\">(String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> translateCore.translateContext(EN, ZH, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translate</span><span class=\"params\">(String language, String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> translateCore.translateContext(EN, language, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To run our application.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;application-context.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ITranslation</span> <span class=\"variable\">translation</span> <span class=\"operator\">=</span> (ITranslation)context.getBean(<span class=\"string\">&quot;translation&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(translation.translateToChinese(<span class=\"string\">&quot;Hello&quot;</span>));</span><br><span class=\"line\">        System.out.println(translation.translateToJapanese(<span class=\"string\">&quot;Hello&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We using the spring framework to create bean and run it. The spring configuration xml file is below.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xmlns:util=<span class=\"string\">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class=\"line\">       xmlns:context=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;util:properties id=<span class=\"string\">&quot;configurationProperties&quot;</span> location=<span class=\"string\">&quot;classpath:configuration.properties&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;context:component-scan base-<span class=\"keyword\">package</span>=<span class=\"string\">&quot;org.httpclient.tutorial&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">&quot;translation&quot;</span> class=<span class=\"string\">&quot;org.httpclient.tutorial.Translation&quot;</span>&gt;</span><br><span class=\"line\">        &lt;constructor-arg ref=<span class=\"string\">&quot;translateCore&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>The output is below:</p>\n<pre><code>&#123;\n     &quot;error&quot;: &#123;\n      &quot;errors&quot;: [\n       &#123;\n        &quot;domain&quot;: &quot;usageLimits&quot;,\n        &quot;reason&quot;: &quot;dailyLimitExceeded&quot;,\n        &quot;message&quot;: &quot;Daily Limit Exceeded&quot;\n       &#125;\n      ],\n      &quot;code&quot;: 403,\n      &quot;message&quot;: &quot;Daily Limit Exceeded&quot;\n     &#125;\n    &#125;\n</code></pre>\n<p>This indicate our access the google translate API with httpclient is successful. But why response these text. Because you need to price to google and then are able to use this api.<br>To see the pricing of google translate API, visit <a href=\"https://cloud.google.com/translate/v2/pricing\">here</a>.</p>\n","site":{"data":{}},"excerpt":"<p>The <strong>HttpClient</strong> is library which is support by apache. It can post or get data from specific  webservice and represents only the most basic contract for HTTP request execution.</p>\n<p>We explain how to use this library with a example. In this example, we are going to use it to access the google tranlated API. Translating some text from specific language to other language. And this example using the Spring framework and Maven tool to build.</p>","more":"<p>First, let us create our properties file which configures the google api url and some httpclient related stuff. Put it in our resource directory.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">google.translation.api=https:<span class=\"comment\">//www.googleapis.com/language/translate/v2</span></span><br><span class=\"line\">proxy.host=</span><br><span class=\"line\">proxy.port=</span><br><span class=\"line\">proxy.user=</span><br><span class=\"line\">proxy.password=</span><br></pre></td></tr></table></figure>\n\n<p>And then we create the util class which access the properties file.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstantUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_HOST</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.host&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_PORT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.port&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_USER</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.user&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PROXY_PASSWORD</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;proxy.password&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">GOOGLE_TRANSLATION_API</span> <span class=\"operator\">=</span><span class=\"string\">&quot;google.translation.api&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Properties configurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConstantUtil</span><span class=\"params\">(Properties configurationProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configurationProperties = configurationProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyHost</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_HOST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getProxyPort</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.parseInt(<span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_PORT));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_USER);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getProxyPassword</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.configurationProperties.getProperty(PROXY_PASSWORD);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGoogleTranslationApi</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"built_in\">this</span>.configurationProperties.getProperty(GOOGLE_TRANSLATION_API);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So our configuration is completed. We also will create the HttpClient which can be used to access the webservice.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.HttpHost;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.auth.AuthScope;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.auth.Credentials;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.CredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.httpclient.tutorial.utils.ConstantUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpClientFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConstantUtil constantUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HttpClientFactory</span><span class=\"params\">(ConstantUtil constantUtil)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.constantUtil = constantUtil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CloseableHttpClient <span class=\"title function_\">createHttpClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpClients.createDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpClientBuilder <span class=\"title function_\">createHttpClientWithProxy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HttpHost</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHost</span>(constantUtil.getProxyHost(), constantUtil.getProxyPort());</span><br><span class=\"line\">        <span class=\"type\">Credentials</span> <span class=\"variable\">credentials</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordCredentials</span>(constantUtil.getProxyUser(), constantUtil.getProxyPassword());</span><br><span class=\"line\">        <span class=\"type\">AuthScope</span> <span class=\"variable\">authScope</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AuthScope</span>(constantUtil.getProxyHost(), constantUtil.getProxyPort());</span><br><span class=\"line\">        <span class=\"type\">CredentialsProvider</span> <span class=\"variable\">credentialsProvider</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicCredentialsProvider</span>();</span><br><span class=\"line\">        credentialsProvider.setCredentials(authScope, credentials);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpClients.custom().setDefaultCredentialsProvider(credentialsProvider).setProxy(proxy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In above codes, there are two methods, one is for default httpclient which is not need the proxy, another is httpclient with proxy.</p>\n<p>So far, we have our own httpclient. let’s create our own translation component with httpclient.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.http.util.EntityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.httpclient.tutorial.utils.ConstantUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TranslateCore</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;AIzaSyAFaWbO3r-9FNeHU6Obj5tm6wWSnIAlBkg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpClientFactory httpClientFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConstantUtil constantUtil;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TranslateCore</span><span class=\"params\">(HttpClientFactory httpClientFactory, ConstantUtil constantUtil)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.httpClientFactory = httpClientFactory;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.constantUtil = constantUtil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translateContext</span><span class=\"params\">(String sourceLanguage, String targetLanguage, String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;%s?key=%s&amp;source=%s&amp;target=%s&amp;q=%s&amp;&quot;</span>, constantUtil.getGoogleTranslationApi(),</span><br><span class=\"line\">                KEY, sourceLanguage, targetLanguage, context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HttpGet</span> <span class=\"variable\">httpGet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpGet</span>(url);</span><br><span class=\"line\">        <span class=\"type\">CloseableHttpClient</span> <span class=\"variable\">httpClient</span> <span class=\"operator\">=</span> httpClientFactory.createHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">CloseableHttpResponse</span> <span class=\"variable\">httpResponse</span> <span class=\"operator\">=</span> httpClient.execute(httpGet);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> EntityUtils.toString(httpResponse.getEntity());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>You will notice that KEY constant variable, which is support by google developer, you need to register google developer and then get you developer key.</p>\n<p>Take your feet to <a href=\"https://cloud.google.com/translate/v2/using_rest?hl=en\">here</a>to see the google translate API usage.</p>\n<p>Okay, then creating translation interface:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ITranslation</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">translateToJapanese</span><span class=\"params\">(String context)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">translateToChinese</span><span class=\"params\">(String context)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">translate</span><span class=\"params\">(String language, String context)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Let’s implement our translation interfer, in this class, we just translat english to other language.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Translation</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ITranslation</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ZH</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zh-CN&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">EN</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;en&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">JA</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ja&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TranslateCore translateCore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Translation</span><span class=\"params\">(TranslateCore translateCore)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.translateCore = translateCore;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translateToJapanese</span><span class=\"params\">(String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> translateCore.translateContext(EN, JA, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translateToChinese</span><span class=\"params\">(String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> translateCore.translateContext(EN, ZH, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">translate</span><span class=\"params\">(String language, String context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> translateCore.translateContext(EN, language, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To run our application.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.httpclient.tutorial;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by yushi on 8/7/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;application-context.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ITranslation</span> <span class=\"variable\">translation</span> <span class=\"operator\">=</span> (ITranslation)context.getBean(<span class=\"string\">&quot;translation&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(translation.translateToChinese(<span class=\"string\">&quot;Hello&quot;</span>));</span><br><span class=\"line\">        System.out.println(translation.translateToJapanese(<span class=\"string\">&quot;Hello&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We using the spring framework to create bean and run it. The spring configuration xml file is below.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xmlns:util=<span class=\"string\">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class=\"line\">       xmlns:context=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;util:properties id=<span class=\"string\">&quot;configurationProperties&quot;</span> location=<span class=\"string\">&quot;classpath:configuration.properties&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;context:component-scan base-<span class=\"keyword\">package</span>=<span class=\"string\">&quot;org.httpclient.tutorial&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">&quot;translation&quot;</span> class=<span class=\"string\">&quot;org.httpclient.tutorial.Translation&quot;</span>&gt;</span><br><span class=\"line\">        &lt;constructor-arg ref=<span class=\"string\">&quot;translateCore&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>The output is below:</p>\n<pre><code>&#123;\n     &quot;error&quot;: &#123;\n      &quot;errors&quot;: [\n       &#123;\n        &quot;domain&quot;: &quot;usageLimits&quot;,\n        &quot;reason&quot;: &quot;dailyLimitExceeded&quot;,\n        &quot;message&quot;: &quot;Daily Limit Exceeded&quot;\n       &#125;\n      ],\n      &quot;code&quot;: 403,\n      &quot;message&quot;: &quot;Daily Limit Exceeded&quot;\n     &#125;\n    &#125;\n</code></pre>\n<p>This indicate our access the google translate API with httpclient is successful. But why response these text. Because you need to price to google and then are able to use this api.<br>To see the pricing of google translate API, visit <a href=\"https://cloud.google.com/translate/v2/pricing\">here</a>.</p>"},{"title":"Ruby修炼之道(1)","date":"2015-08-12T08:08:21.000Z","comments":1,"_content":"{% img /assets/images/legacy/ruby-logo.png 50 50 %}**Ruby**是一门脚本语言，由日本人松本行弘发明，旨在让开发人员用更简洁的方式快乐的编程。他的语法类似Python脚本语言，比较优雅，而且还提供了一些丰富强大的类库。Ruby的意思是**红宝石**.\n\n### 特点\n*脚本语言*   \n即动态语言，和其他脚本语言一样，无需编译即可直接运行，而C#、C++和Java等需要通过编译然后才能运行。Ruby减少了开发者的开发流程。\n\n<!-- more -->\n\t\n*完全的面向对象*  \n对Ruby来说，纯数字都属于对象，可以直接调用其方法。比如下面代码：   \n```\n-1.abs   #return 1\n```\n\t\n这是其他面向对象编程语言如C#、Java不具备的。同时Ruby也具备有其他面向对象编程语言的特性，如：继承、Mixin等。\n\t\n*跨平台*   \n能在类Unix操作系统如：Mac OS X、Linux和windows操作系统上运行。\n\t\n### 安装   \nRuby的安装很简单，以在Mac OS X电脑的安装为例。使用Homebrew包管理器可以得到ruby的最新版本:   \n``` \nbrew install ruby\n```\n\n安装完后，在输入如下命令查看ruby版本:   \n``` \nruby -v\n```\n\n进入[Ruby Installation](https://www.ruby-lang.org/en/documentation/installation/)链接可以查看Ruby在其他操作系统上的安装\n\n### HelloWorld\n用ruby编写第一个Hello world程序，只需一行代码，比其他的面向对象语言简单多了。   \n``` ruby\nprint(\"Hello world\\n\");\n```\n\n直接将这行代码写入helloworld.rb文件，然后输入如下指令运行即可看到内容输出在终端控制器上。   \n```\nruby helloworld.rb\n``` \n\n当然如果你想直接和ruby交互的话，也有办法，Ruby提供了和Python类似的交互式操作。在命令行输入**irb**进入交互模式。\n\nruby也提供了字符的转义功能，比如换行(\\n), 制表符(\\t)等等。如上面的打印Hello world。\n\n*注:上面代码中调用print方法的括号可以省略。ruby尽量的简化了开发人员的工作量*\n\n\n### puts、print和p的区别\n**puts**方法会在每次输出后输出换行符，而**print**则不会。例如以下的输出内容是一致的:\n``` ruby\nputs \"Helle world\"\n\nprint \"Hello world\\n\"\n```\n\n使用**p**方法可以将数据按照原始类型输出来，这是**puts**和**print**所不具备的，直接用代码来解释:\n``` ruby\nputs \"1\"   #=> 1\nputs 1     #=> 1\nprint 1    #=> 1\nprint \"1\"  #=> 1\np \"1\"      #=> \"1\"\np 1        #=> 1\n```\n\n所以基于**p**方法的特性，转义字符在其内是不工作的，将会被直接打印出来,如以下代码将会输出\"Hello world\\n\"。还有**p**方法也会输出换行符，并且还会将打印的内容按数据类型返回，而其他两种方法只返回**nil**空值。\n``` ruby\np \"Hello world\\n\"  \n```\n\n*注:在Ruby中，任何函数均有返回值。**nil**空值就是其中一种常见的返回。*\n\n**print**, **puts**和**p**方法均可传入多个参数，调用方式和返回结果如下，可以体会下用法:  \n*print方法*    \n``` ruby\nprint \"Hello\", \" Ruby“\n```\n\n\tHello Ruby\n\n*puts方法*   \n``` ruby\nputs \"Hello\", \" Ruby\"\n```\n\n\tHello\n\tRuby\n\n*p方法*\t   \n``` ruby\np \"Hello\", \" Ruby\"\n```\n\n\t”Hello\"\n\t\"Ruby\"\n\n\n### 变量\n在ruby中声明变量也很简单，不需要任何如javascript的*var*等关键字，直接定义赋值。\n\n``` ruby\ngreet = \"Hello world\"\n```\n\n访问变量也简单:   \n\n``` ruby\nputs greet\nputs \"#{greet}\"\n```    \n以上两种写法均会直接输出Hello world.\n\n### 控制语句\n*if 语句*   \n\n\tif 条件 then\n  \t\t逻辑处理\n\tend\n\t\n*if else 语句*\n\t\n\tif 条件 then\n\t\t逻辑处理\n\telse\n\t\t逻辑处理\n\tend\n\t\n*if elsif 语句*\n\n\tif 条件 then\n\t\t逻辑处理\n\telsif 条件 then\n\t\t逻辑处理\n\telse\n\t\t逻辑处理\n\tend\n\n*注:在上面的if各种控制语句中，**then**关键字是可以省略的.*\n\n### 循环语句\n*while 语句*\n\n\twhile 条件 do\n\t\t逻辑处理\n\tend\n\t\n\t\n*times迭代器*\n\n当循环的次数已经确定时，可直接使用times方法来循环处理我们需要的逻辑\n\tI\n\t循环次数.times do \n\t\t逻辑处理\n\tend\n\n*注:**times**方法被成为迭代器，除了times方法迭代器，ruby还提供了其他的迭代器，比如**each**方法.*\n\n\t\n","source":"_posts/2015-08-12-ruby-practice-1.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(1)\"\ndate: 2015-08-12 16:08:21 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n{% img /assets/images/legacy/ruby-logo.png 50 50 %}**Ruby**是一门脚本语言，由日本人松本行弘发明，旨在让开发人员用更简洁的方式快乐的编程。他的语法类似Python脚本语言，比较优雅，而且还提供了一些丰富强大的类库。Ruby的意思是**红宝石**.\n\n### 特点\n*脚本语言*   \n即动态语言，和其他脚本语言一样，无需编译即可直接运行，而C#、C++和Java等需要通过编译然后才能运行。Ruby减少了开发者的开发流程。\n\n<!-- more -->\n\t\n*完全的面向对象*  \n对Ruby来说，纯数字都属于对象，可以直接调用其方法。比如下面代码：   \n```\n-1.abs   #return 1\n```\n\t\n这是其他面向对象编程语言如C#、Java不具备的。同时Ruby也具备有其他面向对象编程语言的特性，如：继承、Mixin等。\n\t\n*跨平台*   \n能在类Unix操作系统如：Mac OS X、Linux和windows操作系统上运行。\n\t\n### 安装   \nRuby的安装很简单，以在Mac OS X电脑的安装为例。使用Homebrew包管理器可以得到ruby的最新版本:   \n``` \nbrew install ruby\n```\n\n安装完后，在输入如下命令查看ruby版本:   \n``` \nruby -v\n```\n\n进入[Ruby Installation](https://www.ruby-lang.org/en/documentation/installation/)链接可以查看Ruby在其他操作系统上的安装\n\n### HelloWorld\n用ruby编写第一个Hello world程序，只需一行代码，比其他的面向对象语言简单多了。   \n``` ruby\nprint(\"Hello world\\n\");\n```\n\n直接将这行代码写入helloworld.rb文件，然后输入如下指令运行即可看到内容输出在终端控制器上。   \n```\nruby helloworld.rb\n``` \n\n当然如果你想直接和ruby交互的话，也有办法，Ruby提供了和Python类似的交互式操作。在命令行输入**irb**进入交互模式。\n\nruby也提供了字符的转义功能，比如换行(\\n), 制表符(\\t)等等。如上面的打印Hello world。\n\n*注:上面代码中调用print方法的括号可以省略。ruby尽量的简化了开发人员的工作量*\n\n\n### puts、print和p的区别\n**puts**方法会在每次输出后输出换行符，而**print**则不会。例如以下的输出内容是一致的:\n``` ruby\nputs \"Helle world\"\n\nprint \"Hello world\\n\"\n```\n\n使用**p**方法可以将数据按照原始类型输出来，这是**puts**和**print**所不具备的，直接用代码来解释:\n``` ruby\nputs \"1\"   #=> 1\nputs 1     #=> 1\nprint 1    #=> 1\nprint \"1\"  #=> 1\np \"1\"      #=> \"1\"\np 1        #=> 1\n```\n\n所以基于**p**方法的特性，转义字符在其内是不工作的，将会被直接打印出来,如以下代码将会输出\"Hello world\\n\"。还有**p**方法也会输出换行符，并且还会将打印的内容按数据类型返回，而其他两种方法只返回**nil**空值。\n``` ruby\np \"Hello world\\n\"  \n```\n\n*注:在Ruby中，任何函数均有返回值。**nil**空值就是其中一种常见的返回。*\n\n**print**, **puts**和**p**方法均可传入多个参数，调用方式和返回结果如下，可以体会下用法:  \n*print方法*    \n``` ruby\nprint \"Hello\", \" Ruby“\n```\n\n\tHello Ruby\n\n*puts方法*   \n``` ruby\nputs \"Hello\", \" Ruby\"\n```\n\n\tHello\n\tRuby\n\n*p方法*\t   \n``` ruby\np \"Hello\", \" Ruby\"\n```\n\n\t”Hello\"\n\t\"Ruby\"\n\n\n### 变量\n在ruby中声明变量也很简单，不需要任何如javascript的*var*等关键字，直接定义赋值。\n\n``` ruby\ngreet = \"Hello world\"\n```\n\n访问变量也简单:   \n\n``` ruby\nputs greet\nputs \"#{greet}\"\n```    \n以上两种写法均会直接输出Hello world.\n\n### 控制语句\n*if 语句*   \n\n\tif 条件 then\n  \t\t逻辑处理\n\tend\n\t\n*if else 语句*\n\t\n\tif 条件 then\n\t\t逻辑处理\n\telse\n\t\t逻辑处理\n\tend\n\t\n*if elsif 语句*\n\n\tif 条件 then\n\t\t逻辑处理\n\telsif 条件 then\n\t\t逻辑处理\n\telse\n\t\t逻辑处理\n\tend\n\n*注:在上面的if各种控制语句中，**then**关键字是可以省略的.*\n\n### 循环语句\n*while 语句*\n\n\twhile 条件 do\n\t\t逻辑处理\n\tend\n\t\n\t\n*times迭代器*\n\n当循环的次数已经确定时，可直接使用times方法来循环处理我们需要的逻辑\n\tI\n\t循环次数.times do \n\t\t逻辑处理\n\tend\n\n*注:**times**方法被成为迭代器，除了times方法迭代器，ruby还提供了其他的迭代器，比如**each**方法.*\n\n\t\n","slug":"2015-08-12-ruby-practice-1","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4os003lazv558e933fh","layout":"post","photos":[],"link":"","content":"<img src=\"/assets/images/legacy/ruby-logo.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/ruby-logo.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" class=\" lazyload placeholder\" width=\"50\" height=\"50\">**Ruby**是一门脚本语言，由日本人松本行弘发明，旨在让开发人员用更简洁的方式快乐的编程。他的语法类似Python脚本语言，比较优雅，而且还提供了一些丰富强大的类库。Ruby的意思是**红宝石**.\n\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p><em>脚本语言</em><br>即动态语言，和其他脚本语言一样，无需编译即可直接运行，而C#、C++和Java等需要通过编译然后才能运行。Ruby减少了开发者的开发流程。</p>\n<span id=\"more\"></span>\n<p><em>完全的面向对象</em><br>对Ruby来说，纯数字都属于对象，可以直接调用其方法。比如下面代码：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1.abs   #return 1</span><br></pre></td></tr></table></figure>\n<p>这是其他面向对象编程语言如C#、Java不具备的。同时Ruby也具备有其他面向对象编程语言的特性，如：继承、Mixin等。</p>\n<p><em>跨平台</em><br>能在类Unix操作系统如：Mac OS X、Linux和windows操作系统上运行。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ruby的安装很简单，以在Mac OS X电脑的安装为例。使用Homebrew包管理器可以得到ruby的最新版本:   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ruby</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，在输入如下命令查看ruby版本:   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br></pre></td></tr></table></figure>\n\n<p>进入<a href=\"https://www.ruby-lang.org/en/documentation/installation/\">Ruby Installation</a>链接可以查看Ruby在其他操作系统上的安装</p>\n<h3 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h3><p>用ruby编写第一个Hello world程序，只需一行代码，比其他的面向对象语言简单多了。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&quot;Hello world\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>直接将这行代码写入helloworld.rb文件，然后输入如下指令运行即可看到内容输出在终端控制器上。   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby helloworld.rb</span><br></pre></td></tr></table></figure>\n\n<p>当然如果你想直接和ruby交互的话，也有办法，Ruby提供了和Python类似的交互式操作。在命令行输入<strong>irb</strong>进入交互模式。</p>\n<p>ruby也提供了字符的转义功能，比如换行(\\n), 制表符(\\t)等等。如上面的打印Hello world。</p>\n<p><em>注:上面代码中调用print方法的括号可以省略。ruby尽量的简化了开发人员的工作量</em></p>\n<h3 id=\"puts、print和p的区别\"><a href=\"#puts、print和p的区别\" class=\"headerlink\" title=\"puts、print和p的区别\"></a>puts、print和p的区别</h3><p><strong>puts</strong>方法会在每次输出后输出换行符，而<strong>print</strong>则不会。例如以下的输出内容是一致的:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">&quot;Helle world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">print <span class=\"string\">&quot;Hello world\\n&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>p</strong>方法可以将数据按照原始类型输出来，这是<strong>puts</strong>和<strong>print</strong>所不具备的，直接用代码来解释:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">&quot;1&quot;</span>   <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">puts <span class=\"number\">1</span>     <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">print <span class=\"number\">1</span>    <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">print <span class=\"string\">&quot;1&quot;</span>  <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"string\">&quot;1&quot;</span>      <span class=\"comment\">#=&gt; &quot;1&quot;</span></span><br><span class=\"line\">p <span class=\"number\">1</span>        <span class=\"comment\">#=&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<p>所以基于<strong>p</strong>方法的特性，转义字符在其内是不工作的，将会被直接打印出来,如以下代码将会输出”Hello world\\n”。还有<strong>p</strong>方法也会输出换行符，并且还会将打印的内容按数据类型返回，而其他两种方法只返回<strong>nil</strong>空值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"string\">&quot;Hello world\\n&quot;</span>  </span><br></pre></td></tr></table></figure>\n\n<p><em>注:在Ruby中，任何函数均有返回值。<strong>nil</strong>空值就是其中一种常见的返回。</em></p>\n<p><strong>print</strong>, <strong>puts</strong>和<strong>p</strong>方法均可传入多个参数，调用方式和返回结果如下，可以体会下用法:<br><em>print方法</em>    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot; Ruby“</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>Hello Ruby\n</code></pre>\n<p><em>puts方法</em>   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot; Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>Hello\nRuby\n</code></pre>\n<p><em>p方法</em>\t   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot; Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>”Hello&quot;\n&quot;Ruby&quot;\n</code></pre>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>在ruby中声明变量也很简单，不需要任何如javascript的<em>var</em>等关键字，直接定义赋值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet = <span class=\"string\">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问变量也简单:   </p>\n<pre><code class=\"ruby\">puts greet\nputs &quot;#&#123;greet&#125;&quot;\n</code></pre>\n<p>以上两种写法均会直接输出Hello world.</p>\n<h3 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h3><p><em>if 语句</em>   </p>\n<pre><code>if 条件 then\n      逻辑处理\nend\n</code></pre>\n<p><em>if else 语句</em></p>\n<pre><code>if 条件 then\n    逻辑处理\nelse\n    逻辑处理\nend\n</code></pre>\n<p><em>if elsif 语句</em></p>\n<pre><code>if 条件 then\n    逻辑处理\nelsif 条件 then\n    逻辑处理\nelse\n    逻辑处理\nend\n</code></pre>\n<p><em>注:在上面的if各种控制语句中，<strong>then</strong>关键字是可以省略的.</em></p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p><em>while 语句</em></p>\n<pre><code>while 条件 do\n    逻辑处理\nend\n</code></pre>\n<p><em>times迭代器</em></p>\n<p>当循环的次数已经确定时，可直接使用times方法来循环处理我们需要的逻辑<br>    I<br>    循环次数.times do<br>        逻辑处理<br>    end</p>\n<p>*注:<strong>times</strong>方法被成为迭代器，除了times方法迭代器，ruby还提供了其他的迭代器，比如<strong>each</strong>方法.*</p>\n","site":{"data":{}},"excerpt":"<img src=\"/assets/images/legacy/ruby-logo.png\" class=\"\" width=\"50\" height=\"50\">**Ruby**是一门脚本语言，由日本人松本行弘发明，旨在让开发人员用更简洁的方式快乐的编程。他的语法类似Python脚本语言，比较优雅，而且还提供了一些丰富强大的类库。Ruby的意思是**红宝石**.\n\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p><em>脚本语言</em><br>即动态语言，和其他脚本语言一样，无需编译即可直接运行，而C#、C++和Java等需要通过编译然后才能运行。Ruby减少了开发者的开发流程。</p>","more":"<p><em>完全的面向对象</em><br>对Ruby来说，纯数字都属于对象，可以直接调用其方法。比如下面代码：   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1.abs   #return 1</span><br></pre></td></tr></table></figure>\n<p>这是其他面向对象编程语言如C#、Java不具备的。同时Ruby也具备有其他面向对象编程语言的特性，如：继承、Mixin等。</p>\n<p><em>跨平台</em><br>能在类Unix操作系统如：Mac OS X、Linux和windows操作系统上运行。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ruby的安装很简单，以在Mac OS X电脑的安装为例。使用Homebrew包管理器可以得到ruby的最新版本:   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install ruby</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，在输入如下命令查看ruby版本:   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -v</span><br></pre></td></tr></table></figure>\n\n<p>进入<a href=\"https://www.ruby-lang.org/en/documentation/installation/\">Ruby Installation</a>链接可以查看Ruby在其他操作系统上的安装</p>\n<h3 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h3><p>用ruby编写第一个Hello world程序，只需一行代码，比其他的面向对象语言简单多了。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&quot;Hello world\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>直接将这行代码写入helloworld.rb文件，然后输入如下指令运行即可看到内容输出在终端控制器上。   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby helloworld.rb</span><br></pre></td></tr></table></figure>\n\n<p>当然如果你想直接和ruby交互的话，也有办法，Ruby提供了和Python类似的交互式操作。在命令行输入<strong>irb</strong>进入交互模式。</p>\n<p>ruby也提供了字符的转义功能，比如换行(\\n), 制表符(\\t)等等。如上面的打印Hello world。</p>\n<p><em>注:上面代码中调用print方法的括号可以省略。ruby尽量的简化了开发人员的工作量</em></p>\n<h3 id=\"puts、print和p的区别\"><a href=\"#puts、print和p的区别\" class=\"headerlink\" title=\"puts、print和p的区别\"></a>puts、print和p的区别</h3><p><strong>puts</strong>方法会在每次输出后输出换行符，而<strong>print</strong>则不会。例如以下的输出内容是一致的:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">&quot;Helle world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">print <span class=\"string\">&quot;Hello world\\n&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>p</strong>方法可以将数据按照原始类型输出来，这是<strong>puts</strong>和<strong>print</strong>所不具备的，直接用代码来解释:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">&quot;1&quot;</span>   <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">puts <span class=\"number\">1</span>     <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">print <span class=\"number\">1</span>    <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">print <span class=\"string\">&quot;1&quot;</span>  <span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"string\">&quot;1&quot;</span>      <span class=\"comment\">#=&gt; &quot;1&quot;</span></span><br><span class=\"line\">p <span class=\"number\">1</span>        <span class=\"comment\">#=&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<p>所以基于<strong>p</strong>方法的特性，转义字符在其内是不工作的，将会被直接打印出来,如以下代码将会输出”Hello world\\n”。还有<strong>p</strong>方法也会输出换行符，并且还会将打印的内容按数据类型返回，而其他两种方法只返回<strong>nil</strong>空值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"string\">&quot;Hello world\\n&quot;</span>  </span><br></pre></td></tr></table></figure>\n\n<p><em>注:在Ruby中，任何函数均有返回值。<strong>nil</strong>空值就是其中一种常见的返回。</em></p>\n<p><strong>print</strong>, <strong>puts</strong>和<strong>p</strong>方法均可传入多个参数，调用方式和返回结果如下，可以体会下用法:<br><em>print方法</em>    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot; Ruby“</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>Hello Ruby\n</code></pre>\n<p><em>puts方法</em>   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot; Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>Hello\nRuby\n</code></pre>\n<p><em>p方法</em>\t   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot; Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<pre><code>”Hello&quot;\n&quot;Ruby&quot;\n</code></pre>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>在ruby中声明变量也很简单，不需要任何如javascript的<em>var</em>等关键字，直接定义赋值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">greet = <span class=\"string\">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问变量也简单:   </p>\n<pre><code class=\"ruby\">puts greet\nputs &quot;#&#123;greet&#125;&quot;\n</code></pre>\n<p>以上两种写法均会直接输出Hello world.</p>\n<h3 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h3><p><em>if 语句</em>   </p>\n<pre><code>if 条件 then\n      逻辑处理\nend\n</code></pre>\n<p><em>if else 语句</em></p>\n<pre><code>if 条件 then\n    逻辑处理\nelse\n    逻辑处理\nend\n</code></pre>\n<p><em>if elsif 语句</em></p>\n<pre><code>if 条件 then\n    逻辑处理\nelsif 条件 then\n    逻辑处理\nelse\n    逻辑处理\nend\n</code></pre>\n<p><em>注:在上面的if各种控制语句中，<strong>then</strong>关键字是可以省略的.</em></p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p><em>while 语句</em></p>\n<pre><code>while 条件 do\n    逻辑处理\nend\n</code></pre>\n<p><em>times迭代器</em></p>\n<p>当循环的次数已经确定时，可直接使用times方法来循环处理我们需要的逻辑<br>    I<br>    循环次数.times do<br>        逻辑处理<br>    end</p>\n<p>*注:<strong>times</strong>方法被成为迭代器，除了times方法迭代器，ruby还提供了其他的迭代器，比如<strong>each</strong>方法.*</p>"},{"title":"Ruby修炼之道(3)","date":"2015-08-14T09:47:01.000Z","comments":1,"_content":"\n在Ruby中任何表现数据的基本单位都称为对象(object), 而Ruby的类(class)表示的就是这些对象的种类。\n\n### 变量\n和其他面向对象语言一样，Ruby也有多种类型的变量，但是在Ruby中，变量的类型是由变量的命名方式决定的。\n\n*局部变量(local variable)*\n以英文字母或者_开头\n\n``` ruby\nwords = \"Hello Ruby\"\n_words = \"Hello Ruby\"\n```\n<!--more-->\n*全局变量(global variable)*\n以$开头\n\n``` ruby\n$words=\"Hello Ruby\"\n```\n\n*实例变量(instance variable)*\n以@开头\n\n``` ruby\n@words=\"Hello Ruby\"\n```\n\n*类变量(class variable)*\n\n以@@开头\n``` ruby\n@@words = \"Hello Ruby\"\n```\n\n*伪变量(pseudo variable)*\n伪变量是Ruby预先定义好的代表某个特定值的特殊变量，因此这个值是无法改变的。如，nil、true、false、self等。\n\n*注：Ruby不需要在意变量名的长度，对于多个单词组合的变量名，使用_隔开各个单词，或者单词以大写字母开头，如：my_words,或者myWords。但是在Ruby中的变量名和方法名一般使用前者，而后者主要用于类名和模块名。*\n\n### 常量\n顾名思义，即不可修改，对已经赋值的常量再进行赋值时，Ruby会做出警告。常量均以大写字母来命名。如Ruby中预先定义好的RUBY_VERSION(运行版本)、RUBTY_PLATFORM(运行平台)、ARGV(命令行参数数组).\n\n### 多重赋值\n多重赋值是Ruby中的简化代码的一种方式，通过多重赋值可以将多个变量同时赋值。\n\n``` ruby\n>> a, b, c = 1, 2, 3\t##同时赋值a, b, c\n>> p [a, b, c]\t\t\t##=> [1, 2, 3]\n```\n这样a, b, c均被赋值了1, 2, 3。\n*注：在使用多重赋值时，建议对彼此相关变量进行多重赋值，避免程序难读懂。*\n\n即使等号(=)左右两边列表的数量不相等，Ruby也不会报错。\n*左边变量部分数量多时*\n\n``` ruby\n>> a, b, c, d = 1, 2\n>> p [a, b, c, d]\t\t\t##=> [1, 2, nil, nil]\n```\n当左边变量部分数量多时，Ruby会自动将**nil**赋值给未被分配值的变量。如上的c, d变量。\n\n*左边变量部分数量少时*\n\n``` ruby\n>> a, b, c = 1, 2, 3, 4\n>> p [a, b, c]\t\t\t\t##=> [1, 2, 3]\n```\n当变量部分比较少时，Ruby会忽略掉该值，不会分配多余的值，如上的值4。\n\n*将未被分配的值赋给指定的变量*\n当给一个变量前加上*，表示Ruby会将未分配的值封装为数组赋值给该变量。通过这种方式，Ruby会将变量与右边的值一一匹配。\n\n``` ruby\n>> a, b, *c = 1, 2, 3, 4\n>> p [a, b, c]\t\t\t\t\t##=> [1, 2, [3, 4]]\n\n>> a, *b, c = 1, 2, 3, 4, 5\n>> p [a, b, c]\t\t\t\t\t##=> [1, [2, 3, 4], 5]\n```\n\n使用多重赋值简化变量值交换：\n\n``` ruby\n>> a, b = 0, 1\n>> a, b = b, a\t\t\t\t\t##置换变量a、b的值\n>> p [a, b]\t\t\t\t\t\t##=> [1, 0]\n```\n\n使用多重赋值获取数组的元素:\n\n``` ruby\n>> arr = [1, 2]\n>> a, b = arr\n>> p a\t\t\t\t\t\t\t\t##=> 1\n>> p b\t\t\t\t\t\t\t\t##=> 2\n\n\n>> arr = [1, [2, 3], 4]\n>> a, b, c = arr\n>> p a\t\t\t\t\t\t\t\t##=> 1\n>> p b\t\t\t\t\t\t\t\t##=> [2, 3]\n>> p c\t\t\t\t\t\t\t\t##=> 4\n\n\n>> arr = [1, [2, 3], 4]\n>> a, (b, c), d = arr\n>> p a\t\t\t\t\t\t\t\t##=> 1\n>> p b\t\t\t\t\t\t\t\t##=> 2\n>> p c\t\t\t\t\t\t\t\t##=> 3\n>> p d\t\t\t\t\t\t\t\t##=> 4\n```\n只要等号左边的变量结构与数组的结构一致，即使再复杂的结构，多重赋值以可以轻松对应。\n\n### 条件判断\nRuby中条件判断有三种，if语句，unless语句，case语句。If语句我们之前讲过，这里主要涉及剩余两种。\n\n*unless语句*\n这个判断语句刚好与if语句相反，当条件为假时才执行\n\n\tunless 条件为假 then\n\t\t逻辑处理\n\tend\n\t\n\tunless 条件为假\n\t\t逻辑处理1\n\telse\n\t\t逻辑处理2\n\tend\n\t\n*then*关键字可以省略。\n\n*case语句*\n如果需要比较的对象只有一个，根据这个对象值的不同，执行不同的逻辑处理。\n\n\tcase 比较对象\n\twhen 值1 then\n\t\t逻辑处理1\n\twhen 值2 then\n\t\t逻辑处理2\n\twhen 值3 then\n\t\t逻辑处理3\n\telse\n\t\t逻辑处理4\n\tend\n\n当然，*then*关键字也可以省略。\n*when*关键字也可以一次指定多个值。\n\n\tcase 比较对象\n\twhen 值1，值2，值3 then\n\t\t逻辑处理1\n\telse\n\t\t逻辑处理2\n\tend\n\t\n在*case*语句中，*when*判断值是否相等时，实际是使用**===**运算符来判断的。当左边是数值或者字符串时，**===**与**==**的意义是一样的。\n\n*注:Ruby中只有**nil**和**false**为假，除此之外的值全为真.*\n\n在Ruby中，所有的对象都是唯一的，可以通过**object_id**（或者**__id__**)方法获取对象的标识。\n\n``` ruby\n>> arr1 = []\n>> arr2 = []\n>> p arr1.object_id\t\t\t##=> 70115564029000\n>> p arr2.__id__\t\t\t\t##=> 70115559585120\n```\n\n如果判断两个对象是否是同一个对象，即是否引用的是同一个ID的对象。Ruby提供了**equal?**方法来判断。\n\n``` ruby\n>> arr1 = []\n>> arr2 = []\n>> arr1.equal? arr2\t\t\t##=> false\n>> arr3 = arr1\n>> arr1.equal? arr3\t\t\t##=> true\n```\n\n除了**==**以外，Ruby还提供了**eql?**方法用来判断对象的值是否相等。大部分情况下 **==**与**eql?**执行结果都是一样的。但针对数值类，**eql?**方法会被重定义。\n\n``` ruby\np 1.0 == 1\t\t\t\t\t##=> true\np 1.0.eql? 1\t\t\t\t\t##=> false\n```","source":"_posts/2015-08-14-ruby-practice-3.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(3)\"\ndate: 2015-08-14 17:47:01 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n在Ruby中任何表现数据的基本单位都称为对象(object), 而Ruby的类(class)表示的就是这些对象的种类。\n\n### 变量\n和其他面向对象语言一样，Ruby也有多种类型的变量，但是在Ruby中，变量的类型是由变量的命名方式决定的。\n\n*局部变量(local variable)*\n以英文字母或者_开头\n\n``` ruby\nwords = \"Hello Ruby\"\n_words = \"Hello Ruby\"\n```\n<!--more-->\n*全局变量(global variable)*\n以$开头\n\n``` ruby\n$words=\"Hello Ruby\"\n```\n\n*实例变量(instance variable)*\n以@开头\n\n``` ruby\n@words=\"Hello Ruby\"\n```\n\n*类变量(class variable)*\n\n以@@开头\n``` ruby\n@@words = \"Hello Ruby\"\n```\n\n*伪变量(pseudo variable)*\n伪变量是Ruby预先定义好的代表某个特定值的特殊变量，因此这个值是无法改变的。如，nil、true、false、self等。\n\n*注：Ruby不需要在意变量名的长度，对于多个单词组合的变量名，使用_隔开各个单词，或者单词以大写字母开头，如：my_words,或者myWords。但是在Ruby中的变量名和方法名一般使用前者，而后者主要用于类名和模块名。*\n\n### 常量\n顾名思义，即不可修改，对已经赋值的常量再进行赋值时，Ruby会做出警告。常量均以大写字母来命名。如Ruby中预先定义好的RUBY_VERSION(运行版本)、RUBTY_PLATFORM(运行平台)、ARGV(命令行参数数组).\n\n### 多重赋值\n多重赋值是Ruby中的简化代码的一种方式，通过多重赋值可以将多个变量同时赋值。\n\n``` ruby\n>> a, b, c = 1, 2, 3\t##同时赋值a, b, c\n>> p [a, b, c]\t\t\t##=> [1, 2, 3]\n```\n这样a, b, c均被赋值了1, 2, 3。\n*注：在使用多重赋值时，建议对彼此相关变量进行多重赋值，避免程序难读懂。*\n\n即使等号(=)左右两边列表的数量不相等，Ruby也不会报错。\n*左边变量部分数量多时*\n\n``` ruby\n>> a, b, c, d = 1, 2\n>> p [a, b, c, d]\t\t\t##=> [1, 2, nil, nil]\n```\n当左边变量部分数量多时，Ruby会自动将**nil**赋值给未被分配值的变量。如上的c, d变量。\n\n*左边变量部分数量少时*\n\n``` ruby\n>> a, b, c = 1, 2, 3, 4\n>> p [a, b, c]\t\t\t\t##=> [1, 2, 3]\n```\n当变量部分比较少时，Ruby会忽略掉该值，不会分配多余的值，如上的值4。\n\n*将未被分配的值赋给指定的变量*\n当给一个变量前加上*，表示Ruby会将未分配的值封装为数组赋值给该变量。通过这种方式，Ruby会将变量与右边的值一一匹配。\n\n``` ruby\n>> a, b, *c = 1, 2, 3, 4\n>> p [a, b, c]\t\t\t\t\t##=> [1, 2, [3, 4]]\n\n>> a, *b, c = 1, 2, 3, 4, 5\n>> p [a, b, c]\t\t\t\t\t##=> [1, [2, 3, 4], 5]\n```\n\n使用多重赋值简化变量值交换：\n\n``` ruby\n>> a, b = 0, 1\n>> a, b = b, a\t\t\t\t\t##置换变量a、b的值\n>> p [a, b]\t\t\t\t\t\t##=> [1, 0]\n```\n\n使用多重赋值获取数组的元素:\n\n``` ruby\n>> arr = [1, 2]\n>> a, b = arr\n>> p a\t\t\t\t\t\t\t\t##=> 1\n>> p b\t\t\t\t\t\t\t\t##=> 2\n\n\n>> arr = [1, [2, 3], 4]\n>> a, b, c = arr\n>> p a\t\t\t\t\t\t\t\t##=> 1\n>> p b\t\t\t\t\t\t\t\t##=> [2, 3]\n>> p c\t\t\t\t\t\t\t\t##=> 4\n\n\n>> arr = [1, [2, 3], 4]\n>> a, (b, c), d = arr\n>> p a\t\t\t\t\t\t\t\t##=> 1\n>> p b\t\t\t\t\t\t\t\t##=> 2\n>> p c\t\t\t\t\t\t\t\t##=> 3\n>> p d\t\t\t\t\t\t\t\t##=> 4\n```\n只要等号左边的变量结构与数组的结构一致，即使再复杂的结构，多重赋值以可以轻松对应。\n\n### 条件判断\nRuby中条件判断有三种，if语句，unless语句，case语句。If语句我们之前讲过，这里主要涉及剩余两种。\n\n*unless语句*\n这个判断语句刚好与if语句相反，当条件为假时才执行\n\n\tunless 条件为假 then\n\t\t逻辑处理\n\tend\n\t\n\tunless 条件为假\n\t\t逻辑处理1\n\telse\n\t\t逻辑处理2\n\tend\n\t\n*then*关键字可以省略。\n\n*case语句*\n如果需要比较的对象只有一个，根据这个对象值的不同，执行不同的逻辑处理。\n\n\tcase 比较对象\n\twhen 值1 then\n\t\t逻辑处理1\n\twhen 值2 then\n\t\t逻辑处理2\n\twhen 值3 then\n\t\t逻辑处理3\n\telse\n\t\t逻辑处理4\n\tend\n\n当然，*then*关键字也可以省略。\n*when*关键字也可以一次指定多个值。\n\n\tcase 比较对象\n\twhen 值1，值2，值3 then\n\t\t逻辑处理1\n\telse\n\t\t逻辑处理2\n\tend\n\t\n在*case*语句中，*when*判断值是否相等时，实际是使用**===**运算符来判断的。当左边是数值或者字符串时，**===**与**==**的意义是一样的。\n\n*注:Ruby中只有**nil**和**false**为假，除此之外的值全为真.*\n\n在Ruby中，所有的对象都是唯一的，可以通过**object_id**（或者**__id__**)方法获取对象的标识。\n\n``` ruby\n>> arr1 = []\n>> arr2 = []\n>> p arr1.object_id\t\t\t##=> 70115564029000\n>> p arr2.__id__\t\t\t\t##=> 70115559585120\n```\n\n如果判断两个对象是否是同一个对象，即是否引用的是同一个ID的对象。Ruby提供了**equal?**方法来判断。\n\n``` ruby\n>> arr1 = []\n>> arr2 = []\n>> arr1.equal? arr2\t\t\t##=> false\n>> arr3 = arr1\n>> arr1.equal? arr3\t\t\t##=> true\n```\n\n除了**==**以外，Ruby还提供了**eql?**方法用来判断对象的值是否相等。大部分情况下 **==**与**eql?**执行结果都是一样的。但针对数值类，**eql?**方法会被重定义。\n\n``` ruby\np 1.0 == 1\t\t\t\t\t##=> true\np 1.0.eql? 1\t\t\t\t\t##=> false\n```","slug":"2015-08-14-ruby-practice-3","published":1,"updated":"2023-09-02T17:55:52.928Z","_id":"clm27g4ot003oazv56zosaypz","layout":"post","photos":[],"link":"","content":"<p>在Ruby中任何表现数据的基本单位都称为对象(object), 而Ruby的类(class)表示的就是这些对象的种类。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>和其他面向对象语言一样，Ruby也有多种类型的变量，但是在Ruby中，变量的类型是由变量的命名方式决定的。</p>\n<p><em>局部变量(local variable)</em><br>以英文字母或者_开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">words = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br><span class=\"line\">_words = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><em>全局变量(global variable)</em><br>以$开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$words</span>=<span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>实例变量(instance variable)</em><br>以@开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@words</span>=<span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>类变量(class variable)</em></p>\n<p>以@@开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@@words</span> = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>伪变量(pseudo variable)</em><br>伪变量是Ruby预先定义好的代表某个特定值的特殊变量，因此这个值是无法改变的。如，nil、true、false、self等。</p>\n<p><em>注：Ruby不需要在意变量名的长度，对于多个单词组合的变量名，使用_隔开各个单词，或者单词以大写字母开头，如：my_words,或者myWords。但是在Ruby中的变量名和方法名一般使用前者，而后者主要用于类名和模块名。</em></p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>顾名思义，即不可修改，对已经赋值的常量再进行赋值时，Ruby会做出警告。常量均以大写字母来命名。如Ruby中预先定义好的RUBY_VERSION(运行版本)、RUBTY_PLATFORM(运行平台)、ARGV(命令行参数数组).</p>\n<h3 id=\"多重赋值\"><a href=\"#多重赋值\" class=\"headerlink\" title=\"多重赋值\"></a>多重赋值</h3><p>多重赋值是Ruby中的简化代码的一种方式，通过多重赋值可以将多个变量同时赋值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>\t<span class=\"comment\">##同时赋值a, b, c</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t<span class=\"comment\">##=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>这样a, b, c均被赋值了1, 2, 3。<br><em>注：在使用多重赋值时，建议对彼此相关变量进行多重赋值，避免程序难读懂。</em></p>\n<p>即使等号(&#x3D;)左右两边列表的数量不相等，Ruby也不会报错。<br><em>左边变量部分数量多时</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c, d = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c, d]\t\t\t<span class=\"comment\">##=&gt; [1, 2, nil, nil]</span></span><br></pre></td></tr></table></figure>\n<p>当左边变量部分数量多时，Ruby会自动将<strong>nil</strong>赋值给未被分配值的变量。如上的c, d变量。</p>\n<p><em>左边变量部分数量少时</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t\t<span class=\"comment\">##=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>当变量部分比较少时，Ruby会忽略掉该值，不会分配多余的值，如上的值4。</p>\n<p><em>将未被分配的值赋给指定的变量</em><br>当给一个变量前加上*，表示Ruby会将未分配的值封装为数组赋值给该变量。通过这种方式，Ruby会将变量与右边的值一一匹配。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, *c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t\t\t<span class=\"comment\">##=&gt; [1, 2, [3, 4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, *b, c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t\t\t<span class=\"comment\">##=&gt; [1, [2, 3, 4], 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用多重赋值简化变量值交换：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b = b, a\t\t\t\t\t<span class=\"comment\">##置换变量a、b的值</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b]\t\t\t\t\t\t<span class=\"comment\">##=&gt; [1, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用多重赋值获取数组的元素:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b = arr</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p a\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p b\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c = arr</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p a\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p b\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; [2, 3]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p c\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, (b, c), d = arr</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p a\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p b\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p c\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 3</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p d\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 4</span></span><br></pre></td></tr></table></figure>\n<p>只要等号左边的变量结构与数组的结构一致，即使再复杂的结构，多重赋值以可以轻松对应。</p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><p>Ruby中条件判断有三种，if语句，unless语句，case语句。If语句我们之前讲过，这里主要涉及剩余两种。</p>\n<p><em>unless语句</em><br>这个判断语句刚好与if语句相反，当条件为假时才执行</p>\n<pre><code>unless 条件为假 then\n    逻辑处理\nend\n\nunless 条件为假\n    逻辑处理1\nelse\n    逻辑处理2\nend\n</code></pre>\n<p><em>then</em>关键字可以省略。</p>\n<p><em>case语句</em><br>如果需要比较的对象只有一个，根据这个对象值的不同，执行不同的逻辑处理。</p>\n<pre><code>case 比较对象\nwhen 值1 then\n    逻辑处理1\nwhen 值2 then\n    逻辑处理2\nwhen 值3 then\n    逻辑处理3\nelse\n    逻辑处理4\nend\n</code></pre>\n<p>当然，<em>then</em>关键字也可以省略。<br><em>when</em>关键字也可以一次指定多个值。</p>\n<pre><code>case 比较对象\nwhen 值1，值2，值3 then\n    逻辑处理1\nelse\n    逻辑处理2\nend\n</code></pre>\n<p>在<em>case</em>语句中，<em>when</em>判断值是否相等时，实际是使用**&#x3D;&#x3D;&#x3D;<strong>运算符来判断的。当左边是数值或者字符串时，</strong>&#x3D;&#x3D;&#x3D;<strong>与</strong>&#x3D;&#x3D;**的意义是一样的。</p>\n<p><em>注:Ruby中只有<strong>nil</strong>和<strong>false</strong>为假，除此之外的值全为真.</em></p>\n<p>在Ruby中，所有的对象都是唯一的，可以通过<strong>object_id</strong>（或者**<strong>id</strong>**)方法获取对象的标识。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr2 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p arr1.object_id\t\t\t<span class=\"comment\">##=&gt; 70115564029000</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p arr2.__id__\t\t\t\t<span class=\"comment\">##=&gt; 70115559585120</span></span><br></pre></td></tr></table></figure>\n\n<p>如果判断两个对象是否是同一个对象，即是否引用的是同一个ID的对象。Ruby提供了**equal?**方法来判断。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr2 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1.equal? arr2\t\t\t<span class=\"comment\">##=&gt; false</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr3 = arr1</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1.equal? arr3\t\t\t<span class=\"comment\">##=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>除了**&#x3D;&#x3D;<strong>以外，Ruby还提供了</strong>eql?**方法用来判断对象的值是否相等。大部分情况下 **&#x3D;&#x3D;<strong>与</strong>eql?<strong>执行结果都是一样的。但针对数值类，</strong>eql?**方法会被重定义。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">1.0</span> == <span class=\"number\">1</span>\t\t\t\t\t<span class=\"comment\">##=&gt; true</span></span><br><span class=\"line\">p <span class=\"number\">1.0</span>.eql? <span class=\"number\">1</span>\t\t\t\t\t<span class=\"comment\">##=&gt; false</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在Ruby中任何表现数据的基本单位都称为对象(object), 而Ruby的类(class)表示的就是这些对象的种类。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>和其他面向对象语言一样，Ruby也有多种类型的变量，但是在Ruby中，变量的类型是由变量的命名方式决定的。</p>\n<p><em>局部变量(local variable)</em><br>以英文字母或者_开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">words = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br><span class=\"line\">_words = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>","more":"<p><em>全局变量(global variable)</em><br>以$开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$words</span>=<span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>实例变量(instance variable)</em><br>以@开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@words</span>=<span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>类变量(class variable)</em></p>\n<p>以@@开头</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@@words</span> = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>伪变量(pseudo variable)</em><br>伪变量是Ruby预先定义好的代表某个特定值的特殊变量，因此这个值是无法改变的。如，nil、true、false、self等。</p>\n<p><em>注：Ruby不需要在意变量名的长度，对于多个单词组合的变量名，使用_隔开各个单词，或者单词以大写字母开头，如：my_words,或者myWords。但是在Ruby中的变量名和方法名一般使用前者，而后者主要用于类名和模块名。</em></p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>顾名思义，即不可修改，对已经赋值的常量再进行赋值时，Ruby会做出警告。常量均以大写字母来命名。如Ruby中预先定义好的RUBY_VERSION(运行版本)、RUBTY_PLATFORM(运行平台)、ARGV(命令行参数数组).</p>\n<h3 id=\"多重赋值\"><a href=\"#多重赋值\" class=\"headerlink\" title=\"多重赋值\"></a>多重赋值</h3><p>多重赋值是Ruby中的简化代码的一种方式，通过多重赋值可以将多个变量同时赋值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>\t<span class=\"comment\">##同时赋值a, b, c</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t<span class=\"comment\">##=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>这样a, b, c均被赋值了1, 2, 3。<br><em>注：在使用多重赋值时，建议对彼此相关变量进行多重赋值，避免程序难读懂。</em></p>\n<p>即使等号(&#x3D;)左右两边列表的数量不相等，Ruby也不会报错。<br><em>左边变量部分数量多时</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c, d = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c, d]\t\t\t<span class=\"comment\">##=&gt; [1, 2, nil, nil]</span></span><br></pre></td></tr></table></figure>\n<p>当左边变量部分数量多时，Ruby会自动将<strong>nil</strong>赋值给未被分配值的变量。如上的c, d变量。</p>\n<p><em>左边变量部分数量少时</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t\t<span class=\"comment\">##=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>当变量部分比较少时，Ruby会忽略掉该值，不会分配多余的值，如上的值4。</p>\n<p><em>将未被分配的值赋给指定的变量</em><br>当给一个变量前加上*，表示Ruby会将未分配的值封装为数组赋值给该变量。通过这种方式，Ruby会将变量与右边的值一一匹配。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, *c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t\t\t<span class=\"comment\">##=&gt; [1, 2, [3, 4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, *b, c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b, c]\t\t\t\t\t<span class=\"comment\">##=&gt; [1, [2, 3, 4], 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用多重赋值简化变量值交换：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b = b, a\t\t\t\t\t<span class=\"comment\">##置换变量a、b的值</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p [a, b]\t\t\t\t\t\t<span class=\"comment\">##=&gt; [1, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用多重赋值获取数组的元素:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b = arr</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p a\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p b\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, b, c = arr</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p a\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p b\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; [2, 3]</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p c\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> a, (b, c), d = arr</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p a\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p b\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p c\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 3</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p d\t\t\t\t\t\t\t\t<span class=\"comment\">##=&gt; 4</span></span><br></pre></td></tr></table></figure>\n<p>只要等号左边的变量结构与数组的结构一致，即使再复杂的结构，多重赋值以可以轻松对应。</p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><p>Ruby中条件判断有三种，if语句，unless语句，case语句。If语句我们之前讲过，这里主要涉及剩余两种。</p>\n<p><em>unless语句</em><br>这个判断语句刚好与if语句相反，当条件为假时才执行</p>\n<pre><code>unless 条件为假 then\n    逻辑处理\nend\n\nunless 条件为假\n    逻辑处理1\nelse\n    逻辑处理2\nend\n</code></pre>\n<p><em>then</em>关键字可以省略。</p>\n<p><em>case语句</em><br>如果需要比较的对象只有一个，根据这个对象值的不同，执行不同的逻辑处理。</p>\n<pre><code>case 比较对象\nwhen 值1 then\n    逻辑处理1\nwhen 值2 then\n    逻辑处理2\nwhen 值3 then\n    逻辑处理3\nelse\n    逻辑处理4\nend\n</code></pre>\n<p>当然，<em>then</em>关键字也可以省略。<br><em>when</em>关键字也可以一次指定多个值。</p>\n<pre><code>case 比较对象\nwhen 值1，值2，值3 then\n    逻辑处理1\nelse\n    逻辑处理2\nend\n</code></pre>\n<p>在<em>case</em>语句中，<em>when</em>判断值是否相等时，实际是使用**&#x3D;&#x3D;&#x3D;<strong>运算符来判断的。当左边是数值或者字符串时，</strong>&#x3D;&#x3D;&#x3D;<strong>与</strong>&#x3D;&#x3D;**的意义是一样的。</p>\n<p><em>注:Ruby中只有<strong>nil</strong>和<strong>false</strong>为假，除此之外的值全为真.</em></p>\n<p>在Ruby中，所有的对象都是唯一的，可以通过<strong>object_id</strong>（或者**<strong>id</strong>**)方法获取对象的标识。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr2 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p arr1.object_id\t\t\t<span class=\"comment\">##=&gt; 70115564029000</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> p arr2.__id__\t\t\t\t<span class=\"comment\">##=&gt; 70115559585120</span></span><br></pre></td></tr></table></figure>\n\n<p>如果判断两个对象是否是同一个对象，即是否引用的是同一个ID的对象。Ruby提供了**equal?**方法来判断。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr2 = []</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1.equal? arr2\t\t\t<span class=\"comment\">##=&gt; false</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr3 = arr1</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> arr1.equal? arr3\t\t\t<span class=\"comment\">##=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>除了**&#x3D;&#x3D;<strong>以外，Ruby还提供了</strong>eql?**方法用来判断对象的值是否相等。大部分情况下 **&#x3D;&#x3D;<strong>与</strong>eql?<strong>执行结果都是一样的。但针对数值类，</strong>eql?**方法会被重定义。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">1.0</span> == <span class=\"number\">1</span>\t\t\t\t\t<span class=\"comment\">##=&gt; true</span></span><br><span class=\"line\">p <span class=\"number\">1.0</span>.eql? <span class=\"number\">1</span>\t\t\t\t\t<span class=\"comment\">##=&gt; false</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(4)","date":"2015-08-17T09:01:35.000Z","comments":1,"_content":"\n### 循环\n对于任何一种程序设计语言，都有循环处理的方法，Ruby也一样，但是在Ruby中有两种实现循环的方法。\n\n- 使用循环语句，即利用Ruby提供的现有循环语句\n- 使用方法实现循环，其具体做法为，将块传给方法，然后在块里面写上需要循环的处理。\n\n在Ruby中，有6种循环语句或方法：\n<!-- more -->\n\n- times方法\n- while语句\n- each方法\n- for语句\n- until语句\n- loop方法\n\n*times方法*\n用于已知道执行的次数，具体用法如下:\n\n\t循环次数.times do\n\t\t逻辑处理\n\tend\n\t\n\t#do ~ end部分可以用 { ~ }代替.\n\t\n\t循环次数.times {\n\t\t逻辑处理\n\t}\n\n``` ruby times方法\n>> 3.times do\n>> \t\tprint \"hello \"\n>> end\nhello hello hello => 3\t\t\t\t#=> 打印3个hello，并返回循环次数\n```\n如果想知道当前的循环次数，则需要添加一个当前的循环次数变量:\n\n\t循环次数.times do |i|\n\t\t逻辑处理\n\tend\n\t\n``` ruby 带循环次数的times方法\n>> 3.times do |i|\n>> \t\tprint \"hello#{i} \"\n>> end\nhello0 hello1 hello2 => 3\t\t\t#=> 打印3个带有当前第几次循环的hello,并返回循环次数\n```\n*注：**times**方法会返回循环次数*\n\n*for语句*\n与**times**方法不同，**for**并不是方法，而是循环控制语句。\n\n\tfor 变量 in 开始时的数值..结束时的数值 do\n\t\t循环处理\n\tend\n\t\n\t#遍历对象的for语句\n\tfor 变量 in 对象 do\n\t\t循环处理\n\tend\n\n**for**语句的循环开始值和结束值可以任意指定。\n\n``` ruby for语句\n>> for i in 1..3\n>> \t\tprint \"hello \"\n>> end\nhello hello hello => 1..3\t\t\t#=> 打印3个hello，返回1..3的range\n\n\n>> language = [\"Python\", \"JavaScript\", \"Ruby\"]\n>> for lan in language\n>> \t\tprint \"#{lan} \"\n>> end\nPython JavaScript Ruby => [\"Python\", \"JavaScript\", \"Ruby\"]\t\t\t#=> 一次打印数组中的元素，并返回数组\n```\n*注：..或者...都是创建范围对象时所需的符号*\n\n*while语句*\n之前了解到，语法如下，十分简单\n\n\twhile 条件 do\n\t\t循环处理\n\tend\n\t\n``` ruby while语句\n>> i, sum = 1, 0\n>> while sum < 50 do\n>> \t\tsum += i\n>> \t\ti += 1\n>> end\n>> puts sum\t\t\t\t\t#=> 55\n```\n\n*until语句*\n和**while**语句刚刚相反，**until**语句不满足条件时才执行循环处理，知道条件满足终止。\n\n\tuntil 条件 do\n\t\t循环处理\n\tend\n\n\n``` ruby until语句\n>> i, sum = 1, 0\n>> until sum >=50 do\n>> \t\tsum += i\n>> \t\ti += 1\n>> end\n>>  puts sum\t\t\t\t\t#=> 55\n```\n\n*each方法*\n**each**方法将对象集合里的对象逐个取出，这与**for**语句循环取出数组元素非常相似。\n\n\t对象.each do |变量|\n\t\t循环处理\n\tend\n\t\n\t#与下面的for语句处理一样\n\tfor 变量 in 对象\n\t\t循环处理\n\tend\n\t\t\n``` ruby each方法\n>> language = [\"Python\", \"JavaScript\", \"Ruby\"]\n>> language.each do |lan|\n>> \t\tprint \"#{lan} \"\n>> end\nPython JavaScript Ruby => [\"Python\", \"JavaScript\", \"Ruby\"]\t\t\t#=> 返回对象\n```\n\n*注：在Ruby内部，**for**语句是用**each**方法来实现的。可以使用**each**方法的对象，也可以用**for**语句*\n\n*loop方法*\n此循环方法没用终止循环条件，需要用得循环控制语句来控制此循环\n\n\tloop do\n\t\t循环处理\n\tend\n\n### 循环控制命令\n- break 终止程序，跳出循环\n- next 跳到下一次循环，和其他类似Java，C#的continue一样\n- redo 在相同的条件下重复刚才的处理\n\n**redo**与**next**非常像，与**next**的不同之处是，**redo**会再执行一次相同的循环。所以要注意**redo**的使用方法，很容易陷入死循环中。\n\n\n\n*注： **do ~ end** 和 **{ ~ }** 是等价的语句块。 只不过从编码规范上来说，如果程序是跨行写的时候使用**do ~ end**，程序写在1行的时候用**{ ~ }**.\n\n``` ruby\n>> 3.times do |i|\n>>\t\tputs i\n>> end\n\n>> 3.times { |i| puts i }\n```\n","source":"_posts/2015-08-17-ruby-practice-4.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(4)\"\ndate: 2015-08-17 17:01:35 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n### 循环\n对于任何一种程序设计语言，都有循环处理的方法，Ruby也一样，但是在Ruby中有两种实现循环的方法。\n\n- 使用循环语句，即利用Ruby提供的现有循环语句\n- 使用方法实现循环，其具体做法为，将块传给方法，然后在块里面写上需要循环的处理。\n\n在Ruby中，有6种循环语句或方法：\n<!-- more -->\n\n- times方法\n- while语句\n- each方法\n- for语句\n- until语句\n- loop方法\n\n*times方法*\n用于已知道执行的次数，具体用法如下:\n\n\t循环次数.times do\n\t\t逻辑处理\n\tend\n\t\n\t#do ~ end部分可以用 { ~ }代替.\n\t\n\t循环次数.times {\n\t\t逻辑处理\n\t}\n\n``` ruby times方法\n>> 3.times do\n>> \t\tprint \"hello \"\n>> end\nhello hello hello => 3\t\t\t\t#=> 打印3个hello，并返回循环次数\n```\n如果想知道当前的循环次数，则需要添加一个当前的循环次数变量:\n\n\t循环次数.times do |i|\n\t\t逻辑处理\n\tend\n\t\n``` ruby 带循环次数的times方法\n>> 3.times do |i|\n>> \t\tprint \"hello#{i} \"\n>> end\nhello0 hello1 hello2 => 3\t\t\t#=> 打印3个带有当前第几次循环的hello,并返回循环次数\n```\n*注：**times**方法会返回循环次数*\n\n*for语句*\n与**times**方法不同，**for**并不是方法，而是循环控制语句。\n\n\tfor 变量 in 开始时的数值..结束时的数值 do\n\t\t循环处理\n\tend\n\t\n\t#遍历对象的for语句\n\tfor 变量 in 对象 do\n\t\t循环处理\n\tend\n\n**for**语句的循环开始值和结束值可以任意指定。\n\n``` ruby for语句\n>> for i in 1..3\n>> \t\tprint \"hello \"\n>> end\nhello hello hello => 1..3\t\t\t#=> 打印3个hello，返回1..3的range\n\n\n>> language = [\"Python\", \"JavaScript\", \"Ruby\"]\n>> for lan in language\n>> \t\tprint \"#{lan} \"\n>> end\nPython JavaScript Ruby => [\"Python\", \"JavaScript\", \"Ruby\"]\t\t\t#=> 一次打印数组中的元素，并返回数组\n```\n*注：..或者...都是创建范围对象时所需的符号*\n\n*while语句*\n之前了解到，语法如下，十分简单\n\n\twhile 条件 do\n\t\t循环处理\n\tend\n\t\n``` ruby while语句\n>> i, sum = 1, 0\n>> while sum < 50 do\n>> \t\tsum += i\n>> \t\ti += 1\n>> end\n>> puts sum\t\t\t\t\t#=> 55\n```\n\n*until语句*\n和**while**语句刚刚相反，**until**语句不满足条件时才执行循环处理，知道条件满足终止。\n\n\tuntil 条件 do\n\t\t循环处理\n\tend\n\n\n``` ruby until语句\n>> i, sum = 1, 0\n>> until sum >=50 do\n>> \t\tsum += i\n>> \t\ti += 1\n>> end\n>>  puts sum\t\t\t\t\t#=> 55\n```\n\n*each方法*\n**each**方法将对象集合里的对象逐个取出，这与**for**语句循环取出数组元素非常相似。\n\n\t对象.each do |变量|\n\t\t循环处理\n\tend\n\t\n\t#与下面的for语句处理一样\n\tfor 变量 in 对象\n\t\t循环处理\n\tend\n\t\t\n``` ruby each方法\n>> language = [\"Python\", \"JavaScript\", \"Ruby\"]\n>> language.each do |lan|\n>> \t\tprint \"#{lan} \"\n>> end\nPython JavaScript Ruby => [\"Python\", \"JavaScript\", \"Ruby\"]\t\t\t#=> 返回对象\n```\n\n*注：在Ruby内部，**for**语句是用**each**方法来实现的。可以使用**each**方法的对象，也可以用**for**语句*\n\n*loop方法*\n此循环方法没用终止循环条件，需要用得循环控制语句来控制此循环\n\n\tloop do\n\t\t循环处理\n\tend\n\n### 循环控制命令\n- break 终止程序，跳出循环\n- next 跳到下一次循环，和其他类似Java，C#的continue一样\n- redo 在相同的条件下重复刚才的处理\n\n**redo**与**next**非常像，与**next**的不同之处是，**redo**会再执行一次相同的循环。所以要注意**redo**的使用方法，很容易陷入死循环中。\n\n\n\n*注： **do ~ end** 和 **{ ~ }** 是等价的语句块。 只不过从编码规范上来说，如果程序是跨行写的时候使用**do ~ end**，程序写在1行的时候用**{ ~ }**.\n\n``` ruby\n>> 3.times do |i|\n>>\t\tputs i\n>> end\n\n>> 3.times { |i| puts i }\n```\n","slug":"2015-08-17-ruby-practice-4","published":1,"updated":"2023-09-02T17:55:57.042Z","_id":"clm27g4ot003pazv58yqe5vqp","layout":"post","photos":[],"link":"","content":"<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><p>对于任何一种程序设计语言，都有循环处理的方法，Ruby也一样，但是在Ruby中有两种实现循环的方法。</p>\n<ul>\n<li>使用循环语句，即利用Ruby提供的现有循环语句</li>\n<li>使用方法实现循环，其具体做法为，将块传给方法，然后在块里面写上需要循环的处理。</li>\n</ul>\n<p>在Ruby中，有6种循环语句或方法：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>times方法</li>\n<li>while语句</li>\n<li>each方法</li>\n<li>for语句</li>\n<li>until语句</li>\n<li>loop方法</li>\n</ul>\n<p><em>times方法</em><br>用于已知道执行的次数，具体用法如下:</p>\n<pre><code>循环次数.times do\n    逻辑处理\nend\n\n#do ~ end部分可以用 &#123; ~ &#125;代替.\n\n循环次数.times &#123;\n    逻辑处理\n&#125;\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>times方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">hello hello hello =&gt; <span class=\"number\">3</span>\t\t\t\t<span class=\"comment\">#=&gt; 打印3个hello，并返回循环次数</span></span><br></pre></td></tr></table></figure>\n<p>如果想知道当前的循环次数，则需要添加一个当前的循环次数变量:</p>\n<pre><code>循环次数.times do |i|\n    逻辑处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>带循环次数的times方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;hello<span class=\"subst\">#&#123;i&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">hello0 hello1 hello2 =&gt; <span class=\"number\">3</span>\t\t\t<span class=\"comment\">#=&gt; 打印3个带有当前第几次循环的hello,并返回循环次数</span></span><br></pre></td></tr></table></figure>\n<p><em>注：<strong>times</strong>方法会返回循环次数</em></p>\n<p><em>for语句</em><br>与<strong>times</strong>方法不同，<strong>for</strong>并不是方法，而是循环控制语句。</p>\n<pre><code>for 变量 in 开始时的数值..结束时的数值 do\n    循环处理\nend\n\n#遍历对象的for语句\nfor 变量 in 对象 do\n    循环处理\nend\n</code></pre>\n<p><strong>for</strong>语句的循环开始值和结束值可以任意指定。</p>\n<figure class=\"highlight ruby\"><figcaption><span>for语句</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">hello hello hello =&gt; <span class=\"number\">1</span>..<span class=\"number\">3</span>\t\t\t<span class=\"comment\">#=&gt; 打印3个hello，返回1..3的range</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> language = [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">for</span> lan <span class=\"keyword\">in</span> language</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;<span class=\"subst\">#&#123;lan&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">Python</span> <span class=\"title class_\">JavaScript</span> <span class=\"title class_\">Ruby</span> =&gt; [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; 一次打印数组中的元素，并返回数组</span></span><br></pre></td></tr></table></figure>\n<p><em>注：..或者…都是创建范围对象时所需的符号</em></p>\n<p><em>while语句</em><br>之前了解到，语法如下，十分简单</p>\n<pre><code>while 条件 do\n    循环处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>while语句</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> i, sum = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">while</span> sum &lt; <span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tsum += i</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\ti += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> puts sum\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br></pre></td></tr></table></figure>\n\n<p><em>until语句</em><br>和<strong>while</strong>语句刚刚相反，<strong>until</strong>语句不满足条件时才执行循环处理，知道条件满足终止。</p>\n<pre><code>until 条件 do\n    循环处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>until语句</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> i, sum = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">until</span> sum &gt;=<span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tsum += i</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\ti += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span>  puts sum\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br></pre></td></tr></table></figure>\n\n<p><em>each方法</em><br><strong>each</strong>方法将对象集合里的对象逐个取出，这与<strong>for</strong>语句循环取出数组元素非常相似。</p>\n<pre><code>对象.each do |变量|\n    循环处理\nend\n\n#与下面的for语句处理一样\nfor 变量 in 对象\n    循环处理\nend\n    \n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>each方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> language = [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> language.each <span class=\"keyword\">do</span> |<span class=\"params\">lan</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;<span class=\"subst\">#&#123;lan&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">Python</span> <span class=\"title class_\">JavaScript</span> <span class=\"title class_\">Ruby</span> =&gt; [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; 返回对象</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：在Ruby内部，<strong>for</strong>语句是用<strong>each</strong>方法来实现的。可以使用<strong>each</strong>方法的对象，也可以用<strong>for</strong>语句</em></p>\n<p><em>loop方法</em><br>此循环方法没用终止循环条件，需要用得循环控制语句来控制此循环</p>\n<pre><code>loop do\n    循环处理\nend\n</code></pre>\n<h3 id=\"循环控制命令\"><a href=\"#循环控制命令\" class=\"headerlink\" title=\"循环控制命令\"></a>循环控制命令</h3><ul>\n<li>break 终止程序，跳出循环</li>\n<li>next 跳到下一次循环，和其他类似Java，C#的continue一样</li>\n<li>redo 在相同的条件下重复刚才的处理</li>\n</ul>\n<p><strong>redo</strong>与<strong>next</strong>非常像，与<strong>next</strong>的不同之处是，<strong>redo</strong>会再执行一次相同的循环。所以要注意<strong>redo</strong>的使用方法，很容易陷入死循环中。</p>\n<p><em>注： <strong>do ~ end</strong> 和 <strong>{ ~ }</strong> 是等价的语句块。 只不过从编码规范上来说，如果程序是跨行写的时候使用<strong>do ~ end</strong>，程序写在1行的时候用*</em>{ ~ }**.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">&gt;&gt;\t\tputs i</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times &#123; |<span class=\"params\">i</span>| puts i &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><p>对于任何一种程序设计语言，都有循环处理的方法，Ruby也一样，但是在Ruby中有两种实现循环的方法。</p>\n<ul>\n<li>使用循环语句，即利用Ruby提供的现有循环语句</li>\n<li>使用方法实现循环，其具体做法为，将块传给方法，然后在块里面写上需要循环的处理。</li>\n</ul>\n<p>在Ruby中，有6种循环语句或方法：</p>","more":"<ul>\n<li>times方法</li>\n<li>while语句</li>\n<li>each方法</li>\n<li>for语句</li>\n<li>until语句</li>\n<li>loop方法</li>\n</ul>\n<p><em>times方法</em><br>用于已知道执行的次数，具体用法如下:</p>\n<pre><code>循环次数.times do\n    逻辑处理\nend\n\n#do ~ end部分可以用 &#123; ~ &#125;代替.\n\n循环次数.times &#123;\n    逻辑处理\n&#125;\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>times方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">hello hello hello =&gt; <span class=\"number\">3</span>\t\t\t\t<span class=\"comment\">#=&gt; 打印3个hello，并返回循环次数</span></span><br></pre></td></tr></table></figure>\n<p>如果想知道当前的循环次数，则需要添加一个当前的循环次数变量:</p>\n<pre><code>循环次数.times do |i|\n    逻辑处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>带循环次数的times方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;hello<span class=\"subst\">#&#123;i&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">hello0 hello1 hello2 =&gt; <span class=\"number\">3</span>\t\t\t<span class=\"comment\">#=&gt; 打印3个带有当前第几次循环的hello,并返回循环次数</span></span><br></pre></td></tr></table></figure>\n<p><em>注：<strong>times</strong>方法会返回循环次数</em></p>\n<p><em>for语句</em><br>与<strong>times</strong>方法不同，<strong>for</strong>并不是方法，而是循环控制语句。</p>\n<pre><code>for 变量 in 开始时的数值..结束时的数值 do\n    循环处理\nend\n\n#遍历对象的for语句\nfor 变量 in 对象 do\n    循环处理\nend\n</code></pre>\n<p><strong>for</strong>语句的循环开始值和结束值可以任意指定。</p>\n<figure class=\"highlight ruby\"><figcaption><span>for语句</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">hello hello hello =&gt; <span class=\"number\">1</span>..<span class=\"number\">3</span>\t\t\t<span class=\"comment\">#=&gt; 打印3个hello，返回1..3的range</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> language = [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">for</span> lan <span class=\"keyword\">in</span> language</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;<span class=\"subst\">#&#123;lan&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">Python</span> <span class=\"title class_\">JavaScript</span> <span class=\"title class_\">Ruby</span> =&gt; [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; 一次打印数组中的元素，并返回数组</span></span><br></pre></td></tr></table></figure>\n<p><em>注：..或者…都是创建范围对象时所需的符号</em></p>\n<p><em>while语句</em><br>之前了解到，语法如下，十分简单</p>\n<pre><code>while 条件 do\n    循环处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>while语句</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> i, sum = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">while</span> sum &lt; <span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tsum += i</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\ti += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> puts sum\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br></pre></td></tr></table></figure>\n\n<p><em>until语句</em><br>和<strong>while</strong>语句刚刚相反，<strong>until</strong>语句不满足条件时才执行循环处理，知道条件满足终止。</p>\n<pre><code>until 条件 do\n    循环处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>until语句</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> i, sum = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">until</span> sum &gt;=<span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tsum += i</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\ti += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span>  puts sum\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br></pre></td></tr></table></figure>\n\n<p><em>each方法</em><br><strong>each</strong>方法将对象集合里的对象逐个取出，这与<strong>for</strong>语句循环取出数组元素非常相似。</p>\n<pre><code>对象.each do |变量|\n    循环处理\nend\n\n#与下面的for语句处理一样\nfor 变量 in 对象\n    循环处理\nend\n    \n</code></pre>\n<figure class=\"highlight ruby\"><figcaption><span>each方法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> language = [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> language.each <span class=\"keyword\">do</span> |<span class=\"params\">lan</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> \t\tprint <span class=\"string\">&quot;<span class=\"subst\">#&#123;lan&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">Python</span> <span class=\"title class_\">JavaScript</span> <span class=\"title class_\">Ruby</span> =&gt; [<span class=\"string\">&quot;Python&quot;</span>, <span class=\"string\">&quot;JavaScript&quot;</span>, <span class=\"string\">&quot;Ruby&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; 返回对象</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：在Ruby内部，<strong>for</strong>语句是用<strong>each</strong>方法来实现的。可以使用<strong>each</strong>方法的对象，也可以用<strong>for</strong>语句</em></p>\n<p><em>loop方法</em><br>此循环方法没用终止循环条件，需要用得循环控制语句来控制此循环</p>\n<pre><code>loop do\n    循环处理\nend\n</code></pre>\n<h3 id=\"循环控制命令\"><a href=\"#循环控制命令\" class=\"headerlink\" title=\"循环控制命令\"></a>循环控制命令</h3><ul>\n<li>break 终止程序，跳出循环</li>\n<li>next 跳到下一次循环，和其他类似Java，C#的continue一样</li>\n<li>redo 在相同的条件下重复刚才的处理</li>\n</ul>\n<p><strong>redo</strong>与<strong>next</strong>非常像，与<strong>next</strong>的不同之处是，<strong>redo</strong>会再执行一次相同的循环。所以要注意<strong>redo</strong>的使用方法，很容易陷入死循环中。</p>\n<p><em>注： <strong>do ~ end</strong> 和 <strong>{ ~ }</strong> 是等价的语句块。 只不过从编码规范上来说，如果程序是跨行写的时候使用<strong>do ~ end</strong>，程序写在1行的时候用*</em>{ ~ }**.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">&gt;&gt;\t\tputs i</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"number\">3</span>.times &#123; |<span class=\"params\">i</span>| puts i &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(2)","date":"2015-08-13T05:35:15.000Z","comments":1,"_content":"\n### 数组\n\nRuby中数组的大小是按实际情况自动调整的，即所谓的**动态数组**\n\n``` ruby\n>> rubyArray = [\"data1\", \"data2\"]   ##定义两个数据的数组\n>> rubyArray[2] = \"data3\"           ##新增第三个数据\n>> print rubyArray                  ##打印[\"data1\", \"data2\", \"data3\"]\n```\nRuby数组还支持多种不同对象的混合保存, 通过**数组.size**可获取数组的大小\n\n``` ruby\n>> mixedArray = [1, \"data\", 2, \"time\", 3]\n>> mixedArray.size     #=> 5\n```\n<!-- more -->\n\n遍历数组也很方便，利用each方法，ruby提供了两种书写方式。*each方法会返回原数组的值*\n\n``` ruby do/end代码块方式\n>> mixedArray = [1, \"data\", 2, \"time\",3]\n>> mixedArray.each do |value|\n>> print \"#{value} \"\n>> end\n\n##将会打印出:1 data 2 time 3,并且返回mixedArray。\n```\n\n``` ruby {}代码块方式\n>> mixedArray.each {\n>> |value|\n>> print \"#{value} \"\n>> }\n```\n上面两种方式的输出结果和返回值都一样。建议采用第一种，更加符合Ruby的风格。\n\n*注:通过在终端输入**irb --simple-promot**，可以简化ruby交互式的提示输入，如上面的Ruby的提示输入符'>>'*\n\n### 散列\nRuby中的键值(key-value pair)数据结构是用散列(hash)来表示，一般以字符串或者符号(Symbol)来作为键，值来保存对应的对象。\n\n*符号(symbol)*与字符串对象很相似，符号也是对象，一般都作为名称标签来使用。我们可以将符号简单理解为轻量级的字符串。\n\n符号的定义只需在标识符的开头加上':'即可\n\n``` ruby\n>> sym1 = :text\n>> sym2 = :\"text\"\n```\n以上两行代码都是表示符号\":foo\".\n\n使用符号比使用字符串更有效率，而且符号与字符串可以互相任意转换, 用**to_s**和**to_sym**方法\n\n``` ruby\n>> sym = :text\n=> :text\n>> sym.to_s\t\t\t##将符号转为话字符串\n=> \"text\"\n>> \"text\".to_sym    ##将字符串转为符号\n=> :text\n>>\n```\n\n如何定义一个散列，定义一个散列有下列两种写法:\n\n``` ruby 散列定义方式一\n>> details = {:name => \"yu\", :gender => \"male\", :alias => \"stonefishy\"}\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\"}\n```\n\n``` ruby 散列定义方式二\n>> details = {name: \"yu\", gender: \"male\", alias: \"stonefishy\"}\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\"}\n```\n第二种方式和*json*数据的格式相似。\n\n操作散列也很简单，直接看下面执行示例\n\n``` ruby\n>> details[:age] = 18\t\t\t\t##新增一个age值\n=> 18\n>> details\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\", :age=>18}\n>> details[:name] \t\t\t\t\t##获取指定键的值\n=> \"yu\"\n>> details[:age] = 20\t\t\t\t##修改指定键的值\n=> 20\n>> details\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\", :age=>20}\n```\n*注: =>符号表示ruby交互式模式的输出命令*\n\n使用each方法遍历散列：\n\n``` ruby\n>> details.each do |key, value|\n?> puts \"#{key} - #{value}\"\n>> end\nname - yu\ngender - male\nalias - stonefishy\nage - 20\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\", :age=>20}   ##each方法同样会返回散列\n```\n\n### 正则表达式\n正则表达式(Regular Expression)的语法如下，\n\n\t/模式/\n\n使用运算符=~来匹配正则表达式和字符串, 若匹配成功返回匹配部分的位置，匹配失败返回nil值。\n\n\t/模式/ =~ 希望匹配的字符串\n\n``` ruby\n>> /ruby/ =~ \"hello, ruby\"\t\t\t##包含‘ruby’字符串\n=> 7\n>> /^ruby$/ =~ \"hello, ruby\"\t\t##完全匹配‘ruby’字符串\n=> nil\n>> /ruby$/ =~ \"hello, ruby\"\t\t##以‘ruby’字符串结尾\n=> 7\n```\n\n正则表达式右边的/后面添加i表示不区分大小写匹配:\n\n``` ruby\n>> /RUby/i =~ \"hello, ruby\"\n=> 7\n```\n\n定义正则表达式还有另外一种方式，直接用**Regexp**类来创建:\n\n``` ruby\npattern = Regexp.new(\"ruby\")\t\t##定义一个正则表达式\n=> /ruby/\n>> pattern =~ \"hello, ruby\"\n=> 7\n```\n*注: 如果想更加详细的了解正则表达式的语法，可以查看使用[Rubular](http://rubular.com/)*\n\n### 命令行参数\nRuby中使用**ARGV**这个Ruby预定义好的数组来获取从命令行传递过来的数据。在命令行指定多个脚本参数时，各个参数之间用空格隔开。\n\n使用**each_with_index**方法可以获取遍历的index，\n\n``` ruby argv.rb\nARGV.each_with_index do |arg, index|\nputs \"第#{index + 1}个参数: #{arg}\"\nend\n```\n执行和输出结果如下:\n\n\t> ruby argv.rb hello world and ruby\t##命令行输入参数\n\t=> 第1个参数: hello\n\t=> 第2个参数: world\n\t=> 第3个参数: and\n\t=> 第4个参数: ruby\n\n### 文件读取\nRuby中通过File类来读取文件，两种读取方式，一次性读取和逐行读取，示例如下,\n\n``` ruby read_all_text.rb\nfile = File.open(ARGV[0])\t\t##打开文件\ntext = file.read\t\t\t\t\t##读取文件中得所有文本数据\nprint text\nfile.close\t\t\t\t\t\t##关闭文件句柄\n```\n\n``` ruby read_each_line_text.rb\nfile = File.open(ARGV[0])\nfile.each_line do |line|\t\t ##逐行读取文件\n\tprint line\nend\nfile.close\n```\n\n### 方法的定义\nRuby方法的定义和Python一样简答，\n\n\tdef 方法名\n\t\t希望处理的逻辑\n\tend\n\t\n我们现在将上面读取文件的代码定义在一个方法中，\n\n``` ruby read_file.rb\ndef read_file(file_name)\n\tfile = File.open(file_name)\n\tfile.each_line do |line|\n\t\tprint line\n\tend\nend\n```\n\n现在我们想在其他文件里面使用上面定义的文件读取方法，那么该如何引用了，且看下，\n\n### 引用文件\nRuby使用**require**方法来引用库或文件\n\n\trequire 希望使用的库名\n\n*库名可以省略后缀.rb*\n\n``` ruby invoke_read_file.rb\nrequire \"./read_file\"\t\t\t##引入读取文件的库\nread_file(\"argv.rb\");\t\t\t##直接调用库中的方法\n```\n\n执行示例：\n\n\t> ruby invoke_read_file.rb\n\t=> ARGV.each_with_index do |arg, index|\n\t=> puts \"第#{index + 1}个参数: #{arg}\"\n\t=> end\n\n### p与pp方法\n如前我们所介绍的打印数据到终端的有**p**, **puts**, **print**等方法，现在再介绍一种按数据排版打印的方法**pp**, 其全名为 pretty print。但是如果想使用该方法，需要使用require方法引入**pp**库。直接看示例\n\n``` ruby p_and_pp.rb\nrequire \"pp\"\n\ndetails = [{content1: \"This is content1\", \n\t\t\tcontent2: \"This is content2\", \n\t\t\tcontent3: \"This is content3\"}]\n\nputs \"p的输出格式如下:\"\np details\n\nputs \"pp的输出格式如下:\"\npp details\n```\n\n执行示例:\n\n\tp的输出格式如下:\n\t[{:content1=>\"This is content1\", :content2=>\"This is content2\", :content3=>\"This is content3\"}]\n\tpp的输出格式如下:\n\t[{:content1=>\"This is content1\",\n  \t  :content2=>\"This is content2\",\n  \t  :content3=>\"This is content3\"}]\n  \t  \n与**p**方法的不同之处在于，**pp**方法在输出对象的结果时，为了更容易看懂，会适当的换行以调整输出结果。如上所示。\n  \t\n  \n\n\n\n\n","source":"_posts/2015-08-13-ruby-practice-2.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(2)\"\ndate: 2015-08-13 13:35:15 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n### 数组\n\nRuby中数组的大小是按实际情况自动调整的，即所谓的**动态数组**\n\n``` ruby\n>> rubyArray = [\"data1\", \"data2\"]   ##定义两个数据的数组\n>> rubyArray[2] = \"data3\"           ##新增第三个数据\n>> print rubyArray                  ##打印[\"data1\", \"data2\", \"data3\"]\n```\nRuby数组还支持多种不同对象的混合保存, 通过**数组.size**可获取数组的大小\n\n``` ruby\n>> mixedArray = [1, \"data\", 2, \"time\", 3]\n>> mixedArray.size     #=> 5\n```\n<!-- more -->\n\n遍历数组也很方便，利用each方法，ruby提供了两种书写方式。*each方法会返回原数组的值*\n\n``` ruby do/end代码块方式\n>> mixedArray = [1, \"data\", 2, \"time\",3]\n>> mixedArray.each do |value|\n>> print \"#{value} \"\n>> end\n\n##将会打印出:1 data 2 time 3,并且返回mixedArray。\n```\n\n``` ruby {}代码块方式\n>> mixedArray.each {\n>> |value|\n>> print \"#{value} \"\n>> }\n```\n上面两种方式的输出结果和返回值都一样。建议采用第一种，更加符合Ruby的风格。\n\n*注:通过在终端输入**irb --simple-promot**，可以简化ruby交互式的提示输入，如上面的Ruby的提示输入符'>>'*\n\n### 散列\nRuby中的键值(key-value pair)数据结构是用散列(hash)来表示，一般以字符串或者符号(Symbol)来作为键，值来保存对应的对象。\n\n*符号(symbol)*与字符串对象很相似，符号也是对象，一般都作为名称标签来使用。我们可以将符号简单理解为轻量级的字符串。\n\n符号的定义只需在标识符的开头加上':'即可\n\n``` ruby\n>> sym1 = :text\n>> sym2 = :\"text\"\n```\n以上两行代码都是表示符号\":foo\".\n\n使用符号比使用字符串更有效率，而且符号与字符串可以互相任意转换, 用**to_s**和**to_sym**方法\n\n``` ruby\n>> sym = :text\n=> :text\n>> sym.to_s\t\t\t##将符号转为话字符串\n=> \"text\"\n>> \"text\".to_sym    ##将字符串转为符号\n=> :text\n>>\n```\n\n如何定义一个散列，定义一个散列有下列两种写法:\n\n``` ruby 散列定义方式一\n>> details = {:name => \"yu\", :gender => \"male\", :alias => \"stonefishy\"}\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\"}\n```\n\n``` ruby 散列定义方式二\n>> details = {name: \"yu\", gender: \"male\", alias: \"stonefishy\"}\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\"}\n```\n第二种方式和*json*数据的格式相似。\n\n操作散列也很简单，直接看下面执行示例\n\n``` ruby\n>> details[:age] = 18\t\t\t\t##新增一个age值\n=> 18\n>> details\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\", :age=>18}\n>> details[:name] \t\t\t\t\t##获取指定键的值\n=> \"yu\"\n>> details[:age] = 20\t\t\t\t##修改指定键的值\n=> 20\n>> details\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\", :age=>20}\n```\n*注: =>符号表示ruby交互式模式的输出命令*\n\n使用each方法遍历散列：\n\n``` ruby\n>> details.each do |key, value|\n?> puts \"#{key} - #{value}\"\n>> end\nname - yu\ngender - male\nalias - stonefishy\nage - 20\n=> {:name=>\"yu\", :gender=>\"male\", :alias=>\"stonefishy\", :age=>20}   ##each方法同样会返回散列\n```\n\n### 正则表达式\n正则表达式(Regular Expression)的语法如下，\n\n\t/模式/\n\n使用运算符=~来匹配正则表达式和字符串, 若匹配成功返回匹配部分的位置，匹配失败返回nil值。\n\n\t/模式/ =~ 希望匹配的字符串\n\n``` ruby\n>> /ruby/ =~ \"hello, ruby\"\t\t\t##包含‘ruby’字符串\n=> 7\n>> /^ruby$/ =~ \"hello, ruby\"\t\t##完全匹配‘ruby’字符串\n=> nil\n>> /ruby$/ =~ \"hello, ruby\"\t\t##以‘ruby’字符串结尾\n=> 7\n```\n\n正则表达式右边的/后面添加i表示不区分大小写匹配:\n\n``` ruby\n>> /RUby/i =~ \"hello, ruby\"\n=> 7\n```\n\n定义正则表达式还有另外一种方式，直接用**Regexp**类来创建:\n\n``` ruby\npattern = Regexp.new(\"ruby\")\t\t##定义一个正则表达式\n=> /ruby/\n>> pattern =~ \"hello, ruby\"\n=> 7\n```\n*注: 如果想更加详细的了解正则表达式的语法，可以查看使用[Rubular](http://rubular.com/)*\n\n### 命令行参数\nRuby中使用**ARGV**这个Ruby预定义好的数组来获取从命令行传递过来的数据。在命令行指定多个脚本参数时，各个参数之间用空格隔开。\n\n使用**each_with_index**方法可以获取遍历的index，\n\n``` ruby argv.rb\nARGV.each_with_index do |arg, index|\nputs \"第#{index + 1}个参数: #{arg}\"\nend\n```\n执行和输出结果如下:\n\n\t> ruby argv.rb hello world and ruby\t##命令行输入参数\n\t=> 第1个参数: hello\n\t=> 第2个参数: world\n\t=> 第3个参数: and\n\t=> 第4个参数: ruby\n\n### 文件读取\nRuby中通过File类来读取文件，两种读取方式，一次性读取和逐行读取，示例如下,\n\n``` ruby read_all_text.rb\nfile = File.open(ARGV[0])\t\t##打开文件\ntext = file.read\t\t\t\t\t##读取文件中得所有文本数据\nprint text\nfile.close\t\t\t\t\t\t##关闭文件句柄\n```\n\n``` ruby read_each_line_text.rb\nfile = File.open(ARGV[0])\nfile.each_line do |line|\t\t ##逐行读取文件\n\tprint line\nend\nfile.close\n```\n\n### 方法的定义\nRuby方法的定义和Python一样简答，\n\n\tdef 方法名\n\t\t希望处理的逻辑\n\tend\n\t\n我们现在将上面读取文件的代码定义在一个方法中，\n\n``` ruby read_file.rb\ndef read_file(file_name)\n\tfile = File.open(file_name)\n\tfile.each_line do |line|\n\t\tprint line\n\tend\nend\n```\n\n现在我们想在其他文件里面使用上面定义的文件读取方法，那么该如何引用了，且看下，\n\n### 引用文件\nRuby使用**require**方法来引用库或文件\n\n\trequire 希望使用的库名\n\n*库名可以省略后缀.rb*\n\n``` ruby invoke_read_file.rb\nrequire \"./read_file\"\t\t\t##引入读取文件的库\nread_file(\"argv.rb\");\t\t\t##直接调用库中的方法\n```\n\n执行示例：\n\n\t> ruby invoke_read_file.rb\n\t=> ARGV.each_with_index do |arg, index|\n\t=> puts \"第#{index + 1}个参数: #{arg}\"\n\t=> end\n\n### p与pp方法\n如前我们所介绍的打印数据到终端的有**p**, **puts**, **print**等方法，现在再介绍一种按数据排版打印的方法**pp**, 其全名为 pretty print。但是如果想使用该方法，需要使用require方法引入**pp**库。直接看示例\n\n``` ruby p_and_pp.rb\nrequire \"pp\"\n\ndetails = [{content1: \"This is content1\", \n\t\t\tcontent2: \"This is content2\", \n\t\t\tcontent3: \"This is content3\"}]\n\nputs \"p的输出格式如下:\"\np details\n\nputs \"pp的输出格式如下:\"\npp details\n```\n\n执行示例:\n\n\tp的输出格式如下:\n\t[{:content1=>\"This is content1\", :content2=>\"This is content2\", :content3=>\"This is content3\"}]\n\tpp的输出格式如下:\n\t[{:content1=>\"This is content1\",\n  \t  :content2=>\"This is content2\",\n  \t  :content3=>\"This is content3\"}]\n  \t  \n与**p**方法的不同之处在于，**pp**方法在输出对象的结果时，为了更容易看懂，会适当的换行以调整输出结果。如上所示。\n  \t\n  \n\n\n\n\n","slug":"2015-08-13-ruby-practice-2","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4ou003sazv56itdfaci","layout":"post","photos":[],"link":"","content":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>Ruby中数组的大小是按实际情况自动调整的，即所谓的<strong>动态数组</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> rubyArray = [<span class=\"string\">&quot;data1&quot;</span>, <span class=\"string\">&quot;data2&quot;</span>]   <span class=\"comment\">##定义两个数据的数组</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> rubyArray[<span class=\"number\">2</span>] = <span class=\"string\">&quot;data3&quot;</span>           <span class=\"comment\">##新增第三个数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print rubyArray                  <span class=\"comment\">##打印[&quot;data1&quot;, &quot;data2&quot;, &quot;data3&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>Ruby数组还支持多种不同对象的混合保存, 通过<strong>数组.size</strong>可获取数组的大小</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray = [<span class=\"number\">1</span>, <span class=\"string\">&quot;data&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;time&quot;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray.size     <span class=\"comment\">#=&gt; 5</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>遍历数组也很方便，利用each方法，ruby提供了两种书写方式。<em>each方法会返回原数组的值</em></p>\n<figure class=\"highlight ruby\"><figcaption><span>do/end代码块方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray = [<span class=\"number\">1</span>, <span class=\"string\">&quot;data&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;time&quot;</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray.each <span class=\"keyword\">do</span> |<span class=\"params\">value</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;<span class=\"subst\">#&#123;value&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##将会打印出:1 data 2 time 3,并且返回mixedArray。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>&#123;&#125;代码块方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray.each &#123;</span><br><span class=\"line\">&gt;&gt; |<span class=\"params\">value</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;<span class=\"subst\">#&#123;value&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面两种方式的输出结果和返回值都一样。建议采用第一种，更加符合Ruby的风格。</p>\n<p><em>注:通过在终端输入<strong>irb –simple-promot</strong>，可以简化ruby交互式的提示输入，如上面的Ruby的提示输入符’&gt;&gt;’</em></p>\n<h3 id=\"散列\"><a href=\"#散列\" class=\"headerlink\" title=\"散列\"></a>散列</h3><p>Ruby中的键值(key-value pair)数据结构是用散列(hash)来表示，一般以字符串或者符号(Symbol)来作为键，值来保存对应的对象。</p>\n<p>*符号(symbol)*与字符串对象很相似，符号也是对象，一般都作为名称标签来使用。我们可以将符号简单理解为轻量级的字符串。</p>\n<p>符号的定义只需在标识符的开头加上’:’即可</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym1 = <span class=\"symbol\">:text</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym2 = <span class=\"symbol\">:<span class=\"string\">&quot;text&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p>以上两行代码都是表示符号”:foo”.</p>\n<p>使用符号比使用字符串更有效率，而且符号与字符串可以互相任意转换, 用<strong>to_s</strong>和<strong>to_sym</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym = <span class=\"symbol\">:text</span></span><br><span class=\"line\">=&gt; <span class=\"symbol\">:text</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym.to_s\t\t\t<span class=\"comment\">##将符号转为话字符串</span></span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"string\">&quot;text&quot;</span>.to_sym    <span class=\"comment\">##将字符串转为符号</span></span><br><span class=\"line\">=&gt; <span class=\"symbol\">:text</span></span><br><span class=\"line\">&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如何定义一个散列，定义一个散列有下列两种写法:</p>\n<figure class=\"highlight ruby\"><figcaption><span>散列定义方式一</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details = &#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">&quot;yu&quot;</span>, <span class=\"symbol\">:gender</span> =&gt; <span class=\"string\">&quot;male&quot;</span>, <span class=\"symbol\">:alias</span> =&gt; <span class=\"string\">&quot;stonefishy&quot;</span>&#125;</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>散列定义方式二</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details = &#123;<span class=\"symbol\">name:</span> <span class=\"string\">&quot;yu&quot;</span>, <span class=\"symbol\">gender:</span> <span class=\"string\">&quot;male&quot;</span>, <span class=\"symbol\">alias:</span> <span class=\"string\">&quot;stonefishy&quot;</span>&#125;</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种方式和<em>json</em>数据的格式相似。</p>\n<p>操作散列也很简单，直接看下面执行示例</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details[<span class=\"symbol\">:age</span>] = <span class=\"number\">18</span>\t\t\t\t<span class=\"comment\">##新增一个age值</span></span><br><span class=\"line\">=&gt; <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>, <span class=\"symbol\">:age=&gt;</span><span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details[<span class=\"symbol\">:name</span>] \t\t\t\t\t<span class=\"comment\">##获取指定键的值</span></span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;yu&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details[<span class=\"symbol\">:age</span>] = <span class=\"number\">20</span>\t\t\t\t<span class=\"comment\">##修改指定键的值</span></span><br><span class=\"line\">=&gt; <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>, <span class=\"symbol\">:age=&gt;</span><span class=\"number\">20</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><em>注: &#x3D;&gt;符号表示ruby交互式模式的输出命令</em></p>\n<p>使用each方法遍历散列：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details.each <span class=\"keyword\">do</span> |<span class=\"params\">key, value</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">?&gt;</span> puts <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span> - <span class=\"subst\">#&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">name - yu</span><br><span class=\"line\">gender - male</span><br><span class=\"line\"><span class=\"keyword\">alias</span> - stonefishy</span><br><span class=\"line\">age - <span class=\"number\">20</span></span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>, <span class=\"symbol\">:age=&gt;</span><span class=\"number\">20</span>&#125;   <span class=\"comment\">##each方法同样会返回散列</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p>正则表达式(Regular Expression)的语法如下，</p>\n<pre><code>/模式/\n</code></pre>\n<p>使用运算符&#x3D;~来匹配正则表达式和字符串, 若匹配成功返回匹配部分的位置，匹配失败返回nil值。</p>\n<pre><code>/模式/ =~ 希望匹配的字符串\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /ruby/ =~ <span class=\"string\">&quot;hello, ruby&quot;</span>\t\t\t<span class=\"comment\">##包含‘ruby’字符串</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /^ruby<span class=\"variable\">$/</span> =~ <span class=\"string\">&quot;hello, ruby&quot;</span>\t\t<span class=\"comment\">##完全匹配‘ruby’字符串</span></span><br><span class=\"line\">=&gt; nil</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /ruby<span class=\"variable\">$/</span> =~ <span class=\"string\">&quot;hello, ruby&quot;</span>\t\t<span class=\"comment\">##以‘ruby’字符串结尾</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>正则表达式右边的&#x2F;后面添加i表示不区分大小写匹配:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /<span class=\"title class_\">RUby</span>/i =~ <span class=\"string\">&quot;hello, ruby&quot;</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>定义正则表达式还有另外一种方式，直接用<strong>Regexp</strong>类来创建:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pattern = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;ruby&quot;</span>)\t\t<span class=\"comment\">##定义一个正则表达式</span></span><br><span class=\"line\">=&gt; /ruby/</span><br><span class=\"line\">&gt;&gt; pattern =~ <span class=\"string\">&quot;hello, ruby&quot;</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p><em>注: 如果想更加详细的了解正则表达式的语法，可以查看使用<a href=\"http://rubular.com/\">Rubular</a></em></p>\n<h3 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h3><p>Ruby中使用<strong>ARGV</strong>这个Ruby预定义好的数组来获取从命令行传递过来的数据。在命令行指定多个脚本参数时，各个参数之间用空格隔开。</p>\n<p>使用<strong>each_with_index</strong>方法可以获取遍历的index，</p>\n<figure class=\"highlight ruby\"><figcaption><span>argv.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">ARGV</span>.each_with_index <span class=\"keyword\">do</span> |<span class=\"params\">arg, index</span>|</span><br><span class=\"line\">puts <span class=\"string\">&quot;第<span class=\"subst\">#&#123;index + <span class=\"number\">1</span>&#125;</span>个参数: <span class=\"subst\">#&#123;arg&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>执行和输出结果如下:</p>\n<pre><code>&gt; ruby argv.rb hello world and ruby\t##命令行输入参数\n=&gt; 第1个参数: hello\n=&gt; 第2个参数: world\n=&gt; 第3个参数: and\n=&gt; 第4个参数: ruby\n</code></pre>\n<h3 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h3><p>Ruby中通过File类来读取文件，两种读取方式，一次性读取和逐行读取，示例如下,</p>\n<figure class=\"highlight ruby\"><figcaption><span>read_all_text.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>])\t\t<span class=\"comment\">##打开文件</span></span><br><span class=\"line\">text = file.read\t\t\t\t\t<span class=\"comment\">##读取文件中得所有文本数据</span></span><br><span class=\"line\">print text</span><br><span class=\"line\">file.close\t\t\t\t\t\t<span class=\"comment\">##关闭文件句柄</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>read_each_line_text.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">file.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|\t\t <span class=\"comment\">##逐行读取文件</span></span><br><span class=\"line\">\tprint line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">file.close</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><p>Ruby方法的定义和Python一样简答，</p>\n<pre><code>def 方法名\n    希望处理的逻辑\nend\n</code></pre>\n<p>我们现在将上面读取文件的代码定义在一个方法中，</p>\n<figure class=\"highlight ruby\"><figcaption><span>read_file.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_file</span>(<span class=\"params\">file_name</span>)</span><br><span class=\"line\">\tfile = <span class=\"title class_\">File</span>.open(file_name)</span><br><span class=\"line\">\tfile.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\t\tprint line</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们想在其他文件里面使用上面定义的文件读取方法，那么该如何引用了，且看下，</p>\n<h3 id=\"引用文件\"><a href=\"#引用文件\" class=\"headerlink\" title=\"引用文件\"></a>引用文件</h3><p>Ruby使用<strong>require</strong>方法来引用库或文件</p>\n<pre><code>require 希望使用的库名\n</code></pre>\n<p><em>库名可以省略后缀.rb</em></p>\n<figure class=\"highlight ruby\"><figcaption><span>invoke_read_file.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&quot;./read_file&quot;</span>\t\t\t<span class=\"comment\">##引入读取文件的库</span></span><br><span class=\"line\">read_file(<span class=\"string\">&quot;argv.rb&quot;</span>);\t\t\t<span class=\"comment\">##直接调用库中的方法</span></span><br></pre></td></tr></table></figure>\n\n<p>执行示例：</p>\n<pre><code>&gt; ruby invoke_read_file.rb\n=&gt; ARGV.each_with_index do |arg, index|\n=&gt; puts &quot;第#&#123;index + 1&#125;个参数: #&#123;arg&#125;&quot;\n=&gt; end\n</code></pre>\n<h3 id=\"p与pp方法\"><a href=\"#p与pp方法\" class=\"headerlink\" title=\"p与pp方法\"></a>p与pp方法</h3><p>如前我们所介绍的打印数据到终端的有<strong>p</strong>, <strong>puts</strong>, <strong>print</strong>等方法，现在再介绍一种按数据排版打印的方法<strong>pp</strong>, 其全名为 pretty print。但是如果想使用该方法，需要使用require方法引入<strong>pp</strong>库。直接看示例</p>\n<figure class=\"highlight ruby\"><figcaption><span>p_and_pp.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&quot;pp&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">details = [&#123;<span class=\"symbol\">content1:</span> <span class=\"string\">&quot;This is content1&quot;</span>, </span><br><span class=\"line\">\t\t\t<span class=\"symbol\">content2:</span> <span class=\"string\">&quot;This is content2&quot;</span>, </span><br><span class=\"line\">\t\t\t<span class=\"symbol\">content3:</span> <span class=\"string\">&quot;This is content3&quot;</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;p的输出格式如下:&quot;</span></span><br><span class=\"line\">p details</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;pp的输出格式如下:&quot;</span></span><br><span class=\"line\">pp details</span><br></pre></td></tr></table></figure>\n\n<p>执行示例:</p>\n<pre><code>p的输出格式如下:\n[&#123;:content1=&gt;&quot;This is content1&quot;, :content2=&gt;&quot;This is content2&quot;, :content3=&gt;&quot;This is content3&quot;&#125;]\npp的输出格式如下:\n[&#123;:content1=&gt;&quot;This is content1&quot;,\n    :content2=&gt;&quot;This is content2&quot;,\n    :content3=&gt;&quot;This is content3&quot;&#125;]\n    \n</code></pre>\n<p>与<strong>p</strong>方法的不同之处在于，<strong>pp</strong>方法在输出对象的结果时，为了更容易看懂，会适当的换行以调整输出结果。如上所示。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>Ruby中数组的大小是按实际情况自动调整的，即所谓的<strong>动态数组</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> rubyArray = [<span class=\"string\">&quot;data1&quot;</span>, <span class=\"string\">&quot;data2&quot;</span>]   <span class=\"comment\">##定义两个数据的数组</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> rubyArray[<span class=\"number\">2</span>] = <span class=\"string\">&quot;data3&quot;</span>           <span class=\"comment\">##新增第三个数据</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print rubyArray                  <span class=\"comment\">##打印[&quot;data1&quot;, &quot;data2&quot;, &quot;data3&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>Ruby数组还支持多种不同对象的混合保存, 通过<strong>数组.size</strong>可获取数组的大小</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray = [<span class=\"number\">1</span>, <span class=\"string\">&quot;data&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;time&quot;</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray.size     <span class=\"comment\">#=&gt; 5</span></span><br></pre></td></tr></table></figure>","more":"<p>遍历数组也很方便，利用each方法，ruby提供了两种书写方式。<em>each方法会返回原数组的值</em></p>\n<figure class=\"highlight ruby\"><figcaption><span>do/end代码块方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray = [<span class=\"number\">1</span>, <span class=\"string\">&quot;data&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;time&quot;</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray.each <span class=\"keyword\">do</span> |<span class=\"params\">value</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;<span class=\"subst\">#&#123;value&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##将会打印出:1 data 2 time 3,并且返回mixedArray。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>&#123;&#125;代码块方式</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> mixedArray.each &#123;</span><br><span class=\"line\">&gt;&gt; |<span class=\"params\">value</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;<span class=\"subst\">#&#123;value&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面两种方式的输出结果和返回值都一样。建议采用第一种，更加符合Ruby的风格。</p>\n<p><em>注:通过在终端输入<strong>irb –simple-promot</strong>，可以简化ruby交互式的提示输入，如上面的Ruby的提示输入符’&gt;&gt;’</em></p>\n<h3 id=\"散列\"><a href=\"#散列\" class=\"headerlink\" title=\"散列\"></a>散列</h3><p>Ruby中的键值(key-value pair)数据结构是用散列(hash)来表示，一般以字符串或者符号(Symbol)来作为键，值来保存对应的对象。</p>\n<p>*符号(symbol)*与字符串对象很相似，符号也是对象，一般都作为名称标签来使用。我们可以将符号简单理解为轻量级的字符串。</p>\n<p>符号的定义只需在标识符的开头加上’:’即可</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym1 = <span class=\"symbol\">:text</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym2 = <span class=\"symbol\">:<span class=\"string\">&quot;text&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p>以上两行代码都是表示符号”:foo”.</p>\n<p>使用符号比使用字符串更有效率，而且符号与字符串可以互相任意转换, 用<strong>to_s</strong>和<strong>to_sym</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym = <span class=\"symbol\">:text</span></span><br><span class=\"line\">=&gt; <span class=\"symbol\">:text</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sym.to_s\t\t\t<span class=\"comment\">##将符号转为话字符串</span></span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"string\">&quot;text&quot;</span>.to_sym    <span class=\"comment\">##将字符串转为符号</span></span><br><span class=\"line\">=&gt; <span class=\"symbol\">:text</span></span><br><span class=\"line\">&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如何定义一个散列，定义一个散列有下列两种写法:</p>\n<figure class=\"highlight ruby\"><figcaption><span>散列定义方式一</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details = &#123;<span class=\"symbol\">:name</span> =&gt; <span class=\"string\">&quot;yu&quot;</span>, <span class=\"symbol\">:gender</span> =&gt; <span class=\"string\">&quot;male&quot;</span>, <span class=\"symbol\">:alias</span> =&gt; <span class=\"string\">&quot;stonefishy&quot;</span>&#125;</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>散列定义方式二</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details = &#123;<span class=\"symbol\">name:</span> <span class=\"string\">&quot;yu&quot;</span>, <span class=\"symbol\">gender:</span> <span class=\"string\">&quot;male&quot;</span>, <span class=\"symbol\">alias:</span> <span class=\"string\">&quot;stonefishy&quot;</span>&#125;</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>&#125;</span><br></pre></td></tr></table></figure>\n<p>第二种方式和<em>json</em>数据的格式相似。</p>\n<p>操作散列也很简单，直接看下面执行示例</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details[<span class=\"symbol\">:age</span>] = <span class=\"number\">18</span>\t\t\t\t<span class=\"comment\">##新增一个age值</span></span><br><span class=\"line\">=&gt; <span class=\"number\">18</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>, <span class=\"symbol\">:age=&gt;</span><span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details[<span class=\"symbol\">:name</span>] \t\t\t\t\t<span class=\"comment\">##获取指定键的值</span></span><br><span class=\"line\">=&gt; <span class=\"string\">&quot;yu&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details[<span class=\"symbol\">:age</span>] = <span class=\"number\">20</span>\t\t\t\t<span class=\"comment\">##修改指定键的值</span></span><br><span class=\"line\">=&gt; <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details</span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>, <span class=\"symbol\">:age=&gt;</span><span class=\"number\">20</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><em>注: &#x3D;&gt;符号表示ruby交互式模式的输出命令</em></p>\n<p>使用each方法遍历散列：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> details.each <span class=\"keyword\">do</span> |<span class=\"params\">key, value</span>|</span><br><span class=\"line\"><span class=\"meta prompt_\">?&gt;</span> puts <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span> - <span class=\"subst\">#&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"keyword\">end</span></span><br><span class=\"line\">name - yu</span><br><span class=\"line\">gender - male</span><br><span class=\"line\"><span class=\"keyword\">alias</span> - stonefishy</span><br><span class=\"line\">age - <span class=\"number\">20</span></span><br><span class=\"line\">=&gt; &#123;<span class=\"symbol\">:name=&gt;<span class=\"string\">&quot;yu&quot;</span></span>, <span class=\"symbol\">:gender=&gt;<span class=\"string\">&quot;male&quot;</span></span>, <span class=\"symbol\">:alias=&gt;<span class=\"string\">&quot;stonefishy&quot;</span></span>, <span class=\"symbol\">:age=&gt;</span><span class=\"number\">20</span>&#125;   <span class=\"comment\">##each方法同样会返回散列</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p>正则表达式(Regular Expression)的语法如下，</p>\n<pre><code>/模式/\n</code></pre>\n<p>使用运算符&#x3D;~来匹配正则表达式和字符串, 若匹配成功返回匹配部分的位置，匹配失败返回nil值。</p>\n<pre><code>/模式/ =~ 希望匹配的字符串\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /ruby/ =~ <span class=\"string\">&quot;hello, ruby&quot;</span>\t\t\t<span class=\"comment\">##包含‘ruby’字符串</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /^ruby<span class=\"variable\">$/</span> =~ <span class=\"string\">&quot;hello, ruby&quot;</span>\t\t<span class=\"comment\">##完全匹配‘ruby’字符串</span></span><br><span class=\"line\">=&gt; nil</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /ruby<span class=\"variable\">$/</span> =~ <span class=\"string\">&quot;hello, ruby&quot;</span>\t\t<span class=\"comment\">##以‘ruby’字符串结尾</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>正则表达式右边的&#x2F;后面添加i表示不区分大小写匹配:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> /<span class=\"title class_\">RUby</span>/i =~ <span class=\"string\">&quot;hello, ruby&quot;</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>定义正则表达式还有另外一种方式，直接用<strong>Regexp</strong>类来创建:</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pattern = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;ruby&quot;</span>)\t\t<span class=\"comment\">##定义一个正则表达式</span></span><br><span class=\"line\">=&gt; /ruby/</span><br><span class=\"line\">&gt;&gt; pattern =~ <span class=\"string\">&quot;hello, ruby&quot;</span></span><br><span class=\"line\">=&gt; <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p><em>注: 如果想更加详细的了解正则表达式的语法，可以查看使用<a href=\"http://rubular.com/\">Rubular</a></em></p>\n<h3 id=\"命令行参数\"><a href=\"#命令行参数\" class=\"headerlink\" title=\"命令行参数\"></a>命令行参数</h3><p>Ruby中使用<strong>ARGV</strong>这个Ruby预定义好的数组来获取从命令行传递过来的数据。在命令行指定多个脚本参数时，各个参数之间用空格隔开。</p>\n<p>使用<strong>each_with_index</strong>方法可以获取遍历的index，</p>\n<figure class=\"highlight ruby\"><figcaption><span>argv.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">ARGV</span>.each_with_index <span class=\"keyword\">do</span> |<span class=\"params\">arg, index</span>|</span><br><span class=\"line\">puts <span class=\"string\">&quot;第<span class=\"subst\">#&#123;index + <span class=\"number\">1</span>&#125;</span>个参数: <span class=\"subst\">#&#123;arg&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>执行和输出结果如下:</p>\n<pre><code>&gt; ruby argv.rb hello world and ruby\t##命令行输入参数\n=&gt; 第1个参数: hello\n=&gt; 第2个参数: world\n=&gt; 第3个参数: and\n=&gt; 第4个参数: ruby\n</code></pre>\n<h3 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h3><p>Ruby中通过File类来读取文件，两种读取方式，一次性读取和逐行读取，示例如下,</p>\n<figure class=\"highlight ruby\"><figcaption><span>read_all_text.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>])\t\t<span class=\"comment\">##打开文件</span></span><br><span class=\"line\">text = file.read\t\t\t\t\t<span class=\"comment\">##读取文件中得所有文本数据</span></span><br><span class=\"line\">print text</span><br><span class=\"line\">file.close\t\t\t\t\t\t<span class=\"comment\">##关闭文件句柄</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>read_each_line_text.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">file.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|\t\t <span class=\"comment\">##逐行读取文件</span></span><br><span class=\"line\">\tprint line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">file.close</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><p>Ruby方法的定义和Python一样简答，</p>\n<pre><code>def 方法名\n    希望处理的逻辑\nend\n</code></pre>\n<p>我们现在将上面读取文件的代码定义在一个方法中，</p>\n<figure class=\"highlight ruby\"><figcaption><span>read_file.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">read_file</span>(<span class=\"params\">file_name</span>)</span><br><span class=\"line\">\tfile = <span class=\"title class_\">File</span>.open(file_name)</span><br><span class=\"line\">\tfile.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\t\tprint line</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>现在我们想在其他文件里面使用上面定义的文件读取方法，那么该如何引用了，且看下，</p>\n<h3 id=\"引用文件\"><a href=\"#引用文件\" class=\"headerlink\" title=\"引用文件\"></a>引用文件</h3><p>Ruby使用<strong>require</strong>方法来引用库或文件</p>\n<pre><code>require 希望使用的库名\n</code></pre>\n<p><em>库名可以省略后缀.rb</em></p>\n<figure class=\"highlight ruby\"><figcaption><span>invoke_read_file.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&quot;./read_file&quot;</span>\t\t\t<span class=\"comment\">##引入读取文件的库</span></span><br><span class=\"line\">read_file(<span class=\"string\">&quot;argv.rb&quot;</span>);\t\t\t<span class=\"comment\">##直接调用库中的方法</span></span><br></pre></td></tr></table></figure>\n\n<p>执行示例：</p>\n<pre><code>&gt; ruby invoke_read_file.rb\n=&gt; ARGV.each_with_index do |arg, index|\n=&gt; puts &quot;第#&#123;index + 1&#125;个参数: #&#123;arg&#125;&quot;\n=&gt; end\n</code></pre>\n<h3 id=\"p与pp方法\"><a href=\"#p与pp方法\" class=\"headerlink\" title=\"p与pp方法\"></a>p与pp方法</h3><p>如前我们所介绍的打印数据到终端的有<strong>p</strong>, <strong>puts</strong>, <strong>print</strong>等方法，现在再介绍一种按数据排版打印的方法<strong>pp</strong>, 其全名为 pretty print。但是如果想使用该方法，需要使用require方法引入<strong>pp</strong>库。直接看示例</p>\n<figure class=\"highlight ruby\"><figcaption><span>p_and_pp.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&quot;pp&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">details = [&#123;<span class=\"symbol\">content1:</span> <span class=\"string\">&quot;This is content1&quot;</span>, </span><br><span class=\"line\">\t\t\t<span class=\"symbol\">content2:</span> <span class=\"string\">&quot;This is content2&quot;</span>, </span><br><span class=\"line\">\t\t\t<span class=\"symbol\">content3:</span> <span class=\"string\">&quot;This is content3&quot;</span>&#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;p的输出格式如下:&quot;</span></span><br><span class=\"line\">p details</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;pp的输出格式如下:&quot;</span></span><br><span class=\"line\">pp details</span><br></pre></td></tr></table></figure>\n\n<p>执行示例:</p>\n<pre><code>p的输出格式如下:\n[&#123;:content1=&gt;&quot;This is content1&quot;, :content2=&gt;&quot;This is content2&quot;, :content3=&gt;&quot;This is content3&quot;&#125;]\npp的输出格式如下:\n[&#123;:content1=&gt;&quot;This is content1&quot;,\n    :content2=&gt;&quot;This is content2&quot;,\n    :content3=&gt;&quot;This is content3&quot;&#125;]\n    \n</code></pre>\n<p>与<strong>p</strong>方法的不同之处在于，<strong>pp</strong>方法在输出对象的结果时，为了更容易看懂，会适当的换行以调整输出结果。如上所示。</p>"},{"title":"Ruby修炼之道(5)","date":"2015-08-24T07:22:56.000Z","comments":1,"_content":"\n### 方法\n在Ruby中，调用方法时是可以省略()的\n\n``` ruby\n>> print(\"Hello world\")\t\t\t\t#=>Hello world\n>> print \"Hello world\"\t\t\t\t#=>Hello world\n```\n\n*带块的方法*\n带块的方法如time,each方法，其语法如下：\n\n\t对象.方法名(参数，...) do |变量1，...|\n\t\t块内容\n\tend\n\t\n\nRuby中方法可归为3类：\n<!-- more -->\n*实例方法*\n即由对象来调用，以下数组的size方法为实例方法\n\n``` ruby\n>> [1, 2].size\t\t\t\t\t\t#=>size方法即为实例方法\n```\n\n*类方法*\n由类本身来调用，和C#、Java中得静态方法类似，类方法不属于任何一个对象\n\n``` ruby\n>> Array.new\n>> File.open(\"some_file\")\n>> Time.now\n```\n调用类方法时，可以使用**::**代替**.**\n\n*函数式方法*\n\n``` ruby\n>> print \"hello\"\n>> sleep(10)\n```\n\n在Ruby的帮助文档中，一般使用**类名#方法名**来标记实例方法，用**类名.方法名**或者**类名::方法名**来标记类方法\n\n#### 方法的定义\n定义方法的语句如下:\n\n\tdef 方法名(参数1，参数2,...)\n\t\t希望执行的处理\n\tend\n\t\n可以指定默认参数给方法，当方法有多个参数时，从参数列表的右边开始依次指定默认值\n\n``` ruby\ndef func(a, b = 1, c = 2)\n\t#some codes\nend\n```\n*注，只省略左边的参数或中间的某个参数是不行的*\n\n方法的返回值使用**return**关键字，当这个关键字省略时，方法的最后一个表达式的结果就会成为方法的返回值。\n\n*定义带块的方法*\n在定义带块的方法时，需要使用**yield**关键字来定义块所在的位置。如下代码所示\n\n``` ruby\n#定义\ndef func\n\tyield\nend\n\n#调用\nfunc do\n\tprint \"hello world\"\nend\n```\n\n如果**yield**部分有参数，程序就会将其当作块变量传到块里。快里面最后的表达式的值即为快得执行结果，同时也可以作为**yield**的返回值在块的外部使用。\n\n*参数个数不确定的方法*\n通过使用**\\*变量名**的形式来定义参数个数不确定的方法。Ruby会把所有的参数封装为数组，提供方法内部使用。\n\n```ruby\ndef func(*args)\n\targs\nend\n\np func(1, 2, 3)\t\t\t\t#=> [1, 2, 3]\n```\n\n当方法需要指定特定的参数，而其他参数又不确定的情况下\n\n``` ruby \ndef sum(arg1, arg2, *args)\n\tresult = arg1 + arg2\n\targs.each do | arg |\n\t\tresult += arg\n\tend\n\tresult\nend\n\np sum(1, 2, 3, 4)\t\t\t#=> 10\n```\n所有不确定的参数都被作为数组赋值给变量args, **\\*变量名**这种形式的参数，只能在方法定义的参数列表中出现一次。\n\n*关键字参数*\n使用关键字参数，可以将参数名与参数值成对地传给方法内部使用，这时，调用方法的参数个数以及调用顺序就可以打乱。\n\n\tdef 方法名(参数1：值1, 参数2：值2, ...)\n\t\t逻辑处理\n\tend\n而且还可以在方法定义时指定参数默认值\n\n``` ruby\ndef sum(a: 0, b: 0)\n\ta + b\nend\n\np sum(a: 10, b: 20)\t\t\t#=> 30\np sum(b: 20, a: 10)\t\t\t#=> 30\t改变参数的调用顺序\np sum(b: 20)\t\t\t\t\t#=> 20 省略了参数a，a默认值为0\n```\n\n使用关键字参数定义方法，如果我们传入了未定义的参数，那么程序将会报错。如何避免呢，在Ruby中可以使用**\\*\\*变量名**的形式来接收未定义的参数。此时，Ruby会把参数列表以外的其他关键字参数以散列对象的形式保存。\n\n``` ruby \ndef\tsum(a: 0, b: 0, **args)\n\tresult = a + b\n\targs.each do |key, value|\t\t\t#=> 遍历散列\n\t\tresult += value\n\tend\n\tresult\nend\n\nsum(a: 1, b: 2, c: 3, d: 4)\t\t\t#=> 10\n```\n\n当然，关键字参数也可以与普通参数一起搭配使用。\n\n``` ruby\ndef sum(a, b: 1, c: 2)\n\tsum = a + b + c\nend\n\nsum(10, b: 20, c: 30)\t\t\t#=> 60\n```\n\n以关键字参数定义的方法，Ruby会自动将其封装为散列然后传递给方法内部，所以基于此，我们当然也可以利用散列的键值来将散列传递给方法\n\n``` ruby\ndef sum(a: 0, b: 0, c: 0)\n\tsum = a + b + c\nend\n\nargs = {a: 1, b: 2, c: 3}\t\t\t#=> 定义散列args\nsum(args)\t\t\t\t\t\t\t\t#=> 6 将散列args传递给sum方法\nsum({\"a\"=>1, \"b\"=>2, \"c\"=>3}）\t\t#=> 6 将散列直接传给方法\nsum(c: 3, a: 1, b: 2)\t\t\t\t#=> 6 可省略{}\n```\n\n*使用关键字参数定义方法，既可以对键进行限制，又可以定义参数的默认值，建议在实际编程中多尝试使用关键字参数*\n\n\n\n","source":"_posts/2015-08-24-ruby-practice-5.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(5)\"\ndate: 2015-08-24 15:22:56 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n### 方法\n在Ruby中，调用方法时是可以省略()的\n\n``` ruby\n>> print(\"Hello world\")\t\t\t\t#=>Hello world\n>> print \"Hello world\"\t\t\t\t#=>Hello world\n```\n\n*带块的方法*\n带块的方法如time,each方法，其语法如下：\n\n\t对象.方法名(参数，...) do |变量1，...|\n\t\t块内容\n\tend\n\t\n\nRuby中方法可归为3类：\n<!-- more -->\n*实例方法*\n即由对象来调用，以下数组的size方法为实例方法\n\n``` ruby\n>> [1, 2].size\t\t\t\t\t\t#=>size方法即为实例方法\n```\n\n*类方法*\n由类本身来调用，和C#、Java中得静态方法类似，类方法不属于任何一个对象\n\n``` ruby\n>> Array.new\n>> File.open(\"some_file\")\n>> Time.now\n```\n调用类方法时，可以使用**::**代替**.**\n\n*函数式方法*\n\n``` ruby\n>> print \"hello\"\n>> sleep(10)\n```\n\n在Ruby的帮助文档中，一般使用**类名#方法名**来标记实例方法，用**类名.方法名**或者**类名::方法名**来标记类方法\n\n#### 方法的定义\n定义方法的语句如下:\n\n\tdef 方法名(参数1，参数2,...)\n\t\t希望执行的处理\n\tend\n\t\n可以指定默认参数给方法，当方法有多个参数时，从参数列表的右边开始依次指定默认值\n\n``` ruby\ndef func(a, b = 1, c = 2)\n\t#some codes\nend\n```\n*注，只省略左边的参数或中间的某个参数是不行的*\n\n方法的返回值使用**return**关键字，当这个关键字省略时，方法的最后一个表达式的结果就会成为方法的返回值。\n\n*定义带块的方法*\n在定义带块的方法时，需要使用**yield**关键字来定义块所在的位置。如下代码所示\n\n``` ruby\n#定义\ndef func\n\tyield\nend\n\n#调用\nfunc do\n\tprint \"hello world\"\nend\n```\n\n如果**yield**部分有参数，程序就会将其当作块变量传到块里。快里面最后的表达式的值即为快得执行结果，同时也可以作为**yield**的返回值在块的外部使用。\n\n*参数个数不确定的方法*\n通过使用**\\*变量名**的形式来定义参数个数不确定的方法。Ruby会把所有的参数封装为数组，提供方法内部使用。\n\n```ruby\ndef func(*args)\n\targs\nend\n\np func(1, 2, 3)\t\t\t\t#=> [1, 2, 3]\n```\n\n当方法需要指定特定的参数，而其他参数又不确定的情况下\n\n``` ruby \ndef sum(arg1, arg2, *args)\n\tresult = arg1 + arg2\n\targs.each do | arg |\n\t\tresult += arg\n\tend\n\tresult\nend\n\np sum(1, 2, 3, 4)\t\t\t#=> 10\n```\n所有不确定的参数都被作为数组赋值给变量args, **\\*变量名**这种形式的参数，只能在方法定义的参数列表中出现一次。\n\n*关键字参数*\n使用关键字参数，可以将参数名与参数值成对地传给方法内部使用，这时，调用方法的参数个数以及调用顺序就可以打乱。\n\n\tdef 方法名(参数1：值1, 参数2：值2, ...)\n\t\t逻辑处理\n\tend\n而且还可以在方法定义时指定参数默认值\n\n``` ruby\ndef sum(a: 0, b: 0)\n\ta + b\nend\n\np sum(a: 10, b: 20)\t\t\t#=> 30\np sum(b: 20, a: 10)\t\t\t#=> 30\t改变参数的调用顺序\np sum(b: 20)\t\t\t\t\t#=> 20 省略了参数a，a默认值为0\n```\n\n使用关键字参数定义方法，如果我们传入了未定义的参数，那么程序将会报错。如何避免呢，在Ruby中可以使用**\\*\\*变量名**的形式来接收未定义的参数。此时，Ruby会把参数列表以外的其他关键字参数以散列对象的形式保存。\n\n``` ruby \ndef\tsum(a: 0, b: 0, **args)\n\tresult = a + b\n\targs.each do |key, value|\t\t\t#=> 遍历散列\n\t\tresult += value\n\tend\n\tresult\nend\n\nsum(a: 1, b: 2, c: 3, d: 4)\t\t\t#=> 10\n```\n\n当然，关键字参数也可以与普通参数一起搭配使用。\n\n``` ruby\ndef sum(a, b: 1, c: 2)\n\tsum = a + b + c\nend\n\nsum(10, b: 20, c: 30)\t\t\t#=> 60\n```\n\n以关键字参数定义的方法，Ruby会自动将其封装为散列然后传递给方法内部，所以基于此，我们当然也可以利用散列的键值来将散列传递给方法\n\n``` ruby\ndef sum(a: 0, b: 0, c: 0)\n\tsum = a + b + c\nend\n\nargs = {a: 1, b: 2, c: 3}\t\t\t#=> 定义散列args\nsum(args)\t\t\t\t\t\t\t\t#=> 6 将散列args传递给sum方法\nsum({\"a\"=>1, \"b\"=>2, \"c\"=>3}）\t\t#=> 6 将散列直接传给方法\nsum(c: 3, a: 1, b: 2)\t\t\t\t#=> 6 可省略{}\n```\n\n*使用关键字参数定义方法，既可以对键进行限制，又可以定义参数的默认值，建议在实际编程中多尝试使用关键字参数*\n\n\n\n","slug":"2015-08-24-ruby-practice-5","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4ou003uazv5gx4wgicv","layout":"post","photos":[],"link":"","content":"<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>在Ruby中，调用方法时是可以省略()的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print(<span class=\"string\">&quot;Hello world&quot;</span>)\t\t\t\t<span class=\"comment\">#=&gt;Hello world</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;Hello world&quot;</span>\t\t\t\t<span class=\"comment\">#=&gt;Hello world</span></span><br></pre></td></tr></table></figure>\n\n<p><em>带块的方法</em><br>带块的方法如time,each方法，其语法如下：</p>\n<pre><code>对象.方法名(参数，...) do |变量1，...|\n    块内容\nend\n</code></pre>\n<p>Ruby中方法可归为3类：</p>\n<span id=\"more\"></span>\n<p><em>实例方法</em><br>即由对象来调用，以下数组的size方法为实例方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>].size\t\t\t\t\t\t<span class=\"comment\">#=&gt;size方法即为实例方法</span></span><br></pre></td></tr></table></figure>\n\n<p><em>类方法</em><br>由类本身来调用，和C#、Java中得静态方法类似，类方法不属于任何一个对象</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"title class_\">Array</span>.new</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;some_file&quot;</span>)</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"title class_\">Time</span>.now</span><br></pre></td></tr></table></figure>\n<p>调用类方法时，可以使用**::<strong>代替</strong>.**</p>\n<p><em>函数式方法</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sleep(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在Ruby的帮助文档中，一般使用<strong>类名#方法名</strong>来标记实例方法，用<strong>类名.方法名</strong>或者<strong>类名::方法名</strong>来标记类方法</p>\n<h4 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h4><p>定义方法的语句如下:</p>\n<pre><code>def 方法名(参数1，参数2,...)\n    希望执行的处理\nend\n</code></pre>\n<p>可以指定默认参数给方法，当方法有多个参数时，从参数列表的右边开始依次指定默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span></span>)</span><br><span class=\"line\">\t<span class=\"comment\">#some codes</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><em>注，只省略左边的参数或中间的某个参数是不行的</em></p>\n<p>方法的返回值使用<strong>return</strong>关键字，当这个关键字省略时，方法的最后一个表达式的结果就会成为方法的返回值。</p>\n<p><em>定义带块的方法</em><br>在定义带块的方法时，需要使用<strong>yield</strong>关键字来定义块所在的位置。如下代码所示</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#调用</span></span><br><span class=\"line\">func <span class=\"keyword\">do</span></span><br><span class=\"line\">\tprint <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>如果<strong>yield</strong>部分有参数，程序就会将其当作块变量传到块里。快里面最后的表达式的值即为快得执行结果，同时也可以作为<strong>yield</strong>的返回值在块的外部使用。</p>\n<p><em>参数个数不确定的方法</em><br>通过使用<strong>*变量名</strong>的形式来定义参数个数不确定的方法。Ruby会把所有的参数封装为数组，提供方法内部使用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">*args</span>)</span><br><span class=\"line\">\targs</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p func(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>当方法需要指定特定的参数，而其他参数又不确定的情况下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\">arg1, arg2, *args</span>)</span><br><span class=\"line\">\tresult = arg1 + arg2</span><br><span class=\"line\">\targs.each <span class=\"keyword\">do</span> |<span class=\"params\"> arg </span>|</span><br><span class=\"line\">\t\tresult += arg</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 10</span></span><br></pre></td></tr></table></figure>\n<p>所有不确定的参数都被作为数组赋值给变量args, <strong>*变量名</strong>这种形式的参数，只能在方法定义的参数列表中出现一次。</p>\n<p><em>关键字参数</em><br>使用关键字参数，可以将参数名与参数值成对地传给方法内部使用，这时，调用方法的参数个数以及调用顺序就可以打乱。</p>\n<pre><code>def 方法名(参数1：值1, 参数2：值2, ...)\n    逻辑处理\nend\n</code></pre>\n<p>而且还可以在方法定义时指定参数默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\"><span class=\"symbol\">a:</span> <span class=\"number\">0</span>, <span class=\"symbol\">b:</span> <span class=\"number\">0</span></span>)</span><br><span class=\"line\">\ta + b</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p sum(<span class=\"symbol\">a:</span> <span class=\"number\">10</span>, <span class=\"symbol\">b:</span> <span class=\"number\">20</span>)\t\t\t<span class=\"comment\">#=&gt; 30</span></span><br><span class=\"line\">p sum(<span class=\"symbol\">b:</span> <span class=\"number\">20</span>, <span class=\"symbol\">a:</span> <span class=\"number\">10</span>)\t\t\t<span class=\"comment\">#=&gt; 30\t改变参数的调用顺序</span></span><br><span class=\"line\">p sum(<span class=\"symbol\">b:</span> <span class=\"number\">20</span>)\t\t\t\t\t<span class=\"comment\">#=&gt; 20 省略了参数a，a默认值为0</span></span><br></pre></td></tr></table></figure>\n\n<p>使用关键字参数定义方法，如果我们传入了未定义的参数，那么程序将会报错。如何避免呢，在Ruby中可以使用<strong>**变量名</strong>的形式来接收未定义的参数。此时，Ruby会把参数列表以外的其他关键字参数以散列对象的形式保存。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span>\t<span class=\"title function_\">sum</span>(<span class=\"params\"><span class=\"symbol\">a:</span> <span class=\"number\">0</span>, <span class=\"symbol\">b:</span> <span class=\"number\">0</span>, **args</span>)</span><br><span class=\"line\">\tresult = a + b</span><br><span class=\"line\">\targs.each <span class=\"keyword\">do</span> |<span class=\"params\">key, value</span>|\t\t\t<span class=\"comment\">#=&gt; 遍历散列</span></span><br><span class=\"line\">\t\tresult += value</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"symbol\">a:</span> <span class=\"number\">1</span>, <span class=\"symbol\">b:</span> <span class=\"number\">2</span>, <span class=\"symbol\">c:</span> <span class=\"number\">3</span>, <span class=\"symbol\">d:</span> <span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 10</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，关键字参数也可以与普通参数一起搭配使用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, <span class=\"symbol\">b:</span> <span class=\"number\">1</span>, <span class=\"symbol\">c:</span> <span class=\"number\">2</span></span>)</span><br><span class=\"line\">\tsum = a + b + c</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">10</span>, <span class=\"symbol\">b:</span> <span class=\"number\">20</span>, <span class=\"symbol\">c:</span> <span class=\"number\">30</span>)\t\t\t<span class=\"comment\">#=&gt; 60</span></span><br></pre></td></tr></table></figure>\n\n<p>以关键字参数定义的方法，Ruby会自动将其封装为散列然后传递给方法内部，所以基于此，我们当然也可以利用散列的键值来将散列传递给方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\"><span class=\"symbol\">a:</span> <span class=\"number\">0</span>, <span class=\"symbol\">b:</span> <span class=\"number\">0</span>, <span class=\"symbol\">c:</span> <span class=\"number\">0</span></span>)</span><br><span class=\"line\">\tsum = a + b + c</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">args = &#123;<span class=\"symbol\">a:</span> <span class=\"number\">1</span>, <span class=\"symbol\">b:</span> <span class=\"number\">2</span>, <span class=\"symbol\">c:</span> <span class=\"number\">3</span>&#125;\t\t\t<span class=\"comment\">#=&gt; 定义散列args</span></span><br><span class=\"line\">sum(args)\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 6 将散列args传递给sum方法</span></span><br><span class=\"line\">sum(&#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>=&gt;<span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"number\">3</span>&#125;）\t\t<span class=\"comment\">#=&gt; 6 将散列直接传给方法</span></span><br><span class=\"line\">sum(<span class=\"symbol\">c:</span> <span class=\"number\">3</span>, <span class=\"symbol\">a:</span> <span class=\"number\">1</span>, <span class=\"symbol\">b:</span> <span class=\"number\">2</span>)\t\t\t\t<span class=\"comment\">#=&gt; 6 可省略&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>使用关键字参数定义方法，既可以对键进行限制，又可以定义参数的默认值，建议在实际编程中多尝试使用关键字参数</em></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>在Ruby中，调用方法时是可以省略()的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print(<span class=\"string\">&quot;Hello world&quot;</span>)\t\t\t\t<span class=\"comment\">#=&gt;Hello world</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;Hello world&quot;</span>\t\t\t\t<span class=\"comment\">#=&gt;Hello world</span></span><br></pre></td></tr></table></figure>\n\n<p><em>带块的方法</em><br>带块的方法如time,each方法，其语法如下：</p>\n<pre><code>对象.方法名(参数，...) do |变量1，...|\n    块内容\nend\n</code></pre>\n<p>Ruby中方法可归为3类：</p>","more":"<p><em>实例方法</em><br>即由对象来调用，以下数组的size方法为实例方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>].size\t\t\t\t\t\t<span class=\"comment\">#=&gt;size方法即为实例方法</span></span><br></pre></td></tr></table></figure>\n\n<p><em>类方法</em><br>由类本身来调用，和C#、Java中得静态方法类似，类方法不属于任何一个对象</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"title class_\">Array</span>.new</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;some_file&quot;</span>)</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> <span class=\"title class_\">Time</span>.now</span><br></pre></td></tr></table></figure>\n<p>调用类方法时，可以使用**::<strong>代替</strong>.**</p>\n<p><em>函数式方法</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> print <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;&gt;</span> sleep(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在Ruby的帮助文档中，一般使用<strong>类名#方法名</strong>来标记实例方法，用<strong>类名.方法名</strong>或者<strong>类名::方法名</strong>来标记类方法</p>\n<h4 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h4><p>定义方法的语句如下:</p>\n<pre><code>def 方法名(参数1，参数2,...)\n    希望执行的处理\nend\n</code></pre>\n<p>可以指定默认参数给方法，当方法有多个参数时，从参数列表的右边开始依次指定默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b = <span class=\"number\">1</span>, c = <span class=\"number\">2</span></span>)</span><br><span class=\"line\">\t<span class=\"comment\">#some codes</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><em>注，只省略左边的参数或中间的某个参数是不行的</em></p>\n<p>方法的返回值使用<strong>return</strong>关键字，当这个关键字省略时，方法的最后一个表达式的结果就会成为方法的返回值。</p>\n<p><em>定义带块的方法</em><br>在定义带块的方法时，需要使用<strong>yield</strong>关键字来定义块所在的位置。如下代码所示</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#定义</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#调用</span></span><br><span class=\"line\">func <span class=\"keyword\">do</span></span><br><span class=\"line\">\tprint <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>如果<strong>yield</strong>部分有参数，程序就会将其当作块变量传到块里。快里面最后的表达式的值即为快得执行结果，同时也可以作为<strong>yield</strong>的返回值在块的外部使用。</p>\n<p><em>参数个数不确定的方法</em><br>通过使用<strong>*变量名</strong>的形式来定义参数个数不确定的方法。Ruby会把所有的参数封装为数组，提供方法内部使用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">*args</span>)</span><br><span class=\"line\">\targs</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p func(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>当方法需要指定特定的参数，而其他参数又不确定的情况下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\">arg1, arg2, *args</span>)</span><br><span class=\"line\">\tresult = arg1 + arg2</span><br><span class=\"line\">\targs.each <span class=\"keyword\">do</span> |<span class=\"params\"> arg </span>|</span><br><span class=\"line\">\t\tresult += arg</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 10</span></span><br></pre></td></tr></table></figure>\n<p>所有不确定的参数都被作为数组赋值给变量args, <strong>*变量名</strong>这种形式的参数，只能在方法定义的参数列表中出现一次。</p>\n<p><em>关键字参数</em><br>使用关键字参数，可以将参数名与参数值成对地传给方法内部使用，这时，调用方法的参数个数以及调用顺序就可以打乱。</p>\n<pre><code>def 方法名(参数1：值1, 参数2：值2, ...)\n    逻辑处理\nend\n</code></pre>\n<p>而且还可以在方法定义时指定参数默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\"><span class=\"symbol\">a:</span> <span class=\"number\">0</span>, <span class=\"symbol\">b:</span> <span class=\"number\">0</span></span>)</span><br><span class=\"line\">\ta + b</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p sum(<span class=\"symbol\">a:</span> <span class=\"number\">10</span>, <span class=\"symbol\">b:</span> <span class=\"number\">20</span>)\t\t\t<span class=\"comment\">#=&gt; 30</span></span><br><span class=\"line\">p sum(<span class=\"symbol\">b:</span> <span class=\"number\">20</span>, <span class=\"symbol\">a:</span> <span class=\"number\">10</span>)\t\t\t<span class=\"comment\">#=&gt; 30\t改变参数的调用顺序</span></span><br><span class=\"line\">p sum(<span class=\"symbol\">b:</span> <span class=\"number\">20</span>)\t\t\t\t\t<span class=\"comment\">#=&gt; 20 省略了参数a，a默认值为0</span></span><br></pre></td></tr></table></figure>\n\n<p>使用关键字参数定义方法，如果我们传入了未定义的参数，那么程序将会报错。如何避免呢，在Ruby中可以使用<strong>**变量名</strong>的形式来接收未定义的参数。此时，Ruby会把参数列表以外的其他关键字参数以散列对象的形式保存。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span>\t<span class=\"title function_\">sum</span>(<span class=\"params\"><span class=\"symbol\">a:</span> <span class=\"number\">0</span>, <span class=\"symbol\">b:</span> <span class=\"number\">0</span>, **args</span>)</span><br><span class=\"line\">\tresult = a + b</span><br><span class=\"line\">\targs.each <span class=\"keyword\">do</span> |<span class=\"params\">key, value</span>|\t\t\t<span class=\"comment\">#=&gt; 遍历散列</span></span><br><span class=\"line\">\t\tresult += value</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"symbol\">a:</span> <span class=\"number\">1</span>, <span class=\"symbol\">b:</span> <span class=\"number\">2</span>, <span class=\"symbol\">c:</span> <span class=\"number\">3</span>, <span class=\"symbol\">d:</span> <span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 10</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，关键字参数也可以与普通参数一起搭配使用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, <span class=\"symbol\">b:</span> <span class=\"number\">1</span>, <span class=\"symbol\">c:</span> <span class=\"number\">2</span></span>)</span><br><span class=\"line\">\tsum = a + b + c</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">sum(<span class=\"number\">10</span>, <span class=\"symbol\">b:</span> <span class=\"number\">20</span>, <span class=\"symbol\">c:</span> <span class=\"number\">30</span>)\t\t\t<span class=\"comment\">#=&gt; 60</span></span><br></pre></td></tr></table></figure>\n\n<p>以关键字参数定义的方法，Ruby会自动将其封装为散列然后传递给方法内部，所以基于此，我们当然也可以利用散列的键值来将散列传递给方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\"><span class=\"symbol\">a:</span> <span class=\"number\">0</span>, <span class=\"symbol\">b:</span> <span class=\"number\">0</span>, <span class=\"symbol\">c:</span> <span class=\"number\">0</span></span>)</span><br><span class=\"line\">\tsum = a + b + c</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">args = &#123;<span class=\"symbol\">a:</span> <span class=\"number\">1</span>, <span class=\"symbol\">b:</span> <span class=\"number\">2</span>, <span class=\"symbol\">c:</span> <span class=\"number\">3</span>&#125;\t\t\t<span class=\"comment\">#=&gt; 定义散列args</span></span><br><span class=\"line\">sum(args)\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 6 将散列args传递给sum方法</span></span><br><span class=\"line\">sum(&#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>=&gt;<span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"number\">3</span>&#125;）\t\t<span class=\"comment\">#=&gt; 6 将散列直接传给方法</span></span><br><span class=\"line\">sum(<span class=\"symbol\">c:</span> <span class=\"number\">3</span>, <span class=\"symbol\">a:</span> <span class=\"number\">1</span>, <span class=\"symbol\">b:</span> <span class=\"number\">2</span>)\t\t\t\t<span class=\"comment\">#=&gt; 6 可省略&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>使用关键字参数定义方法，既可以对键进行限制，又可以定义参数的默认值，建议在实际编程中多尝试使用关键字参数</em></p>"},{"title":"Ruby修炼之道(6)","date":"2015-08-25T02:12:07.000Z","comments":1,"_content":"### Ruby的类\n和其他面向对象语言一样，Ruby的类也表示对象的种类。通过**class**方法可以知道某个对象属于哪个类。\n\n``` ruby\n\"hello\".class\t\t\t\t#=> String\n1.class\t\t\t\t\t#=> Fixnum\n```\n判断某个对象时候属于某个类时，可以使用**instance_of?**方法\n\n``` ruby\n\"hello\".instance_of?(String)\t\t\t#=> true\n1.instance_of? Fixnum\t\t\t\t\t#=> true\n```\n<!-- more -->\n通过扩展已定义的类来创建新类成为*继承*，通过继承，我们可以实现以下事情：\n\n- 在不影响原有功能的前提下追加新功能\n- 重定义原有功能，使名称相同的方法产生不同的效果\n- 在已有功能的基础上追加处理，扩展已有共更能\n\n**BasicObject**类是Ruby中所有类的父类，它定义了Ruby对象的最基本功能。普通对象所需要的类一般都被定义为**Object**类。字符串、数组等都是Object类的子类。\n\n子类与父类的关系称为\"is-a\"关系。我们可以通过类的继承关系使用**is_a?**方法反向追查对象是否属于某个类\n\n``` ruby\n\"hello\".is_a?(String)\t\t\t\t#=> true\n\"hello\".is_a?(Object)\t\t\t\t#=> true\n```\n\n*注：**instance_of?**方法与**is_a?**方法已经在Object类中定义过，因此普通的对象可以直接使用者两个方法。\n\n#### 类的定义\n使用**class**关键字定义类，类名的首字母必须大写\n\n\tclass 类名\n\t\t类的定义\n\tend\n类定义中有个特别的方法名为**initialize**方法，当我们使用**new**方法生成新的对象时，initialize方法会被调用，同时new方法的参数也会被原封不动的传递给initialize方法。\n\n定义一个Greeter类，当对象被创建时，会将new方法中得参数传递给initialize方法中得实例变量@name，如果不传参数，则使用默认的值Ruby传给实例变量，在say_hello实例方法中，将其打印出来。\n\n``` ruby\nclass Greeter\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\nend\n```\n利用Greeter类的对象来问候，其执行结果如下\n\n``` ruby\ndefault_greeter = Greeter.new\ndefault_greeter.say_hello\t\t\t\t\t#=> Hello Ruby\n\nworld_greeter = Greeter.new(\"World\")\nworld_greeter.say_hello\t\t\t\t\t\t#=> Hello World\n```\n*注：引用未初始化的实例变量时的返回值为nil*\n\n在上面的Greeter类中，@name实例变量是不能被外部直接访问或赋值的，需要通过方法来访问对象的内部。我们可以在Greeter类内部定义两个方法来解决这个问题。\n\n```\nclass Greeter\n\t#other codes in here\n\t\n\tdef name\t\t\t\t\t#获取@name\n\t\t@name\n\tend\n\n\tdef name=(value)\t\t\t#修改@name\n\t\t@name = value\n\tend\nend\n```\n有了这这两个方法，现在我们可以访问@name实例变量了。\n\n``` ruby\ndefault_greeter.name\t\t\t\t\t#=> Ruby\ndefault_greeter.name = \"Python\"\ndefault_greeter.say_hello\t\t\t\t#=> Hello Python\n```\n但是，如果一个类里面有多个实例变量需要被访问时，定义这么多得方法会使得代码量过多，有没有像C#中的属性访问器get/set之类的呢。其实Ruby也为我们提供了这个，称为存取器。使用**attr_reader**, **attr_writer**, **attr_accessor**，只要指定实例变量名的符号（symbol）,注意，此处是实例变量的符号，Ruby就会自动定义相应的存取器。\n\n\tattr_reader :name\t\t\t只读 (定义name方法)\n\tattr_writer :name\t\t\t只写 (定义name=方法)\n\tattr_accessor :name\t\t\t读写 (定义以上两个方法)\n\t\n通过使用他们，我们的Greeter类可以简化为如下\n\n``` ruby\nclass Greeter\n\tattr_accessor :name\n\t\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\nend\n```\nRuby中还提供了特殊变量**self**.使用**self**这个特殊变量可以引用方法的接受者。\n\n``` ruby\nclass Greeter\n\tattr_accessor :name\n\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\n\n\tdef say_bye\n\t\tputs \"Bye #{self.name}\"\n\tend\nend\n```\n使用在实例方法内部使用@name和使用self.name是一样的意思，只不过self调用的是name方法。**self**即使对像的本身，相当于C#、Java中的**this**对象。所以上面的self.name可以省略self，直接调用name方法。\n\n但是，在调用像*name=*方法这样的以*=*结束的方法时，有一点我们需要注意。因为在Ruby中，定义局部变量也是用*=*\n\n``` ruby\nclass Greeter\n\tdef test_name\n\t\tname = \"Ruby\"\t\t\t\t\t#定义局部变量name并赋值\n\t\tself.name = \"ruby\"\t\t\t#调用Greeter类的name=方法\n\tend\nend\n```\n所以此时省略self后，含义是不一样的。\n\n#### 类方法的定义\n如果方法的接受者是类本身（类对象）的方法成为类方法。其定义方式主要有以下两种\n\n1. 在**class << 类名 ~ end**这个特殊的类中定义实例方法的形式\n\n\t\tclass << 类名\n\t\t\t方法的定义\n\t\tend\n\n为Greeter类定义类方法*good_morning*\n\n``` ruby\nclass << Greeter\n\tdef good_morning(name)\n\t\tputs \"Good morning #{name}\"\n\tend\nend\n```\n\n2. 使用**def 类名.方法名 ~ end**这样的形式来定义类方法。\n\n\t\tdef 类名.方法名\n\t\t\t方法的定义\n\t\tend\n\n``` ruby\ndef Greeter.good_morning(name)\n\tputs \"Good morning #{name}\"\nend\n```\n注意以上两种定义形式都在类的外部定义，如果在类的内部定义，可以将类名用**self**，这时self引用的对象是该类本身。\n\n``` ruby\nclass Greeter\n\tclass << self\n\t\tdef good_morning(name)\n\t\t\tputs \"Good morning #{name}\"\n\t\tend\n\tend\nend\n\nclass Greeter\n\tdef self.good_morning(name)\n\t\tputs \"Good morning #{name}\"\n\tend\nend\n```\n\n*注：**class << 类名 ~ end** 这种写法的类定义称为单例类定义，单例类定义中定义的方法称为单例方法*\n\n#### 常量\n在class中定义常量，通过使用**类名::常量名**形式来实现外部访问.常量是不可修改的。\n\n``` ruby\nclass Greeter\n\tHello = \"Hello\"\nend\n\np Greeter::Hello\t\t\t\t#=> \"Hello\"\n```\n\n#### 类变量\n以**@@**开头的变量成为类变量，类变量是该类中所有实例的共享变量，这点和常量类似，不同的是这个类变量可以被修改。当然，从类的外部访问类变量时也需要存取器，但是不能使用*attr_accessor*,它使属于实例变量的，所以我们需要自己定义，使用类方法来获取类变量是个好的形式\n\n``` ruby\nclass Greeter\n\t@@greeter_count = 0\n\tattr_accessor :name\n\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\t\t@@greeter_count += 1\n\tend\n\t\n\tdef Greeter.greeter_count\n\t\t@@greeter_count\n\tend\nend\n\nGreeter.greeter_count\t\t\t\t\t#=> 0\ngreeter = Greeter.new(\"world\")\ngreeter.say_hello\ngreeter = Greeter.new\ngreeter.say_hello\nGreeter.greeter_count\t\t\t\t\t#=> 2\n```\n\n#### 限制方法的调用\n和其他面向对象语言一样，Ruby也有方法的访问修饰符，分别为**public**，**protected**，**private**。其表达的含义也一样。\n\n- public 以实例的方法的形式向外部公开\n- protect 仅向同一个类或子类公开\n- private 仅内部类可调用\n\n定义方式，有两种，一种是访问修饰符后面带方法符号\n\n\tpublic :方法1, :方法2\n\t\n另外一种是后面不带参数，那么下面所有定义的方法均在这个访问修饰符下，直到有新的访问修饰符。\n\n``` ruby\nclass Greeter\n\tattr_accessor :name\n\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tpublic\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\n\n\tdef say_bye\n\t\tputs \"Bye #{self.name}\"\n\tend\n\t\n\tdef say_haha\n\t\tputs \"Haha #{@name}\"\n\tend\n\t\n\tprivate :say_haha\nend\n```\n如以上方法的定义，public修饰符下定义了3个方法，这个3个方法都可以在外部访问，但是最后我们又将最后一个方法标记为private。所以如果在外部企图访问这个方法，将跑出如下错误信息\n\n\tclass_definition.rb:47:in `<main>': private method `say_haha' called for #<Greeter:\t0x007fb57c101510 @name=\"Ruby\"> (NoMethodError)\n\n如果没有指定访问级别的方法默认为public，但是**initialize**方法是个例外，它通常被定义为private\n\n### 扩展类\nRuby允许我们在已经定义好的类中添加方法。即为扩展方法。如在String类中定义一个计算字符串单词数的方法\n\n``` ruby\nclass String\n\tdef count_word\n\t\tary = self.split(/\\s+/)\t#用空格分割接收者\n\t\tary.size\n\tend\nend\n\nstr = \"Hello Ruby\"\np str.count_word\t\t\t\t#=> 2\n```\n\n#### 继承\n使用class关键字指定类名的同时指定父类名\n\n\tclass 类名 < 父类名\n\t\t类定义\n\tend\n\t\n定义类时没有指定父类的情况下，Ruby会默认该类为**Object**类的子类。通过类对象调用**instance_methods方法，可以得到以符号形式返回的该类的实例方法\n\n``` ruby\n\tGreeter.instance_methods\n```\n\n如果想定义**BasicObject**的子类，我们需要明确指定BasicObject类为父类；而Object类为父类时不需要。\n\n#### alias\n**alias**即别名，在Ruby中我们可以给方法设置别名，设置别名也两种方式，一种alias后面带方法名参数，第二种后面带方法符号名参数\n\n\talias 别名\t原名\t\t#使用方法名\n\t\n\talias :别名 :原名\t\t#使用符号名\n\t\n``` ruby\nclass Greeter\n\tdef say_hello\n\t\tputs \"Hello\"\n\tend\nend\n\nclass RubyGreeter < Greeter\n\talias old_say_hello say_hello  #将继承的say_hello方法设置别名为old_say_hello\n\t\n\tdef say_hello\n\t\tputs \"Hello Ruby\"\n\tend\nend\n\nrubyGreeter = RubyGreeter.new\np rubyGreeter.old_say_hello\t\t#=> \"Hello\"\np rubyGreeter.say_hello\t\t\t\t#=> \"Hello Ruby\"\n```\n\n#### undef\n**undef**用于删除已有方法的定义。与alias一样，参数可以指定方法名或者符号名。\n\n\tundef 方法名\t\t#使用方法名\n\t\n\tundef :方法名\t\t#使用符号名\n\t\n在子类中希望删除父类的方法时可以直接使用undef。试图访问已删除的方法将会引发*NoMethodError*错误。\n\n``` ruby\nclass Greeter\n\tdef say_hello\n\t\tputs \"Hello\"\n\tend\nend\n\nclass RubyGreeter < Greeter\n\tundef say_hello  #删除继承的say_hello\nend\n\nrubyGreeter = RubyGreeter.new\np rubyGreeter.say_hello\t\t\t\t\t\t#=>抛出异常，undefined method `say_hello' for #<RubyGreeter:0x007fbff4167220> (NoMethodError)\n```\n\n#### 单例类\n利用单例类定义，可以给对象添加方法（单例方法）。单列类定义被用于定义对象的专属实例方法。\n\n```\nstr1 = \"Ruby\"\nstr2 = \"Ruby\"\n\nclass << str1\n\tdef hello\n\t\tputs \"Hello #{self}\"\n\tend\nend\n\np str1.hello \t\t\t\t\t\t#=> \"Hello Ruby\"\np str2.hello\t\t\t\t\t\t#=>引发NoMethodError错误\n```\n","source":"_posts/2015-08-25-ruby-practice-6.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(6)\"\ndate: 2015-08-25 10:12:07 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n### Ruby的类\n和其他面向对象语言一样，Ruby的类也表示对象的种类。通过**class**方法可以知道某个对象属于哪个类。\n\n``` ruby\n\"hello\".class\t\t\t\t#=> String\n1.class\t\t\t\t\t#=> Fixnum\n```\n判断某个对象时候属于某个类时，可以使用**instance_of?**方法\n\n``` ruby\n\"hello\".instance_of?(String)\t\t\t#=> true\n1.instance_of? Fixnum\t\t\t\t\t#=> true\n```\n<!-- more -->\n通过扩展已定义的类来创建新类成为*继承*，通过继承，我们可以实现以下事情：\n\n- 在不影响原有功能的前提下追加新功能\n- 重定义原有功能，使名称相同的方法产生不同的效果\n- 在已有功能的基础上追加处理，扩展已有共更能\n\n**BasicObject**类是Ruby中所有类的父类，它定义了Ruby对象的最基本功能。普通对象所需要的类一般都被定义为**Object**类。字符串、数组等都是Object类的子类。\n\n子类与父类的关系称为\"is-a\"关系。我们可以通过类的继承关系使用**is_a?**方法反向追查对象是否属于某个类\n\n``` ruby\n\"hello\".is_a?(String)\t\t\t\t#=> true\n\"hello\".is_a?(Object)\t\t\t\t#=> true\n```\n\n*注：**instance_of?**方法与**is_a?**方法已经在Object类中定义过，因此普通的对象可以直接使用者两个方法。\n\n#### 类的定义\n使用**class**关键字定义类，类名的首字母必须大写\n\n\tclass 类名\n\t\t类的定义\n\tend\n类定义中有个特别的方法名为**initialize**方法，当我们使用**new**方法生成新的对象时，initialize方法会被调用，同时new方法的参数也会被原封不动的传递给initialize方法。\n\n定义一个Greeter类，当对象被创建时，会将new方法中得参数传递给initialize方法中得实例变量@name，如果不传参数，则使用默认的值Ruby传给实例变量，在say_hello实例方法中，将其打印出来。\n\n``` ruby\nclass Greeter\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\nend\n```\n利用Greeter类的对象来问候，其执行结果如下\n\n``` ruby\ndefault_greeter = Greeter.new\ndefault_greeter.say_hello\t\t\t\t\t#=> Hello Ruby\n\nworld_greeter = Greeter.new(\"World\")\nworld_greeter.say_hello\t\t\t\t\t\t#=> Hello World\n```\n*注：引用未初始化的实例变量时的返回值为nil*\n\n在上面的Greeter类中，@name实例变量是不能被外部直接访问或赋值的，需要通过方法来访问对象的内部。我们可以在Greeter类内部定义两个方法来解决这个问题。\n\n```\nclass Greeter\n\t#other codes in here\n\t\n\tdef name\t\t\t\t\t#获取@name\n\t\t@name\n\tend\n\n\tdef name=(value)\t\t\t#修改@name\n\t\t@name = value\n\tend\nend\n```\n有了这这两个方法，现在我们可以访问@name实例变量了。\n\n``` ruby\ndefault_greeter.name\t\t\t\t\t#=> Ruby\ndefault_greeter.name = \"Python\"\ndefault_greeter.say_hello\t\t\t\t#=> Hello Python\n```\n但是，如果一个类里面有多个实例变量需要被访问时，定义这么多得方法会使得代码量过多，有没有像C#中的属性访问器get/set之类的呢。其实Ruby也为我们提供了这个，称为存取器。使用**attr_reader**, **attr_writer**, **attr_accessor**，只要指定实例变量名的符号（symbol）,注意，此处是实例变量的符号，Ruby就会自动定义相应的存取器。\n\n\tattr_reader :name\t\t\t只读 (定义name方法)\n\tattr_writer :name\t\t\t只写 (定义name=方法)\n\tattr_accessor :name\t\t\t读写 (定义以上两个方法)\n\t\n通过使用他们，我们的Greeter类可以简化为如下\n\n``` ruby\nclass Greeter\n\tattr_accessor :name\n\t\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\nend\n```\nRuby中还提供了特殊变量**self**.使用**self**这个特殊变量可以引用方法的接受者。\n\n``` ruby\nclass Greeter\n\tattr_accessor :name\n\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\n\n\tdef say_bye\n\t\tputs \"Bye #{self.name}\"\n\tend\nend\n```\n使用在实例方法内部使用@name和使用self.name是一样的意思，只不过self调用的是name方法。**self**即使对像的本身，相当于C#、Java中的**this**对象。所以上面的self.name可以省略self，直接调用name方法。\n\n但是，在调用像*name=*方法这样的以*=*结束的方法时，有一点我们需要注意。因为在Ruby中，定义局部变量也是用*=*\n\n``` ruby\nclass Greeter\n\tdef test_name\n\t\tname = \"Ruby\"\t\t\t\t\t#定义局部变量name并赋值\n\t\tself.name = \"ruby\"\t\t\t#调用Greeter类的name=方法\n\tend\nend\n```\n所以此时省略self后，含义是不一样的。\n\n#### 类方法的定义\n如果方法的接受者是类本身（类对象）的方法成为类方法。其定义方式主要有以下两种\n\n1. 在**class << 类名 ~ end**这个特殊的类中定义实例方法的形式\n\n\t\tclass << 类名\n\t\t\t方法的定义\n\t\tend\n\n为Greeter类定义类方法*good_morning*\n\n``` ruby\nclass << Greeter\n\tdef good_morning(name)\n\t\tputs \"Good morning #{name}\"\n\tend\nend\n```\n\n2. 使用**def 类名.方法名 ~ end**这样的形式来定义类方法。\n\n\t\tdef 类名.方法名\n\t\t\t方法的定义\n\t\tend\n\n``` ruby\ndef Greeter.good_morning(name)\n\tputs \"Good morning #{name}\"\nend\n```\n注意以上两种定义形式都在类的外部定义，如果在类的内部定义，可以将类名用**self**，这时self引用的对象是该类本身。\n\n``` ruby\nclass Greeter\n\tclass << self\n\t\tdef good_morning(name)\n\t\t\tputs \"Good morning #{name}\"\n\t\tend\n\tend\nend\n\nclass Greeter\n\tdef self.good_morning(name)\n\t\tputs \"Good morning #{name}\"\n\tend\nend\n```\n\n*注：**class << 类名 ~ end** 这种写法的类定义称为单例类定义，单例类定义中定义的方法称为单例方法*\n\n#### 常量\n在class中定义常量，通过使用**类名::常量名**形式来实现外部访问.常量是不可修改的。\n\n``` ruby\nclass Greeter\n\tHello = \"Hello\"\nend\n\np Greeter::Hello\t\t\t\t#=> \"Hello\"\n```\n\n#### 类变量\n以**@@**开头的变量成为类变量，类变量是该类中所有实例的共享变量，这点和常量类似，不同的是这个类变量可以被修改。当然，从类的外部访问类变量时也需要存取器，但是不能使用*attr_accessor*,它使属于实例变量的，所以我们需要自己定义，使用类方法来获取类变量是个好的形式\n\n``` ruby\nclass Greeter\n\t@@greeter_count = 0\n\tattr_accessor :name\n\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\t\t@@greeter_count += 1\n\tend\n\t\n\tdef Greeter.greeter_count\n\t\t@@greeter_count\n\tend\nend\n\nGreeter.greeter_count\t\t\t\t\t#=> 0\ngreeter = Greeter.new(\"world\")\ngreeter.say_hello\ngreeter = Greeter.new\ngreeter.say_hello\nGreeter.greeter_count\t\t\t\t\t#=> 2\n```\n\n#### 限制方法的调用\n和其他面向对象语言一样，Ruby也有方法的访问修饰符，分别为**public**，**protected**，**private**。其表达的含义也一样。\n\n- public 以实例的方法的形式向外部公开\n- protect 仅向同一个类或子类公开\n- private 仅内部类可调用\n\n定义方式，有两种，一种是访问修饰符后面带方法符号\n\n\tpublic :方法1, :方法2\n\t\n另外一种是后面不带参数，那么下面所有定义的方法均在这个访问修饰符下，直到有新的访问修饰符。\n\n``` ruby\nclass Greeter\n\tattr_accessor :name\n\n\tdef initialize(name = \"Ruby\")\n\t\t@name = name\n\tend\n\n\tpublic\n\tdef say_hello\n\t\tputs \"Hello #{@name}\"\n\tend\n\n\tdef say_bye\n\t\tputs \"Bye #{self.name}\"\n\tend\n\t\n\tdef say_haha\n\t\tputs \"Haha #{@name}\"\n\tend\n\t\n\tprivate :say_haha\nend\n```\n如以上方法的定义，public修饰符下定义了3个方法，这个3个方法都可以在外部访问，但是最后我们又将最后一个方法标记为private。所以如果在外部企图访问这个方法，将跑出如下错误信息\n\n\tclass_definition.rb:47:in `<main>': private method `say_haha' called for #<Greeter:\t0x007fb57c101510 @name=\"Ruby\"> (NoMethodError)\n\n如果没有指定访问级别的方法默认为public，但是**initialize**方法是个例外，它通常被定义为private\n\n### 扩展类\nRuby允许我们在已经定义好的类中添加方法。即为扩展方法。如在String类中定义一个计算字符串单词数的方法\n\n``` ruby\nclass String\n\tdef count_word\n\t\tary = self.split(/\\s+/)\t#用空格分割接收者\n\t\tary.size\n\tend\nend\n\nstr = \"Hello Ruby\"\np str.count_word\t\t\t\t#=> 2\n```\n\n#### 继承\n使用class关键字指定类名的同时指定父类名\n\n\tclass 类名 < 父类名\n\t\t类定义\n\tend\n\t\n定义类时没有指定父类的情况下，Ruby会默认该类为**Object**类的子类。通过类对象调用**instance_methods方法，可以得到以符号形式返回的该类的实例方法\n\n``` ruby\n\tGreeter.instance_methods\n```\n\n如果想定义**BasicObject**的子类，我们需要明确指定BasicObject类为父类；而Object类为父类时不需要。\n\n#### alias\n**alias**即别名，在Ruby中我们可以给方法设置别名，设置别名也两种方式，一种alias后面带方法名参数，第二种后面带方法符号名参数\n\n\talias 别名\t原名\t\t#使用方法名\n\t\n\talias :别名 :原名\t\t#使用符号名\n\t\n``` ruby\nclass Greeter\n\tdef say_hello\n\t\tputs \"Hello\"\n\tend\nend\n\nclass RubyGreeter < Greeter\n\talias old_say_hello say_hello  #将继承的say_hello方法设置别名为old_say_hello\n\t\n\tdef say_hello\n\t\tputs \"Hello Ruby\"\n\tend\nend\n\nrubyGreeter = RubyGreeter.new\np rubyGreeter.old_say_hello\t\t#=> \"Hello\"\np rubyGreeter.say_hello\t\t\t\t#=> \"Hello Ruby\"\n```\n\n#### undef\n**undef**用于删除已有方法的定义。与alias一样，参数可以指定方法名或者符号名。\n\n\tundef 方法名\t\t#使用方法名\n\t\n\tundef :方法名\t\t#使用符号名\n\t\n在子类中希望删除父类的方法时可以直接使用undef。试图访问已删除的方法将会引发*NoMethodError*错误。\n\n``` ruby\nclass Greeter\n\tdef say_hello\n\t\tputs \"Hello\"\n\tend\nend\n\nclass RubyGreeter < Greeter\n\tundef say_hello  #删除继承的say_hello\nend\n\nrubyGreeter = RubyGreeter.new\np rubyGreeter.say_hello\t\t\t\t\t\t#=>抛出异常，undefined method `say_hello' for #<RubyGreeter:0x007fbff4167220> (NoMethodError)\n```\n\n#### 单例类\n利用单例类定义，可以给对象添加方法（单例方法）。单列类定义被用于定义对象的专属实例方法。\n\n```\nstr1 = \"Ruby\"\nstr2 = \"Ruby\"\n\nclass << str1\n\tdef hello\n\t\tputs \"Hello #{self}\"\n\tend\nend\n\np str1.hello \t\t\t\t\t\t#=> \"Hello Ruby\"\np str2.hello\t\t\t\t\t\t#=>引发NoMethodError错误\n```\n","slug":"2015-08-25-ruby-practice-6","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4ov003xazv58ban09dy","layout":"post","photos":[],"link":"","content":"<h3 id=\"Ruby的类\"><a href=\"#Ruby的类\" class=\"headerlink\" title=\"Ruby的类\"></a>Ruby的类</h3><p>和其他面向对象语言一样，Ruby的类也表示对象的种类。通过<strong>class</strong>方法可以知道某个对象属于哪个类。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.<span class=\"keyword\">class</span>\t\t\t\t<span class=\"comment\">#=&gt; String</span></span><br><span class=\"line\"><span class=\"number\">1</span>.<span class=\"keyword\">class</span>\t\t\t\t\t<span class=\"comment\">#=&gt; Fixnum</span></span><br></pre></td></tr></table></figure>\n<p>判断某个对象时候属于某个类时，可以使用**instance_of?**方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.instance_of?(<span class=\"title class_\">String</span>)\t\t\t<span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"><span class=\"number\">1</span>.instance_of? <span class=\"title class_\">Fixnum</span>\t\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>通过扩展已定义的类来创建新类成为<em>继承</em>，通过继承，我们可以实现以下事情：</p>\n<ul>\n<li>在不影响原有功能的前提下追加新功能</li>\n<li>重定义原有功能，使名称相同的方法产生不同的效果</li>\n<li>在已有功能的基础上追加处理，扩展已有共更能</li>\n</ul>\n<p><strong>BasicObject</strong>类是Ruby中所有类的父类，它定义了Ruby对象的最基本功能。普通对象所需要的类一般都被定义为<strong>Object</strong>类。字符串、数组等都是Object类的子类。</p>\n<p>子类与父类的关系称为”is-a”关系。我们可以通过类的继承关系使用**is_a?**方法反向追查对象是否属于某个类</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.is_a?(<span class=\"title class_\">String</span>)\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.is_a?(<span class=\"title class_\">Object</span>)\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>*注：**instance_of?<strong>方法与</strong>is_a?**方法已经在Object类中定义过，因此普通的对象可以直接使用者两个方法。</p>\n<h4 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h4><p>使用<strong>class</strong>关键字定义类，类名的首字母必须大写</p>\n<pre><code>class 类名\n    类的定义\nend\n</code></pre>\n<p>类定义中有个特别的方法名为<strong>initialize</strong>方法，当我们使用<strong>new</strong>方法生成新的对象时，initialize方法会被调用，同时new方法的参数也会被原封不动的传递给initialize方法。</p>\n<p>定义一个Greeter类，当对象被创建时，会将new方法中得参数传递给initialize方法中得实例变量@name，如果不传参数，则使用默认的值Ruby传给实例变量，在say_hello实例方法中，将其打印出来。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>利用Greeter类的对象来问候，其执行结果如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_greeter = <span class=\"title class_\">Greeter</span>.new</span><br><span class=\"line\">default_greeter.say_hello\t\t\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"></span><br><span class=\"line\">world_greeter = <span class=\"title class_\">Greeter</span>.new(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\">world_greeter.say_hello\t\t\t\t\t\t<span class=\"comment\">#=&gt; Hello World</span></span><br></pre></td></tr></table></figure>\n<p><em>注：引用未初始化的实例变量时的返回值为nil</em></p>\n<p>在上面的Greeter类中，@name实例变量是不能被外部直接访问或赋值的，需要通过方法来访问对象的内部。我们可以在Greeter类内部定义两个方法来解决这个问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Greeter</span><br><span class=\"line\">\t#other codes in here</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdef name\t\t\t\t\t#获取@name</span><br><span class=\"line\">\t\t@name</span><br><span class=\"line\">\tend</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef name=(value)\t\t\t#修改@name</span><br><span class=\"line\">\t\t@name = value</span><br><span class=\"line\">\tend</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>有了这这两个方法，现在我们可以访问@name实例变量了。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_greeter.name\t\t\t\t\t<span class=\"comment\">#=&gt; Ruby</span></span><br><span class=\"line\">default_greeter.name = <span class=\"string\">&quot;Python&quot;</span></span><br><span class=\"line\">default_greeter.say_hello\t\t\t\t<span class=\"comment\">#=&gt; Hello Python</span></span><br></pre></td></tr></table></figure>\n<p>但是，如果一个类里面有多个实例变量需要被访问时，定义这么多得方法会使得代码量过多，有没有像C#中的属性访问器get&#x2F;set之类的呢。其实Ruby也为我们提供了这个，称为存取器。使用<strong>attr_reader</strong>, <strong>attr_writer</strong>, <strong>attr_accessor</strong>，只要指定实例变量名的符号（symbol）,注意，此处是实例变量的符号，Ruby就会自动定义相应的存取器。</p>\n<pre><code>attr_reader :name\t\t\t只读 (定义name方法)\nattr_writer :name\t\t\t只写 (定义name=方法)\nattr_accessor :name\t\t\t读写 (定义以上两个方法)\n</code></pre>\n<p>通过使用他们，我们的Greeter类可以简化为如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Ruby中还提供了特殊变量<strong>self</strong>.使用<strong>self</strong>这个特殊变量可以引用方法的接受者。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_bye</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Bye <span class=\"subst\">#&#123;<span class=\"variable language_\">self</span>.name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>使用在实例方法内部使用@name和使用self.name是一样的意思，只不过self调用的是name方法。<strong>self</strong>即使对像的本身，相当于C#、Java中的<strong>this</strong>对象。所以上面的self.name可以省略self，直接调用name方法。</p>\n<p>但是，在调用像<em>name&#x3D;<em>方法这样的以</em>&#x3D;<em>结束的方法时，有一点我们需要注意。因为在Ruby中，定义局部变量也是用</em>&#x3D;</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">test_name</span></span><br><span class=\"line\">\t\tname = <span class=\"string\">&quot;Ruby&quot;</span>\t\t\t\t\t<span class=\"comment\">#定义局部变量name并赋值</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.name = <span class=\"string\">&quot;ruby&quot;</span>\t\t\t<span class=\"comment\">#调用Greeter类的name=方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>所以此时省略self后，含义是不一样的。</p>\n<h4 id=\"类方法的定义\"><a href=\"#类方法的定义\" class=\"headerlink\" title=\"类方法的定义\"></a>类方法的定义</h4><p>如果方法的接受者是类本身（类对象）的方法成为类方法。其定义方式主要有以下两种</p>\n<ol>\n<li><p>在<strong>class &lt;&lt; 类名 ~ end</strong>这个特殊的类中定义实例方法的形式</p>\n<pre><code> class &lt;&lt; 类名\n     方法的定义\n end\n</code></pre>\n</li>\n</ol>\n<p>为Greeter类定义类方法<em>good_morning</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> &lt;&lt; <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">good_morning</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>使用<strong>def 类名.方法名 ~ end</strong>这样的形式来定义类方法。</p>\n<pre><code> def 类名.方法名\n     方法的定义\n end\n</code></pre>\n</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Greeter</span>.good_morning(name)</span><br><span class=\"line\">\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>注意以上两种定义形式都在类的外部定义，如果在类的内部定义，可以将类名用<strong>self</strong>，这时self引用的对象是该类本身。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> &lt;&lt; <span class=\"variable language_\">self</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">def</span> <span class=\"title function_\">good_morning</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\t\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">self</span>.good_morning(name)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：*<em>class &lt;&lt; 类名 ~ end</em></em> 这种写法的类定义称为单例类定义，单例类定义中定义的方法称为单例方法*</p>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><p>在class中定义常量，通过使用<strong>类名::常量名</strong>形式来实现外部访问.常量是不可修改的。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"title class_\">Hello</span> = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p <span class=\"title class_\">Greeter</span><span class=\"symbol\">:</span><span class=\"symbol\">:Hello</span>\t\t\t\t<span class=\"comment\">#=&gt; &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h4><p>以**@@*<em>开头的变量成为类变量，类变量是该类中所有实例的共享变量，这点和常量类似，不同的是这个类变量可以被修改。当然，从类的外部访问类变量时也需要存取器，但是不能使用</em>attr_accessor*,它使属于实例变量的，所以我们需要自己定义，使用类方法来获取类变量是个好的形式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"variable\">@@greeter_count</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"variable\">@@greeter_count</span> += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">Greeter</span>.greeter_count</span><br><span class=\"line\">\t\t<span class=\"variable\">@@greeter_count</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Greeter</span>.greeter_count\t\t\t\t\t<span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">greeter = <span class=\"title class_\">Greeter</span>.new(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">greeter.say_hello</span><br><span class=\"line\">greeter = <span class=\"title class_\">Greeter</span>.new</span><br><span class=\"line\">greeter.say_hello</span><br><span class=\"line\"><span class=\"title class_\">Greeter</span>.greeter_count\t\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"限制方法的调用\"><a href=\"#限制方法的调用\" class=\"headerlink\" title=\"限制方法的调用\"></a>限制方法的调用</h4><p>和其他面向对象语言一样，Ruby也有方法的访问修饰符，分别为<strong>public</strong>，<strong>protected</strong>，<strong>private</strong>。其表达的含义也一样。</p>\n<ul>\n<li>public 以实例的方法的形式向外部公开</li>\n<li>protect 仅向同一个类或子类公开</li>\n<li>private 仅内部类可调用</li>\n</ul>\n<p>定义方式，有两种，一种是访问修饰符后面带方法符号</p>\n<pre><code>public :方法1, :方法2\n</code></pre>\n<p>另外一种是后面不带参数，那么下面所有定义的方法均在这个访问修饰符下，直到有新的访问修饰符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_bye</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Bye <span class=\"subst\">#&#123;<span class=\"variable language_\">self</span>.name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_haha</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Haha <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"symbol\">:say_haha</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>如以上方法的定义，public修饰符下定义了3个方法，这个3个方法都可以在外部访问，但是最后我们又将最后一个方法标记为private。所以如果在外部企图访问这个方法，将跑出如下错误信息</p>\n<pre><code>class_definition.rb:47:in `&lt;main&gt;&#39;: private method `say_haha&#39; called for #&lt;Greeter:\t0x007fb57c101510 @name=&quot;Ruby&quot;&gt; (NoMethodError)\n</code></pre>\n<p>如果没有指定访问级别的方法默认为public，但是<strong>initialize</strong>方法是个例外，它通常被定义为private</p>\n<h3 id=\"扩展类\"><a href=\"#扩展类\" class=\"headerlink\" title=\"扩展类\"></a>扩展类</h3><p>Ruby允许我们在已经定义好的类中添加方法。即为扩展方法。如在String类中定义一个计算字符串单词数的方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">String</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">count_word</span></span><br><span class=\"line\">\t\tary = <span class=\"variable language_\">self</span>.split(<span class=\"regexp\">/\\s+/</span>)\t<span class=\"comment\">#用空格分割接收者</span></span><br><span class=\"line\">\t\tary.size</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br><span class=\"line\">p str.count_word\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>使用class关键字指定类名的同时指定父类名</p>\n<pre><code>class 类名 &lt; 父类名\n    类定义\nend\n</code></pre>\n<p>定义类时没有指定父类的情况下，Ruby会默认该类为<strong>Object</strong>类的子类。通过类对象调用**instance_methods方法，可以得到以符号形式返回的该类的实例方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Greeter</span>.instance_methods</span><br></pre></td></tr></table></figure>\n\n<p>如果想定义<strong>BasicObject</strong>的子类，我们需要明确指定BasicObject类为父类；而Object类为父类时不需要。</p>\n<h4 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h4><p><strong>alias</strong>即别名，在Ruby中我们可以给方法设置别名，设置别名也两种方式，一种alias后面带方法名参数，第二种后面带方法符号名参数</p>\n<pre><code>alias 别名\t原名\t\t#使用方法名\n\nalias :别名 :原名\t\t#使用符号名\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RubyGreeter</span> &lt; <span class=\"title class_ inherited__\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">alias</span> old_say_hello say_hello  <span class=\"comment\">#将继承的say_hello方法设置别名为old_say_hello</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">rubyGreeter = <span class=\"title class_\">RubyGreeter</span>.new</span><br><span class=\"line\">p rubyGreeter.old_say_hello\t\t<span class=\"comment\">#=&gt; &quot;Hello&quot;</span></span><br><span class=\"line\">p rubyGreeter.say_hello\t\t\t\t<span class=\"comment\">#=&gt; &quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"undef\"><a href=\"#undef\" class=\"headerlink\" title=\"undef\"></a>undef</h4><p><strong>undef</strong>用于删除已有方法的定义。与alias一样，参数可以指定方法名或者符号名。</p>\n<pre><code>undef 方法名\t\t#使用方法名\n\nundef :方法名\t\t#使用符号名\n</code></pre>\n<p>在子类中希望删除父类的方法时可以直接使用undef。试图访问已删除的方法将会引发<em>NoMethodError</em>错误。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RubyGreeter</span> &lt; <span class=\"title class_ inherited__\">Greeter</span></span><br><span class=\"line\">\tun<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span>  <span class=\"comment\">#删除继承的say_hello</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">rubyGreeter = <span class=\"title class_\">RubyGreeter</span>.new</span><br><span class=\"line\">p rubyGreeter.say_hello\t\t\t\t\t\t<span class=\"comment\">#=&gt;抛出异常，undefined method `say_hello&#x27; for #&lt;RubyGreeter:0x007fbff4167220&gt; (NoMethodError)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单例类\"><a href=\"#单例类\" class=\"headerlink\" title=\"单例类\"></a>单例类</h4><p>利用单例类定义，可以给对象添加方法（单例方法）。单列类定义被用于定义对象的专属实例方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = &quot;Ruby&quot;</span><br><span class=\"line\">str2 = &quot;Ruby&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class &lt;&lt; str1</span><br><span class=\"line\">\tdef hello</span><br><span class=\"line\">\t\tputs &quot;Hello #&#123;self&#125;&quot;</span><br><span class=\"line\">\tend</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">p str1.hello \t\t\t\t\t\t#=&gt; &quot;Hello Ruby&quot;</span><br><span class=\"line\">p str2.hello\t\t\t\t\t\t#=&gt;引发NoMethodError错误</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Ruby的类\"><a href=\"#Ruby的类\" class=\"headerlink\" title=\"Ruby的类\"></a>Ruby的类</h3><p>和其他面向对象语言一样，Ruby的类也表示对象的种类。通过<strong>class</strong>方法可以知道某个对象属于哪个类。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.<span class=\"keyword\">class</span>\t\t\t\t<span class=\"comment\">#=&gt; String</span></span><br><span class=\"line\"><span class=\"number\">1</span>.<span class=\"keyword\">class</span>\t\t\t\t\t<span class=\"comment\">#=&gt; Fixnum</span></span><br></pre></td></tr></table></figure>\n<p>判断某个对象时候属于某个类时，可以使用**instance_of?**方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.instance_of?(<span class=\"title class_\">String</span>)\t\t\t<span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"><span class=\"number\">1</span>.instance_of? <span class=\"title class_\">Fixnum</span>\t\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>","more":"<p>通过扩展已定义的类来创建新类成为<em>继承</em>，通过继承，我们可以实现以下事情：</p>\n<ul>\n<li>在不影响原有功能的前提下追加新功能</li>\n<li>重定义原有功能，使名称相同的方法产生不同的效果</li>\n<li>在已有功能的基础上追加处理，扩展已有共更能</li>\n</ul>\n<p><strong>BasicObject</strong>类是Ruby中所有类的父类，它定义了Ruby对象的最基本功能。普通对象所需要的类一般都被定义为<strong>Object</strong>类。字符串、数组等都是Object类的子类。</p>\n<p>子类与父类的关系称为”is-a”关系。我们可以通过类的继承关系使用**is_a?**方法反向追查对象是否属于某个类</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.is_a?(<span class=\"title class_\">String</span>)\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.is_a?(<span class=\"title class_\">Object</span>)\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>*注：**instance_of?<strong>方法与</strong>is_a?**方法已经在Object类中定义过，因此普通的对象可以直接使用者两个方法。</p>\n<h4 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h4><p>使用<strong>class</strong>关键字定义类，类名的首字母必须大写</p>\n<pre><code>class 类名\n    类的定义\nend\n</code></pre>\n<p>类定义中有个特别的方法名为<strong>initialize</strong>方法，当我们使用<strong>new</strong>方法生成新的对象时，initialize方法会被调用，同时new方法的参数也会被原封不动的传递给initialize方法。</p>\n<p>定义一个Greeter类，当对象被创建时，会将new方法中得参数传递给initialize方法中得实例变量@name，如果不传参数，则使用默认的值Ruby传给实例变量，在say_hello实例方法中，将其打印出来。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>利用Greeter类的对象来问候，其执行结果如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_greeter = <span class=\"title class_\">Greeter</span>.new</span><br><span class=\"line\">default_greeter.say_hello\t\t\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"></span><br><span class=\"line\">world_greeter = <span class=\"title class_\">Greeter</span>.new(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\">world_greeter.say_hello\t\t\t\t\t\t<span class=\"comment\">#=&gt; Hello World</span></span><br></pre></td></tr></table></figure>\n<p><em>注：引用未初始化的实例变量时的返回值为nil</em></p>\n<p>在上面的Greeter类中，@name实例变量是不能被外部直接访问或赋值的，需要通过方法来访问对象的内部。我们可以在Greeter类内部定义两个方法来解决这个问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Greeter</span><br><span class=\"line\">\t#other codes in here</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdef name\t\t\t\t\t#获取@name</span><br><span class=\"line\">\t\t@name</span><br><span class=\"line\">\tend</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef name=(value)\t\t\t#修改@name</span><br><span class=\"line\">\t\t@name = value</span><br><span class=\"line\">\tend</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>有了这这两个方法，现在我们可以访问@name实例变量了。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default_greeter.name\t\t\t\t\t<span class=\"comment\">#=&gt; Ruby</span></span><br><span class=\"line\">default_greeter.name = <span class=\"string\">&quot;Python&quot;</span></span><br><span class=\"line\">default_greeter.say_hello\t\t\t\t<span class=\"comment\">#=&gt; Hello Python</span></span><br></pre></td></tr></table></figure>\n<p>但是，如果一个类里面有多个实例变量需要被访问时，定义这么多得方法会使得代码量过多，有没有像C#中的属性访问器get&#x2F;set之类的呢。其实Ruby也为我们提供了这个，称为存取器。使用<strong>attr_reader</strong>, <strong>attr_writer</strong>, <strong>attr_accessor</strong>，只要指定实例变量名的符号（symbol）,注意，此处是实例变量的符号，Ruby就会自动定义相应的存取器。</p>\n<pre><code>attr_reader :name\t\t\t只读 (定义name方法)\nattr_writer :name\t\t\t只写 (定义name=方法)\nattr_accessor :name\t\t\t读写 (定义以上两个方法)\n</code></pre>\n<p>通过使用他们，我们的Greeter类可以简化为如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Ruby中还提供了特殊变量<strong>self</strong>.使用<strong>self</strong>这个特殊变量可以引用方法的接受者。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_bye</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Bye <span class=\"subst\">#&#123;<span class=\"variable language_\">self</span>.name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>使用在实例方法内部使用@name和使用self.name是一样的意思，只不过self调用的是name方法。<strong>self</strong>即使对像的本身，相当于C#、Java中的<strong>this</strong>对象。所以上面的self.name可以省略self，直接调用name方法。</p>\n<p>但是，在调用像<em>name&#x3D;<em>方法这样的以</em>&#x3D;<em>结束的方法时，有一点我们需要注意。因为在Ruby中，定义局部变量也是用</em>&#x3D;</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">test_name</span></span><br><span class=\"line\">\t\tname = <span class=\"string\">&quot;Ruby&quot;</span>\t\t\t\t\t<span class=\"comment\">#定义局部变量name并赋值</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.name = <span class=\"string\">&quot;ruby&quot;</span>\t\t\t<span class=\"comment\">#调用Greeter类的name=方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>所以此时省略self后，含义是不一样的。</p>\n<h4 id=\"类方法的定义\"><a href=\"#类方法的定义\" class=\"headerlink\" title=\"类方法的定义\"></a>类方法的定义</h4><p>如果方法的接受者是类本身（类对象）的方法成为类方法。其定义方式主要有以下两种</p>\n<ol>\n<li><p>在<strong>class &lt;&lt; 类名 ~ end</strong>这个特殊的类中定义实例方法的形式</p>\n<pre><code> class &lt;&lt; 类名\n     方法的定义\n end\n</code></pre>\n</li>\n</ol>\n<p>为Greeter类定义类方法<em>good_morning</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> &lt;&lt; <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">good_morning</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>使用<strong>def 类名.方法名 ~ end</strong>这样的形式来定义类方法。</p>\n<pre><code> def 类名.方法名\n     方法的定义\n end\n</code></pre>\n</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Greeter</span>.good_morning(name)</span><br><span class=\"line\">\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>注意以上两种定义形式都在类的外部定义，如果在类的内部定义，可以将类名用<strong>self</strong>，这时self引用的对象是该类本身。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> &lt;&lt; <span class=\"variable language_\">self</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">def</span> <span class=\"title function_\">good_morning</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\t\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">self</span>.good_morning(name)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Good morning <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：*<em>class &lt;&lt; 类名 ~ end</em></em> 这种写法的类定义称为单例类定义，单例类定义中定义的方法称为单例方法*</p>\n<h4 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h4><p>在class中定义常量，通过使用<strong>类名::常量名</strong>形式来实现外部访问.常量是不可修改的。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"title class_\">Hello</span> = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p <span class=\"title class_\">Greeter</span><span class=\"symbol\">:</span><span class=\"symbol\">:Hello</span>\t\t\t\t<span class=\"comment\">#=&gt; &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类变量\"><a href=\"#类变量\" class=\"headerlink\" title=\"类变量\"></a>类变量</h4><p>以**@@*<em>开头的变量成为类变量，类变量是该类中所有实例的共享变量，这点和常量类似，不同的是这个类变量可以被修改。当然，从类的外部访问类变量时也需要存取器，但是不能使用</em>attr_accessor*,它使属于实例变量的，所以我们需要自己定义，使用类方法来获取类变量是个好的形式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"variable\">@@greeter_count</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t\t<span class=\"variable\">@@greeter_count</span> += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">Greeter</span>.greeter_count</span><br><span class=\"line\">\t\t<span class=\"variable\">@@greeter_count</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Greeter</span>.greeter_count\t\t\t\t\t<span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">greeter = <span class=\"title class_\">Greeter</span>.new(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">greeter.say_hello</span><br><span class=\"line\">greeter = <span class=\"title class_\">Greeter</span>.new</span><br><span class=\"line\">greeter.say_hello</span><br><span class=\"line\"><span class=\"title class_\">Greeter</span>.greeter_count\t\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"限制方法的调用\"><a href=\"#限制方法的调用\" class=\"headerlink\" title=\"限制方法的调用\"></a>限制方法的调用</h4><p>和其他面向对象语言一样，Ruby也有方法的访问修饰符，分别为<strong>public</strong>，<strong>protected</strong>，<strong>private</strong>。其表达的含义也一样。</p>\n<ul>\n<li>public 以实例的方法的形式向外部公开</li>\n<li>protect 仅向同一个类或子类公开</li>\n<li>private 仅内部类可调用</li>\n</ul>\n<p>定义方式，有两种，一种是访问修饰符后面带方法符号</p>\n<pre><code>public :方法1, :方法2\n</code></pre>\n<p>另外一种是后面不带参数，那么下面所有定义的方法均在这个访问修饰符下，直到有新的访问修饰符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">name = <span class=\"string\">&quot;Ruby&quot;</span></span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@name</span> = name</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_bye</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Bye <span class=\"subst\">#&#123;<span class=\"variable language_\">self</span>.name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_haha</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Haha <span class=\"subst\">#&#123;<span class=\"variable\">@name</span>&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"symbol\">:say_haha</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>如以上方法的定义，public修饰符下定义了3个方法，这个3个方法都可以在外部访问，但是最后我们又将最后一个方法标记为private。所以如果在外部企图访问这个方法，将跑出如下错误信息</p>\n<pre><code>class_definition.rb:47:in `&lt;main&gt;&#39;: private method `say_haha&#39; called for #&lt;Greeter:\t0x007fb57c101510 @name=&quot;Ruby&quot;&gt; (NoMethodError)\n</code></pre>\n<p>如果没有指定访问级别的方法默认为public，但是<strong>initialize</strong>方法是个例外，它通常被定义为private</p>\n<h3 id=\"扩展类\"><a href=\"#扩展类\" class=\"headerlink\" title=\"扩展类\"></a>扩展类</h3><p>Ruby允许我们在已经定义好的类中添加方法。即为扩展方法。如在String类中定义一个计算字符串单词数的方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">String</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">count_word</span></span><br><span class=\"line\">\t\tary = <span class=\"variable language_\">self</span>.split(<span class=\"regexp\">/\\s+/</span>)\t<span class=\"comment\">#用空格分割接收者</span></span><br><span class=\"line\">\t\tary.size</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br><span class=\"line\">p str.count_word\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>使用class关键字指定类名的同时指定父类名</p>\n<pre><code>class 类名 &lt; 父类名\n    类定义\nend\n</code></pre>\n<p>定义类时没有指定父类的情况下，Ruby会默认该类为<strong>Object</strong>类的子类。通过类对象调用**instance_methods方法，可以得到以符号形式返回的该类的实例方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Greeter</span>.instance_methods</span><br></pre></td></tr></table></figure>\n\n<p>如果想定义<strong>BasicObject</strong>的子类，我们需要明确指定BasicObject类为父类；而Object类为父类时不需要。</p>\n<h4 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h4><p><strong>alias</strong>即别名，在Ruby中我们可以给方法设置别名，设置别名也两种方式，一种alias后面带方法名参数，第二种后面带方法符号名参数</p>\n<pre><code>alias 别名\t原名\t\t#使用方法名\n\nalias :别名 :原名\t\t#使用符号名\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RubyGreeter</span> &lt; <span class=\"title class_ inherited__\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">alias</span> old_say_hello say_hello  <span class=\"comment\">#将继承的say_hello方法设置别名为old_say_hello</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello Ruby&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">rubyGreeter = <span class=\"title class_\">RubyGreeter</span>.new</span><br><span class=\"line\">p rubyGreeter.old_say_hello\t\t<span class=\"comment\">#=&gt; &quot;Hello&quot;</span></span><br><span class=\"line\">p rubyGreeter.say_hello\t\t\t\t<span class=\"comment\">#=&gt; &quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"undef\"><a href=\"#undef\" class=\"headerlink\" title=\"undef\"></a>undef</h4><p><strong>undef</strong>用于删除已有方法的定义。与alias一样，参数可以指定方法名或者符号名。</p>\n<pre><code>undef 方法名\t\t#使用方法名\n\nundef :方法名\t\t#使用符号名\n</code></pre>\n<p>在子类中希望删除父类的方法时可以直接使用undef。试图访问已删除的方法将会引发<em>NoMethodError</em>错误。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Greeter</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span></span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RubyGreeter</span> &lt; <span class=\"title class_ inherited__\">Greeter</span></span><br><span class=\"line\">\tun<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span>  <span class=\"comment\">#删除继承的say_hello</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">rubyGreeter = <span class=\"title class_\">RubyGreeter</span>.new</span><br><span class=\"line\">p rubyGreeter.say_hello\t\t\t\t\t\t<span class=\"comment\">#=&gt;抛出异常，undefined method `say_hello&#x27; for #&lt;RubyGreeter:0x007fbff4167220&gt; (NoMethodError)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单例类\"><a href=\"#单例类\" class=\"headerlink\" title=\"单例类\"></a>单例类</h4><p>利用单例类定义，可以给对象添加方法（单例方法）。单列类定义被用于定义对象的专属实例方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = &quot;Ruby&quot;</span><br><span class=\"line\">str2 = &quot;Ruby&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">class &lt;&lt; str1</span><br><span class=\"line\">\tdef hello</span><br><span class=\"line\">\t\tputs &quot;Hello #&#123;self&#125;&quot;</span><br><span class=\"line\">\tend</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">p str1.hello \t\t\t\t\t\t#=&gt; &quot;Hello Ruby&quot;</span><br><span class=\"line\">p str2.hello\t\t\t\t\t\t#=&gt;引发NoMethodError错误</span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(7)","date":"2015-09-01T01:06:53.000Z","comments":1,"_content":"### 模块\nRuby中的类是表现事物的属性和行为，那么模块呢？，在Ruby中*模块*表现的只是事物的行为。\n\n模块与类的区别于下：\n\n- 模块不能拥有实例\n- 模块不能被继承\n\n如何访问模块内的方法？有两种方式可以访问\n\n1.使用**模块名.方法名**的形式来直接调用模块中定义的方法。\n\n``` ruby\nMath.sqrt(4)\t\t\t#=> 2.0\n```\n<!-- more -->\n2.通过**include 模块名**的形式预先将模块引入到当前的命名空间，然后就可直接访问模块内的方法和常量。\n\n``` ruby\ninclude Math\nsqrt(4)\t\t\t\t#=> 2.0\n```\n\n第二种方式也就是**Mix-in**扩展类的功能，将模块混合到类中。在定义类时使用**include**引入指定的模块后，此时该类就可以使用模块里的所有方法和常量，从而增加了该类的功能。\n\n**Mix-in**可以灵活地解决以下问题：\n\n- 虽然两个类拥有相似的功能，但是不希望把他们作为相同的种类（Class）来考虑的时候，此时可将相似功能封装为模块供这两个类使用\n- Ruby不支持父类的多重继承，因此无法对已经继承的类添加共同的功能的时候\n\n``` ruby\nclass Calculator\n\tinclude Math\n\tdef my_sqrt(a, b)\n\t\tsqrt(a) + sqrt(b)\t\t\t#=> 调用Math模块中得sqrt方法\n\tend\n\t\n\t@@PI = PI\nend\n\ncal = Calculator.new\ncal.my_sqrt(1, 4)\t\t\t\t\t#=> 3.0\nCalculator::PI\t\t\t\t\t\t#=> 3.141592653589793\n```\n\n#### 创建模块\n使用**module**关键来创建模块，模块名的首字母必须大写\n\n\tmodule 模块名\n\t\t模块定义\n\tend\n\n``` ruby\nmodule HelloModule\n\tVersion = \"1.0\"\n\n\tdef say_hello(name)\n\t\tputs \"Hello #{name}\"\n\tend\n\t\n\tmodule_function :say_hello\nend\n\np HelloModule::Version\t\t\t\t\t#=> \"1.0\"\nHelloModule.say_hello(\"Ruby\")\t\t\t#=> Hello Ruby\n\ninclude HelloModule\t\t\t\t\t\t#=> 包含模块\nVersion\t\t\t\t\t\t\t\t\t#=> \"1.0\"\nsay_hello(\"Ruby\")\t\t\t\t\t\t#=> Hello Ruby\n```\n在上面代码中，我们可以看到**module_function**方法，此方法主要用于将需要把模块函数公开给外部使用，其参数是表示方法方法名的符号，可以跟多个参数。\n\n*注：不建议在定义为模块函数的方法中使用self*\n\n#### Mix-in\n前面提到的，在类中使用*include*引入模块，此时类的功能将得到增强。\n\n如果想知道类是否包含某个模块，可以使用**include？**方法，如之前的Calculator类中。\n\n``` ruby\nCalculator.include?(Math)\t\t\t\t#=> true\n```\n\nRuby中类的实例在调用方法时的顺序为，该类>包含的模块>该类的父类等这个顺序查找该方法。\n\n``` ruby\nmodule HelloModule\n\tVersion = \"1.0\"\n\n\tdef say_hello(name)\n\t\tputs \"Hello #{name}\"\n\tend\nend\n\nclass HelloClass\n\tinclude HelloModule\nend\n\nhello = HelloClass.new\nhello.say_hello(\"Ruby\")\t\t\t\t\t#=> Hello Ruby\n```\n以上代码中调用的是module中的方法。\n\n用*ancestors*方法和*superclass*方法调查类的继承关系。*superclass*方法可直接返回类的父类\n\n``` ruby\np HelloClass.ancestors\t\t\t\t\t#=> [HelloClass, HelloModule, Object, Kernel, BasicObject]\np HelloClass.superclass\t\t\t\t\t#=> Object\n```\n\n*Kenerl*是Ruby内部的一个核心模块，Ruby程序运行时所需的共通函数都封装在此模块中。\n\n单一继承的优点就是简单，不会因为过多的继承而导致类之间的关系变得复杂。所以我们需要灵活使用单一继承和Mix-in。\n\n#### Mix-in查找方法的规则\n- 优先使用原来中定义的同名方法。\n- 在同一个类中包含多个模块时，优先使用最后一个包含的模块。\n- 嵌套include时，查找顺序也是线性的。\n- 相同的模块被包含两次也上的，第2次以后的会被省略。\n\n#### Object#extend方法\n利用Object#extend方法可以使单例类包含模块，并把模块的功能扩展到对象中。\n\n``` ruby\nmodule Welcome\n\tdef welcome(name)\n\t\t\"#{self} Welcome #{name}\"\n\tend\nend\n\nstr = \"World\"\nstr.extend(Welcome)\t\t\t\t\t\t#=> 将Welcome模块扩展到str对象上\nputs str.welcome(\"Ruby\")\t\t\t\t#=> World Welcome Ruby\n```\n\n**include**可以帮助我们突破继承的限制，通过模块扩展类的功能；而**extend**则可以帮助我们跨过类，直接通过模块扩展对象的功能.\n\n所有类本身都是Class类的对象，类方法就是类对象的实例方法。可以把类方法理解为下:\n\n- **Class**类的实例方法\n- 类对象的单例方法\n\n使用**extend**方法为类对象追加类方法，使用**include**方法追加实例方法。\n\n``` ruby\nmodule ClassMethod\n\tdef class_method\n\t\t\"class method\"\n\tend\nend\n\nmodule InstanceMethod\n\tdef instance_method\n\t\t\"instance method\"\n\tend\nend\n\nclass MyClass\n\textend ClassMethod \t\t\t\t\t#使用extend方法定义类方法\n\tinclude InstanceMethod \t\t\t\t#使用include定义实例方法\nend\n\np MyClass.class_method\t\t\t\t\t#=> \"class method\"\np MyClass.new.instance_method\t\t\t#=> \"instance method\"\n```","source":"_posts/2015-09-01-ruby-practice-7.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(7)\"\ndate: 2015-09-01 09:06:53 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n### 模块\nRuby中的类是表现事物的属性和行为，那么模块呢？，在Ruby中*模块*表现的只是事物的行为。\n\n模块与类的区别于下：\n\n- 模块不能拥有实例\n- 模块不能被继承\n\n如何访问模块内的方法？有两种方式可以访问\n\n1.使用**模块名.方法名**的形式来直接调用模块中定义的方法。\n\n``` ruby\nMath.sqrt(4)\t\t\t#=> 2.0\n```\n<!-- more -->\n2.通过**include 模块名**的形式预先将模块引入到当前的命名空间，然后就可直接访问模块内的方法和常量。\n\n``` ruby\ninclude Math\nsqrt(4)\t\t\t\t#=> 2.0\n```\n\n第二种方式也就是**Mix-in**扩展类的功能，将模块混合到类中。在定义类时使用**include**引入指定的模块后，此时该类就可以使用模块里的所有方法和常量，从而增加了该类的功能。\n\n**Mix-in**可以灵活地解决以下问题：\n\n- 虽然两个类拥有相似的功能，但是不希望把他们作为相同的种类（Class）来考虑的时候，此时可将相似功能封装为模块供这两个类使用\n- Ruby不支持父类的多重继承，因此无法对已经继承的类添加共同的功能的时候\n\n``` ruby\nclass Calculator\n\tinclude Math\n\tdef my_sqrt(a, b)\n\t\tsqrt(a) + sqrt(b)\t\t\t#=> 调用Math模块中得sqrt方法\n\tend\n\t\n\t@@PI = PI\nend\n\ncal = Calculator.new\ncal.my_sqrt(1, 4)\t\t\t\t\t#=> 3.0\nCalculator::PI\t\t\t\t\t\t#=> 3.141592653589793\n```\n\n#### 创建模块\n使用**module**关键来创建模块，模块名的首字母必须大写\n\n\tmodule 模块名\n\t\t模块定义\n\tend\n\n``` ruby\nmodule HelloModule\n\tVersion = \"1.0\"\n\n\tdef say_hello(name)\n\t\tputs \"Hello #{name}\"\n\tend\n\t\n\tmodule_function :say_hello\nend\n\np HelloModule::Version\t\t\t\t\t#=> \"1.0\"\nHelloModule.say_hello(\"Ruby\")\t\t\t#=> Hello Ruby\n\ninclude HelloModule\t\t\t\t\t\t#=> 包含模块\nVersion\t\t\t\t\t\t\t\t\t#=> \"1.0\"\nsay_hello(\"Ruby\")\t\t\t\t\t\t#=> Hello Ruby\n```\n在上面代码中，我们可以看到**module_function**方法，此方法主要用于将需要把模块函数公开给外部使用，其参数是表示方法方法名的符号，可以跟多个参数。\n\n*注：不建议在定义为模块函数的方法中使用self*\n\n#### Mix-in\n前面提到的，在类中使用*include*引入模块，此时类的功能将得到增强。\n\n如果想知道类是否包含某个模块，可以使用**include？**方法，如之前的Calculator类中。\n\n``` ruby\nCalculator.include?(Math)\t\t\t\t#=> true\n```\n\nRuby中类的实例在调用方法时的顺序为，该类>包含的模块>该类的父类等这个顺序查找该方法。\n\n``` ruby\nmodule HelloModule\n\tVersion = \"1.0\"\n\n\tdef say_hello(name)\n\t\tputs \"Hello #{name}\"\n\tend\nend\n\nclass HelloClass\n\tinclude HelloModule\nend\n\nhello = HelloClass.new\nhello.say_hello(\"Ruby\")\t\t\t\t\t#=> Hello Ruby\n```\n以上代码中调用的是module中的方法。\n\n用*ancestors*方法和*superclass*方法调查类的继承关系。*superclass*方法可直接返回类的父类\n\n``` ruby\np HelloClass.ancestors\t\t\t\t\t#=> [HelloClass, HelloModule, Object, Kernel, BasicObject]\np HelloClass.superclass\t\t\t\t\t#=> Object\n```\n\n*Kenerl*是Ruby内部的一个核心模块，Ruby程序运行时所需的共通函数都封装在此模块中。\n\n单一继承的优点就是简单，不会因为过多的继承而导致类之间的关系变得复杂。所以我们需要灵活使用单一继承和Mix-in。\n\n#### Mix-in查找方法的规则\n- 优先使用原来中定义的同名方法。\n- 在同一个类中包含多个模块时，优先使用最后一个包含的模块。\n- 嵌套include时，查找顺序也是线性的。\n- 相同的模块被包含两次也上的，第2次以后的会被省略。\n\n#### Object#extend方法\n利用Object#extend方法可以使单例类包含模块，并把模块的功能扩展到对象中。\n\n``` ruby\nmodule Welcome\n\tdef welcome(name)\n\t\t\"#{self} Welcome #{name}\"\n\tend\nend\n\nstr = \"World\"\nstr.extend(Welcome)\t\t\t\t\t\t#=> 将Welcome模块扩展到str对象上\nputs str.welcome(\"Ruby\")\t\t\t\t#=> World Welcome Ruby\n```\n\n**include**可以帮助我们突破继承的限制，通过模块扩展类的功能；而**extend**则可以帮助我们跨过类，直接通过模块扩展对象的功能.\n\n所有类本身都是Class类的对象，类方法就是类对象的实例方法。可以把类方法理解为下:\n\n- **Class**类的实例方法\n- 类对象的单例方法\n\n使用**extend**方法为类对象追加类方法，使用**include**方法追加实例方法。\n\n``` ruby\nmodule ClassMethod\n\tdef class_method\n\t\t\"class method\"\n\tend\nend\n\nmodule InstanceMethod\n\tdef instance_method\n\t\t\"instance method\"\n\tend\nend\n\nclass MyClass\n\textend ClassMethod \t\t\t\t\t#使用extend方法定义类方法\n\tinclude InstanceMethod \t\t\t\t#使用include定义实例方法\nend\n\np MyClass.class_method\t\t\t\t\t#=> \"class method\"\np MyClass.new.instance_method\t\t\t#=> \"instance method\"\n```","slug":"2015-09-01-ruby-practice-7","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4ov003zazv59iwedncz","layout":"post","photos":[],"link":"","content":"<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>Ruby中的类是表现事物的属性和行为，那么模块呢？，在Ruby中<em>模块</em>表现的只是事物的行为。</p>\n<p>模块与类的区别于下：</p>\n<ul>\n<li>模块不能拥有实例</li>\n<li>模块不能被继承</li>\n</ul>\n<p>如何访问模块内的方法？有两种方式可以访问</p>\n<p>1.使用<strong>模块名.方法名</strong>的形式来直接调用模块中定义的方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.sqrt(<span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 2.0</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>2.通过<strong>include 模块名</strong>的形式预先将模块引入到当前的命名空间，然后就可直接访问模块内的方法和常量。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"title class_\">Math</span></span><br><span class=\"line\">sqrt(<span class=\"number\">4</span>)\t\t\t\t<span class=\"comment\">#=&gt; 2.0</span></span><br></pre></td></tr></table></figure>\n\n<p>第二种方式也就是<strong>Mix-in</strong>扩展类的功能，将模块混合到类中。在定义类时使用<strong>include</strong>引入指定的模块后，此时该类就可以使用模块里的所有方法和常量，从而增加了该类的功能。</p>\n<p><strong>Mix-in</strong>可以灵活地解决以下问题：</p>\n<ul>\n<li>虽然两个类拥有相似的功能，但是不希望把他们作为相同的种类（Class）来考虑的时候，此时可将相似功能封装为模块供这两个类使用</li>\n<li>Ruby不支持父类的多重继承，因此无法对已经继承的类添加共同的功能的时候</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Calculator</span></span><br><span class=\"line\">\t<span class=\"keyword\">include</span> <span class=\"title class_\">Math</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">my_sqrt</span>(<span class=\"params\">a, b</span>)</span><br><span class=\"line\">\t\tsqrt(a) + sqrt(b)\t\t\t<span class=\"comment\">#=&gt; 调用Math模块中得sqrt方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"variable\">@@PI</span> = <span class=\"variable constant_\">PI</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">cal = <span class=\"title class_\">Calculator</span>.new</span><br><span class=\"line\">cal.my_sqrt(<span class=\"number\">1</span>, <span class=\"number\">4</span>)\t\t\t\t\t<span class=\"comment\">#=&gt; 3.0</span></span><br><span class=\"line\"><span class=\"title class_\">Calculator</span><span class=\"symbol\">:</span><span class=\"symbol\">:PI</span>\t\t\t\t\t\t<span class=\"comment\">#=&gt; 3.141592653589793</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h4><p>使用<strong>module</strong>关键来创建模块，模块名的首字母必须大写</p>\n<pre><code>module 模块名\n    模块定义\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">HelloModule</span></span><br><span class=\"line\">\t<span class=\"title class_\">Version</span> = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">module_function</span> <span class=\"symbol\">:say_hello</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p <span class=\"title class_\">HelloModule</span><span class=\"symbol\">:</span><span class=\"symbol\">:Version</span>\t\t\t\t\t<span class=\"comment\">#=&gt; &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">HelloModule</span>.say_hello(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"title class_\">HelloModule</span>\t\t\t\t\t\t<span class=\"comment\">#=&gt; 包含模块</span></span><br><span class=\"line\"><span class=\"title class_\">Version</span>\t\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; &quot;1.0&quot;</span></span><br><span class=\"line\">say_hello(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br></pre></td></tr></table></figure>\n<p>在上面代码中，我们可以看到<strong>module_function</strong>方法，此方法主要用于将需要把模块函数公开给外部使用，其参数是表示方法方法名的符号，可以跟多个参数。</p>\n<p><em>注：不建议在定义为模块函数的方法中使用self</em></p>\n<h4 id=\"Mix-in\"><a href=\"#Mix-in\" class=\"headerlink\" title=\"Mix-in\"></a>Mix-in</h4><p>前面提到的，在类中使用<em>include</em>引入模块，此时类的功能将得到增强。</p>\n<p>如果想知道类是否包含某个模块，可以使用<strong>include？</strong>方法，如之前的Calculator类中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Calculator</span>.<span class=\"keyword\">include</span>?(<span class=\"title class_\">Math</span>)\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby中类的实例在调用方法时的顺序为，该类&gt;包含的模块&gt;该类的父类等这个顺序查找该方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">HelloModule</span></span><br><span class=\"line\">\t<span class=\"title class_\">Version</span> = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloClass</span></span><br><span class=\"line\">\t<span class=\"keyword\">include</span> <span class=\"title class_\">HelloModule</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello = <span class=\"title class_\">HelloClass</span>.new</span><br><span class=\"line\">hello.say_hello(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br></pre></td></tr></table></figure>\n<p>以上代码中调用的是module中的方法。</p>\n<p>用<em>ancestors</em>方法和<em>superclass</em>方法调查类的继承关系。<em>superclass</em>方法可直接返回类的父类</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"title class_\">HelloClass</span>.ancestors\t\t\t\t\t<span class=\"comment\">#=&gt; [HelloClass, HelloModule, Object, Kernel, BasicObject]</span></span><br><span class=\"line\">p <span class=\"title class_\">HelloClass</span>.superclass\t\t\t\t\t<span class=\"comment\">#=&gt; Object</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Kenerl</em>是Ruby内部的一个核心模块，Ruby程序运行时所需的共通函数都封装在此模块中。</p>\n<p>单一继承的优点就是简单，不会因为过多的继承而导致类之间的关系变得复杂。所以我们需要灵活使用单一继承和Mix-in。</p>\n<h4 id=\"Mix-in查找方法的规则\"><a href=\"#Mix-in查找方法的规则\" class=\"headerlink\" title=\"Mix-in查找方法的规则\"></a>Mix-in查找方法的规则</h4><ul>\n<li>优先使用原来中定义的同名方法。</li>\n<li>在同一个类中包含多个模块时，优先使用最后一个包含的模块。</li>\n<li>嵌套include时，查找顺序也是线性的。</li>\n<li>相同的模块被包含两次也上的，第2次以后的会被省略。</li>\n</ul>\n<h4 id=\"Object-extend方法\"><a href=\"#Object-extend方法\" class=\"headerlink\" title=\"Object#extend方法\"></a>Object#extend方法</h4><p>利用Object#extend方法可以使单例类包含模块，并把模块的功能扩展到对象中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">Welcome</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">welcome</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;<span class=\"subst\">#&#123;<span class=\"variable language_\">self</span>&#125;</span> Welcome <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;World&quot;</span></span><br><span class=\"line\">str.<span class=\"keyword\">extend</span>(<span class=\"title class_\">Welcome</span>)\t\t\t\t\t\t<span class=\"comment\">#=&gt; 将Welcome模块扩展到str对象上</span></span><br><span class=\"line\">puts str.welcome(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t\t<span class=\"comment\">#=&gt; World Welcome Ruby</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>include</strong>可以帮助我们突破继承的限制，通过模块扩展类的功能；而<strong>extend</strong>则可以帮助我们跨过类，直接通过模块扩展对象的功能.</p>\n<p>所有类本身都是Class类的对象，类方法就是类对象的实例方法。可以把类方法理解为下:</p>\n<ul>\n<li><strong>Class</strong>类的实例方法</li>\n<li>类对象的单例方法</li>\n</ul>\n<p>使用<strong>extend</strong>方法为类对象追加类方法，使用<strong>include</strong>方法追加实例方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">ClassMethod</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">class_method</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;class method&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">InstanceMethod</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">instance_method</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;instance method&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span></span><br><span class=\"line\">\t<span class=\"keyword\">extend</span> <span class=\"title class_\">ClassMethod</span> \t\t\t\t\t<span class=\"comment\">#使用extend方法定义类方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">include</span> <span class=\"title class_\">InstanceMethod</span> \t\t\t\t<span class=\"comment\">#使用include定义实例方法</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p <span class=\"title class_\">MyClass</span>.class_method\t\t\t\t\t<span class=\"comment\">#=&gt; &quot;class method&quot;</span></span><br><span class=\"line\">p <span class=\"title class_\">MyClass</span>.new.instance_method\t\t\t<span class=\"comment\">#=&gt; &quot;instance method&quot;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>Ruby中的类是表现事物的属性和行为，那么模块呢？，在Ruby中<em>模块</em>表现的只是事物的行为。</p>\n<p>模块与类的区别于下：</p>\n<ul>\n<li>模块不能拥有实例</li>\n<li>模块不能被继承</li>\n</ul>\n<p>如何访问模块内的方法？有两种方式可以访问</p>\n<p>1.使用<strong>模块名.方法名</strong>的形式来直接调用模块中定义的方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.sqrt(<span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 2.0</span></span><br></pre></td></tr></table></figure>","more":"<p>2.通过<strong>include 模块名</strong>的形式预先将模块引入到当前的命名空间，然后就可直接访问模块内的方法和常量。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"title class_\">Math</span></span><br><span class=\"line\">sqrt(<span class=\"number\">4</span>)\t\t\t\t<span class=\"comment\">#=&gt; 2.0</span></span><br></pre></td></tr></table></figure>\n\n<p>第二种方式也就是<strong>Mix-in</strong>扩展类的功能，将模块混合到类中。在定义类时使用<strong>include</strong>引入指定的模块后，此时该类就可以使用模块里的所有方法和常量，从而增加了该类的功能。</p>\n<p><strong>Mix-in</strong>可以灵活地解决以下问题：</p>\n<ul>\n<li>虽然两个类拥有相似的功能，但是不希望把他们作为相同的种类（Class）来考虑的时候，此时可将相似功能封装为模块供这两个类使用</li>\n<li>Ruby不支持父类的多重继承，因此无法对已经继承的类添加共同的功能的时候</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Calculator</span></span><br><span class=\"line\">\t<span class=\"keyword\">include</span> <span class=\"title class_\">Math</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">my_sqrt</span>(<span class=\"params\">a, b</span>)</span><br><span class=\"line\">\t\tsqrt(a) + sqrt(b)\t\t\t<span class=\"comment\">#=&gt; 调用Math模块中得sqrt方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"variable\">@@PI</span> = <span class=\"variable constant_\">PI</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">cal = <span class=\"title class_\">Calculator</span>.new</span><br><span class=\"line\">cal.my_sqrt(<span class=\"number\">1</span>, <span class=\"number\">4</span>)\t\t\t\t\t<span class=\"comment\">#=&gt; 3.0</span></span><br><span class=\"line\"><span class=\"title class_\">Calculator</span><span class=\"symbol\">:</span><span class=\"symbol\">:PI</span>\t\t\t\t\t\t<span class=\"comment\">#=&gt; 3.141592653589793</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h4><p>使用<strong>module</strong>关键来创建模块，模块名的首字母必须大写</p>\n<pre><code>module 模块名\n    模块定义\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">HelloModule</span></span><br><span class=\"line\">\t<span class=\"title class_\">Version</span> = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">module_function</span> <span class=\"symbol\">:say_hello</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p <span class=\"title class_\">HelloModule</span><span class=\"symbol\">:</span><span class=\"symbol\">:Version</span>\t\t\t\t\t<span class=\"comment\">#=&gt; &quot;1.0&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">HelloModule</span>.say_hello(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"title class_\">HelloModule</span>\t\t\t\t\t\t<span class=\"comment\">#=&gt; 包含模块</span></span><br><span class=\"line\"><span class=\"title class_\">Version</span>\t\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; &quot;1.0&quot;</span></span><br><span class=\"line\">say_hello(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br></pre></td></tr></table></figure>\n<p>在上面代码中，我们可以看到<strong>module_function</strong>方法，此方法主要用于将需要把模块函数公开给外部使用，其参数是表示方法方法名的符号，可以跟多个参数。</p>\n<p><em>注：不建议在定义为模块函数的方法中使用self</em></p>\n<h4 id=\"Mix-in\"><a href=\"#Mix-in\" class=\"headerlink\" title=\"Mix-in\"></a>Mix-in</h4><p>前面提到的，在类中使用<em>include</em>引入模块，此时类的功能将得到增强。</p>\n<p>如果想知道类是否包含某个模块，可以使用<strong>include？</strong>方法，如之前的Calculator类中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Calculator</span>.<span class=\"keyword\">include</span>?(<span class=\"title class_\">Math</span>)\t\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby中类的实例在调用方法时的顺序为，该类&gt;包含的模块&gt;该类的父类等这个顺序查找该方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">HelloModule</span></span><br><span class=\"line\">\t<span class=\"title class_\">Version</span> = <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">say_hello</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloClass</span></span><br><span class=\"line\">\t<span class=\"keyword\">include</span> <span class=\"title class_\">HelloModule</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello = <span class=\"title class_\">HelloClass</span>.new</span><br><span class=\"line\">hello.say_hello(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t\t\t<span class=\"comment\">#=&gt; Hello Ruby</span></span><br></pre></td></tr></table></figure>\n<p>以上代码中调用的是module中的方法。</p>\n<p>用<em>ancestors</em>方法和<em>superclass</em>方法调查类的继承关系。<em>superclass</em>方法可直接返回类的父类</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"title class_\">HelloClass</span>.ancestors\t\t\t\t\t<span class=\"comment\">#=&gt; [HelloClass, HelloModule, Object, Kernel, BasicObject]</span></span><br><span class=\"line\">p <span class=\"title class_\">HelloClass</span>.superclass\t\t\t\t\t<span class=\"comment\">#=&gt; Object</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Kenerl</em>是Ruby内部的一个核心模块，Ruby程序运行时所需的共通函数都封装在此模块中。</p>\n<p>单一继承的优点就是简单，不会因为过多的继承而导致类之间的关系变得复杂。所以我们需要灵活使用单一继承和Mix-in。</p>\n<h4 id=\"Mix-in查找方法的规则\"><a href=\"#Mix-in查找方法的规则\" class=\"headerlink\" title=\"Mix-in查找方法的规则\"></a>Mix-in查找方法的规则</h4><ul>\n<li>优先使用原来中定义的同名方法。</li>\n<li>在同一个类中包含多个模块时，优先使用最后一个包含的模块。</li>\n<li>嵌套include时，查找顺序也是线性的。</li>\n<li>相同的模块被包含两次也上的，第2次以后的会被省略。</li>\n</ul>\n<h4 id=\"Object-extend方法\"><a href=\"#Object-extend方法\" class=\"headerlink\" title=\"Object#extend方法\"></a>Object#extend方法</h4><p>利用Object#extend方法可以使单例类包含模块，并把模块的功能扩展到对象中。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">Welcome</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">welcome</span>(<span class=\"params\">name</span>)</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;<span class=\"subst\">#&#123;<span class=\"variable language_\">self</span>&#125;</span> Welcome <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;World&quot;</span></span><br><span class=\"line\">str.<span class=\"keyword\">extend</span>(<span class=\"title class_\">Welcome</span>)\t\t\t\t\t\t<span class=\"comment\">#=&gt; 将Welcome模块扩展到str对象上</span></span><br><span class=\"line\">puts str.welcome(<span class=\"string\">&quot;Ruby&quot;</span>)\t\t\t\t<span class=\"comment\">#=&gt; World Welcome Ruby</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>include</strong>可以帮助我们突破继承的限制，通过模块扩展类的功能；而<strong>extend</strong>则可以帮助我们跨过类，直接通过模块扩展对象的功能.</p>\n<p>所有类本身都是Class类的对象，类方法就是类对象的实例方法。可以把类方法理解为下:</p>\n<ul>\n<li><strong>Class</strong>类的实例方法</li>\n<li>类对象的单例方法</li>\n</ul>\n<p>使用<strong>extend</strong>方法为类对象追加类方法，使用<strong>include</strong>方法追加实例方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">ClassMethod</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">class_method</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;class method&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">InstanceMethod</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">instance_method</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;instance method&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span></span><br><span class=\"line\">\t<span class=\"keyword\">extend</span> <span class=\"title class_\">ClassMethod</span> \t\t\t\t\t<span class=\"comment\">#使用extend方法定义类方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">include</span> <span class=\"title class_\">InstanceMethod</span> \t\t\t\t<span class=\"comment\">#使用include定义实例方法</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p <span class=\"title class_\">MyClass</span>.class_method\t\t\t\t\t<span class=\"comment\">#=&gt; &quot;class method&quot;</span></span><br><span class=\"line\">p <span class=\"title class_\">MyClass</span>.new.instance_method\t\t\t<span class=\"comment\">#=&gt; &quot;instance method&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(8)","date":"2015-09-06T12:36:07.000Z","comments":1,"_content":"\n### 运算符\n\n以下两种运算符是等价的, op即代表操作运算符\n\n\tvalue1 op= value2\n\tvalue1 = value1 op value2\n\n\n利用运算符**||**的特性，可以简化相关的赋值代码，如下是等价的\n``` ruby 赋值方式1\nname = \"Ruby\"\nif var\t\t\t\t#当var不是nil或false时\n\tname = var\nend\n```\n\n``` ruby 赋值方式2\nname = var || \"Ruby\"\n```\n<!-- more -->\n而利用**&&**运算符，可以避免不必要要得程序错误\n\n``` ruby 隐藏的错误\nname = ary[0]          #如果ary为nil，则此时将引发程序错误\n```\n\n``` ruby 使用&&避免错误\nname = ary && ary[0]\t#避免当ary为nil时，读取ary[0]时的错误\n```\n使用**&&**可以在确定对象存在后再调用方法。而且代码更加简洁。\n\n#### 范围运算符\n相比其他的语言如Java等，范围运算符算是一个比较特殊的运算符，范围运算符有**..**和**...**两种，其区别在于如下\n\n- **x..y**的范围是从x到y\n- **x...y**的范围是从x到y得前一个元素\n\n``` ruby\n(1..5).to_a\t\t\t\t#=> [1, 2, 3, 4, 5]\n(\"a\"..\"d\").to_a\t\t\t#=> [\"a\", \"b\", \"c\", \"d\"]\n\n(1...5).to_a\t\t\t\t#=> [1, 2, 3, 4]\n(\"a\"...\"d\").to_a\t\t\t#=> [\"a\", \"b\", \"c\"]\n```\n\nRuby中有范围对象(Range)来表示范围对象，以下两个写法是等价的\n\n``` ruby\nary = Range.new(1, 5)\t#=> 1..5\nary.class\t\t\t\t\t#=> Range\n\n\nary = 1..5\t\t\t\t#=> 1..5\nary.class\t\t\t\t\t#=> Range\n```\n在Range对象内部，可以使用**succ**方法根据起点值逐个生成下一值\n\n``` ruby\na = 1\na = a.succ\t\t\t\t\t#=> 2\na = a.succ\t\t\t\t\t#=> 3\na.succ.succ\t\t\t\t\t#=> 5\n```\n\n#### 运算符重定义\n在Ruby中有以下运算符不能重定义\n::, &&, ||, .., ..., ?:, not, =, and\n\n*二元运算符重定义*,如加号+、减号-\n\n``` ruby\nclass Point\n\tattr_reader :x, :y\n\n\tdef initialize(x, y)\n\t\t@x, @y = x, y\n\tend\n\n\tdef +(other)\n\t\tself.class.new(x + other.x, y + other.y)\n\tend\n\n\tdef -(other)\n\t\tself.class.new(x - other.x, y - other.y)\n\tend\n\n\tdef display\n\t\t\"(#{x}, #{y})\"\n\tend\nend\n\np1 = Point.new(1, 2)\np2 = Point.new(3, 4)\np = p1 + p2\nputs p.display\t\t\t\t\t#=> (4, 6)\n\np = p2 - p1\nputs p.display\t\t\t\t\t#=> (2, 2)\n```\n\n*一元运算符*，如正号+，负号-等，其重定义与二元运算符不同。可定义的一元运算符有**+**, **-**, **~**, **!**4个。分别以+@， -@， ~@， !@为方法名进行方法定义。而且一元运算符都是没有参数的。\n\n``` ruby\nclass Point\n\tattr_reader :x, :y\n\n\tdef initialize(x, y)\n\t\t@x, @y = x, y\n\tend\n\n\tdef +@\n\t\tdup\n\tend\n\n\tdef -@\n\t\tself.class.new(-x ,-y)\n\tend\n\n\tdef ~@\n\t\tself.class.new(-y, x)\n\tend\n\n\tdef display\n\t\t\"(#{x}, #{y})\"\n\tend\nend\n\np1 = Point.new(1, 2)\nputs (-p1).display\t\t\t\t#=> (-1, -2)\nputs (+p1).display\t\t\t\t#=> (1, 2)\n```\n\n#### 下标方法\n数组、散列中的*obj[i]*以及*obj[i]=x*这样的方法，称为下标方法。定义下标方法时的方法名分别为**[]**和**[]=**.\n\n``` ruby\nclass Point\n\tattr_reader :x, :y\n\n\tdef initialize(x, y)\n\t\t@x, @y = x, y\n\tend\n\n\tdef [](index)\n\t\tcase index\n\t\twhen 0\n\t\t\tx\n\t\twhen 1\n\t\t\ty\n\t\telse\n\t\t\traise ArgumentError, \"out of range (#{index})\"\n\t\tend\n\tend\n\n\tdef []=(index, val)\n\t\tcase index\n\t\twhen 0\n\t\t\tself.x = val\n\t\twhen 1\n\t\t\tself.y = val\n\t\telse\n\t\t\traise ArgumentError, \"out of range (#{index})\"\n\t\tend\n\tend\n\n\n\tdef display\n\t\t\"(#{x}, #{y})\"\n\tend\nend\n```","source":"_posts/2015-09-06-ruby-practice-8.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(8)\"\ndate: 2015-09-06 20:36:07 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n### 运算符\n\n以下两种运算符是等价的, op即代表操作运算符\n\n\tvalue1 op= value2\n\tvalue1 = value1 op value2\n\n\n利用运算符**||**的特性，可以简化相关的赋值代码，如下是等价的\n``` ruby 赋值方式1\nname = \"Ruby\"\nif var\t\t\t\t#当var不是nil或false时\n\tname = var\nend\n```\n\n``` ruby 赋值方式2\nname = var || \"Ruby\"\n```\n<!-- more -->\n而利用**&&**运算符，可以避免不必要要得程序错误\n\n``` ruby 隐藏的错误\nname = ary[0]          #如果ary为nil，则此时将引发程序错误\n```\n\n``` ruby 使用&&避免错误\nname = ary && ary[0]\t#避免当ary为nil时，读取ary[0]时的错误\n```\n使用**&&**可以在确定对象存在后再调用方法。而且代码更加简洁。\n\n#### 范围运算符\n相比其他的语言如Java等，范围运算符算是一个比较特殊的运算符，范围运算符有**..**和**...**两种，其区别在于如下\n\n- **x..y**的范围是从x到y\n- **x...y**的范围是从x到y得前一个元素\n\n``` ruby\n(1..5).to_a\t\t\t\t#=> [1, 2, 3, 4, 5]\n(\"a\"..\"d\").to_a\t\t\t#=> [\"a\", \"b\", \"c\", \"d\"]\n\n(1...5).to_a\t\t\t\t#=> [1, 2, 3, 4]\n(\"a\"...\"d\").to_a\t\t\t#=> [\"a\", \"b\", \"c\"]\n```\n\nRuby中有范围对象(Range)来表示范围对象，以下两个写法是等价的\n\n``` ruby\nary = Range.new(1, 5)\t#=> 1..5\nary.class\t\t\t\t\t#=> Range\n\n\nary = 1..5\t\t\t\t#=> 1..5\nary.class\t\t\t\t\t#=> Range\n```\n在Range对象内部，可以使用**succ**方法根据起点值逐个生成下一值\n\n``` ruby\na = 1\na = a.succ\t\t\t\t\t#=> 2\na = a.succ\t\t\t\t\t#=> 3\na.succ.succ\t\t\t\t\t#=> 5\n```\n\n#### 运算符重定义\n在Ruby中有以下运算符不能重定义\n::, &&, ||, .., ..., ?:, not, =, and\n\n*二元运算符重定义*,如加号+、减号-\n\n``` ruby\nclass Point\n\tattr_reader :x, :y\n\n\tdef initialize(x, y)\n\t\t@x, @y = x, y\n\tend\n\n\tdef +(other)\n\t\tself.class.new(x + other.x, y + other.y)\n\tend\n\n\tdef -(other)\n\t\tself.class.new(x - other.x, y - other.y)\n\tend\n\n\tdef display\n\t\t\"(#{x}, #{y})\"\n\tend\nend\n\np1 = Point.new(1, 2)\np2 = Point.new(3, 4)\np = p1 + p2\nputs p.display\t\t\t\t\t#=> (4, 6)\n\np = p2 - p1\nputs p.display\t\t\t\t\t#=> (2, 2)\n```\n\n*一元运算符*，如正号+，负号-等，其重定义与二元运算符不同。可定义的一元运算符有**+**, **-**, **~**, **!**4个。分别以+@， -@， ~@， !@为方法名进行方法定义。而且一元运算符都是没有参数的。\n\n``` ruby\nclass Point\n\tattr_reader :x, :y\n\n\tdef initialize(x, y)\n\t\t@x, @y = x, y\n\tend\n\n\tdef +@\n\t\tdup\n\tend\n\n\tdef -@\n\t\tself.class.new(-x ,-y)\n\tend\n\n\tdef ~@\n\t\tself.class.new(-y, x)\n\tend\n\n\tdef display\n\t\t\"(#{x}, #{y})\"\n\tend\nend\n\np1 = Point.new(1, 2)\nputs (-p1).display\t\t\t\t#=> (-1, -2)\nputs (+p1).display\t\t\t\t#=> (1, 2)\n```\n\n#### 下标方法\n数组、散列中的*obj[i]*以及*obj[i]=x*这样的方法，称为下标方法。定义下标方法时的方法名分别为**[]**和**[]=**.\n\n``` ruby\nclass Point\n\tattr_reader :x, :y\n\n\tdef initialize(x, y)\n\t\t@x, @y = x, y\n\tend\n\n\tdef [](index)\n\t\tcase index\n\t\twhen 0\n\t\t\tx\n\t\twhen 1\n\t\t\ty\n\t\telse\n\t\t\traise ArgumentError, \"out of range (#{index})\"\n\t\tend\n\tend\n\n\tdef []=(index, val)\n\t\tcase index\n\t\twhen 0\n\t\t\tself.x = val\n\t\twhen 1\n\t\t\tself.y = val\n\t\telse\n\t\t\traise ArgumentError, \"out of range (#{index})\"\n\t\tend\n\tend\n\n\n\tdef display\n\t\t\"(#{x}, #{y})\"\n\tend\nend\n```","slug":"2015-09-06-ruby-practice-8","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4ow0042azv55atddbos","layout":"post","photos":[],"link":"","content":"<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>以下两种运算符是等价的, op即代表操作运算符</p>\n<pre><code>value1 op= value2\nvalue1 = value1 op value2\n</code></pre>\n<p>利用运算符**||**的特性，可以简化相关的赋值代码，如下是等价的</p>\n<figure class=\"highlight ruby\"><figcaption><span>赋值方式1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;Ruby&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> var\t\t\t\t<span class=\"comment\">#当var不是nil或false时</span></span><br><span class=\"line\">\tname = var</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>赋值方式2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = var |<span class=\"params\"></span>| <span class=\"string\">&quot;Ruby&quot;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>而利用**&amp;&amp;**运算符，可以避免不必要要得程序错误</p>\n<figure class=\"highlight ruby\"><figcaption><span>隐藏的错误</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = ary[<span class=\"number\">0</span>]          <span class=\"comment\">#如果ary为nil，则此时将引发程序错误</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>使用&&避免错误</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = ary &amp;&amp; ary[<span class=\"number\">0</span>]\t<span class=\"comment\">#避免当ary为nil时，读取ary[0]时的错误</span></span><br></pre></td></tr></table></figure>\n<p>使用**&amp;&amp;**可以在确定对象存在后再调用方法。而且代码更加简洁。</p>\n<h4 id=\"范围运算符\"><a href=\"#范围运算符\" class=\"headerlink\" title=\"范围运算符\"></a>范围运算符</h4><p>相比其他的语言如Java等，范围运算符算是一个比较特殊的运算符，范围运算符有**..<strong>和</strong>…**两种，其区别在于如下</p>\n<ul>\n<li><strong>x..y</strong>的范围是从x到y</li>\n<li><strong>x…y</strong>的范围是从x到y得前一个元素</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>..<span class=\"number\">5</span>).to_a\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4, 5]</span></span><br><span class=\"line\">(<span class=\"string\">&quot;a&quot;</span>..<span class=\"string\">&quot;d&quot;</span>).to_a\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">5</span>).to_a\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4]</span></span><br><span class=\"line\">(<span class=\"string\">&quot;a&quot;</span>...<span class=\"string\">&quot;d&quot;</span>).to_a\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby中有范围对象(Range)来表示范围对象，以下两个写法是等价的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = <span class=\"title class_\">Range</span>.new(<span class=\"number\">1</span>, <span class=\"number\">5</span>)\t<span class=\"comment\">#=&gt; 1..5</span></span><br><span class=\"line\">ary.<span class=\"keyword\">class</span>\t\t\t\t\t<span class=\"comment\">#=&gt; Range</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ary = <span class=\"number\">1</span>..<span class=\"number\">5</span>\t\t\t\t<span class=\"comment\">#=&gt; 1..5</span></span><br><span class=\"line\">ary.<span class=\"keyword\">class</span>\t\t\t\t\t<span class=\"comment\">#=&gt; Range</span></span><br></pre></td></tr></table></figure>\n<p>在Range对象内部，可以使用<strong>succ</strong>方法根据起点值逐个生成下一值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">a = a.succ\t\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">a = a.succ\t\t\t\t\t<span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\">a.succ.succ\t\t\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算符重定义\"><a href=\"#运算符重定义\" class=\"headerlink\" title=\"运算符重定义\"></a>运算符重定义</h4><p>在Ruby中有以下运算符不能重定义<br>::, &amp;&amp;, ||, .., …, ?:, not, &#x3D;, and</p>\n<p><em>二元运算符重定义</em>,如加号+、减号-</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_reader</span> <span class=\"symbol\">:x</span>, <span class=\"symbol\">:y</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">x, y</span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span> = x, y</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">+</span>(<span class=\"params\">other</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(x + other.x, y + other.y)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">-</span>(<span class=\"params\">other</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(x - other.x, y - other.y)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">display</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;(<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span>)&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1 = <span class=\"title class_\">Point</span>.new(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">p2 = <span class=\"title class_\">Point</span>.new(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">p = p1 + p2</span><br><span class=\"line\">puts p.display\t\t\t\t\t<span class=\"comment\">#=&gt; (4, 6)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = p2 - p1</span><br><span class=\"line\">puts p.display\t\t\t\t\t<span class=\"comment\">#=&gt; (2, 2)</span></span><br></pre></td></tr></table></figure>\n\n<p><em>一元运算符</em>，如正号+，负号-等，其重定义与二元运算符不同。可定义的一元运算符有**+**, <strong>-</strong>, <strong>~</strong>, **!**4个。分别以+@， -@， ~@， !@为方法名进行方法定义。而且一元运算符都是没有参数的。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_reader</span> <span class=\"symbol\">:x</span>, <span class=\"symbol\">:y</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">x, y</span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span> = x, y</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">+@</span></span><br><span class=\"line\">\t\tdup</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">-@</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(-x ,-y)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">~@</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(-y, x)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">display</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;(<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span>)&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1 = <span class=\"title class_\">Point</span>.new(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">puts (-p1).display\t\t\t\t<span class=\"comment\">#=&gt; (-1, -2)</span></span><br><span class=\"line\">puts (+p1).display\t\t\t\t<span class=\"comment\">#=&gt; (1, 2)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下标方法\"><a href=\"#下标方法\" class=\"headerlink\" title=\"下标方法\"></a>下标方法</h4><p>数组、散列中的<em>obj[i]<em>以及</em>obj[i]&#x3D;x</em>这样的方法，称为下标方法。定义下标方法时的方法名分别为**[]<strong>和</strong>[]&#x3D;**.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_reader</span> <span class=\"symbol\">:x</span>, <span class=\"symbol\">:y</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">x, y</span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span> = x, y</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">[]</span>(<span class=\"params\">index</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> index</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\tx</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\ty</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">raise</span> <span class=\"title class_\">ArgumentError</span>, <span class=\"string\">&quot;out of range (<span class=\"subst\">#&#123;index&#125;</span>)&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">[]=</span>(<span class=\"params\">index, val</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> index</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">self</span>.x = val</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">self</span>.y = val</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">raise</span> <span class=\"title class_\">ArgumentError</span>, <span class=\"string\">&quot;out of range (<span class=\"subst\">#&#123;index&#125;</span>)&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">display</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;(<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span>)&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>以下两种运算符是等价的, op即代表操作运算符</p>\n<pre><code>value1 op= value2\nvalue1 = value1 op value2\n</code></pre>\n<p>利用运算符**||**的特性，可以简化相关的赋值代码，如下是等价的</p>\n<figure class=\"highlight ruby\"><figcaption><span>赋值方式1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">&quot;Ruby&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> var\t\t\t\t<span class=\"comment\">#当var不是nil或false时</span></span><br><span class=\"line\">\tname = var</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>赋值方式2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = var |<span class=\"params\"></span>| <span class=\"string\">&quot;Ruby&quot;</span></span><br></pre></td></tr></table></figure>","more":"<p>而利用**&amp;&amp;**运算符，可以避免不必要要得程序错误</p>\n<figure class=\"highlight ruby\"><figcaption><span>隐藏的错误</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = ary[<span class=\"number\">0</span>]          <span class=\"comment\">#如果ary为nil，则此时将引发程序错误</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ruby\"><figcaption><span>使用&&避免错误</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = ary &amp;&amp; ary[<span class=\"number\">0</span>]\t<span class=\"comment\">#避免当ary为nil时，读取ary[0]时的错误</span></span><br></pre></td></tr></table></figure>\n<p>使用**&amp;&amp;**可以在确定对象存在后再调用方法。而且代码更加简洁。</p>\n<h4 id=\"范围运算符\"><a href=\"#范围运算符\" class=\"headerlink\" title=\"范围运算符\"></a>范围运算符</h4><p>相比其他的语言如Java等，范围运算符算是一个比较特殊的运算符，范围运算符有**..<strong>和</strong>…**两种，其区别在于如下</p>\n<ul>\n<li><strong>x..y</strong>的范围是从x到y</li>\n<li><strong>x…y</strong>的范围是从x到y得前一个元素</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>..<span class=\"number\">5</span>).to_a\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4, 5]</span></span><br><span class=\"line\">(<span class=\"string\">&quot;a&quot;</span>..<span class=\"string\">&quot;d&quot;</span>).to_a\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span>...<span class=\"number\">5</span>).to_a\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4]</span></span><br><span class=\"line\">(<span class=\"string\">&quot;a&quot;</span>...<span class=\"string\">&quot;d&quot;</span>).to_a\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby中有范围对象(Range)来表示范围对象，以下两个写法是等价的</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = <span class=\"title class_\">Range</span>.new(<span class=\"number\">1</span>, <span class=\"number\">5</span>)\t<span class=\"comment\">#=&gt; 1..5</span></span><br><span class=\"line\">ary.<span class=\"keyword\">class</span>\t\t\t\t\t<span class=\"comment\">#=&gt; Range</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ary = <span class=\"number\">1</span>..<span class=\"number\">5</span>\t\t\t\t<span class=\"comment\">#=&gt; 1..5</span></span><br><span class=\"line\">ary.<span class=\"keyword\">class</span>\t\t\t\t\t<span class=\"comment\">#=&gt; Range</span></span><br></pre></td></tr></table></figure>\n<p>在Range对象内部，可以使用<strong>succ</strong>方法根据起点值逐个生成下一值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">a = a.succ\t\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">a = a.succ\t\t\t\t\t<span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\">a.succ.succ\t\t\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算符重定义\"><a href=\"#运算符重定义\" class=\"headerlink\" title=\"运算符重定义\"></a>运算符重定义</h4><p>在Ruby中有以下运算符不能重定义<br>::, &amp;&amp;, ||, .., …, ?:, not, &#x3D;, and</p>\n<p><em>二元运算符重定义</em>,如加号+、减号-</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_reader</span> <span class=\"symbol\">:x</span>, <span class=\"symbol\">:y</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">x, y</span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span> = x, y</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">+</span>(<span class=\"params\">other</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(x + other.x, y + other.y)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">-</span>(<span class=\"params\">other</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(x - other.x, y - other.y)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">display</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;(<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span>)&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1 = <span class=\"title class_\">Point</span>.new(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">p2 = <span class=\"title class_\">Point</span>.new(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">p = p1 + p2</span><br><span class=\"line\">puts p.display\t\t\t\t\t<span class=\"comment\">#=&gt; (4, 6)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = p2 - p1</span><br><span class=\"line\">puts p.display\t\t\t\t\t<span class=\"comment\">#=&gt; (2, 2)</span></span><br></pre></td></tr></table></figure>\n\n<p><em>一元运算符</em>，如正号+，负号-等，其重定义与二元运算符不同。可定义的一元运算符有**+**, <strong>-</strong>, <strong>~</strong>, **!**4个。分别以+@， -@， ~@， !@为方法名进行方法定义。而且一元运算符都是没有参数的。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_reader</span> <span class=\"symbol\">:x</span>, <span class=\"symbol\">:y</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">x, y</span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span> = x, y</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">+@</span></span><br><span class=\"line\">\t\tdup</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">-@</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(-x ,-y)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">~@</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">self</span>.<span class=\"keyword\">class</span>.new(-y, x)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">display</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;(<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span>)&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1 = <span class=\"title class_\">Point</span>.new(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">puts (-p1).display\t\t\t\t<span class=\"comment\">#=&gt; (-1, -2)</span></span><br><span class=\"line\">puts (+p1).display\t\t\t\t<span class=\"comment\">#=&gt; (1, 2)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下标方法\"><a href=\"#下标方法\" class=\"headerlink\" title=\"下标方法\"></a>下标方法</h4><p>数组、散列中的<em>obj[i]<em>以及</em>obj[i]&#x3D;x</em>这样的方法，称为下标方法。定义下标方法时的方法名分别为**[]<strong>和</strong>[]&#x3D;**.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">\t<span class=\"built_in\">attr_reader</span> <span class=\"symbol\">:x</span>, <span class=\"symbol\">:y</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">initialize</span>(<span class=\"params\">x, y</span>)</span><br><span class=\"line\">\t\t<span class=\"variable\">@x</span>, <span class=\"variable\">@y</span> = x, y</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">[]</span>(<span class=\"params\">index</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> index</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\tx</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\ty</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">raise</span> <span class=\"title class_\">ArgumentError</span>, <span class=\"string\">&quot;out of range (<span class=\"subst\">#&#123;index&#125;</span>)&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">[]=</span>(<span class=\"params\">index, val</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> index</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">self</span>.x = val</span><br><span class=\"line\">\t\t<span class=\"keyword\">when</span> <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">self</span>.y = val</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">raise</span> <span class=\"title class_\">ArgumentError</span>, <span class=\"string\">&quot;out of range (<span class=\"subst\">#&#123;index&#125;</span>)&quot;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">display</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;(<span class=\"subst\">#&#123;x&#125;</span>, <span class=\"subst\">#&#123;y&#125;</span>)&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(9)","date":"2015-09-09T15:22:26.000Z","comments":1,"_content":"\n### 异常处理\n在Ruby中，抛出异常的信息格式如下：\n\n\t文件名：行号：in 方法名：错误信息 (异常类名)\n\t\t\tfrom 文件名：行号：in 方法名\n\n以from开头的行表示发生错位的位置。\n在Ruby中,使用**begin ~ rescue ~ end**语句来做异常处理，其语法如下：\n\n\tbegin\n\t\t可能会发生异常的处理\n\trescue\n\t\t发生异常时的处理\n\tend\n\t\n``` ruby\nbegin\n\t1 / 0\nrescue\n\tputs \"has a exception\"\t\t\t\t#=> has a exception\nend\n```\n<!-- more -->\n通过在**rescue**后指定变量名，可以获得异常对象。异常对象有两个方法，方法名为**class**、**message**、**backtrace**。\n\n- **class**方法可以获取到异常的种类\n- **message**方法获取异常信息。\n- **backtrace**方法获取异常发生的位置信息\n\n\tbegin\n\t\t可能会发生的异常的处理\n\trescue =>\t引用异常对象的变量\n\t\t发生异常时的处理\n\tend\n\t\n``` ruby\nbegin\n\t1 / 0\nrescue => ex\t\t\t\t\t\t\t\t#=> 将异常对象引用到ex对象\n\tputs ex.class\t\t\t\t\t\t\t#=> ZeroDivisionError\n\tputs ex.message\t\t\t\t\t\t#=> divided by 0\n\tputs ex.backtrace\t\t\t\t\t#=> exception.rb:2:in `/'exception.rb:2:in `<main>'\nend\n```\n*Note：此处是将代码直接写在ruby文件里，然后直接运行的，没有写在方法里面。所以看到的信息是文件名和发生错误的行号*\n\n如果不指定变量名，Ruby将会把异常对象赋值给**$!**、**$2**变量\n\n- **$!** 引用到最后发生的异常对象\n- **$@** 引用到发生的异常的位置信息\n\n``` ruby\nbegin\n\t1 / 0\nrescue\n\tputs $!.class\t\t\t\t\t\t\t#=> ZeroDivisionError\n\tputs $!.message\t\t\t\t\t\t#=> divided by 0\n\tputs $!.backtrace\t\t\t\t\t#=> exception.rb:2:in `/'exception.rb:2:in `<main>'\n\tputs $@\t\t\t\t\t\t\t\t#=> exception.rb:2:in `/'exception.rb:2:in `<main>'\nend\n```\n从上面的运行示例可以看出，其实**$!.backtrace**与**$@**是等价的，都表示异常发生的位置。\n\n在Ruby中可以通过**ensure**来确保无论是否引发异常都将执行处理，类似于Java和C#中得finally。\n\n\tbegin\n\t\t可能发生的异常\n\trescue => 变量\n\t\t发生异常时的处理\n\tensure\n\t\t无论是否有异常，都会处理\n\tend\n\t\n``` ruby\ndef copy(from to)\n\tsrc = File.open(from)\n\tbegin\n\t\tdst = File.open(to, 'w')\n\t\tdata = src.read\n\t\tdst.write(data)\n\t\tdst.close\n\trescue => ex\n\t\tprint ex.message\n\tensure\n\t\tsrc.close\n\tend\nend\n```\n\n在**rescue**中使用**retry**后，**begin**以下的处理会再重做一遍。所以需要注意陷入死循环的情况。\n\n``` ruby\ncount = 0\nnum = 0\nbegin\n\t1 / num\t\t\t\t\t\t#=> 如果发生异常，则执行rescue中的语句\nrescue\n\tif count >= 5\n\t\tnum += 1\n\tend\n\n\tcount += 1\n\t\n\tretry\t\t\t\t\t\t\t#=> 重复执行begin后的语句\nend\n\nputs count\t\t\t\t\t\t#=> 6\n```\n\n#### 使用rescue做为修饰符\n\n使用rescue作为修饰符可以简化很多代码\n\n\t表达式1 rescue 表达式2\n\t\n与下面的写法等价\n\n\tbegin\n\t\t表达式1\n\trescue\n\t\t表达式2\n\tend\n\n其意义为如果表达式1中发生异常，表达式2的值就会成为整体表达式的值。\n\n``` ruby\ndef parseInt(param)\n\tInteger(param) rescue 0\t\t#=> 如果Integer(param)语句无异常，直接返回该值，否者返回0\nend\n\nputs parseInt(\"123\")\t\t\t#=> 123\nputs parseInt(\"abc\")\t\t\t#=> 0\n```\n在判断字符串是否为数值形式时，可以使用这种方法。\n\n#### 异常处理的其他语法\n*方法内*\n如果异常处理的范围是整个方法体，这时可以省略begin以及end关键字，直接使用rescue和ensure。\n\n\tdef 方法名\n\t\t方法体\n\trescue => 异常对象\n\t\t异常处理\n\tensure\n\t\t后处理\n\tend\n\n*类定义中*\n在类定义中也可以使用rescue以及ensure。但是，如果类定义途中发生异常，那么异常发生部分后的方法定义就不会再执行了。所以一般很少在类定义中使用。\n\n\tclass 类名\n\t\t类定义\n\trescue => 异常对象\n\t\t异常处理\n\tensure\n\t\t后处理\n\tend\n\t\n#### 指定需要捕捉的异常\n当然，Ruby也提供了针对特定异常的捕捉处理，可以使用多个rescue来分开处理\n\n\tbegin\n\t\t可能发生异常的地方\n\trescue Exception1, Exception2 =>变量\n\t\t对Exception1或Exception2的处理\n\trescue Exception3 => 变量\n\t\t对Exception3的处理\n\trescue\n\t\t对上述异常以外的异常的处理\n\tend\n\t\n``` ruby\ndef multi_rescue \n\tbegin\n\t\tyield\t\t\t\t\t#块参数在此处，如有异常，将执行后续指定的异常处理\n\trescue NameError, NoMethodError => ex\n\t\tputs ex.class\n\trescue ZeroDivisionError\n\t\tputs $!.class\n\trescue \n\t\tputs $!.class\n\tend\nend\n\nmulti_rescue do \n\t1 / 0\t\t\t\t\t\t\t#触发ZeroDivisionError异常\nend\n\nmulti_rescue do\n\tval.size\t\t\t\t\t\t#触发NameError异常\nend\n\nmulti_rescue do \n\tval = 4\n\tsqrt(val)\t\t\t\t\t\t#触发NoMethodError异常\t\nend\n```\n以上代码定义了一个带块的方法，通过此方法可以插入任何你想要得代码执行块。\n\t\n#### 异常类\n*注意：ruby中所有异常都是*Exception*类的子类。*\n当rescue中不指定异常类时，程序会默认捕捉*StandardError*类及其子类的异常. 所以在定义自己的异常时，可以先定义继承StandardError类的新类，然后再继承这个新类。\n\n``` ruby\nMyError = Class.new(StandardError)\n\nclass MyError < StandardError\nend\n```\n上面两种写法是等效的，都是表示定义一个继承StandardError类的新类。第一种方式是一种简洁的写法。\n\n``` ruby\nMyError = Class.new(StandardError)\t\t#自定义MyError异常\n\n#自定义MyError1异常继承自MyError，并重写message方法\nclass MyError1 < MyError\n\tdef message\n\t\t\"the exception message is from MyError1\"\n\tend\nend\n\n#自定义MyError2异常继承自MyError，并重写message方法\nclass MyError2 < MyError\n\tdef message\n\t\t\"the exception message is from MyError2\"\n\tend\nend\n\n#定义带块的处理异常的方法\ndef raiseException\n\tyield\nrescue MyError1 => ex\n\tputs ex.message\nrescue MyError2 => ex\n\tputs ex.message\nrescue\n\tputs $!.message\nend\n\n#抛出异常MyError1\nraiseException do\n\traise MyError1\t\t#=> the exception message is from MyError1\t\t\nend\n\n#抛出异常MyError2\t\nraiseException do\n\traise MyError2\t\t#=> the exception message is from MyError2\nend\n```\n\n#### 抛出异常\n使用**raise**方法，可以使程序主动抛出异常。\n\nraise方法有一下4中调用方式：\n\n- raise message\n抛出*RuntimeError*异常，并把字符串作为message设置给新生成的异常对象\n\n- raise 异常类 \n抛出指定的异常\n\n- raise 异常类，message\n抛出指定的异常，并把message信息设置给新生成的异常对象\n\n- raise\n在rescue外抛出RuntimeError。 在rescue中调用时，会再次抛出最后一次发生的异常。\n\n``` ruby\n#自定义MyError3异常\nMyError3 = Class.new(MyError\n\nraiseException do\n\traise MyError3, \"customized message for MyError3\"\t#=>抛出指定message\nend\n```","source":"_posts/2015-09-09-ruby-practice-9.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(9)\"\ndate: 2015-09-09 23:22:26 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n### 异常处理\n在Ruby中，抛出异常的信息格式如下：\n\n\t文件名：行号：in 方法名：错误信息 (异常类名)\n\t\t\tfrom 文件名：行号：in 方法名\n\n以from开头的行表示发生错位的位置。\n在Ruby中,使用**begin ~ rescue ~ end**语句来做异常处理，其语法如下：\n\n\tbegin\n\t\t可能会发生异常的处理\n\trescue\n\t\t发生异常时的处理\n\tend\n\t\n``` ruby\nbegin\n\t1 / 0\nrescue\n\tputs \"has a exception\"\t\t\t\t#=> has a exception\nend\n```\n<!-- more -->\n通过在**rescue**后指定变量名，可以获得异常对象。异常对象有两个方法，方法名为**class**、**message**、**backtrace**。\n\n- **class**方法可以获取到异常的种类\n- **message**方法获取异常信息。\n- **backtrace**方法获取异常发生的位置信息\n\n\tbegin\n\t\t可能会发生的异常的处理\n\trescue =>\t引用异常对象的变量\n\t\t发生异常时的处理\n\tend\n\t\n``` ruby\nbegin\n\t1 / 0\nrescue => ex\t\t\t\t\t\t\t\t#=> 将异常对象引用到ex对象\n\tputs ex.class\t\t\t\t\t\t\t#=> ZeroDivisionError\n\tputs ex.message\t\t\t\t\t\t#=> divided by 0\n\tputs ex.backtrace\t\t\t\t\t#=> exception.rb:2:in `/'exception.rb:2:in `<main>'\nend\n```\n*Note：此处是将代码直接写在ruby文件里，然后直接运行的，没有写在方法里面。所以看到的信息是文件名和发生错误的行号*\n\n如果不指定变量名，Ruby将会把异常对象赋值给**$!**、**$2**变量\n\n- **$!** 引用到最后发生的异常对象\n- **$@** 引用到发生的异常的位置信息\n\n``` ruby\nbegin\n\t1 / 0\nrescue\n\tputs $!.class\t\t\t\t\t\t\t#=> ZeroDivisionError\n\tputs $!.message\t\t\t\t\t\t#=> divided by 0\n\tputs $!.backtrace\t\t\t\t\t#=> exception.rb:2:in `/'exception.rb:2:in `<main>'\n\tputs $@\t\t\t\t\t\t\t\t#=> exception.rb:2:in `/'exception.rb:2:in `<main>'\nend\n```\n从上面的运行示例可以看出，其实**$!.backtrace**与**$@**是等价的，都表示异常发生的位置。\n\n在Ruby中可以通过**ensure**来确保无论是否引发异常都将执行处理，类似于Java和C#中得finally。\n\n\tbegin\n\t\t可能发生的异常\n\trescue => 变量\n\t\t发生异常时的处理\n\tensure\n\t\t无论是否有异常，都会处理\n\tend\n\t\n``` ruby\ndef copy(from to)\n\tsrc = File.open(from)\n\tbegin\n\t\tdst = File.open(to, 'w')\n\t\tdata = src.read\n\t\tdst.write(data)\n\t\tdst.close\n\trescue => ex\n\t\tprint ex.message\n\tensure\n\t\tsrc.close\n\tend\nend\n```\n\n在**rescue**中使用**retry**后，**begin**以下的处理会再重做一遍。所以需要注意陷入死循环的情况。\n\n``` ruby\ncount = 0\nnum = 0\nbegin\n\t1 / num\t\t\t\t\t\t#=> 如果发生异常，则执行rescue中的语句\nrescue\n\tif count >= 5\n\t\tnum += 1\n\tend\n\n\tcount += 1\n\t\n\tretry\t\t\t\t\t\t\t#=> 重复执行begin后的语句\nend\n\nputs count\t\t\t\t\t\t#=> 6\n```\n\n#### 使用rescue做为修饰符\n\n使用rescue作为修饰符可以简化很多代码\n\n\t表达式1 rescue 表达式2\n\t\n与下面的写法等价\n\n\tbegin\n\t\t表达式1\n\trescue\n\t\t表达式2\n\tend\n\n其意义为如果表达式1中发生异常，表达式2的值就会成为整体表达式的值。\n\n``` ruby\ndef parseInt(param)\n\tInteger(param) rescue 0\t\t#=> 如果Integer(param)语句无异常，直接返回该值，否者返回0\nend\n\nputs parseInt(\"123\")\t\t\t#=> 123\nputs parseInt(\"abc\")\t\t\t#=> 0\n```\n在判断字符串是否为数值形式时，可以使用这种方法。\n\n#### 异常处理的其他语法\n*方法内*\n如果异常处理的范围是整个方法体，这时可以省略begin以及end关键字，直接使用rescue和ensure。\n\n\tdef 方法名\n\t\t方法体\n\trescue => 异常对象\n\t\t异常处理\n\tensure\n\t\t后处理\n\tend\n\n*类定义中*\n在类定义中也可以使用rescue以及ensure。但是，如果类定义途中发生异常，那么异常发生部分后的方法定义就不会再执行了。所以一般很少在类定义中使用。\n\n\tclass 类名\n\t\t类定义\n\trescue => 异常对象\n\t\t异常处理\n\tensure\n\t\t后处理\n\tend\n\t\n#### 指定需要捕捉的异常\n当然，Ruby也提供了针对特定异常的捕捉处理，可以使用多个rescue来分开处理\n\n\tbegin\n\t\t可能发生异常的地方\n\trescue Exception1, Exception2 =>变量\n\t\t对Exception1或Exception2的处理\n\trescue Exception3 => 变量\n\t\t对Exception3的处理\n\trescue\n\t\t对上述异常以外的异常的处理\n\tend\n\t\n``` ruby\ndef multi_rescue \n\tbegin\n\t\tyield\t\t\t\t\t#块参数在此处，如有异常，将执行后续指定的异常处理\n\trescue NameError, NoMethodError => ex\n\t\tputs ex.class\n\trescue ZeroDivisionError\n\t\tputs $!.class\n\trescue \n\t\tputs $!.class\n\tend\nend\n\nmulti_rescue do \n\t1 / 0\t\t\t\t\t\t\t#触发ZeroDivisionError异常\nend\n\nmulti_rescue do\n\tval.size\t\t\t\t\t\t#触发NameError异常\nend\n\nmulti_rescue do \n\tval = 4\n\tsqrt(val)\t\t\t\t\t\t#触发NoMethodError异常\t\nend\n```\n以上代码定义了一个带块的方法，通过此方法可以插入任何你想要得代码执行块。\n\t\n#### 异常类\n*注意：ruby中所有异常都是*Exception*类的子类。*\n当rescue中不指定异常类时，程序会默认捕捉*StandardError*类及其子类的异常. 所以在定义自己的异常时，可以先定义继承StandardError类的新类，然后再继承这个新类。\n\n``` ruby\nMyError = Class.new(StandardError)\n\nclass MyError < StandardError\nend\n```\n上面两种写法是等效的，都是表示定义一个继承StandardError类的新类。第一种方式是一种简洁的写法。\n\n``` ruby\nMyError = Class.new(StandardError)\t\t#自定义MyError异常\n\n#自定义MyError1异常继承自MyError，并重写message方法\nclass MyError1 < MyError\n\tdef message\n\t\t\"the exception message is from MyError1\"\n\tend\nend\n\n#自定义MyError2异常继承自MyError，并重写message方法\nclass MyError2 < MyError\n\tdef message\n\t\t\"the exception message is from MyError2\"\n\tend\nend\n\n#定义带块的处理异常的方法\ndef raiseException\n\tyield\nrescue MyError1 => ex\n\tputs ex.message\nrescue MyError2 => ex\n\tputs ex.message\nrescue\n\tputs $!.message\nend\n\n#抛出异常MyError1\nraiseException do\n\traise MyError1\t\t#=> the exception message is from MyError1\t\t\nend\n\n#抛出异常MyError2\t\nraiseException do\n\traise MyError2\t\t#=> the exception message is from MyError2\nend\n```\n\n#### 抛出异常\n使用**raise**方法，可以使程序主动抛出异常。\n\nraise方法有一下4中调用方式：\n\n- raise message\n抛出*RuntimeError*异常，并把字符串作为message设置给新生成的异常对象\n\n- raise 异常类 \n抛出指定的异常\n\n- raise 异常类，message\n抛出指定的异常，并把message信息设置给新生成的异常对象\n\n- raise\n在rescue外抛出RuntimeError。 在rescue中调用时，会再次抛出最后一次发生的异常。\n\n``` ruby\n#自定义MyError3异常\nMyError3 = Class.new(MyError\n\nraiseException do\n\traise MyError3, \"customized message for MyError3\"\t#=>抛出指定message\nend\n```","slug":"2015-09-09-ruby-practice-9","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4ow0043azv5gwywd9lt","layout":"post","photos":[],"link":"","content":"<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>在Ruby中，抛出异常的信息格式如下：</p>\n<pre><code>文件名：行号：in 方法名：错误信息 (异常类名)\n        from 文件名：行号：in 方法名\n</code></pre>\n<p>以from开头的行表示发生错位的位置。<br>在Ruby中,使用<strong>begin ~ rescue ~ end</strong>语句来做异常处理，其语法如下：</p>\n<pre><code>begin\n    可能会发生异常的处理\nrescue\n    发生异常时的处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\tputs <span class=\"string\">&quot;has a exception&quot;</span>\t\t\t\t<span class=\"comment\">#=&gt; has a exception</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>通过在<strong>rescue</strong>后指定变量名，可以获得异常对象。异常对象有两个方法，方法名为<strong>class</strong>、<strong>message</strong>、<strong>backtrace</strong>。</p>\n<ul>\n<li><p><strong>class</strong>方法可以获取到异常的种类</p>\n</li>\n<li><p><strong>message</strong>方法获取异常信息。</p>\n</li>\n<li><p><strong>backtrace</strong>方法获取异常发生的位置信息</p>\n<p>  begin<br>  可能会发生的异常的处理<br>  rescue &#x3D;&gt;\t引用异常对象的变量<br>  发生异常时的处理<br>  end</p>\n</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span> =&gt; ex\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 将异常对象引用到ex对象</span></span><br><span class=\"line\">\tputs ex.<span class=\"keyword\">class</span>\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; ZeroDivisionError</span></span><br><span class=\"line\">\tputs ex.message\t\t\t\t\t\t<span class=\"comment\">#=&gt; divided by 0</span></span><br><span class=\"line\">\tputs ex.backtrace\t\t\t\t\t<span class=\"comment\">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><em>Note：此处是将代码直接写在ruby文件里，然后直接运行的，没有写在方法里面。所以看到的信息是文件名和发生错误的行号</em></p>\n<p>如果不指定变量名，Ruby将会把异常对象赋值给**$!<strong>、</strong>$2**变量</p>\n<ul>\n<li><strong>$!</strong> 引用到最后发生的异常对象</li>\n<li><strong>$@</strong> 引用到发生的异常的位置信息</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.<span class=\"keyword\">class</span>\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; ZeroDivisionError</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.message\t\t\t\t\t\t<span class=\"comment\">#=&gt; divided by 0</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.backtrace\t\t\t\t\t<span class=\"comment\">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$@</span>\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>从上面的运行示例可以看出，其实**$!.backtrace<strong>与</strong>$@**是等价的，都表示异常发生的位置。</p>\n<p>在Ruby中可以通过<strong>ensure</strong>来确保无论是否引发异常都将执行处理，类似于Java和C#中得finally。</p>\n<pre><code>begin\n    可能发生的异常\nrescue =&gt; 变量\n    发生异常时的处理\nensure\n    无论是否有异常，都会处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">copy</span>(<span class=\"params\">from to</span>)</span><br><span class=\"line\">\tsrc = <span class=\"title class_\">File</span>.open(from)</span><br><span class=\"line\">\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\tdst = <span class=\"title class_\">File</span>.open(to, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">\t\tdata = src.read</span><br><span class=\"line\">\t\tdst.write(data)</span><br><span class=\"line\">\t\tdst.close</span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> =&gt; ex</span><br><span class=\"line\">\t\tprint ex.message</span><br><span class=\"line\">\t<span class=\"keyword\">ensure</span></span><br><span class=\"line\">\t\tsrc.close</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>在<strong>rescue</strong>中使用<strong>retry</strong>后，<strong>begin</strong>以下的处理会再重做一遍。所以需要注意陷入死循环的情况。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">num = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / num\t\t\t\t\t\t<span class=\"comment\">#=&gt; 如果发生异常，则执行rescue中的语句</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> count &gt;= <span class=\"number\">5</span></span><br><span class=\"line\">\t\tnum += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">retry</span>\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 重复执行begin后的语句</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts count\t\t\t\t\t\t<span class=\"comment\">#=&gt; 6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用rescue做为修饰符\"><a href=\"#使用rescue做为修饰符\" class=\"headerlink\" title=\"使用rescue做为修饰符\"></a>使用rescue做为修饰符</h4><p>使用rescue作为修饰符可以简化很多代码</p>\n<pre><code>表达式1 rescue 表达式2\n</code></pre>\n<p>与下面的写法等价</p>\n<pre><code>begin\n    表达式1\nrescue\n    表达式2\nend\n</code></pre>\n<p>其意义为如果表达式1中发生异常，表达式2的值就会成为整体表达式的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parseInt</span>(<span class=\"params\">param</span>)</span><br><span class=\"line\">\t<span class=\"title class_\">Integer</span>(param) <span class=\"keyword\">rescue</span> <span class=\"number\">0</span>\t\t<span class=\"comment\">#=&gt; 如果Integer(param)语句无异常，直接返回该值，否者返回0</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts parseInt(<span class=\"string\">&quot;123&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">puts parseInt(<span class=\"string\">&quot;abc&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n<p>在判断字符串是否为数值形式时，可以使用这种方法。</p>\n<h4 id=\"异常处理的其他语法\"><a href=\"#异常处理的其他语法\" class=\"headerlink\" title=\"异常处理的其他语法\"></a>异常处理的其他语法</h4><p><em>方法内</em><br>如果异常处理的范围是整个方法体，这时可以省略begin以及end关键字，直接使用rescue和ensure。</p>\n<pre><code>def 方法名\n    方法体\nrescue =&gt; 异常对象\n    异常处理\nensure\n    后处理\nend\n</code></pre>\n<p><em>类定义中</em><br>在类定义中也可以使用rescue以及ensure。但是，如果类定义途中发生异常，那么异常发生部分后的方法定义就不会再执行了。所以一般很少在类定义中使用。</p>\n<pre><code>class 类名\n    类定义\nrescue =&gt; 异常对象\n    异常处理\nensure\n    后处理\nend\n</code></pre>\n<h4 id=\"指定需要捕捉的异常\"><a href=\"#指定需要捕捉的异常\" class=\"headerlink\" title=\"指定需要捕捉的异常\"></a>指定需要捕捉的异常</h4><p>当然，Ruby也提供了针对特定异常的捕捉处理，可以使用多个rescue来分开处理</p>\n<pre><code>begin\n    可能发生异常的地方\nrescue Exception1, Exception2 =&gt;变量\n    对Exception1或Exception2的处理\nrescue Exception3 =&gt; 变量\n    对Exception3的处理\nrescue\n    对上述异常以外的异常的处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">multi_rescue</span> </span><br><span class=\"line\">\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span>\t\t\t\t\t<span class=\"comment\">#块参数在此处，如有异常，将执行后续指定的异常处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> <span class=\"title class_\">NameError</span>, <span class=\"title class_\">NoMethodError</span> =&gt; ex</span><br><span class=\"line\">\t\tputs ex.<span class=\"keyword\">class</span></span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> <span class=\"title class_\">ZeroDivisionError</span></span><br><span class=\"line\">\t\tputs <span class=\"variable\">$!</span>.<span class=\"keyword\">class</span></span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> </span><br><span class=\"line\">\t\tputs <span class=\"variable\">$!</span>.<span class=\"keyword\">class</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">multi_rescue <span class=\"keyword\">do</span> </span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span>\t\t\t\t\t\t\t<span class=\"comment\">#触发ZeroDivisionError异常</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">multi_rescue <span class=\"keyword\">do</span></span><br><span class=\"line\">\tval.size\t\t\t\t\t\t<span class=\"comment\">#触发NameError异常</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">multi_rescue <span class=\"keyword\">do</span> </span><br><span class=\"line\">\tval = <span class=\"number\">4</span></span><br><span class=\"line\">\tsqrt(val)\t\t\t\t\t\t<span class=\"comment\">#触发NoMethodError异常\t</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>以上代码定义了一个带块的方法，通过此方法可以插入任何你想要得代码执行块。</p>\n<h4 id=\"异常类\"><a href=\"#异常类\" class=\"headerlink\" title=\"异常类\"></a>异常类</h4><p><em>注意：ruby中所有异常都是</em>Exception<em>类的子类。</em><br>当rescue中不指定异常类时，程序会默认捕捉<em>StandardError</em>类及其子类的异常. 所以在定义自己的异常时，可以先定义继承StandardError类的新类，然后再继承这个新类。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyError</span> = <span class=\"title class_\">Class</span>.new(<span class=\"title class_\">StandardError</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyError</span> &lt; <span class=\"title class_ inherited__\">StandardError</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>上面两种写法是等效的，都是表示定义一个继承StandardError类的新类。第一种方式是一种简洁的写法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyError</span> = <span class=\"title class_\">Class</span>.new(<span class=\"title class_\">StandardError</span>)\t\t<span class=\"comment\">#自定义MyError异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#自定义MyError1异常继承自MyError，并重写message方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyError1</span> &lt; <span class=\"title class_ inherited__\">MyError</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">message</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;the exception message is from MyError1&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#自定义MyError2异常继承自MyError，并重写message方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyError2</span> &lt; <span class=\"title class_ inherited__\">MyError</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">message</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;the exception message is from MyError2&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义带块的处理异常的方法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">raiseException</span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span> <span class=\"title class_\">MyError1</span> =&gt; ex</span><br><span class=\"line\">\tputs ex.message</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> <span class=\"title class_\">MyError2</span> =&gt; ex</span><br><span class=\"line\">\tputs ex.message</span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.message</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#抛出异常MyError1</span></span><br><span class=\"line\">raiseException <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> <span class=\"title class_\">MyError1</span>\t\t<span class=\"comment\">#=&gt; the exception message is from MyError1\t\t</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#抛出异常MyError2\t</span></span><br><span class=\"line\">raiseException <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> <span class=\"title class_\">MyError2</span>\t\t<span class=\"comment\">#=&gt; the exception message is from MyError2</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h4><p>使用<strong>raise</strong>方法，可以使程序主动抛出异常。</p>\n<p>raise方法有一下4中调用方式：</p>\n<ul>\n<li><p>raise message<br>抛出<em>RuntimeError</em>异常，并把字符串作为message设置给新生成的异常对象</p>\n</li>\n<li><p>raise 异常类<br>抛出指定的异常</p>\n</li>\n<li><p>raise 异常类，message<br>抛出指定的异常，并把message信息设置给新生成的异常对象</p>\n</li>\n<li><p>raise<br>在rescue外抛出RuntimeError。 在rescue中调用时，会再次抛出最后一次发生的异常。</p>\n</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#自定义MyError3异常</span></span><br><span class=\"line\"><span class=\"title class_\">MyError3</span> = <span class=\"title class_\">Class</span>.new(<span class=\"title class_\">MyError</span></span><br><span class=\"line\"></span><br><span class=\"line\">raiseException <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> <span class=\"title class_\">MyError3</span>, <span class=\"string\">&quot;customized message for MyError3&quot;</span>\t<span class=\"comment\">#=&gt;抛出指定message</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>在Ruby中，抛出异常的信息格式如下：</p>\n<pre><code>文件名：行号：in 方法名：错误信息 (异常类名)\n        from 文件名：行号：in 方法名\n</code></pre>\n<p>以from开头的行表示发生错位的位置。<br>在Ruby中,使用<strong>begin ~ rescue ~ end</strong>语句来做异常处理，其语法如下：</p>\n<pre><code>begin\n    可能会发生异常的处理\nrescue\n    发生异常时的处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\tputs <span class=\"string\">&quot;has a exception&quot;</span>\t\t\t\t<span class=\"comment\">#=&gt; has a exception</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>","more":"<p>通过在<strong>rescue</strong>后指定变量名，可以获得异常对象。异常对象有两个方法，方法名为<strong>class</strong>、<strong>message</strong>、<strong>backtrace</strong>。</p>\n<ul>\n<li><p><strong>class</strong>方法可以获取到异常的种类</p>\n</li>\n<li><p><strong>message</strong>方法获取异常信息。</p>\n</li>\n<li><p><strong>backtrace</strong>方法获取异常发生的位置信息</p>\n<p>  begin<br>  可能会发生的异常的处理<br>  rescue &#x3D;&gt;\t引用异常对象的变量<br>  发生异常时的处理<br>  end</p>\n</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span> =&gt; ex\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 将异常对象引用到ex对象</span></span><br><span class=\"line\">\tputs ex.<span class=\"keyword\">class</span>\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; ZeroDivisionError</span></span><br><span class=\"line\">\tputs ex.message\t\t\t\t\t\t<span class=\"comment\">#=&gt; divided by 0</span></span><br><span class=\"line\">\tputs ex.backtrace\t\t\t\t\t<span class=\"comment\">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><em>Note：此处是将代码直接写在ruby文件里，然后直接运行的，没有写在方法里面。所以看到的信息是文件名和发生错误的行号</em></p>\n<p>如果不指定变量名，Ruby将会把异常对象赋值给**$!<strong>、</strong>$2**变量</p>\n<ul>\n<li><strong>$!</strong> 引用到最后发生的异常对象</li>\n<li><strong>$@</strong> 引用到发生的异常的位置信息</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.<span class=\"keyword\">class</span>\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; ZeroDivisionError</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.message\t\t\t\t\t\t<span class=\"comment\">#=&gt; divided by 0</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.backtrace\t\t\t\t\t<span class=\"comment\">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$@</span>\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>从上面的运行示例可以看出，其实**$!.backtrace<strong>与</strong>$@**是等价的，都表示异常发生的位置。</p>\n<p>在Ruby中可以通过<strong>ensure</strong>来确保无论是否引发异常都将执行处理，类似于Java和C#中得finally。</p>\n<pre><code>begin\n    可能发生的异常\nrescue =&gt; 变量\n    发生异常时的处理\nensure\n    无论是否有异常，都会处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">copy</span>(<span class=\"params\">from to</span>)</span><br><span class=\"line\">\tsrc = <span class=\"title class_\">File</span>.open(from)</span><br><span class=\"line\">\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\tdst = <span class=\"title class_\">File</span>.open(to, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">\t\tdata = src.read</span><br><span class=\"line\">\t\tdst.write(data)</span><br><span class=\"line\">\t\tdst.close</span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> =&gt; ex</span><br><span class=\"line\">\t\tprint ex.message</span><br><span class=\"line\">\t<span class=\"keyword\">ensure</span></span><br><span class=\"line\">\t\tsrc.close</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>在<strong>rescue</strong>中使用<strong>retry</strong>后，<strong>begin</strong>以下的处理会再重做一遍。所以需要注意陷入死循环的情况。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">num = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> / num\t\t\t\t\t\t<span class=\"comment\">#=&gt; 如果发生异常，则执行rescue中的语句</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> count &gt;= <span class=\"number\">5</span></span><br><span class=\"line\">\t\tnum += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">retry</span>\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 重复执行begin后的语句</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts count\t\t\t\t\t\t<span class=\"comment\">#=&gt; 6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用rescue做为修饰符\"><a href=\"#使用rescue做为修饰符\" class=\"headerlink\" title=\"使用rescue做为修饰符\"></a>使用rescue做为修饰符</h4><p>使用rescue作为修饰符可以简化很多代码</p>\n<pre><code>表达式1 rescue 表达式2\n</code></pre>\n<p>与下面的写法等价</p>\n<pre><code>begin\n    表达式1\nrescue\n    表达式2\nend\n</code></pre>\n<p>其意义为如果表达式1中发生异常，表达式2的值就会成为整体表达式的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parseInt</span>(<span class=\"params\">param</span>)</span><br><span class=\"line\">\t<span class=\"title class_\">Integer</span>(param) <span class=\"keyword\">rescue</span> <span class=\"number\">0</span>\t\t<span class=\"comment\">#=&gt; 如果Integer(param)语句无异常，直接返回该值，否者返回0</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts parseInt(<span class=\"string\">&quot;123&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">puts parseInt(<span class=\"string\">&quot;abc&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n<p>在判断字符串是否为数值形式时，可以使用这种方法。</p>\n<h4 id=\"异常处理的其他语法\"><a href=\"#异常处理的其他语法\" class=\"headerlink\" title=\"异常处理的其他语法\"></a>异常处理的其他语法</h4><p><em>方法内</em><br>如果异常处理的范围是整个方法体，这时可以省略begin以及end关键字，直接使用rescue和ensure。</p>\n<pre><code>def 方法名\n    方法体\nrescue =&gt; 异常对象\n    异常处理\nensure\n    后处理\nend\n</code></pre>\n<p><em>类定义中</em><br>在类定义中也可以使用rescue以及ensure。但是，如果类定义途中发生异常，那么异常发生部分后的方法定义就不会再执行了。所以一般很少在类定义中使用。</p>\n<pre><code>class 类名\n    类定义\nrescue =&gt; 异常对象\n    异常处理\nensure\n    后处理\nend\n</code></pre>\n<h4 id=\"指定需要捕捉的异常\"><a href=\"#指定需要捕捉的异常\" class=\"headerlink\" title=\"指定需要捕捉的异常\"></a>指定需要捕捉的异常</h4><p>当然，Ruby也提供了针对特定异常的捕捉处理，可以使用多个rescue来分开处理</p>\n<pre><code>begin\n    可能发生异常的地方\nrescue Exception1, Exception2 =&gt;变量\n    对Exception1或Exception2的处理\nrescue Exception3 =&gt; 变量\n    对Exception3的处理\nrescue\n    对上述异常以外的异常的处理\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">multi_rescue</span> </span><br><span class=\"line\">\t<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span>\t\t\t\t\t<span class=\"comment\">#块参数在此处，如有异常，将执行后续指定的异常处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> <span class=\"title class_\">NameError</span>, <span class=\"title class_\">NoMethodError</span> =&gt; ex</span><br><span class=\"line\">\t\tputs ex.<span class=\"keyword\">class</span></span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> <span class=\"title class_\">ZeroDivisionError</span></span><br><span class=\"line\">\t\tputs <span class=\"variable\">$!</span>.<span class=\"keyword\">class</span></span><br><span class=\"line\">\t<span class=\"keyword\">rescue</span> </span><br><span class=\"line\">\t\tputs <span class=\"variable\">$!</span>.<span class=\"keyword\">class</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">multi_rescue <span class=\"keyword\">do</span> </span><br><span class=\"line\">\t<span class=\"number\">1</span> / <span class=\"number\">0</span>\t\t\t\t\t\t\t<span class=\"comment\">#触发ZeroDivisionError异常</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">multi_rescue <span class=\"keyword\">do</span></span><br><span class=\"line\">\tval.size\t\t\t\t\t\t<span class=\"comment\">#触发NameError异常</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">multi_rescue <span class=\"keyword\">do</span> </span><br><span class=\"line\">\tval = <span class=\"number\">4</span></span><br><span class=\"line\">\tsqrt(val)\t\t\t\t\t\t<span class=\"comment\">#触发NoMethodError异常\t</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>以上代码定义了一个带块的方法，通过此方法可以插入任何你想要得代码执行块。</p>\n<h4 id=\"异常类\"><a href=\"#异常类\" class=\"headerlink\" title=\"异常类\"></a>异常类</h4><p><em>注意：ruby中所有异常都是</em>Exception<em>类的子类。</em><br>当rescue中不指定异常类时，程序会默认捕捉<em>StandardError</em>类及其子类的异常. 所以在定义自己的异常时，可以先定义继承StandardError类的新类，然后再继承这个新类。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyError</span> = <span class=\"title class_\">Class</span>.new(<span class=\"title class_\">StandardError</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyError</span> &lt; <span class=\"title class_ inherited__\">StandardError</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>上面两种写法是等效的，都是表示定义一个继承StandardError类的新类。第一种方式是一种简洁的写法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MyError</span> = <span class=\"title class_\">Class</span>.new(<span class=\"title class_\">StandardError</span>)\t\t<span class=\"comment\">#自定义MyError异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#自定义MyError1异常继承自MyError，并重写message方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyError1</span> &lt; <span class=\"title class_ inherited__\">MyError</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">message</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;the exception message is from MyError1&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#自定义MyError2异常继承自MyError，并重写message方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyError2</span> &lt; <span class=\"title class_ inherited__\">MyError</span></span><br><span class=\"line\">\t<span class=\"keyword\">def</span> <span class=\"title function_\">message</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;the exception message is from MyError2&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义带块的处理异常的方法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">raiseException</span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">rescue</span> <span class=\"title class_\">MyError1</span> =&gt; ex</span><br><span class=\"line\">\tputs ex.message</span><br><span class=\"line\"><span class=\"keyword\">rescue</span> <span class=\"title class_\">MyError2</span> =&gt; ex</span><br><span class=\"line\">\tputs ex.message</span><br><span class=\"line\"><span class=\"keyword\">rescue</span></span><br><span class=\"line\">\tputs <span class=\"variable\">$!</span>.message</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#抛出异常MyError1</span></span><br><span class=\"line\">raiseException <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> <span class=\"title class_\">MyError1</span>\t\t<span class=\"comment\">#=&gt; the exception message is from MyError1\t\t</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#抛出异常MyError2\t</span></span><br><span class=\"line\">raiseException <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> <span class=\"title class_\">MyError2</span>\t\t<span class=\"comment\">#=&gt; the exception message is from MyError2</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h4><p>使用<strong>raise</strong>方法，可以使程序主动抛出异常。</p>\n<p>raise方法有一下4中调用方式：</p>\n<ul>\n<li><p>raise message<br>抛出<em>RuntimeError</em>异常，并把字符串作为message设置给新生成的异常对象</p>\n</li>\n<li><p>raise 异常类<br>抛出指定的异常</p>\n</li>\n<li><p>raise 异常类，message<br>抛出指定的异常，并把message信息设置给新生成的异常对象</p>\n</li>\n<li><p>raise<br>在rescue外抛出RuntimeError。 在rescue中调用时，会再次抛出最后一次发生的异常。</p>\n</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#自定义MyError3异常</span></span><br><span class=\"line\"><span class=\"title class_\">MyError3</span> = <span class=\"title class_\">Class</span>.new(<span class=\"title class_\">MyError</span></span><br><span class=\"line\"></span><br><span class=\"line\">raiseException <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> <span class=\"title class_\">MyError3</span>, <span class=\"string\">&quot;customized message for MyError3&quot;</span>\t<span class=\"comment\">#=&gt;抛出指定message</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(10)","date":"2015-09-15T07:18:16.000Z","comments":1,"_content":"\n### 块\n**块(block)**，有时也称代码块，能与参数一起传递的多个处理的集合。像之前的*each*，*time*就是带块的方法。\n\n``` ruby\n(1..5).each do |i|\n\tputs i\nend\n```\n上面代码中do和end之间的部分就是所谓的块。这样的方法称为“带块的方法”或“调用块”，其调用方式如下：\n\n\t对象.方法名(参数列表) do |变量|\n\t\t希望的处理\n\tend\n\t\n\t或者\n\t\n\t对象.方法名(参数列表) { |变量|\n\t\t希望的处理\n\t}\n\n<!-- more -->\neach方法可以将数组的元素一个一个取出来然后处理，散列也可以，但与数组不同的是，散列会将*[key,value]的组合作为数组来提取元素。\n\n``` ruby\noutcome = {\"breakfast\"=>10.00, \"lunch\"=>20.00, \"dinner\"=>15.00 }\nsum_outcome = 0\noutcome.each do |pair|\t\t\t#pair是key，value组成的数组，pair[0]为key，pair[1]为value\n\tsum_outcome += pair[1]\nend\n\nputs sum_outcome\t\t\t\t\t#=> 45.0\n```\n在接收块变量时，多重赋值规则也同样适用。\n\n``` ruby\noutcome.each { |key, value|\n\tputs \"#{key} : #{value}\"\t#=> 打印对应的outcome信息\n}\n```\n\n块除了应用于迭代器以外，还被广泛用于其他地方，其中一个就是确保后处理被执行。看代码\n\n- (1)未使用块做后处理\n``` ruby file_open.rb\nfile = File.open(\"each_hash_data.rb\")\nfile.each_line do |line|\n\tputs line\nend\nfile.close\n```\n- (2)使用块做后处理\n``` ruby block_file_open.rb\nFile.open(\"each_hash_data.rb\") do |file|\n\tfile.each_line do |line|\n\t\tputs line\n\tend\nend\n```\n仔细观察代码，你会发现在第种方式中，File#open方法接收了块，然后将file对象作为块变量，并且执行完毕后，并没有调用close方法去关闭文件。用这种方式会使程序出问题吗？答案是不会，因为块内部其实执行了如下代码的处理。\n\n``` ruby\nfile = File.open(\"each_hash_data.rb\")\nbegin\n\tfile.each_line do |line|\n\t\tputs line\n\tend\nensure\n\tfile.close\nend\n```\n块还有一种常见的用法，用于替换部分算法，以Array类的sort方法为例\n\n``` ruby\nary = [\"ruby\", \"pathon\", \"c#\", \"javascript\"]\n\nsorted_ary = ary.sort\nprint sorted_ary\t\t\t#=> [\"c#\", \"javascript\", \"pathon\", \"ruby\"]\n\nsorted_ary = ary.sort { |a, b| a.length <=> b.length }\nprint sorted_ary\t\t\t#=> [\"c#\", \"ruby\", \"pathon\", \"javascript\"]\n\nsorted_ary = ary.sort { |a, b| a.reverse <=> b.reverse}\nprint sorted_ary\t\t\t#=> [\"c#\", \"pathon\", \"javascript\", \"ruby\"]\n```\n将排序算法作为块传递给sort方法，然后返回按指定排序方式排序后的数组。\n\n*注意：块中最后一个表达式的值就是块的执行结果*\n\n#### 定义带块的方法\n使用**yield**关键字代替块，如下\n\n``` ruby\ndef my_block\n\tyield\nend\n\nmy_block do \n\tputs \"this is execution in my block\"\nend\n```\n\n##### 传递块参数，获取块的值\n``` ruby\ndef total(from, to)\n\tresult = 0\n\tfrom.upto(to) do |num|\n\t\tif block_given?\t\t\t\t\t# 如果有快的话\n\t\t\tresult += yield(num)\t\t# 将经过块处理后的值累加\n\t\telse\n\t\t\tresult += num\n\t\tend\n\tend\n\tresult\nend\n\nprint total(1, 10)\t\t\t\t\t\t\t#=> 55\nprint total(1, 10) { |num| num * 2}\t\t#=> 110\n```\n**block_given?**方法被用于判断当调用方法时是否有块被传递，有则返回true，否则false\n\n*yield*参数的个数可以与块变量的个数不一样，当块变量的个数多时，多出的参数会被赋值为nil，当块变量不足时，则不能接受多余的参数值。\n\n*注：**break**和**next**方法可指定参数，如果没有指定任何参数，则返回nil，如果指定了参数则返回参数，如：break 0 和next 0 都会返回0。\n\n##### 将块封装为对象\nRuby还可以将块当作对象处理。把块当作对象处理后，就可以在接收块的方法之外的其他地方执行块，或者把块交给其他方法执行。如果要实现这样的功能，就需要**Proc**对象，**Proc**对象是能让块作为对象在程序中使用的类。\n\n通过调用**Proc.new**这个带块的方法，可以定义Proc对象，然后再调用Proc对象的**call**方法执行块。\n\n``` ruby\nhello = Proc.new do |name|\t\t\t# 使用Proc.new方法定义块对象hello\n\tputs \"Hello #{name}\"\nend\n\nhello.call(\"world\")\t\t\t\t\t# 使用Proc.call方法调用块对象\nhello.call(\"ruby\")\t\t\t\t\n```\n\n在方法定义时，如果末尾的参数使用**&参数名**的形式，Ruby就会自动把调用方法时传进来的块封装为Proc对象。\n\n``` ruby\ndef total(from, to, &block)\n\tresult = 0\n\tfrom.upto(to) do |num|\n\t\tif block\t\t\t\t\t\t\t\t#如果有块对象\n\t\t\tresult += block.call(num)\t\t#执行快对象\n\t\telse\n\t\t\tresult += num\n\t\tend\n\tend\n\tresult\nend\n\nputs total(1, 10)\t\t\t\t\t\t\t#=> 55\nputs total(1, 10) { |num| num * 2}\t\t#=> 110\n```\n在变量名前添加**&**的参数被成为**Proc参数**. 而且Proc参数一定要在所有参数之后，也就是方法的最后一个参数。\n\n将Proc对象作为块传递给其他方法处理，在调用方法时，用**&Proc对象**的形式定义参数就可以了。\n\n``` ruby\ndef my_each(ary, &block)\t\n\tary.each(&block)\t\t\t#将proc对象以块的形式传递给数组的each方法\nend\n\nmy_each([1, 2, 3]) do |i|\n\tprint \"#{i} \"\nend\n```\n\n\n","source":"_posts/2015-09-15-ruby-practice-10.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(10)\"\ndate: 2015-09-15 15:18:16 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n### 块\n**块(block)**，有时也称代码块，能与参数一起传递的多个处理的集合。像之前的*each*，*time*就是带块的方法。\n\n``` ruby\n(1..5).each do |i|\n\tputs i\nend\n```\n上面代码中do和end之间的部分就是所谓的块。这样的方法称为“带块的方法”或“调用块”，其调用方式如下：\n\n\t对象.方法名(参数列表) do |变量|\n\t\t希望的处理\n\tend\n\t\n\t或者\n\t\n\t对象.方法名(参数列表) { |变量|\n\t\t希望的处理\n\t}\n\n<!-- more -->\neach方法可以将数组的元素一个一个取出来然后处理，散列也可以，但与数组不同的是，散列会将*[key,value]的组合作为数组来提取元素。\n\n``` ruby\noutcome = {\"breakfast\"=>10.00, \"lunch\"=>20.00, \"dinner\"=>15.00 }\nsum_outcome = 0\noutcome.each do |pair|\t\t\t#pair是key，value组成的数组，pair[0]为key，pair[1]为value\n\tsum_outcome += pair[1]\nend\n\nputs sum_outcome\t\t\t\t\t#=> 45.0\n```\n在接收块变量时，多重赋值规则也同样适用。\n\n``` ruby\noutcome.each { |key, value|\n\tputs \"#{key} : #{value}\"\t#=> 打印对应的outcome信息\n}\n```\n\n块除了应用于迭代器以外，还被广泛用于其他地方，其中一个就是确保后处理被执行。看代码\n\n- (1)未使用块做后处理\n``` ruby file_open.rb\nfile = File.open(\"each_hash_data.rb\")\nfile.each_line do |line|\n\tputs line\nend\nfile.close\n```\n- (2)使用块做后处理\n``` ruby block_file_open.rb\nFile.open(\"each_hash_data.rb\") do |file|\n\tfile.each_line do |line|\n\t\tputs line\n\tend\nend\n```\n仔细观察代码，你会发现在第种方式中，File#open方法接收了块，然后将file对象作为块变量，并且执行完毕后，并没有调用close方法去关闭文件。用这种方式会使程序出问题吗？答案是不会，因为块内部其实执行了如下代码的处理。\n\n``` ruby\nfile = File.open(\"each_hash_data.rb\")\nbegin\n\tfile.each_line do |line|\n\t\tputs line\n\tend\nensure\n\tfile.close\nend\n```\n块还有一种常见的用法，用于替换部分算法，以Array类的sort方法为例\n\n``` ruby\nary = [\"ruby\", \"pathon\", \"c#\", \"javascript\"]\n\nsorted_ary = ary.sort\nprint sorted_ary\t\t\t#=> [\"c#\", \"javascript\", \"pathon\", \"ruby\"]\n\nsorted_ary = ary.sort { |a, b| a.length <=> b.length }\nprint sorted_ary\t\t\t#=> [\"c#\", \"ruby\", \"pathon\", \"javascript\"]\n\nsorted_ary = ary.sort { |a, b| a.reverse <=> b.reverse}\nprint sorted_ary\t\t\t#=> [\"c#\", \"pathon\", \"javascript\", \"ruby\"]\n```\n将排序算法作为块传递给sort方法，然后返回按指定排序方式排序后的数组。\n\n*注意：块中最后一个表达式的值就是块的执行结果*\n\n#### 定义带块的方法\n使用**yield**关键字代替块，如下\n\n``` ruby\ndef my_block\n\tyield\nend\n\nmy_block do \n\tputs \"this is execution in my block\"\nend\n```\n\n##### 传递块参数，获取块的值\n``` ruby\ndef total(from, to)\n\tresult = 0\n\tfrom.upto(to) do |num|\n\t\tif block_given?\t\t\t\t\t# 如果有快的话\n\t\t\tresult += yield(num)\t\t# 将经过块处理后的值累加\n\t\telse\n\t\t\tresult += num\n\t\tend\n\tend\n\tresult\nend\n\nprint total(1, 10)\t\t\t\t\t\t\t#=> 55\nprint total(1, 10) { |num| num * 2}\t\t#=> 110\n```\n**block_given?**方法被用于判断当调用方法时是否有块被传递，有则返回true，否则false\n\n*yield*参数的个数可以与块变量的个数不一样，当块变量的个数多时，多出的参数会被赋值为nil，当块变量不足时，则不能接受多余的参数值。\n\n*注：**break**和**next**方法可指定参数，如果没有指定任何参数，则返回nil，如果指定了参数则返回参数，如：break 0 和next 0 都会返回0。\n\n##### 将块封装为对象\nRuby还可以将块当作对象处理。把块当作对象处理后，就可以在接收块的方法之外的其他地方执行块，或者把块交给其他方法执行。如果要实现这样的功能，就需要**Proc**对象，**Proc**对象是能让块作为对象在程序中使用的类。\n\n通过调用**Proc.new**这个带块的方法，可以定义Proc对象，然后再调用Proc对象的**call**方法执行块。\n\n``` ruby\nhello = Proc.new do |name|\t\t\t# 使用Proc.new方法定义块对象hello\n\tputs \"Hello #{name}\"\nend\n\nhello.call(\"world\")\t\t\t\t\t# 使用Proc.call方法调用块对象\nhello.call(\"ruby\")\t\t\t\t\n```\n\n在方法定义时，如果末尾的参数使用**&参数名**的形式，Ruby就会自动把调用方法时传进来的块封装为Proc对象。\n\n``` ruby\ndef total(from, to, &block)\n\tresult = 0\n\tfrom.upto(to) do |num|\n\t\tif block\t\t\t\t\t\t\t\t#如果有块对象\n\t\t\tresult += block.call(num)\t\t#执行快对象\n\t\telse\n\t\t\tresult += num\n\t\tend\n\tend\n\tresult\nend\n\nputs total(1, 10)\t\t\t\t\t\t\t#=> 55\nputs total(1, 10) { |num| num * 2}\t\t#=> 110\n```\n在变量名前添加**&**的参数被成为**Proc参数**. 而且Proc参数一定要在所有参数之后，也就是方法的最后一个参数。\n\n将Proc对象作为块传递给其他方法处理，在调用方法时，用**&Proc对象**的形式定义参数就可以了。\n\n``` ruby\ndef my_each(ary, &block)\t\n\tary.each(&block)\t\t\t#将proc对象以块的形式传递给数组的each方法\nend\n\nmy_each([1, 2, 3]) do |i|\n\tprint \"#{i} \"\nend\n```\n\n\n","slug":"2015-09-15-ruby-practice-10","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4ox0046azv59262dbqf","layout":"post","photos":[],"link":"","content":"<h3 id=\"块\"><a href=\"#块\" class=\"headerlink\" title=\"块\"></a>块</h3><p>*<em>块(block)*<em>，有时也称代码块，能与参数一起传递的多个处理的集合。像之前的</em>each*，</em>time*就是带块的方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>..<span class=\"number\">5</span>).each <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tputs i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中do和end之间的部分就是所谓的块。这样的方法称为“带块的方法”或“调用块”，其调用方式如下：</p>\n<pre><code>对象.方法名(参数列表) do |变量|\n    希望的处理\nend\n\n或者\n\n对象.方法名(参数列表) &#123; |变量|\n    希望的处理\n&#125;\n</code></pre>\n<span id=\"more\"></span>\n<p>each方法可以将数组的元素一个一个取出来然后处理，散列也可以，但与数组不同的是，散列会将*[key,value]的组合作为数组来提取元素。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outcome = &#123;<span class=\"string\">&quot;breakfast&quot;</span>=&gt;<span class=\"number\">10.00</span>, <span class=\"string\">&quot;lunch&quot;</span>=&gt;<span class=\"number\">20.00</span>, <span class=\"string\">&quot;dinner&quot;</span>=&gt;<span class=\"number\">15.00</span> &#125;</span><br><span class=\"line\">sum_outcome = <span class=\"number\">0</span></span><br><span class=\"line\">outcome.each <span class=\"keyword\">do</span> |<span class=\"params\">pair</span>|\t\t\t<span class=\"comment\">#pair是key，value组成的数组，pair[0]为key，pair[1]为value</span></span><br><span class=\"line\">\tsum_outcome += pair[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts sum_outcome\t\t\t\t\t<span class=\"comment\">#=&gt; 45.0</span></span><br></pre></td></tr></table></figure>\n<p>在接收块变量时，多重赋值规则也同样适用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outcome.each &#123; |<span class=\"params\">key, value</span>|</span><br><span class=\"line\">\tputs <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span> : <span class=\"subst\">#&#123;value&#125;</span>&quot;</span>\t<span class=\"comment\">#=&gt; 打印对应的outcome信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>块除了应用于迭代器以外，还被广泛用于其他地方，其中一个就是确保后处理被执行。看代码</p>\n<ul>\n<li>(1)未使用块做后处理<figure class=\"highlight ruby\"><figcaption><span>file_open.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;each_hash_data.rb&quot;</span>)</span><br><span class=\"line\">file.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\tputs line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">file.close</span><br></pre></td></tr></table></figure></li>\n<li>(2)使用块做后处理<figure class=\"highlight ruby\"><figcaption><span>block_file_open.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;each_hash_data.rb&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">file</span>|</span><br><span class=\"line\">\tfile.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\t\tputs line</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n仔细观察代码，你会发现在第种方式中，File#open方法接收了块，然后将file对象作为块变量，并且执行完毕后，并没有调用close方法去关闭文件。用这种方式会使程序出问题吗？答案是不会，因为块内部其实执行了如下代码的处理。</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;each_hash_data.rb&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\tfile.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\t\tputs line</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">ensure</span></span><br><span class=\"line\">\tfile.close</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>块还有一种常见的用法，用于替换部分算法，以Array类的sort方法为例</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"string\">&quot;ruby&quot;</span>, <span class=\"string\">&quot;pathon&quot;</span>, <span class=\"string\">&quot;c#&quot;</span>, <span class=\"string\">&quot;javascript&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">sorted_ary = ary.sort</span><br><span class=\"line\">print sorted_ary\t\t\t<span class=\"comment\">#=&gt; [&quot;c#&quot;, &quot;javascript&quot;, &quot;pathon&quot;, &quot;ruby&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">sorted_ary = ary.sort &#123; |<span class=\"params\">a, b</span>| a.length &lt;=&gt; b.length &#125;</span><br><span class=\"line\">print sorted_ary\t\t\t<span class=\"comment\">#=&gt; [&quot;c#&quot;, &quot;ruby&quot;, &quot;pathon&quot;, &quot;javascript&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">sorted_ary = ary.sort &#123; |<span class=\"params\">a, b</span>| a.reverse &lt;=&gt; b.reverse&#125;</span><br><span class=\"line\">print sorted_ary\t\t\t<span class=\"comment\">#=&gt; [&quot;c#&quot;, &quot;pathon&quot;, &quot;javascript&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>将排序算法作为块传递给sort方法，然后返回按指定排序方式排序后的数组。</p>\n<p><em>注意：块中最后一个表达式的值就是块的执行结果</em></p>\n<h4 id=\"定义带块的方法\"><a href=\"#定义带块的方法\" class=\"headerlink\" title=\"定义带块的方法\"></a>定义带块的方法</h4><p>使用<strong>yield</strong>关键字代替块，如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_block</span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_block <span class=\"keyword\">do</span> </span><br><span class=\"line\">\tputs <span class=\"string\">&quot;this is execution in my block&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"传递块参数，获取块的值\"><a href=\"#传递块参数，获取块的值\" class=\"headerlink\" title=\"传递块参数，获取块的值\"></a>传递块参数，获取块的值</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">total</span>(<span class=\"params\">from, to</span>)</span><br><span class=\"line\">\tresult = <span class=\"number\">0</span></span><br><span class=\"line\">\tfrom.upto(to) <span class=\"keyword\">do</span> |<span class=\"params\">num</span>|</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> block_given?\t\t\t\t\t<span class=\"comment\"># 如果有快的话</span></span><br><span class=\"line\">\t\t\tresult += <span class=\"keyword\">yield</span>(num)\t\t<span class=\"comment\"># 将经过块处理后的值累加</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tresult += num</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">print total(<span class=\"number\">1</span>, <span class=\"number\">10</span>)\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br><span class=\"line\">print total(<span class=\"number\">1</span>, <span class=\"number\">10</span>) &#123; |<span class=\"params\">num</span>| num * <span class=\"number\">2</span>&#125;\t\t<span class=\"comment\">#=&gt; 110</span></span><br></pre></td></tr></table></figure>\n<p>**block_given?**方法被用于判断当调用方法时是否有块被传递，有则返回true，否则false</p>\n<p><em>yield</em>参数的个数可以与块变量的个数不一样，当块变量的个数多时，多出的参数会被赋值为nil，当块变量不足时，则不能接受多余的参数值。</p>\n<p>*注：<strong>break</strong>和<strong>next</strong>方法可指定参数，如果没有指定任何参数，则返回nil，如果指定了参数则返回参数，如：break 0 和next 0 都会返回0。</p>\n<h5 id=\"将块封装为对象\"><a href=\"#将块封装为对象\" class=\"headerlink\" title=\"将块封装为对象\"></a>将块封装为对象</h5><p>Ruby还可以将块当作对象处理。把块当作对象处理后，就可以在接收块的方法之外的其他地方执行块，或者把块交给其他方法执行。如果要实现这样的功能，就需要<strong>Proc</strong>对象，<strong>Proc</strong>对象是能让块作为对象在程序中使用的类。</p>\n<p>通过调用<strong>Proc.new</strong>这个带块的方法，可以定义Proc对象，然后再调用Proc对象的<strong>call</strong>方法执行块。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello = <span class=\"title class_\">Proc</span>.new <span class=\"keyword\">do</span> |<span class=\"params\">name</span>|\t\t\t<span class=\"comment\"># 使用Proc.new方法定义块对象hello</span></span><br><span class=\"line\">\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello.call(<span class=\"string\">&quot;world&quot;</span>)\t\t\t\t\t<span class=\"comment\"># 使用Proc.call方法调用块对象</span></span><br><span class=\"line\">hello.call(<span class=\"string\">&quot;ruby&quot;</span>)\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>在方法定义时，如果末尾的参数使用**&amp;参数名**的形式，Ruby就会自动把调用方法时传进来的块封装为Proc对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">total</span>(<span class=\"params\">from, to, &amp;block</span>)</span><br><span class=\"line\">\tresult = <span class=\"number\">0</span></span><br><span class=\"line\">\tfrom.upto(to) <span class=\"keyword\">do</span> |<span class=\"params\">num</span>|</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> block\t\t\t\t\t\t\t\t<span class=\"comment\">#如果有块对象</span></span><br><span class=\"line\">\t\t\tresult += block.call(num)\t\t<span class=\"comment\">#执行快对象</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tresult += num</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts total(<span class=\"number\">1</span>, <span class=\"number\">10</span>)\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br><span class=\"line\">puts total(<span class=\"number\">1</span>, <span class=\"number\">10</span>) &#123; |<span class=\"params\">num</span>| num * <span class=\"number\">2</span>&#125;\t\t<span class=\"comment\">#=&gt; 110</span></span><br></pre></td></tr></table></figure>\n<p>在变量名前添加**&amp;<strong>的参数被成为</strong>Proc参数**. 而且Proc参数一定要在所有参数之后，也就是方法的最后一个参数。</p>\n<p>将Proc对象作为块传递给其他方法处理，在调用方法时，用**&amp;Proc对象**的形式定义参数就可以了。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_each</span>(<span class=\"params\">ary, &amp;block</span>)\t</span><br><span class=\"line\">\tary.each(&amp;block)\t\t\t<span class=\"comment\">#将proc对象以块的形式传递给数组的each方法</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_each([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tprint <span class=\"string\">&quot;<span class=\"subst\">#&#123;i&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"块\"><a href=\"#块\" class=\"headerlink\" title=\"块\"></a>块</h3><p>*<em>块(block)*<em>，有时也称代码块，能与参数一起传递的多个处理的集合。像之前的</em>each*，</em>time*就是带块的方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>..<span class=\"number\">5</span>).each <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tputs i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中do和end之间的部分就是所谓的块。这样的方法称为“带块的方法”或“调用块”，其调用方式如下：</p>\n<pre><code>对象.方法名(参数列表) do |变量|\n    希望的处理\nend\n\n或者\n\n对象.方法名(参数列表) &#123; |变量|\n    希望的处理\n&#125;\n</code></pre>","more":"<p>each方法可以将数组的元素一个一个取出来然后处理，散列也可以，但与数组不同的是，散列会将*[key,value]的组合作为数组来提取元素。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outcome = &#123;<span class=\"string\">&quot;breakfast&quot;</span>=&gt;<span class=\"number\">10.00</span>, <span class=\"string\">&quot;lunch&quot;</span>=&gt;<span class=\"number\">20.00</span>, <span class=\"string\">&quot;dinner&quot;</span>=&gt;<span class=\"number\">15.00</span> &#125;</span><br><span class=\"line\">sum_outcome = <span class=\"number\">0</span></span><br><span class=\"line\">outcome.each <span class=\"keyword\">do</span> |<span class=\"params\">pair</span>|\t\t\t<span class=\"comment\">#pair是key，value组成的数组，pair[0]为key，pair[1]为value</span></span><br><span class=\"line\">\tsum_outcome += pair[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts sum_outcome\t\t\t\t\t<span class=\"comment\">#=&gt; 45.0</span></span><br></pre></td></tr></table></figure>\n<p>在接收块变量时，多重赋值规则也同样适用。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outcome.each &#123; |<span class=\"params\">key, value</span>|</span><br><span class=\"line\">\tputs <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span> : <span class=\"subst\">#&#123;value&#125;</span>&quot;</span>\t<span class=\"comment\">#=&gt; 打印对应的outcome信息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>块除了应用于迭代器以外，还被广泛用于其他地方，其中一个就是确保后处理被执行。看代码</p>\n<ul>\n<li>(1)未使用块做后处理<figure class=\"highlight ruby\"><figcaption><span>file_open.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;each_hash_data.rb&quot;</span>)</span><br><span class=\"line\">file.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\tputs line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">file.close</span><br></pre></td></tr></table></figure></li>\n<li>(2)使用块做后处理<figure class=\"highlight ruby\"><figcaption><span>block_file_open.rb</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;each_hash_data.rb&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">file</span>|</span><br><span class=\"line\">\tfile.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\t\tputs line</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n仔细观察代码，你会发现在第种方式中，File#open方法接收了块，然后将file对象作为块变量，并且执行完毕后，并没有调用close方法去关闭文件。用这种方式会使程序出问题吗？答案是不会，因为块内部其实执行了如下代码的处理。</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;each_hash_data.rb&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\tfile.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">\t\tputs line</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">ensure</span></span><br><span class=\"line\">\tfile.close</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>块还有一种常见的用法，用于替换部分算法，以Array类的sort方法为例</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"string\">&quot;ruby&quot;</span>, <span class=\"string\">&quot;pathon&quot;</span>, <span class=\"string\">&quot;c#&quot;</span>, <span class=\"string\">&quot;javascript&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">sorted_ary = ary.sort</span><br><span class=\"line\">print sorted_ary\t\t\t<span class=\"comment\">#=&gt; [&quot;c#&quot;, &quot;javascript&quot;, &quot;pathon&quot;, &quot;ruby&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">sorted_ary = ary.sort &#123; |<span class=\"params\">a, b</span>| a.length &lt;=&gt; b.length &#125;</span><br><span class=\"line\">print sorted_ary\t\t\t<span class=\"comment\">#=&gt; [&quot;c#&quot;, &quot;ruby&quot;, &quot;pathon&quot;, &quot;javascript&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">sorted_ary = ary.sort &#123; |<span class=\"params\">a, b</span>| a.reverse &lt;=&gt; b.reverse&#125;</span><br><span class=\"line\">print sorted_ary\t\t\t<span class=\"comment\">#=&gt; [&quot;c#&quot;, &quot;pathon&quot;, &quot;javascript&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>将排序算法作为块传递给sort方法，然后返回按指定排序方式排序后的数组。</p>\n<p><em>注意：块中最后一个表达式的值就是块的执行结果</em></p>\n<h4 id=\"定义带块的方法\"><a href=\"#定义带块的方法\" class=\"headerlink\" title=\"定义带块的方法\"></a>定义带块的方法</h4><p>使用<strong>yield</strong>关键字代替块，如下</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_block</span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_block <span class=\"keyword\">do</span> </span><br><span class=\"line\">\tputs <span class=\"string\">&quot;this is execution in my block&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"传递块参数，获取块的值\"><a href=\"#传递块参数，获取块的值\" class=\"headerlink\" title=\"传递块参数，获取块的值\"></a>传递块参数，获取块的值</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">total</span>(<span class=\"params\">from, to</span>)</span><br><span class=\"line\">\tresult = <span class=\"number\">0</span></span><br><span class=\"line\">\tfrom.upto(to) <span class=\"keyword\">do</span> |<span class=\"params\">num</span>|</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> block_given?\t\t\t\t\t<span class=\"comment\"># 如果有快的话</span></span><br><span class=\"line\">\t\t\tresult += <span class=\"keyword\">yield</span>(num)\t\t<span class=\"comment\"># 将经过块处理后的值累加</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tresult += num</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">print total(<span class=\"number\">1</span>, <span class=\"number\">10</span>)\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br><span class=\"line\">print total(<span class=\"number\">1</span>, <span class=\"number\">10</span>) &#123; |<span class=\"params\">num</span>| num * <span class=\"number\">2</span>&#125;\t\t<span class=\"comment\">#=&gt; 110</span></span><br></pre></td></tr></table></figure>\n<p>**block_given?**方法被用于判断当调用方法时是否有块被传递，有则返回true，否则false</p>\n<p><em>yield</em>参数的个数可以与块变量的个数不一样，当块变量的个数多时，多出的参数会被赋值为nil，当块变量不足时，则不能接受多余的参数值。</p>\n<p>*注：<strong>break</strong>和<strong>next</strong>方法可指定参数，如果没有指定任何参数，则返回nil，如果指定了参数则返回参数，如：break 0 和next 0 都会返回0。</p>\n<h5 id=\"将块封装为对象\"><a href=\"#将块封装为对象\" class=\"headerlink\" title=\"将块封装为对象\"></a>将块封装为对象</h5><p>Ruby还可以将块当作对象处理。把块当作对象处理后，就可以在接收块的方法之外的其他地方执行块，或者把块交给其他方法执行。如果要实现这样的功能，就需要<strong>Proc</strong>对象，<strong>Proc</strong>对象是能让块作为对象在程序中使用的类。</p>\n<p>通过调用<strong>Proc.new</strong>这个带块的方法，可以定义Proc对象，然后再调用Proc对象的<strong>call</strong>方法执行块。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello = <span class=\"title class_\">Proc</span>.new <span class=\"keyword\">do</span> |<span class=\"params\">name</span>|\t\t\t<span class=\"comment\"># 使用Proc.new方法定义块对象hello</span></span><br><span class=\"line\">\tputs <span class=\"string\">&quot;Hello <span class=\"subst\">#&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello.call(<span class=\"string\">&quot;world&quot;</span>)\t\t\t\t\t<span class=\"comment\"># 使用Proc.call方法调用块对象</span></span><br><span class=\"line\">hello.call(<span class=\"string\">&quot;ruby&quot;</span>)\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p>在方法定义时，如果末尾的参数使用**&amp;参数名**的形式，Ruby就会自动把调用方法时传进来的块封装为Proc对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">total</span>(<span class=\"params\">from, to, &amp;block</span>)</span><br><span class=\"line\">\tresult = <span class=\"number\">0</span></span><br><span class=\"line\">\tfrom.upto(to) <span class=\"keyword\">do</span> |<span class=\"params\">num</span>|</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> block\t\t\t\t\t\t\t\t<span class=\"comment\">#如果有块对象</span></span><br><span class=\"line\">\t\t\tresult += block.call(num)\t\t<span class=\"comment\">#执行快对象</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tresult += num</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\tresult</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts total(<span class=\"number\">1</span>, <span class=\"number\">10</span>)\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; 55</span></span><br><span class=\"line\">puts total(<span class=\"number\">1</span>, <span class=\"number\">10</span>) &#123; |<span class=\"params\">num</span>| num * <span class=\"number\">2</span>&#125;\t\t<span class=\"comment\">#=&gt; 110</span></span><br></pre></td></tr></table></figure>\n<p>在变量名前添加**&amp;<strong>的参数被成为</strong>Proc参数**. 而且Proc参数一定要在所有参数之后，也就是方法的最后一个参数。</p>\n<p>将Proc对象作为块传递给其他方法处理，在调用方法时，用**&amp;Proc对象**的形式定义参数就可以了。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_each</span>(<span class=\"params\">ary, &amp;block</span>)\t</span><br><span class=\"line\">\tary.each(&amp;block)\t\t\t<span class=\"comment\">#将proc对象以块的形式传递给数组的each方法</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_each([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tprint <span class=\"string\">&quot;<span class=\"subst\">#&#123;i&#125;</span> &quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>"},{"title":"The initialization of the angular ngModel","date":"2015-09-23T02:59:23.000Z","comments":1,"_content":"\nRecently, I've encoutered a weird problem in the project, it's about the value of the ngModel. Let me explain the problem. see the code\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n\t<link rel=\"stylesheet\" href=\"../../bower_components/bootstrap/dist/css/bootstrap.min.css\"/>\n\t<script src=\"../../bower_components/angular/angular.min.js\"></script>\n    <script src=\"../../js/ngModel.js\"></script>\n</head>\n<body ng-app=\"ModelApp\">\n\t<div class=\"page-header\">\n\t\t<h1 class=\"text-center\">ng-model initialize example</h1>\n\t</div>\n\t<div class=\"panel panel-danger\" ng-controller=\"ModelController1\">\n\t\t<div class=\"panel-heading\">the angular model without initialize:</div>\n\t\t<div class=\"panel-body\">\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" id=\"myInput1\" ng-model=\"myModel1\" value=\"A\"/>\n\t\t\t\t<label for=\"\"> -> This input tag bundles the ngModel which name is 'myModel1'</label>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input disabled=\"true\" id=\"displayModelValue1\" type=\"text\" value=\"{{myModel1}}\"/>\n\t\t\t\t<label for=\"\"> -> This input tag displays the value of the above ngModel</label>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</body>\n</html>\n```\n<!-- more -->\nIn the code, there is a input which id is 'myInput1' has bundled a ngModel which name is 'myModel1'. The value of the input we give it 'A'. And we put this input tag into the ModelController1 angular controller. Also, there is another input tag which id is 'displayModelValue1', the purpose of it is to display the value of the 'myModel1'.\n\nLet's see the controller code.\n\n``` javascript\nvar ModelApp = angular.module(\"ModelApp\", []);\n\nModelApp.controller('ModelController1', function($scope) {\n\t\n});\n```\nYou will notice that there is nothing in the ModelController1. Now, running this page. let's see the result.\n\n![](/assets/images/legacy/angular-ngModel-1.png)\n\nFrom the result, the value of the myInput1 is empty, but we have set the default value 'A' to it. So we guess maybe the value has changed. But when we inspect the element, we found the value has been set to 'A' in the html source. so far, I'm so confused. To find the reason, I open the console of the browser, put below javascript code to see the value. It still empty.\n\n``` javascript\n$('#myInput1').value\n```\n\n![](/assets/images/legacy/angular-ngModel-2.png)\n\nSo I guess that maybe it is ngModel affect it, the value has been changed by ngModel, but the html source didn't changed. So let's remove the ngModel from that input tag.\n\n``` html\n<input type=\"text\" id=\"myInput1\" value=\"A\"/>\n```\n\nAnd now，the value has displayed. it proves our suppose is correct.\n\nOk, Let's get started to find the reason use a new example.\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n\t<link rel=\"stylesheet\" href=\"../../bower_components/bootstrap/dist/css/bootstrap.min.css\"/>\n\t<script src=\"../../bower_components/angular/angular.min.js\"></script>\n    <script src=\"../../js/ngModel.js\"></script>\n</head>\n<body ng-app=\"ModelApp\">\n\t<div class=\"page-header\">\n\t\t<h1 class=\"text-center\">ng-model initialize example</h1>\n\t</div>\n\t<div class=\"panel panel-success\" ng-controller=\"ModelController2\">\n\t\t<div class=\"panel-heading\">the angular model with initialize:</div>\n\t\t<div class=\"panel-body\">\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" id=\"myInput2\" ng-model=\"myModel2\" value=\"A\"/>\n\t\t\t\t<label for=\"\"> -> This input tag bundles the ngModel which name is 'myModel2'</label>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input disabled=\"true\" id=\"displayModelValue2\" type=\"text\" value=\"{{myModel2}}\"/>\n\t\t\t\t<label for=\"\"> -> This input tag displays the value of the above ngModel</label>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</body>\n</html>\n```\nThe above html source code is same with before, just the id and ngModel name are different. And there is another different is that we initialize the ngModel in the controller.\n\n``` javascript\nModelApp.controller('ModelController2', function($scope) {\n\t$scope.myModel2 = \"B\";\n\t\n});\n```\nWe have set the myModel2 value to 'B' in the ModelController2. But in the html source code, we set the default value to 'A' and bundle it to ngModel. So let's see the result:\n\n![](/assets/images/legacy/angular-ngModel-3.png)\n\nThe result is 'B' not 'A'. That means the ngModel is initialized in the controller. And then render it to the browser. So this can explain the weird problem. \n\nThe finial reason is that the ngModel is initialized in the controller. If it is not initialize, the value will be empty, like the first example. So if we initialize it in the controller, the ngModel value will be changed with initialzed value.\n\nAnd also, you can use the `ng-init` directive to initialize the ngModel value which you want.\n\n``` html\n<input type=\"text\" id=\"myInput2\" ng-model=\"myModel2\" ng-init=\"myModel2 = 'A'\"/>\n```\n\n\n","source":"_posts/2015-09-23-the-initialization-of-the-angular-ngmodel.markdown","raw":"---\n\ntitle: \"The initialization of the angular ngModel\"\ndate: 2015-09-23 10:59:23 +0800\ncomments: true\ncategories: Frontend\ntags: [AngularJs, JavaScript]\n---\n\nRecently, I've encoutered a weird problem in the project, it's about the value of the ngModel. Let me explain the problem. see the code\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n\t<link rel=\"stylesheet\" href=\"../../bower_components/bootstrap/dist/css/bootstrap.min.css\"/>\n\t<script src=\"../../bower_components/angular/angular.min.js\"></script>\n    <script src=\"../../js/ngModel.js\"></script>\n</head>\n<body ng-app=\"ModelApp\">\n\t<div class=\"page-header\">\n\t\t<h1 class=\"text-center\">ng-model initialize example</h1>\n\t</div>\n\t<div class=\"panel panel-danger\" ng-controller=\"ModelController1\">\n\t\t<div class=\"panel-heading\">the angular model without initialize:</div>\n\t\t<div class=\"panel-body\">\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" id=\"myInput1\" ng-model=\"myModel1\" value=\"A\"/>\n\t\t\t\t<label for=\"\"> -> This input tag bundles the ngModel which name is 'myModel1'</label>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input disabled=\"true\" id=\"displayModelValue1\" type=\"text\" value=\"{{myModel1}}\"/>\n\t\t\t\t<label for=\"\"> -> This input tag displays the value of the above ngModel</label>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</body>\n</html>\n```\n<!-- more -->\nIn the code, there is a input which id is 'myInput1' has bundled a ngModel which name is 'myModel1'. The value of the input we give it 'A'. And we put this input tag into the ModelController1 angular controller. Also, there is another input tag which id is 'displayModelValue1', the purpose of it is to display the value of the 'myModel1'.\n\nLet's see the controller code.\n\n``` javascript\nvar ModelApp = angular.module(\"ModelApp\", []);\n\nModelApp.controller('ModelController1', function($scope) {\n\t\n});\n```\nYou will notice that there is nothing in the ModelController1. Now, running this page. let's see the result.\n\n![](/assets/images/legacy/angular-ngModel-1.png)\n\nFrom the result, the value of the myInput1 is empty, but we have set the default value 'A' to it. So we guess maybe the value has changed. But when we inspect the element, we found the value has been set to 'A' in the html source. so far, I'm so confused. To find the reason, I open the console of the browser, put below javascript code to see the value. It still empty.\n\n``` javascript\n$('#myInput1').value\n```\n\n![](/assets/images/legacy/angular-ngModel-2.png)\n\nSo I guess that maybe it is ngModel affect it, the value has been changed by ngModel, but the html source didn't changed. So let's remove the ngModel from that input tag.\n\n``` html\n<input type=\"text\" id=\"myInput1\" value=\"A\"/>\n```\n\nAnd now，the value has displayed. it proves our suppose is correct.\n\nOk, Let's get started to find the reason use a new example.\n\n``` html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title></title>\n\t<link rel=\"stylesheet\" href=\"../../bower_components/bootstrap/dist/css/bootstrap.min.css\"/>\n\t<script src=\"../../bower_components/angular/angular.min.js\"></script>\n    <script src=\"../../js/ngModel.js\"></script>\n</head>\n<body ng-app=\"ModelApp\">\n\t<div class=\"page-header\">\n\t\t<h1 class=\"text-center\">ng-model initialize example</h1>\n\t</div>\n\t<div class=\"panel panel-success\" ng-controller=\"ModelController2\">\n\t\t<div class=\"panel-heading\">the angular model with initialize:</div>\n\t\t<div class=\"panel-body\">\n\t\t\t<div>\n\t\t\t\t<input type=\"text\" id=\"myInput2\" ng-model=\"myModel2\" value=\"A\"/>\n\t\t\t\t<label for=\"\"> -> This input tag bundles the ngModel which name is 'myModel2'</label>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input disabled=\"true\" id=\"displayModelValue2\" type=\"text\" value=\"{{myModel2}}\"/>\n\t\t\t\t<label for=\"\"> -> This input tag displays the value of the above ngModel</label>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</body>\n</html>\n```\nThe above html source code is same with before, just the id and ngModel name are different. And there is another different is that we initialize the ngModel in the controller.\n\n``` javascript\nModelApp.controller('ModelController2', function($scope) {\n\t$scope.myModel2 = \"B\";\n\t\n});\n```\nWe have set the myModel2 value to 'B' in the ModelController2. But in the html source code, we set the default value to 'A' and bundle it to ngModel. So let's see the result:\n\n![](/assets/images/legacy/angular-ngModel-3.png)\n\nThe result is 'B' not 'A'. That means the ngModel is initialized in the controller. And then render it to the browser. So this can explain the weird problem. \n\nThe finial reason is that the ngModel is initialized in the controller. If it is not initialize, the value will be empty, like the first example. So if we initialize it in the controller, the ngModel value will be changed with initialzed value.\n\nAnd also, you can use the `ng-init` directive to initialize the ngModel value which you want.\n\n``` html\n<input type=\"text\" id=\"myInput2\" ng-model=\"myModel2\" ng-init=\"myModel2 = 'A'\"/>\n```\n\n\n","slug":"2015-09-23-the-initialization-of-the-angular-ngmodel","published":1,"updated":"2023-09-02T17:27:29.813Z","_id":"clm27g4oy0047azv507yr0f1b","layout":"post","photos":[],"link":"","content":"<p>Recently, I’ve encoutered a weird problem in the project, it’s about the value of the ngModel. Let me explain the problem. see the code</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../../bower_components/bootstrap/dist/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../bower_components/angular/angular.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../js/ngModel.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">&quot;ModelApp&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span>ng-model initialize example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-danger&quot;</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">&quot;ModelController1&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>the angular model without initialize:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput1&quot;</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">&quot;myModel1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;A&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag bundles the ngModel which name is &#x27;myModel1&#x27;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;displayModelValue1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&#123;&#123;myModel1&#125;&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag displays the value of the above ngModel<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>In the code, there is a input which id is ‘myInput1’ has bundled a ngModel which name is ‘myModel1’. The value of the input we give it ‘A’. And we put this input tag into the ModelController1 angular controller. Also, there is another input tag which id is ‘displayModelValue1’, the purpose of it is to display the value of the ‘myModel1’.</p>\n<p>Let’s see the controller code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">ModelApp</span> = angular.<span class=\"title function_\">module</span>(<span class=\"string\">&quot;ModelApp&quot;</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ModelApp</span>.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;ModelController1&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>You will notice that there is nothing in the ModelController1. Now, running this page. let’s see the result.</p>\n<p><img src=\"/assets/images/legacy/angular-ngModel-1.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/angular-ngModel-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>From the result, the value of the myInput1 is empty, but we have set the default value ‘A’ to it. So we guess maybe the value has changed. But when we inspect the element, we found the value has been set to ‘A’ in the html source. so far, I’m so confused. To find the reason, I open the console of the browser, put below javascript code to see the value. It still empty.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#myInput1&#x27;</span>).<span class=\"property\">value</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/assets/images/legacy/angular-ngModel-2.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/angular-ngModel-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>So I guess that maybe it is ngModel affect it, the value has been changed by ngModel, but the html source didn’t changed. So let’s remove the ngModel from that input tag.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;A&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And now，the value has displayed. it proves our suppose is correct.</p>\n<p>Ok, Let’s get started to find the reason use a new example.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../../bower_components/bootstrap/dist/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../bower_components/angular/angular.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../js/ngModel.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">&quot;ModelApp&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span>ng-model initialize example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-success&quot;</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">&quot;ModelController2&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>the angular model with initialize:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput2&quot;</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">&quot;myModel2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;A&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag bundles the ngModel which name is &#x27;myModel2&#x27;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;displayModelValue2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&#123;&#123;myModel2&#125;&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag displays the value of the above ngModel<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The above html source code is same with before, just the id and ngModel name are different. And there is another different is that we initialize the ngModel in the controller.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ModelApp</span>.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;ModelController2&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">\t$scope.<span class=\"property\">myModel2</span> = <span class=\"string\">&quot;B&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>We have set the myModel2 value to ‘B’ in the ModelController2. But in the html source code, we set the default value to ‘A’ and bundle it to ngModel. So let’s see the result:</p>\n<p><img src=\"/assets/images/legacy/angular-ngModel-3.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/angular-ngModel-3.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>The result is ‘B’ not ‘A’. That means the ngModel is initialized in the controller. And then render it to the browser. So this can explain the weird problem. </p>\n<p>The finial reason is that the ngModel is initialized in the controller. If it is not initialize, the value will be empty, like the first example. So if we initialize it in the controller, the ngModel value will be changed with initialzed value.</p>\n<p>And also, you can use the <code>ng-init</code> directive to initialize the ngModel value which you want.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput2&quot;</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">&quot;myModel2&quot;</span> <span class=\"attr\">ng-init</span>=<span class=\"string\">&quot;myModel2 = &#x27;A&#x27;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<p>Recently, I’ve encoutered a weird problem in the project, it’s about the value of the ngModel. Let me explain the problem. see the code</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../../bower_components/bootstrap/dist/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../bower_components/angular/angular.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../js/ngModel.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">&quot;ModelApp&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span>ng-model initialize example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-danger&quot;</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">&quot;ModelController1&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>the angular model without initialize:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput1&quot;</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">&quot;myModel1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;A&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag bundles the ngModel which name is &#x27;myModel1&#x27;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;displayModelValue1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&#123;&#123;myModel1&#125;&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag displays the value of the above ngModel<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>In the code, there is a input which id is ‘myInput1’ has bundled a ngModel which name is ‘myModel1’. The value of the input we give it ‘A’. And we put this input tag into the ModelController1 angular controller. Also, there is another input tag which id is ‘displayModelValue1’, the purpose of it is to display the value of the ‘myModel1’.</p>\n<p>Let’s see the controller code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">ModelApp</span> = angular.<span class=\"title function_\">module</span>(<span class=\"string\">&quot;ModelApp&quot;</span>, []);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ModelApp</span>.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;ModelController1&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>You will notice that there is nothing in the ModelController1. Now, running this page. let’s see the result.</p>\n<p><img src=\"/assets/images/legacy/angular-ngModel-1.png\"></p>\n<p>From the result, the value of the myInput1 is empty, but we have set the default value ‘A’ to it. So we guess maybe the value has changed. But when we inspect the element, we found the value has been set to ‘A’ in the html source. so far, I’m so confused. To find the reason, I open the console of the browser, put below javascript code to see the value. It still empty.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#myInput1&#x27;</span>).<span class=\"property\">value</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/assets/images/legacy/angular-ngModel-2.png\"></p>\n<p>So I guess that maybe it is ngModel affect it, the value has been changed by ngModel, but the html source didn’t changed. So let’s remove the ngModel from that input tag.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;A&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>And now，the value has displayed. it proves our suppose is correct.</p>\n<p>Ok, Let’s get started to find the reason use a new example.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;../../bower_components/bootstrap/dist/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../bower_components/angular/angular.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../../js/ngModel.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">&quot;ModelApp&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-center&quot;</span>&gt;</span>ng-model initialize example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-success&quot;</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">&quot;ModelController2&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span>the angular model with initialize:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput2&quot;</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">&quot;myModel2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;A&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag bundles the ngModel which name is &#x27;myModel2&#x27;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;displayModelValue2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&#123;&#123;myModel2&#125;&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span> -&gt; This input tag displays the value of the above ngModel<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>The above html source code is same with before, just the id and ngModel name are different. And there is another different is that we initialize the ngModel in the controller.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ModelApp</span>.<span class=\"title function_\">controller</span>(<span class=\"string\">&#x27;ModelController2&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) &#123;</span><br><span class=\"line\">\t$scope.<span class=\"property\">myModel2</span> = <span class=\"string\">&quot;B&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>We have set the myModel2 value to ‘B’ in the ModelController2. But in the html source code, we set the default value to ‘A’ and bundle it to ngModel. So let’s see the result:</p>\n<p><img src=\"/assets/images/legacy/angular-ngModel-3.png\"></p>\n<p>The result is ‘B’ not ‘A’. That means the ngModel is initialized in the controller. And then render it to the browser. So this can explain the weird problem. </p>\n<p>The finial reason is that the ngModel is initialized in the controller. If it is not initialize, the value will be empty, like the first example. So if we initialize it in the controller, the ngModel value will be changed with initialzed value.</p>\n<p>And also, you can use the <code>ng-init</code> directive to initialize the ngModel value which you want.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myInput2&quot;</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">&quot;myModel2&quot;</span> <span class=\"attr\">ng-init</span>=<span class=\"string\">&quot;myModel2 = &#x27;A&#x27;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(11)","date":"2015-09-28T02:33:41.000Z","comments":1,"_content":"\nRuby中所有表现数据的类型都称为数值类，他们都是**Numeric**的子类。起详尽的类继承结构如下：\n\n![assets/images/legacy/numberic-inheritance.png](assets/images/legacy/numeric-inheritance.png)\n<!-- more -->\nRuby中一般用到得整数都是在**Fixnum**类范围内的，如果超过了Fixnum的范围，Ruby会自动将其转换为**Bignum**类。\n\n正如上图所示，Ruby可以处理有理数和复数，有理数用**Rational**类表示，复数用**Complex**类表示。其定义形式如下：\n\n1.Rational对象\n\n\tRational(分子，分母)\n\t\n``` ruby\na = Rational(1, 3)\t\t#=> (1/3)\na.to_f\t\t\t\t\t\t#=> 0.3333333\n```\n通过*Rational#to_f*方法可将有理数转为Float对象\n\n2.Complex对象\n\n\tComplex(实数，虚数)\n\t\n``` ruby\na = Complex(1, 2)\t\t#=> (1+2i)\n```\n\n单纯的数字罗列表示10进制整数。以0b开头的数值表示2进制数，以0或者0o开头的数值表示8进制数，以0d开头的数值表示10进制数，以0x开头的数值表示16进制数。字面量中的_会被自动忽略。\n\n``` ruby\np 123\t\t\t#=> 123\np 1_23\t\t\t#=> 123\np 0123 \t\t#=> 83\np 0o123\t\t#=> 83\np 0d123\t\t#=> 123\np 0x123\t\t#=> 291\n```\n\nInteger对象与Float对象的计算结果为Float对象。\n\nx.**div**(y)\n返回x除以y后的商的整数\n\n``` ruby\np 5.div(2)\t#=> 2\np 5.div(2.2)\t#=> 2\n```\n\nx.**quo**(y)\n返回x除以y后的商，如果x、y都是整数则返回Rational对象\n\n``` ruby\np 5.quo(2)\t#=> (5/2)\np 5.quo(2.2)\t#=> 2.27272727\n```\n\nx.**modulo**(y)\n返回x除以y后的余数，与*x % y*等价\n\n``` ruby\np 5.modulo(2)\t\t\t#=> 1\np 5 % 2\t\t\t\t#=> 1\n```\n\nx.**divmod**(y)\n将x除以y后的商和余数作为数组返回,余数的符号与y的符号一致。\n\n``` ruby\np 5.divmod(2)\t\t\t#=> [2, 1]\np -5.divmod(2)\t\t#=> [-3, 1]\np 5.divmod(-2)\t\t#=> [-3, -1]\n```\n\nx.**remainder**(y)\n返回x除以y的余数，结果的符号与x的符号一致\n\n``` ruby\np 5.remainder(2)\t\t#=> 1\np 5.remainder(-2)\t#=> 1\np -5.remainder(2)\t#=> -1\n```\n\n*注：当除数为0时，Integer类会返回错误，而Float类则会返回Infinity（无限大）或者NaN（Not a Number）。*\n\n``` ruby\np 1 / 0\t\t\t#=> ZeroDivisionError\np 1.0 / 0 \t\t#=> Infinity\np 0 / 0.0\t\t\t#=> NaN\n```\n\n针对数值类型，Ruby提供**Math**模块增强数据的处理功能，包括三角函数，对数函数等常用的函数运算方法。通过调用如下方法可得到**Math**模块提供的方法\n\n``` ruby\nMath.methods\n```\n\n**to_f**方法可将Integer对象转换为Float对象，**to_i**方法可将Float对象转换为Integer对象，to_i方法会将小数点以后的值去掉。通过使用**round**方法可对小数进行四舍五入的处理.**ceil**方法返回比比原数值大得最小整数，**floor**方法返回比原数值小的最大整数。通过**to_r**和**to_c**方法可将数值转换为Rational对象和Complex对象。\n\n``` ruby\np 1.to_f\t\t\t#=> 1.0\np 1.23.to_i\t\t#=> 1\np 1.23.round\t\t#=> 1\np 1.50.round\t\t#=> 2\np 1.23.ceil\t\t#=> 2\np 1.23.floor\t\t#=> 1\np 1.5.to_r\t\t#=> (3/2)\np 1.5.to_c\t\t#=> (1.5+0i)\n```\nInteger类按照指定次数循环处理逻辑\n\n执行指定的n次逻辑\n\n\tn.times do |i|\n\t\t逻辑\n\tend\n\n``` ruby\nary = []\n5.times do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [0, 1, 2, 3, 4]\n```\n从*from*开始循环加对*i*进行加1处理，直到*i*等于*to*\n\n\tfrom.upto(to) do |i|\n\t\t逻辑\n\tend\n\t\n``` ruby\nary = []\n1.upto(5) do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [1, 2, 3, 4, 5]\n```\n\n从*from*开始循环对*i*进行减1处理，直到*i*等于*to*\n\n\tfrom.downto(to) do |i|\n\t\t逻辑\n\tend\n\t\n``` ruby\nary = []\n5.downto(1) do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [5, 4, 3, 2, 1]\n```\n\n从*from*开始循环对*i*进行加*step*处理，直到*i*等于*to*\n\n\tfrom.step(to, step) do |i|\n\t\t逻辑\n\tend\n\t\n``` ruby\nary = []\n1.step(5, 2) do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [1, 3, 5]\n```\n\n\n\n\n","source":"_posts/2015-09-28-ruby-practice-11.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(11)\"\ndate: 2015-09-28 10:33:41 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\nRuby中所有表现数据的类型都称为数值类，他们都是**Numeric**的子类。起详尽的类继承结构如下：\n\n![assets/images/legacy/numberic-inheritance.png](assets/images/legacy/numeric-inheritance.png)\n<!-- more -->\nRuby中一般用到得整数都是在**Fixnum**类范围内的，如果超过了Fixnum的范围，Ruby会自动将其转换为**Bignum**类。\n\n正如上图所示，Ruby可以处理有理数和复数，有理数用**Rational**类表示，复数用**Complex**类表示。其定义形式如下：\n\n1.Rational对象\n\n\tRational(分子，分母)\n\t\n``` ruby\na = Rational(1, 3)\t\t#=> (1/3)\na.to_f\t\t\t\t\t\t#=> 0.3333333\n```\n通过*Rational#to_f*方法可将有理数转为Float对象\n\n2.Complex对象\n\n\tComplex(实数，虚数)\n\t\n``` ruby\na = Complex(1, 2)\t\t#=> (1+2i)\n```\n\n单纯的数字罗列表示10进制整数。以0b开头的数值表示2进制数，以0或者0o开头的数值表示8进制数，以0d开头的数值表示10进制数，以0x开头的数值表示16进制数。字面量中的_会被自动忽略。\n\n``` ruby\np 123\t\t\t#=> 123\np 1_23\t\t\t#=> 123\np 0123 \t\t#=> 83\np 0o123\t\t#=> 83\np 0d123\t\t#=> 123\np 0x123\t\t#=> 291\n```\n\nInteger对象与Float对象的计算结果为Float对象。\n\nx.**div**(y)\n返回x除以y后的商的整数\n\n``` ruby\np 5.div(2)\t#=> 2\np 5.div(2.2)\t#=> 2\n```\n\nx.**quo**(y)\n返回x除以y后的商，如果x、y都是整数则返回Rational对象\n\n``` ruby\np 5.quo(2)\t#=> (5/2)\np 5.quo(2.2)\t#=> 2.27272727\n```\n\nx.**modulo**(y)\n返回x除以y后的余数，与*x % y*等价\n\n``` ruby\np 5.modulo(2)\t\t\t#=> 1\np 5 % 2\t\t\t\t#=> 1\n```\n\nx.**divmod**(y)\n将x除以y后的商和余数作为数组返回,余数的符号与y的符号一致。\n\n``` ruby\np 5.divmod(2)\t\t\t#=> [2, 1]\np -5.divmod(2)\t\t#=> [-3, 1]\np 5.divmod(-2)\t\t#=> [-3, -1]\n```\n\nx.**remainder**(y)\n返回x除以y的余数，结果的符号与x的符号一致\n\n``` ruby\np 5.remainder(2)\t\t#=> 1\np 5.remainder(-2)\t#=> 1\np -5.remainder(2)\t#=> -1\n```\n\n*注：当除数为0时，Integer类会返回错误，而Float类则会返回Infinity（无限大）或者NaN（Not a Number）。*\n\n``` ruby\np 1 / 0\t\t\t#=> ZeroDivisionError\np 1.0 / 0 \t\t#=> Infinity\np 0 / 0.0\t\t\t#=> NaN\n```\n\n针对数值类型，Ruby提供**Math**模块增强数据的处理功能，包括三角函数，对数函数等常用的函数运算方法。通过调用如下方法可得到**Math**模块提供的方法\n\n``` ruby\nMath.methods\n```\n\n**to_f**方法可将Integer对象转换为Float对象，**to_i**方法可将Float对象转换为Integer对象，to_i方法会将小数点以后的值去掉。通过使用**round**方法可对小数进行四舍五入的处理.**ceil**方法返回比比原数值大得最小整数，**floor**方法返回比原数值小的最大整数。通过**to_r**和**to_c**方法可将数值转换为Rational对象和Complex对象。\n\n``` ruby\np 1.to_f\t\t\t#=> 1.0\np 1.23.to_i\t\t#=> 1\np 1.23.round\t\t#=> 1\np 1.50.round\t\t#=> 2\np 1.23.ceil\t\t#=> 2\np 1.23.floor\t\t#=> 1\np 1.5.to_r\t\t#=> (3/2)\np 1.5.to_c\t\t#=> (1.5+0i)\n```\nInteger类按照指定次数循环处理逻辑\n\n执行指定的n次逻辑\n\n\tn.times do |i|\n\t\t逻辑\n\tend\n\n``` ruby\nary = []\n5.times do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [0, 1, 2, 3, 4]\n```\n从*from*开始循环加对*i*进行加1处理，直到*i*等于*to*\n\n\tfrom.upto(to) do |i|\n\t\t逻辑\n\tend\n\t\n``` ruby\nary = []\n1.upto(5) do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [1, 2, 3, 4, 5]\n```\n\n从*from*开始循环对*i*进行减1处理，直到*i*等于*to*\n\n\tfrom.downto(to) do |i|\n\t\t逻辑\n\tend\n\t\n``` ruby\nary = []\n5.downto(1) do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [5, 4, 3, 2, 1]\n```\n\n从*from*开始循环对*i*进行加*step*处理，直到*i*等于*to*\n\n\tfrom.step(to, step) do |i|\n\t\t逻辑\n\tend\n\t\n``` ruby\nary = []\n1.step(5, 2) do |i|\n\tary << i\nend\np ary\t\t\t\t#=> [1, 3, 5]\n```\n\n\n\n\n","slug":"2015-09-28-ruby-practice-11","published":1,"updated":"2023-09-02T18:05:23.566Z","_id":"clm27g4oy0049azv5f6810f90","layout":"post","photos":[],"link":"","content":"<p>Ruby中所有表现数据的类型都称为数值类，他们都是<strong>Numeric</strong>的子类。起详尽的类继承结构如下：</p>\n<p><img src=\"/assets/images/legacy/numeric-inheritance.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/numeric-inheritance.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"assets/images/legacy/numberic-inheritance.png\"></p>\n<span id=\"more\"></span>\n<p>Ruby中一般用到得整数都是在<strong>Fixnum</strong>类范围内的，如果超过了Fixnum的范围，Ruby会自动将其转换为<strong>Bignum</strong>类。</p>\n<p>正如上图所示，Ruby可以处理有理数和复数，有理数用<strong>Rational</strong>类表示，复数用<strong>Complex</strong>类表示。其定义形式如下：</p>\n<p>1.Rational对象</p>\n<pre><code>Rational(分子，分母)\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"title class_\">Rational</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; (1/3)</span></span><br><span class=\"line\">a.to_f\t\t\t\t\t\t<span class=\"comment\">#=&gt; 0.3333333</span></span><br></pre></td></tr></table></figure>\n<p>通过<em>Rational#to_f</em>方法可将有理数转为Float对象</p>\n<p>2.Complex对象</p>\n<pre><code>Complex(实数，虚数)\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"title class_\">Complex</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; (1+2i)</span></span><br></pre></td></tr></table></figure>\n\n<p>单纯的数字罗列表示10进制整数。以0b开头的数值表示2进制数，以0或者0o开头的数值表示8进制数，以0d开头的数值表示10进制数，以0x开头的数值表示16进制数。字面量中的_会被自动忽略。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">123</span>\t\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">p <span class=\"number\">1_23</span>\t\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">p <span class=\"number\">0123</span> \t\t<span class=\"comment\">#=&gt; 83</span></span><br><span class=\"line\">p <span class=\"number\">0o123</span>\t\t<span class=\"comment\">#=&gt; 83</span></span><br><span class=\"line\">p <span class=\"number\">0d123</span>\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">p <span class=\"number\">0x123</span>\t\t<span class=\"comment\">#=&gt; 291</span></span><br></pre></td></tr></table></figure>\n\n<p>Integer对象与Float对象的计算结果为Float对象。</p>\n<p>x.<strong>div</strong>(y)<br>返回x除以y后的商的整数</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.div(<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.div(<span class=\"number\">2.2</span>)\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>quo</strong>(y)<br>返回x除以y后的商，如果x、y都是整数则返回Rational对象</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.quo(<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; (5/2)</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.quo(<span class=\"number\">2.2</span>)\t<span class=\"comment\">#=&gt; 2.27272727</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>modulo</strong>(y)<br>返回x除以y后的余数，与<em>x % y</em>等价</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.modulo(<span class=\"number\">2</span>)\t\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">5</span> % <span class=\"number\">2</span>\t\t\t\t<span class=\"comment\">#=&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>divmod</strong>(y)<br>将x除以y后的商和余数作为数组返回,余数的符号与y的符号一致。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.divmod(<span class=\"number\">2</span>)\t\t\t<span class=\"comment\">#=&gt; [2, 1]</span></span><br><span class=\"line\">p -<span class=\"number\">5</span>.divmod(<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [-3, 1]</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.divmod(-<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [-3, -1]</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>remainder</strong>(y)<br>返回x除以y的余数，结果的符号与x的符号一致</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.remainder(<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.remainder(-<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p -<span class=\"number\">5</span>.remainder(<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; -1</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：当除数为0时，Integer类会返回错误，而Float类则会返回Infinity（无限大）或者NaN（Not a Number）。</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">1</span> / <span class=\"number\">0</span>\t\t\t<span class=\"comment\">#=&gt; ZeroDivisionError</span></span><br><span class=\"line\">p <span class=\"number\">1.0</span> / <span class=\"number\">0</span> \t\t<span class=\"comment\">#=&gt; Infinity</span></span><br><span class=\"line\">p <span class=\"number\">0</span> / <span class=\"number\">0.0</span>\t\t\t<span class=\"comment\">#=&gt; NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>针对数值类型，Ruby提供<strong>Math</strong>模块增强数据的处理功能，包括三角函数，对数函数等常用的函数运算方法。通过调用如下方法可得到<strong>Math</strong>模块提供的方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.methods</span><br></pre></td></tr></table></figure>\n\n<p><strong>to_f</strong>方法可将Integer对象转换为Float对象，<strong>to_i</strong>方法可将Float对象转换为Integer对象，to_i方法会将小数点以后的值去掉。通过使用<strong>round</strong>方法可对小数进行四舍五入的处理.<strong>ceil</strong>方法返回比比原数值大得最小整数，<strong>floor</strong>方法返回比原数值小的最大整数。通过<strong>to_r</strong>和<strong>to_c</strong>方法可将数值转换为Rational对象和Complex对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">1</span>.to_f\t\t\t<span class=\"comment\">#=&gt; 1.0</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.to_i\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.round\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">1.50</span>.round\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.ceil\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.floor\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">1.5</span>.to_r\t\t<span class=\"comment\">#=&gt; (3/2)</span></span><br><span class=\"line\">p <span class=\"number\">1.5</span>.to_c\t\t<span class=\"comment\">#=&gt; (1.5+0i)</span></span><br></pre></td></tr></table></figure>\n<p>Integer类按照指定次数循环处理逻辑</p>\n<p>执行指定的n次逻辑</p>\n<pre><code>n.times do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">5</span>.times <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>从<em>from</em>开始循环加对<em>i</em>进行加1处理，直到<em>i</em>等于<em>to</em></p>\n<pre><code>from.upto(to) do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">1</span>.upto(<span class=\"number\">5</span>) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>从<em>from</em>开始循环对<em>i</em>进行减1处理，直到<em>i</em>等于<em>to</em></p>\n<pre><code>from.downto(to) do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">5</span>.downto(<span class=\"number\">1</span>) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n\n<p>从<em>from</em>开始循环对<em>i</em>进行加<em>step</em>处理，直到<em>i</em>等于<em>to</em></p>\n<pre><code>from.step(to, step) do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">1</span>.step(<span class=\"number\">5</span>, <span class=\"number\">2</span>) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [1, 3, 5]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>Ruby中所有表现数据的类型都称为数值类，他们都是<strong>Numeric</strong>的子类。起详尽的类继承结构如下：</p>\n<p><img src=\"/assets/images/legacy/numeric-inheritance.png\" alt=\"assets/images/legacy/numberic-inheritance.png\"></p>","more":"<p>Ruby中一般用到得整数都是在<strong>Fixnum</strong>类范围内的，如果超过了Fixnum的范围，Ruby会自动将其转换为<strong>Bignum</strong>类。</p>\n<p>正如上图所示，Ruby可以处理有理数和复数，有理数用<strong>Rational</strong>类表示，复数用<strong>Complex</strong>类表示。其定义形式如下：</p>\n<p>1.Rational对象</p>\n<pre><code>Rational(分子，分母)\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"title class_\">Rational</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; (1/3)</span></span><br><span class=\"line\">a.to_f\t\t\t\t\t\t<span class=\"comment\">#=&gt; 0.3333333</span></span><br></pre></td></tr></table></figure>\n<p>通过<em>Rational#to_f</em>方法可将有理数转为Float对象</p>\n<p>2.Complex对象</p>\n<pre><code>Complex(实数，虚数)\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"title class_\">Complex</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; (1+2i)</span></span><br></pre></td></tr></table></figure>\n\n<p>单纯的数字罗列表示10进制整数。以0b开头的数值表示2进制数，以0或者0o开头的数值表示8进制数，以0d开头的数值表示10进制数，以0x开头的数值表示16进制数。字面量中的_会被自动忽略。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">123</span>\t\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">p <span class=\"number\">1_23</span>\t\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">p <span class=\"number\">0123</span> \t\t<span class=\"comment\">#=&gt; 83</span></span><br><span class=\"line\">p <span class=\"number\">0o123</span>\t\t<span class=\"comment\">#=&gt; 83</span></span><br><span class=\"line\">p <span class=\"number\">0d123</span>\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">p <span class=\"number\">0x123</span>\t\t<span class=\"comment\">#=&gt; 291</span></span><br></pre></td></tr></table></figure>\n\n<p>Integer对象与Float对象的计算结果为Float对象。</p>\n<p>x.<strong>div</strong>(y)<br>返回x除以y后的商的整数</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.div(<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.div(<span class=\"number\">2.2</span>)\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>quo</strong>(y)<br>返回x除以y后的商，如果x、y都是整数则返回Rational对象</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.quo(<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; (5/2)</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.quo(<span class=\"number\">2.2</span>)\t<span class=\"comment\">#=&gt; 2.27272727</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>modulo</strong>(y)<br>返回x除以y后的余数，与<em>x % y</em>等价</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.modulo(<span class=\"number\">2</span>)\t\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">5</span> % <span class=\"number\">2</span>\t\t\t\t<span class=\"comment\">#=&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>divmod</strong>(y)<br>将x除以y后的商和余数作为数组返回,余数的符号与y的符号一致。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.divmod(<span class=\"number\">2</span>)\t\t\t<span class=\"comment\">#=&gt; [2, 1]</span></span><br><span class=\"line\">p -<span class=\"number\">5</span>.divmod(<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [-3, 1]</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.divmod(-<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [-3, -1]</span></span><br></pre></td></tr></table></figure>\n\n<p>x.<strong>remainder</strong>(y)<br>返回x除以y的余数，结果的符号与x的符号一致</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">5</span>.remainder(<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">5</span>.remainder(-<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p -<span class=\"number\">5</span>.remainder(<span class=\"number\">2</span>)\t<span class=\"comment\">#=&gt; -1</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：当除数为0时，Integer类会返回错误，而Float类则会返回Infinity（无限大）或者NaN（Not a Number）。</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">1</span> / <span class=\"number\">0</span>\t\t\t<span class=\"comment\">#=&gt; ZeroDivisionError</span></span><br><span class=\"line\">p <span class=\"number\">1.0</span> / <span class=\"number\">0</span> \t\t<span class=\"comment\">#=&gt; Infinity</span></span><br><span class=\"line\">p <span class=\"number\">0</span> / <span class=\"number\">0.0</span>\t\t\t<span class=\"comment\">#=&gt; NaN</span></span><br></pre></td></tr></table></figure>\n\n<p>针对数值类型，Ruby提供<strong>Math</strong>模块增强数据的处理功能，包括三角函数，对数函数等常用的函数运算方法。通过调用如下方法可得到<strong>Math</strong>模块提供的方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Math</span>.methods</span><br></pre></td></tr></table></figure>\n\n<p><strong>to_f</strong>方法可将Integer对象转换为Float对象，<strong>to_i</strong>方法可将Float对象转换为Integer对象，to_i方法会将小数点以后的值去掉。通过使用<strong>round</strong>方法可对小数进行四舍五入的处理.<strong>ceil</strong>方法返回比比原数值大得最小整数，<strong>floor</strong>方法返回比原数值小的最大整数。通过<strong>to_r</strong>和<strong>to_c</strong>方法可将数值转换为Rational对象和Complex对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p <span class=\"number\">1</span>.to_f\t\t\t<span class=\"comment\">#=&gt; 1.0</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.to_i\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.round\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">1.50</span>.round\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.ceil\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p <span class=\"number\">1.23</span>.floor\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p <span class=\"number\">1.5</span>.to_r\t\t<span class=\"comment\">#=&gt; (3/2)</span></span><br><span class=\"line\">p <span class=\"number\">1.5</span>.to_c\t\t<span class=\"comment\">#=&gt; (1.5+0i)</span></span><br></pre></td></tr></table></figure>\n<p>Integer类按照指定次数循环处理逻辑</p>\n<p>执行指定的n次逻辑</p>\n<pre><code>n.times do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">5</span>.times <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>从<em>from</em>开始循环加对<em>i</em>进行加1处理，直到<em>i</em>等于<em>to</em></p>\n<pre><code>from.upto(to) do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">1</span>.upto(<span class=\"number\">5</span>) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>从<em>from</em>开始循环对<em>i</em>进行减1处理，直到<em>i</em>等于<em>to</em></p>\n<pre><code>from.downto(to) do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">5</span>.downto(<span class=\"number\">1</span>) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n\n<p>从<em>from</em>开始循环对<em>i</em>进行加<em>step</em>处理，直到<em>i</em>等于<em>to</em></p>\n<pre><code>from.step(to, step) do |i|\n    逻辑\nend\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = []</span><br><span class=\"line\"><span class=\"number\">1</span>.step(<span class=\"number\">5</span>, <span class=\"number\">2</span>) <span class=\"keyword\">do</span> |<span class=\"params\">i</span>|</span><br><span class=\"line\">\tary &lt;&lt; i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [1, 3, 5]</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(12)","date":"2015-10-13T02:25:41.000Z","comments":1,"_content":"\n数组(**Array**)也是Ruby中表现一组数据的对象\n\n#### 数组的创建\n创建方式有一下几种：   \n1.使用**Array.new**   \nArray#new方法可带两个可选参数，第1个参数表示数组中得个数，第2个参数表示每个元素初始值。如果没有指定第2个参数，其元素的初始值为**nil**。如果不带参数则会创建一个空数组。\n\n``` ruby\n#不带参数c\nary = Array.new\np ary\t\t\t\t\t#=> []\n\n#带1个参数\nary = Array.new(3)\np ary\t\t\t\t\t#=> [nil, nil, nil]\n\n#带2个参数\nary = Array.new(3, 5)\np ary\t\t\t\t\t#=> [5, 5, 5]\n```\n<!-- more -->\n2.使用**%w**与**%i**   \n**%w**用于创建不包含空白的字符串数组, 使用此方法创建字符串数组更加简洁。\n\n``` ruby\n%w(This is ruby)\t\t#=> [\"This\", \"is\", \"ruby\"]\n```\n\n**%i**用于创建符号(Symbol)数组。\n\n``` ruby\n%i(This is ruby) \t#=> [:This, :is, :ruby]\n```\n\n使用**%w**和**%i**创建数组时用到了(). 其实还可以用很多字符来替代，不过建议使用**()**,**<>**,**||**.\n\n3.使用**to_a**方法\n\n``` ruby\nhash={name: \"yu\", gender: \"male\"}\t\t\t#=> {:name=>\"yu\", :gender=>\"male\"}\nhash.to_a\t\t\t\t\t\t\t\t\t\t#=> [[:name, \"yu\"], [:gender, \"male\"]]\n```\n\n4.使用**split**方法   \n对逗号或空白字符间隔的字符串可以使用split方法来创建数组\n\n``` ruby\n\"this is ruby\".split()\t\t\t\t#=> [\"this\", \"is\", \"ruby\"]\n```\n\n#### 获取元素\n获取元素的方法有以下几种：   \n\n1.使用**[]**   \n(a) **ary[n]**, 获取索引值为n的元素，当索引值为负数时，从数组的末尾开始获取元素。如果指定的索引值大于元素个数则返回nil。 \n\n``` ruby\nary = [1, 2, 3, 4, 5]\t\t\t\t\nary[1]\t\t\t\t#=> 2\nary[-1]\t\t\t#=> 5\n```  \n\n(b) **ary[n..m]**, 获取从a[n]到a[m]的元素，并返回新的数组。如果m大于数组的长度，返回的结果与指定数组最后一个元素是一样的。\n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[1..3]\t\t\t#=> [2, 3, 4]\nary[1..7]\t\t\t#=>\t [2, 3, 4, 5]\t\n```\n\n(c) **ary[n...m]**, 获取从a[n]到a[m-1]的元素，并返回新数组    \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[1...3]\t\t\t#=> [2, 3]\nary[1...7]\t\t\t#=>\t [2, 3, 4, 5]\t\n```\n\n(d) **ary[n, len]**, 获取从a[n]开始之后的len个元素，并返回新数组. 如果len的长度大于从n开始后数组的剩余长度，则返回的结果与指定数组最后一个元素是一样的。\n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[1, 3]\t\t\t\t#=> [2, 3, 4]\nary[2, 7]\t\t\t\t#=> [3, 4, 5]\n```\n\n2.使用**at**方法    \nary.at(n)与ary[n]等价    \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary.at(1)\t\t\t\t#=> 2\nary[1]\t\t\t\t\t#=> 2\n```\n\n3.使用**slice**方法   \nary.slice(n..m)与ary[n..m]等价，ary.slice(n...m)与ary[n...m]等价，ary.slice(n, len)与ary[n, len]等价   \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary.slice(1..3)\t\t#=> [2, 3, 4]\nary.slice(1...3)\t\t#=> [2, 3]\nary.slice(1, 3)\t\t#=> [2, 3, 4]\n```\n\n4.使用**values_at**方法\n可以通过此方法来获取多个索引的元素, 其用法如下\n\n\tary.values_at(n1, n2, ...)\n    \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary.values_at(0, 2, 4)\t\t\t\t#=> [1, 3, 5]\nary.values_at(1, 3, 5)\t\t\t\t#=> [2, 4, nil]\n```\n\n#### 元素赋值\n使用[],at,slice方法还可以给元素赋值\n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[0] = \"a\"\t\t\t\t\t\t#=> [\"a\", 2, 3, 4, 5]\nary[1...3] = [\"b\",\"c\"]\t\t\t#=> [\"a\", \"b\", \"c\", 4, 5]\nary[3..3] = \"d\"\t\t\t\t\t#=> [\"a\", \"b\", \"c\", \"d\", 5]\nary[4, 1] = \"e\"\t\t\t\t\t#=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n#### 元素插入\n插入元素其实就是对0个元素进行赋值，因此指定[n, 0]后，就会在索引值为n的元素前插入新元素。   \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[2, 0] = 10\t\t\t\t\t#=> [1, 2, 10, 3, 4, 5]\n```\n\n#### 数组作为集合使用\n交集：取出同时属于两个集合的元素，并创建新的集合\n\n\tary = ary1 & ary2\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 & ary2\t\t\t#=> [1, 3]\n```\n\n并集：取出两个集合中的所有元素，并创建新的集合\n\n\tary = ary1 | ary2\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 | ary2\t\t\t#=> [1, 2, 3, 5]\n```\n\n集合的差：把某个集合中属于另外一个集合的元素删除，并创建新的集合\n\n\tary = ary1 - ary2\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 - ary2\t\t\t#=> [2]\n```\n\n*注意：连接数组除了可以使用**|**外还可以使用**+**。但是这两种方法返回的结果是不一样的。即使用|相同的元素只有一个，使用+相同的元素会重复存在*\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 | ary2\t\t\t#=> [1, 2, 3, 5]\nary = ary1 + ary2\t\t\t#=> [1, 2, 3, 1, 3, 5]\n```\n\n#### 数组作为队列和栈\n|          | 对数组开始元素的操作 | 对数组末尾元素的操作 |\n|----------|---------------------:|----------------------|\n| 追加元素 | unshift              |     push               |\n| 删除元素 | shift                |     pop                |\n| 引用元素 | first                |     last               |\n\n使用**push**方法和**shift**方法可以实现队列。使用**push**方法和**pop**方法可以实现栈。\n\n**shift**方法和**pop**方法不只是获取数组元素，还会把该元素从数组中删除。如果只是想单纯地引用元素，应该是用\n**first**和**last**方法。\n\n1.ary.**unshift**(item)   \n将item元素添加到数组的开头   \n\n``` ruby\nary = [1, 2, 3]\nary.unshift(0)\t\t\t#=> [0, 1, 2, 3]\n```\n\n2.ary.**push**(item), ary **<<** item    \n**<<**与**push**是等价的方法，在数组的末尾添加新元素item   \n\n``` ruby\nary = [1, 2, 3]\nary.push(4)\t\t\t\t#=> [1, 2, 3, 4]\nary << 5\t\t\t\t\t#=> [1, 2, 3, 4, 5]\n```\n\n3.ary1.**concat**(ary2)   \n连接数组ary1和数组ary2. concat是具有破坏性的方法。会将ary2的元素直接插入到ary1数组的后面。**+**也是连接两个数组的方法，但是不具破坏性，会生成新的数组。\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [2, 3, 4]\nary1.concat(ary2)\np ary1\t\t\t\t\t\t#=> [1, 2, 3, 2, 3, 4]\n```\n\n*注：能够改变对象值的方法称为具有破坏性的方法，比如pop方法、shift方法等。有些方法后面加上**!**的也是破坏性方法*\n\n4.ary.**compact** 与ary.**compact!**   \n从数组ary中删除所有nil元素     \n\n``` ruby\nary = [nil, 1, nil, 2]\nary.compact\t\t\t\t#=> [1, 2]\n```\n\n5.ary.**delete**(item)和ary.**delete_at**(n)\n从数组a中删除item元素。 第2个方法删除ary[n]元素。   \n\n``` ruby\nary = [1, 2, 3]\nary.delete(2)\t\t\t\t\np ary\t\t\t\t\t\t#=> [1, 3]\nary.delete_at(0)\np ary\t\t\t\t\t\t#=> [3]\n```\n\n6.ary.**delete_if**{ |item| ...}    \nary.**reject**{ |item| ...}   \nary.**reject!**{ |item| ..}    \n\n判断数组ary中的各元素item，如果块的执行结果为真，则从数组ary中删除item。**delete_if**和**reject!**方法都是具有破坏性的方法。\n\n```ruby\nary = [1, 2, 3]\nary.delete_if { |item| item > 2}\np ary\t\t\t\t#=> [1, 2]\nary.reject! { |item| item < 2}\np ary\t\t\t\t#=> [2]\n```\n\n7.ary.**slice**(n)    \nary.**slice**(n..m)    \nary.**slice!**(n, len)    \n删除数组ary中指定的部分，并返回删除部分的值。\n\n``` ruby\nary = [1, 2, 3, 4, 5]\np ary.slice!(4)\t\t\t#=> 5\np ary.slice!(2..3)\t\t#=> [3, 4]\np ary.slice(1, 1)\t\t#=> [2]\n```\n\n8.ary.**uniq**, ary.**uniq!**删除数组ary中重复的元素。\n\n``` ruby\nary = [1, 2, 2, 3, 1]\nary.uniq\t\t\t#=> [1, 2,3]\n```\n\n9.ary.**shift**. 删除数组ary开头的元素，并返回删除的值。\n\n``` ruby\nary = [1, 2, 3]j\nary.shift\t\t#=> 1\np ary\t\t\t#=> [2, 3]\n```\n\n10.ary.**pop**. 删除数组ary末尾的元素，并返回删除的值。\n\n``` ruby\nary = [1, 2, 3]\nary.pop\t\t#=> 3\np ary\t\t\t#=> [1, 2]\n```\n\n\n\n\n\n","source":"_posts/2015-10-13-ruby-practice-12.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(12)\"\ndate: 2015-10-13 10:25:41 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n数组(**Array**)也是Ruby中表现一组数据的对象\n\n#### 数组的创建\n创建方式有一下几种：   \n1.使用**Array.new**   \nArray#new方法可带两个可选参数，第1个参数表示数组中得个数，第2个参数表示每个元素初始值。如果没有指定第2个参数，其元素的初始值为**nil**。如果不带参数则会创建一个空数组。\n\n``` ruby\n#不带参数c\nary = Array.new\np ary\t\t\t\t\t#=> []\n\n#带1个参数\nary = Array.new(3)\np ary\t\t\t\t\t#=> [nil, nil, nil]\n\n#带2个参数\nary = Array.new(3, 5)\np ary\t\t\t\t\t#=> [5, 5, 5]\n```\n<!-- more -->\n2.使用**%w**与**%i**   \n**%w**用于创建不包含空白的字符串数组, 使用此方法创建字符串数组更加简洁。\n\n``` ruby\n%w(This is ruby)\t\t#=> [\"This\", \"is\", \"ruby\"]\n```\n\n**%i**用于创建符号(Symbol)数组。\n\n``` ruby\n%i(This is ruby) \t#=> [:This, :is, :ruby]\n```\n\n使用**%w**和**%i**创建数组时用到了(). 其实还可以用很多字符来替代，不过建议使用**()**,**<>**,**||**.\n\n3.使用**to_a**方法\n\n``` ruby\nhash={name: \"yu\", gender: \"male\"}\t\t\t#=> {:name=>\"yu\", :gender=>\"male\"}\nhash.to_a\t\t\t\t\t\t\t\t\t\t#=> [[:name, \"yu\"], [:gender, \"male\"]]\n```\n\n4.使用**split**方法   \n对逗号或空白字符间隔的字符串可以使用split方法来创建数组\n\n``` ruby\n\"this is ruby\".split()\t\t\t\t#=> [\"this\", \"is\", \"ruby\"]\n```\n\n#### 获取元素\n获取元素的方法有以下几种：   \n\n1.使用**[]**   \n(a) **ary[n]**, 获取索引值为n的元素，当索引值为负数时，从数组的末尾开始获取元素。如果指定的索引值大于元素个数则返回nil。 \n\n``` ruby\nary = [1, 2, 3, 4, 5]\t\t\t\t\nary[1]\t\t\t\t#=> 2\nary[-1]\t\t\t#=> 5\n```  \n\n(b) **ary[n..m]**, 获取从a[n]到a[m]的元素，并返回新的数组。如果m大于数组的长度，返回的结果与指定数组最后一个元素是一样的。\n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[1..3]\t\t\t#=> [2, 3, 4]\nary[1..7]\t\t\t#=>\t [2, 3, 4, 5]\t\n```\n\n(c) **ary[n...m]**, 获取从a[n]到a[m-1]的元素，并返回新数组    \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[1...3]\t\t\t#=> [2, 3]\nary[1...7]\t\t\t#=>\t [2, 3, 4, 5]\t\n```\n\n(d) **ary[n, len]**, 获取从a[n]开始之后的len个元素，并返回新数组. 如果len的长度大于从n开始后数组的剩余长度，则返回的结果与指定数组最后一个元素是一样的。\n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[1, 3]\t\t\t\t#=> [2, 3, 4]\nary[2, 7]\t\t\t\t#=> [3, 4, 5]\n```\n\n2.使用**at**方法    \nary.at(n)与ary[n]等价    \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary.at(1)\t\t\t\t#=> 2\nary[1]\t\t\t\t\t#=> 2\n```\n\n3.使用**slice**方法   \nary.slice(n..m)与ary[n..m]等价，ary.slice(n...m)与ary[n...m]等价，ary.slice(n, len)与ary[n, len]等价   \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary.slice(1..3)\t\t#=> [2, 3, 4]\nary.slice(1...3)\t\t#=> [2, 3]\nary.slice(1, 3)\t\t#=> [2, 3, 4]\n```\n\n4.使用**values_at**方法\n可以通过此方法来获取多个索引的元素, 其用法如下\n\n\tary.values_at(n1, n2, ...)\n    \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary.values_at(0, 2, 4)\t\t\t\t#=> [1, 3, 5]\nary.values_at(1, 3, 5)\t\t\t\t#=> [2, 4, nil]\n```\n\n#### 元素赋值\n使用[],at,slice方法还可以给元素赋值\n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[0] = \"a\"\t\t\t\t\t\t#=> [\"a\", 2, 3, 4, 5]\nary[1...3] = [\"b\",\"c\"]\t\t\t#=> [\"a\", \"b\", \"c\", 4, 5]\nary[3..3] = \"d\"\t\t\t\t\t#=> [\"a\", \"b\", \"c\", \"d\", 5]\nary[4, 1] = \"e\"\t\t\t\t\t#=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n\n#### 元素插入\n插入元素其实就是对0个元素进行赋值，因此指定[n, 0]后，就会在索引值为n的元素前插入新元素。   \n\n``` ruby\nary = [1, 2, 3, 4, 5]\nary[2, 0] = 10\t\t\t\t\t#=> [1, 2, 10, 3, 4, 5]\n```\n\n#### 数组作为集合使用\n交集：取出同时属于两个集合的元素，并创建新的集合\n\n\tary = ary1 & ary2\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 & ary2\t\t\t#=> [1, 3]\n```\n\n并集：取出两个集合中的所有元素，并创建新的集合\n\n\tary = ary1 | ary2\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 | ary2\t\t\t#=> [1, 2, 3, 5]\n```\n\n集合的差：把某个集合中属于另外一个集合的元素删除，并创建新的集合\n\n\tary = ary1 - ary2\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 - ary2\t\t\t#=> [2]\n```\n\n*注意：连接数组除了可以使用**|**外还可以使用**+**。但是这两种方法返回的结果是不一样的。即使用|相同的元素只有一个，使用+相同的元素会重复存在*\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [1, 3, 5]\nary = ary1 | ary2\t\t\t#=> [1, 2, 3, 5]\nary = ary1 + ary2\t\t\t#=> [1, 2, 3, 1, 3, 5]\n```\n\n#### 数组作为队列和栈\n|          | 对数组开始元素的操作 | 对数组末尾元素的操作 |\n|----------|---------------------:|----------------------|\n| 追加元素 | unshift              |     push               |\n| 删除元素 | shift                |     pop                |\n| 引用元素 | first                |     last               |\n\n使用**push**方法和**shift**方法可以实现队列。使用**push**方法和**pop**方法可以实现栈。\n\n**shift**方法和**pop**方法不只是获取数组元素，还会把该元素从数组中删除。如果只是想单纯地引用元素，应该是用\n**first**和**last**方法。\n\n1.ary.**unshift**(item)   \n将item元素添加到数组的开头   \n\n``` ruby\nary = [1, 2, 3]\nary.unshift(0)\t\t\t#=> [0, 1, 2, 3]\n```\n\n2.ary.**push**(item), ary **<<** item    \n**<<**与**push**是等价的方法，在数组的末尾添加新元素item   \n\n``` ruby\nary = [1, 2, 3]\nary.push(4)\t\t\t\t#=> [1, 2, 3, 4]\nary << 5\t\t\t\t\t#=> [1, 2, 3, 4, 5]\n```\n\n3.ary1.**concat**(ary2)   \n连接数组ary1和数组ary2. concat是具有破坏性的方法。会将ary2的元素直接插入到ary1数组的后面。**+**也是连接两个数组的方法，但是不具破坏性，会生成新的数组。\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [2, 3, 4]\nary1.concat(ary2)\np ary1\t\t\t\t\t\t#=> [1, 2, 3, 2, 3, 4]\n```\n\n*注：能够改变对象值的方法称为具有破坏性的方法，比如pop方法、shift方法等。有些方法后面加上**!**的也是破坏性方法*\n\n4.ary.**compact** 与ary.**compact!**   \n从数组ary中删除所有nil元素     \n\n``` ruby\nary = [nil, 1, nil, 2]\nary.compact\t\t\t\t#=> [1, 2]\n```\n\n5.ary.**delete**(item)和ary.**delete_at**(n)\n从数组a中删除item元素。 第2个方法删除ary[n]元素。   \n\n``` ruby\nary = [1, 2, 3]\nary.delete(2)\t\t\t\t\np ary\t\t\t\t\t\t#=> [1, 3]\nary.delete_at(0)\np ary\t\t\t\t\t\t#=> [3]\n```\n\n6.ary.**delete_if**{ |item| ...}    \nary.**reject**{ |item| ...}   \nary.**reject!**{ |item| ..}    \n\n判断数组ary中的各元素item，如果块的执行结果为真，则从数组ary中删除item。**delete_if**和**reject!**方法都是具有破坏性的方法。\n\n```ruby\nary = [1, 2, 3]\nary.delete_if { |item| item > 2}\np ary\t\t\t\t#=> [1, 2]\nary.reject! { |item| item < 2}\np ary\t\t\t\t#=> [2]\n```\n\n7.ary.**slice**(n)    \nary.**slice**(n..m)    \nary.**slice!**(n, len)    \n删除数组ary中指定的部分，并返回删除部分的值。\n\n``` ruby\nary = [1, 2, 3, 4, 5]\np ary.slice!(4)\t\t\t#=> 5\np ary.slice!(2..3)\t\t#=> [3, 4]\np ary.slice(1, 1)\t\t#=> [2]\n```\n\n8.ary.**uniq**, ary.**uniq!**删除数组ary中重复的元素。\n\n``` ruby\nary = [1, 2, 2, 3, 1]\nary.uniq\t\t\t#=> [1, 2,3]\n```\n\n9.ary.**shift**. 删除数组ary开头的元素，并返回删除的值。\n\n``` ruby\nary = [1, 2, 3]j\nary.shift\t\t#=> 1\np ary\t\t\t#=> [2, 3]\n```\n\n10.ary.**pop**. 删除数组ary末尾的元素，并返回删除的值。\n\n``` ruby\nary = [1, 2, 3]\nary.pop\t\t#=> 3\np ary\t\t\t#=> [1, 2]\n```\n\n\n\n\n\n","slug":"2015-10-13-ruby-practice-12","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4oz004bazv5hj5i7ko3","layout":"post","photos":[],"link":"","content":"<p>数组(<strong>Array</strong>)也是Ruby中表现一组数据的对象</p>\n<h4 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h4><p>创建方式有一下几种：<br>1.使用<strong>Array.new</strong><br>Array#new方法可带两个可选参数，第1个参数表示数组中得个数，第2个参数表示每个元素初始值。如果没有指定第2个参数，其元素的初始值为<strong>nil</strong>。如果不带参数则会创建一个空数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#不带参数c</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new</span><br><span class=\"line\">p ary\t\t\t\t\t<span class=\"comment\">#=&gt; []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#带1个参数</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t<span class=\"comment\">#=&gt; [nil, nil, nil]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#带2个参数</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t<span class=\"comment\">#=&gt; [5, 5, 5]</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>2.使用**%w<strong>与</strong>%i**<br><strong>%w</strong>用于创建不包含空白的字符串数组, 使用此方法创建字符串数组更加简洁。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">%w(This is ruby)</span>\t\t<span class=\"comment\">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>%i</strong>用于创建符号(Symbol)数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%i(<span class=\"title class_\">This</span> is ruby) \t<span class=\"comment\">#=&gt; [:This, :is, :ruby]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用**%w<strong>和</strong>%i<strong>创建数组时用到了(). 其实还可以用很多字符来替代，不过建议使用</strong>()<strong>,</strong>&lt;&gt;<strong>,</strong>||**.</p>\n<p>3.使用<strong>to_a</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash=&#123;<span class=\"symbol\">name:</span> <span class=\"string\">&quot;yu&quot;</span>, <span class=\"symbol\">gender:</span> <span class=\"string\">&quot;male&quot;</span>&#125;\t\t\t<span class=\"comment\">#=&gt; &#123;:name=&gt;&quot;yu&quot;, :gender=&gt;&quot;male&quot;&#125;</span></span><br><span class=\"line\">hash.to_a\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; [[:name, &quot;yu&quot;], [:gender, &quot;male&quot;]]</span></span><br></pre></td></tr></table></figure>\n\n<p>4.使用<strong>split</strong>方法<br>对逗号或空白字符间隔的字符串可以使用split方法来创建数组</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;this is ruby&quot;</span>.split()\t\t\t\t<span class=\"comment\">#=&gt; [&quot;this&quot;, &quot;is&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h4><p>获取元素的方法有以下几种：   </p>\n<p>1.使用**[]**<br>(a) <strong>ary[n]</strong>, 获取索引值为n的元素，当索引值为负数时，从数组的末尾开始获取元素。如果指定的索引值大于元素个数则返回nil。 </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]\t\t\t\t</span><br><span class=\"line\">ary[<span class=\"number\">1</span>]\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">ary[-<span class=\"number\">1</span>]\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">(b) **ary[n..m]**, 获取从a[n]到a[m]的元素，并返回新的数组。如果m大于数组的长度，返回的结果与指定数组最后一个元素是一样的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> ruby</span><br><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">1</span>..<span class=\"number\">3</span>]\t\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>..<span class=\"number\">7</span>]\t\t\t<span class=\"comment\">#=&gt;\t [2, 3, 4, 5]\t</span></span><br></pre></td></tr></table></figure>\n\n<p>(c) <strong>ary[n…m]</strong>, 获取从a[n]到a[m-1]的元素，并返回新数组    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">1</span>...<span class=\"number\">3</span>]\t\t\t<span class=\"comment\">#=&gt; [2, 3]</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>...<span class=\"number\">7</span>]\t\t\t<span class=\"comment\">#=&gt;\t [2, 3, 4, 5]\t</span></span><br></pre></td></tr></table></figure>\n\n<p>(d) <strong>ary[n, len]</strong>, 获取从a[n]开始之后的len个元素，并返回新数组. 如果len的长度大于从n开始后数组的剩余长度，则返回的结果与指定数组最后一个元素是一样的。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">1</span>, <span class=\"number\">3</span>]\t\t\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br><span class=\"line\">ary[<span class=\"number\">2</span>, <span class=\"number\">7</span>]\t\t\t\t<span class=\"comment\">#=&gt; [3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>2.使用<strong>at</strong>方法<br>ary.at(n)与ary[n]等价    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary.at(<span class=\"number\">1</span>)\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>]\t\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用<strong>slice</strong>方法<br>ary.slice(n..m)与ary[n..m]等价，ary.slice(n…m)与ary[n…m]等价，ary.slice(n, len)与ary[n, len]等价   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary.slice(<span class=\"number\">1</span>..<span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br><span class=\"line\">ary.slice(<span class=\"number\">1</span>...<span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [2, 3]</span></span><br><span class=\"line\">ary.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>4.使用<strong>values_at</strong>方法<br>可以通过此方法来获取多个索引的元素, 其用法如下</p>\n<pre><code>ary.values_at(n1, n2, ...)\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary.values_at(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)\t\t\t\t<span class=\"comment\">#=&gt; [1, 3, 5]</span></span><br><span class=\"line\">ary.values_at(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>)\t\t\t\t<span class=\"comment\">#=&gt; [2, 4, nil]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元素赋值\"><a href=\"#元素赋值\" class=\"headerlink\" title=\"元素赋值\"></a>元素赋值</h4><p>使用[],at,slice方法还可以给元素赋值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">0</span>] = <span class=\"string\">&quot;a&quot;</span>\t\t\t\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, 2, 3, 4, 5]</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>...<span class=\"number\">3</span>] = [<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 4, 5]</span></span><br><span class=\"line\">ary[<span class=\"number\">3</span>..<span class=\"number\">3</span>] = <span class=\"string\">&quot;d&quot;</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 5]</span></span><br><span class=\"line\">ary[<span class=\"number\">4</span>, <span class=\"number\">1</span>] = <span class=\"string\">&quot;e&quot;</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元素插入\"><a href=\"#元素插入\" class=\"headerlink\" title=\"元素插入\"></a>元素插入</h4><p>插入元素其实就是对0个元素进行赋值，因此指定[n, 0]后，就会在索引值为n的元素前插入新元素。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">2</span>, <span class=\"number\">0</span>] = <span class=\"number\">10</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 10, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组作为集合使用\"><a href=\"#数组作为集合使用\" class=\"headerlink\" title=\"数组作为集合使用\"></a>数组作为集合使用</h4><p>交集：取出同时属于两个集合的元素，并创建新的集合</p>\n<pre><code>ary = ary1 &amp; ary2\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 &amp; ary2\t\t\t<span class=\"comment\">#=&gt; [1, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>并集：取出两个集合中的所有元素，并创建新的集合</p>\n<pre><code>ary = ary1 | ary2\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 |<span class=\"params\"> ary2\t\t\t#=&gt; [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>集合的差：把某个集合中属于另外一个集合的元素删除，并创建新的集合</p>\n<pre><code>ary = ary1 - ary2\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 - ary2\t\t\t<span class=\"comment\">#=&gt; [2]</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注意：连接数组除了可以使用</em>*|<strong>外还可以使用</strong>+*<em>。但是这两种方法返回的结果是不一样的。即使用|相同的元素只有一个，使用+相同的元素会重复存在</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 |<span class=\"params\"> ary2\t\t\t#=&gt; [1, 2, 3, 5]</span></span><br><span class=\"line\"><span class=\"params\">ary = ary1 + ary2\t\t\t#=&gt; [1, 2, 3, 1, 3, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组作为队列和栈\"><a href=\"#数组作为队列和栈\" class=\"headerlink\" title=\"数组作为队列和栈\"></a>数组作为队列和栈</h4><table>\n<thead>\n<tr>\n<th></th>\n<th align=\"right\">对数组开始元素的操作</th>\n<th>对数组末尾元素的操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>追加元素</td>\n<td align=\"right\">unshift</td>\n<td>push</td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td align=\"right\">shift</td>\n<td>pop</td>\n</tr>\n<tr>\n<td>引用元素</td>\n<td align=\"right\">first</td>\n<td>last</td>\n</tr>\n</tbody></table>\n<p>使用<strong>push</strong>方法和<strong>shift</strong>方法可以实现队列。使用<strong>push</strong>方法和<strong>pop</strong>方法可以实现栈。</p>\n<p><strong>shift</strong>方法和<strong>pop</strong>方法不只是获取数组元素，还会把该元素从数组中删除。如果只是想单纯地引用元素，应该是用<br><strong>first</strong>和<strong>last</strong>方法。</p>\n<p>1.ary.<strong>unshift</strong>(item)<br>将item元素添加到数组的开头   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.unshift(<span class=\"number\">0</span>)\t\t\t<span class=\"comment\">#=&gt; [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>2.ary.<strong>push</strong>(item), ary <strong>&lt;&lt;</strong> item<br><strong>&lt;&lt;<strong>与</strong>push</strong>是等价的方法，在数组的末尾添加新元素item   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.push(<span class=\"number\">4</span>)\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4]</span></span><br><span class=\"line\">ary &lt;&lt; <span class=\"number\">5</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>3.ary1.<strong>concat</strong>(ary2)<br>连接数组ary1和数组ary2. concat是具有破坏性的方法。会将ary2的元素直接插入到ary1数组的后面。**+**也是连接两个数组的方法，但是不具破坏性，会生成新的数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">ary1.concat(ary2)</span><br><span class=\"line\">p ary1\t\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：能够改变对象值的方法称为具有破坏性的方法，比如pop方法、shift方法等。有些方法后面加上</em>*!*<em>的也是破坏性方法</em></p>\n<p>4.ary.<strong>compact</strong> 与ary.<strong>compact!</strong><br>从数组ary中删除所有nil元素     </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"literal\">nil</span>, <span class=\"number\">1</span>, <span class=\"literal\">nil</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">ary.compact\t\t\t\t<span class=\"comment\">#=&gt; [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<p>5.ary.<strong>delete</strong>(item)和ary.<strong>delete_at</strong>(n)<br>从数组a中删除item元素。 第2个方法删除ary[n]元素。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.delete(<span class=\"number\">2</span>)\t\t\t\t</span><br><span class=\"line\">p ary\t\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 3]</span></span><br><span class=\"line\">ary.delete_at(<span class=\"number\">0</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t\t<span class=\"comment\">#=&gt; [3]</span></span><br></pre></td></tr></table></figure>\n\n<p>6.ary.<strong>delete_if</strong>{ |item| …}<br>ary.<strong>reject</strong>{ |item| …}<br>ary.<strong>reject!</strong>{ |item| ..}    </p>\n<p>判断数组ary中的各元素item，如果块的执行结果为真，则从数组ary中删除item。<strong>delete_if</strong>和**reject!**方法都是具有破坏性的方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.delete_if &#123; |<span class=\"params\">item</span>| item &gt; <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [1, 2]</span></span><br><span class=\"line\">ary.reject! &#123; |<span class=\"params\">item</span>| item &lt; <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [2]</span></span><br></pre></td></tr></table></figure>\n\n<p>7.ary.<strong>slice</strong>(n)<br>ary.<strong>slice</strong>(n..m)<br>ary.<strong>slice!</strong>(n, len)<br>删除数组ary中指定的部分，并返回删除部分的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">p ary.slice!(<span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br><span class=\"line\">p ary.slice!(<span class=\"number\">2</span>..<span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [3, 4]</span></span><br><span class=\"line\">p ary.slice(<span class=\"number\">1</span>, <span class=\"number\">1</span>)\t\t<span class=\"comment\">#=&gt; [2]</span></span><br></pre></td></tr></table></figure>\n\n<p>8.ary.<strong>uniq</strong>, ary.**uniq!**删除数组ary中重复的元素。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">ary.uniq\t\t\t<span class=\"comment\">#=&gt; [1, 2,3]</span></span><br></pre></td></tr></table></figure>\n\n<p>9.ary.<strong>shift</strong>. 删除数组ary开头的元素，并返回删除的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]j</span><br><span class=\"line\">ary.shift\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p ary\t\t\t<span class=\"comment\">#=&gt; [2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>10.ary.<strong>pop</strong>. 删除数组ary末尾的元素，并返回删除的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.pop\t\t<span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\">p ary\t\t\t<span class=\"comment\">#=&gt; [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>数组(<strong>Array</strong>)也是Ruby中表现一组数据的对象</p>\n<h4 id=\"数组的创建\"><a href=\"#数组的创建\" class=\"headerlink\" title=\"数组的创建\"></a>数组的创建</h4><p>创建方式有一下几种：<br>1.使用<strong>Array.new</strong><br>Array#new方法可带两个可选参数，第1个参数表示数组中得个数，第2个参数表示每个元素初始值。如果没有指定第2个参数，其元素的初始值为<strong>nil</strong>。如果不带参数则会创建一个空数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#不带参数c</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new</span><br><span class=\"line\">p ary\t\t\t\t\t<span class=\"comment\">#=&gt; []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#带1个参数</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t<span class=\"comment\">#=&gt; [nil, nil, nil]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#带2个参数</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t<span class=\"comment\">#=&gt; [5, 5, 5]</span></span><br></pre></td></tr></table></figure>","more":"<p>2.使用**%w<strong>与</strong>%i**<br><strong>%w</strong>用于创建不包含空白的字符串数组, 使用此方法创建字符串数组更加简洁。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">%w(This is ruby)</span>\t\t<span class=\"comment\">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>%i</strong>用于创建符号(Symbol)数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%i(<span class=\"title class_\">This</span> is ruby) \t<span class=\"comment\">#=&gt; [:This, :is, :ruby]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用**%w<strong>和</strong>%i<strong>创建数组时用到了(). 其实还可以用很多字符来替代，不过建议使用</strong>()<strong>,</strong>&lt;&gt;<strong>,</strong>||**.</p>\n<p>3.使用<strong>to_a</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash=&#123;<span class=\"symbol\">name:</span> <span class=\"string\">&quot;yu&quot;</span>, <span class=\"symbol\">gender:</span> <span class=\"string\">&quot;male&quot;</span>&#125;\t\t\t<span class=\"comment\">#=&gt; &#123;:name=&gt;&quot;yu&quot;, :gender=&gt;&quot;male&quot;&#125;</span></span><br><span class=\"line\">hash.to_a\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">#=&gt; [[:name, &quot;yu&quot;], [:gender, &quot;male&quot;]]</span></span><br></pre></td></tr></table></figure>\n\n<p>4.使用<strong>split</strong>方法<br>对逗号或空白字符间隔的字符串可以使用split方法来创建数组</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;this is ruby&quot;</span>.split()\t\t\t\t<span class=\"comment\">#=&gt; [&quot;this&quot;, &quot;is&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h4><p>获取元素的方法有以下几种：   </p>\n<p>1.使用**[]**<br>(a) <strong>ary[n]</strong>, 获取索引值为n的元素，当索引值为负数时，从数组的末尾开始获取元素。如果指定的索引值大于元素个数则返回nil。 </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]\t\t\t\t</span><br><span class=\"line\">ary[<span class=\"number\">1</span>]\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">ary[-<span class=\"number\">1</span>]\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">(b) **ary[n..m]**, 获取从a[n]到a[m]的元素，并返回新的数组。如果m大于数组的长度，返回的结果与指定数组最后一个元素是一样的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> ruby</span><br><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">1</span>..<span class=\"number\">3</span>]\t\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>..<span class=\"number\">7</span>]\t\t\t<span class=\"comment\">#=&gt;\t [2, 3, 4, 5]\t</span></span><br></pre></td></tr></table></figure>\n\n<p>(c) <strong>ary[n…m]</strong>, 获取从a[n]到a[m-1]的元素，并返回新数组    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">1</span>...<span class=\"number\">3</span>]\t\t\t<span class=\"comment\">#=&gt; [2, 3]</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>...<span class=\"number\">7</span>]\t\t\t<span class=\"comment\">#=&gt;\t [2, 3, 4, 5]\t</span></span><br></pre></td></tr></table></figure>\n\n<p>(d) <strong>ary[n, len]</strong>, 获取从a[n]开始之后的len个元素，并返回新数组. 如果len的长度大于从n开始后数组的剩余长度，则返回的结果与指定数组最后一个元素是一样的。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">1</span>, <span class=\"number\">3</span>]\t\t\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br><span class=\"line\">ary[<span class=\"number\">2</span>, <span class=\"number\">7</span>]\t\t\t\t<span class=\"comment\">#=&gt; [3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>2.使用<strong>at</strong>方法<br>ary.at(n)与ary[n]等价    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary.at(<span class=\"number\">1</span>)\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>]\t\t\t\t\t<span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用<strong>slice</strong>方法<br>ary.slice(n..m)与ary[n..m]等价，ary.slice(n…m)与ary[n…m]等价，ary.slice(n, len)与ary[n, len]等价   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary.slice(<span class=\"number\">1</span>..<span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br><span class=\"line\">ary.slice(<span class=\"number\">1</span>...<span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [2, 3]</span></span><br><span class=\"line\">ary.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p>4.使用<strong>values_at</strong>方法<br>可以通过此方法来获取多个索引的元素, 其用法如下</p>\n<pre><code>ary.values_at(n1, n2, ...)\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary.values_at(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)\t\t\t\t<span class=\"comment\">#=&gt; [1, 3, 5]</span></span><br><span class=\"line\">ary.values_at(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>)\t\t\t\t<span class=\"comment\">#=&gt; [2, 4, nil]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元素赋值\"><a href=\"#元素赋值\" class=\"headerlink\" title=\"元素赋值\"></a>元素赋值</h4><p>使用[],at,slice方法还可以给元素赋值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">0</span>] = <span class=\"string\">&quot;a&quot;</span>\t\t\t\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, 2, 3, 4, 5]</span></span><br><span class=\"line\">ary[<span class=\"number\">1</span>...<span class=\"number\">3</span>] = [<span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&quot;c&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 4, 5]</span></span><br><span class=\"line\">ary[<span class=\"number\">3</span>..<span class=\"number\">3</span>] = <span class=\"string\">&quot;d&quot;</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 5]</span></span><br><span class=\"line\">ary[<span class=\"number\">4</span>, <span class=\"number\">1</span>] = <span class=\"string\">&quot;e&quot;</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元素插入\"><a href=\"#元素插入\" class=\"headerlink\" title=\"元素插入\"></a>元素插入</h4><p>插入元素其实就是对0个元素进行赋值，因此指定[n, 0]后，就会在索引值为n的元素前插入新元素。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary[<span class=\"number\">2</span>, <span class=\"number\">0</span>] = <span class=\"number\">10</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 10, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组作为集合使用\"><a href=\"#数组作为集合使用\" class=\"headerlink\" title=\"数组作为集合使用\"></a>数组作为集合使用</h4><p>交集：取出同时属于两个集合的元素，并创建新的集合</p>\n<pre><code>ary = ary1 &amp; ary2\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 &amp; ary2\t\t\t<span class=\"comment\">#=&gt; [1, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>并集：取出两个集合中的所有元素，并创建新的集合</p>\n<pre><code>ary = ary1 | ary2\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 |<span class=\"params\"> ary2\t\t\t#=&gt; [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>集合的差：把某个集合中属于另外一个集合的元素删除，并创建新的集合</p>\n<pre><code>ary = ary1 - ary2\n</code></pre>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 - ary2\t\t\t<span class=\"comment\">#=&gt; [2]</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注意：连接数组除了可以使用</em>*|<strong>外还可以使用</strong>+*<em>。但是这两种方法返回的结果是不一样的。即使用|相同的元素只有一个，使用+相同的元素会重复存在</em></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">ary = ary1 |<span class=\"params\"> ary2\t\t\t#=&gt; [1, 2, 3, 5]</span></span><br><span class=\"line\"><span class=\"params\">ary = ary1 + ary2\t\t\t#=&gt; [1, 2, 3, 1, 3, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组作为队列和栈\"><a href=\"#数组作为队列和栈\" class=\"headerlink\" title=\"数组作为队列和栈\"></a>数组作为队列和栈</h4><table>\n<thead>\n<tr>\n<th></th>\n<th align=\"right\">对数组开始元素的操作</th>\n<th>对数组末尾元素的操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>追加元素</td>\n<td align=\"right\">unshift</td>\n<td>push</td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td align=\"right\">shift</td>\n<td>pop</td>\n</tr>\n<tr>\n<td>引用元素</td>\n<td align=\"right\">first</td>\n<td>last</td>\n</tr>\n</tbody></table>\n<p>使用<strong>push</strong>方法和<strong>shift</strong>方法可以实现队列。使用<strong>push</strong>方法和<strong>pop</strong>方法可以实现栈。</p>\n<p><strong>shift</strong>方法和<strong>pop</strong>方法不只是获取数组元素，还会把该元素从数组中删除。如果只是想单纯地引用元素，应该是用<br><strong>first</strong>和<strong>last</strong>方法。</p>\n<p>1.ary.<strong>unshift</strong>(item)<br>将item元素添加到数组的开头   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.unshift(<span class=\"number\">0</span>)\t\t\t<span class=\"comment\">#=&gt; [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>2.ary.<strong>push</strong>(item), ary <strong>&lt;&lt;</strong> item<br><strong>&lt;&lt;<strong>与</strong>push</strong>是等价的方法，在数组的末尾添加新元素item   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.push(<span class=\"number\">4</span>)\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4]</span></span><br><span class=\"line\">ary &lt;&lt; <span class=\"number\">5</span>\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<p>3.ary1.<strong>concat</strong>(ary2)<br>连接数组ary1和数组ary2. concat是具有破坏性的方法。会将ary2的元素直接插入到ary1数组的后面。**+**也是连接两个数组的方法，但是不具破坏性，会生成新的数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">ary1.concat(ary2)</span><br><span class=\"line\">p ary1\t\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 2, 3, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注：能够改变对象值的方法称为具有破坏性的方法，比如pop方法、shift方法等。有些方法后面加上</em>*!*<em>的也是破坏性方法</em></p>\n<p>4.ary.<strong>compact</strong> 与ary.<strong>compact!</strong><br>从数组ary中删除所有nil元素     </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"literal\">nil</span>, <span class=\"number\">1</span>, <span class=\"literal\">nil</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">ary.compact\t\t\t\t<span class=\"comment\">#=&gt; [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<p>5.ary.<strong>delete</strong>(item)和ary.<strong>delete_at</strong>(n)<br>从数组a中删除item元素。 第2个方法删除ary[n]元素。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.delete(<span class=\"number\">2</span>)\t\t\t\t</span><br><span class=\"line\">p ary\t\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 3]</span></span><br><span class=\"line\">ary.delete_at(<span class=\"number\">0</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t\t<span class=\"comment\">#=&gt; [3]</span></span><br></pre></td></tr></table></figure>\n\n<p>6.ary.<strong>delete_if</strong>{ |item| …}<br>ary.<strong>reject</strong>{ |item| …}<br>ary.<strong>reject!</strong>{ |item| ..}    </p>\n<p>判断数组ary中的各元素item，如果块的执行结果为真，则从数组ary中删除item。<strong>delete_if</strong>和**reject!**方法都是具有破坏性的方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.delete_if &#123; |<span class=\"params\">item</span>| item &gt; <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [1, 2]</span></span><br><span class=\"line\">ary.reject! &#123; |<span class=\"params\">item</span>| item &lt; <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">p ary\t\t\t\t<span class=\"comment\">#=&gt; [2]</span></span><br></pre></td></tr></table></figure>\n\n<p>7.ary.<strong>slice</strong>(n)<br>ary.<strong>slice</strong>(n..m)<br>ary.<strong>slice!</strong>(n, len)<br>删除数组ary中指定的部分，并返回删除部分的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">p ary.slice!(<span class=\"number\">4</span>)\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br><span class=\"line\">p ary.slice!(<span class=\"number\">2</span>..<span class=\"number\">3</span>)\t\t<span class=\"comment\">#=&gt; [3, 4]</span></span><br><span class=\"line\">p ary.slice(<span class=\"number\">1</span>, <span class=\"number\">1</span>)\t\t<span class=\"comment\">#=&gt; [2]</span></span><br></pre></td></tr></table></figure>\n\n<p>8.ary.<strong>uniq</strong>, ary.**uniq!**删除数组ary中重复的元素。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">ary.uniq\t\t\t<span class=\"comment\">#=&gt; [1, 2,3]</span></span><br></pre></td></tr></table></figure>\n\n<p>9.ary.<strong>shift</strong>. 删除数组ary开头的元素，并返回删除的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]j</span><br><span class=\"line\">ary.shift\t\t<span class=\"comment\">#=&gt; 1</span></span><br><span class=\"line\">p ary\t\t\t<span class=\"comment\">#=&gt; [2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>10.ary.<strong>pop</strong>. 删除数组ary末尾的元素，并返回删除的值。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.pop\t\t<span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\">p ary\t\t\t<span class=\"comment\">#=&gt; [1, 2]</span></span><br></pre></td></tr></table></figure>"},{"title":"How to make the octopress adapt OS X EI Capitan","date":"2015-11-11T14:46:35.000Z","comments":1,"_content":"Octopress was broken after I upgraded Mac to OS X EI Capitan 10.11.1 in these days. The details of the problem is below.\n\nOctopress is work well in Mac10.10. but when I upgraded to Mac10.11.1(OS X EI Capitan). And put *rake preview* in terminal to see the blog what looks like, got following error.\n\n\tStarting to watch source with Jekyll and Compass. Starting Rack on port 4000\n\trake aborted!\n\tErrno::ENOENT: No such file or directory - compass\n\t/Users/user/git/octopress/Rakefile:85:in spawn\n\t/Users/user/git/octopress/Rakefile:85:in block in <top (required)>\n\tTasks: TOP => preview\n\t(See full trace by running task with --trace)\n\t\n<!-- more -->\nWhy we get this error, this error caused by rake command, so that means maybe it is ruby version problem. let's take a look it.\n\n\t~-> $ ruby -v\n\t~-> ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]\n\t\n\nThe ruby newest version is 2.2.3. Ok, let's upgrade it. There are two ways to do it.\n\n#### Using rbenv\nIf you don't have rbenv in your local machine. You need to install it firstly.    \n1.Go to [https://github.com/sstephenson/rbenv](https://github.com/sstephenson/rbenv) to get it.   \n2.install ruby-2.2.3\n\t\n\trbenv install 2.2.3\n\t\n3.In the root of your octopress blog, put below commands\n\t\n\trbenv local 2.2.3\n\t\n\tgem install bundler\n\t\n\tbundle install\n\t\n#### Using RVM\n1.Clear git cache\n\n\trm -rf /usr/local/.git\n\t\n2.Install RVM\n\n\tcurl -L https://get.rvm.io | bash -s stable --ruby\n\t\n3.Install Ruby 2.2.3\n\n\trvm install ruby-2.2.3\n\t\n\trvm use 2.2.3\n\t\n\trvm rubygems latest\n\t\nAfter these steps, make sure you're using Ruby 2.2.3\n4.Go to the root of the your octopress blog\n\n\tgem install bundler\n\t\n\tbundle install\n\nBoth ways can bring octopress back.\n\n*Reference: [https://github.com/imathis/octopress/issues/1749](https://github.com/imathis/octopress/issues/1749)*","source":"_posts/2015-11-11-how-to-make-the-octopress-adapt-os-x-ei-capitan.markdown","raw":"---\n\ntitle: \"How to make the octopress adapt OS X EI Capitan\"\ndate: 2015-11-11 22:46:35 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby, Tool, MacOS]\n---\nOctopress was broken after I upgraded Mac to OS X EI Capitan 10.11.1 in these days. The details of the problem is below.\n\nOctopress is work well in Mac10.10. but when I upgraded to Mac10.11.1(OS X EI Capitan). And put *rake preview* in terminal to see the blog what looks like, got following error.\n\n\tStarting to watch source with Jekyll and Compass. Starting Rack on port 4000\n\trake aborted!\n\tErrno::ENOENT: No such file or directory - compass\n\t/Users/user/git/octopress/Rakefile:85:in spawn\n\t/Users/user/git/octopress/Rakefile:85:in block in <top (required)>\n\tTasks: TOP => preview\n\t(See full trace by running task with --trace)\n\t\n<!-- more -->\nWhy we get this error, this error caused by rake command, so that means maybe it is ruby version problem. let's take a look it.\n\n\t~-> $ ruby -v\n\t~-> ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]\n\t\n\nThe ruby newest version is 2.2.3. Ok, let's upgrade it. There are two ways to do it.\n\n#### Using rbenv\nIf you don't have rbenv in your local machine. You need to install it firstly.    \n1.Go to [https://github.com/sstephenson/rbenv](https://github.com/sstephenson/rbenv) to get it.   \n2.install ruby-2.2.3\n\t\n\trbenv install 2.2.3\n\t\n3.In the root of your octopress blog, put below commands\n\t\n\trbenv local 2.2.3\n\t\n\tgem install bundler\n\t\n\tbundle install\n\t\n#### Using RVM\n1.Clear git cache\n\n\trm -rf /usr/local/.git\n\t\n2.Install RVM\n\n\tcurl -L https://get.rvm.io | bash -s stable --ruby\n\t\n3.Install Ruby 2.2.3\n\n\trvm install ruby-2.2.3\n\t\n\trvm use 2.2.3\n\t\n\trvm rubygems latest\n\t\nAfter these steps, make sure you're using Ruby 2.2.3\n4.Go to the root of the your octopress blog\n\n\tgem install bundler\n\t\n\tbundle install\n\nBoth ways can bring octopress back.\n\n*Reference: [https://github.com/imathis/octopress/issues/1749](https://github.com/imathis/octopress/issues/1749)*","slug":"2015-11-11-how-to-make-the-octopress-adapt-os-x-ei-capitan","published":1,"updated":"2023-09-02T17:33:09.219Z","_id":"clm27g4oz004cazv5byi68us9","layout":"post","photos":[],"link":"","content":"<p>Octopress was broken after I upgraded Mac to OS X EI Capitan 10.11.1 in these days. The details of the problem is below.</p>\n<p>Octopress is work well in Mac10.10. but when I upgraded to Mac10.11.1(OS X EI Capitan). And put <em>rake preview</em> in terminal to see the blog what looks like, got following error.</p>\n<pre><code>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000\nrake aborted!\nErrno::ENOENT: No such file or directory - compass\n/Users/user/git/octopress/Rakefile:85:in spawn\n/Users/user/git/octopress/Rakefile:85:in block in &lt;top (required)&gt;\nTasks: TOP =&gt; preview\n(See full trace by running task with --trace)\n</code></pre>\n<span id=\"more\"></span>\n<p>Why we get this error, this error caused by rake command, so that means maybe it is ruby version problem. let’s take a look it.</p>\n<pre><code>~-&gt; $ ruby -v\n~-&gt; ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]\n</code></pre>\n<p>The ruby newest version is 2.2.3. Ok, let’s upgrade it. There are two ways to do it.</p>\n<h4 id=\"Using-rbenv\"><a href=\"#Using-rbenv\" class=\"headerlink\" title=\"Using rbenv\"></a>Using rbenv</h4><p>If you don’t have rbenv in your local machine. You need to install it firstly.<br>1.Go to <a href=\"https://github.com/sstephenson/rbenv\">https://github.com/sstephenson/rbenv</a> to get it.<br>2.install ruby-2.2.3</p>\n<pre><code>rbenv install 2.2.3\n</code></pre>\n<p>3.In the root of your octopress blog, put below commands</p>\n<pre><code>rbenv local 2.2.3\n\ngem install bundler\n\nbundle install\n</code></pre>\n<h4 id=\"Using-RVM\"><a href=\"#Using-RVM\" class=\"headerlink\" title=\"Using RVM\"></a>Using RVM</h4><p>1.Clear git cache</p>\n<pre><code>rm -rf /usr/local/.git\n</code></pre>\n<p>2.Install RVM</p>\n<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby\n</code></pre>\n<p>3.Install Ruby 2.2.3</p>\n<pre><code>rvm install ruby-2.2.3\n\nrvm use 2.2.3\n\nrvm rubygems latest\n</code></pre>\n<p>After these steps, make sure you’re using Ruby 2.2.3<br>4.Go to the root of the your octopress blog</p>\n<pre><code>gem install bundler\n\nbundle install\n</code></pre>\n<p>Both ways can bring octopress back.</p>\n<p><em>Reference: <a href=\"https://github.com/imathis/octopress/issues/1749\">https://github.com/imathis/octopress/issues/1749</a></em></p>\n","site":{"data":{}},"excerpt":"<p>Octopress was broken after I upgraded Mac to OS X EI Capitan 10.11.1 in these days. The details of the problem is below.</p>\n<p>Octopress is work well in Mac10.10. but when I upgraded to Mac10.11.1(OS X EI Capitan). And put <em>rake preview</em> in terminal to see the blog what looks like, got following error.</p>\n<pre><code>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000\nrake aborted!\nErrno::ENOENT: No such file or directory - compass\n/Users/user/git/octopress/Rakefile:85:in spawn\n/Users/user/git/octopress/Rakefile:85:in block in &lt;top (required)&gt;\nTasks: TOP =&gt; preview\n(See full trace by running task with --trace)\n</code></pre>","more":"<p>Why we get this error, this error caused by rake command, so that means maybe it is ruby version problem. let’s take a look it.</p>\n<pre><code>~-&gt; $ ruby -v\n~-&gt; ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]\n</code></pre>\n<p>The ruby newest version is 2.2.3. Ok, let’s upgrade it. There are two ways to do it.</p>\n<h4 id=\"Using-rbenv\"><a href=\"#Using-rbenv\" class=\"headerlink\" title=\"Using rbenv\"></a>Using rbenv</h4><p>If you don’t have rbenv in your local machine. You need to install it firstly.<br>1.Go to <a href=\"https://github.com/sstephenson/rbenv\">https://github.com/sstephenson/rbenv</a> to get it.<br>2.install ruby-2.2.3</p>\n<pre><code>rbenv install 2.2.3\n</code></pre>\n<p>3.In the root of your octopress blog, put below commands</p>\n<pre><code>rbenv local 2.2.3\n\ngem install bundler\n\nbundle install\n</code></pre>\n<h4 id=\"Using-RVM\"><a href=\"#Using-RVM\" class=\"headerlink\" title=\"Using RVM\"></a>Using RVM</h4><p>1.Clear git cache</p>\n<pre><code>rm -rf /usr/local/.git\n</code></pre>\n<p>2.Install RVM</p>\n<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby\n</code></pre>\n<p>3.Install Ruby 2.2.3</p>\n<pre><code>rvm install ruby-2.2.3\n\nrvm use 2.2.3\n\nrvm rubygems latest\n</code></pre>\n<p>After these steps, make sure you’re using Ruby 2.2.3<br>4.Go to the root of the your octopress blog</p>\n<pre><code>gem install bundler\n\nbundle install\n</code></pre>\n<p>Both ways can bring octopress back.</p>\n<p><em>Reference: <a href=\"https://github.com/imathis/octopress/issues/1749\">https://github.com/imathis/octopress/issues/1749</a></em></p>"},{"title":"Ruby修炼之道(13)","date":"2015-10-26T14:13:32.000Z","comments":1,"_content":"\n#### 替换数组内的元素\n根据指定规则替换数组中的元素，Ruby也提供了以下方法:\n\nary.**collect** { |item| ...}   \nary.**collect!** { |item| ...}   \nary.**map** { |item| ...}   \nary.**map!** { |item| ...}   \n\n将数组ary中的各元素item传递给块做处理。\n\n``` ruby\nary = [1, 2, 3]\nary1 = ary.collect do |item|\n    item*2\nend\n\np ary1\t\t\t\t\t#=> [ 2, 4, 6]\n\nary2 = ary.map do |item|\n    if item % 2 == 0\n        0\n    else\n        1\n    end\nend\n\np ary2\t\t\t\t\t#=> [1, 0, 1]\n```\n<!-- more -->\nary.**fill**(value)    \nary.**fill**(value, begin)   \nary.**fill**(value, begin, len)   \nary.**fill**(vlaue, n..m)    \n将数组ary的元素替换为value。\n\n``` ruby\np [1, 2, 3].fill(0)\t\t\t#=> [0, 0, 0]\np [1, 2, 3].fill(0, 1)\t\t#=> [1, 0, 0]\np [1, 2, 3].fill(0, 0, 2)\t\t#=> [0, 0 ,3]\np [1, 2, 3].fill(0, 1..2)\t\t#=> [1, 0, 0]\n\nary = [1, 2, 3]\nary.fill(0)\np ary\t\t\t\t\t\t#=> [0, 0, 0]\n```\n*注意，此方法会修改原对象的值。即为破坏方法。\n\nary.**flatten**   \nary.**flatten**   \n平坦化数组ary，所谓平坦化是指展开嵌套数组变为一个大数组。\n\n``` ruby\nary = [1, [2, 3], [4, [5, 6]]]\np ary.flatten\t \t #=> [1, 2, 3, 4, 5, 6]\n```\n\nary.**reverse**    \nary.**reverse!**    \n反转数组ary的元素顺序\n\n``` ruby\nary = [1, 2, 3]\np ary.reverse\t\t#=> [3, 2, 1]\n```\n\nary.**sort**   \nary.**sort!**   \nary.**sort**{|i, j| ... }   \nary.**sort!**{|i, j| ...}   \nary.**sort_by** {|i| ...}   \n\n对数组ary中进行排序，排序方法可以由块指定。没有块时，使用*<=>*运算符比较。其中**sort_by**方法中排序是根据块的运行结果来对数组的所有元素进行排序。\n\n``` ruby\nary = [4, 9, 5]\np ary.sort\t\t\t#=> [4, 5, 9]\nary.sort! { |i, j|\n\ti % 3 <=> j % 3\n}\np ary \t\t\t\t#=> [9, 4, 5]\n\np [2, 4, 3, 1].sort_by { |i| -i }  #=> [4, 3, 2, 1]\n```\n\n#### 数组的迭代\n\n**each**方法并不知道元素的索引值。当需要指定索引值时，可以使用**each_with_index**方法\n\n``` ruby\nary = [23, 54, 14]\nary.each { |item| print \"#{item} \" }\t#=> 23 54 14\n\nary.each_with_index do |item, index|\n\tprint \"The \", index+1, \" element is :\", item, \"\\n\"\nend\n```\n\n如果数组内各元素全部处理完毕后该数组就不需要了，此时可以通过逐个删除数组元素使数组变空这样的手段来实现循环。\n\n``` ruby\nwhile item = ary.pop\n\t## the handle of the item\nend\n```\n\n#### 多维数组\n数组中的各个元素也可以是数组，也就是数组的数组。可以用它来表示矩阵。\n\n``` ruby\nary = [[1, 2], [3, 4], [5, 6]]\n\np ary[1][1]\t\t#=> 4\n\n#3个元素引用的是同一个数组对象\nary = Array.new(3, [0, 0])\nary[0][1] = 1\np ary  \t\t\t#=> [[0, 1], [0, 1], [0, 1]]\n\n#避免引用同一个数组对象，在块中，重复创建新的对象\nary = Array.new(3) do\n\t[0, 0]\nend\t\t\n\nary[0][1] = 1\np ary  \t\t\t#=> [[0, 1], [0, 0], [0, 0]]\t\n```\n使用*Array.new(length, array)*创建二维数组。创建的所有元素引用的都是同一个对象array，修改其中一个元素的值，其他元素也会变化。如上示例代码。如何避免？可在创建数组的块中重复创建新对象。\n\nary.**zip**(ary1, ary2, ...)   \n**zip**方法会将接收器和参数传来的数组元素逐一取出，而且每次都会启动块。参数可以是一个或多个。\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [10, 20, 30]\nary3 = [100, 200, 300]\n\nresult = []\nary1.zip(ary2, ary3) do |a, b, c|\n\tresult << a + b + c\nend\n\np result\t\t\t#=> [111, 222, 333]\n```\n\n\n","source":"_posts/2015-10-26-ruby-practice-13.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(13)\"\ndate: 2015-10-26 22:13:32 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n#### 替换数组内的元素\n根据指定规则替换数组中的元素，Ruby也提供了以下方法:\n\nary.**collect** { |item| ...}   \nary.**collect!** { |item| ...}   \nary.**map** { |item| ...}   \nary.**map!** { |item| ...}   \n\n将数组ary中的各元素item传递给块做处理。\n\n``` ruby\nary = [1, 2, 3]\nary1 = ary.collect do |item|\n    item*2\nend\n\np ary1\t\t\t\t\t#=> [ 2, 4, 6]\n\nary2 = ary.map do |item|\n    if item % 2 == 0\n        0\n    else\n        1\n    end\nend\n\np ary2\t\t\t\t\t#=> [1, 0, 1]\n```\n<!-- more -->\nary.**fill**(value)    \nary.**fill**(value, begin)   \nary.**fill**(value, begin, len)   \nary.**fill**(vlaue, n..m)    \n将数组ary的元素替换为value。\n\n``` ruby\np [1, 2, 3].fill(0)\t\t\t#=> [0, 0, 0]\np [1, 2, 3].fill(0, 1)\t\t#=> [1, 0, 0]\np [1, 2, 3].fill(0, 0, 2)\t\t#=> [0, 0 ,3]\np [1, 2, 3].fill(0, 1..2)\t\t#=> [1, 0, 0]\n\nary = [1, 2, 3]\nary.fill(0)\np ary\t\t\t\t\t\t#=> [0, 0, 0]\n```\n*注意，此方法会修改原对象的值。即为破坏方法。\n\nary.**flatten**   \nary.**flatten**   \n平坦化数组ary，所谓平坦化是指展开嵌套数组变为一个大数组。\n\n``` ruby\nary = [1, [2, 3], [4, [5, 6]]]\np ary.flatten\t \t #=> [1, 2, 3, 4, 5, 6]\n```\n\nary.**reverse**    \nary.**reverse!**    \n反转数组ary的元素顺序\n\n``` ruby\nary = [1, 2, 3]\np ary.reverse\t\t#=> [3, 2, 1]\n```\n\nary.**sort**   \nary.**sort!**   \nary.**sort**{|i, j| ... }   \nary.**sort!**{|i, j| ...}   \nary.**sort_by** {|i| ...}   \n\n对数组ary中进行排序，排序方法可以由块指定。没有块时，使用*<=>*运算符比较。其中**sort_by**方法中排序是根据块的运行结果来对数组的所有元素进行排序。\n\n``` ruby\nary = [4, 9, 5]\np ary.sort\t\t\t#=> [4, 5, 9]\nary.sort! { |i, j|\n\ti % 3 <=> j % 3\n}\np ary \t\t\t\t#=> [9, 4, 5]\n\np [2, 4, 3, 1].sort_by { |i| -i }  #=> [4, 3, 2, 1]\n```\n\n#### 数组的迭代\n\n**each**方法并不知道元素的索引值。当需要指定索引值时，可以使用**each_with_index**方法\n\n``` ruby\nary = [23, 54, 14]\nary.each { |item| print \"#{item} \" }\t#=> 23 54 14\n\nary.each_with_index do |item, index|\n\tprint \"The \", index+1, \" element is :\", item, \"\\n\"\nend\n```\n\n如果数组内各元素全部处理完毕后该数组就不需要了，此时可以通过逐个删除数组元素使数组变空这样的手段来实现循环。\n\n``` ruby\nwhile item = ary.pop\n\t## the handle of the item\nend\n```\n\n#### 多维数组\n数组中的各个元素也可以是数组，也就是数组的数组。可以用它来表示矩阵。\n\n``` ruby\nary = [[1, 2], [3, 4], [5, 6]]\n\np ary[1][1]\t\t#=> 4\n\n#3个元素引用的是同一个数组对象\nary = Array.new(3, [0, 0])\nary[0][1] = 1\np ary  \t\t\t#=> [[0, 1], [0, 1], [0, 1]]\n\n#避免引用同一个数组对象，在块中，重复创建新的对象\nary = Array.new(3) do\n\t[0, 0]\nend\t\t\n\nary[0][1] = 1\np ary  \t\t\t#=> [[0, 1], [0, 0], [0, 0]]\t\n```\n使用*Array.new(length, array)*创建二维数组。创建的所有元素引用的都是同一个对象array，修改其中一个元素的值，其他元素也会变化。如上示例代码。如何避免？可在创建数组的块中重复创建新对象。\n\nary.**zip**(ary1, ary2, ...)   \n**zip**方法会将接收器和参数传来的数组元素逐一取出，而且每次都会启动块。参数可以是一个或多个。\n\n``` ruby\nary1 = [1, 2, 3]\nary2 = [10, 20, 30]\nary3 = [100, 200, 300]\n\nresult = []\nary1.zip(ary2, ary3) do |a, b, c|\n\tresult << a + b + c\nend\n\np result\t\t\t#=> [111, 222, 333]\n```\n\n\n","slug":"2015-10-26-ruby-practice-13","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4p0004fazv5cuhy86d4","layout":"post","photos":[],"link":"","content":"<h4 id=\"替换数组内的元素\"><a href=\"#替换数组内的元素\" class=\"headerlink\" title=\"替换数组内的元素\"></a>替换数组内的元素</h4><p>根据指定规则替换数组中的元素，Ruby也提供了以下方法:</p>\n<p>ary.<strong>collect</strong> { |item| …}<br>ary.<strong>collect!</strong> { |item| …}<br>ary.<strong>map</strong> { |item| …}<br>ary.<strong>map!</strong> { |item| …}   </p>\n<p>将数组ary中的各元素item传递给块做处理。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary1 = ary.collect <span class=\"keyword\">do</span> |<span class=\"params\">item</span>|</span><br><span class=\"line\">    item*<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p ary1\t\t\t\t\t<span class=\"comment\">#=&gt; [ 2, 4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary2 = ary.map <span class=\"keyword\">do</span> |<span class=\"params\">item</span>|</span><br><span class=\"line\">    <span class=\"keyword\">if</span> item % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p ary2\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 0, 1]</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>ary.<strong>fill</strong>(value)<br>ary.<strong>fill</strong>(value, begin)<br>ary.<strong>fill</strong>(value, begin, len)<br>ary.<strong>fill</strong>(vlaue, n..m)<br>将数组ary的元素替换为value。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>)\t\t\t<span class=\"comment\">#=&gt; [0, 0, 0]</span></span><br><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">1</span>)\t\t<span class=\"comment\">#=&gt; [1, 0, 0]</span></span><br><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [0, 0 ,3]</span></span><br><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">1</span>..<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [1, 0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.fill(<span class=\"number\">0</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t\t<span class=\"comment\">#=&gt; [0, 0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>*注意，此方法会修改原对象的值。即为破坏方法。</p>\n<p>ary.<strong>flatten</strong><br>ary.<strong>flatten</strong><br>平坦化数组ary，所谓平坦化是指展开嵌套数组变为一个大数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, [<span class=\"number\">5</span>, <span class=\"number\">6</span>]]]</span><br><span class=\"line\">p ary.flatten\t \t <span class=\"comment\">#=&gt; [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<p>ary.<strong>reverse</strong><br>ary.<strong>reverse!</strong><br>反转数组ary的元素顺序</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">p ary.reverse\t\t<span class=\"comment\">#=&gt; [3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n\n<p>ary.<strong>sort</strong><br>ary.<strong>sort!</strong><br>ary.<strong>sort</strong>{|i, j| … }<br>ary.<strong>sort!</strong>{|i, j| …}<br>ary.<strong>sort_by</strong> {|i| …}   </p>\n<p>对数组ary中进行排序，排序方法可以由块指定。没有块时，使用*&lt;&#x3D;&gt;*运算符比较。其中<strong>sort_by</strong>方法中排序是根据块的运行结果来对数组的所有元素进行排序。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">p ary.sort\t\t\t<span class=\"comment\">#=&gt; [4, 5, 9]</span></span><br><span class=\"line\">ary.sort! &#123; |<span class=\"params\">i, j</span>|</span><br><span class=\"line\">\ti % <span class=\"number\">3</span> &lt;=&gt; j % <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p ary \t\t\t\t<span class=\"comment\">#=&gt; [9, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">p [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>].sort_by &#123; |<span class=\"params\">i</span>| -i &#125;  <span class=\"comment\">#=&gt; [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组的迭代\"><a href=\"#数组的迭代\" class=\"headerlink\" title=\"数组的迭代\"></a>数组的迭代</h4><p><strong>each</strong>方法并不知道元素的索引值。当需要指定索引值时，可以使用<strong>each_with_index</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">23</span>, <span class=\"number\">54</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">ary.each &#123; |<span class=\"params\">item</span>| print <span class=\"string\">&quot;<span class=\"subst\">#&#123;item&#125;</span> &quot;</span> &#125;\t<span class=\"comment\">#=&gt; 23 54 14</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary.each_with_index <span class=\"keyword\">do</span> |<span class=\"params\">item, index</span>|</span><br><span class=\"line\">\tprint <span class=\"string\">&quot;The &quot;</span>, index+<span class=\"number\">1</span>, <span class=\"string\">&quot; element is :&quot;</span>, item, <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>如果数组内各元素全部处理完毕后该数组就不需要了，此时可以通过逐个删除数组元素使数组变空这样的手段来实现循环。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> item = ary.pop</span><br><span class=\"line\">\t<span class=\"comment\">## the handle of the item</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><p>数组中的各个元素也可以是数组，也就是数组的数组。可以用它来表示矩阵。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">p ary[<span class=\"number\">1</span>][<span class=\"number\">1</span>]\t\t<span class=\"comment\">#=&gt; 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3个元素引用的是同一个数组对象</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>, [<span class=\"number\">0</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">ary[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">p ary  \t\t\t<span class=\"comment\">#=&gt; [[0, 1], [0, 1], [0, 1]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#避免引用同一个数组对象，在块中，重复创建新的对象</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t[<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">end</span>\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">ary[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">p ary  \t\t\t<span class=\"comment\">#=&gt; [[0, 1], [0, 0], [0, 0]]\t</span></span><br></pre></td></tr></table></figure>\n<p>使用*Array.new(length, array)*创建二维数组。创建的所有元素引用的都是同一个对象array，修改其中一个元素的值，其他元素也会变化。如上示例代码。如何避免？可在创建数组的块中重复创建新对象。</p>\n<p>ary.<strong>zip</strong>(ary1, ary2, …)<br><strong>zip</strong>方法会将接收器和参数传来的数组元素逐一取出，而且每次都会启动块。参数可以是一个或多个。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">ary3 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">result = []</span><br><span class=\"line\">ary1.zip(ary2, ary3) <span class=\"keyword\">do</span> |<span class=\"params\">a, b, c</span>|</span><br><span class=\"line\">\tresult &lt;&lt; a + b + c</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p result\t\t\t<span class=\"comment\">#=&gt; [111, 222, 333]</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h4 id=\"替换数组内的元素\"><a href=\"#替换数组内的元素\" class=\"headerlink\" title=\"替换数组内的元素\"></a>替换数组内的元素</h4><p>根据指定规则替换数组中的元素，Ruby也提供了以下方法:</p>\n<p>ary.<strong>collect</strong> { |item| …}<br>ary.<strong>collect!</strong> { |item| …}<br>ary.<strong>map</strong> { |item| …}<br>ary.<strong>map!</strong> { |item| …}   </p>\n<p>将数组ary中的各元素item传递给块做处理。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary1 = ary.collect <span class=\"keyword\">do</span> |<span class=\"params\">item</span>|</span><br><span class=\"line\">    item*<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p ary1\t\t\t\t\t<span class=\"comment\">#=&gt; [ 2, 4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary2 = ary.map <span class=\"keyword\">do</span> |<span class=\"params\">item</span>|</span><br><span class=\"line\">    <span class=\"keyword\">if</span> item % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p ary2\t\t\t\t\t<span class=\"comment\">#=&gt; [1, 0, 1]</span></span><br></pre></td></tr></table></figure>","more":"<p>ary.<strong>fill</strong>(value)<br>ary.<strong>fill</strong>(value, begin)<br>ary.<strong>fill</strong>(value, begin, len)<br>ary.<strong>fill</strong>(vlaue, n..m)<br>将数组ary的元素替换为value。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>)\t\t\t<span class=\"comment\">#=&gt; [0, 0, 0]</span></span><br><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">1</span>)\t\t<span class=\"comment\">#=&gt; [1, 0, 0]</span></span><br><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [0, 0 ,3]</span></span><br><span class=\"line\">p [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">0</span>, <span class=\"number\">1</span>..<span class=\"number\">2</span>)\t\t<span class=\"comment\">#=&gt; [1, 0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary.fill(<span class=\"number\">0</span>)</span><br><span class=\"line\">p ary\t\t\t\t\t\t<span class=\"comment\">#=&gt; [0, 0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>*注意，此方法会修改原对象的值。即为破坏方法。</p>\n<p>ary.<strong>flatten</strong><br>ary.<strong>flatten</strong><br>平坦化数组ary，所谓平坦化是指展开嵌套数组变为一个大数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, [<span class=\"number\">5</span>, <span class=\"number\">6</span>]]]</span><br><span class=\"line\">p ary.flatten\t \t <span class=\"comment\">#=&gt; [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<p>ary.<strong>reverse</strong><br>ary.<strong>reverse!</strong><br>反转数组ary的元素顺序</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">p ary.reverse\t\t<span class=\"comment\">#=&gt; [3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n\n<p>ary.<strong>sort</strong><br>ary.<strong>sort!</strong><br>ary.<strong>sort</strong>{|i, j| … }<br>ary.<strong>sort!</strong>{|i, j| …}<br>ary.<strong>sort_by</strong> {|i| …}   </p>\n<p>对数组ary中进行排序，排序方法可以由块指定。没有块时，使用*&lt;&#x3D;&gt;*运算符比较。其中<strong>sort_by</strong>方法中排序是根据块的运行结果来对数组的所有元素进行排序。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">p ary.sort\t\t\t<span class=\"comment\">#=&gt; [4, 5, 9]</span></span><br><span class=\"line\">ary.sort! &#123; |<span class=\"params\">i, j</span>|</span><br><span class=\"line\">\ti % <span class=\"number\">3</span> &lt;=&gt; j % <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p ary \t\t\t\t<span class=\"comment\">#=&gt; [9, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">p [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>].sort_by &#123; |<span class=\"params\">i</span>| -i &#125;  <span class=\"comment\">#=&gt; [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组的迭代\"><a href=\"#数组的迭代\" class=\"headerlink\" title=\"数组的迭代\"></a>数组的迭代</h4><p><strong>each</strong>方法并不知道元素的索引值。当需要指定索引值时，可以使用<strong>each_with_index</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [<span class=\"number\">23</span>, <span class=\"number\">54</span>, <span class=\"number\">14</span>]</span><br><span class=\"line\">ary.each &#123; |<span class=\"params\">item</span>| print <span class=\"string\">&quot;<span class=\"subst\">#&#123;item&#125;</span> &quot;</span> &#125;\t<span class=\"comment\">#=&gt; 23 54 14</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary.each_with_index <span class=\"keyword\">do</span> |<span class=\"params\">item, index</span>|</span><br><span class=\"line\">\tprint <span class=\"string\">&quot;The &quot;</span>, index+<span class=\"number\">1</span>, <span class=\"string\">&quot; element is :&quot;</span>, item, <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>如果数组内各元素全部处理完毕后该数组就不需要了，此时可以通过逐个删除数组元素使数组变空这样的手段来实现循环。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> item = ary.pop</span><br><span class=\"line\">\t<span class=\"comment\">## the handle of the item</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h4><p>数组中的各个元素也可以是数组，也就是数组的数组。可以用它来表示矩阵。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">p ary[<span class=\"number\">1</span>][<span class=\"number\">1</span>]\t\t<span class=\"comment\">#=&gt; 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#3个元素引用的是同一个数组对象</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>, [<span class=\"number\">0</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">ary[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">p ary  \t\t\t<span class=\"comment\">#=&gt; [[0, 1], [0, 1], [0, 1]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#避免引用同一个数组对象，在块中，重复创建新的对象</span></span><br><span class=\"line\">ary = <span class=\"title class_\">Array</span>.new(<span class=\"number\">3</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">\t[<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"keyword\">end</span>\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">ary[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">p ary  \t\t\t<span class=\"comment\">#=&gt; [[0, 1], [0, 0], [0, 0]]\t</span></span><br></pre></td></tr></table></figure>\n<p>使用*Array.new(length, array)*创建二维数组。创建的所有元素引用的都是同一个对象array，修改其中一个元素的值，其他元素也会变化。如上示例代码。如何避免？可在创建数组的块中重复创建新对象。</p>\n<p>ary.<strong>zip</strong>(ary1, ary2, …)<br><strong>zip</strong>方法会将接收器和参数传来的数组元素逐一取出，而且每次都会启动块。参数可以是一个或多个。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ary1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">ary2 = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">ary3 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">result = []</span><br><span class=\"line\">ary1.zip(ary2, ary3) <span class=\"keyword\">do</span> |<span class=\"params\">a, b, c</span>|</span><br><span class=\"line\">\tresult &lt;&lt; a + b + c</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p result\t\t\t<span class=\"comment\">#=&gt; [111, 222, 333]</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(14)","date":"2015-11-12T09:09:35.000Z","comments":1,"_content":"\n#### 字符串的创建\n##### 普通创建\nRuby中使用**\" \"**或**' '**符号来创建字符串，在字符串中也可以包含表达式**#{}**，这个表达式被称之为内嵌表达式。如果字符串中需要包含\"\"或者''等字符时，则可以通过转义字符\\来实现。\n\n``` ruby \nstr = \"this is a string\"\nputs str\n\nstr = 'this is also a string'\nputs str\n\nargs = \"string with argument\"\nputs \"this is a #{args}\"\n\nstr = \"Hello 'string'\"\nputs str\n\nstr = \"Hello \\\"string\\\"\"\nputs str\n```\n<!-- more -->\n\n##### %Q或%q创建\n针对字符串中包含\"\"或''等字符的，建议采用**%Q**或者**%q**来创建字符串，这样更加清晰明了。使用**%Q**相当于**\" \"**创建字符串，**%q**相当于**' '**创建字符.\n\n``` ruby \nputs %Q(this string created by %Q)\n\nputs %q(this string created by %q)\n\nputs %Q(contains 'special' \"character\" directly)\n\nputs %q(contains 'special' \"character\" directly)\n```\n##### Here Document创建，\n对于字符串中包含换行符的字符串，使用Here Document语法来创建极为方便。Here Document是Unix中使用Shell的一种语法，通常用**<<**来创建字符串。其语法结构如下：\n\n\t<<\"结束标识符\"\n\t字符串内容\n\t结束标识符\n*注意：结束标识符可以使用\" \"或' '来定义，使用\" \"时，字符串内可以使用转义字符和内嵌表达式，而' '则不会，只会原封不动的显示所有字符。*   \n\n一般使用*EOF(End of File)*或*EOB(End of Block)*等作为结束标识符。\n\n``` ruby\nstr = <<EOB\nthe first string\nthe second string in a new line\nok, I also get the third string\nEOB\n\nprint str\t\t#=>the string has three lines, just like defined.\n```\n如果字符串中存在缩进，可以使用**<<-**来替代**<<**，这样将会保持字符串定义中的缩进。\n\n##### 使用` `\n\n通过使用**\\`命令\\`**, 可以创建命令的标准输出并将其转换为字符串对象。\n\n``` ruby\nstr = `ls -l`\n\nputs str \t\t\n#=> \ntotal 8\n-rw-r--r--  1 yushi  staff  634 Nov 16 17:12 string_create.rb\n```\n\n##### 使用printf和sprintf\n**printf**与**sprintf**均是可以输出指定格式的字符串，不同之处在于printf会将字符串直接输出在控制台上，而sprintf则会将字符串转为为字符串对象。\n\n``` ruby\nnumber = 123\nprintf(\"%d\\n\", number)\t\t#=> 123\nprintf(\"%4d\\n\", number)\t\t#=>  123\nprintf(\"%04d\\n\", number)    #=> 0123\nprintf(\"%+d\\n\", number)\t\t#=> +123\n\nname = \"Ruby\"\np sprintf(\"Hello,%s\", name)\t\t#=> \"Hello,Ruby\"\np sprintf(\"Hello,%8s\", name)\t\t#=> \"Hello,    Ruby\"\np sprintf(\"Hello,%-8s\", name)\t\t#=> \"Hello,Ruby    \"\n```\n\n#### 字符串长度\n用**length**方法和**size**方法获取字符串长度。**bytesize**方法可以获取字节长度。\n\n``` ruby\nstr = \"This is a string\"\nstr2 = \"字符串\"\n\n#get the length of a string object\nputs str.length\t\t\t#=> 16\nputs str.size\t\t\t#=> 16\nputs str2.length\t\t#=> 3\n\n#get the bytesize of a string \nputs str.bytesize\t\t#=> 16\nputs str2.bytesize\t\t#=> 9\n```\n\n判断字符串是否为空，可用**empty?**方法。\n\n``` ruby\n#judge the string if is empty\nputs \"\".empty?\t\t\t#=> true\nputs \"string\".empty?\t#=> false\n```\n\n*字符串的索引与数组的索引用法一样，可参照使用*\n\n##### 字符串的连接\n字符串的连接有以下两种情况：   \n- 将字符串合并为一个新的字符串   \n- 扩展原有字符串\n\n使用**+**可以合并两个字符串时，会创建一个新的字符串。\n\n``` ruby\n#using '+', will create a new string object\nstr1 = \"hello \"\nstr2 = \"world\"\nstr3 = str1\n\nputs str1 + str2 \t\t\t#=> hello world\nputs str1\t\t\t\t\t#=> hello\n\nputs str1 = str1 + str2 \t#=> hello world\nputs str1\t\t\t\t\t#=> hello world\nputs str3\t\t\t\t\t#=> hello\n```\n\n如果只想扩展原有字符串，可以使用**<<**或**concat**方法。\n\n``` ruby\n#using '<<', will change the original string object\nstr1 = \"hello \"\nstr2 = \"world\"\nstr3 = str1\n\nputs str1<<str2\t\t\t\t#=> hello world\nputs str1\t\t\t\t\t#=> hello world\nputs str3\t\t\t\t\t#=> hello world\n\n#using 'concat' method, also will change the original string object\nstr1 = \"hello \"\nstr2 = \"world\"\nstr3 = str1\n\nputs str1.concat str2\t\t#=> hello world\nputs str1\t\t\t\t\t#=> hello world\nputs str3\t\t\t\t\t#=> hello world\n```\n*注意：一般情况下使用**<<**和**concat**方法更有效率，但是也可以根据情况而定*\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2015-11-12-ruby-practice-14.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(14)\"\ndate: 2015-11-12 17:09:35 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n#### 字符串的创建\n##### 普通创建\nRuby中使用**\" \"**或**' '**符号来创建字符串，在字符串中也可以包含表达式**#{}**，这个表达式被称之为内嵌表达式。如果字符串中需要包含\"\"或者''等字符时，则可以通过转义字符\\来实现。\n\n``` ruby \nstr = \"this is a string\"\nputs str\n\nstr = 'this is also a string'\nputs str\n\nargs = \"string with argument\"\nputs \"this is a #{args}\"\n\nstr = \"Hello 'string'\"\nputs str\n\nstr = \"Hello \\\"string\\\"\"\nputs str\n```\n<!-- more -->\n\n##### %Q或%q创建\n针对字符串中包含\"\"或''等字符的，建议采用**%Q**或者**%q**来创建字符串，这样更加清晰明了。使用**%Q**相当于**\" \"**创建字符串，**%q**相当于**' '**创建字符.\n\n``` ruby \nputs %Q(this string created by %Q)\n\nputs %q(this string created by %q)\n\nputs %Q(contains 'special' \"character\" directly)\n\nputs %q(contains 'special' \"character\" directly)\n```\n##### Here Document创建，\n对于字符串中包含换行符的字符串，使用Here Document语法来创建极为方便。Here Document是Unix中使用Shell的一种语法，通常用**<<**来创建字符串。其语法结构如下：\n\n\t<<\"结束标识符\"\n\t字符串内容\n\t结束标识符\n*注意：结束标识符可以使用\" \"或' '来定义，使用\" \"时，字符串内可以使用转义字符和内嵌表达式，而' '则不会，只会原封不动的显示所有字符。*   \n\n一般使用*EOF(End of File)*或*EOB(End of Block)*等作为结束标识符。\n\n``` ruby\nstr = <<EOB\nthe first string\nthe second string in a new line\nok, I also get the third string\nEOB\n\nprint str\t\t#=>the string has three lines, just like defined.\n```\n如果字符串中存在缩进，可以使用**<<-**来替代**<<**，这样将会保持字符串定义中的缩进。\n\n##### 使用` `\n\n通过使用**\\`命令\\`**, 可以创建命令的标准输出并将其转换为字符串对象。\n\n``` ruby\nstr = `ls -l`\n\nputs str \t\t\n#=> \ntotal 8\n-rw-r--r--  1 yushi  staff  634 Nov 16 17:12 string_create.rb\n```\n\n##### 使用printf和sprintf\n**printf**与**sprintf**均是可以输出指定格式的字符串，不同之处在于printf会将字符串直接输出在控制台上，而sprintf则会将字符串转为为字符串对象。\n\n``` ruby\nnumber = 123\nprintf(\"%d\\n\", number)\t\t#=> 123\nprintf(\"%4d\\n\", number)\t\t#=>  123\nprintf(\"%04d\\n\", number)    #=> 0123\nprintf(\"%+d\\n\", number)\t\t#=> +123\n\nname = \"Ruby\"\np sprintf(\"Hello,%s\", name)\t\t#=> \"Hello,Ruby\"\np sprintf(\"Hello,%8s\", name)\t\t#=> \"Hello,    Ruby\"\np sprintf(\"Hello,%-8s\", name)\t\t#=> \"Hello,Ruby    \"\n```\n\n#### 字符串长度\n用**length**方法和**size**方法获取字符串长度。**bytesize**方法可以获取字节长度。\n\n``` ruby\nstr = \"This is a string\"\nstr2 = \"字符串\"\n\n#get the length of a string object\nputs str.length\t\t\t#=> 16\nputs str.size\t\t\t#=> 16\nputs str2.length\t\t#=> 3\n\n#get the bytesize of a string \nputs str.bytesize\t\t#=> 16\nputs str2.bytesize\t\t#=> 9\n```\n\n判断字符串是否为空，可用**empty?**方法。\n\n``` ruby\n#judge the string if is empty\nputs \"\".empty?\t\t\t#=> true\nputs \"string\".empty?\t#=> false\n```\n\n*字符串的索引与数组的索引用法一样，可参照使用*\n\n##### 字符串的连接\n字符串的连接有以下两种情况：   \n- 将字符串合并为一个新的字符串   \n- 扩展原有字符串\n\n使用**+**可以合并两个字符串时，会创建一个新的字符串。\n\n``` ruby\n#using '+', will create a new string object\nstr1 = \"hello \"\nstr2 = \"world\"\nstr3 = str1\n\nputs str1 + str2 \t\t\t#=> hello world\nputs str1\t\t\t\t\t#=> hello\n\nputs str1 = str1 + str2 \t#=> hello world\nputs str1\t\t\t\t\t#=> hello world\nputs str3\t\t\t\t\t#=> hello\n```\n\n如果只想扩展原有字符串，可以使用**<<**或**concat**方法。\n\n``` ruby\n#using '<<', will change the original string object\nstr1 = \"hello \"\nstr2 = \"world\"\nstr3 = str1\n\nputs str1<<str2\t\t\t\t#=> hello world\nputs str1\t\t\t\t\t#=> hello world\nputs str3\t\t\t\t\t#=> hello world\n\n#using 'concat' method, also will change the original string object\nstr1 = \"hello \"\nstr2 = \"world\"\nstr3 = str1\n\nputs str1.concat str2\t\t#=> hello world\nputs str1\t\t\t\t\t#=> hello world\nputs str3\t\t\t\t\t#=> hello world\n```\n*注意：一般情况下使用**<<**和**concat**方法更有效率，但是也可以根据情况而定*\n\n\n\n\n\n\n\n\n\n\n","slug":"2015-11-12-ruby-practice-14","published":1,"updated":"2023-09-02T18:00:36.061Z","_id":"clm27g4p0004gazv5ai4e319g","layout":"post","photos":[],"link":"","content":"<h4 id=\"字符串的创建\"><a href=\"#字符串的创建\" class=\"headerlink\" title=\"字符串的创建\"></a>字符串的创建</h4><h5 id=\"普通创建\"><a href=\"#普通创建\" class=\"headerlink\" title=\"普通创建\"></a>普通创建</h5><p>Ruby中使用**” “<strong>或</strong>‘ ‘<strong>符号来创建字符串，在字符串中也可以包含表达式</strong>#{}**，这个表达式被称之为内嵌表达式。如果字符串中需要包含””或者’’等字符时，则可以通过转义字符\\来实现。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&quot;this is a string&quot;</span></span><br><span class=\"line\">puts str</span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&#x27;this is also a string&#x27;</span></span><br><span class=\"line\">puts str</span><br><span class=\"line\"></span><br><span class=\"line\">args = <span class=\"string\">&quot;string with argument&quot;</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;this is a <span class=\"subst\">#&#123;args&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello &#x27;string&#x27;&quot;</span></span><br><span class=\"line\">puts str</span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello \\&quot;string\\&quot;&quot;</span></span><br><span class=\"line\">puts str</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<h5 id=\"Q或-q创建\"><a href=\"#Q或-q创建\" class=\"headerlink\" title=\"%Q或%q创建\"></a>%Q或%q创建</h5><p>针对字符串中包含””或’’等字符的，建议采用**%Q<strong>或者</strong>%q<strong>来创建字符串，这样更加清晰明了。使用</strong>%Q<strong>相当于</strong>“ “<strong>创建字符串，</strong>%q<strong>相当于</strong>‘ ‘**创建字符.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">%Q(this string created by %Q)</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">%q(this string created by %q)</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">%Q(contains &#x27;special&#x27; &quot;character&quot; directly)</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">%q(contains &#x27;special&#x27; &quot;character&quot; directly)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Here-Document创建，\"><a href=\"#Here-Document创建，\" class=\"headerlink\" title=\"Here Document创建，\"></a>Here Document创建，</h5><p>对于字符串中包含换行符的字符串，使用Here Document语法来创建极为方便。Here Document是Unix中使用Shell的一种语法，通常用**&lt;&lt;**来创建字符串。其语法结构如下：</p>\n<pre><code>&lt;&lt;&quot;结束标识符&quot;\n字符串内容\n结束标识符\n</code></pre>\n<p><em>注意：结束标识符可以使用” “或’ ‘来定义，使用” “时，字符串内可以使用转义字符和内嵌表达式，而’ ‘则不会，只会原封不动的显示所有字符。</em>   </p>\n<p>一般使用*EOF(End of File)<em>或</em>EOB(End of Block)*等作为结束标识符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&lt;&lt;EOB</span></span><br><span class=\"line\"><span class=\"string\">the first string</span></span><br><span class=\"line\"><span class=\"string\">the second string in a new line</span></span><br><span class=\"line\"><span class=\"string\">ok, I also get the third string</span></span><br><span class=\"line\"><span class=\"string\">EOB</span></span><br><span class=\"line\"></span><br><span class=\"line\">print str\t\t<span class=\"comment\">#=&gt;the string has three lines, just like defined.</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串中存在缩进，可以使用**&lt;&lt;-<strong>来替代</strong>&lt;&lt;**，这样将会保持字符串定义中的缩进。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用 \"></a>使用<code> </code></h5><p>通过使用<strong>`命令`</strong>, 可以创建命令的标准输出并将其转换为字符串对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">`ls -l`</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str \t\t</span><br><span class=\"line\"><span class=\"comment\">#=&gt; </span></span><br><span class=\"line\">total <span class=\"number\">8</span></span><br><span class=\"line\">-rw-r--r--  <span class=\"number\">1</span> yushi  staff  <span class=\"number\">634</span> <span class=\"title class_\">Nov</span> <span class=\"number\">16</span> <span class=\"number\">17</span><span class=\"symbol\">:</span><span class=\"number\">12</span> string_create.rb</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用printf和sprintf\"><a href=\"#使用printf和sprintf\" class=\"headerlink\" title=\"使用printf和sprintf\"></a>使用printf和sprintf</h5><p><strong>printf</strong>与<strong>sprintf</strong>均是可以输出指定格式的字符串，不同之处在于printf会将字符串直接输出在控制台上，而sprintf则会将字符串转为为字符串对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>, number)\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%4d\\n&quot;</span>, number)\t\t<span class=\"comment\">#=&gt;  123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%04d\\n&quot;</span>, number)    <span class=\"comment\">#=&gt; 0123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%+d\\n&quot;</span>, number)\t\t<span class=\"comment\">#=&gt; +123</span></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&quot;Ruby&quot;</span></span><br><span class=\"line\">p sprintf(<span class=\"string\">&quot;Hello,%s&quot;</span>, name)\t\t<span class=\"comment\">#=&gt; &quot;Hello,Ruby&quot;</span></span><br><span class=\"line\">p sprintf(<span class=\"string\">&quot;Hello,%8s&quot;</span>, name)\t\t<span class=\"comment\">#=&gt; &quot;Hello,    Ruby&quot;</span></span><br><span class=\"line\">p sprintf(<span class=\"string\">&quot;Hello,%-8s&quot;</span>, name)\t\t<span class=\"comment\">#=&gt; &quot;Hello,Ruby    &quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h4><p>用<strong>length</strong>方法和<strong>size</strong>方法获取字符串长度。<strong>bytesize</strong>方法可以获取字节长度。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&quot;This is a string&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;字符串&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#get the length of a string object</span></span><br><span class=\"line\">puts str.length\t\t\t<span class=\"comment\">#=&gt; 16</span></span><br><span class=\"line\">puts str.size\t\t\t<span class=\"comment\">#=&gt; 16</span></span><br><span class=\"line\">puts str2.length\t\t<span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#get the bytesize of a string </span></span><br><span class=\"line\">puts str.bytesize\t\t<span class=\"comment\">#=&gt; 16</span></span><br><span class=\"line\">puts str2.bytesize\t\t<span class=\"comment\">#=&gt; 9</span></span><br></pre></td></tr></table></figure>\n\n<p>判断字符串是否为空，可用**empty?**方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#judge the string if is empty</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;&quot;</span>.empty?\t\t\t<span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;string&quot;</span>.empty?\t<span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n\n<p><em>字符串的索引与数组的索引用法一样，可参照使用</em></p>\n<h5 id=\"字符串的连接\"><a href=\"#字符串的连接\" class=\"headerlink\" title=\"字符串的连接\"></a>字符串的连接</h5><p>字符串的连接有以下两种情况：   </p>\n<ul>\n<li>将字符串合并为一个新的字符串   </li>\n<li>扩展原有字符串</li>\n</ul>\n<p>使用**+**可以合并两个字符串时，会创建一个新的字符串。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using &#x27;+&#x27;, will create a new string object</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">str3 = str1</span><br><span class=\"line\"></span><br><span class=\"line\">puts str1 + str2 \t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str1\t\t\t\t\t<span class=\"comment\">#=&gt; hello</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str1 = str1 + str2 \t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str1\t\t\t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str3\t\t\t\t\t<span class=\"comment\">#=&gt; hello</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想扩展原有字符串，可以使用**&lt;&lt;<strong>或</strong>concat**方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using &#x27;&lt;&lt;&#x27;, will change the original string object</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">str3 = str1</span><br><span class=\"line\"></span><br><span class=\"line\">puts str1<span class=\"string\">&lt;&lt;str2\t\t\t\t#=&gt; hello world</span></span><br><span class=\"line\"><span class=\"string\">puts str1\t\t\t\t\t#=&gt; hello world</span></span><br><span class=\"line\"><span class=\"string\">puts str3\t\t\t\t\t#=&gt; hello world</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#using &#x27;concat&#x27; method, also will change the original string object</span></span><br><span class=\"line\"><span class=\"string\">str1 = &quot;hello &quot;</span></span><br><span class=\"line\"><span class=\"string\">str2</span> = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">str3 = str1</span><br><span class=\"line\"></span><br><span class=\"line\">puts str1.concat str2\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str1\t\t\t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str3\t\t\t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br></pre></td></tr></table></figure>\n<p><em>注意：一般情况下使用</em>*&lt;&lt;<strong>和</strong>concat*<em>方法更有效率，但是也可以根据情况而定</em></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"字符串的创建\"><a href=\"#字符串的创建\" class=\"headerlink\" title=\"字符串的创建\"></a>字符串的创建</h4><h5 id=\"普通创建\"><a href=\"#普通创建\" class=\"headerlink\" title=\"普通创建\"></a>普通创建</h5><p>Ruby中使用**” “<strong>或</strong>‘ ‘<strong>符号来创建字符串，在字符串中也可以包含表达式</strong>#{}**，这个表达式被称之为内嵌表达式。如果字符串中需要包含””或者’’等字符时，则可以通过转义字符\\来实现。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&quot;this is a string&quot;</span></span><br><span class=\"line\">puts str</span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&#x27;this is also a string&#x27;</span></span><br><span class=\"line\">puts str</span><br><span class=\"line\"></span><br><span class=\"line\">args = <span class=\"string\">&quot;string with argument&quot;</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;this is a <span class=\"subst\">#&#123;args&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello &#x27;string&#x27;&quot;</span></span><br><span class=\"line\">puts str</span><br><span class=\"line\"></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello \\&quot;string\\&quot;&quot;</span></span><br><span class=\"line\">puts str</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"Q或-q创建\"><a href=\"#Q或-q创建\" class=\"headerlink\" title=\"%Q或%q创建\"></a>%Q或%q创建</h5><p>针对字符串中包含””或’’等字符的，建议采用**%Q<strong>或者</strong>%q<strong>来创建字符串，这样更加清晰明了。使用</strong>%Q<strong>相当于</strong>“ “<strong>创建字符串，</strong>%q<strong>相当于</strong>‘ ‘**创建字符.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts <span class=\"string\">%Q(this string created by %Q)</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">%q(this string created by %q)</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">%Q(contains &#x27;special&#x27; &quot;character&quot; directly)</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">%q(contains &#x27;special&#x27; &quot;character&quot; directly)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Here-Document创建，\"><a href=\"#Here-Document创建，\" class=\"headerlink\" title=\"Here Document创建，\"></a>Here Document创建，</h5><p>对于字符串中包含换行符的字符串，使用Here Document语法来创建极为方便。Here Document是Unix中使用Shell的一种语法，通常用**&lt;&lt;**来创建字符串。其语法结构如下：</p>\n<pre><code>&lt;&lt;&quot;结束标识符&quot;\n字符串内容\n结束标识符\n</code></pre>\n<p><em>注意：结束标识符可以使用” “或’ ‘来定义，使用” “时，字符串内可以使用转义字符和内嵌表达式，而’ ‘则不会，只会原封不动的显示所有字符。</em>   </p>\n<p>一般使用*EOF(End of File)<em>或</em>EOB(End of Block)*等作为结束标识符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&lt;&lt;EOB</span></span><br><span class=\"line\"><span class=\"string\">the first string</span></span><br><span class=\"line\"><span class=\"string\">the second string in a new line</span></span><br><span class=\"line\"><span class=\"string\">ok, I also get the third string</span></span><br><span class=\"line\"><span class=\"string\">EOB</span></span><br><span class=\"line\"></span><br><span class=\"line\">print str\t\t<span class=\"comment\">#=&gt;the string has three lines, just like defined.</span></span><br></pre></td></tr></table></figure>\n<p>如果字符串中存在缩进，可以使用**&lt;&lt;-<strong>来替代</strong>&lt;&lt;**，这样将会保持字符串定义中的缩进。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用 \"></a>使用<code> </code></h5><p>通过使用<strong>`命令`</strong>, 可以创建命令的标准输出并将其转换为字符串对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">`ls -l`</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str \t\t</span><br><span class=\"line\"><span class=\"comment\">#=&gt; </span></span><br><span class=\"line\">total <span class=\"number\">8</span></span><br><span class=\"line\">-rw-r--r--  <span class=\"number\">1</span> yushi  staff  <span class=\"number\">634</span> <span class=\"title class_\">Nov</span> <span class=\"number\">16</span> <span class=\"number\">17</span><span class=\"symbol\">:</span><span class=\"number\">12</span> string_create.rb</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用printf和sprintf\"><a href=\"#使用printf和sprintf\" class=\"headerlink\" title=\"使用printf和sprintf\"></a>使用printf和sprintf</h5><p><strong>printf</strong>与<strong>sprintf</strong>均是可以输出指定格式的字符串，不同之处在于printf会将字符串直接输出在控制台上，而sprintf则会将字符串转为为字符串对象。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = <span class=\"number\">123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%d\\n&quot;</span>, number)\t\t<span class=\"comment\">#=&gt; 123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%4d\\n&quot;</span>, number)\t\t<span class=\"comment\">#=&gt;  123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%04d\\n&quot;</span>, number)    <span class=\"comment\">#=&gt; 0123</span></span><br><span class=\"line\">printf(<span class=\"string\">&quot;%+d\\n&quot;</span>, number)\t\t<span class=\"comment\">#=&gt; +123</span></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">&quot;Ruby&quot;</span></span><br><span class=\"line\">p sprintf(<span class=\"string\">&quot;Hello,%s&quot;</span>, name)\t\t<span class=\"comment\">#=&gt; &quot;Hello,Ruby&quot;</span></span><br><span class=\"line\">p sprintf(<span class=\"string\">&quot;Hello,%8s&quot;</span>, name)\t\t<span class=\"comment\">#=&gt; &quot;Hello,    Ruby&quot;</span></span><br><span class=\"line\">p sprintf(<span class=\"string\">&quot;Hello,%-8s&quot;</span>, name)\t\t<span class=\"comment\">#=&gt; &quot;Hello,Ruby    &quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h4><p>用<strong>length</strong>方法和<strong>size</strong>方法获取字符串长度。<strong>bytesize</strong>方法可以获取字节长度。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&quot;This is a string&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;字符串&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#get the length of a string object</span></span><br><span class=\"line\">puts str.length\t\t\t<span class=\"comment\">#=&gt; 16</span></span><br><span class=\"line\">puts str.size\t\t\t<span class=\"comment\">#=&gt; 16</span></span><br><span class=\"line\">puts str2.length\t\t<span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#get the bytesize of a string </span></span><br><span class=\"line\">puts str.bytesize\t\t<span class=\"comment\">#=&gt; 16</span></span><br><span class=\"line\">puts str2.bytesize\t\t<span class=\"comment\">#=&gt; 9</span></span><br></pre></td></tr></table></figure>\n\n<p>判断字符串是否为空，可用**empty?**方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#judge the string if is empty</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;&quot;</span>.empty?\t\t\t<span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;string&quot;</span>.empty?\t<span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n\n<p><em>字符串的索引与数组的索引用法一样，可参照使用</em></p>\n<h5 id=\"字符串的连接\"><a href=\"#字符串的连接\" class=\"headerlink\" title=\"字符串的连接\"></a>字符串的连接</h5><p>字符串的连接有以下两种情况：   </p>\n<ul>\n<li>将字符串合并为一个新的字符串   </li>\n<li>扩展原有字符串</li>\n</ul>\n<p>使用**+**可以合并两个字符串时，会创建一个新的字符串。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using &#x27;+&#x27;, will create a new string object</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">str3 = str1</span><br><span class=\"line\"></span><br><span class=\"line\">puts str1 + str2 \t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str1\t\t\t\t\t<span class=\"comment\">#=&gt; hello</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str1 = str1 + str2 \t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str1\t\t\t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str3\t\t\t\t\t<span class=\"comment\">#=&gt; hello</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想扩展原有字符串，可以使用**&lt;&lt;<strong>或</strong>concat**方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using &#x27;&lt;&lt;&#x27;, will change the original string object</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;hello &quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">str3 = str1</span><br><span class=\"line\"></span><br><span class=\"line\">puts str1<span class=\"string\">&lt;&lt;str2\t\t\t\t#=&gt; hello world</span></span><br><span class=\"line\"><span class=\"string\">puts str1\t\t\t\t\t#=&gt; hello world</span></span><br><span class=\"line\"><span class=\"string\">puts str3\t\t\t\t\t#=&gt; hello world</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#using &#x27;concat&#x27; method, also will change the original string object</span></span><br><span class=\"line\"><span class=\"string\">str1 = &quot;hello &quot;</span></span><br><span class=\"line\"><span class=\"string\">str2</span> = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">str3 = str1</span><br><span class=\"line\"></span><br><span class=\"line\">puts str1.concat str2\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str1\t\t\t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br><span class=\"line\">puts str3\t\t\t\t\t<span class=\"comment\">#=&gt; hello world</span></span><br></pre></td></tr></table></figure>\n<p><em>注意：一般情况下使用</em>*&lt;&lt;<strong>和</strong>concat*<em>方法更有效率，但是也可以根据情况而定</em></p>"},{"title":"Ruby修炼之道(15)","date":"2015-11-17T08:15:17.000Z","comments":1,"_content":"\n##### 字符串比较\nRuby中比较字符串是否相同也是用**==**和**!=**等运算符\n\n``` ruby\n#whether two strings are equal\nputs \"aaa\" == \"aab\" \t\t#=> false\nputs \"aaa\" != \"aab\"\t\t\t#=> true\n```\n如果是判断两字符串是否相似，采用正则表达式匹配更加简单。\n\n``` ruby\n#whether two strings are similar\nreg = Regexp.new(\"^a+b$\")\np \"aaa\" =~ reg \t\t\t#=> nil (not similar)\np \"ab\" =~ reg \t\t\t#=> 0 (similar)\np \"aab\" =~ reg \t\t\t#=> 0 (similar)\np \"acb\" =~ reg \t\t\t#=> nil (not similar)\n```\n<!-- more -->\n字符串大小由字符编码的顺序决定，可以通过调用**String#ord**方法获取字符编码的码位。\n\n``` ruby \n#compare two strings, which is bigger\nputs \"aaa\" > \"aab\"\t\t#=> false\nputs \"aaa\" <= \"aab\"\t\t#=> true\n```\n*注：Windows平台下的中文字符使用GBK编码，但非Windows平台下的中文字符使用UTF-8编码*\n\n##### 字符串的分割\n用特定字符分割字符串时可以使用**split**方法。\n\n``` ruby\n#split string with a special character\nstr = \"This is a string\"\np str.split(\" \") \t\t#=> [\"This\", \"is\", \"a\", \"string\"]\n```\n\n##### 字符串的换行符\n用**each_line**方法从标准输入读取字符串时，字符串后面肯定有换行符。在操作字符串时，我们可能不需要换行符。此时可以使用**chomp**和**chomp!**方法来删除字符串行末的换行符。\n\n``` ruby\n#delete the line break character from a string\nstr = \"hello ruby\\n\"\np str  \t\t\t\t\t#=> \"hello ruby\\n\"\np str.chomp \t\t\t#=> \"hello ruby\"\np str.chomp!\t\t\t#=> \"hello ruby\"\np str \t\t\t\t\t#=> \"hello ruby\"\n```\n如果说只想移除字符串行末的最后一个任意字符，可以通过是用**chop**和**chop!**方法来实现\n\n``` ruby\n#delete the last character from a string\nstr = \"hello ruby\"\nputs str.chop\t\t\t#=> hello rub\nputs str \t\t\t\t#=> hello ruby\nputs str.chop!\t\t\t#=> hello rub\nputs str\t\t\t\t#=> hello rub\n```\n##### 字符串的索引\n使用**index**和**rindex**方法可以获取某个字符串在另一个字符串中得索引位置，如果不在，则返回nil。**index**方法从左向右检索，**rindex**从右向左检索。\n\n``` ruby\n#get the index which a string in another string\nstr1 = \"aaabbbbbb\"\nstr2 = \"bb\"\n\nputs str1.index(str2)   #=> 3\nputs str1.rindex(str2)  #=> 7\n```\n如果只想判断某个字符串中是否包含另一个字符串时，使用**include?**方法更佳。\n\n``` ruby\n#a string whether contains another string\nstr1 = \"abc\"\nstr2 = \"ab\"\nputs str1.include?(str2) #=> true\n```\n##### 字符串的置换\n字符串的置换可以通过调用**sub**和**gsub**来实现。**sub**方法仅替换第一个出现的匹配字符，而**gsub**则会替换所有的匹配字符。\n\n``` ruby\n#the replacing of string\nputs \"hello\".sub('l', '*')\t\t#=> he*lo\nputs \"hello\".gsub('l', '*')\t\t#=> he**o\n```\n字符串的置换还可以通过像替换数组中元素的方式来实现，即索引\n\n``` ruby\nstr = \"hello\"\n\nstr[2] = '*'\nputs str \t\t\t\t\t\t#=> he*lo\n\nstr[2..3] = '**'       \nputs str      \t\t\t\t\t#=> he**o\n\nstr[1, 3]= '***'  \t\t\nputs str \t\t\t\t\t\t#=> h***o\n```\n\n##### 字符串与数组相同的方法\n字符串的很多方法都与数组相同，主要分为以下三大类：    \n- 与索引操作相关的方法   \n- 与**Enumerable**模块相关的方法    \n- 与连接、反转相关的方法    \n\n删除字符串中的一部分字符并返回，可使用**slice**方法    \n\n**slice(n)**    \n**slice(n..m)**    \n**slice(n, m)**    \n**slice!(n)**    \n**slice!(n..m)**\n**slice!(n, m)**\n\n``` ruby\n#the slice of string\nstr = \"hello ruby\"\nputs str.slice(1)\t\t\t\t#=> e\nputs str.slice(1..3)\t\t\t#=> ell\nputs str.slice(2, 3)\t\t\t#=> llo\n```\n不带块的情况下，大部分原生的迭代器在调用时都会返回**Enumberable**对象。因此我们可以对**each_line**, **each_byte**， **each_char**等方法的返回值继续使用像**map**， **collect**等方法。\n\n``` ruby\n#the enumerable of string\nstr = <<EOB\nhello\nruby\nEOB\n\np str \t\t\t\t#=> \"hello\\nruby\\n\"\n#return enumerable\np str.each_line \t\t\t\t#=> #<Enumerator: \"hello\\nruby\\n\":each_line>\n\np str.each_line.map { |e| e.chomp  }   #=> [\"hello\", \"ruby\"]\n\np str.each_line.collect { |e| e.chomp.upcase} #=> [\"HELLO\", \"RUBY\"]\n```\n\n**delete(str)**    \n**delete!(str)**   \n删除字符串中指定的字符串，并返回删除后的字符\n\n``` ruby\n#delete the specific string from another string\nstr = \"hello\\n ruby\\n\"\np str.delete(\"\\n\")      #=> \"hello ruby\"\np str \t\t\t\t\t#=> \"hello\\n ruby\\n\"\n\np str.delete!(\"\\n\")\t\t#=> \"hello ruby\"\np str \t\t\t\t\t#=> \"hello ruby\"\n```\n\n**reverse(str)**    \n**reverse!(str)**    \n反转字符串，包括破坏方法与非破坏方法\n\n``` ruby\n#reverse a string\nstr = \"hello ruby\"\np str.reverse \t\t\t#=> \"ybur olleh\"\n```\n\n**str.strip**    \n**str.strip!**    \n删除字符串str中行首和行尾的空白字符    \n\n``` ruby\n#remove the white space at the begin and end of string\nstr = \" hello ruby \"\np str \t\t\t\t\t#=> \" hello ruby\"\np str.strip \t\t    #=> \"hello ruby\"\n```\n\n**str.upcase/str.upcase!**    \n**str.downcase/str.downcase!**    \n**str.swapcase/str.swapcase!**    \n**str.capitalize/str.capitalize!**   \n字符串大小写的转换系列方法, **swapcase**方法是将字符串中的大小写相互转换。而**capitalize**方法则是将字符串的首个字符大写，其余的均改为小写    \n\n``` ruby\n#text transform\nstr = \"Hello RUBY\"\np str.upcase \t\t\t#=> \"HELLO RUBY\"\np str.downcase\t\t\t#=> \"hello ruby\"\np str.swapcase          #=> \"hELLO ruby\"\np str.capitalize\t\t#=> \"Hello ruby\"\n```\n\n\n","source":"_posts/2015-11-17-ruby-practice-15.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(15)\"\ndate: 2015-11-17 16:15:17 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n##### 字符串比较\nRuby中比较字符串是否相同也是用**==**和**!=**等运算符\n\n``` ruby\n#whether two strings are equal\nputs \"aaa\" == \"aab\" \t\t#=> false\nputs \"aaa\" != \"aab\"\t\t\t#=> true\n```\n如果是判断两字符串是否相似，采用正则表达式匹配更加简单。\n\n``` ruby\n#whether two strings are similar\nreg = Regexp.new(\"^a+b$\")\np \"aaa\" =~ reg \t\t\t#=> nil (not similar)\np \"ab\" =~ reg \t\t\t#=> 0 (similar)\np \"aab\" =~ reg \t\t\t#=> 0 (similar)\np \"acb\" =~ reg \t\t\t#=> nil (not similar)\n```\n<!-- more -->\n字符串大小由字符编码的顺序决定，可以通过调用**String#ord**方法获取字符编码的码位。\n\n``` ruby \n#compare two strings, which is bigger\nputs \"aaa\" > \"aab\"\t\t#=> false\nputs \"aaa\" <= \"aab\"\t\t#=> true\n```\n*注：Windows平台下的中文字符使用GBK编码，但非Windows平台下的中文字符使用UTF-8编码*\n\n##### 字符串的分割\n用特定字符分割字符串时可以使用**split**方法。\n\n``` ruby\n#split string with a special character\nstr = \"This is a string\"\np str.split(\" \") \t\t#=> [\"This\", \"is\", \"a\", \"string\"]\n```\n\n##### 字符串的换行符\n用**each_line**方法从标准输入读取字符串时，字符串后面肯定有换行符。在操作字符串时，我们可能不需要换行符。此时可以使用**chomp**和**chomp!**方法来删除字符串行末的换行符。\n\n``` ruby\n#delete the line break character from a string\nstr = \"hello ruby\\n\"\np str  \t\t\t\t\t#=> \"hello ruby\\n\"\np str.chomp \t\t\t#=> \"hello ruby\"\np str.chomp!\t\t\t#=> \"hello ruby\"\np str \t\t\t\t\t#=> \"hello ruby\"\n```\n如果说只想移除字符串行末的最后一个任意字符，可以通过是用**chop**和**chop!**方法来实现\n\n``` ruby\n#delete the last character from a string\nstr = \"hello ruby\"\nputs str.chop\t\t\t#=> hello rub\nputs str \t\t\t\t#=> hello ruby\nputs str.chop!\t\t\t#=> hello rub\nputs str\t\t\t\t#=> hello rub\n```\n##### 字符串的索引\n使用**index**和**rindex**方法可以获取某个字符串在另一个字符串中得索引位置，如果不在，则返回nil。**index**方法从左向右检索，**rindex**从右向左检索。\n\n``` ruby\n#get the index which a string in another string\nstr1 = \"aaabbbbbb\"\nstr2 = \"bb\"\n\nputs str1.index(str2)   #=> 3\nputs str1.rindex(str2)  #=> 7\n```\n如果只想判断某个字符串中是否包含另一个字符串时，使用**include?**方法更佳。\n\n``` ruby\n#a string whether contains another string\nstr1 = \"abc\"\nstr2 = \"ab\"\nputs str1.include?(str2) #=> true\n```\n##### 字符串的置换\n字符串的置换可以通过调用**sub**和**gsub**来实现。**sub**方法仅替换第一个出现的匹配字符，而**gsub**则会替换所有的匹配字符。\n\n``` ruby\n#the replacing of string\nputs \"hello\".sub('l', '*')\t\t#=> he*lo\nputs \"hello\".gsub('l', '*')\t\t#=> he**o\n```\n字符串的置换还可以通过像替换数组中元素的方式来实现，即索引\n\n``` ruby\nstr = \"hello\"\n\nstr[2] = '*'\nputs str \t\t\t\t\t\t#=> he*lo\n\nstr[2..3] = '**'       \nputs str      \t\t\t\t\t#=> he**o\n\nstr[1, 3]= '***'  \t\t\nputs str \t\t\t\t\t\t#=> h***o\n```\n\n##### 字符串与数组相同的方法\n字符串的很多方法都与数组相同，主要分为以下三大类：    \n- 与索引操作相关的方法   \n- 与**Enumerable**模块相关的方法    \n- 与连接、反转相关的方法    \n\n删除字符串中的一部分字符并返回，可使用**slice**方法    \n\n**slice(n)**    \n**slice(n..m)**    \n**slice(n, m)**    \n**slice!(n)**    \n**slice!(n..m)**\n**slice!(n, m)**\n\n``` ruby\n#the slice of string\nstr = \"hello ruby\"\nputs str.slice(1)\t\t\t\t#=> e\nputs str.slice(1..3)\t\t\t#=> ell\nputs str.slice(2, 3)\t\t\t#=> llo\n```\n不带块的情况下，大部分原生的迭代器在调用时都会返回**Enumberable**对象。因此我们可以对**each_line**, **each_byte**， **each_char**等方法的返回值继续使用像**map**， **collect**等方法。\n\n``` ruby\n#the enumerable of string\nstr = <<EOB\nhello\nruby\nEOB\n\np str \t\t\t\t#=> \"hello\\nruby\\n\"\n#return enumerable\np str.each_line \t\t\t\t#=> #<Enumerator: \"hello\\nruby\\n\":each_line>\n\np str.each_line.map { |e| e.chomp  }   #=> [\"hello\", \"ruby\"]\n\np str.each_line.collect { |e| e.chomp.upcase} #=> [\"HELLO\", \"RUBY\"]\n```\n\n**delete(str)**    \n**delete!(str)**   \n删除字符串中指定的字符串，并返回删除后的字符\n\n``` ruby\n#delete the specific string from another string\nstr = \"hello\\n ruby\\n\"\np str.delete(\"\\n\")      #=> \"hello ruby\"\np str \t\t\t\t\t#=> \"hello\\n ruby\\n\"\n\np str.delete!(\"\\n\")\t\t#=> \"hello ruby\"\np str \t\t\t\t\t#=> \"hello ruby\"\n```\n\n**reverse(str)**    \n**reverse!(str)**    \n反转字符串，包括破坏方法与非破坏方法\n\n``` ruby\n#reverse a string\nstr = \"hello ruby\"\np str.reverse \t\t\t#=> \"ybur olleh\"\n```\n\n**str.strip**    \n**str.strip!**    \n删除字符串str中行首和行尾的空白字符    \n\n``` ruby\n#remove the white space at the begin and end of string\nstr = \" hello ruby \"\np str \t\t\t\t\t#=> \" hello ruby\"\np str.strip \t\t    #=> \"hello ruby\"\n```\n\n**str.upcase/str.upcase!**    \n**str.downcase/str.downcase!**    \n**str.swapcase/str.swapcase!**    \n**str.capitalize/str.capitalize!**   \n字符串大小写的转换系列方法, **swapcase**方法是将字符串中的大小写相互转换。而**capitalize**方法则是将字符串的首个字符大写，其余的均改为小写    \n\n``` ruby\n#text transform\nstr = \"Hello RUBY\"\np str.upcase \t\t\t#=> \"HELLO RUBY\"\np str.downcase\t\t\t#=> \"hello ruby\"\np str.swapcase          #=> \"hELLO ruby\"\np str.capitalize\t\t#=> \"Hello ruby\"\n```\n\n\n","slug":"2015-11-17-ruby-practice-15","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4p1004jazv577fg8n9g","layout":"post","photos":[],"link":"","content":"<h5 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h5><p>Ruby中比较字符串是否相同也是用**&#x3D;&#x3D;<strong>和</strong>!&#x3D;**等运算符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#whether two strings are equal</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> == <span class=\"string\">&quot;aab&quot;</span> \t\t<span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> != <span class=\"string\">&quot;aab&quot;</span>\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>如果是判断两字符串是否相似，采用正则表达式匹配更加简单。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#whether two strings are similar</span></span><br><span class=\"line\">reg = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;^a+b$&quot;</span>)</span><br><span class=\"line\">p <span class=\"string\">&quot;aaa&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; nil (not similar)</span></span><br><span class=\"line\">p <span class=\"string\">&quot;ab&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; 0 (similar)</span></span><br><span class=\"line\">p <span class=\"string\">&quot;aab&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; 0 (similar)</span></span><br><span class=\"line\">p <span class=\"string\">&quot;acb&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; nil (not similar)</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>字符串大小由字符编码的顺序决定，可以通过调用<strong>String#ord</strong>方法获取字符编码的码位。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#compare two strings, which is bigger</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> &gt; <span class=\"string\">&quot;aab&quot;</span>\t\t<span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> &lt;= <span class=\"string\">&quot;aab&quot;</span>\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n<p><em>注：Windows平台下的中文字符使用GBK编码，但非Windows平台下的中文字符使用UTF-8编码</em></p>\n<h5 id=\"字符串的分割\"><a href=\"#字符串的分割\" class=\"headerlink\" title=\"字符串的分割\"></a>字符串的分割</h5><p>用特定字符分割字符串时可以使用<strong>split</strong>方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#split string with a special character</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;This is a string&quot;</span></span><br><span class=\"line\">p str.split(<span class=\"string\">&quot; &quot;</span>) \t\t<span class=\"comment\">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串的换行符\"><a href=\"#字符串的换行符\" class=\"headerlink\" title=\"字符串的换行符\"></a>字符串的换行符</h5><p>用<strong>each_line</strong>方法从标准输入读取字符串时，字符串后面肯定有换行符。在操作字符串时，我们可能不需要换行符。此时可以使用<strong>chomp</strong>和**chomp!**方法来删除字符串行末的换行符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#delete the line break character from a string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby\\n&quot;</span></span><br><span class=\"line\">p str  \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby\\n&quot;</span></span><br><span class=\"line\">p str.chomp \t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str.chomp!\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果说只想移除字符串行末的最后一个任意字符，可以通过是用<strong>chop</strong>和**chop!**方法来实现</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#delete the last character from a string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby&quot;</span></span><br><span class=\"line\">puts str.chop\t\t\t<span class=\"comment\">#=&gt; hello rub</span></span><br><span class=\"line\">puts str \t\t\t\t<span class=\"comment\">#=&gt; hello ruby</span></span><br><span class=\"line\">puts str.chop!\t\t\t<span class=\"comment\">#=&gt; hello rub</span></span><br><span class=\"line\">puts str\t\t\t\t<span class=\"comment\">#=&gt; hello rub</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"字符串的索引\"><a href=\"#字符串的索引\" class=\"headerlink\" title=\"字符串的索引\"></a>字符串的索引</h5><p>使用<strong>index</strong>和<strong>rindex</strong>方法可以获取某个字符串在另一个字符串中得索引位置，如果不在，则返回nil。<strong>index</strong>方法从左向右检索，<strong>rindex</strong>从右向左检索。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#get the index which a string in another string</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;aaabbbbbb&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;bb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str1.index(str2)   <span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\">puts str1.rindex(str2)  <span class=\"comment\">#=&gt; 7</span></span><br></pre></td></tr></table></figure>\n<p>如果只想判断某个字符串中是否包含另一个字符串时，使用**include?**方法更佳。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#a string whether contains another string</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;ab&quot;</span></span><br><span class=\"line\">puts str1.<span class=\"keyword\">include</span>?(str2) <span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"字符串的置换\"><a href=\"#字符串的置换\" class=\"headerlink\" title=\"字符串的置换\"></a>字符串的置换</h5><p>字符串的置换可以通过调用<strong>sub</strong>和<strong>gsub</strong>来实现。<strong>sub</strong>方法仅替换第一个出现的匹配字符，而<strong>gsub</strong>则会替换所有的匹配字符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#the replacing of string</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;hello&quot;</span>.sub(<span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)\t\t<span class=\"comment\">#=&gt; he*lo</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;hello&quot;</span>.gsub(<span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)\t\t<span class=\"comment\">#=&gt; he**o</span></span><br></pre></td></tr></table></figure>\n<p>字符串的置换还可以通过像替换数组中元素的方式来实现，即索引</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">str[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">puts str \t\t\t\t\t\t<span class=\"comment\">#=&gt; he*lo</span></span><br><span class=\"line\"></span><br><span class=\"line\">str[<span class=\"number\">2</span>..<span class=\"number\">3</span>] = <span class=\"string\">&#x27;**&#x27;</span>       </span><br><span class=\"line\">puts str      \t\t\t\t\t<span class=\"comment\">#=&gt; he**o</span></span><br><span class=\"line\"></span><br><span class=\"line\">str[<span class=\"number\">1</span>, <span class=\"number\">3</span>]= <span class=\"string\">&#x27;***&#x27;</span>  \t\t</span><br><span class=\"line\">puts str \t\t\t\t\t\t<span class=\"comment\">#=&gt; h***o</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串与数组相同的方法\"><a href=\"#字符串与数组相同的方法\" class=\"headerlink\" title=\"字符串与数组相同的方法\"></a>字符串与数组相同的方法</h5><p>字符串的很多方法都与数组相同，主要分为以下三大类：    </p>\n<ul>\n<li>与索引操作相关的方法   </li>\n<li>与<strong>Enumerable</strong>模块相关的方法    </li>\n<li>与连接、反转相关的方法</li>\n</ul>\n<p>删除字符串中的一部分字符并返回，可使用<strong>slice</strong>方法    </p>\n<p><strong>slice(n)</strong><br><strong>slice(n..m)</strong><br><strong>slice(n, m)</strong><br><strong>slice!(n)</strong><br><strong>slice!(n..m)</strong><br><strong>slice!(n, m)</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#the slice of string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby&quot;</span></span><br><span class=\"line\">puts str.slice(<span class=\"number\">1</span>)\t\t\t\t<span class=\"comment\">#=&gt; e</span></span><br><span class=\"line\">puts str.slice(<span class=\"number\">1</span>..<span class=\"number\">3</span>)\t\t\t<span class=\"comment\">#=&gt; ell</span></span><br><span class=\"line\">puts str.slice(<span class=\"number\">2</span>, <span class=\"number\">3</span>)\t\t\t<span class=\"comment\">#=&gt; llo</span></span><br></pre></td></tr></table></figure>\n<p>不带块的情况下，大部分原生的迭代器在调用时都会返回<strong>Enumberable</strong>对象。因此我们可以对<strong>each_line</strong>, <strong>each_byte</strong>， <strong>each_char</strong>等方法的返回值继续使用像<strong>map</strong>， <strong>collect</strong>等方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#the enumerable of string</span></span><br><span class=\"line\">str = <span class=\"string\">&lt;&lt;EOB</span></span><br><span class=\"line\"><span class=\"string\">hello</span></span><br><span class=\"line\"><span class=\"string\">ruby</span></span><br><span class=\"line\"><span class=\"string\">EOB</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str \t\t\t\t<span class=\"comment\">#=&gt; &quot;hello\\nruby\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#return enumerable</span></span><br><span class=\"line\">p str.each_line \t\t\t\t<span class=\"comment\">#=&gt; #&lt;Enumerator: &quot;hello\\nruby\\n&quot;:each_line&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str.each_line.map &#123; |<span class=\"params\">e</span>| e.chomp  &#125;   <span class=\"comment\">#=&gt; [&quot;hello&quot;, &quot;ruby&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str.each_line.collect &#123; |<span class=\"params\">e</span>| e.chomp.upcase&#125; <span class=\"comment\">#=&gt; [&quot;HELLO&quot;, &quot;RUBY&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>delete(str)</strong><br><strong>delete!(str)</strong><br>删除字符串中指定的字符串，并返回删除后的字符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#delete the specific string from another string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello\\n ruby\\n&quot;</span></span><br><span class=\"line\">p str.delete(<span class=\"string\">&quot;\\n&quot;</span>)      <span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello\\n ruby\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str.delete!(<span class=\"string\">&quot;\\n&quot;</span>)\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>reverse(str)</strong><br><strong>reverse!(str)</strong><br>反转字符串，包括破坏方法与非破坏方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#reverse a string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby&quot;</span></span><br><span class=\"line\">p str.reverse \t\t\t<span class=\"comment\">#=&gt; &quot;ybur olleh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>str.strip</strong><br><strong>str.strip!</strong><br>删除字符串str中行首和行尾的空白字符    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#remove the white space at the begin and end of string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot; hello ruby &quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot; hello ruby&quot;</span></span><br><span class=\"line\">p str.strip \t\t    <span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>str.upcase&#x2F;str.upcase!</strong><br><strong>str.downcase&#x2F;str.downcase!</strong><br><strong>str.swapcase&#x2F;str.swapcase!</strong><br><strong>str.capitalize&#x2F;str.capitalize!</strong><br>字符串大小写的转换系列方法, <strong>swapcase</strong>方法是将字符串中的大小写相互转换。而<strong>capitalize</strong>方法则是将字符串的首个字符大写，其余的均改为小写    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#text transform</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello RUBY&quot;</span></span><br><span class=\"line\">p str.upcase \t\t\t<span class=\"comment\">#=&gt; &quot;HELLO RUBY&quot;</span></span><br><span class=\"line\">p str.downcase\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str.swapcase          <span class=\"comment\">#=&gt; &quot;hELLO ruby&quot;</span></span><br><span class=\"line\">p str.capitalize\t\t<span class=\"comment\">#=&gt; &quot;Hello ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h5 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h5><p>Ruby中比较字符串是否相同也是用**&#x3D;&#x3D;<strong>和</strong>!&#x3D;**等运算符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#whether two strings are equal</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> == <span class=\"string\">&quot;aab&quot;</span> \t\t<span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> != <span class=\"string\">&quot;aab&quot;</span>\t\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n<p>如果是判断两字符串是否相似，采用正则表达式匹配更加简单。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#whether two strings are similar</span></span><br><span class=\"line\">reg = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;^a+b$&quot;</span>)</span><br><span class=\"line\">p <span class=\"string\">&quot;aaa&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; nil (not similar)</span></span><br><span class=\"line\">p <span class=\"string\">&quot;ab&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; 0 (similar)</span></span><br><span class=\"line\">p <span class=\"string\">&quot;aab&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; 0 (similar)</span></span><br><span class=\"line\">p <span class=\"string\">&quot;acb&quot;</span> =~ reg \t\t\t<span class=\"comment\">#=&gt; nil (not similar)</span></span><br></pre></td></tr></table></figure>","more":"<p>字符串大小由字符编码的顺序决定，可以通过调用<strong>String#ord</strong>方法获取字符编码的码位。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#compare two strings, which is bigger</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> &gt; <span class=\"string\">&quot;aab&quot;</span>\t\t<span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;aaa&quot;</span> &lt;= <span class=\"string\">&quot;aab&quot;</span>\t\t<span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n<p><em>注：Windows平台下的中文字符使用GBK编码，但非Windows平台下的中文字符使用UTF-8编码</em></p>\n<h5 id=\"字符串的分割\"><a href=\"#字符串的分割\" class=\"headerlink\" title=\"字符串的分割\"></a>字符串的分割</h5><p>用特定字符分割字符串时可以使用<strong>split</strong>方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#split string with a special character</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;This is a string&quot;</span></span><br><span class=\"line\">p str.split(<span class=\"string\">&quot; &quot;</span>) \t\t<span class=\"comment\">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串的换行符\"><a href=\"#字符串的换行符\" class=\"headerlink\" title=\"字符串的换行符\"></a>字符串的换行符</h5><p>用<strong>each_line</strong>方法从标准输入读取字符串时，字符串后面肯定有换行符。在操作字符串时，我们可能不需要换行符。此时可以使用<strong>chomp</strong>和**chomp!**方法来删除字符串行末的换行符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#delete the line break character from a string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby\\n&quot;</span></span><br><span class=\"line\">p str  \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby\\n&quot;</span></span><br><span class=\"line\">p str.chomp \t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str.chomp!\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果说只想移除字符串行末的最后一个任意字符，可以通过是用<strong>chop</strong>和**chop!**方法来实现</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#delete the last character from a string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby&quot;</span></span><br><span class=\"line\">puts str.chop\t\t\t<span class=\"comment\">#=&gt; hello rub</span></span><br><span class=\"line\">puts str \t\t\t\t<span class=\"comment\">#=&gt; hello ruby</span></span><br><span class=\"line\">puts str.chop!\t\t\t<span class=\"comment\">#=&gt; hello rub</span></span><br><span class=\"line\">puts str\t\t\t\t<span class=\"comment\">#=&gt; hello rub</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"字符串的索引\"><a href=\"#字符串的索引\" class=\"headerlink\" title=\"字符串的索引\"></a>字符串的索引</h5><p>使用<strong>index</strong>和<strong>rindex</strong>方法可以获取某个字符串在另一个字符串中得索引位置，如果不在，则返回nil。<strong>index</strong>方法从左向右检索，<strong>rindex</strong>从右向左检索。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#get the index which a string in another string</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;aaabbbbbb&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;bb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str1.index(str2)   <span class=\"comment\">#=&gt; 3</span></span><br><span class=\"line\">puts str1.rindex(str2)  <span class=\"comment\">#=&gt; 7</span></span><br></pre></td></tr></table></figure>\n<p>如果只想判断某个字符串中是否包含另一个字符串时，使用**include?**方法更佳。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#a string whether contains another string</span></span><br><span class=\"line\">str1 = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">str2 = <span class=\"string\">&quot;ab&quot;</span></span><br><span class=\"line\">puts str1.<span class=\"keyword\">include</span>?(str2) <span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"字符串的置换\"><a href=\"#字符串的置换\" class=\"headerlink\" title=\"字符串的置换\"></a>字符串的置换</h5><p>字符串的置换可以通过调用<strong>sub</strong>和<strong>gsub</strong>来实现。<strong>sub</strong>方法仅替换第一个出现的匹配字符，而<strong>gsub</strong>则会替换所有的匹配字符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#the replacing of string</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;hello&quot;</span>.sub(<span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)\t\t<span class=\"comment\">#=&gt; he*lo</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;hello&quot;</span>.gsub(<span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>)\t\t<span class=\"comment\">#=&gt; he**o</span></span><br></pre></td></tr></table></figure>\n<p>字符串的置换还可以通过像替换数组中元素的方式来实现，即索引</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">str[<span class=\"number\">2</span>] = <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">puts str \t\t\t\t\t\t<span class=\"comment\">#=&gt; he*lo</span></span><br><span class=\"line\"></span><br><span class=\"line\">str[<span class=\"number\">2</span>..<span class=\"number\">3</span>] = <span class=\"string\">&#x27;**&#x27;</span>       </span><br><span class=\"line\">puts str      \t\t\t\t\t<span class=\"comment\">#=&gt; he**o</span></span><br><span class=\"line\"></span><br><span class=\"line\">str[<span class=\"number\">1</span>, <span class=\"number\">3</span>]= <span class=\"string\">&#x27;***&#x27;</span>  \t\t</span><br><span class=\"line\">puts str \t\t\t\t\t\t<span class=\"comment\">#=&gt; h***o</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串与数组相同的方法\"><a href=\"#字符串与数组相同的方法\" class=\"headerlink\" title=\"字符串与数组相同的方法\"></a>字符串与数组相同的方法</h5><p>字符串的很多方法都与数组相同，主要分为以下三大类：    </p>\n<ul>\n<li>与索引操作相关的方法   </li>\n<li>与<strong>Enumerable</strong>模块相关的方法    </li>\n<li>与连接、反转相关的方法</li>\n</ul>\n<p>删除字符串中的一部分字符并返回，可使用<strong>slice</strong>方法    </p>\n<p><strong>slice(n)</strong><br><strong>slice(n..m)</strong><br><strong>slice(n, m)</strong><br><strong>slice!(n)</strong><br><strong>slice!(n..m)</strong><br><strong>slice!(n, m)</strong></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#the slice of string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby&quot;</span></span><br><span class=\"line\">puts str.slice(<span class=\"number\">1</span>)\t\t\t\t<span class=\"comment\">#=&gt; e</span></span><br><span class=\"line\">puts str.slice(<span class=\"number\">1</span>..<span class=\"number\">3</span>)\t\t\t<span class=\"comment\">#=&gt; ell</span></span><br><span class=\"line\">puts str.slice(<span class=\"number\">2</span>, <span class=\"number\">3</span>)\t\t\t<span class=\"comment\">#=&gt; llo</span></span><br></pre></td></tr></table></figure>\n<p>不带块的情况下，大部分原生的迭代器在调用时都会返回<strong>Enumberable</strong>对象。因此我们可以对<strong>each_line</strong>, <strong>each_byte</strong>， <strong>each_char</strong>等方法的返回值继续使用像<strong>map</strong>， <strong>collect</strong>等方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#the enumerable of string</span></span><br><span class=\"line\">str = <span class=\"string\">&lt;&lt;EOB</span></span><br><span class=\"line\"><span class=\"string\">hello</span></span><br><span class=\"line\"><span class=\"string\">ruby</span></span><br><span class=\"line\"><span class=\"string\">EOB</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str \t\t\t\t<span class=\"comment\">#=&gt; &quot;hello\\nruby\\n&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#return enumerable</span></span><br><span class=\"line\">p str.each_line \t\t\t\t<span class=\"comment\">#=&gt; #&lt;Enumerator: &quot;hello\\nruby\\n&quot;:each_line&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str.each_line.map &#123; |<span class=\"params\">e</span>| e.chomp  &#125;   <span class=\"comment\">#=&gt; [&quot;hello&quot;, &quot;ruby&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str.each_line.collect &#123; |<span class=\"params\">e</span>| e.chomp.upcase&#125; <span class=\"comment\">#=&gt; [&quot;HELLO&quot;, &quot;RUBY&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>delete(str)</strong><br><strong>delete!(str)</strong><br>删除字符串中指定的字符串，并返回删除后的字符</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#delete the specific string from another string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello\\n ruby\\n&quot;</span></span><br><span class=\"line\">p str.delete(<span class=\"string\">&quot;\\n&quot;</span>)      <span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello\\n ruby\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p str.delete!(<span class=\"string\">&quot;\\n&quot;</span>)\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>reverse(str)</strong><br><strong>reverse!(str)</strong><br>反转字符串，包括破坏方法与非破坏方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#reverse a string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;hello ruby&quot;</span></span><br><span class=\"line\">p str.reverse \t\t\t<span class=\"comment\">#=&gt; &quot;ybur olleh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>str.strip</strong><br><strong>str.strip!</strong><br>删除字符串str中行首和行尾的空白字符    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#remove the white space at the begin and end of string</span></span><br><span class=\"line\">str = <span class=\"string\">&quot; hello ruby &quot;</span></span><br><span class=\"line\">p str \t\t\t\t\t<span class=\"comment\">#=&gt; &quot; hello ruby&quot;</span></span><br><span class=\"line\">p str.strip \t\t    <span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>str.upcase&#x2F;str.upcase!</strong><br><strong>str.downcase&#x2F;str.downcase!</strong><br><strong>str.swapcase&#x2F;str.swapcase!</strong><br><strong>str.capitalize&#x2F;str.capitalize!</strong><br>字符串大小写的转换系列方法, <strong>swapcase</strong>方法是将字符串中的大小写相互转换。而<strong>capitalize</strong>方法则是将字符串的首个字符大写，其余的均改为小写    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#text transform</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;Hello RUBY&quot;</span></span><br><span class=\"line\">p str.upcase \t\t\t<span class=\"comment\">#=&gt; &quot;HELLO RUBY&quot;</span></span><br><span class=\"line\">p str.downcase\t\t\t<span class=\"comment\">#=&gt; &quot;hello ruby&quot;</span></span><br><span class=\"line\">p str.swapcase          <span class=\"comment\">#=&gt; &quot;hELLO ruby&quot;</span></span><br><span class=\"line\">p str.capitalize\t\t<span class=\"comment\">#=&gt; &quot;Hello ruby&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"Ruby修炼之道(16)","date":"2015-11-18T02:49:41.000Z","comments":1,"_content":"\n#### 散列类\n散列(**Hash**)和数组一样，都是表示对象集合的对象，不同之处在于，数组使用索引来取得元素，而散列则是用键key，key可以是任何对象，而索引则不能，只能是整数。\n\n##### 散列的创建\n1.使用 **{}**\n\n\n\t\t{key=>value}\n\t\t或\n\t\t{key:value}\n\n<!-- more -->\n``` ruby\nhash1 = {\"key1\"=>\"value1\", \"key2\"=>\"value2\"}\np hash1[\"key1\"]\t\t\t#=> \"value1\"\n\nhash2 = {key1:\"value1\", key2:\"value2\"}\np hash2[:key1]\t\t\t#=> \"value1\"\n```\n\n2.使用**Hash.new**\n\nHash.new()可带参数，当带参数的时候表示该参数为默认值，即当键不存在时，所得的值为该默认值；不带参数情况下，其默认值为nil\n\n``` ruby\nhash1 = Hash.new\nhash2 = Hash.new(\"ruby\")\n\np hash1[\"key\"]\t\t\t#=> nil\np hash2[\"key\"]\t\t\t#=> \"ruby\"\n\n```\n散列的键可以是任意对象，一般推荐使用下列类型的对象来作为键：字符串(String), 数值(Numberic), 符号(Symbol), 日期(Date).\n\n##### 散列值的设置和获取\n一般情况下，我们大多使用最普通的方法来给散列赋值或取值, 如果键不存在，则返回nil\n\n``` ruby\n#common set and get\nhash = Hash.new\nhash[\"a\"] = \"first\"\n\np hash[\"a\"]\t\t\t#=> \"first\"\np hash[\"abc\"]\t\t#=> nil\n```\n\nRuby还提供了**store**方法来存储值，使用**fetch**方法来获取值\n\n``` ruby\n#store and fetch\nhash = Hash.new\n\nhash.store(\"key\", \"ruby\")\n\np hash.fetch(\"key\")\t\t#=> \"ruby\"\n```\n但**fetch**方法与[]不同之处在于，如果hash对象中不存在键时，使用此方法将会出错\n\n``` ruby\nhash = Hash.new\n\nhash.store(\"key\", \"ruby\")\n\nhash.fetch(\"abc\")\t\t#=> KeyError\n```\n\n**fetch**方法同样可以返回一个默认值，当它指定第2个参数时或者带块时\n\n``` ruby\nhash = Hash.new\n\np hash.fetch(\"abc\", \"default value\")\t#=> \"default value\"\n\np hash.fetch(\"abc\") {\"a_\"+ String.new(\"bc\")}\t#=>\"a_bc\"\n```\n\n通过**keys**和**values**方法可以得到所有的键和值，而且**to_a**方法可以键值组合的数组。\n\n``` ruby\nget all keys and values\nhash = {\"a\"=>\"b\", \"c\"=>\"d\"}\n\np hash.keys\t\t#=> [\"a\", \"c\"]\np hash.values\t\t#=> [\"b\", \"d\"]\np hash.to_a\t\t#=> [[\"a\", \"b\"], [\"c\", \"d\"]]\n```\n\nRuby也支持了Hash对象的迭代遍历\n\n``` ruby\nhash = {\"a\"=>\"b\", \"c\"=>\"d\"}\n\nhash.each_key do |key|\n\tputs key\nend\n\nhash.each_value do |value|\n\tputs value\nend\n\nhash.each do |key, value|\n\tputs \"#{key}=>#{value}\"\nend\n```\n\n##### 散列的默认值\n散列的默认值设置有三种方式\n1.使用Hash.new带参数作为默认值\n\n``` ruby\nhash = Hash.new(\"ruby\")\np hash[\"a\"] \t\t#=> \"ruby\"\n```\n\n2.使用块指定默认值\n\n``` ruby\nhash = Hash.new do |hash, key|\n\thash[key] = key.upcase\nend\n\np hash[\"a\"]\t\t\t#=> \"A\"\np hash[\"B\"]\t\t\t#=> \"B\"\n```\n\n3.使用fetch方法指定默认值\n\n``` ruby\nhash = Hash.new do |hash, key|\n\thash[key] = key.upcase\nend\n\np hash.fetch(\"a\", \"abc\")\t\t\t#=> \"abc\"\n```\n*注：当Hash.new方法指定了默认值或块时，fetch方法的第二个参数指定的默认值的优先级是最高的，且看上例*\n\n##### 散列其他方法\n1.查看指定对象是否为散列的键    \nh.**key?**(key)    \nh.**has_key?**(key)    \nh.**include?**(key)    \nh.**member?**(key)   \n\n``` ruby\nhash = {\"a\" => \"b\", \"c\"=> \"d\"}\n\np hash.key?(\"a\")    #=> true\np hash.key?(\"x\")    #=> false\np hash.has_key?(\"c\")  #=> true\np hash.include?(\"a\")  #=> true\np hash.member?(\"x\")   #=> false\n```\n\n2.查看指定对象是否为散列的值    \nh.**value?**(val)    \nh.**has_value?**(val)    \n\n``` ruby\nhash = {\"a\"=>\"b\", \"c\"=>\"d\"}\n\np hash.value?(\"a\")        #=> true\np hash.has_value?(\"x\")    #=> false\n```\n\n3.获取散列的大小    \nhash.**length**    \nhash.**size**    \n\n``` ruby\nhash = {:a => \"b\", :c => \"d\"}\n\np hash.length   #=> 2\np hash.size   #=> 2\n```\n\n4.判断散列是否为空      \nhash.**empty?**    \n\n``` ruby\nhash = {:a=>\"b\"}\np hash.empty?     #=> false\n\nhash = Hash.new\np hash.empty?     #=> true\n```\n\n6.删除键值    \nh.**delete**(key)   \nh.**delete_if**{|key,val| ...}    \nh.**reject!**{|key, val| ...}    \n\n``` ruby\nhash = {:a => \"b\"}\np hash[:a]    #=> \"b\"\n\nhash.delete(:a)\np hash[:a]    #=> nil\n\nhash = {:a => \"b\"}\np hash.delete(:x) { |key| \"no #{key} in this hash object\"}   #=>\"no x in this hash object\"\n\nhash = {:a => \"b\", :c => \"d\"}\np hash.delete_if {|key, val| key == :a }     #=> {:c=>\"d\"}\np hash.delete_if {|key, val| key == :b }     #=> {:c=>\"d\"}\n\nhash = {:a => \"b\", :c => \"d\"}\np hash.reject! {|key, val| key == :a}       #=> {:c=>\"d\"}\np hash.reject! {|key, val| key == :b}       #=> nil\n```\ndelete方法带块时，如果不存在指定的键, 则返回块中的结果。**delete_if**方法和**reject!**功能一样，区别在于如果不满足条件是，delete_if返回的是散列对象本身，而reject！则返回nil。\n\n7.初始化散列    \nh.**clear**    \n用**clear**方法清空使用过的散列\n\n``` ruby\nhash = {a:\"b\", c:\"d\"}\np hash.size     #=> 2\n\nhash.clear\np hash.size     #=> 0\n```\n\n##### 关于散列的键\n\n``` ruby\nhash = Hash.new\nkey1 = 1\nkey2 = 1.0\n\np key1 == key2      #=> true\n\nhash[key1] = \"ruby\"\np hash.key?(key1)     #=> true\np hash.has_key?(key2)   #=> false\n```\n注：在散列内部，程序会将散列获取值时指定的键，与将值保存到散列时指定的键做比较，判断两者是否一致。具体来说就是，如果两个键key1，key2，当key1.hash与key2.hash得到的整数值相同，并且key1.eql?(key2)为true时，就会认为这两个键是一致的。\n","source":"_posts/2015-11-18-ruby-practice-16.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(16)\"\ndate: 2015-11-18 10:49:41 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n#### 散列类\n散列(**Hash**)和数组一样，都是表示对象集合的对象，不同之处在于，数组使用索引来取得元素，而散列则是用键key，key可以是任何对象，而索引则不能，只能是整数。\n\n##### 散列的创建\n1.使用 **{}**\n\n\n\t\t{key=>value}\n\t\t或\n\t\t{key:value}\n\n<!-- more -->\n``` ruby\nhash1 = {\"key1\"=>\"value1\", \"key2\"=>\"value2\"}\np hash1[\"key1\"]\t\t\t#=> \"value1\"\n\nhash2 = {key1:\"value1\", key2:\"value2\"}\np hash2[:key1]\t\t\t#=> \"value1\"\n```\n\n2.使用**Hash.new**\n\nHash.new()可带参数，当带参数的时候表示该参数为默认值，即当键不存在时，所得的值为该默认值；不带参数情况下，其默认值为nil\n\n``` ruby\nhash1 = Hash.new\nhash2 = Hash.new(\"ruby\")\n\np hash1[\"key\"]\t\t\t#=> nil\np hash2[\"key\"]\t\t\t#=> \"ruby\"\n\n```\n散列的键可以是任意对象，一般推荐使用下列类型的对象来作为键：字符串(String), 数值(Numberic), 符号(Symbol), 日期(Date).\n\n##### 散列值的设置和获取\n一般情况下，我们大多使用最普通的方法来给散列赋值或取值, 如果键不存在，则返回nil\n\n``` ruby\n#common set and get\nhash = Hash.new\nhash[\"a\"] = \"first\"\n\np hash[\"a\"]\t\t\t#=> \"first\"\np hash[\"abc\"]\t\t#=> nil\n```\n\nRuby还提供了**store**方法来存储值，使用**fetch**方法来获取值\n\n``` ruby\n#store and fetch\nhash = Hash.new\n\nhash.store(\"key\", \"ruby\")\n\np hash.fetch(\"key\")\t\t#=> \"ruby\"\n```\n但**fetch**方法与[]不同之处在于，如果hash对象中不存在键时，使用此方法将会出错\n\n``` ruby\nhash = Hash.new\n\nhash.store(\"key\", \"ruby\")\n\nhash.fetch(\"abc\")\t\t#=> KeyError\n```\n\n**fetch**方法同样可以返回一个默认值，当它指定第2个参数时或者带块时\n\n``` ruby\nhash = Hash.new\n\np hash.fetch(\"abc\", \"default value\")\t#=> \"default value\"\n\np hash.fetch(\"abc\") {\"a_\"+ String.new(\"bc\")}\t#=>\"a_bc\"\n```\n\n通过**keys**和**values**方法可以得到所有的键和值，而且**to_a**方法可以键值组合的数组。\n\n``` ruby\nget all keys and values\nhash = {\"a\"=>\"b\", \"c\"=>\"d\"}\n\np hash.keys\t\t#=> [\"a\", \"c\"]\np hash.values\t\t#=> [\"b\", \"d\"]\np hash.to_a\t\t#=> [[\"a\", \"b\"], [\"c\", \"d\"]]\n```\n\nRuby也支持了Hash对象的迭代遍历\n\n``` ruby\nhash = {\"a\"=>\"b\", \"c\"=>\"d\"}\n\nhash.each_key do |key|\n\tputs key\nend\n\nhash.each_value do |value|\n\tputs value\nend\n\nhash.each do |key, value|\n\tputs \"#{key}=>#{value}\"\nend\n```\n\n##### 散列的默认值\n散列的默认值设置有三种方式\n1.使用Hash.new带参数作为默认值\n\n``` ruby\nhash = Hash.new(\"ruby\")\np hash[\"a\"] \t\t#=> \"ruby\"\n```\n\n2.使用块指定默认值\n\n``` ruby\nhash = Hash.new do |hash, key|\n\thash[key] = key.upcase\nend\n\np hash[\"a\"]\t\t\t#=> \"A\"\np hash[\"B\"]\t\t\t#=> \"B\"\n```\n\n3.使用fetch方法指定默认值\n\n``` ruby\nhash = Hash.new do |hash, key|\n\thash[key] = key.upcase\nend\n\np hash.fetch(\"a\", \"abc\")\t\t\t#=> \"abc\"\n```\n*注：当Hash.new方法指定了默认值或块时，fetch方法的第二个参数指定的默认值的优先级是最高的，且看上例*\n\n##### 散列其他方法\n1.查看指定对象是否为散列的键    \nh.**key?**(key)    \nh.**has_key?**(key)    \nh.**include?**(key)    \nh.**member?**(key)   \n\n``` ruby\nhash = {\"a\" => \"b\", \"c\"=> \"d\"}\n\np hash.key?(\"a\")    #=> true\np hash.key?(\"x\")    #=> false\np hash.has_key?(\"c\")  #=> true\np hash.include?(\"a\")  #=> true\np hash.member?(\"x\")   #=> false\n```\n\n2.查看指定对象是否为散列的值    \nh.**value?**(val)    \nh.**has_value?**(val)    \n\n``` ruby\nhash = {\"a\"=>\"b\", \"c\"=>\"d\"}\n\np hash.value?(\"a\")        #=> true\np hash.has_value?(\"x\")    #=> false\n```\n\n3.获取散列的大小    \nhash.**length**    \nhash.**size**    \n\n``` ruby\nhash = {:a => \"b\", :c => \"d\"}\n\np hash.length   #=> 2\np hash.size   #=> 2\n```\n\n4.判断散列是否为空      \nhash.**empty?**    \n\n``` ruby\nhash = {:a=>\"b\"}\np hash.empty?     #=> false\n\nhash = Hash.new\np hash.empty?     #=> true\n```\n\n6.删除键值    \nh.**delete**(key)   \nh.**delete_if**{|key,val| ...}    \nh.**reject!**{|key, val| ...}    \n\n``` ruby\nhash = {:a => \"b\"}\np hash[:a]    #=> \"b\"\n\nhash.delete(:a)\np hash[:a]    #=> nil\n\nhash = {:a => \"b\"}\np hash.delete(:x) { |key| \"no #{key} in this hash object\"}   #=>\"no x in this hash object\"\n\nhash = {:a => \"b\", :c => \"d\"}\np hash.delete_if {|key, val| key == :a }     #=> {:c=>\"d\"}\np hash.delete_if {|key, val| key == :b }     #=> {:c=>\"d\"}\n\nhash = {:a => \"b\", :c => \"d\"}\np hash.reject! {|key, val| key == :a}       #=> {:c=>\"d\"}\np hash.reject! {|key, val| key == :b}       #=> nil\n```\ndelete方法带块时，如果不存在指定的键, 则返回块中的结果。**delete_if**方法和**reject!**功能一样，区别在于如果不满足条件是，delete_if返回的是散列对象本身，而reject！则返回nil。\n\n7.初始化散列    \nh.**clear**    \n用**clear**方法清空使用过的散列\n\n``` ruby\nhash = {a:\"b\", c:\"d\"}\np hash.size     #=> 2\n\nhash.clear\np hash.size     #=> 0\n```\n\n##### 关于散列的键\n\n``` ruby\nhash = Hash.new\nkey1 = 1\nkey2 = 1.0\n\np key1 == key2      #=> true\n\nhash[key1] = \"ruby\"\np hash.key?(key1)     #=> true\np hash.has_key?(key2)   #=> false\n```\n注：在散列内部，程序会将散列获取值时指定的键，与将值保存到散列时指定的键做比较，判断两者是否一致。具体来说就是，如果两个键key1，key2，当key1.hash与key2.hash得到的整数值相同，并且key1.eql?(key2)为true时，就会认为这两个键是一致的。\n","slug":"2015-11-18-ruby-practice-16","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4p2004lazv5h93ubtjx","layout":"post","photos":[],"link":"","content":"<h4 id=\"散列类\"><a href=\"#散列类\" class=\"headerlink\" title=\"散列类\"></a>散列类</h4><p>散列(<strong>Hash</strong>)和数组一样，都是表示对象集合的对象，不同之处在于，数组使用索引来取得元素，而散列则是用键key，key可以是任何对象，而索引则不能，只能是整数。</p>\n<h5 id=\"散列的创建\"><a href=\"#散列的创建\" class=\"headerlink\" title=\"散列的创建\"></a>散列的创建</h5><p>1.使用 <strong>{}</strong></p>\n<pre><code>    &#123;key=&gt;value&#125;\n    或\n    &#123;key:value&#125;\n</code></pre>\n<span id=\"more\"></span>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash1 = &#123;<span class=\"string\">&quot;key1&quot;</span>=&gt;<span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>=&gt;<span class=\"string\">&quot;value2&quot;</span>&#125;</span><br><span class=\"line\">p hash1[<span class=\"string\">&quot;key1&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;value1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash2 = &#123;<span class=\"symbol\">key1:</span><span class=\"string\">&quot;value1&quot;</span>, <span class=\"symbol\">key2:</span><span class=\"string\">&quot;value2&quot;</span>&#125;</span><br><span class=\"line\">p hash2[<span class=\"symbol\">:key1</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;value1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.使用<strong>Hash.new</strong></p>\n<p>Hash.new()可带参数，当带参数的时候表示该参数为默认值，即当键不存在时，所得的值为该默认值；不带参数情况下，其默认值为nil</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash1 = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">hash2 = <span class=\"title class_\">Hash</span>.new(<span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p hash1[<span class=\"string\">&quot;key&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\">p hash2[<span class=\"string\">&quot;key&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;ruby&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>散列的键可以是任意对象，一般推荐使用下列类型的对象来作为键：字符串(String), 数值(Numberic), 符号(Symbol), 日期(Date).</p>\n<h5 id=\"散列值的设置和获取\"><a href=\"#散列值的设置和获取\" class=\"headerlink\" title=\"散列值的设置和获取\"></a>散列值的设置和获取</h5><p>一般情况下，我们大多使用最普通的方法来给散列赋值或取值, 如果键不存在，则返回nil</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#common set and get</span></span><br><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">hash[<span class=\"string\">&quot;a&quot;</span>] = <span class=\"string\">&quot;first&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;a&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;first&quot;</span></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;abc&quot;</span>]\t\t<span class=\"comment\">#=&gt; nil</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby还提供了<strong>store</strong>方法来存储值，使用<strong>fetch</strong>方法来获取值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#store and fetch</span></span><br><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\"></span><br><span class=\"line\">hash.store(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;key&quot;</span>)\t\t<span class=\"comment\">#=&gt; &quot;ruby&quot;</span></span><br></pre></td></tr></table></figure>\n<p>但<strong>fetch</strong>方法与[]不同之处在于，如果hash对象中不存在键时，使用此方法将会出错</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\"></span><br><span class=\"line\">hash.store(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">hash.fetch(<span class=\"string\">&quot;abc&quot;</span>)\t\t<span class=\"comment\">#=&gt; KeyError</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>fetch</strong>方法同样可以返回一个默认值，当它指定第2个参数时或者带块时</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;default value&quot;</span>)\t<span class=\"comment\">#=&gt; &quot;default value&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;abc&quot;</span>) &#123;<span class=\"string\">&quot;a_&quot;</span>+ <span class=\"title class_\">String</span>.new(<span class=\"string\">&quot;bc&quot;</span>)&#125;\t<span class=\"comment\">#=&gt;&quot;a_bc&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过<strong>keys</strong>和<strong>values</strong>方法可以得到所有的键和值，而且<strong>to_a</strong>方法可以键值组合的数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get all keys <span class=\"keyword\">and</span> values</span><br><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.keys\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;c&quot;]</span></span><br><span class=\"line\">p hash.values\t\t<span class=\"comment\">#=&gt; [&quot;b&quot;, &quot;d&quot;]</span></span><br><span class=\"line\">p hash.to_a\t\t<span class=\"comment\">#=&gt; [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;]]</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby也支持了Hash对象的迭代遍历</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hash.each_key <span class=\"keyword\">do</span> |<span class=\"params\">key</span>|</span><br><span class=\"line\">\tputs key</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.each_value <span class=\"keyword\">do</span> |<span class=\"params\">value</span>|</span><br><span class=\"line\">\tputs value</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.each <span class=\"keyword\">do</span> |<span class=\"params\">key, value</span>|</span><br><span class=\"line\">\tputs <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span>=&gt;<span class=\"subst\">#&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"散列的默认值\"><a href=\"#散列的默认值\" class=\"headerlink\" title=\"散列的默认值\"></a>散列的默认值</h5><p>散列的默认值设置有三种方式<br>1.使用Hash.new带参数作为默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new(<span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\">p hash[<span class=\"string\">&quot;a&quot;</span>] \t\t<span class=\"comment\">#=&gt; &quot;ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.使用块指定默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new <span class=\"keyword\">do</span> |<span class=\"params\">hash, key</span>|</span><br><span class=\"line\">\thash[key] = key.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;a&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;A&quot;</span></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;B&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;B&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用fetch方法指定默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new <span class=\"keyword\">do</span> |<span class=\"params\">hash, key</span>|</span><br><span class=\"line\">\thash[key] = key.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; &quot;abc&quot;</span></span><br></pre></td></tr></table></figure>\n<p><em>注：当Hash.new方法指定了默认值或块时，fetch方法的第二个参数指定的默认值的优先级是最高的，且看上例</em></p>\n<h5 id=\"散列其他方法\"><a href=\"#散列其他方法\" class=\"headerlink\" title=\"散列其他方法\"></a>散列其他方法</h5><p>1.查看指定对象是否为散列的键<br>h.<strong>key?</strong>(key)<br>h.<strong>has_key?</strong>(key)<br>h.<strong>include?</strong>(key)<br>h.<strong>member?</strong>(key)   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.key?(<span class=\"string\">&quot;a&quot;</span>)    <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.key?(<span class=\"string\">&quot;x&quot;</span>)    <span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\">p hash.has_key?(<span class=\"string\">&quot;c&quot;</span>)  <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.<span class=\"keyword\">include</span>?(<span class=\"string\">&quot;a&quot;</span>)  <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.member?(<span class=\"string\">&quot;x&quot;</span>)   <span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n\n<p>2.查看指定对象是否为散列的值<br>h.<strong>value?</strong>(val)<br>h.<strong>has_value?</strong>(val)    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.value?(<span class=\"string\">&quot;a&quot;</span>)        <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.has_value?(<span class=\"string\">&quot;x&quot;</span>)    <span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n\n<p>3.获取散列的大小<br>hash.<strong>length</strong><br>hash.<strong>size</strong>    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">:c</span> =&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.length   <span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p hash.size   <span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>4.判断散列是否为空<br>hash.<strong>empty?</strong>    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">:a=&gt;<span class=\"string\">&quot;b&quot;</span></span>&#125;</span><br><span class=\"line\">p hash.empty?     <span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">p hash.empty?     <span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>6.删除键值<br>h.<strong>delete</strong>(key)<br>h.<strong>delete_if</strong>{|key,val| …}<br>h.<strong>reject!</strong>{|key, val| …}    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>&#125;</span><br><span class=\"line\">p hash[<span class=\"symbol\">:a</span>]    <span class=\"comment\">#=&gt; &quot;b&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.delete(<span class=\"symbol\">:a</span>)</span><br><span class=\"line\">p hash[<span class=\"symbol\">:a</span>]    <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>&#125;</span><br><span class=\"line\">p hash.delete(<span class=\"symbol\">:x</span>) &#123; |<span class=\"params\">key</span>| <span class=\"string\">&quot;no <span class=\"subst\">#&#123;key&#125;</span> in this hash object&quot;</span>&#125;   <span class=\"comment\">#=&gt;&quot;no x in this hash object&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">:c</span> =&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\">p hash.delete_if &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:a</span> &#125;     <span class=\"comment\">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class=\"line\">p hash.delete_if &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:b</span> &#125;     <span class=\"comment\">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">:c</span> =&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\">p hash.reject! &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:a</span>&#125;       <span class=\"comment\">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class=\"line\">p hash.reject! &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:b</span>&#125;       <span class=\"comment\">#=&gt; nil</span></span><br></pre></td></tr></table></figure>\n<p>delete方法带块时，如果不存在指定的键, 则返回块中的结果。<strong>delete_if</strong>方法和**reject!**功能一样，区别在于如果不满足条件是，delete_if返回的是散列对象本身，而reject！则返回nil。</p>\n<p>7.初始化散列<br>h.<strong>clear</strong><br>用<strong>clear</strong>方法清空使用过的散列</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">a:</span><span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">c:</span><span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\">p hash.size     <span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.clear</span><br><span class=\"line\">p hash.size     <span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关于散列的键\"><a href=\"#关于散列的键\" class=\"headerlink\" title=\"关于散列的键\"></a>关于散列的键</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">key1 = <span class=\"number\">1</span></span><br><span class=\"line\">key2 = <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">p key1 == key2      <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash[key1] = <span class=\"string\">&quot;ruby&quot;</span></span><br><span class=\"line\">p hash.key?(key1)     <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.has_key?(key2)   <span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>注：在散列内部，程序会将散列获取值时指定的键，与将值保存到散列时指定的键做比较，判断两者是否一致。具体来说就是，如果两个键key1，key2，当key1.hash与key2.hash得到的整数值相同，并且key1.eql?(key2)为true时，就会认为这两个键是一致的。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"散列类\"><a href=\"#散列类\" class=\"headerlink\" title=\"散列类\"></a>散列类</h4><p>散列(<strong>Hash</strong>)和数组一样，都是表示对象集合的对象，不同之处在于，数组使用索引来取得元素，而散列则是用键key，key可以是任何对象，而索引则不能，只能是整数。</p>\n<h5 id=\"散列的创建\"><a href=\"#散列的创建\" class=\"headerlink\" title=\"散列的创建\"></a>散列的创建</h5><p>1.使用 <strong>{}</strong></p>\n<pre><code>    &#123;key=&gt;value&#125;\n    或\n    &#123;key:value&#125;\n</code></pre>","more":"<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash1 = &#123;<span class=\"string\">&quot;key1&quot;</span>=&gt;<span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>=&gt;<span class=\"string\">&quot;value2&quot;</span>&#125;</span><br><span class=\"line\">p hash1[<span class=\"string\">&quot;key1&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;value1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash2 = &#123;<span class=\"symbol\">key1:</span><span class=\"string\">&quot;value1&quot;</span>, <span class=\"symbol\">key2:</span><span class=\"string\">&quot;value2&quot;</span>&#125;</span><br><span class=\"line\">p hash2[<span class=\"symbol\">:key1</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;value1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.使用<strong>Hash.new</strong></p>\n<p>Hash.new()可带参数，当带参数的时候表示该参数为默认值，即当键不存在时，所得的值为该默认值；不带参数情况下，其默认值为nil</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash1 = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">hash2 = <span class=\"title class_\">Hash</span>.new(<span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p hash1[<span class=\"string\">&quot;key&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\">p hash2[<span class=\"string\">&quot;key&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;ruby&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>散列的键可以是任意对象，一般推荐使用下列类型的对象来作为键：字符串(String), 数值(Numberic), 符号(Symbol), 日期(Date).</p>\n<h5 id=\"散列值的设置和获取\"><a href=\"#散列值的设置和获取\" class=\"headerlink\" title=\"散列值的设置和获取\"></a>散列值的设置和获取</h5><p>一般情况下，我们大多使用最普通的方法来给散列赋值或取值, 如果键不存在，则返回nil</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#common set and get</span></span><br><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">hash[<span class=\"string\">&quot;a&quot;</span>] = <span class=\"string\">&quot;first&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;a&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;first&quot;</span></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;abc&quot;</span>]\t\t<span class=\"comment\">#=&gt; nil</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby还提供了<strong>store</strong>方法来存储值，使用<strong>fetch</strong>方法来获取值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#store and fetch</span></span><br><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\"></span><br><span class=\"line\">hash.store(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;key&quot;</span>)\t\t<span class=\"comment\">#=&gt; &quot;ruby&quot;</span></span><br></pre></td></tr></table></figure>\n<p>但<strong>fetch</strong>方法与[]不同之处在于，如果hash对象中不存在键时，使用此方法将会出错</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\"></span><br><span class=\"line\">hash.store(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">hash.fetch(<span class=\"string\">&quot;abc&quot;</span>)\t\t<span class=\"comment\">#=&gt; KeyError</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>fetch</strong>方法同样可以返回一个默认值，当它指定第2个参数时或者带块时</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;default value&quot;</span>)\t<span class=\"comment\">#=&gt; &quot;default value&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;abc&quot;</span>) &#123;<span class=\"string\">&quot;a_&quot;</span>+ <span class=\"title class_\">String</span>.new(<span class=\"string\">&quot;bc&quot;</span>)&#125;\t<span class=\"comment\">#=&gt;&quot;a_bc&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过<strong>keys</strong>和<strong>values</strong>方法可以得到所有的键和值，而且<strong>to_a</strong>方法可以键值组合的数组。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get all keys <span class=\"keyword\">and</span> values</span><br><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.keys\t\t<span class=\"comment\">#=&gt; [&quot;a&quot;, &quot;c&quot;]</span></span><br><span class=\"line\">p hash.values\t\t<span class=\"comment\">#=&gt; [&quot;b&quot;, &quot;d&quot;]</span></span><br><span class=\"line\">p hash.to_a\t\t<span class=\"comment\">#=&gt; [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;]]</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby也支持了Hash对象的迭代遍历</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hash.each_key <span class=\"keyword\">do</span> |<span class=\"params\">key</span>|</span><br><span class=\"line\">\tputs key</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.each_value <span class=\"keyword\">do</span> |<span class=\"params\">value</span>|</span><br><span class=\"line\">\tputs value</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.each <span class=\"keyword\">do</span> |<span class=\"params\">key, value</span>|</span><br><span class=\"line\">\tputs <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span>=&gt;<span class=\"subst\">#&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"散列的默认值\"><a href=\"#散列的默认值\" class=\"headerlink\" title=\"散列的默认值\"></a>散列的默认值</h5><p>散列的默认值设置有三种方式<br>1.使用Hash.new带参数作为默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new(<span class=\"string\">&quot;ruby&quot;</span>)</span><br><span class=\"line\">p hash[<span class=\"string\">&quot;a&quot;</span>] \t\t<span class=\"comment\">#=&gt; &quot;ruby&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.使用块指定默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new <span class=\"keyword\">do</span> |<span class=\"params\">hash, key</span>|</span><br><span class=\"line\">\thash[key] = key.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;a&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;A&quot;</span></span><br><span class=\"line\">p hash[<span class=\"string\">&quot;B&quot;</span>]\t\t\t<span class=\"comment\">#=&gt; &quot;B&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用fetch方法指定默认值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new <span class=\"keyword\">do</span> |<span class=\"params\">hash, key</span>|</span><br><span class=\"line\">\thash[key] = key.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">p hash.fetch(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>)\t\t\t<span class=\"comment\">#=&gt; &quot;abc&quot;</span></span><br></pre></td></tr></table></figure>\n<p><em>注：当Hash.new方法指定了默认值或块时，fetch方法的第二个参数指定的默认值的优先级是最高的，且看上例</em></p>\n<h5 id=\"散列其他方法\"><a href=\"#散列其他方法\" class=\"headerlink\" title=\"散列其他方法\"></a>散列其他方法</h5><p>1.查看指定对象是否为散列的键<br>h.<strong>key?</strong>(key)<br>h.<strong>has_key?</strong>(key)<br>h.<strong>include?</strong>(key)<br>h.<strong>member?</strong>(key)   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.key?(<span class=\"string\">&quot;a&quot;</span>)    <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.key?(<span class=\"string\">&quot;x&quot;</span>)    <span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\">p hash.has_key?(<span class=\"string\">&quot;c&quot;</span>)  <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.<span class=\"keyword\">include</span>?(<span class=\"string\">&quot;a&quot;</span>)  <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.member?(<span class=\"string\">&quot;x&quot;</span>)   <span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n\n<p>2.查看指定对象是否为散列的值<br>h.<strong>value?</strong>(val)<br>h.<strong>has_value?</strong>(val)    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"string\">&quot;a&quot;</span>=&gt;<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>=&gt;<span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.value?(<span class=\"string\">&quot;a&quot;</span>)        <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.has_value?(<span class=\"string\">&quot;x&quot;</span>)    <span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n\n<p>3.获取散列的大小<br>hash.<strong>length</strong><br>hash.<strong>size</strong>    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">:c</span> =&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p hash.length   <span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\">p hash.size   <span class=\"comment\">#=&gt; 2</span></span><br></pre></td></tr></table></figure>\n\n<p>4.判断散列是否为空<br>hash.<strong>empty?</strong>    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">:a=&gt;<span class=\"string\">&quot;b&quot;</span></span>&#125;</span><br><span class=\"line\">p hash.empty?     <span class=\"comment\">#=&gt; false</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">p hash.empty?     <span class=\"comment\">#=&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>6.删除键值<br>h.<strong>delete</strong>(key)<br>h.<strong>delete_if</strong>{|key,val| …}<br>h.<strong>reject!</strong>{|key, val| …}    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>&#125;</span><br><span class=\"line\">p hash[<span class=\"symbol\">:a</span>]    <span class=\"comment\">#=&gt; &quot;b&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.delete(<span class=\"symbol\">:a</span>)</span><br><span class=\"line\">p hash[<span class=\"symbol\">:a</span>]    <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>&#125;</span><br><span class=\"line\">p hash.delete(<span class=\"symbol\">:x</span>) &#123; |<span class=\"params\">key</span>| <span class=\"string\">&quot;no <span class=\"subst\">#&#123;key&#125;</span> in this hash object&quot;</span>&#125;   <span class=\"comment\">#=&gt;&quot;no x in this hash object&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">:c</span> =&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\">p hash.delete_if &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:a</span> &#125;     <span class=\"comment\">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class=\"line\">p hash.delete_if &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:b</span> &#125;     <span class=\"comment\">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash = &#123;<span class=\"symbol\">:a</span> =&gt; <span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">:c</span> =&gt; <span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\">p hash.reject! &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:a</span>&#125;       <span class=\"comment\">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class=\"line\">p hash.reject! &#123;|<span class=\"params\">key, val</span>| key == <span class=\"symbol\">:b</span>&#125;       <span class=\"comment\">#=&gt; nil</span></span><br></pre></td></tr></table></figure>\n<p>delete方法带块时，如果不存在指定的键, 则返回块中的结果。<strong>delete_if</strong>方法和**reject!**功能一样，区别在于如果不满足条件是，delete_if返回的是散列对象本身，而reject！则返回nil。</p>\n<p>7.初始化散列<br>h.<strong>clear</strong><br>用<strong>clear</strong>方法清空使用过的散列</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = &#123;<span class=\"symbol\">a:</span><span class=\"string\">&quot;b&quot;</span>, <span class=\"symbol\">c:</span><span class=\"string\">&quot;d&quot;</span>&#125;</span><br><span class=\"line\">p hash.size     <span class=\"comment\">#=&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash.clear</span><br><span class=\"line\">p hash.size     <span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关于散列的键\"><a href=\"#关于散列的键\" class=\"headerlink\" title=\"关于散列的键\"></a>关于散列的键</h5><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hash = <span class=\"title class_\">Hash</span>.new</span><br><span class=\"line\">key1 = <span class=\"number\">1</span></span><br><span class=\"line\">key2 = <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">p key1 == key2      <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"></span><br><span class=\"line\">hash[key1] = <span class=\"string\">&quot;ruby&quot;</span></span><br><span class=\"line\">p hash.key?(key1)     <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">p hash.has_key?(key2)   <span class=\"comment\">#=&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>注：在散列内部，程序会将散列获取值时指定的键，与将值保存到散列时指定的键做比较，判断两者是否一致。具体来说就是，如果两个键key1，key2，当key1.hash与key2.hash得到的整数值相同，并且key1.eql?(key2)为true时，就会认为这两个键是一致的。</p>"},{"title":"代码审查之Pull Request","date":"2015-11-22T05:54:34.000Z","comments":1,"_content":"\n代码审查(Code Review)一直是一个高效团队里面必备的流程，团队成员可以通过它达到技术交流，相互学习以及提升自身编码水平的目的。当然它的目的并不止于此，我们在做某一件事的过程中，所用的技能和工具不外乎都是为了能使结果更符合我们的期望，就拿建筑工程来说，质量控制就是其把控最严的一关，有专门的质量管理领导小组、质量组织管理体系制度来贯穿这个过程，其最终目的就是为了使这栋建筑坚固牢稳，避免随时有可能崩塌的危险。\n<!-- more -->\n软件开发也一样，代码审查的另外一个目的就是为了保证软件的质量，避免系统中存在较多的Bug（软件中Bug是无法避免的，此处意思是尽量减少Bug出现的几率）。在我们以往的代码审查过程中，采用的主要形式是开发人员围在一起查看今天是否有哪些代码提交，然后针对提交的代码过一遍，发现有好的实践就相互学习，针对待提升的代码讨论后由Owner自己下去修改。这个过程看似很正常，其实里面存在较多的问题：\n   \n- 其一，好的实践并没有在代码中标明，以及为什么是个好的实践，而且当想回顾查找的时候很困难；  \n- 其二，每个开发人员对同一个提交的想法和见解可能不一样，但是这些想法和见解却并没有被记录下来；    \n- 其三，也是最重要的一个，没有载体去记录哪些代码须改进，那么在下次Review的过程中，并不是所有人都记得上次有哪些代码是否已经改进了，这就会导致代码的质量没有受到监管。\n\n任何一种工作方法，如果有工具的辅助，就可以大大提高其效率。Pull Request就是代码审查的一种工作流工具，它并不是DVCS(Distributed Version Control System)比如git的一个特性，通过它可以使代码审查更有效率。而我们大多项目现在都是用Stash（现在已更名为Bitbucket）或Github作为代码仓库，两者均提供了这种方式来确保代码质量。\n\n那么如何通过Pull Request来体现我们的代码质量管理过程呢？首先代码质量管理小组需要由项目中比较资深的研发人员构成，他们是Pull Request的Reviewer不可缺少的成员，用于把控提交的代码是否可以通过，当然，最好是全体研发人员一起加入。而代码质量管理体系制度其实也就是我们常说的一些规范和实践，包括项目统一的编码风格、代码的可读性、可维护性、合理的单元测试以及提倡的一些最佳实践等等。Reviewer可以通过此类体系来鉴别所提交的代码质量是否可以过关。\n\n在此处我们并不阐述如何创建一个Pull Request，我们的焦点在于用它来解决之前遇到的问题。以我们现在项目中用的Stash为例，当Pull Request已创建并通知Reviewer后，Reviewer可以查看其提交代码，做出以下Action:\n\n- 针对好的实践代码或设计可以在其位置标注上注释，以备后续回顾查找时容易找到。\n- 建议被添加为Reviewer的开发人员均要在此次的Pull Request中留下自己的意见，这样在后续的集体Code Review中可以查看到相互的见解。\n- 如果发现代码存在问题的，可以及时在代码中留下注释。如果代码提交者对这个注释也赞同，可当即修改并更新Pull Request，这样可以保证代码是已经修正过的。\n\n![stash-pull-request.png](/assets/images/legacy/stash-pull-request.png)\n\n当一个Pull Request相关问题都已修改后或不存在任何问题时，就可以直接Approve并Merge到CodeBase中去，这样能够很好的确保CodeBase中的代码是经过监管控制过的。而且在Stash的Pull Request中，还可以设置当须不少于指定个数的Reviewer同意代码提交通过后，提交者才有权限Merge到CodeBase中。这样也能极大的确保项目的代码质量规范是整体开发人员认同的。\n\n总之，Pull Request工作流程的方式可以很大的提高代码审查的质量以及效率，有工具，为何不加以合理使用呢？\n\n\n\n\n   \n\n\n","source":"_posts/2015-11-22-code-review-with-pull-request.markdown","raw":"---\n\ntitle: \"代码审查之Pull Request\"\ndate: 2015-11-22 13:54:34 +0800\ncomments: true\ncategories: Others\ntags: [Git, Collaboration]\n---\n\n代码审查(Code Review)一直是一个高效团队里面必备的流程，团队成员可以通过它达到技术交流，相互学习以及提升自身编码水平的目的。当然它的目的并不止于此，我们在做某一件事的过程中，所用的技能和工具不外乎都是为了能使结果更符合我们的期望，就拿建筑工程来说，质量控制就是其把控最严的一关，有专门的质量管理领导小组、质量组织管理体系制度来贯穿这个过程，其最终目的就是为了使这栋建筑坚固牢稳，避免随时有可能崩塌的危险。\n<!-- more -->\n软件开发也一样，代码审查的另外一个目的就是为了保证软件的质量，避免系统中存在较多的Bug（软件中Bug是无法避免的，此处意思是尽量减少Bug出现的几率）。在我们以往的代码审查过程中，采用的主要形式是开发人员围在一起查看今天是否有哪些代码提交，然后针对提交的代码过一遍，发现有好的实践就相互学习，针对待提升的代码讨论后由Owner自己下去修改。这个过程看似很正常，其实里面存在较多的问题：\n   \n- 其一，好的实践并没有在代码中标明，以及为什么是个好的实践，而且当想回顾查找的时候很困难；  \n- 其二，每个开发人员对同一个提交的想法和见解可能不一样，但是这些想法和见解却并没有被记录下来；    \n- 其三，也是最重要的一个，没有载体去记录哪些代码须改进，那么在下次Review的过程中，并不是所有人都记得上次有哪些代码是否已经改进了，这就会导致代码的质量没有受到监管。\n\n任何一种工作方法，如果有工具的辅助，就可以大大提高其效率。Pull Request就是代码审查的一种工作流工具，它并不是DVCS(Distributed Version Control System)比如git的一个特性，通过它可以使代码审查更有效率。而我们大多项目现在都是用Stash（现在已更名为Bitbucket）或Github作为代码仓库，两者均提供了这种方式来确保代码质量。\n\n那么如何通过Pull Request来体现我们的代码质量管理过程呢？首先代码质量管理小组需要由项目中比较资深的研发人员构成，他们是Pull Request的Reviewer不可缺少的成员，用于把控提交的代码是否可以通过，当然，最好是全体研发人员一起加入。而代码质量管理体系制度其实也就是我们常说的一些规范和实践，包括项目统一的编码风格、代码的可读性、可维护性、合理的单元测试以及提倡的一些最佳实践等等。Reviewer可以通过此类体系来鉴别所提交的代码质量是否可以过关。\n\n在此处我们并不阐述如何创建一个Pull Request，我们的焦点在于用它来解决之前遇到的问题。以我们现在项目中用的Stash为例，当Pull Request已创建并通知Reviewer后，Reviewer可以查看其提交代码，做出以下Action:\n\n- 针对好的实践代码或设计可以在其位置标注上注释，以备后续回顾查找时容易找到。\n- 建议被添加为Reviewer的开发人员均要在此次的Pull Request中留下自己的意见，这样在后续的集体Code Review中可以查看到相互的见解。\n- 如果发现代码存在问题的，可以及时在代码中留下注释。如果代码提交者对这个注释也赞同，可当即修改并更新Pull Request，这样可以保证代码是已经修正过的。\n\n![stash-pull-request.png](/assets/images/legacy/stash-pull-request.png)\n\n当一个Pull Request相关问题都已修改后或不存在任何问题时，就可以直接Approve并Merge到CodeBase中去，这样能够很好的确保CodeBase中的代码是经过监管控制过的。而且在Stash的Pull Request中，还可以设置当须不少于指定个数的Reviewer同意代码提交通过后，提交者才有权限Merge到CodeBase中。这样也能极大的确保项目的代码质量规范是整体开发人员认同的。\n\n总之，Pull Request工作流程的方式可以很大的提高代码审查的质量以及效率，有工具，为何不加以合理使用呢？\n\n\n\n\n   \n\n\n","slug":"2015-11-22-code-review-with-pull-request","published":1,"updated":"2023-09-02T17:27:29.921Z","_id":"clm27g4p2004nazv588ji66g5","layout":"post","photos":[],"link":"","content":"<p>代码审查(Code Review)一直是一个高效团队里面必备的流程，团队成员可以通过它达到技术交流，相互学习以及提升自身编码水平的目的。当然它的目的并不止于此，我们在做某一件事的过程中，所用的技能和工具不外乎都是为了能使结果更符合我们的期望，就拿建筑工程来说，质量控制就是其把控最严的一关，有专门的质量管理领导小组、质量组织管理体系制度来贯穿这个过程，其最终目的就是为了使这栋建筑坚固牢稳，避免随时有可能崩塌的危险。</p>\n<span id=\"more\"></span>\n<p>软件开发也一样，代码审查的另外一个目的就是为了保证软件的质量，避免系统中存在较多的Bug（软件中Bug是无法避免的，此处意思是尽量减少Bug出现的几率）。在我们以往的代码审查过程中，采用的主要形式是开发人员围在一起查看今天是否有哪些代码提交，然后针对提交的代码过一遍，发现有好的实践就相互学习，针对待提升的代码讨论后由Owner自己下去修改。这个过程看似很正常，其实里面存在较多的问题：</p>\n<ul>\n<li>其一，好的实践并没有在代码中标明，以及为什么是个好的实践，而且当想回顾查找的时候很困难；  </li>\n<li>其二，每个开发人员对同一个提交的想法和见解可能不一样，但是这些想法和见解却并没有被记录下来；    </li>\n<li>其三，也是最重要的一个，没有载体去记录哪些代码须改进，那么在下次Review的过程中，并不是所有人都记得上次有哪些代码是否已经改进了，这就会导致代码的质量没有受到监管。</li>\n</ul>\n<p>任何一种工作方法，如果有工具的辅助，就可以大大提高其效率。Pull Request就是代码审查的一种工作流工具，它并不是DVCS(Distributed Version Control System)比如git的一个特性，通过它可以使代码审查更有效率。而我们大多项目现在都是用Stash（现在已更名为Bitbucket）或Github作为代码仓库，两者均提供了这种方式来确保代码质量。</p>\n<p>那么如何通过Pull Request来体现我们的代码质量管理过程呢？首先代码质量管理小组需要由项目中比较资深的研发人员构成，他们是Pull Request的Reviewer不可缺少的成员，用于把控提交的代码是否可以通过，当然，最好是全体研发人员一起加入。而代码质量管理体系制度其实也就是我们常说的一些规范和实践，包括项目统一的编码风格、代码的可读性、可维护性、合理的单元测试以及提倡的一些最佳实践等等。Reviewer可以通过此类体系来鉴别所提交的代码质量是否可以过关。</p>\n<p>在此处我们并不阐述如何创建一个Pull Request，我们的焦点在于用它来解决之前遇到的问题。以我们现在项目中用的Stash为例，当Pull Request已创建并通知Reviewer后，Reviewer可以查看其提交代码，做出以下Action:</p>\n<ul>\n<li>针对好的实践代码或设计可以在其位置标注上注释，以备后续回顾查找时容易找到。</li>\n<li>建议被添加为Reviewer的开发人员均要在此次的Pull Request中留下自己的意见，这样在后续的集体Code Review中可以查看到相互的见解。</li>\n<li>如果发现代码存在问题的，可以及时在代码中留下注释。如果代码提交者对这个注释也赞同，可当即修改并更新Pull Request，这样可以保证代码是已经修正过的。</li>\n</ul>\n<p><img src=\"/assets/images/legacy/stash-pull-request.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/stash-pull-request.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"stash-pull-request.png\"></p>\n<p>当一个Pull Request相关问题都已修改后或不存在任何问题时，就可以直接Approve并Merge到CodeBase中去，这样能够很好的确保CodeBase中的代码是经过监管控制过的。而且在Stash的Pull Request中，还可以设置当须不少于指定个数的Reviewer同意代码提交通过后，提交者才有权限Merge到CodeBase中。这样也能极大的确保项目的代码质量规范是整体开发人员认同的。</p>\n<p>总之，Pull Request工作流程的方式可以很大的提高代码审查的质量以及效率，有工具，为何不加以合理使用呢？</p>\n","site":{"data":{}},"excerpt":"<p>代码审查(Code Review)一直是一个高效团队里面必备的流程，团队成员可以通过它达到技术交流，相互学习以及提升自身编码水平的目的。当然它的目的并不止于此，我们在做某一件事的过程中，所用的技能和工具不外乎都是为了能使结果更符合我们的期望，就拿建筑工程来说，质量控制就是其把控最严的一关，有专门的质量管理领导小组、质量组织管理体系制度来贯穿这个过程，其最终目的就是为了使这栋建筑坚固牢稳，避免随时有可能崩塌的危险。</p>","more":"<p>软件开发也一样，代码审查的另外一个目的就是为了保证软件的质量，避免系统中存在较多的Bug（软件中Bug是无法避免的，此处意思是尽量减少Bug出现的几率）。在我们以往的代码审查过程中，采用的主要形式是开发人员围在一起查看今天是否有哪些代码提交，然后针对提交的代码过一遍，发现有好的实践就相互学习，针对待提升的代码讨论后由Owner自己下去修改。这个过程看似很正常，其实里面存在较多的问题：</p>\n<ul>\n<li>其一，好的实践并没有在代码中标明，以及为什么是个好的实践，而且当想回顾查找的时候很困难；  </li>\n<li>其二，每个开发人员对同一个提交的想法和见解可能不一样，但是这些想法和见解却并没有被记录下来；    </li>\n<li>其三，也是最重要的一个，没有载体去记录哪些代码须改进，那么在下次Review的过程中，并不是所有人都记得上次有哪些代码是否已经改进了，这就会导致代码的质量没有受到监管。</li>\n</ul>\n<p>任何一种工作方法，如果有工具的辅助，就可以大大提高其效率。Pull Request就是代码审查的一种工作流工具，它并不是DVCS(Distributed Version Control System)比如git的一个特性，通过它可以使代码审查更有效率。而我们大多项目现在都是用Stash（现在已更名为Bitbucket）或Github作为代码仓库，两者均提供了这种方式来确保代码质量。</p>\n<p>那么如何通过Pull Request来体现我们的代码质量管理过程呢？首先代码质量管理小组需要由项目中比较资深的研发人员构成，他们是Pull Request的Reviewer不可缺少的成员，用于把控提交的代码是否可以通过，当然，最好是全体研发人员一起加入。而代码质量管理体系制度其实也就是我们常说的一些规范和实践，包括项目统一的编码风格、代码的可读性、可维护性、合理的单元测试以及提倡的一些最佳实践等等。Reviewer可以通过此类体系来鉴别所提交的代码质量是否可以过关。</p>\n<p>在此处我们并不阐述如何创建一个Pull Request，我们的焦点在于用它来解决之前遇到的问题。以我们现在项目中用的Stash为例，当Pull Request已创建并通知Reviewer后，Reviewer可以查看其提交代码，做出以下Action:</p>\n<ul>\n<li>针对好的实践代码或设计可以在其位置标注上注释，以备后续回顾查找时容易找到。</li>\n<li>建议被添加为Reviewer的开发人员均要在此次的Pull Request中留下自己的意见，这样在后续的集体Code Review中可以查看到相互的见解。</li>\n<li>如果发现代码存在问题的，可以及时在代码中留下注释。如果代码提交者对这个注释也赞同，可当即修改并更新Pull Request，这样可以保证代码是已经修正过的。</li>\n</ul>\n<p><img src=\"/assets/images/legacy/stash-pull-request.png\" alt=\"stash-pull-request.png\"></p>\n<p>当一个Pull Request相关问题都已修改后或不存在任何问题时，就可以直接Approve并Merge到CodeBase中去，这样能够很好的确保CodeBase中的代码是经过监管控制过的。而且在Stash的Pull Request中，还可以设置当须不少于指定个数的Reviewer同意代码提交通过后，提交者才有权限Merge到CodeBase中。这样也能极大的确保项目的代码质量规范是整体开发人员认同的。</p>\n<p>总之，Pull Request工作流程的方式可以很大的提高代码审查的质量以及效率，有工具，为何不加以合理使用呢？</p>"},{"title":"Using Nginx in Mac OS X","date":"2015-12-05T03:51:04.000Z","comments":1,"_content":"\n#### Introduction\n**Nginx** is a open source quite lightweight HTTP server which is written by Russian *Igor Sysoev*, the pronunciation is \"engine X\". It's a high performance HTTP and reverse proxy server, and also it is a IMAP/POP3/SMTP proxy server。\n\nThere are lots of website using Nginx in China, like Sina, Tencent, 163, Discuz and so on. The Nginx has a very high performance due to event driven way, and also it is a high performance reverse proxy, load balancing.\n\n<!-- more -->\n\nThe features of Nginx Http server are below:\n\n1.dealing with static file, indexing file and also automatically indexing.\n\n2.accelerating reverse proxy server,load balancing\n\n3.FastCGI, Caching, Security\n\n4.Support SSL and TLS\n\nFrom investigation, the Nginx can support about 50,000 concurrence request connection, and also support hot deploy, even running 7*24 hours uninterrupted.   \n\n#### Installing\nSo, how to install it on Mac OS X. Let's assume you have installed the *Home brew*, using brew to install the nginx with command:\n\n```\nbrew install nginx\n```\n\n#### Starting And Runing\nAfter install, we can use below command to run it:\n\n```\nsudo nginx\n```\n\nIf you get the failed message which is \"[emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)\". You have to kill the progress which is running with that address, it usually is Apache. And also there is another way, changing the port number, we will introduce later.\n\nThe nginx running success, you will get the below page when you access the [http://localhost:8080](http://localhost:8080)\n\n![nginx, devops](/assets/images/legacy/nginx-welcome.png)\n\nThere are several commands to start, stop nginx and reload configuration.\n\n``` \nnginx -s stop \t\t\t#=> fast shutdown\n\nnginx -s quit\t\t\t\t#=> graceful shutdown\n\nnginx -s reload\t\t\t#=> reloading the configuration file\n\nnginx -s reopen\t\t\t#=> reopening the log files\n```\n\n#### Simple Configuration\n\nThe default place of nginx.conf on Mac after installing with brew is:\n\n``` \n/usr/local/etc/nginx/nginx.conf\n```\nLet's change the port number in this file. First, we need to stop the nginx.\n\n```\nsudo nginx -s stop\n```\n\nAnd then open that file, you will see the below server configuration section. It includes the listen, server_name, location/root, location/index. location/root is your website root folder, and index is your website first page file.\n\n```\nserver {\nlisten       8080;\t\t\t\nserver_name  localhost;\n\n#access_log  logs/host.access.log  main;\n\nlocation / {\n    root   html;\n    index  index.html index.htm;\n}\n\n```\n\nokay, let's change the port number from 8080 to 80, and then run it again\n\n```\nsudo nginx\n```\n\nAccess it with [http://localhost](http://localhost), the 80 port number is http default port number, so we don't need to append it into url.\n\nNow, let's put our blog website in the nginx, to do so, we need to reference the location/root to our blog website folder.\n\n``` \nserver {\nlisten       80;\t\t\t\nserver_name  localhost;\n\n#access_log  logs/host.access.log  main;\n\nlocation / {\n    root   /Users/yushi/Codes/Blog/stonefishy.github.io/public;;\n    index  index.html index.htm;\n}\n```\n\nlet's running it again with clicking [http://localhost](http://localhost). Woow, cool, very nice, we can access our blog with nignx.\n\nThis is a just simple usage of nginx, we will talk about more later.\n\n\n\n\n\n","source":"_posts/2015-12-05-using-nginx-in-mac-os-x.markdown","raw":"---\n\ntitle: \"Using Nginx in Mac OS X\"\ndate: 2015-12-05 11:51:04 +0800\ncomments: true\ncategories: Tools\ntags: [Nginx, MacOS]\n---\n\n#### Introduction\n**Nginx** is a open source quite lightweight HTTP server which is written by Russian *Igor Sysoev*, the pronunciation is \"engine X\". It's a high performance HTTP and reverse proxy server, and also it is a IMAP/POP3/SMTP proxy server。\n\nThere are lots of website using Nginx in China, like Sina, Tencent, 163, Discuz and so on. The Nginx has a very high performance due to event driven way, and also it is a high performance reverse proxy, load balancing.\n\n<!-- more -->\n\nThe features of Nginx Http server are below:\n\n1.dealing with static file, indexing file and also automatically indexing.\n\n2.accelerating reverse proxy server,load balancing\n\n3.FastCGI, Caching, Security\n\n4.Support SSL and TLS\n\nFrom investigation, the Nginx can support about 50,000 concurrence request connection, and also support hot deploy, even running 7*24 hours uninterrupted.   \n\n#### Installing\nSo, how to install it on Mac OS X. Let's assume you have installed the *Home brew*, using brew to install the nginx with command:\n\n```\nbrew install nginx\n```\n\n#### Starting And Runing\nAfter install, we can use below command to run it:\n\n```\nsudo nginx\n```\n\nIf you get the failed message which is \"[emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)\". You have to kill the progress which is running with that address, it usually is Apache. And also there is another way, changing the port number, we will introduce later.\n\nThe nginx running success, you will get the below page when you access the [http://localhost:8080](http://localhost:8080)\n\n![nginx, devops](/assets/images/legacy/nginx-welcome.png)\n\nThere are several commands to start, stop nginx and reload configuration.\n\n``` \nnginx -s stop \t\t\t#=> fast shutdown\n\nnginx -s quit\t\t\t\t#=> graceful shutdown\n\nnginx -s reload\t\t\t#=> reloading the configuration file\n\nnginx -s reopen\t\t\t#=> reopening the log files\n```\n\n#### Simple Configuration\n\nThe default place of nginx.conf on Mac after installing with brew is:\n\n``` \n/usr/local/etc/nginx/nginx.conf\n```\nLet's change the port number in this file. First, we need to stop the nginx.\n\n```\nsudo nginx -s stop\n```\n\nAnd then open that file, you will see the below server configuration section. It includes the listen, server_name, location/root, location/index. location/root is your website root folder, and index is your website first page file.\n\n```\nserver {\nlisten       8080;\t\t\t\nserver_name  localhost;\n\n#access_log  logs/host.access.log  main;\n\nlocation / {\n    root   html;\n    index  index.html index.htm;\n}\n\n```\n\nokay, let's change the port number from 8080 to 80, and then run it again\n\n```\nsudo nginx\n```\n\nAccess it with [http://localhost](http://localhost), the 80 port number is http default port number, so we don't need to append it into url.\n\nNow, let's put our blog website in the nginx, to do so, we need to reference the location/root to our blog website folder.\n\n``` \nserver {\nlisten       80;\t\t\t\nserver_name  localhost;\n\n#access_log  logs/host.access.log  main;\n\nlocation / {\n    root   /Users/yushi/Codes/Blog/stonefishy.github.io/public;;\n    index  index.html index.htm;\n}\n```\n\nlet's running it again with clicking [http://localhost](http://localhost). Woow, cool, very nice, we can access our blog with nignx.\n\nThis is a just simple usage of nginx, we will talk about more later.\n\n\n\n\n\n","slug":"2015-12-05-using-nginx-in-mac-os-x","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4p3004oazv52pamc16t","layout":"post","photos":[],"link":"","content":"<h4 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h4><p><strong>Nginx</strong> is a open source quite lightweight HTTP server which is written by Russian <em>Igor Sysoev</em>, the pronunciation is “engine X”. It’s a high performance HTTP and reverse proxy server, and also it is a IMAP&#x2F;POP3&#x2F;SMTP proxy server。</p>\n<p>There are lots of website using Nginx in China, like Sina, Tencent, 163, Discuz and so on. The Nginx has a very high performance due to event driven way, and also it is a high performance reverse proxy, load balancing.</p>\n<span id=\"more\"></span>\n\n<p>The features of Nginx Http server are below:</p>\n<p>1.dealing with static file, indexing file and also automatically indexing.</p>\n<p>2.accelerating reverse proxy server,load balancing</p>\n<p>3.FastCGI, Caching, Security</p>\n<p>4.Support SSL and TLS</p>\n<p>From investigation, the Nginx can support about 50,000 concurrence request connection, and also support hot deploy, even running 7*24 hours uninterrupted.   </p>\n<h4 id=\"Installing\"><a href=\"#Installing\" class=\"headerlink\" title=\"Installing\"></a>Installing</h4><p>So, how to install it on Mac OS X. Let’s assume you have installed the <em>Home brew</em>, using brew to install the nginx with command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Starting-And-Runing\"><a href=\"#Starting-And-Runing\" class=\"headerlink\" title=\"Starting And Runing\"></a>Starting And Runing</h4><p>After install, we can use below command to run it:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n\n<p>If you get the failed message which is “[emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)”. You have to kill the progress which is running with that address, it usually is Apache. And also there is another way, changing the port number, we will introduce later.</p>\n<p>The nginx running success, you will get the below page when you access the <a href=\"http://localhost:8080/\">http://localhost:8080</a></p>\n<p><img src=\"/assets/images/legacy/nginx-welcome.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/nginx-welcome.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"nginx, devops\"></p>\n<p>There are several commands to start, stop nginx and reload configuration.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop \t\t\t#=&gt; fast shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s quit\t\t\t\t#=&gt; graceful shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload\t\t\t#=&gt; reloading the configuration file</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reopen\t\t\t#=&gt; reopening the log files</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Simple-Configuration\"><a href=\"#Simple-Configuration\" class=\"headerlink\" title=\"Simple Configuration\"></a>Simple Configuration</h4><p>The default place of nginx.conf on Mac after installing with brew is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>Let’s change the port number in this file. First, we need to stop the nginx.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>And then open that file, you will see the below server configuration section. It includes the listen, server_name, location&#x2F;root, location&#x2F;index. location&#x2F;root is your website root folder, and index is your website first page file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">listen       8080;\t\t\t</span><br><span class=\"line\">server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">#access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>okay, let’s change the port number from 8080 to 80, and then run it again</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n\n<p>Access it with <a href=\"http://localhost/\">http://localhost</a>, the 80 port number is http default port number, so we don’t need to append it into url.</p>\n<p>Now, let’s put our blog website in the nginx, to do so, we need to reference the location&#x2F;root to our blog website folder.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">listen       80;\t\t\t</span><br><span class=\"line\">server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">#access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   /Users/yushi/Codes/Blog/stonefishy.github.io/public;;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>let’s running it again with clicking <a href=\"http://localhost/\">http://localhost</a>. Woow, cool, very nice, we can access our blog with nignx.</p>\n<p>This is a just simple usage of nginx, we will talk about more later.</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h4><p><strong>Nginx</strong> is a open source quite lightweight HTTP server which is written by Russian <em>Igor Sysoev</em>, the pronunciation is “engine X”. It’s a high performance HTTP and reverse proxy server, and also it is a IMAP&#x2F;POP3&#x2F;SMTP proxy server。</p>\n<p>There are lots of website using Nginx in China, like Sina, Tencent, 163, Discuz and so on. The Nginx has a very high performance due to event driven way, and also it is a high performance reverse proxy, load balancing.</p>","more":"<p>The features of Nginx Http server are below:</p>\n<p>1.dealing with static file, indexing file and also automatically indexing.</p>\n<p>2.accelerating reverse proxy server,load balancing</p>\n<p>3.FastCGI, Caching, Security</p>\n<p>4.Support SSL and TLS</p>\n<p>From investigation, the Nginx can support about 50,000 concurrence request connection, and also support hot deploy, even running 7*24 hours uninterrupted.   </p>\n<h4 id=\"Installing\"><a href=\"#Installing\" class=\"headerlink\" title=\"Installing\"></a>Installing</h4><p>So, how to install it on Mac OS X. Let’s assume you have installed the <em>Home brew</em>, using brew to install the nginx with command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Starting-And-Runing\"><a href=\"#Starting-And-Runing\" class=\"headerlink\" title=\"Starting And Runing\"></a>Starting And Runing</h4><p>After install, we can use below command to run it:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n\n<p>If you get the failed message which is “[emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)”. You have to kill the progress which is running with that address, it usually is Apache. And also there is another way, changing the port number, we will introduce later.</p>\n<p>The nginx running success, you will get the below page when you access the <a href=\"http://localhost:8080/\">http://localhost:8080</a></p>\n<p><img src=\"/assets/images/legacy/nginx-welcome.png\" alt=\"nginx, devops\"></p>\n<p>There are several commands to start, stop nginx and reload configuration.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop \t\t\t#=&gt; fast shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s quit\t\t\t\t#=&gt; graceful shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload\t\t\t#=&gt; reloading the configuration file</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reopen\t\t\t#=&gt; reopening the log files</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Simple-Configuration\"><a href=\"#Simple-Configuration\" class=\"headerlink\" title=\"Simple Configuration\"></a>Simple Configuration</h4><p>The default place of nginx.conf on Mac after installing with brew is:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>Let’s change the port number in this file. First, we need to stop the nginx.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>And then open that file, you will see the below server configuration section. It includes the listen, server_name, location&#x2F;root, location&#x2F;index. location&#x2F;root is your website root folder, and index is your website first page file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">listen       8080;\t\t\t</span><br><span class=\"line\">server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">#access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>okay, let’s change the port number from 8080 to 80, and then run it again</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n\n<p>Access it with <a href=\"http://localhost/\">http://localhost</a>, the 80 port number is http default port number, so we don’t need to append it into url.</p>\n<p>Now, let’s put our blog website in the nginx, to do so, we need to reference the location&#x2F;root to our blog website folder.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">listen       80;\t\t\t</span><br><span class=\"line\">server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">#access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   /Users/yushi/Codes/Blog/stonefishy.github.io/public;;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>let’s running it again with clicking <a href=\"http://localhost/\">http://localhost</a>. Woow, cool, very nice, we can access our blog with nignx.</p>\n<p>This is a just simple usage of nginx, we will talk about more later.</p>"},{"title":"Ruby修炼之道(17)","date":"2015-12-17T01:46:29.000Z","comments":1,"_content":"#### 正则表达式(Regexp)\nRuby中的正则表达式用**Regexp**类来表示，正则表达式描述的是一种模式，该模式用于匹配字符串。\n\n##### 创建\n其创建方式有多种：\n1.使用**/ /** 把字符串括起来，可以简单地创建出正则表达式\n\n``` ruby\nreg1 = /Ruby/\nputs reg1.class       #=> Regexp\n```\n<!-- more -->\n\n2.使用**Regexp.new(\"字符串\")**创建正则表达式\n\n``` ruby\nreg = Regexp.new(\"Ruby\")\nputs reg.class       #=> Regexp\n```\n\n3.使用**%r**创建正则表达式\n\n``` ruby\nreg = %r(Ruby)\nputs reg.class       #=> Regexp\n\nreg = %r<Ruby>\nputs reg.class       #=> Regexp\n\nreg = %r|Ruby|\nputs reg.class       #=> Regexp\n\nreg = %r!Ruby!\nputs reg.class       #=> Regexp\n```\n\n##### 匹配\nRuby的正则表达式匹配使用**=~**符号，如果匹配成功返回匹配字符串的位置，否则返回nil。\n\n``` ruby\nreg = /R..y/\nstr = \"regexp of Ruby\"\n\nmatched = reg =~ str\nputs matched        #=> 10\n\nunmatched = reg =~ \"test\"\np unmatched         #=> nil\n\nif matched\n  puts \"matched\"\nelse\n  puts \"unmatched\"\nend\n```\n此处并不过多的介绍正则表达式的语法规则，具体详细语法请参见[http://regexlib.com/CheatSheet.aspx](http://regexlib.com/CheatSheet.aspx)\n\n##### 转义\n对特殊字符的转义方式有两种，使用**\\\\**字符和使用**Regexp#quote**方法\n\n``` ruby\n#using \\ symbol\nreg = /ruby\\*regexp/\nputs reg =~ \"ruby*regexp\"     #=> 0\np reg =~ \"rubyregexp\"          #=> nil\n\n#using Regexp#quote method\nreg1 = %r(ruby*regexp)\nreg2 = Regexp.new(Regexp.quote(\"ruby*regexp\"))\nstr = \"ruby*regexp\"\n\np reg1 =~ str         #=> nil\np reg2 =~ str         #=> 0\n```\n\n##### 选项\n在正则表达式的后面添加特定的字符如**i**, **x**, **m**等时，匹配后的规则会有点变化\n    \n**i** \tRegexp::IGNORECASE  忽略字符串大小写    \n**x**\tRegexp::EXTENDED\t\t忽略字符串中的空白字符     \n**m**\tRegexp::MULTILINE\t匹配多行字符串    \n\n``` ruby\n#using i optional symbol to ignore the cap\nreg1 = /test String/i\nreg2 = Regexp.new(\"test string\", Regexp::IGNORECASE)\nputs reg1 =~ \"test string\"     #=> 0\nputs reg1 =~ \"test string\"     #=> 0\n\n#using x optional symbol to ignore the white space symbol\nreg1 = /test string/x\nreg2 = Regexp.new(\"test string\", Regexp::EXTENDED)\nputs reg1 =~ \"teststring\"      #=> 0\nputs reg1 =~ \"teststring\"      #=> 0\n\n#using m optional symbol to match multiline\nreg1 = /test\\nstring/m\nreg2 = Regexp.new(\"test\\nstring\", Regexp::MULTILINE)\nputs reg1 =~ \"test\\nstring\"\nputs reg1 =~ \"test\\nstring\"      #=> 0\n```\n\n##### 捕获\n捕获，就是从正则表达式的匹配部分中提取某部分字符，通过\"**$数字**\"这种形式的变量获取匹配了正则表达式中的用**()**括住的字符。\n\n``` ruby\nreg = /(.)(C.)(.)/\nstr = \"ABCDE\"\nreg =~ str\n\nputs $1   #=> B\nputs $2   #=> CD\nputs $3   #=> E\n```\n\n使用\"**(?: )**\"可以过滤掉不需要捕获的模式.\n\n``` ruby\nreg = /(.)(?:C.)(.)/\nstr = \"ABCDE\"\nreg =~ str\n\nputs $1   #=> B\nputs $2   #=> E\n```\n\nRuby中也可以使用**$`**, **$&**, **$'**分别代表匹配部分前的字符串、匹配部分的字符串、匹配部分后的字符串。\n\n``` ruby\nreg = /(C.)/\nstr = \"ABCDE\"\nreg =~ str\n\nputs $`     #=> AB\nputs $&     #=> CD\nputs $'     #=> E\n```\n\n##### 常用方法\n**sub**和**gsub**方法的作用是用指定的字符置换字符串中的某部分字符。**sub**方法只置换首次匹配的部分，而**gsub**则会置换所有匹配的部分.\n\n``` ruby\nreg = /\\s+/\nstr = \"This is test string\"\n\nputs str.sub(reg, '-')   #=> \"This-is test string\"\nputs str.gsub(reg, '-')   #=> \"This-is-test-string\"\n```\n\nsub和gsub方法同样支持block块模式，针对匹配到的字符做处理\n\n``` ruby\nreg =/i/\nstr = \"This is test string\"\n\nresult = str.sub(reg) do |matched|\n  matched.upcase\nend\n\nputs result     #=> ThIs is test string\n\nresult = str.gsub(reg) do |matched|\n  matched.upcase\nend\n\nputs result     #=> ThIs Is test strIng\n```\n\n**scan**方法和**gsub**方法类似，都可以获取到所有匹配到的字符，但是不能置换。\n\n``` ruby \nreg = /(r)(.)/\nstr = \"racrtrhrdra\"\nstr.scan(reg) do |matched|\n  p matched\nend\n\n#[\"r\", \"a\"]\n#[\"r\", \"t\"]\n#[\"r\", \"h\"]\n#[\"r\", \"d\"]\n#[\"r\", \"a\"]\n\nstr.scan(reg) do |val1, val2|\n  p val1 + \"-\" + val2\nend\n\n#\"r-a\"\n#\"r-t\"\n#\"r-h\"\n#\"r-d\"\n#\"r-a\"\n```\n\n\n\n","source":"_posts/2015-12-17-ruby-practice-17.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(17)\"\ndate: 2015-12-17 09:46:29 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n#### 正则表达式(Regexp)\nRuby中的正则表达式用**Regexp**类来表示，正则表达式描述的是一种模式，该模式用于匹配字符串。\n\n##### 创建\n其创建方式有多种：\n1.使用**/ /** 把字符串括起来，可以简单地创建出正则表达式\n\n``` ruby\nreg1 = /Ruby/\nputs reg1.class       #=> Regexp\n```\n<!-- more -->\n\n2.使用**Regexp.new(\"字符串\")**创建正则表达式\n\n``` ruby\nreg = Regexp.new(\"Ruby\")\nputs reg.class       #=> Regexp\n```\n\n3.使用**%r**创建正则表达式\n\n``` ruby\nreg = %r(Ruby)\nputs reg.class       #=> Regexp\n\nreg = %r<Ruby>\nputs reg.class       #=> Regexp\n\nreg = %r|Ruby|\nputs reg.class       #=> Regexp\n\nreg = %r!Ruby!\nputs reg.class       #=> Regexp\n```\n\n##### 匹配\nRuby的正则表达式匹配使用**=~**符号，如果匹配成功返回匹配字符串的位置，否则返回nil。\n\n``` ruby\nreg = /R..y/\nstr = \"regexp of Ruby\"\n\nmatched = reg =~ str\nputs matched        #=> 10\n\nunmatched = reg =~ \"test\"\np unmatched         #=> nil\n\nif matched\n  puts \"matched\"\nelse\n  puts \"unmatched\"\nend\n```\n此处并不过多的介绍正则表达式的语法规则，具体详细语法请参见[http://regexlib.com/CheatSheet.aspx](http://regexlib.com/CheatSheet.aspx)\n\n##### 转义\n对特殊字符的转义方式有两种，使用**\\\\**字符和使用**Regexp#quote**方法\n\n``` ruby\n#using \\ symbol\nreg = /ruby\\*regexp/\nputs reg =~ \"ruby*regexp\"     #=> 0\np reg =~ \"rubyregexp\"          #=> nil\n\n#using Regexp#quote method\nreg1 = %r(ruby*regexp)\nreg2 = Regexp.new(Regexp.quote(\"ruby*regexp\"))\nstr = \"ruby*regexp\"\n\np reg1 =~ str         #=> nil\np reg2 =~ str         #=> 0\n```\n\n##### 选项\n在正则表达式的后面添加特定的字符如**i**, **x**, **m**等时，匹配后的规则会有点变化\n    \n**i** \tRegexp::IGNORECASE  忽略字符串大小写    \n**x**\tRegexp::EXTENDED\t\t忽略字符串中的空白字符     \n**m**\tRegexp::MULTILINE\t匹配多行字符串    \n\n``` ruby\n#using i optional symbol to ignore the cap\nreg1 = /test String/i\nreg2 = Regexp.new(\"test string\", Regexp::IGNORECASE)\nputs reg1 =~ \"test string\"     #=> 0\nputs reg1 =~ \"test string\"     #=> 0\n\n#using x optional symbol to ignore the white space symbol\nreg1 = /test string/x\nreg2 = Regexp.new(\"test string\", Regexp::EXTENDED)\nputs reg1 =~ \"teststring\"      #=> 0\nputs reg1 =~ \"teststring\"      #=> 0\n\n#using m optional symbol to match multiline\nreg1 = /test\\nstring/m\nreg2 = Regexp.new(\"test\\nstring\", Regexp::MULTILINE)\nputs reg1 =~ \"test\\nstring\"\nputs reg1 =~ \"test\\nstring\"      #=> 0\n```\n\n##### 捕获\n捕获，就是从正则表达式的匹配部分中提取某部分字符，通过\"**$数字**\"这种形式的变量获取匹配了正则表达式中的用**()**括住的字符。\n\n``` ruby\nreg = /(.)(C.)(.)/\nstr = \"ABCDE\"\nreg =~ str\n\nputs $1   #=> B\nputs $2   #=> CD\nputs $3   #=> E\n```\n\n使用\"**(?: )**\"可以过滤掉不需要捕获的模式.\n\n``` ruby\nreg = /(.)(?:C.)(.)/\nstr = \"ABCDE\"\nreg =~ str\n\nputs $1   #=> B\nputs $2   #=> E\n```\n\nRuby中也可以使用**$`**, **$&**, **$'**分别代表匹配部分前的字符串、匹配部分的字符串、匹配部分后的字符串。\n\n``` ruby\nreg = /(C.)/\nstr = \"ABCDE\"\nreg =~ str\n\nputs $`     #=> AB\nputs $&     #=> CD\nputs $'     #=> E\n```\n\n##### 常用方法\n**sub**和**gsub**方法的作用是用指定的字符置换字符串中的某部分字符。**sub**方法只置换首次匹配的部分，而**gsub**则会置换所有匹配的部分.\n\n``` ruby\nreg = /\\s+/\nstr = \"This is test string\"\n\nputs str.sub(reg, '-')   #=> \"This-is test string\"\nputs str.gsub(reg, '-')   #=> \"This-is-test-string\"\n```\n\nsub和gsub方法同样支持block块模式，针对匹配到的字符做处理\n\n``` ruby\nreg =/i/\nstr = \"This is test string\"\n\nresult = str.sub(reg) do |matched|\n  matched.upcase\nend\n\nputs result     #=> ThIs is test string\n\nresult = str.gsub(reg) do |matched|\n  matched.upcase\nend\n\nputs result     #=> ThIs Is test strIng\n```\n\n**scan**方法和**gsub**方法类似，都可以获取到所有匹配到的字符，但是不能置换。\n\n``` ruby \nreg = /(r)(.)/\nstr = \"racrtrhrdra\"\nstr.scan(reg) do |matched|\n  p matched\nend\n\n#[\"r\", \"a\"]\n#[\"r\", \"t\"]\n#[\"r\", \"h\"]\n#[\"r\", \"d\"]\n#[\"r\", \"a\"]\n\nstr.scan(reg) do |val1, val2|\n  p val1 + \"-\" + val2\nend\n\n#\"r-a\"\n#\"r-t\"\n#\"r-h\"\n#\"r-d\"\n#\"r-a\"\n```\n\n\n\n","slug":"2015-12-17-ruby-practice-17","published":1,"updated":"2023-09-02T18:00:36.060Z","_id":"clm27g4p3004qazv5hfsqgdt3","layout":"post","photos":[],"link":"","content":"<h4 id=\"正则表达式-Regexp\"><a href=\"#正则表达式-Regexp\" class=\"headerlink\" title=\"正则表达式(Regexp)\"></a>正则表达式(Regexp)</h4><p>Ruby中的正则表达式用<strong>Regexp</strong>类来表示，正则表达式描述的是一种模式，该模式用于匹配字符串。</p>\n<h5 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h5><p>其创建方式有多种：<br>1.使用**&#x2F; &#x2F;** 把字符串括起来，可以简单地创建出正则表达式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg1 = <span class=\"regexp\">/Ruby/</span></span><br><span class=\"line\">puts reg1.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>2.使用**Regexp.new(“字符串”)**创建正则表达式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;Ruby&quot;</span>)</span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用**%r**创建正则表达式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">%r(Ruby)</span></span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br><span class=\"line\"></span><br><span class=\"line\">reg = %r&lt;<span class=\"title class_\">Ruby</span>&gt;</span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br><span class=\"line\"></span><br><span class=\"line\">reg = %r|<span class=\"params\">Ruby</span>|</span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br><span class=\"line\"></span><br><span class=\"line\">reg = <span class=\"regexp\">%r!Ruby!</span></span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"匹配\"><a href=\"#匹配\" class=\"headerlink\" title=\"匹配\"></a>匹配</h5><p>Ruby的正则表达式匹配使用**&#x3D;~**符号，如果匹配成功返回匹配字符串的位置，否则返回nil。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/R..y/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;regexp of Ruby&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">matched = reg =~ str</span><br><span class=\"line\">puts matched        <span class=\"comment\">#=&gt; 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">unmatched = reg =~ <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">p unmatched         <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> matched</span><br><span class=\"line\">  puts <span class=\"string\">&quot;matched&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  puts <span class=\"string\">&quot;unmatched&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>此处并不过多的介绍正则表达式的语法规则，具体详细语法请参见<a href=\"http://regexlib.com/CheatSheet.aspx\">http://regexlib.com/CheatSheet.aspx</a></p>\n<h5 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h5><p>对特殊字符的转义方式有两种，使用<strong>\\</strong>字符和使用<strong>Regexp#quote</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using \\ symbol</span></span><br><span class=\"line\">reg = <span class=\"regexp\">/ruby\\*regexp/</span></span><br><span class=\"line\">puts reg =~ <span class=\"string\">&quot;ruby*regexp&quot;</span>     <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">p reg =~ <span class=\"string\">&quot;rubyregexp&quot;</span>          <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#using Regexp#quote method</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">%r(ruby*regexp)</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"title class_\">Regexp</span>.quote(<span class=\"string\">&quot;ruby*regexp&quot;</span>))</span><br><span class=\"line\">str = <span class=\"string\">&quot;ruby*regexp&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p reg1 =~ str         <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\">p reg2 =~ str         <span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h5><p>在正则表达式的后面添加特定的字符如<strong>i</strong>, <strong>x</strong>, <strong>m</strong>等时，匹配后的规则会有点变化</p>\n<p><strong>i</strong> \tRegexp::IGNORECASE  忽略字符串大小写<br><strong>x</strong>\tRegexp::EXTENDED\t\t忽略字符串中的空白字符<br><strong>m</strong>\tRegexp::MULTILINE\t匹配多行字符串    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using i optional symbol to ignore the cap</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">/test String/i</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;test string&quot;</span>, <span class=\"title class_\">Regexp</span><span class=\"symbol\">:</span><span class=\"symbol\">:IGNORECASE</span>)</span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test string&quot;</span>     <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test string&quot;</span>     <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#using x optional symbol to ignore the white space symbol</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">/test string/x</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;test string&quot;</span>, <span class=\"title class_\">Regexp</span><span class=\"symbol\">:</span><span class=\"symbol\">:EXTENDED</span>)</span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;teststring&quot;</span>      <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;teststring&quot;</span>      <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#using m optional symbol to match multiline</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">/test\\nstring/m</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;test\\nstring&quot;</span>, <span class=\"title class_\">Regexp</span><span class=\"symbol\">:</span><span class=\"symbol\">:MULTILINE</span>)</span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test\\nstring&quot;</span></span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test\\nstring&quot;</span>      <span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h5><p>捕获，就是从正则表达式的匹配部分中提取某部分字符，通过”<strong>$数字</strong>“这种形式的变量获取匹配了正则表达式中的用**()**括住的字符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(.)(C.)(.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;ABCDE&quot;</span></span><br><span class=\"line\">reg =~ str</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"variable\">$1</span>   <span class=\"comment\">#=&gt; B</span></span><br><span class=\"line\">puts <span class=\"variable\">$2</span>   <span class=\"comment\">#=&gt; CD</span></span><br><span class=\"line\">puts <span class=\"variable\">$3</span>   <span class=\"comment\">#=&gt; E</span></span><br></pre></td></tr></table></figure>\n\n<p>使用”<strong>(?: )</strong>“可以过滤掉不需要捕获的模式.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(.)(?:C.)(.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;ABCDE&quot;</span></span><br><span class=\"line\">reg =~ str</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"variable\">$1</span>   <span class=\"comment\">#=&gt; B</span></span><br><span class=\"line\">puts <span class=\"variable\">$2</span>   <span class=\"comment\">#=&gt; E</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby中也可以使用**$&#96;**, <strong>$&amp;</strong>, **$’**分别代表匹配部分前的字符串、匹配部分的字符串、匹配部分后的字符串。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(C.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;ABCDE&quot;</span></span><br><span class=\"line\">reg =~ str</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"variable\">$`</span>     <span class=\"comment\">#=&gt; AB</span></span><br><span class=\"line\">puts <span class=\"variable\">$&amp;</span>     <span class=\"comment\">#=&gt; CD</span></span><br><span class=\"line\">puts <span class=\"variable\">$&#x27;</span>     <span class=\"comment\">#=&gt; E</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h5><p><strong>sub</strong>和<strong>gsub</strong>方法的作用是用指定的字符置换字符串中的某部分字符。<strong>sub</strong>方法只置换首次匹配的部分，而<strong>gsub</strong>则会置换所有匹配的部分.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/\\s+/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;This is test string&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str.sub(reg, <span class=\"string\">&#x27;-&#x27;</span>)   <span class=\"comment\">#=&gt; &quot;This-is test string&quot;</span></span><br><span class=\"line\">puts str.gsub(reg, <span class=\"string\">&#x27;-&#x27;</span>)   <span class=\"comment\">#=&gt; &quot;This-is-test-string&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>sub和gsub方法同样支持block块模式，针对匹配到的字符做处理</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg =<span class=\"regexp\">/i/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;This is test string&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = str.sub(reg) <span class=\"keyword\">do</span> |<span class=\"params\">matched</span>|</span><br><span class=\"line\">  matched.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts result     <span class=\"comment\">#=&gt; ThIs is test string</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = str.gsub(reg) <span class=\"keyword\">do</span> |<span class=\"params\">matched</span>|</span><br><span class=\"line\">  matched.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts result     <span class=\"comment\">#=&gt; ThIs Is test strIng</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>scan</strong>方法和<strong>gsub</strong>方法类似，都可以获取到所有匹配到的字符，但是不能置换。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(r)(.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;racrtrhrdra&quot;</span></span><br><span class=\"line\">str.scan(reg) <span class=\"keyword\">do</span> |<span class=\"params\">matched</span>|</span><br><span class=\"line\">  p matched</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;a&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;t&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;h&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;d&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;a&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.scan(reg) <span class=\"keyword\">do</span> |<span class=\"params\">val1, val2</span>|</span><br><span class=\"line\">  p val1 + <span class=\"string\">&quot;-&quot;</span> + val2</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-a&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-t&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-h&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-d&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-a&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h4 id=\"正则表达式-Regexp\"><a href=\"#正则表达式-Regexp\" class=\"headerlink\" title=\"正则表达式(Regexp)\"></a>正则表达式(Regexp)</h4><p>Ruby中的正则表达式用<strong>Regexp</strong>类来表示，正则表达式描述的是一种模式，该模式用于匹配字符串。</p>\n<h5 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h5><p>其创建方式有多种：<br>1.使用**&#x2F; &#x2F;** 把字符串括起来，可以简单地创建出正则表达式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg1 = <span class=\"regexp\">/Ruby/</span></span><br><span class=\"line\">puts reg1.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure>","more":"<p>2.使用**Regexp.new(“字符串”)**创建正则表达式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;Ruby&quot;</span>)</span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure>\n\n<p>3.使用**%r**创建正则表达式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">%r(Ruby)</span></span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br><span class=\"line\"></span><br><span class=\"line\">reg = %r&lt;<span class=\"title class_\">Ruby</span>&gt;</span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br><span class=\"line\"></span><br><span class=\"line\">reg = %r|<span class=\"params\">Ruby</span>|</span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br><span class=\"line\"></span><br><span class=\"line\">reg = <span class=\"regexp\">%r!Ruby!</span></span><br><span class=\"line\">puts reg.<span class=\"keyword\">class</span>       <span class=\"comment\">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"匹配\"><a href=\"#匹配\" class=\"headerlink\" title=\"匹配\"></a>匹配</h5><p>Ruby的正则表达式匹配使用**&#x3D;~**符号，如果匹配成功返回匹配字符串的位置，否则返回nil。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/R..y/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;regexp of Ruby&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">matched = reg =~ str</span><br><span class=\"line\">puts matched        <span class=\"comment\">#=&gt; 10</span></span><br><span class=\"line\"></span><br><span class=\"line\">unmatched = reg =~ <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">p unmatched         <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> matched</span><br><span class=\"line\">  puts <span class=\"string\">&quot;matched&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  puts <span class=\"string\">&quot;unmatched&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>此处并不过多的介绍正则表达式的语法规则，具体详细语法请参见<a href=\"http://regexlib.com/CheatSheet.aspx\">http://regexlib.com/CheatSheet.aspx</a></p>\n<h5 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h5><p>对特殊字符的转义方式有两种，使用<strong>\\</strong>字符和使用<strong>Regexp#quote</strong>方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using \\ symbol</span></span><br><span class=\"line\">reg = <span class=\"regexp\">/ruby\\*regexp/</span></span><br><span class=\"line\">puts reg =~ <span class=\"string\">&quot;ruby*regexp&quot;</span>     <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">p reg =~ <span class=\"string\">&quot;rubyregexp&quot;</span>          <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#using Regexp#quote method</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">%r(ruby*regexp)</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"title class_\">Regexp</span>.quote(<span class=\"string\">&quot;ruby*regexp&quot;</span>))</span><br><span class=\"line\">str = <span class=\"string\">&quot;ruby*regexp&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p reg1 =~ str         <span class=\"comment\">#=&gt; nil</span></span><br><span class=\"line\">p reg2 =~ str         <span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h5><p>在正则表达式的后面添加特定的字符如<strong>i</strong>, <strong>x</strong>, <strong>m</strong>等时，匹配后的规则会有点变化</p>\n<p><strong>i</strong> \tRegexp::IGNORECASE  忽略字符串大小写<br><strong>x</strong>\tRegexp::EXTENDED\t\t忽略字符串中的空白字符<br><strong>m</strong>\tRegexp::MULTILINE\t匹配多行字符串    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#using i optional symbol to ignore the cap</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">/test String/i</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;test string&quot;</span>, <span class=\"title class_\">Regexp</span><span class=\"symbol\">:</span><span class=\"symbol\">:IGNORECASE</span>)</span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test string&quot;</span>     <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test string&quot;</span>     <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#using x optional symbol to ignore the white space symbol</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">/test string/x</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;test string&quot;</span>, <span class=\"title class_\">Regexp</span><span class=\"symbol\">:</span><span class=\"symbol\">:EXTENDED</span>)</span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;teststring&quot;</span>      <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;teststring&quot;</span>      <span class=\"comment\">#=&gt; 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#using m optional symbol to match multiline</span></span><br><span class=\"line\">reg1 = <span class=\"regexp\">/test\\nstring/m</span></span><br><span class=\"line\">reg2 = <span class=\"title class_\">Regexp</span>.new(<span class=\"string\">&quot;test\\nstring&quot;</span>, <span class=\"title class_\">Regexp</span><span class=\"symbol\">:</span><span class=\"symbol\">:MULTILINE</span>)</span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test\\nstring&quot;</span></span><br><span class=\"line\">puts reg1 =~ <span class=\"string\">&quot;test\\nstring&quot;</span>      <span class=\"comment\">#=&gt; 0</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h5><p>捕获，就是从正则表达式的匹配部分中提取某部分字符，通过”<strong>$数字</strong>“这种形式的变量获取匹配了正则表达式中的用**()**括住的字符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(.)(C.)(.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;ABCDE&quot;</span></span><br><span class=\"line\">reg =~ str</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"variable\">$1</span>   <span class=\"comment\">#=&gt; B</span></span><br><span class=\"line\">puts <span class=\"variable\">$2</span>   <span class=\"comment\">#=&gt; CD</span></span><br><span class=\"line\">puts <span class=\"variable\">$3</span>   <span class=\"comment\">#=&gt; E</span></span><br></pre></td></tr></table></figure>\n\n<p>使用”<strong>(?: )</strong>“可以过滤掉不需要捕获的模式.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(.)(?:C.)(.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;ABCDE&quot;</span></span><br><span class=\"line\">reg =~ str</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"variable\">$1</span>   <span class=\"comment\">#=&gt; B</span></span><br><span class=\"line\">puts <span class=\"variable\">$2</span>   <span class=\"comment\">#=&gt; E</span></span><br></pre></td></tr></table></figure>\n\n<p>Ruby中也可以使用**$&#96;**, <strong>$&amp;</strong>, **$’**分别代表匹配部分前的字符串、匹配部分的字符串、匹配部分后的字符串。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(C.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;ABCDE&quot;</span></span><br><span class=\"line\">reg =~ str</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"variable\">$`</span>     <span class=\"comment\">#=&gt; AB</span></span><br><span class=\"line\">puts <span class=\"variable\">$&amp;</span>     <span class=\"comment\">#=&gt; CD</span></span><br><span class=\"line\">puts <span class=\"variable\">$&#x27;</span>     <span class=\"comment\">#=&gt; E</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h5><p><strong>sub</strong>和<strong>gsub</strong>方法的作用是用指定的字符置换字符串中的某部分字符。<strong>sub</strong>方法只置换首次匹配的部分，而<strong>gsub</strong>则会置换所有匹配的部分.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/\\s+/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;This is test string&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts str.sub(reg, <span class=\"string\">&#x27;-&#x27;</span>)   <span class=\"comment\">#=&gt; &quot;This-is test string&quot;</span></span><br><span class=\"line\">puts str.gsub(reg, <span class=\"string\">&#x27;-&#x27;</span>)   <span class=\"comment\">#=&gt; &quot;This-is-test-string&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>sub和gsub方法同样支持block块模式，针对匹配到的字符做处理</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg =<span class=\"regexp\">/i/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;This is test string&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = str.sub(reg) <span class=\"keyword\">do</span> |<span class=\"params\">matched</span>|</span><br><span class=\"line\">  matched.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts result     <span class=\"comment\">#=&gt; ThIs is test string</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = str.gsub(reg) <span class=\"keyword\">do</span> |<span class=\"params\">matched</span>|</span><br><span class=\"line\">  matched.upcase</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts result     <span class=\"comment\">#=&gt; ThIs Is test strIng</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>scan</strong>方法和<strong>gsub</strong>方法类似，都可以获取到所有匹配到的字符，但是不能置换。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reg = <span class=\"regexp\">/(r)(.)/</span></span><br><span class=\"line\">str = <span class=\"string\">&quot;racrtrhrdra&quot;</span></span><br><span class=\"line\">str.scan(reg) <span class=\"keyword\">do</span> |<span class=\"params\">matched</span>|</span><br><span class=\"line\">  p matched</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;a&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;t&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;h&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;d&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">#[&quot;r&quot;, &quot;a&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">str.scan(reg) <span class=\"keyword\">do</span> |<span class=\"params\">val1, val2</span>|</span><br><span class=\"line\">  p val1 + <span class=\"string\">&quot;-&quot;</span> + val2</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-a&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-t&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-h&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-d&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;r-a&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"How to fix Gem FilePermissionError","date":"2016-01-12T15:31:35.000Z","comments":1,"_content":"\nSometimes we face the erorr \"Gem::FilePermissionError: You don't have write permissions for the /Library/Ruby/Gems/x.x.x directory\". This error message indicates that the user doesn't have the necessary permissions to install Ruby gems system-wide. This is because the system Ruby installation requires administrative privileges to modify its gem directory.\n\nTo resolve this issue, there is a few options:\n\n### 1. Use a Ruby Version Manager (Recommended)\n\nInstead of installing gems globally, consider using a Ruby version manager like `rbenv` or `RVM`. These tools allow you to manage multiple Ruby versions and gems without requiring administrative permissions.\n\n#### Using rbenv\n    1. Install rbenv if you haven't already.\n    2. Install the desired version of Ruby using rbenv.\n    3. Install gems without needing elevated permissions.\n\n#### Using RVM\n    1. Install RVM if you haven't already.\n    2. Install the desired version of Ruby using RVM.\n    3. Use the installed Ruby version without needing elevated permissions to install gems.\n\n<!-- more -->\n### 2. Install Gems Locally\nIf you want to install gems for the system Ruby without using a version manager, you'll need administrative privileges. You can use the sudo command to install gems as the superuser:\n\n``` bash\nsudo gem install gem_name\n```\nHowever, keep in mind that modifying the system Ruby environment might affect other applications, and it's generally recommended to use a version manager to manage Ruby environments.\n\n### 3. Use --user-install Option\nIf you want to install gems locally without administrative privileges, you can use the **--user-install** option:\n\n``` bash\ngem install gem_name --user-install\n```\nThis installs the gem in your user's home directory, avoiding the need for system-wide modifications.\n\n### 4. Install to Custom Directory\nYou can configure gems to be installed in a specific directory where you have write permissions. This involves configuring the **GEM_HOME** and **GEM_PATH** environment variables:\n\n``` bash\nexport GEM_HOME=$HOME/gems\nexport GEM_PATH=$GEM_HOME:/path/to/system/gems\ngem install gem_name\n```\nMake sure to adjust the paths according to your preferences.\n\nIn general, using a Ruby version manager like **rbenv** or **RVM** is recommended, as it provides a more flexible and isolated way to manage Ruby versions and gems without affecting system-wide configurations or requiring administrative permissions.\n\n\n","source":"_posts/2016-01-12-how-to-fix-gem-filepermissionerror.markdown","raw":"---\n\ntitle: \"How to fix Gem FilePermissionError\"\ndate: 2016-01-12 23:31:35 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby, Tool]\n---\n\nSometimes we face the erorr \"Gem::FilePermissionError: You don't have write permissions for the /Library/Ruby/Gems/x.x.x directory\". This error message indicates that the user doesn't have the necessary permissions to install Ruby gems system-wide. This is because the system Ruby installation requires administrative privileges to modify its gem directory.\n\nTo resolve this issue, there is a few options:\n\n### 1. Use a Ruby Version Manager (Recommended)\n\nInstead of installing gems globally, consider using a Ruby version manager like `rbenv` or `RVM`. These tools allow you to manage multiple Ruby versions and gems without requiring administrative permissions.\n\n#### Using rbenv\n    1. Install rbenv if you haven't already.\n    2. Install the desired version of Ruby using rbenv.\n    3. Install gems without needing elevated permissions.\n\n#### Using RVM\n    1. Install RVM if you haven't already.\n    2. Install the desired version of Ruby using RVM.\n    3. Use the installed Ruby version without needing elevated permissions to install gems.\n\n<!-- more -->\n### 2. Install Gems Locally\nIf you want to install gems for the system Ruby without using a version manager, you'll need administrative privileges. You can use the sudo command to install gems as the superuser:\n\n``` bash\nsudo gem install gem_name\n```\nHowever, keep in mind that modifying the system Ruby environment might affect other applications, and it's generally recommended to use a version manager to manage Ruby environments.\n\n### 3. Use --user-install Option\nIf you want to install gems locally without administrative privileges, you can use the **--user-install** option:\n\n``` bash\ngem install gem_name --user-install\n```\nThis installs the gem in your user's home directory, avoiding the need for system-wide modifications.\n\n### 4. Install to Custom Directory\nYou can configure gems to be installed in a specific directory where you have write permissions. This involves configuring the **GEM_HOME** and **GEM_PATH** environment variables:\n\n``` bash\nexport GEM_HOME=$HOME/gems\nexport GEM_PATH=$GEM_HOME:/path/to/system/gems\ngem install gem_name\n```\nMake sure to adjust the paths according to your preferences.\n\nIn general, using a Ruby version manager like **rbenv** or **RVM** is recommended, as it provides a more flexible and isolated way to manage Ruby versions and gems without affecting system-wide configurations or requiring administrative permissions.\n\n\n","slug":"2016-01-12-how-to-fix-gem-filepermissionerror","published":1,"updated":"2023-09-02T16:53:01.121Z","_id":"clm27g4p4004tazv58slsa4lw","layout":"post","photos":[],"link":"","content":"<p>Sometimes we face the erorr “Gem::FilePermissionError: You don’t have write permissions for the &#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;x.x.x directory”. This error message indicates that the user doesn’t have the necessary permissions to install Ruby gems system-wide. This is because the system Ruby installation requires administrative privileges to modify its gem directory.</p>\n<p>To resolve this issue, there is a few options:</p>\n<h3 id=\"1-Use-a-Ruby-Version-Manager-Recommended\"><a href=\"#1-Use-a-Ruby-Version-Manager-Recommended\" class=\"headerlink\" title=\"1. Use a Ruby Version Manager (Recommended)\"></a>1. Use a Ruby Version Manager (Recommended)</h3><p>Instead of installing gems globally, consider using a Ruby version manager like <code>rbenv</code> or <code>RVM</code>. These tools allow you to manage multiple Ruby versions and gems without requiring administrative permissions.</p>\n<h4 id=\"Using-rbenv\"><a href=\"#Using-rbenv\" class=\"headerlink\" title=\"Using rbenv\"></a>Using rbenv</h4><pre><code>1. Install rbenv if you haven&#39;t already.\n2. Install the desired version of Ruby using rbenv.\n3. Install gems without needing elevated permissions.\n</code></pre>\n<h4 id=\"Using-RVM\"><a href=\"#Using-RVM\" class=\"headerlink\" title=\"Using RVM\"></a>Using RVM</h4><pre><code>1. Install RVM if you haven&#39;t already.\n2. Install the desired version of Ruby using RVM.\n3. Use the installed Ruby version without needing elevated permissions to install gems.\n</code></pre>\n<span id=\"more\"></span>\n<h3 id=\"2-Install-Gems-Locally\"><a href=\"#2-Install-Gems-Locally\" class=\"headerlink\" title=\"2. Install Gems Locally\"></a>2. Install Gems Locally</h3><p>If you want to install gems for the system Ruby without using a version manager, you’ll need administrative privileges. You can use the sudo command to install gems as the superuser:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install gem_name</span><br></pre></td></tr></table></figure>\n<p>However, keep in mind that modifying the system Ruby environment might affect other applications, and it’s generally recommended to use a version manager to manage Ruby environments.</p>\n<h3 id=\"3-Use-–user-install-Option\"><a href=\"#3-Use-–user-install-Option\" class=\"headerlink\" title=\"3. Use –user-install Option\"></a>3. Use –user-install Option</h3><p>If you want to install gems locally without administrative privileges, you can use the <strong>–user-install</strong> option:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install gem_name --user-install</span><br></pre></td></tr></table></figure>\n<p>This installs the gem in your user’s home directory, avoiding the need for system-wide modifications.</p>\n<h3 id=\"4-Install-to-Custom-Directory\"><a href=\"#4-Install-to-Custom-Directory\" class=\"headerlink\" title=\"4. Install to Custom Directory\"></a>4. Install to Custom Directory</h3><p>You can configure gems to be installed in a specific directory where you have write permissions. This involves configuring the <strong>GEM_HOME</strong> and <strong>GEM_PATH</strong> environment variables:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GEM_HOME=<span class=\"variable\">$HOME</span>/gems</span><br><span class=\"line\"><span class=\"built_in\">export</span> GEM_PATH=<span class=\"variable\">$GEM_HOME</span>:/path/to/system/gems</span><br><span class=\"line\">gem install gem_name</span><br></pre></td></tr></table></figure>\n<p>Make sure to adjust the paths according to your preferences.</p>\n<p>In general, using a Ruby version manager like <strong>rbenv</strong> or <strong>RVM</strong> is recommended, as it provides a more flexible and isolated way to manage Ruby versions and gems without affecting system-wide configurations or requiring administrative permissions.</p>\n","site":{"data":{}},"excerpt":"<p>Sometimes we face the erorr “Gem::FilePermissionError: You don’t have write permissions for the &#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;x.x.x directory”. This error message indicates that the user doesn’t have the necessary permissions to install Ruby gems system-wide. This is because the system Ruby installation requires administrative privileges to modify its gem directory.</p>\n<p>To resolve this issue, there is a few options:</p>\n<h3 id=\"1-Use-a-Ruby-Version-Manager-Recommended\"><a href=\"#1-Use-a-Ruby-Version-Manager-Recommended\" class=\"headerlink\" title=\"1. Use a Ruby Version Manager (Recommended)\"></a>1. Use a Ruby Version Manager (Recommended)</h3><p>Instead of installing gems globally, consider using a Ruby version manager like <code>rbenv</code> or <code>RVM</code>. These tools allow you to manage multiple Ruby versions and gems without requiring administrative permissions.</p>\n<h4 id=\"Using-rbenv\"><a href=\"#Using-rbenv\" class=\"headerlink\" title=\"Using rbenv\"></a>Using rbenv</h4><pre><code>1. Install rbenv if you haven&#39;t already.\n2. Install the desired version of Ruby using rbenv.\n3. Install gems without needing elevated permissions.\n</code></pre>\n<h4 id=\"Using-RVM\"><a href=\"#Using-RVM\" class=\"headerlink\" title=\"Using RVM\"></a>Using RVM</h4><pre><code>1. Install RVM if you haven&#39;t already.\n2. Install the desired version of Ruby using RVM.\n3. Use the installed Ruby version without needing elevated permissions to install gems.\n</code></pre>","more":"<h3 id=\"2-Install-Gems-Locally\"><a href=\"#2-Install-Gems-Locally\" class=\"headerlink\" title=\"2. Install Gems Locally\"></a>2. Install Gems Locally</h3><p>If you want to install gems for the system Ruby without using a version manager, you’ll need administrative privileges. You can use the sudo command to install gems as the superuser:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install gem_name</span><br></pre></td></tr></table></figure>\n<p>However, keep in mind that modifying the system Ruby environment might affect other applications, and it’s generally recommended to use a version manager to manage Ruby environments.</p>\n<h3 id=\"3-Use-–user-install-Option\"><a href=\"#3-Use-–user-install-Option\" class=\"headerlink\" title=\"3. Use –user-install Option\"></a>3. Use –user-install Option</h3><p>If you want to install gems locally without administrative privileges, you can use the <strong>–user-install</strong> option:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install gem_name --user-install</span><br></pre></td></tr></table></figure>\n<p>This installs the gem in your user’s home directory, avoiding the need for system-wide modifications.</p>\n<h3 id=\"4-Install-to-Custom-Directory\"><a href=\"#4-Install-to-Custom-Directory\" class=\"headerlink\" title=\"4. Install to Custom Directory\"></a>4. Install to Custom Directory</h3><p>You can configure gems to be installed in a specific directory where you have write permissions. This involves configuring the <strong>GEM_HOME</strong> and <strong>GEM_PATH</strong> environment variables:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GEM_HOME=<span class=\"variable\">$HOME</span>/gems</span><br><span class=\"line\"><span class=\"built_in\">export</span> GEM_PATH=<span class=\"variable\">$GEM_HOME</span>:/path/to/system/gems</span><br><span class=\"line\">gem install gem_name</span><br></pre></td></tr></table></figure>\n<p>Make sure to adjust the paths according to your preferences.</p>\n<p>In general, using a Ruby version manager like <strong>rbenv</strong> or <strong>RVM</strong> is recommended, as it provides a more flexible and isolated way to manage Ruby versions and gems without affecting system-wide configurations or requiring administrative permissions.</p>"},{"title":"Ruby修炼之道(18)","date":"2015-12-28T02:59:48.000Z","comments":1,"_content":"\n#### IO\nRuby程序在启动后会预先分配3个**IO**对象:    \n标准输入 - 预定义常量(**STDIN**), 全局变量(**\\$stdin**)        \n标准输出 - 预定义常量(**STDOUT**), 全局变量(**\\$stdout**)   \n标准错误输出 - 预定义常量(**STDERR**), 全局变量(**\\$stderr**)\n\n\n``` ruby\n$stdout.print \"output something from $stdout\\n\"\nSTDERR.print \"output something from $stderr\\n\"\n```\n\nIO对象是否与控制台关联，我们可以通过**tty?**方法来判断。\n\n``` ruby\nif $stdin.tty?\n  print \"stdin is a tty\"\nelse\n  print \"stdin is not a tty\"\nend\n```\n<!-- more -->\n##### 文件操作\n通过File.open方法或open方法打开文件并获取新的IO对象，\n\n\tio = File.open(file, mode)\n\tio = open(file, mode)\n\nmode为文件的读写方法，缺省情况下为只读模式(r).\n\nr  - 只读模式    \nr+ - 读写模式   \nw  - 只写模式，如果文件不存在则创建新文件，如果文件存在，则清空文件   \nw+ - 读写模式，其余同w    \na  - 追加模式，文件不存在则创建新文件    \na+ - 读取、追加模式，文件不存在则创建新文件    \n\nio.**close**\n使用**close**方法关闭已打开的文件。File.open方法使用块，则文件会在使用完毕后自动关闭，io变量会被作为块变量传递给块。并且使用io.closed?方法可以检查是否关闭。\n\n``` ruby\nFile.open(\"tty.rb\") do |io|\n  while line = io.gets\n    print line\n  end\nend\n\n```\n\n使用**File.read**可以一次性读取文件的内容。\n\n``` ruby\ndata = File.read(\"tty.rb\")\n```\n\n##### 基本输入\nio.**gets**(rs)   \nio.**each**(rs)   \nio.**each_line**(rs)   \nio.**readlines**(rs)   \n从IO类的对象中读取一行数据，用参数**rs**的字符串分行，缺省模式下为换行符。\n\n使用**eof?**可以检查输入是否已经完毕。\n\n``` ruby\nio = File.open(\"tty.rb\")\nwhile line = io.gets\n  line.chomp!\n  print line\nend\np io.eof?     #=> true\nio.close      #=> close file\np io.closed?   #=> true\n\n```\n\n用**readlines**方法可以一次性读取所有数据，并返回将每行数据作为元素封装的数组.\n\n``` ruby\nio = File.open(\"tty.rb\")\nary = io.readlines\nio.close\nary.each do |line|\n  line.chomp!\n  print line\nend\n```\n\nio.**lineno**   \n使用gets方法，each_line方法逐行读取文件时，io会自动记录读取的行数，可以通过**io.lineno**来获取当前行数。   \n\nio.**each_char**    \n逐个字符读取io对象中的数据,并启动块。   \n\nio.**each_byte** \n逐个字节读取io对象中的数据，并启动块。    \n\nio.**getc**    \n只读取io对象中的一个字符。\nio.**ungetc(ch)**    \n将参数ch指定的字符退回到io得缓冲流中   \n\n``` ruby\nFile.open(\"hello.txt\", 'w') do |io|\n  io.write(\"Hello Ruby\")\nend\nFile.open(\"hello.txt\") do |io|\n  p io.getc       #=> H\n  io.ungetc('H')\n  p io.gets       #=> Hello Ruby\nend\n\nFile.delete(\"hello.txt\")\n```\n\nio.**getbyte**, io.**ungetbyte**的使用方法同上，不同之处在于此处是字节。    \n\nio.**read**(size)    \n读取参数size指定大小的数据，如果没指定，则一次性读取所有数据。    \n\n##### 输出操作\nio.**puts**(str0, str1, ...)    \n指定多个字符串时，会在每个字符串后面添加换行符。   \n\n``` ruby\n$stdout.puts \"hi\", \"hello\", \"hey\"\t\t\t#=> hi\\nhello\\nhey\\n\n```\n\nio.**putc**(ch)    \n输出指定参数ch字符，如果参数为字符串，则输出首个字符    \n\n``` ruby\n$stdout.putc('H')       #=> H\n$stdout.putc('Hello')   #=> H\n$stdout.putc('\\n')\n```\n\nio.**print**(str0, str1, ...)   \n输出参数指定的字符串，不会在每个字符串后面追加换行符    \n\nio.**printf**(fmt, arg0, arg1, ...)    \n按照指定格式输出字符串。    \n\nio.**write**(str)    \n输出参数str指定的字符串，方法返回值为输出的字节数    \n\n``` ruby\nsize = $stdout.write(\"Hello\")\t\t#=> Hello\np size\t\t\t#=> 5\n```\n\n##### 文件指针\n用文件指针或者当前文件偏移量来表示IO对象指向文件的位置。    \n\nio.**pos**   \nio.**pos**=position    \n通过**pos**方法获取文件指针位置，改变文件指针使用**pos=**方法。\n\n``` ruby\nFile.open(\"hello.txt\", 'w') do |io|\n  io.write(\"Hello Ruby\")\nend\nFile.open(\"hello.txt\") do |io|\n  p io.read(5)      #=> Hello\n  io.pos = 0\n  p io.gets         #=> Hello Ruby\nend\n```\n\nio.**seek**(offset, whence)   \noffset为指定位置的整数，whence为指定offset如何移动， 以下为whence的值:     \nIO::SEEK_SET - 将文件指针移动到指定offset指定的位置    \nIO::SEEK_CUR - 将offset视为相对于当前位置的偏移位置来移动文件指针    \nIO::SEEK_END - 将offset视为相对于文件末尾的偏移位置  \n\n``` ruby\nFile.open(\"hello.txt\", 'w') do |io|\n  io.write(\"Hello Ruby\")\nend\nFile.open(\"hello.txt\") do |io|\n  p io.read(5)      #=> Hello\n  io.seek(-5, IO::SEEK_CUR)\n  p io.gets         #=> Hello Ruby\n  io.seek(0, IO::SEEK_SET)\n  p io.gets         #=> Hello Ruby\n  io.seek(-4, IO::SEEK_END)\n  p io.gets         #=> Ruby\nend\n```\n\nio.**rewind**   \n将文件指针重置到文件开始处，结果同以下两个操作:    \n\n\tio.pos = 0   \n\tio.seek(0, IO::SEEK_SET)\n\t\nio.**truncate**(size)    \n按照参数size指定的大小截断文件。\n\n*注，新的IO对象默认为文本模式，可以通过io.**binmode**将其转为二进制模式*   \n\n##### 缓冲\nIO对象在输出数据时，结果并不一定会马上输出出来，程序会在内部开辟一个缓冲空间来缓存输出，当空间满的时候再输出来。但是标准错误输出不会使用缓冲，如果有错误信息，则立刻输出。所以标准错误输出一般用于输出警告、错误之类的信息，能够立刻输出数据    \n\nio.**flush**    \n强制输出缓冲中的数据。\n\nio.**sync**    \nio.**sync**=state   \n通过io.sync = true, 程序写入缓冲时flush方法会被自动调用。    \n\n##### 与命令行交互\nIO.**popen**(command, mode)   \ncommand为相关的命令    \n\n``` ruby\npattern = Regexp.new(ARGV[0])\nfilename = ARGV[1]\n\nif /.gz$/ =~ filename\n  file = IO.popen(\"gunzip -c #{filename}\")\nelse\n  file = File.open(filename)\nend\nfile.close\n```    \n\n**open**(\"|command\", mode)   \n将带有管道符号的命令传递给open方法的效果与使用IO.popen方法是一样的\n\n``` ruby\nfilename = ARGV[0]\nopen(\"|gunzip -c #{filename}\") do |io|\n  io.each_line do |line|\n    print line\n  end\nend\n```\n\n\n  \n\n\n","source":"_posts/2015-12-28-ruby-practice-18.markdown","raw":"---\n\ntitle: \"Ruby修炼之道(18)\"\ndate: 2015-12-28 10:59:48 +0800\ncomments: true\ncategories: Backend\ntags: [Ruby]\n---\n\n#### IO\nRuby程序在启动后会预先分配3个**IO**对象:    \n标准输入 - 预定义常量(**STDIN**), 全局变量(**\\$stdin**)        \n标准输出 - 预定义常量(**STDOUT**), 全局变量(**\\$stdout**)   \n标准错误输出 - 预定义常量(**STDERR**), 全局变量(**\\$stderr**)\n\n\n``` ruby\n$stdout.print \"output something from $stdout\\n\"\nSTDERR.print \"output something from $stderr\\n\"\n```\n\nIO对象是否与控制台关联，我们可以通过**tty?**方法来判断。\n\n``` ruby\nif $stdin.tty?\n  print \"stdin is a tty\"\nelse\n  print \"stdin is not a tty\"\nend\n```\n<!-- more -->\n##### 文件操作\n通过File.open方法或open方法打开文件并获取新的IO对象，\n\n\tio = File.open(file, mode)\n\tio = open(file, mode)\n\nmode为文件的读写方法，缺省情况下为只读模式(r).\n\nr  - 只读模式    \nr+ - 读写模式   \nw  - 只写模式，如果文件不存在则创建新文件，如果文件存在，则清空文件   \nw+ - 读写模式，其余同w    \na  - 追加模式，文件不存在则创建新文件    \na+ - 读取、追加模式，文件不存在则创建新文件    \n\nio.**close**\n使用**close**方法关闭已打开的文件。File.open方法使用块，则文件会在使用完毕后自动关闭，io变量会被作为块变量传递给块。并且使用io.closed?方法可以检查是否关闭。\n\n``` ruby\nFile.open(\"tty.rb\") do |io|\n  while line = io.gets\n    print line\n  end\nend\n\n```\n\n使用**File.read**可以一次性读取文件的内容。\n\n``` ruby\ndata = File.read(\"tty.rb\")\n```\n\n##### 基本输入\nio.**gets**(rs)   \nio.**each**(rs)   \nio.**each_line**(rs)   \nio.**readlines**(rs)   \n从IO类的对象中读取一行数据，用参数**rs**的字符串分行，缺省模式下为换行符。\n\n使用**eof?**可以检查输入是否已经完毕。\n\n``` ruby\nio = File.open(\"tty.rb\")\nwhile line = io.gets\n  line.chomp!\n  print line\nend\np io.eof?     #=> true\nio.close      #=> close file\np io.closed?   #=> true\n\n```\n\n用**readlines**方法可以一次性读取所有数据，并返回将每行数据作为元素封装的数组.\n\n``` ruby\nio = File.open(\"tty.rb\")\nary = io.readlines\nio.close\nary.each do |line|\n  line.chomp!\n  print line\nend\n```\n\nio.**lineno**   \n使用gets方法，each_line方法逐行读取文件时，io会自动记录读取的行数，可以通过**io.lineno**来获取当前行数。   \n\nio.**each_char**    \n逐个字符读取io对象中的数据,并启动块。   \n\nio.**each_byte** \n逐个字节读取io对象中的数据，并启动块。    \n\nio.**getc**    \n只读取io对象中的一个字符。\nio.**ungetc(ch)**    \n将参数ch指定的字符退回到io得缓冲流中   \n\n``` ruby\nFile.open(\"hello.txt\", 'w') do |io|\n  io.write(\"Hello Ruby\")\nend\nFile.open(\"hello.txt\") do |io|\n  p io.getc       #=> H\n  io.ungetc('H')\n  p io.gets       #=> Hello Ruby\nend\n\nFile.delete(\"hello.txt\")\n```\n\nio.**getbyte**, io.**ungetbyte**的使用方法同上，不同之处在于此处是字节。    \n\nio.**read**(size)    \n读取参数size指定大小的数据，如果没指定，则一次性读取所有数据。    \n\n##### 输出操作\nio.**puts**(str0, str1, ...)    \n指定多个字符串时，会在每个字符串后面添加换行符。   \n\n``` ruby\n$stdout.puts \"hi\", \"hello\", \"hey\"\t\t\t#=> hi\\nhello\\nhey\\n\n```\n\nio.**putc**(ch)    \n输出指定参数ch字符，如果参数为字符串，则输出首个字符    \n\n``` ruby\n$stdout.putc('H')       #=> H\n$stdout.putc('Hello')   #=> H\n$stdout.putc('\\n')\n```\n\nio.**print**(str0, str1, ...)   \n输出参数指定的字符串，不会在每个字符串后面追加换行符    \n\nio.**printf**(fmt, arg0, arg1, ...)    \n按照指定格式输出字符串。    \n\nio.**write**(str)    \n输出参数str指定的字符串，方法返回值为输出的字节数    \n\n``` ruby\nsize = $stdout.write(\"Hello\")\t\t#=> Hello\np size\t\t\t#=> 5\n```\n\n##### 文件指针\n用文件指针或者当前文件偏移量来表示IO对象指向文件的位置。    \n\nio.**pos**   \nio.**pos**=position    \n通过**pos**方法获取文件指针位置，改变文件指针使用**pos=**方法。\n\n``` ruby\nFile.open(\"hello.txt\", 'w') do |io|\n  io.write(\"Hello Ruby\")\nend\nFile.open(\"hello.txt\") do |io|\n  p io.read(5)      #=> Hello\n  io.pos = 0\n  p io.gets         #=> Hello Ruby\nend\n```\n\nio.**seek**(offset, whence)   \noffset为指定位置的整数，whence为指定offset如何移动， 以下为whence的值:     \nIO::SEEK_SET - 将文件指针移动到指定offset指定的位置    \nIO::SEEK_CUR - 将offset视为相对于当前位置的偏移位置来移动文件指针    \nIO::SEEK_END - 将offset视为相对于文件末尾的偏移位置  \n\n``` ruby\nFile.open(\"hello.txt\", 'w') do |io|\n  io.write(\"Hello Ruby\")\nend\nFile.open(\"hello.txt\") do |io|\n  p io.read(5)      #=> Hello\n  io.seek(-5, IO::SEEK_CUR)\n  p io.gets         #=> Hello Ruby\n  io.seek(0, IO::SEEK_SET)\n  p io.gets         #=> Hello Ruby\n  io.seek(-4, IO::SEEK_END)\n  p io.gets         #=> Ruby\nend\n```\n\nio.**rewind**   \n将文件指针重置到文件开始处，结果同以下两个操作:    \n\n\tio.pos = 0   \n\tio.seek(0, IO::SEEK_SET)\n\t\nio.**truncate**(size)    \n按照参数size指定的大小截断文件。\n\n*注，新的IO对象默认为文本模式，可以通过io.**binmode**将其转为二进制模式*   \n\n##### 缓冲\nIO对象在输出数据时，结果并不一定会马上输出出来，程序会在内部开辟一个缓冲空间来缓存输出，当空间满的时候再输出来。但是标准错误输出不会使用缓冲，如果有错误信息，则立刻输出。所以标准错误输出一般用于输出警告、错误之类的信息，能够立刻输出数据    \n\nio.**flush**    \n强制输出缓冲中的数据。\n\nio.**sync**    \nio.**sync**=state   \n通过io.sync = true, 程序写入缓冲时flush方法会被自动调用。    \n\n##### 与命令行交互\nIO.**popen**(command, mode)   \ncommand为相关的命令    \n\n``` ruby\npattern = Regexp.new(ARGV[0])\nfilename = ARGV[1]\n\nif /.gz$/ =~ filename\n  file = IO.popen(\"gunzip -c #{filename}\")\nelse\n  file = File.open(filename)\nend\nfile.close\n```    \n\n**open**(\"|command\", mode)   \n将带有管道符号的命令传递给open方法的效果与使用IO.popen方法是一样的\n\n``` ruby\nfilename = ARGV[0]\nopen(\"|gunzip -c #{filename}\") do |io|\n  io.each_line do |line|\n    print line\n  end\nend\n```\n\n\n  \n\n\n","slug":"2015-12-28-ruby-practice-18","published":1,"updated":"2023-09-02T18:00:36.033Z","_id":"clm27g4p5004uazv5356w6dkt","layout":"post","photos":[],"link":"","content":"<h4 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h4><p>Ruby程序在启动后会预先分配3个<strong>IO</strong>对象:<br>标准输入 - 预定义常量(<strong>STDIN</strong>), 全局变量(<strong>$stdin</strong>)<br>标准输出 - 预定义常量(<strong>STDOUT</strong>), 全局变量(<strong>$stdout</strong>)<br>标准错误输出 - 预定义常量(<strong>STDERR</strong>), 全局变量(<strong>$stderr</strong>)</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$stdout</span>.print <span class=\"string\">&quot;output something from $stdout\\n&quot;</span></span><br><span class=\"line\"><span class=\"variable constant_\">STDERR</span>.print <span class=\"string\">&quot;output something from $stderr\\n&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>IO对象是否与控制台关联，我们可以通过**tty?**方法来判断。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"variable\">$stdin</span>.tty?</span><br><span class=\"line\">  print <span class=\"string\">&quot;stdin is a tty&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  print <span class=\"string\">&quot;stdin is not a tty&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h5 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h5><p>通过File.open方法或open方法打开文件并获取新的IO对象，</p>\n<pre><code>io = File.open(file, mode)\nio = open(file, mode)\n</code></pre>\n<p>mode为文件的读写方法，缺省情况下为只读模式(r).</p>\n<p>r  - 只读模式<br>r+ - 读写模式<br>w  - 只写模式，如果文件不存在则创建新文件，如果文件存在，则清空文件<br>w+ - 读写模式，其余同w<br>a  - 追加模式，文件不存在则创建新文件<br>a+ - 读取、追加模式，文件不存在则创建新文件    </p>\n<p>io.<strong>close</strong><br>使用<strong>close</strong>方法关闭已打开的文件。File.open方法使用块，则文件会在使用完毕后自动关闭，io变量会被作为块变量传递给块。并且使用io.closed?方法可以检查是否关闭。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;tty.rb&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  <span class=\"keyword\">while</span> line = io.gets</span><br><span class=\"line\">    print line</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>File.read</strong>可以一次性读取文件的内容。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"title class_\">File</span>.read(<span class=\"string\">&quot;tty.rb&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"基本输入\"><a href=\"#基本输入\" class=\"headerlink\" title=\"基本输入\"></a>基本输入</h5><p>io.<strong>gets</strong>(rs)<br>io.<strong>each</strong>(rs)<br>io.<strong>each_line</strong>(rs)<br>io.<strong>readlines</strong>(rs)<br>从IO类的对象中读取一行数据，用参数<strong>rs</strong>的字符串分行，缺省模式下为换行符。</p>\n<p>使用**eof?**可以检查输入是否已经完毕。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;tty.rb&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> line = io.gets</span><br><span class=\"line\">  line.chomp!</span><br><span class=\"line\">  print line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p io.eof?     <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">io.close      <span class=\"comment\">#=&gt; close file</span></span><br><span class=\"line\">p io.closed?   <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>用<strong>readlines</strong>方法可以一次性读取所有数据，并返回将每行数据作为元素封装的数组.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;tty.rb&quot;</span>)</span><br><span class=\"line\">ary = io.readlines</span><br><span class=\"line\">io.close</span><br><span class=\"line\">ary.each <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">  line.chomp!</span><br><span class=\"line\">  print line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>lineno</strong><br>使用gets方法，each_line方法逐行读取文件时，io会自动记录读取的行数，可以通过<strong>io.lineno</strong>来获取当前行数。   </p>\n<p>io.<strong>each_char</strong><br>逐个字符读取io对象中的数据,并启动块。   </p>\n<p>io.<strong>each_byte</strong><br>逐个字节读取io对象中的数据，并启动块。    </p>\n<p>io.<strong>getc</strong><br>只读取io对象中的一个字符。<br>io.<strong>ungetc(ch)</strong><br>将参数ch指定的字符退回到io得缓冲流中   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.write(<span class=\"string\">&quot;Hello Ruby&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  p io.getc       <span class=\"comment\">#=&gt; H</span></span><br><span class=\"line\">  io.ungetc(<span class=\"string\">&#x27;H&#x27;</span>)</span><br><span class=\"line\">  p io.gets       <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">File</span>.delete(<span class=\"string\">&quot;hello.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>getbyte</strong>, io.<strong>ungetbyte</strong>的使用方法同上，不同之处在于此处是字节。    </p>\n<p>io.<strong>read</strong>(size)<br>读取参数size指定大小的数据，如果没指定，则一次性读取所有数据。    </p>\n<h5 id=\"输出操作\"><a href=\"#输出操作\" class=\"headerlink\" title=\"输出操作\"></a>输出操作</h5><p>io.<strong>puts</strong>(str0, str1, …)<br>指定多个字符串时，会在每个字符串后面添加换行符。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$stdout</span>.puts <span class=\"string\">&quot;hi&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;hey&quot;</span>\t\t\t<span class=\"comment\">#=&gt; hi\\nhello\\nhey\\n</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>putc</strong>(ch)<br>输出指定参数ch字符，如果参数为字符串，则输出首个字符    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$stdout</span>.putc(<span class=\"string\">&#x27;H&#x27;</span>)       <span class=\"comment\">#=&gt; H</span></span><br><span class=\"line\"><span class=\"variable\">$stdout</span>.putc(<span class=\"string\">&#x27;Hello&#x27;</span>)   <span class=\"comment\">#=&gt; H</span></span><br><span class=\"line\"><span class=\"variable\">$stdout</span>.putc(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>print</strong>(str0, str1, …)<br>输出参数指定的字符串，不会在每个字符串后面追加换行符    </p>\n<p>io.<strong>printf</strong>(fmt, arg0, arg1, …)<br>按照指定格式输出字符串。    </p>\n<p>io.<strong>write</strong>(str)<br>输出参数str指定的字符串，方法返回值为输出的字节数    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size = <span class=\"variable\">$stdout</span>.write(<span class=\"string\">&quot;Hello&quot;</span>)\t\t<span class=\"comment\">#=&gt; Hello</span></span><br><span class=\"line\">p size\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件指针\"><a href=\"#文件指针\" class=\"headerlink\" title=\"文件指针\"></a>文件指针</h5><p>用文件指针或者当前文件偏移量来表示IO对象指向文件的位置。    </p>\n<p>io.<strong>pos</strong><br>io.<strong>pos</strong>&#x3D;position<br>通过<strong>pos</strong>方法获取文件指针位置，改变文件指针使用**pos&#x3D;**方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.write(<span class=\"string\">&quot;Hello Ruby&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  p io.read(<span class=\"number\">5</span>)      <span class=\"comment\">#=&gt; Hello</span></span><br><span class=\"line\">  io.pos = <span class=\"number\">0</span></span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>seek</strong>(offset, whence)<br>offset为指定位置的整数，whence为指定offset如何移动， 以下为whence的值:<br>IO::SEEK_SET - 将文件指针移动到指定offset指定的位置<br>IO::SEEK_CUR - 将offset视为相对于当前位置的偏移位置来移动文件指针<br>IO::SEEK_END - 将offset视为相对于文件末尾的偏移位置  </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.write(<span class=\"string\">&quot;Hello Ruby&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  p io.read(<span class=\"number\">5</span>)      <span class=\"comment\">#=&gt; Hello</span></span><br><span class=\"line\">  io.seek(-<span class=\"number\">5</span>, <span class=\"variable constant_\">IO</span><span class=\"symbol\">:</span><span class=\"symbol\">:SEEK_CUR</span>)</span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\">  io.seek(<span class=\"number\">0</span>, <span class=\"variable constant_\">IO</span><span class=\"symbol\">:</span><span class=\"symbol\">:SEEK_SET</span>)</span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\">  io.seek(-<span class=\"number\">4</span>, <span class=\"variable constant_\">IO</span><span class=\"symbol\">:</span><span class=\"symbol\">:SEEK_END</span>)</span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Ruby</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>rewind</strong><br>将文件指针重置到文件开始处，结果同以下两个操作:    </p>\n<pre><code>io.pos = 0   \nio.seek(0, IO::SEEK_SET)\n</code></pre>\n<p>io.<strong>truncate</strong>(size)<br>按照参数size指定的大小截断文件。</p>\n<p>*注，新的IO对象默认为文本模式，可以通过io.<strong>binmode</strong>将其转为二进制模式*   </p>\n<h5 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h5><p>IO对象在输出数据时，结果并不一定会马上输出出来，程序会在内部开辟一个缓冲空间来缓存输出，当空间满的时候再输出来。但是标准错误输出不会使用缓冲，如果有错误信息，则立刻输出。所以标准错误输出一般用于输出警告、错误之类的信息，能够立刻输出数据    </p>\n<p>io.<strong>flush</strong><br>强制输出缓冲中的数据。</p>\n<p>io.<strong>sync</strong><br>io.<strong>sync</strong>&#x3D;state<br>通过io.sync &#x3D; true, 程序写入缓冲时flush方法会被自动调用。    </p>\n<h5 id=\"与命令行交互\"><a href=\"#与命令行交互\" class=\"headerlink\" title=\"与命令行交互\"></a>与命令行交互</h5><p>IO.<strong>popen</strong>(command, mode)<br>command为相关的命令    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pattern = <span class=\"title class_\">Regexp</span>.new(<span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">filename = <span class=\"variable constant_\">ARGV</span>[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> /.gz<span class=\"variable\">$/</span> =~ filename</span><br><span class=\"line\">  file = <span class=\"variable constant_\">IO</span>.popen(<span class=\"string\">&quot;gunzip -c <span class=\"subst\">#&#123;filename&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  file = <span class=\"title class_\">File</span>.open(filename)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">file.close</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**open**(&quot;|command&quot;, mode)   </span></span><br><span class=\"line\"><span class=\"string\">将带有管道符号的命令传递给open方法的效果与使用IO.popen方法是一样的</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> ruby</span><br><span class=\"line\">filename = <span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">open(<span class=\"string\">&quot;|gunzip -c <span class=\"subst\">#&#123;filename&#125;</span>&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">    print line</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h4 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h4><p>Ruby程序在启动后会预先分配3个<strong>IO</strong>对象:<br>标准输入 - 预定义常量(<strong>STDIN</strong>), 全局变量(<strong>$stdin</strong>)<br>标准输出 - 预定义常量(<strong>STDOUT</strong>), 全局变量(<strong>$stdout</strong>)<br>标准错误输出 - 预定义常量(<strong>STDERR</strong>), 全局变量(<strong>$stderr</strong>)</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$stdout</span>.print <span class=\"string\">&quot;output something from $stdout\\n&quot;</span></span><br><span class=\"line\"><span class=\"variable constant_\">STDERR</span>.print <span class=\"string\">&quot;output something from $stderr\\n&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>IO对象是否与控制台关联，我们可以通过**tty?**方法来判断。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"variable\">$stdin</span>.tty?</span><br><span class=\"line\">  print <span class=\"string\">&quot;stdin is a tty&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  print <span class=\"string\">&quot;stdin is not a tty&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>","more":"<h5 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h5><p>通过File.open方法或open方法打开文件并获取新的IO对象，</p>\n<pre><code>io = File.open(file, mode)\nio = open(file, mode)\n</code></pre>\n<p>mode为文件的读写方法，缺省情况下为只读模式(r).</p>\n<p>r  - 只读模式<br>r+ - 读写模式<br>w  - 只写模式，如果文件不存在则创建新文件，如果文件存在，则清空文件<br>w+ - 读写模式，其余同w<br>a  - 追加模式，文件不存在则创建新文件<br>a+ - 读取、追加模式，文件不存在则创建新文件    </p>\n<p>io.<strong>close</strong><br>使用<strong>close</strong>方法关闭已打开的文件。File.open方法使用块，则文件会在使用完毕后自动关闭，io变量会被作为块变量传递给块。并且使用io.closed?方法可以检查是否关闭。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;tty.rb&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  <span class=\"keyword\">while</span> line = io.gets</span><br><span class=\"line\">    print line</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用<strong>File.read</strong>可以一次性读取文件的内容。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"title class_\">File</span>.read(<span class=\"string\">&quot;tty.rb&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"基本输入\"><a href=\"#基本输入\" class=\"headerlink\" title=\"基本输入\"></a>基本输入</h5><p>io.<strong>gets</strong>(rs)<br>io.<strong>each</strong>(rs)<br>io.<strong>each_line</strong>(rs)<br>io.<strong>readlines</strong>(rs)<br>从IO类的对象中读取一行数据，用参数<strong>rs</strong>的字符串分行，缺省模式下为换行符。</p>\n<p>使用**eof?**可以检查输入是否已经完毕。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;tty.rb&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> line = io.gets</span><br><span class=\"line\">  line.chomp!</span><br><span class=\"line\">  print line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">p io.eof?     <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\">io.close      <span class=\"comment\">#=&gt; close file</span></span><br><span class=\"line\">p io.closed?   <span class=\"comment\">#=&gt; true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>用<strong>readlines</strong>方法可以一次性读取所有数据，并返回将每行数据作为元素封装的数组.</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">io = <span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;tty.rb&quot;</span>)</span><br><span class=\"line\">ary = io.readlines</span><br><span class=\"line\">io.close</span><br><span class=\"line\">ary.each <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">  line.chomp!</span><br><span class=\"line\">  print line</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>lineno</strong><br>使用gets方法，each_line方法逐行读取文件时，io会自动记录读取的行数，可以通过<strong>io.lineno</strong>来获取当前行数。   </p>\n<p>io.<strong>each_char</strong><br>逐个字符读取io对象中的数据,并启动块。   </p>\n<p>io.<strong>each_byte</strong><br>逐个字节读取io对象中的数据，并启动块。    </p>\n<p>io.<strong>getc</strong><br>只读取io对象中的一个字符。<br>io.<strong>ungetc(ch)</strong><br>将参数ch指定的字符退回到io得缓冲流中   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.write(<span class=\"string\">&quot;Hello Ruby&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  p io.getc       <span class=\"comment\">#=&gt; H</span></span><br><span class=\"line\">  io.ungetc(<span class=\"string\">&#x27;H&#x27;</span>)</span><br><span class=\"line\">  p io.gets       <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">File</span>.delete(<span class=\"string\">&quot;hello.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>getbyte</strong>, io.<strong>ungetbyte</strong>的使用方法同上，不同之处在于此处是字节。    </p>\n<p>io.<strong>read</strong>(size)<br>读取参数size指定大小的数据，如果没指定，则一次性读取所有数据。    </p>\n<h5 id=\"输出操作\"><a href=\"#输出操作\" class=\"headerlink\" title=\"输出操作\"></a>输出操作</h5><p>io.<strong>puts</strong>(str0, str1, …)<br>指定多个字符串时，会在每个字符串后面添加换行符。   </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$stdout</span>.puts <span class=\"string\">&quot;hi&quot;</span>, <span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;hey&quot;</span>\t\t\t<span class=\"comment\">#=&gt; hi\\nhello\\nhey\\n</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>putc</strong>(ch)<br>输出指定参数ch字符，如果参数为字符串，则输出首个字符    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$stdout</span>.putc(<span class=\"string\">&#x27;H&#x27;</span>)       <span class=\"comment\">#=&gt; H</span></span><br><span class=\"line\"><span class=\"variable\">$stdout</span>.putc(<span class=\"string\">&#x27;Hello&#x27;</span>)   <span class=\"comment\">#=&gt; H</span></span><br><span class=\"line\"><span class=\"variable\">$stdout</span>.putc(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>print</strong>(str0, str1, …)<br>输出参数指定的字符串，不会在每个字符串后面追加换行符    </p>\n<p>io.<strong>printf</strong>(fmt, arg0, arg1, …)<br>按照指定格式输出字符串。    </p>\n<p>io.<strong>write</strong>(str)<br>输出参数str指定的字符串，方法返回值为输出的字节数    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size = <span class=\"variable\">$stdout</span>.write(<span class=\"string\">&quot;Hello&quot;</span>)\t\t<span class=\"comment\">#=&gt; Hello</span></span><br><span class=\"line\">p size\t\t\t<span class=\"comment\">#=&gt; 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件指针\"><a href=\"#文件指针\" class=\"headerlink\" title=\"文件指针\"></a>文件指针</h5><p>用文件指针或者当前文件偏移量来表示IO对象指向文件的位置。    </p>\n<p>io.<strong>pos</strong><br>io.<strong>pos</strong>&#x3D;position<br>通过<strong>pos</strong>方法获取文件指针位置，改变文件指针使用**pos&#x3D;**方法。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.write(<span class=\"string\">&quot;Hello Ruby&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  p io.read(<span class=\"number\">5</span>)      <span class=\"comment\">#=&gt; Hello</span></span><br><span class=\"line\">  io.pos = <span class=\"number\">0</span></span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>seek</strong>(offset, whence)<br>offset为指定位置的整数，whence为指定offset如何移动， 以下为whence的值:<br>IO::SEEK_SET - 将文件指针移动到指定offset指定的位置<br>IO::SEEK_CUR - 将offset视为相对于当前位置的偏移位置来移动文件指针<br>IO::SEEK_END - 将offset视为相对于文件末尾的偏移位置  </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.write(<span class=\"string\">&quot;Hello Ruby&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"title class_\">File</span>.open(<span class=\"string\">&quot;hello.txt&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  p io.read(<span class=\"number\">5</span>)      <span class=\"comment\">#=&gt; Hello</span></span><br><span class=\"line\">  io.seek(-<span class=\"number\">5</span>, <span class=\"variable constant_\">IO</span><span class=\"symbol\">:</span><span class=\"symbol\">:SEEK_CUR</span>)</span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\">  io.seek(<span class=\"number\">0</span>, <span class=\"variable constant_\">IO</span><span class=\"symbol\">:</span><span class=\"symbol\">:SEEK_SET</span>)</span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Hello Ruby</span></span><br><span class=\"line\">  io.seek(-<span class=\"number\">4</span>, <span class=\"variable constant_\">IO</span><span class=\"symbol\">:</span><span class=\"symbol\">:SEEK_END</span>)</span><br><span class=\"line\">  p io.gets         <span class=\"comment\">#=&gt; Ruby</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>io.<strong>rewind</strong><br>将文件指针重置到文件开始处，结果同以下两个操作:    </p>\n<pre><code>io.pos = 0   \nio.seek(0, IO::SEEK_SET)\n</code></pre>\n<p>io.<strong>truncate</strong>(size)<br>按照参数size指定的大小截断文件。</p>\n<p>*注，新的IO对象默认为文本模式，可以通过io.<strong>binmode</strong>将其转为二进制模式*   </p>\n<h5 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h5><p>IO对象在输出数据时，结果并不一定会马上输出出来，程序会在内部开辟一个缓冲空间来缓存输出，当空间满的时候再输出来。但是标准错误输出不会使用缓冲，如果有错误信息，则立刻输出。所以标准错误输出一般用于输出警告、错误之类的信息，能够立刻输出数据    </p>\n<p>io.<strong>flush</strong><br>强制输出缓冲中的数据。</p>\n<p>io.<strong>sync</strong><br>io.<strong>sync</strong>&#x3D;state<br>通过io.sync &#x3D; true, 程序写入缓冲时flush方法会被自动调用。    </p>\n<h5 id=\"与命令行交互\"><a href=\"#与命令行交互\" class=\"headerlink\" title=\"与命令行交互\"></a>与命令行交互</h5><p>IO.<strong>popen</strong>(command, mode)<br>command为相关的命令    </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pattern = <span class=\"title class_\">Regexp</span>.new(<span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">filename = <span class=\"variable constant_\">ARGV</span>[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> /.gz<span class=\"variable\">$/</span> =~ filename</span><br><span class=\"line\">  file = <span class=\"variable constant_\">IO</span>.popen(<span class=\"string\">&quot;gunzip -c <span class=\"subst\">#&#123;filename&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  file = <span class=\"title class_\">File</span>.open(filename)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">file.close</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**open**(&quot;|command&quot;, mode)   </span></span><br><span class=\"line\"><span class=\"string\">将带有管道符号的命令传递给open方法的效果与使用IO.popen方法是一样的</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> ruby</span><br><span class=\"line\">filename = <span class=\"variable constant_\">ARGV</span>[<span class=\"number\">0</span>]</span><br><span class=\"line\">open(<span class=\"string\">&quot;|gunzip -c <span class=\"subst\">#&#123;filename&#125;</span>&quot;</span>) <span class=\"keyword\">do</span> |<span class=\"params\">io</span>|</span><br><span class=\"line\">  io.each_line <span class=\"keyword\">do</span> |<span class=\"params\">line</span>|</span><br><span class=\"line\">    print line</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>"},{"title":"双指针算法","date":"2016-01-25T01:09:24.000Z","comments":1,"_content":"\n双指针算法（Two Pointer Algorithm）是一种常见的算法技巧，通常用于数组、链表等数据结构中解决一些问题。双指针算法的核心思想是使用两个指针在不同的位置上移动，以达到解决问题的目的。这两个指针可以朝着相同的方向移动，也可以朝着相反的方向移动，视问题而定。\n\n双指针算法的常见应用场景和实现方法：\n\n**对撞指针（Two Sum、Three Sum）：** 在有序数组中查找满足特定条件的元素对或元素组合。使用两个指针分别从数组的两端开始，向中间逼近，根据元素之间的大小关系，调整指针的位置。\n\n**快慢指针（环形链表判断、链表中间节点）：** 在链表中判断是否存在环或找到链表的中间节点。使用两个指针，一个快指针每次移动两步，一个慢指针每次移动一步，根据指针的移动速度判断链表的性质。\n<!-- more -->\n**滑动窗口（子数组问题、字符串问题）：** 用于解决一些窗口内的问题，例如找到最短子数组、找到最长连续子数组等。使用两个指针表示窗口的左右边界，移动窗口进行计算。\n\n**夹逼法（容器装水问题、三数最接近问题）：** 在一维数组中寻找满足特定条件的元素对。使用两个指针从两端开始，逐渐向中间夹逼，根据元素之间的大小关系，调整指针的位置。\n\n**多指针法（四数之和问题、删除排序数组中的重复项）：** 在一维或二维数组中寻找满足特定条件的元素组合。使用多个指针在数组中移动，根据问题需要，进行相应的指针调整。\n\n双指针算法的优势在于它可以在O(N)的时间复杂度内解决一些复杂的问题，而不需要使用额外的空间。它在数组和链表等数据结构上都有广泛的应用，常用于解决数组遍历、查找、排序和操作等问题。这种算法可以帮助简化问题的解决过程，提高代码效率。","source":"_posts/2016-01-25-shuang-zhi-zhen-suan-fa.markdown","raw":"---\n\ntitle: \"双指针算法\"\ndate: 2016-01-25 09:09:24 +0800\ncomments: true\ncategories: 算法\ntags: [算法,数据结构]\n---\n\n双指针算法（Two Pointer Algorithm）是一种常见的算法技巧，通常用于数组、链表等数据结构中解决一些问题。双指针算法的核心思想是使用两个指针在不同的位置上移动，以达到解决问题的目的。这两个指针可以朝着相同的方向移动，也可以朝着相反的方向移动，视问题而定。\n\n双指针算法的常见应用场景和实现方法：\n\n**对撞指针（Two Sum、Three Sum）：** 在有序数组中查找满足特定条件的元素对或元素组合。使用两个指针分别从数组的两端开始，向中间逼近，根据元素之间的大小关系，调整指针的位置。\n\n**快慢指针（环形链表判断、链表中间节点）：** 在链表中判断是否存在环或找到链表的中间节点。使用两个指针，一个快指针每次移动两步，一个慢指针每次移动一步，根据指针的移动速度判断链表的性质。\n<!-- more -->\n**滑动窗口（子数组问题、字符串问题）：** 用于解决一些窗口内的问题，例如找到最短子数组、找到最长连续子数组等。使用两个指针表示窗口的左右边界，移动窗口进行计算。\n\n**夹逼法（容器装水问题、三数最接近问题）：** 在一维数组中寻找满足特定条件的元素对。使用两个指针从两端开始，逐渐向中间夹逼，根据元素之间的大小关系，调整指针的位置。\n\n**多指针法（四数之和问题、删除排序数组中的重复项）：** 在一维或二维数组中寻找满足特定条件的元素组合。使用多个指针在数组中移动，根据问题需要，进行相应的指针调整。\n\n双指针算法的优势在于它可以在O(N)的时间复杂度内解决一些复杂的问题，而不需要使用额外的空间。它在数组和链表等数据结构上都有广泛的应用，常用于解决数组遍历、查找、排序和操作等问题。这种算法可以帮助简化问题的解决过程，提高代码效率。","slug":"2016-01-25-shuang-zhi-zhen-suan-fa","published":1,"updated":"2023-09-02T17:32:36.845Z","_id":"clm27g4p5004wazv5dpoo24j9","layout":"post","photos":[],"link":"","content":"<p>双指针算法（Two Pointer Algorithm）是一种常见的算法技巧，通常用于数组、链表等数据结构中解决一些问题。双指针算法的核心思想是使用两个指针在不同的位置上移动，以达到解决问题的目的。这两个指针可以朝着相同的方向移动，也可以朝着相反的方向移动，视问题而定。</p>\n<p>双指针算法的常见应用场景和实现方法：</p>\n<p><strong>对撞指针（Two Sum、Three Sum）：</strong> 在有序数组中查找满足特定条件的元素对或元素组合。使用两个指针分别从数组的两端开始，向中间逼近，根据元素之间的大小关系，调整指针的位置。</p>\n<p><strong>快慢指针（环形链表判断、链表中间节点）：</strong> 在链表中判断是否存在环或找到链表的中间节点。使用两个指针，一个快指针每次移动两步，一个慢指针每次移动一步，根据指针的移动速度判断链表的性质。</p>\n<span id=\"more\"></span>\n<p><strong>滑动窗口（子数组问题、字符串问题）：</strong> 用于解决一些窗口内的问题，例如找到最短子数组、找到最长连续子数组等。使用两个指针表示窗口的左右边界，移动窗口进行计算。</p>\n<p><strong>夹逼法（容器装水问题、三数最接近问题）：</strong> 在一维数组中寻找满足特定条件的元素对。使用两个指针从两端开始，逐渐向中间夹逼，根据元素之间的大小关系，调整指针的位置。</p>\n<p><strong>多指针法（四数之和问题、删除排序数组中的重复项）：</strong> 在一维或二维数组中寻找满足特定条件的元素组合。使用多个指针在数组中移动，根据问题需要，进行相应的指针调整。</p>\n<p>双指针算法的优势在于它可以在O(N)的时间复杂度内解决一些复杂的问题，而不需要使用额外的空间。它在数组和链表等数据结构上都有广泛的应用，常用于解决数组遍历、查找、排序和操作等问题。这种算法可以帮助简化问题的解决过程，提高代码效率。</p>\n","site":{"data":{}},"excerpt":"<p>双指针算法（Two Pointer Algorithm）是一种常见的算法技巧，通常用于数组、链表等数据结构中解决一些问题。双指针算法的核心思想是使用两个指针在不同的位置上移动，以达到解决问题的目的。这两个指针可以朝着相同的方向移动，也可以朝着相反的方向移动，视问题而定。</p>\n<p>双指针算法的常见应用场景和实现方法：</p>\n<p><strong>对撞指针（Two Sum、Three Sum）：</strong> 在有序数组中查找满足特定条件的元素对或元素组合。使用两个指针分别从数组的两端开始，向中间逼近，根据元素之间的大小关系，调整指针的位置。</p>\n<p><strong>快慢指针（环形链表判断、链表中间节点）：</strong> 在链表中判断是否存在环或找到链表的中间节点。使用两个指针，一个快指针每次移动两步，一个慢指针每次移动一步，根据指针的移动速度判断链表的性质。</p>","more":"<p><strong>滑动窗口（子数组问题、字符串问题）：</strong> 用于解决一些窗口内的问题，例如找到最短子数组、找到最长连续子数组等。使用两个指针表示窗口的左右边界，移动窗口进行计算。</p>\n<p><strong>夹逼法（容器装水问题、三数最接近问题）：</strong> 在一维数组中寻找满足特定条件的元素对。使用两个指针从两端开始，逐渐向中间夹逼，根据元素之间的大小关系，调整指针的位置。</p>\n<p><strong>多指针法（四数之和问题、删除排序数组中的重复项）：</strong> 在一维或二维数组中寻找满足特定条件的元素组合。使用多个指针在数组中移动，根据问题需要，进行相应的指针调整。</p>\n<p>双指针算法的优势在于它可以在O(N)的时间复杂度内解决一些复杂的问题，而不需要使用额外的空间。它在数组和链表等数据结构上都有广泛的应用，常用于解决数组遍历、查找、排序和操作等问题。这种算法可以帮助简化问题的解决过程，提高代码效率。</p>"},{"title":"双指针算法之两数之和","date":"2016-02-05T01:51:39.000Z","comments":1,"top":true,"_content":"\n在上一篇中，我们讲到了双指针算法的几种使用场景，这里具体举例，以经典的两数之和为例。\n\n给定一个有序数字的数组和一个目标值，在有序数组中找到两个数字之和等于该目标值，返回包含两个数字的数组，如果没有找到返回包含两个-1值的数组。\n\n```\n找到的情况\n输入： \n有序数组: [2, 4, 5, 6, 12];  目标值: 10\n输出：\n[4, 6]\n```\n\n```\n找不到的情况\n输入： \n有序数组: [2, 4, 5, 6, 12];  目标值: 3\n输出：\n[-1, -1]\n```\n\n<!-- more -->\n直接代码走起，下面以Java代码为例\n\n``` Java\npublic class Main {\n    public static int[] findNumbers(int[] numbers, int target) {\n        int pLeft = 0;  // 左指针初始位置\n        int pRight = numbers.length - 1; // 右指针初始位置\n\n        while (pLeft < pRight) {\n            int sum = numbers[pLeft] + numbers[pRight];\n            if (sum == target) {\n                return new int[]{numbers[pLeft], numbers[pRight]}; // 返回匹配的元素\n            } else if (sum < target) {\n                pLeft++; // 和小于目标值，左指针右移\n            } else {\n                pRight--; // 和大于目标值，右指针左移\n            }\n        }\n\n        return new int[]{-1, -1};\n    }\n\n    public static void main(String[] args) {\n        int[] results = findNumbers(new int[]{2, 4, 5, 6, 12}, 10);\n        System.out.printf(\"[%d, %d]%n\", results[0], results[1]); // 输出 [4, 6]\n\n        results = findNumbers(new int[]{2, 4, 5, 6, 12}, 3);\n        System.out.printf(\"[%d, %d]%n\", results[0], results[1]); // 输出 [-1, -1]\n    }\n}\n```\n\n在上述代码中，我们使用了两个指针 pLeft 和 pRight 分别指向有序数组的两端。然后，我们计算 numbers[pLeft] 和 numbers[pRight] 的和，并与目标值进行比较。根据和与目标值的大小关系，我们移动左指针或右指针，直到找到符合条件的元素对，或者指针重合没有找到。\n","source":"_posts/2016-02-05-shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he.markdown","raw":"---\n\ntitle: \"双指针算法之两数之和\"\ndate: 2016-02-05 09:51:39 +0800\ncomments: true\ncategories: 算法\ntags: [算法,数据结构]\ntop: true\n---\n\n在上一篇中，我们讲到了双指针算法的几种使用场景，这里具体举例，以经典的两数之和为例。\n\n给定一个有序数字的数组和一个目标值，在有序数组中找到两个数字之和等于该目标值，返回包含两个数字的数组，如果没有找到返回包含两个-1值的数组。\n\n```\n找到的情况\n输入： \n有序数组: [2, 4, 5, 6, 12];  目标值: 10\n输出：\n[4, 6]\n```\n\n```\n找不到的情况\n输入： \n有序数组: [2, 4, 5, 6, 12];  目标值: 3\n输出：\n[-1, -1]\n```\n\n<!-- more -->\n直接代码走起，下面以Java代码为例\n\n``` Java\npublic class Main {\n    public static int[] findNumbers(int[] numbers, int target) {\n        int pLeft = 0;  // 左指针初始位置\n        int pRight = numbers.length - 1; // 右指针初始位置\n\n        while (pLeft < pRight) {\n            int sum = numbers[pLeft] + numbers[pRight];\n            if (sum == target) {\n                return new int[]{numbers[pLeft], numbers[pRight]}; // 返回匹配的元素\n            } else if (sum < target) {\n                pLeft++; // 和小于目标值，左指针右移\n            } else {\n                pRight--; // 和大于目标值，右指针左移\n            }\n        }\n\n        return new int[]{-1, -1};\n    }\n\n    public static void main(String[] args) {\n        int[] results = findNumbers(new int[]{2, 4, 5, 6, 12}, 10);\n        System.out.printf(\"[%d, %d]%n\", results[0], results[1]); // 输出 [4, 6]\n\n        results = findNumbers(new int[]{2, 4, 5, 6, 12}, 3);\n        System.out.printf(\"[%d, %d]%n\", results[0], results[1]); // 输出 [-1, -1]\n    }\n}\n```\n\n在上述代码中，我们使用了两个指针 pLeft 和 pRight 分别指向有序数组的两端。然后，我们计算 numbers[pLeft] 和 numbers[pRight] 的和，并与目标值进行比较。根据和与目标值的大小关系，我们移动左指针或右指针，直到找到符合条件的元素对，或者指针重合没有找到。\n","slug":"2016-02-05-shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he","published":1,"updated":"2023-09-03T00:44:48.878Z","_id":"clm27g4p6004xazv5euyh1poj","layout":"post","photos":[],"link":"","content":"<p>在上一篇中，我们讲到了双指针算法的几种使用场景，这里具体举例，以经典的两数之和为例。</p>\n<p>给定一个有序数字的数组和一个目标值，在有序数组中找到两个数字之和等于该目标值，返回包含两个数字的数组，如果没有找到返回包含两个-1值的数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到的情况</span><br><span class=\"line\">输入： </span><br><span class=\"line\">有序数组: [2, 4, 5, 6, 12];  目标值: 10</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[4, 6]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找不到的情况</span><br><span class=\"line\">输入： </span><br><span class=\"line\">有序数组: [2, 4, 5, 6, 12];  目标值: 3</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[-1, -1]</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n<p>直接代码走起，下面以Java代码为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] findNumbers(<span class=\"type\">int</span>[] numbers, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pLeft</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 左指针初始位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pRight</span> <span class=\"operator\">=</span> numbers.length - <span class=\"number\">1</span>; <span class=\"comment\">// 右指针初始位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pLeft &lt; pRight) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numbers[pLeft] + numbers[pRight];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;numbers[pLeft], numbers[pRight]&#125;; <span class=\"comment\">// 返回匹配的元素</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">                pLeft++; <span class=\"comment\">// 和小于目标值，左指针右移</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pRight--; <span class=\"comment\">// 和大于目标值，右指针左移</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] results = findNumbers(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%d, %d]%n&quot;</span>, results[<span class=\"number\">0</span>], results[<span class=\"number\">1</span>]); <span class=\"comment\">// 输出 [4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        results = findNumbers(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>&#125;, <span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%d, %d]%n&quot;</span>, results[<span class=\"number\">0</span>], results[<span class=\"number\">1</span>]); <span class=\"comment\">// 输出 [-1, -1]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，我们使用了两个指针 pLeft 和 pRight 分别指向有序数组的两端。然后，我们计算 numbers[pLeft] 和 numbers[pRight] 的和，并与目标值进行比较。根据和与目标值的大小关系，我们移动左指针或右指针，直到找到符合条件的元素对，或者指针重合没有找到。</p>\n","site":{"data":{}},"excerpt":"<p>在上一篇中，我们讲到了双指针算法的几种使用场景，这里具体举例，以经典的两数之和为例。</p>\n<p>给定一个有序数字的数组和一个目标值，在有序数组中找到两个数字之和等于该目标值，返回包含两个数字的数组，如果没有找到返回包含两个-1值的数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找到的情况</span><br><span class=\"line\">输入： </span><br><span class=\"line\">有序数组: [2, 4, 5, 6, 12];  目标值: 10</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[4, 6]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找不到的情况</span><br><span class=\"line\">输入： </span><br><span class=\"line\">有序数组: [2, 4, 5, 6, 12];  目标值: 3</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[-1, -1]</span><br></pre></td></tr></table></figure>","more":"<p>直接代码走起，下面以Java代码为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] findNumbers(<span class=\"type\">int</span>[] numbers, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pLeft</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 左指针初始位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pRight</span> <span class=\"operator\">=</span> numbers.length - <span class=\"number\">1</span>; <span class=\"comment\">// 右指针初始位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (pLeft &lt; pRight) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numbers[pLeft] + numbers[pRight];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;numbers[pLeft], numbers[pRight]&#125;; <span class=\"comment\">// 返回匹配的元素</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">                pLeft++; <span class=\"comment\">// 和小于目标值，左指针右移</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pRight--; <span class=\"comment\">// 和大于目标值，右指针左移</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;-<span class=\"number\">1</span>, -<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] results = findNumbers(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>&#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%d, %d]%n&quot;</span>, results[<span class=\"number\">0</span>], results[<span class=\"number\">1</span>]); <span class=\"comment\">// 输出 [4, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        results = findNumbers(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>&#125;, <span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;[%d, %d]%n&quot;</span>, results[<span class=\"number\">0</span>], results[<span class=\"number\">1</span>]); <span class=\"comment\">// 输出 [-1, -1]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，我们使用了两个指针 pLeft 和 pRight 分别指向有序数组的两端。然后，我们计算 numbers[pLeft] 和 numbers[pRight] 的和，并与目标值进行比较。根据和与目标值的大小关系，我们移动左指针或右指针，直到找到符合条件的元素对，或者指针重合没有找到。</p>"},{"title":"最短子数组之和","date":"2016-03-01T09:18:50.000Z","comments":1,"top":true,"_content":"\n一个常见的最短子数组算法题是 \"Minimum Size Subarray Sum\"。在这个问题中，给定一个正整数数组和一个目标值，要找到数组中一个连续子数组，使得子数组的元素和大于等于目标值，并且子数组的长度最小。\n\n例如\n```\n输入： \n数组: [5, 3, 4, 2, 8, 5];  目标值: 10\n输出：\n[2, 8]\n```\n```\n输入： \n数组: [5, 3, 4, 2, 8, 5];  目标值: 28\n输出：\n[]\n```\n<!-- more -->\n```\n输入： \n数组: [5, 3, 4, 2, 8, 5];  目标值: 4\n输出：\n[5]\n```\n\n这个问题可以使用双指针来解决窗口的滑动问题，核心代码如下：\n```Java\npublic static int[] minSizeSubArray(int[] numbers, int target) {\n    int p1 = 0, p2 = 0; //定义两个指针\n    int minLeft = 0; // 最小子数组的左边界\n    int minLen = Integer.MAX_VALUE; // 最小子数组的长度\n    int sum = 0;    //子数组元素和\n\n    for (p2 = 0; p2 < numbers.length; p2++) {\n        sum += numbers[p2]; // 将右指针的元素加入子数组\n        while (sum >= target) { // 如果子数组的和大于等于目标值\n            int curLen = p2 - p1 + 1; // 获取当前子数组长度\n            if (minLen > curLen) { // 如果子数组长度比上次还更小\n                minLen = curLen; // 更新子数组最小长度\n                minLeft = p1;   // 更新子数组的左边界\n            }\n            sum -= numbers[p1]; // 将左指针的元素从子数组中移除\n            p1++;   //移动左指针，缩小子数组\n        }\n    }\n\n    if (minLen == Integer.MAX_VALUE) {\n        return new int[0];  // 没有找到匹配的子数组\n    } else {\n        //根据子数组的左边界以及长度，返回子数组\n        int[] result = new int[minLen];\n        for (int i = 0; i < minLen; i++) {\n            result[i] = numbers[i + minLeft];\n        }\n        return result;\n    }\n}\n```\n\n在上述代码中，我们使用了两个指针 p1 和 p2，分别表示子数组的左右边界。我们在数组上使用滑动窗口来寻找满足条件的最短子数组。当子数组的和大于等于目标值时，我们移动左指针，并更新最小长度。如果发现有更小的数组长度，则更新最小数组长度以及数组的左边界值，当子数组的和不足以满足条件时，我们移动右指针，并继续扩展子数组。\n\n测试结果如下\n```Java\npublic static void main(String[] args) {\n    int[] numbers = {5, 3, 4, 2, 8, 5};\n    printArray(minSizeSubArray(numbers, 10)); // [2, 8]\n    printArray(minSizeSubArray(numbers, 28)); // []\n    printArray(minSizeSubArray(numbers, 4)); // [5]\n}\n\nprivate static void printArray(int[] numbers) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i =0; i < numbers.length; i++) {\n        sb.append(numbers[i]).append(i == numbers.length - 1 ? \"\" : \", \");\n    }\n    sb.append(\"]\");\n\n    System.out.println(sb.toString());\n}\n```\n\n","source":"_posts/2016-03-01-minimum-size-subarray-sum.markdown","raw":"---\n\ntitle: \"最短子数组之和\"\ndate: 2016-03-01 17:18:50 +0800\ncomments: true\ncategories: 算法\ntags: [算法,数据结构]\ntop: true\n---\n\n一个常见的最短子数组算法题是 \"Minimum Size Subarray Sum\"。在这个问题中，给定一个正整数数组和一个目标值，要找到数组中一个连续子数组，使得子数组的元素和大于等于目标值，并且子数组的长度最小。\n\n例如\n```\n输入： \n数组: [5, 3, 4, 2, 8, 5];  目标值: 10\n输出：\n[2, 8]\n```\n```\n输入： \n数组: [5, 3, 4, 2, 8, 5];  目标值: 28\n输出：\n[]\n```\n<!-- more -->\n```\n输入： \n数组: [5, 3, 4, 2, 8, 5];  目标值: 4\n输出：\n[5]\n```\n\n这个问题可以使用双指针来解决窗口的滑动问题，核心代码如下：\n```Java\npublic static int[] minSizeSubArray(int[] numbers, int target) {\n    int p1 = 0, p2 = 0; //定义两个指针\n    int minLeft = 0; // 最小子数组的左边界\n    int minLen = Integer.MAX_VALUE; // 最小子数组的长度\n    int sum = 0;    //子数组元素和\n\n    for (p2 = 0; p2 < numbers.length; p2++) {\n        sum += numbers[p2]; // 将右指针的元素加入子数组\n        while (sum >= target) { // 如果子数组的和大于等于目标值\n            int curLen = p2 - p1 + 1; // 获取当前子数组长度\n            if (minLen > curLen) { // 如果子数组长度比上次还更小\n                minLen = curLen; // 更新子数组最小长度\n                minLeft = p1;   // 更新子数组的左边界\n            }\n            sum -= numbers[p1]; // 将左指针的元素从子数组中移除\n            p1++;   //移动左指针，缩小子数组\n        }\n    }\n\n    if (minLen == Integer.MAX_VALUE) {\n        return new int[0];  // 没有找到匹配的子数组\n    } else {\n        //根据子数组的左边界以及长度，返回子数组\n        int[] result = new int[minLen];\n        for (int i = 0; i < minLen; i++) {\n            result[i] = numbers[i + minLeft];\n        }\n        return result;\n    }\n}\n```\n\n在上述代码中，我们使用了两个指针 p1 和 p2，分别表示子数组的左右边界。我们在数组上使用滑动窗口来寻找满足条件的最短子数组。当子数组的和大于等于目标值时，我们移动左指针，并更新最小长度。如果发现有更小的数组长度，则更新最小数组长度以及数组的左边界值，当子数组的和不足以满足条件时，我们移动右指针，并继续扩展子数组。\n\n测试结果如下\n```Java\npublic static void main(String[] args) {\n    int[] numbers = {5, 3, 4, 2, 8, 5};\n    printArray(minSizeSubArray(numbers, 10)); // [2, 8]\n    printArray(minSizeSubArray(numbers, 28)); // []\n    printArray(minSizeSubArray(numbers, 4)); // [5]\n}\n\nprivate static void printArray(int[] numbers) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for(int i =0; i < numbers.length; i++) {\n        sb.append(numbers[i]).append(i == numbers.length - 1 ? \"\" : \", \");\n    }\n    sb.append(\"]\");\n\n    System.out.println(sb.toString());\n}\n```\n\n","slug":"2016-03-01-minimum-size-subarray-sum","published":1,"updated":"2023-09-03T00:43:18.662Z","_id":"clm27g4p60050azv57qyg3zjm","layout":"post","photos":[],"link":"","content":"<p>一个常见的最短子数组算法题是 “Minimum Size Subarray Sum”。在这个问题中，给定一个正整数数组和一个目标值，要找到数组中一个连续子数组，使得子数组的元素和大于等于目标值，并且子数组的长度最小。</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： </span><br><span class=\"line\">数组: [5, 3, 4, 2, 8, 5];  目标值: 10</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[2, 8]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： </span><br><span class=\"line\">数组: [5, 3, 4, 2, 8, 5];  目标值: 28</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： </span><br><span class=\"line\">数组: [5, 3, 4, 2, 8, 5];  目标值: 4</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[5]</span><br></pre></td></tr></table></figure>\n\n<p>这个问题可以使用双指针来解决窗口的滑动问题，核心代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] minSizeSubArray(<span class=\"type\">int</span>[] numbers, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, p2 = <span class=\"number\">0</span>; <span class=\"comment\">//定义两个指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">minLeft</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 最小子数组的左边界</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">minLen</span> <span class=\"operator\">=</span> Integer.MAX_VALUE; <span class=\"comment\">// 最小子数组的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;    <span class=\"comment\">//子数组元素和</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p2 = <span class=\"number\">0</span>; p2 &lt; numbers.length; p2++) &#123;</span><br><span class=\"line\">        sum += numbers[p2]; <span class=\"comment\">// 将右指针的元素加入子数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sum &gt;= target) &#123; <span class=\"comment\">// 如果子数组的和大于等于目标值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">curLen</span> <span class=\"operator\">=</span> p2 - p1 + <span class=\"number\">1</span>; <span class=\"comment\">// 获取当前子数组长度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minLen &gt; curLen) &#123; <span class=\"comment\">// 如果子数组长度比上次还更小</span></span><br><span class=\"line\">                minLen = curLen; <span class=\"comment\">// 更新子数组最小长度</span></span><br><span class=\"line\">                minLeft = p1;   <span class=\"comment\">// 更新子数组的左边界</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum -= numbers[p1]; <span class=\"comment\">// 将左指针的元素从子数组中移除</span></span><br><span class=\"line\">            p1++;   <span class=\"comment\">//移动左指针，缩小子数组</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minLen == Integer.MAX_VALUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];  <span class=\"comment\">// 没有找到匹配的子数组</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据子数组的左边界以及长度，返回子数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[minLen];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; minLen; i++) &#123;</span><br><span class=\"line\">            result[i] = numbers[i + minLeft];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，我们使用了两个指针 p1 和 p2，分别表示子数组的左右边界。我们在数组上使用滑动窗口来寻找满足条件的最短子数组。当子数组的和大于等于目标值时，我们移动左指针，并更新最小长度。如果发现有更小的数组长度，则更新最小数组长度以及数组的左边界值，当子数组的和不足以满足条件时，我们移动右指针，并继续扩展子数组。</p>\n<p>测试结果如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] numbers = &#123;<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    printArray(minSizeSubArray(numbers, <span class=\"number\">10</span>)); <span class=\"comment\">// [2, 8]</span></span><br><span class=\"line\">    printArray(minSizeSubArray(numbers, <span class=\"number\">28</span>)); <span class=\"comment\">// []</span></span><br><span class=\"line\">    printArray(minSizeSubArray(numbers, <span class=\"number\">4</span>)); <span class=\"comment\">// [5]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] numbers)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    sb.append(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">        sb.append(numbers[i]).append(i == numbers.length - <span class=\"number\">1</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sb.append(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(sb.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>一个常见的最短子数组算法题是 “Minimum Size Subarray Sum”。在这个问题中，给定一个正整数数组和一个目标值，要找到数组中一个连续子数组，使得子数组的元素和大于等于目标值，并且子数组的长度最小。</p>\n<p>例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： </span><br><span class=\"line\">数组: [5, 3, 4, 2, 8, 5];  目标值: 10</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[2, 8]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： </span><br><span class=\"line\">数组: [5, 3, 4, 2, 8, 5];  目标值: 28</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： </span><br><span class=\"line\">数组: [5, 3, 4, 2, 8, 5];  目标值: 4</span><br><span class=\"line\">输出：</span><br><span class=\"line\">[5]</span><br></pre></td></tr></table></figure>\n\n<p>这个问题可以使用双指针来解决窗口的滑动问题，核心代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] minSizeSubArray(<span class=\"type\">int</span>[] numbers, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, p2 = <span class=\"number\">0</span>; <span class=\"comment\">//定义两个指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">minLeft</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 最小子数组的左边界</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">minLen</span> <span class=\"operator\">=</span> Integer.MAX_VALUE; <span class=\"comment\">// 最小子数组的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;    <span class=\"comment\">//子数组元素和</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p2 = <span class=\"number\">0</span>; p2 &lt; numbers.length; p2++) &#123;</span><br><span class=\"line\">        sum += numbers[p2]; <span class=\"comment\">// 将右指针的元素加入子数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sum &gt;= target) &#123; <span class=\"comment\">// 如果子数组的和大于等于目标值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">curLen</span> <span class=\"operator\">=</span> p2 - p1 + <span class=\"number\">1</span>; <span class=\"comment\">// 获取当前子数组长度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minLen &gt; curLen) &#123; <span class=\"comment\">// 如果子数组长度比上次还更小</span></span><br><span class=\"line\">                minLen = curLen; <span class=\"comment\">// 更新子数组最小长度</span></span><br><span class=\"line\">                minLeft = p1;   <span class=\"comment\">// 更新子数组的左边界</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum -= numbers[p1]; <span class=\"comment\">// 将左指针的元素从子数组中移除</span></span><br><span class=\"line\">            p1++;   <span class=\"comment\">//移动左指针，缩小子数组</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minLen == Integer.MAX_VALUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];  <span class=\"comment\">// 没有找到匹配的子数组</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据子数组的左边界以及长度，返回子数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[minLen];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; minLen; i++) &#123;</span><br><span class=\"line\">            result[i] = numbers[i + minLeft];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，我们使用了两个指针 p1 和 p2，分别表示子数组的左右边界。我们在数组上使用滑动窗口来寻找满足条件的最短子数组。当子数组的和大于等于目标值时，我们移动左指针，并更新最小长度。如果发现有更小的数组长度，则更新最小数组长度以及数组的左边界值，当子数组的和不足以满足条件时，我们移动右指针，并继续扩展子数组。</p>\n<p>测试结果如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] numbers = &#123;<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    printArray(minSizeSubArray(numbers, <span class=\"number\">10</span>)); <span class=\"comment\">// [2, 8]</span></span><br><span class=\"line\">    printArray(minSizeSubArray(numbers, <span class=\"number\">28</span>)); <span class=\"comment\">// []</span></span><br><span class=\"line\">    printArray(minSizeSubArray(numbers, <span class=\"number\">4</span>)); <span class=\"comment\">// [5]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] numbers)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    sb.append(<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">        sb.append(numbers[i]).append(i == numbers.length - <span class=\"number\">1</span> ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sb.append(<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(sb.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"一个免费高质量的图片分享平台","date":"2017-02-23T10:02:19.000Z","comments":1,"top":true,"_content":"\n很多时候在写文章或者制作PPT时需要用到一些图片资源，最近刚好发现了一个实用的高分辨率的免费资源平台Unspash, 跟大家分享一下。\n![](/assets/images/ziyuan/laptop-1.png)\n[Unsplash.com](https://unsplash.com \"免费高质量的图片分享平台\") 是一个知名的免费高质量图片分享平台，提供各种类型的高分辨率摄影图片供用户免费下载和使用。这些图片可以用于个人、商业、创意和学术项目，包括网站、博客、社交媒体、演示文稿等。\n\n<!-- more -->\n这个平台的特点包括：\n\n**高质量图片：** Unsplash 上的图片质量往往很高，包括风景、人物、食物、建筑等多种主题。这些图片通常由专业摄影师拍摄，因此在设计和内容创作中具有很大的价值。\n![](/assets/images/ziyuan/fengjing-1.png)\n\n**免费使用：** Unsplash 的图片都是免费提供的，无需付费或订阅。用户可以自由下载、编辑和使用这些图片，而不需要担心版权问题。\n![](/assets/images/ziyuan/coding-1.png)\n\n**简单的许可：** Unsplash 使用的是创作共用许可（Creative Commons Zero License），这意味着用户可以自由使用这些图片，甚至可以用于商业目的，无需给予作者署名。\n![](/assets/images/ziyuan/license-1.png)\n\n**搜索和浏览功能：** Unsplash 网站提供搜索功能和浏览不同主题的图片集合，帮助用户快速找到符合自己需求的图片。\n![](/assets/images/ziyuan/search-1.png)\n\n**社区和创作者：** Unsplash 构建了一个活跃的摄影师社区，用户可以查看摄影师的个人主页，了解他们的作品，并选择关注自己喜欢的创作者。\n![](/assets/images/ziyuan/community-1.png)\n\n总的来说，Unsplash.com 是一个受欢迎的图片资源平台，适用于需要高质量图片的个人和商业项目。真的是一个很棒的资源平台！\n","source":"_posts/2017-02-23-yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai.markdown","raw":"---\n\ntitle: \"一个免费高质量的图片分享平台\"\ndate: 2017-02-23 18:02:19 +0800\ncomments: true\ncategories: Resources\ntags: [高清图片,资源]\ntop: true\n---\n\n很多时候在写文章或者制作PPT时需要用到一些图片资源，最近刚好发现了一个实用的高分辨率的免费资源平台Unspash, 跟大家分享一下。\n![](/assets/images/ziyuan/laptop-1.png)\n[Unsplash.com](https://unsplash.com \"免费高质量的图片分享平台\") 是一个知名的免费高质量图片分享平台，提供各种类型的高分辨率摄影图片供用户免费下载和使用。这些图片可以用于个人、商业、创意和学术项目，包括网站、博客、社交媒体、演示文稿等。\n\n<!-- more -->\n这个平台的特点包括：\n\n**高质量图片：** Unsplash 上的图片质量往往很高，包括风景、人物、食物、建筑等多种主题。这些图片通常由专业摄影师拍摄，因此在设计和内容创作中具有很大的价值。\n![](/assets/images/ziyuan/fengjing-1.png)\n\n**免费使用：** Unsplash 的图片都是免费提供的，无需付费或订阅。用户可以自由下载、编辑和使用这些图片，而不需要担心版权问题。\n![](/assets/images/ziyuan/coding-1.png)\n\n**简单的许可：** Unsplash 使用的是创作共用许可（Creative Commons Zero License），这意味着用户可以自由使用这些图片，甚至可以用于商业目的，无需给予作者署名。\n![](/assets/images/ziyuan/license-1.png)\n\n**搜索和浏览功能：** Unsplash 网站提供搜索功能和浏览不同主题的图片集合，帮助用户快速找到符合自己需求的图片。\n![](/assets/images/ziyuan/search-1.png)\n\n**社区和创作者：** Unsplash 构建了一个活跃的摄影师社区，用户可以查看摄影师的个人主页，了解他们的作品，并选择关注自己喜欢的创作者。\n![](/assets/images/ziyuan/community-1.png)\n\n总的来说，Unsplash.com 是一个受欢迎的图片资源平台，适用于需要高质量图片的个人和商业项目。真的是一个很棒的资源平台！\n","slug":"2017-02-23-yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai","published":1,"updated":"2023-09-03T00:43:09.377Z","_id":"clm27g4p70051azv5cz915yj8","layout":"post","photos":[],"link":"","content":"<p>很多时候在写文章或者制作PPT时需要用到一些图片资源，最近刚好发现了一个实用的高分辨率的免费资源平台Unspash, 跟大家分享一下。<br><img src=\"/assets/images/ziyuan/laptop-1.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/ziyuan/laptop-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"><br><a href=\"https://unsplash.com/\" title=\"免费高质量的图片分享平台\">Unsplash.com</a> 是一个知名的免费高质量图片分享平台，提供各种类型的高分辨率摄影图片供用户免费下载和使用。这些图片可以用于个人、商业、创意和学术项目，包括网站、博客、社交媒体、演示文稿等。</p>\n<span id=\"more\"></span>\n<p>这个平台的特点包括：</p>\n<p><strong>高质量图片：</strong> Unsplash 上的图片质量往往很高，包括风景、人物、食物、建筑等多种主题。这些图片通常由专业摄影师拍摄，因此在设计和内容创作中具有很大的价值。<br><img src=\"/assets/images/ziyuan/fengjing-1.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/ziyuan/fengjing-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><strong>免费使用：</strong> Unsplash 的图片都是免费提供的，无需付费或订阅。用户可以自由下载、编辑和使用这些图片，而不需要担心版权问题。<br><img src=\"/assets/images/ziyuan/coding-1.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/ziyuan/coding-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><strong>简单的许可：</strong> Unsplash 使用的是创作共用许可（Creative Commons Zero License），这意味着用户可以自由使用这些图片，甚至可以用于商业目的，无需给予作者署名。<br><img src=\"/assets/images/ziyuan/license-1.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/ziyuan/license-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><strong>搜索和浏览功能：</strong> Unsplash 网站提供搜索功能和浏览不同主题的图片集合，帮助用户快速找到符合自己需求的图片。<br><img src=\"/assets/images/ziyuan/search-1.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/ziyuan/search-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><strong>社区和创作者：</strong> Unsplash 构建了一个活跃的摄影师社区，用户可以查看摄影师的个人主页，了解他们的作品，并选择关注自己喜欢的创作者。<br><img src=\"/assets/images/ziyuan/community-1.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/ziyuan/community-1.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p>总的来说，Unsplash.com 是一个受欢迎的图片资源平台，适用于需要高质量图片的个人和商业项目。真的是一个很棒的资源平台！</p>\n","site":{"data":{}},"excerpt":"<p>很多时候在写文章或者制作PPT时需要用到一些图片资源，最近刚好发现了一个实用的高分辨率的免费资源平台Unspash, 跟大家分享一下。<br><img src=\"/assets/images/ziyuan/laptop-1.png\"><br><a href=\"https://unsplash.com/\" title=\"免费高质量的图片分享平台\">Unsplash.com</a> 是一个知名的免费高质量图片分享平台，提供各种类型的高分辨率摄影图片供用户免费下载和使用。这些图片可以用于个人、商业、创意和学术项目，包括网站、博客、社交媒体、演示文稿等。</p>","more":"<p>这个平台的特点包括：</p>\n<p><strong>高质量图片：</strong> Unsplash 上的图片质量往往很高，包括风景、人物、食物、建筑等多种主题。这些图片通常由专业摄影师拍摄，因此在设计和内容创作中具有很大的价值。<br><img src=\"/assets/images/ziyuan/fengjing-1.png\"></p>\n<p><strong>免费使用：</strong> Unsplash 的图片都是免费提供的，无需付费或订阅。用户可以自由下载、编辑和使用这些图片，而不需要担心版权问题。<br><img src=\"/assets/images/ziyuan/coding-1.png\"></p>\n<p><strong>简单的许可：</strong> Unsplash 使用的是创作共用许可（Creative Commons Zero License），这意味着用户可以自由使用这些图片，甚至可以用于商业目的，无需给予作者署名。<br><img src=\"/assets/images/ziyuan/license-1.png\"></p>\n<p><strong>搜索和浏览功能：</strong> Unsplash 网站提供搜索功能和浏览不同主题的图片集合，帮助用户快速找到符合自己需求的图片。<br><img src=\"/assets/images/ziyuan/search-1.png\"></p>\n<p><strong>社区和创作者：</strong> Unsplash 构建了一个活跃的摄影师社区，用户可以查看摄影师的个人主页，了解他们的作品，并选择关注自己喜欢的创作者。<br><img src=\"/assets/images/ziyuan/community-1.png\"></p>\n<p>总的来说，Unsplash.com 是一个受欢迎的图片资源平台，适用于需要高质量图片的个人和商业项目。真的是一个很棒的资源平台！</p>"},{"title":"聊聊前端优化手段防抖","date":"2017-03-16T08:29:09.000Z","comments":1,"top":true,"_content":"\n在前端开发中，**防抖（Debouncing）** 是一种常用的优化技术，用于处理频繁触发的事件，如浏览器窗口的resize、input输入等。**防抖的目标是在事件被触发后，等待一段时间，只执行一次事件处理函数，以避免频繁的重复操作**。\n\n**防抖的原理**很简单：当一个事件被触发时，立即设置一个定时器，在规定的时间内没有再次触发该事件时，执行事件处理函数。如果在定时器规定的时间内再次触发了事件，那么就清除前一个定时器，并重新设置新的定时器。这样，只有在事件停止触发一段时间后，才会执行事件处理函数。\n\n以下是一个防抖的基本实现示例（使用 JavaScript）：\n\n```JavaScript\nfunction debounce(func, delay) {\n    let timer = null;\n    return function () {\n        const context = this;\n        const args = arguments;\n\n        clearTimeout(timer); // 每次执行时，清除之前的定时器\n        timer = setTimeout(function () { //设置新的定时器\n            func.apply(context, args);\n        }, delay);\n    }\n}\n\nconst debounceFunction = debounce((args) => {\n    console.log(\"Debounce function called\", args);\n}, 500);\n\nwindow.addEventListener('resize', debounceFunction);\n```\n<!--more-->\n\n在上面的示例中，debounce 函数接受两个参数：**要执行的事件处理函数**和**延迟时间**（规定的等待时间）。在事件被触发时，debounce 返回一个新的函数，该函数会设置一个定时器来等待延迟时间，然后执行事件处理函数。\n\n防抖的实现可以根据需要进行适当的调整，例如增加立即执行选项，即在事件触发时立即执行一次事件处理函数，然后再进入防抖模式。这样可以在事件触发的瞬间即时响应，同时仍然保留了后续的防抖效果。\n\n现在在上面防抖的基础上多增加一个参数，**immediate**， 参数值为true时，函数立即执行，为false时延时执行。\n\n```JavaScript\nfunction debounce(func, delay, immediate) {\n  let timer;\n  \n  return function() {\n    const context = this;\n    const args = arguments;\n    \n    clearTimeout(timer);\n    \n    if (immediate) {    // immediate为true，立即执行\n        if (!timer) {\n            func.apply(context, args); // 立即执行一次事件处理函数\n        }\n        timer = setTimeout(function() {\n            timer = null; // delay时间到后，将计时器设置null，下一次立即执行\n        }, delay);\n    } else {    //immediate为false，延时执行\n        timer = setTimeout(function() {\n            func.apply(context, args); // 在延迟时间后执行事件处理函数\n        }, delay);\n    }\n  };\n}\n\n// 使用防抖处理事件，第一次触发立即执行，之后每次触发等待300毫秒后执行\nconst debouncedFunction = debounce(function() {\n  console.log(\"Debounce function called.\");\n}, 500, true);\n\n// 触发事件\nwindow.addEventListener(\"resize\", debouncedFunction);\n\n```\n\n总的来说，防抖是一种有效的优化手段，可以帮助减少频繁触发的事件造成的重复操作，提升前端应用的性能和用户体验。\n","source":"_posts/2017-03-16-liao-liao-qian-duan-you-hua-shou-duan-fang-dou.markdown","raw":"---\n\ntitle: \"聊聊前端优化手段防抖\"\ndate: 2017-03-16 16:29:09 +0800\ncomments: true\ncategories: Frontend\ntags: [JavaScript]\ntop: true\n---\n\n在前端开发中，**防抖（Debouncing）** 是一种常用的优化技术，用于处理频繁触发的事件，如浏览器窗口的resize、input输入等。**防抖的目标是在事件被触发后，等待一段时间，只执行一次事件处理函数，以避免频繁的重复操作**。\n\n**防抖的原理**很简单：当一个事件被触发时，立即设置一个定时器，在规定的时间内没有再次触发该事件时，执行事件处理函数。如果在定时器规定的时间内再次触发了事件，那么就清除前一个定时器，并重新设置新的定时器。这样，只有在事件停止触发一段时间后，才会执行事件处理函数。\n\n以下是一个防抖的基本实现示例（使用 JavaScript）：\n\n```JavaScript\nfunction debounce(func, delay) {\n    let timer = null;\n    return function () {\n        const context = this;\n        const args = arguments;\n\n        clearTimeout(timer); // 每次执行时，清除之前的定时器\n        timer = setTimeout(function () { //设置新的定时器\n            func.apply(context, args);\n        }, delay);\n    }\n}\n\nconst debounceFunction = debounce((args) => {\n    console.log(\"Debounce function called\", args);\n}, 500);\n\nwindow.addEventListener('resize', debounceFunction);\n```\n<!--more-->\n\n在上面的示例中，debounce 函数接受两个参数：**要执行的事件处理函数**和**延迟时间**（规定的等待时间）。在事件被触发时，debounce 返回一个新的函数，该函数会设置一个定时器来等待延迟时间，然后执行事件处理函数。\n\n防抖的实现可以根据需要进行适当的调整，例如增加立即执行选项，即在事件触发时立即执行一次事件处理函数，然后再进入防抖模式。这样可以在事件触发的瞬间即时响应，同时仍然保留了后续的防抖效果。\n\n现在在上面防抖的基础上多增加一个参数，**immediate**， 参数值为true时，函数立即执行，为false时延时执行。\n\n```JavaScript\nfunction debounce(func, delay, immediate) {\n  let timer;\n  \n  return function() {\n    const context = this;\n    const args = arguments;\n    \n    clearTimeout(timer);\n    \n    if (immediate) {    // immediate为true，立即执行\n        if (!timer) {\n            func.apply(context, args); // 立即执行一次事件处理函数\n        }\n        timer = setTimeout(function() {\n            timer = null; // delay时间到后，将计时器设置null，下一次立即执行\n        }, delay);\n    } else {    //immediate为false，延时执行\n        timer = setTimeout(function() {\n            func.apply(context, args); // 在延迟时间后执行事件处理函数\n        }, delay);\n    }\n  };\n}\n\n// 使用防抖处理事件，第一次触发立即执行，之后每次触发等待300毫秒后执行\nconst debouncedFunction = debounce(function() {\n  console.log(\"Debounce function called.\");\n}, 500, true);\n\n// 触发事件\nwindow.addEventListener(\"resize\", debouncedFunction);\n\n```\n\n总的来说，防抖是一种有效的优化手段，可以帮助减少频繁触发的事件造成的重复操作，提升前端应用的性能和用户体验。\n","slug":"2017-03-16-liao-liao-qian-duan-you-hua-shou-duan-fang-dou","published":1,"updated":"2023-09-03T00:42:56.247Z","_id":"clm27g4p80054azv5gfcigy0n","layout":"post","photos":[],"link":"","content":"<p>在前端开发中，<strong>防抖（Debouncing）</strong> 是一种常用的优化技术，用于处理频繁触发的事件，如浏览器窗口的resize、input输入等。<strong>防抖的目标是在事件被触发后，等待一段时间，只执行一次事件处理函数，以避免频繁的重复操作</strong>。</p>\n<p><strong>防抖的原理</strong>很简单：当一个事件被触发时，立即设置一个定时器，在规定的时间内没有再次触发该事件时，执行事件处理函数。如果在定时器规定的时间内再次触发了事件，那么就清除前一个定时器，并重新设置新的定时器。这样，只有在事件停止触发一段时间后，才会执行事件处理函数。</p>\n<p>以下是一个防抖的基本实现示例（使用 JavaScript）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> context = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer); <span class=\"comment\">// 每次执行时，清除之前的定时器</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">//设置新的定时器</span></span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> debounceFunction = <span class=\"title function_\">debounce</span>(<span class=\"function\">(<span class=\"params\">args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Debounce function called&quot;</span>, args);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, debounceFunction);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>在上面的示例中，debounce 函数接受两个参数：<strong>要执行的事件处理函数</strong>和<strong>延迟时间</strong>（规定的等待时间）。在事件被触发时，debounce 返回一个新的函数，该函数会设置一个定时器来等待延迟时间，然后执行事件处理函数。</p>\n<p>防抖的实现可以根据需要进行适当的调整，例如增加立即执行选项，即在事件触发时立即执行一次事件处理函数，然后再进入防抖模式。这样可以在事件触发的瞬间即时响应，同时仍然保留了后续的防抖效果。</p>\n<p>现在在上面防抖的基础上多增加一个参数，<strong>immediate</strong>， 参数值为true时，函数立即执行，为false时延时执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay, immediate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate) &#123;    <span class=\"comment\">// immediate为true，立即执行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args); <span class=\"comment\">// 立即执行一次事件处理函数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>; <span class=\"comment\">// delay时间到后，将计时器设置null，下一次立即执行</span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">//immediate为false，延时执行</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args); <span class=\"comment\">// 在延迟时间后执行事件处理函数</span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用防抖处理事件，第一次触发立即执行，之后每次触发等待300毫秒后执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debouncedFunction = <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Debounce function called.&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发事件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, debouncedFunction);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>总的来说，防抖是一种有效的优化手段，可以帮助减少频繁触发的事件造成的重复操作，提升前端应用的性能和用户体验。</p>\n","site":{"data":{}},"excerpt":"<p>在前端开发中，<strong>防抖（Debouncing）</strong> 是一种常用的优化技术，用于处理频繁触发的事件，如浏览器窗口的resize、input输入等。<strong>防抖的目标是在事件被触发后，等待一段时间，只执行一次事件处理函数，以避免频繁的重复操作</strong>。</p>\n<p><strong>防抖的原理</strong>很简单：当一个事件被触发时，立即设置一个定时器，在规定的时间内没有再次触发该事件时，执行事件处理函数。如果在定时器规定的时间内再次触发了事件，那么就清除前一个定时器，并重新设置新的定时器。这样，只有在事件停止触发一段时间后，才会执行事件处理函数。</p>\n<p>以下是一个防抖的基本实现示例（使用 JavaScript）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> context = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer); <span class=\"comment\">// 每次执行时，清除之前的定时器</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">//设置新的定时器</span></span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> debounceFunction = <span class=\"title function_\">debounce</span>(<span class=\"function\">(<span class=\"params\">args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Debounce function called&quot;</span>, args);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, debounceFunction);</span><br></pre></td></tr></table></figure>","more":"<p>在上面的示例中，debounce 函数接受两个参数：<strong>要执行的事件处理函数</strong>和<strong>延迟时间</strong>（规定的等待时间）。在事件被触发时，debounce 返回一个新的函数，该函数会设置一个定时器来等待延迟时间，然后执行事件处理函数。</p>\n<p>防抖的实现可以根据需要进行适当的调整，例如增加立即执行选项，即在事件触发时立即执行一次事件处理函数，然后再进入防抖模式。这样可以在事件触发的瞬间即时响应，同时仍然保留了后续的防抖效果。</p>\n<p>现在在上面防抖的基础上多增加一个参数，<strong>immediate</strong>， 参数值为true时，函数立即执行，为false时延时执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay, immediate</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediate) &#123;    <span class=\"comment\">// immediate为true，立即执行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args); <span class=\"comment\">// 立即执行一次事件处理函数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span>; <span class=\"comment\">// delay时间到后，将计时器设置null，下一次立即执行</span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">//immediate为false，延时执行</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args); <span class=\"comment\">// 在延迟时间后执行事件处理函数</span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用防抖处理事件，第一次触发立即执行，之后每次触发等待300毫秒后执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debouncedFunction = <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Debounce function called.&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发事件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, debouncedFunction);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>总的来说，防抖是一种有效的优化手段，可以帮助减少频繁触发的事件造成的重复操作，提升前端应用的性能和用户体验。</p>"},{"title":"AWS IAM原理以及如何使用","date":"2022-02-17T15:22:57.000Z","comments":1,"_content":"\nAWS Identity and Access Management（`IAM`）是Amazon Web Services（AWS）提供的身份和访问管理服务，用于安全地管理对AWS资源的访问权限。IAM使您能够精细控制用户、组、角色等实体对AWS服务和资源的访问权限，以确保安全性和合规性。\n\n### IAM的原理\nIAM基于一些核心概念：\n\n**用户（Users）：** 代表实际的个人用户，可以分配安全凭证（如访问密钥、密码）来访问AWS资源。\n![](/assets/images/aws/aws-iam-users.png)\n<!--more-->\n**组（Groups）：** 用于将一组用户组合在一起，并将一组权限分配给该组，从而简化权限管理。\n![](/assets/images/aws/aws-iam-groups.png)\n\n**角色（Roles）：** 类似于用户，但不是直接分配给人，而是分配给AWS资源（例如EC2实例）。角色可以用于临时授权。\n![](/assets/images/aws/aws-iam-roles.png)\n\n**权限策略（Permissions Policies）：** \n定义了用户、组或角色可以执行的特定操作的权限。AWS提供了许多预定义的权限策略，同时也可以创建自定义策略。\n![](/assets/images/aws/aws-iam-policies.png)\n\n### 如何使用IAM\n\n**创建用户和组：** 在IAM中，您可以创建用户，并将用户组合成组。然后，为用户分配安全凭证和权限。\n\n**定义和分配权限：** 您可以使用AWS提供的预定义权限策略，也可以创建自定义策略，然后将这些策略附加到用户、组或角色上，以控制他们对资源的访问。\n\n**使用角色：** 如果您的应用程序需要访问AWS服务，可以创建角色，并将这些角色附加到您的应用程序或服务中。这样，您可以避免将敏感的凭证嵌入到应用程序代码中。\n\n**多因素认证（MFA）：** 您可以启用多因素认证来增加账户的安全性，要求用户在登录时提供额外的身份验证信息。\n\n**访问审计：** IAM提供了日志记录功能，可记录用户在AWS资源上执行的操作，以便进行审计和安全分析。\n\n### 最佳实践\n在使用IAM时，建议采用以下最佳实践，例如：\n\n**最小权限原则：** 为用户和角色提供所需的最小权限，以减少潜在的安全风险。\n\n**使用身份提供商：** 将身份提供商（如企业目录）与IAM集成，以便集中管理用户和权限。\n\n**定期审查权限：** 定期审查用户、组和角色的权限，确保权限保持最新且合规。\n\n","source":"_posts/2022-02-17-aws-iamyuan-li-yi-ji-ru-he-shi-yong.markdown","raw":"---\n\ntitle: \"AWS IAM原理以及如何使用\"\ndate: 2022-02-17 23:22:57 +0800\ncomments: true\ncategories: 云计算\ntags: [云计算, AWS]\n---\n\nAWS Identity and Access Management（`IAM`）是Amazon Web Services（AWS）提供的身份和访问管理服务，用于安全地管理对AWS资源的访问权限。IAM使您能够精细控制用户、组、角色等实体对AWS服务和资源的访问权限，以确保安全性和合规性。\n\n### IAM的原理\nIAM基于一些核心概念：\n\n**用户（Users）：** 代表实际的个人用户，可以分配安全凭证（如访问密钥、密码）来访问AWS资源。\n![](/assets/images/aws/aws-iam-users.png)\n<!--more-->\n**组（Groups）：** 用于将一组用户组合在一起，并将一组权限分配给该组，从而简化权限管理。\n![](/assets/images/aws/aws-iam-groups.png)\n\n**角色（Roles）：** 类似于用户，但不是直接分配给人，而是分配给AWS资源（例如EC2实例）。角色可以用于临时授权。\n![](/assets/images/aws/aws-iam-roles.png)\n\n**权限策略（Permissions Policies）：** \n定义了用户、组或角色可以执行的特定操作的权限。AWS提供了许多预定义的权限策略，同时也可以创建自定义策略。\n![](/assets/images/aws/aws-iam-policies.png)\n\n### 如何使用IAM\n\n**创建用户和组：** 在IAM中，您可以创建用户，并将用户组合成组。然后，为用户分配安全凭证和权限。\n\n**定义和分配权限：** 您可以使用AWS提供的预定义权限策略，也可以创建自定义策略，然后将这些策略附加到用户、组或角色上，以控制他们对资源的访问。\n\n**使用角色：** 如果您的应用程序需要访问AWS服务，可以创建角色，并将这些角色附加到您的应用程序或服务中。这样，您可以避免将敏感的凭证嵌入到应用程序代码中。\n\n**多因素认证（MFA）：** 您可以启用多因素认证来增加账户的安全性，要求用户在登录时提供额外的身份验证信息。\n\n**访问审计：** IAM提供了日志记录功能，可记录用户在AWS资源上执行的操作，以便进行审计和安全分析。\n\n### 最佳实践\n在使用IAM时，建议采用以下最佳实践，例如：\n\n**最小权限原则：** 为用户和角色提供所需的最小权限，以减少潜在的安全风险。\n\n**使用身份提供商：** 将身份提供商（如企业目录）与IAM集成，以便集中管理用户和权限。\n\n**定期审查权限：** 定期审查用户、组和角色的权限，确保权限保持最新且合规。\n\n","slug":"2022-02-17-aws-iamyuan-li-yi-ji-ru-he-shi-yong","published":1,"updated":"2023-09-02T16:55:28.908Z","_id":"clm27g4p80055azv54tn60z6d","layout":"post","photos":[],"link":"","content":"<p>AWS Identity and Access Management（<code>IAM</code>）是Amazon Web Services（AWS）提供的身份和访问管理服务，用于安全地管理对AWS资源的访问权限。IAM使您能够精细控制用户、组、角色等实体对AWS服务和资源的访问权限，以确保安全性和合规性。</p>\n<h3 id=\"IAM的原理\"><a href=\"#IAM的原理\" class=\"headerlink\" title=\"IAM的原理\"></a>IAM的原理</h3><p>IAM基于一些核心概念：</p>\n<p><strong>用户（Users）：</strong> 代表实际的个人用户，可以分配安全凭证（如访问密钥、密码）来访问AWS资源。<br><img src=\"/assets/images/aws/aws-iam-users.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/aws/aws-iam-users.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<span id=\"more\"></span>\n<p><strong>组（Groups）：</strong> 用于将一组用户组合在一起，并将一组权限分配给该组，从而简化权限管理。<br><img src=\"/assets/images/aws/aws-iam-groups.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/aws/aws-iam-groups.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><strong>角色（Roles）：</strong> 类似于用户，但不是直接分配给人，而是分配给AWS资源（例如EC2实例）。角色可以用于临时授权。<br><img src=\"/assets/images/aws/aws-iam-roles.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/aws/aws-iam-roles.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><strong>权限策略（Permissions Policies）：</strong><br>定义了用户、组或角色可以执行的特定操作的权限。AWS提供了许多预定义的权限策略，同时也可以创建自定义策略。<br><img src=\"/assets/images/aws/aws-iam-policies.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/aws/aws-iam-policies.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<h3 id=\"如何使用IAM\"><a href=\"#如何使用IAM\" class=\"headerlink\" title=\"如何使用IAM\"></a>如何使用IAM</h3><p><strong>创建用户和组：</strong> 在IAM中，您可以创建用户，并将用户组合成组。然后，为用户分配安全凭证和权限。</p>\n<p><strong>定义和分配权限：</strong> 您可以使用AWS提供的预定义权限策略，也可以创建自定义策略，然后将这些策略附加到用户、组或角色上，以控制他们对资源的访问。</p>\n<p><strong>使用角色：</strong> 如果您的应用程序需要访问AWS服务，可以创建角色，并将这些角色附加到您的应用程序或服务中。这样，您可以避免将敏感的凭证嵌入到应用程序代码中。</p>\n<p><strong>多因素认证（MFA）：</strong> 您可以启用多因素认证来增加账户的安全性，要求用户在登录时提供额外的身份验证信息。</p>\n<p><strong>访问审计：</strong> IAM提供了日志记录功能，可记录用户在AWS资源上执行的操作，以便进行审计和安全分析。</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>在使用IAM时，建议采用以下最佳实践，例如：</p>\n<p><strong>最小权限原则：</strong> 为用户和角色提供所需的最小权限，以减少潜在的安全风险。</p>\n<p><strong>使用身份提供商：</strong> 将身份提供商（如企业目录）与IAM集成，以便集中管理用户和权限。</p>\n<p><strong>定期审查权限：</strong> 定期审查用户、组和角色的权限，确保权限保持最新且合规。</p>\n","site":{"data":{}},"excerpt":"<p>AWS Identity and Access Management（<code>IAM</code>）是Amazon Web Services（AWS）提供的身份和访问管理服务，用于安全地管理对AWS资源的访问权限。IAM使您能够精细控制用户、组、角色等实体对AWS服务和资源的访问权限，以确保安全性和合规性。</p>\n<h3 id=\"IAM的原理\"><a href=\"#IAM的原理\" class=\"headerlink\" title=\"IAM的原理\"></a>IAM的原理</h3><p>IAM基于一些核心概念：</p>\n<p><strong>用户（Users）：</strong> 代表实际的个人用户，可以分配安全凭证（如访问密钥、密码）来访问AWS资源。<br><img src=\"/assets/images/aws/aws-iam-users.png\"></p>","more":"<p><strong>组（Groups）：</strong> 用于将一组用户组合在一起，并将一组权限分配给该组，从而简化权限管理。<br><img src=\"/assets/images/aws/aws-iam-groups.png\"></p>\n<p><strong>角色（Roles）：</strong> 类似于用户，但不是直接分配给人，而是分配给AWS资源（例如EC2实例）。角色可以用于临时授权。<br><img src=\"/assets/images/aws/aws-iam-roles.png\"></p>\n<p><strong>权限策略（Permissions Policies）：</strong><br>定义了用户、组或角色可以执行的特定操作的权限。AWS提供了许多预定义的权限策略，同时也可以创建自定义策略。<br><img src=\"/assets/images/aws/aws-iam-policies.png\"></p>\n<h3 id=\"如何使用IAM\"><a href=\"#如何使用IAM\" class=\"headerlink\" title=\"如何使用IAM\"></a>如何使用IAM</h3><p><strong>创建用户和组：</strong> 在IAM中，您可以创建用户，并将用户组合成组。然后，为用户分配安全凭证和权限。</p>\n<p><strong>定义和分配权限：</strong> 您可以使用AWS提供的预定义权限策略，也可以创建自定义策略，然后将这些策略附加到用户、组或角色上，以控制他们对资源的访问。</p>\n<p><strong>使用角色：</strong> 如果您的应用程序需要访问AWS服务，可以创建角色，并将这些角色附加到您的应用程序或服务中。这样，您可以避免将敏感的凭证嵌入到应用程序代码中。</p>\n<p><strong>多因素认证（MFA）：</strong> 您可以启用多因素认证来增加账户的安全性，要求用户在登录时提供额外的身份验证信息。</p>\n<p><strong>访问审计：</strong> IAM提供了日志记录功能，可记录用户在AWS资源上执行的操作，以便进行审计和安全分析。</p>\n<h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><p>在使用IAM时，建议采用以下最佳实践，例如：</p>\n<p><strong>最小权限原则：</strong> 为用户和角色提供所需的最小权限，以减少潜在的安全风险。</p>\n<p><strong>使用身份提供商：</strong> 将身份提供商（如企业目录）与IAM集成，以便集中管理用户和权限。</p>\n<p><strong>定期审查权限：</strong> 定期审查用户、组和角色的权限，确保权限保持最新且合规。</p>"},{"title":"AWS EC2的主要特点和工作方式以及计费模式","date":"2022-03-02T03:28:07.000Z","comments":1,"top":true,"_content":"\nAmazon Elastic Compute Cloud（Amazon EC2）是Amazon Web Services（AWS）提供的一项基于云的可伸缩性、弹性、安全性和监控的计算服务，它允许用户租用虚拟服务器（称为EC2实例）来运行应用程序。我们从主要特点，工作方式以及计价模式来介绍下EC2\n![](/assets/images/aws/aws-ec2-intro.png)\n<!--more-->\n### 主要特点\n\n**可伸缩性 (Scalability)**\nEC2 允许用户根据需要快速扩展或缩减实例数量。这种可伸缩性使您能够适应不断变化的工作负载，确保您的应用程序始终具备所需的计算资源。\n\n**多样性的实例类型 (Diverse Instance Types)**\nAWS 提供多种不同类型的 EC2 实例，以满足各种计算需求。这些类型包括计算优化、内存优化、存储优化、GPU 实例等，每种类型都针对不同类型的工作负载进行了优化。\n\n**弹性IP地址 (Elastic IP Addresses)**\n您可以分配弹性 IP 地址给 EC2 实例，确保即使实例停止和重新启动，IP 地址也能保持不变。这有助于确保应用程序的连通性。\n\n**安全组和网络 ACL (Security Groups and Network ACLs)**\nEC2 允许您配置安全组和网络 ACL，以控制实例的入站和出站流量。这提供了一层网络安全性，以确保只有授权的流量可以访问实例。\n\n**Amazon Machine Images (AMIs)**\nAMIs 是虚拟机镜像，包含了操作系统、应用程序和配置信息。您可以使用标准 AMIs 或创建自定义 AMIs 来启动 EC2 实例，从而简化部署。\n\n**多个操作系统支持 (Multiple OS Support)**\nEC2 支持多种操作系统，包括各种 Linux 发行版、Windows Server 和其他操作系统。这使您可以选择适合您应用程序的操作系统。\n\n**自动化和托管选项 (Automation and Managed Options)**\nEC2 实例可以与其他 AWS 服务集成，如 AWS Auto Scaling、Elastic Load Balancing 和 AWS Elastic Beanstalk，以实现自动化部署和托管。\n\n**监控和警报 (Monitoring and Alerts)**\nEC2 实例集成了 Amazon CloudWatch，可监控实例的性能和状态，并配置警报以及自动响应性能问题。\n\n**可靠性和容错性 (Reliability and Fault Tolerance)**\nEC2 提供高可用性和容错性，实例可以在不同的可用性区域和可用性域中运行，以确保服务的连续性。\n\n**身份和访问管理 (Identity and Access Management)**\nEC2 实例可以与 AWS Identity and Access Management (IAM) 集成，以进行身份验证和授权，使您能够控制对实例和资源的访问权限。\n\n**多种定价选项 (Pricing Options)**\nEC2 提供多种不同的定价选项，包括按需实例、预留实例、定期实例、Spot 实例等，以满足不同的预算和使用需求。\n\n### 工作方式：\n\n**选择实例类型**\n在使用 EC2 之前，您首先需要选择适合您工作负载需求的 EC2 实例类型。不同类型的实例提供不同的计算、内存、存储和网络性能。您可以根据您的需求来选择。\n\n**启动实例**\n一旦选择了实例类型，您可以使用 Amazon Machine Image（AMI）启动 EC2 实例。AMI 是一个预配置的虚拟机镜像，它包含了操作系统、应用程序和配置信息。您可以选择 AWS 提供的标准 AMI，也可以创建自己的自定义 AMI。\n\n**安全组和密钥对**\n在启动实例时，您可以选择一个或多个安全组，这些安全组定义了实例的入站和出站流量规则，以确保安全性。您还可以选择密钥对，以便安全地访问您的 EC2 实例。\n\n**运行实例**\n一旦实例启动，它将在 AWS 的数据中心中的物理服务器上运行。您可以通过 SSH（对于 Linux 实例）或 RDP（对于 Windows 实例）等远程协议连接到实例。\n\n**管理实例**\n一旦运行，您可以随时管理 EC2 实例。这包括启动、停止、重启、终止实例，以及更改实例的配置，如调整实例大小、添加存储卷等。\n\n**存储和快照**\nEC2 实例通常附带 Elastic Block Store（EBS）卷，您可以使用这些卷来存储数据。您还可以创建 EBS 快照，以备份数据或复制数据到其他地方。\n\n**监控和伸缩**\nAWS 提供了 Amazon CloudWatch，它可以用于监视 EC2 实例的性能指标，如 CPU 使用率、网络流量等。您可以设置警报以响应性能问题，并根据需要配置自动伸缩策略，以自动调整实例数量。\n\n**安全性和身份验证**\nEC2 实例可以与 AWS Identity and Access Management（IAM）集成，以实现身份验证和授权。您可以为实例分配 IAM 角色，以便它们可以访问其他 AWS 服务或资源，而无需硬编码的凭据。\n\n### 计费模式\n\n**按需实例 (On-Demand Instances)**\n按需实例是一种灵活的计费方式，您只需为您实际使用的计算资源付费，没有长期合同或预付费。这意味着您可以随时启动或停止实例，只支付实际的运行时间。\n\n适用于需要灵活性的工作负载，如开发和测试、临时工作负载、突发性工作负载。\n\n**预留实例 (Reserved Instances)**\n预留实例是一种合同制度，您提前支付一定费用，获得对特定实例类型的一定时期内的折扣，通常为1年或3年。这通常比按需实例更经济。\n\n适用于长期工作负载，可以预测的、稳定的使用情况，例如生产服务器。\n\n**可用性区域保留实例 (Reserved Instances for Availability Zones)**\n这是预留实例的一种变种，允许您为特定的可用性区域（AZ）购买预留容量。这对于需要在特定区域内保留容量的应用程序非常有用。\n\n适用于需要确保在特定可用性区域内拥有计算资源的工作负载。\n\n**可调整实例 (Convertible Reserved Instances)**\n这是一种预留实例，允许在合同期内更改实例类型，以适应不同的工作负载需求。\n\n适用于工作负载需求可能会变化的情况，但仍然希望获得折扣。\n\n**定期实例 (Scheduled Instances)**\n定期实例允许您按预定的时间启动 EC2 实例。您可以在每天的特定时间、每周某个时间或其他预定时间启动实例。\n\n适用于周期性的、预定的工作负载，如每天备份、批处理处理等。\n\n**批量实例 (Spot Instances)**\nSpot 实例基于竞价定价模式，您可以设定愿意支付的价格，当市场价格低于您的出价时，您可以获得实例。但它们可能随时被终止。\n\n适用于可以容忍实例随时中断的工作负载，如大规模数据分析和渲染任务。\n\n**Dedicated Hosts（专用主机）**\n专用主机允许您在 AWS 的物理服务器上运行 EC2 实例，这些服务器专门为您的账户保留。这提供了硬件级别的隔离，适用于具有特殊合规性要求的工作负载。\n\n适用于需要硬件隔离的工作负载，例如合规性要求非常高的应用程序，或者需要将许多实例部署到同一物理服务器上的场景。\n\n**Dedicated Instances（专用实例）**\n专用实例是 EC2 实例，它们在共享的物理服务器上运行，但只与您的账户中的其他实例共享。这提供了实例级别的隔离。\n\n适用于需要实例级别隔离的工作负载，但不需要物理主机级别的隔离的场景。\n\n**Free Tier（免费层级）**\nAWS 提供了一定程度的免费使用，即免费层级，对于新用户以及AWS账户中的某些服务和资源，提供有限的免费额度，通常为12个月。这是用于学习、试验和小型项目的好方法，以降低成本。\n\n适用于学习 AWS、开发和测试小型应用程序，或者初期的小规模项目。\n\n这些计费模式为不同的使用情况提供了各种选择。您可以根据您的需求和预算来选择适合您的模式。请注意，AWS定期更新其价格和计费模式，因此建议查看官方文档以获取最新的信息。","source":"_posts/2022-03-02-aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi.markdown","raw":"---\n\ntitle: \"AWS EC2的主要特点和工作方式以及计费模式\"\ndate: 2022-03-02 11:28:07 +0800\ncomments: true\ncategories: 云计算\ntags: [云计算, AWS]\ntop: true\n---\n\nAmazon Elastic Compute Cloud（Amazon EC2）是Amazon Web Services（AWS）提供的一项基于云的可伸缩性、弹性、安全性和监控的计算服务，它允许用户租用虚拟服务器（称为EC2实例）来运行应用程序。我们从主要特点，工作方式以及计价模式来介绍下EC2\n![](/assets/images/aws/aws-ec2-intro.png)\n<!--more-->\n### 主要特点\n\n**可伸缩性 (Scalability)**\nEC2 允许用户根据需要快速扩展或缩减实例数量。这种可伸缩性使您能够适应不断变化的工作负载，确保您的应用程序始终具备所需的计算资源。\n\n**多样性的实例类型 (Diverse Instance Types)**\nAWS 提供多种不同类型的 EC2 实例，以满足各种计算需求。这些类型包括计算优化、内存优化、存储优化、GPU 实例等，每种类型都针对不同类型的工作负载进行了优化。\n\n**弹性IP地址 (Elastic IP Addresses)**\n您可以分配弹性 IP 地址给 EC2 实例，确保即使实例停止和重新启动，IP 地址也能保持不变。这有助于确保应用程序的连通性。\n\n**安全组和网络 ACL (Security Groups and Network ACLs)**\nEC2 允许您配置安全组和网络 ACL，以控制实例的入站和出站流量。这提供了一层网络安全性，以确保只有授权的流量可以访问实例。\n\n**Amazon Machine Images (AMIs)**\nAMIs 是虚拟机镜像，包含了操作系统、应用程序和配置信息。您可以使用标准 AMIs 或创建自定义 AMIs 来启动 EC2 实例，从而简化部署。\n\n**多个操作系统支持 (Multiple OS Support)**\nEC2 支持多种操作系统，包括各种 Linux 发行版、Windows Server 和其他操作系统。这使您可以选择适合您应用程序的操作系统。\n\n**自动化和托管选项 (Automation and Managed Options)**\nEC2 实例可以与其他 AWS 服务集成，如 AWS Auto Scaling、Elastic Load Balancing 和 AWS Elastic Beanstalk，以实现自动化部署和托管。\n\n**监控和警报 (Monitoring and Alerts)**\nEC2 实例集成了 Amazon CloudWatch，可监控实例的性能和状态，并配置警报以及自动响应性能问题。\n\n**可靠性和容错性 (Reliability and Fault Tolerance)**\nEC2 提供高可用性和容错性，实例可以在不同的可用性区域和可用性域中运行，以确保服务的连续性。\n\n**身份和访问管理 (Identity and Access Management)**\nEC2 实例可以与 AWS Identity and Access Management (IAM) 集成，以进行身份验证和授权，使您能够控制对实例和资源的访问权限。\n\n**多种定价选项 (Pricing Options)**\nEC2 提供多种不同的定价选项，包括按需实例、预留实例、定期实例、Spot 实例等，以满足不同的预算和使用需求。\n\n### 工作方式：\n\n**选择实例类型**\n在使用 EC2 之前，您首先需要选择适合您工作负载需求的 EC2 实例类型。不同类型的实例提供不同的计算、内存、存储和网络性能。您可以根据您的需求来选择。\n\n**启动实例**\n一旦选择了实例类型，您可以使用 Amazon Machine Image（AMI）启动 EC2 实例。AMI 是一个预配置的虚拟机镜像，它包含了操作系统、应用程序和配置信息。您可以选择 AWS 提供的标准 AMI，也可以创建自己的自定义 AMI。\n\n**安全组和密钥对**\n在启动实例时，您可以选择一个或多个安全组，这些安全组定义了实例的入站和出站流量规则，以确保安全性。您还可以选择密钥对，以便安全地访问您的 EC2 实例。\n\n**运行实例**\n一旦实例启动，它将在 AWS 的数据中心中的物理服务器上运行。您可以通过 SSH（对于 Linux 实例）或 RDP（对于 Windows 实例）等远程协议连接到实例。\n\n**管理实例**\n一旦运行，您可以随时管理 EC2 实例。这包括启动、停止、重启、终止实例，以及更改实例的配置，如调整实例大小、添加存储卷等。\n\n**存储和快照**\nEC2 实例通常附带 Elastic Block Store（EBS）卷，您可以使用这些卷来存储数据。您还可以创建 EBS 快照，以备份数据或复制数据到其他地方。\n\n**监控和伸缩**\nAWS 提供了 Amazon CloudWatch，它可以用于监视 EC2 实例的性能指标，如 CPU 使用率、网络流量等。您可以设置警报以响应性能问题，并根据需要配置自动伸缩策略，以自动调整实例数量。\n\n**安全性和身份验证**\nEC2 实例可以与 AWS Identity and Access Management（IAM）集成，以实现身份验证和授权。您可以为实例分配 IAM 角色，以便它们可以访问其他 AWS 服务或资源，而无需硬编码的凭据。\n\n### 计费模式\n\n**按需实例 (On-Demand Instances)**\n按需实例是一种灵活的计费方式，您只需为您实际使用的计算资源付费，没有长期合同或预付费。这意味着您可以随时启动或停止实例，只支付实际的运行时间。\n\n适用于需要灵活性的工作负载，如开发和测试、临时工作负载、突发性工作负载。\n\n**预留实例 (Reserved Instances)**\n预留实例是一种合同制度，您提前支付一定费用，获得对特定实例类型的一定时期内的折扣，通常为1年或3年。这通常比按需实例更经济。\n\n适用于长期工作负载，可以预测的、稳定的使用情况，例如生产服务器。\n\n**可用性区域保留实例 (Reserved Instances for Availability Zones)**\n这是预留实例的一种变种，允许您为特定的可用性区域（AZ）购买预留容量。这对于需要在特定区域内保留容量的应用程序非常有用。\n\n适用于需要确保在特定可用性区域内拥有计算资源的工作负载。\n\n**可调整实例 (Convertible Reserved Instances)**\n这是一种预留实例，允许在合同期内更改实例类型，以适应不同的工作负载需求。\n\n适用于工作负载需求可能会变化的情况，但仍然希望获得折扣。\n\n**定期实例 (Scheduled Instances)**\n定期实例允许您按预定的时间启动 EC2 实例。您可以在每天的特定时间、每周某个时间或其他预定时间启动实例。\n\n适用于周期性的、预定的工作负载，如每天备份、批处理处理等。\n\n**批量实例 (Spot Instances)**\nSpot 实例基于竞价定价模式，您可以设定愿意支付的价格，当市场价格低于您的出价时，您可以获得实例。但它们可能随时被终止。\n\n适用于可以容忍实例随时中断的工作负载，如大规模数据分析和渲染任务。\n\n**Dedicated Hosts（专用主机）**\n专用主机允许您在 AWS 的物理服务器上运行 EC2 实例，这些服务器专门为您的账户保留。这提供了硬件级别的隔离，适用于具有特殊合规性要求的工作负载。\n\n适用于需要硬件隔离的工作负载，例如合规性要求非常高的应用程序，或者需要将许多实例部署到同一物理服务器上的场景。\n\n**Dedicated Instances（专用实例）**\n专用实例是 EC2 实例，它们在共享的物理服务器上运行，但只与您的账户中的其他实例共享。这提供了实例级别的隔离。\n\n适用于需要实例级别隔离的工作负载，但不需要物理主机级别的隔离的场景。\n\n**Free Tier（免费层级）**\nAWS 提供了一定程度的免费使用，即免费层级，对于新用户以及AWS账户中的某些服务和资源，提供有限的免费额度，通常为12个月。这是用于学习、试验和小型项目的好方法，以降低成本。\n\n适用于学习 AWS、开发和测试小型应用程序，或者初期的小规模项目。\n\n这些计费模式为不同的使用情况提供了各种选择。您可以根据您的需求和预算来选择适合您的模式。请注意，AWS定期更新其价格和计费模式，因此建议查看官方文档以获取最新的信息。","slug":"2022-03-02-aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi","published":1,"updated":"2023-09-03T00:45:16.785Z","_id":"clm27g4p90058azv5av4aczg5","layout":"post","photos":[],"link":"","content":"<p>Amazon Elastic Compute Cloud（Amazon EC2）是Amazon Web Services（AWS）提供的一项基于云的可伸缩性、弹性、安全性和监控的计算服务，它允许用户租用虚拟服务器（称为EC2实例）来运行应用程序。我们从主要特点，工作方式以及计价模式来介绍下EC2<br><img src=\"/assets/images/aws/aws-ec2-intro.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/aws/aws-ec2-intro.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<span id=\"more\"></span>\n<h3 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h3><p><strong>可伸缩性 (Scalability)</strong><br>EC2 允许用户根据需要快速扩展或缩减实例数量。这种可伸缩性使您能够适应不断变化的工作负载，确保您的应用程序始终具备所需的计算资源。</p>\n<p><strong>多样性的实例类型 (Diverse Instance Types)</strong><br>AWS 提供多种不同类型的 EC2 实例，以满足各种计算需求。这些类型包括计算优化、内存优化、存储优化、GPU 实例等，每种类型都针对不同类型的工作负载进行了优化。</p>\n<p><strong>弹性IP地址 (Elastic IP Addresses)</strong><br>您可以分配弹性 IP 地址给 EC2 实例，确保即使实例停止和重新启动，IP 地址也能保持不变。这有助于确保应用程序的连通性。</p>\n<p><strong>安全组和网络 ACL (Security Groups and Network ACLs)</strong><br>EC2 允许您配置安全组和网络 ACL，以控制实例的入站和出站流量。这提供了一层网络安全性，以确保只有授权的流量可以访问实例。</p>\n<p><strong>Amazon Machine Images (AMIs)</strong><br>AMIs 是虚拟机镜像，包含了操作系统、应用程序和配置信息。您可以使用标准 AMIs 或创建自定义 AMIs 来启动 EC2 实例，从而简化部署。</p>\n<p><strong>多个操作系统支持 (Multiple OS Support)</strong><br>EC2 支持多种操作系统，包括各种 Linux 发行版、Windows Server 和其他操作系统。这使您可以选择适合您应用程序的操作系统。</p>\n<p><strong>自动化和托管选项 (Automation and Managed Options)</strong><br>EC2 实例可以与其他 AWS 服务集成，如 AWS Auto Scaling、Elastic Load Balancing 和 AWS Elastic Beanstalk，以实现自动化部署和托管。</p>\n<p><strong>监控和警报 (Monitoring and Alerts)</strong><br>EC2 实例集成了 Amazon CloudWatch，可监控实例的性能和状态，并配置警报以及自动响应性能问题。</p>\n<p><strong>可靠性和容错性 (Reliability and Fault Tolerance)</strong><br>EC2 提供高可用性和容错性，实例可以在不同的可用性区域和可用性域中运行，以确保服务的连续性。</p>\n<p><strong>身份和访问管理 (Identity and Access Management)</strong><br>EC2 实例可以与 AWS Identity and Access Management (IAM) 集成，以进行身份验证和授权，使您能够控制对实例和资源的访问权限。</p>\n<p><strong>多种定价选项 (Pricing Options)</strong><br>EC2 提供多种不同的定价选项，包括按需实例、预留实例、定期实例、Spot 实例等，以满足不同的预算和使用需求。</p>\n<h3 id=\"工作方式：\"><a href=\"#工作方式：\" class=\"headerlink\" title=\"工作方式：\"></a>工作方式：</h3><p><strong>选择实例类型</strong><br>在使用 EC2 之前，您首先需要选择适合您工作负载需求的 EC2 实例类型。不同类型的实例提供不同的计算、内存、存储和网络性能。您可以根据您的需求来选择。</p>\n<p><strong>启动实例</strong><br>一旦选择了实例类型，您可以使用 Amazon Machine Image（AMI）启动 EC2 实例。AMI 是一个预配置的虚拟机镜像，它包含了操作系统、应用程序和配置信息。您可以选择 AWS 提供的标准 AMI，也可以创建自己的自定义 AMI。</p>\n<p><strong>安全组和密钥对</strong><br>在启动实例时，您可以选择一个或多个安全组，这些安全组定义了实例的入站和出站流量规则，以确保安全性。您还可以选择密钥对，以便安全地访问您的 EC2 实例。</p>\n<p><strong>运行实例</strong><br>一旦实例启动，它将在 AWS 的数据中心中的物理服务器上运行。您可以通过 SSH（对于 Linux 实例）或 RDP（对于 Windows 实例）等远程协议连接到实例。</p>\n<p><strong>管理实例</strong><br>一旦运行，您可以随时管理 EC2 实例。这包括启动、停止、重启、终止实例，以及更改实例的配置，如调整实例大小、添加存储卷等。</p>\n<p><strong>存储和快照</strong><br>EC2 实例通常附带 Elastic Block Store（EBS）卷，您可以使用这些卷来存储数据。您还可以创建 EBS 快照，以备份数据或复制数据到其他地方。</p>\n<p><strong>监控和伸缩</strong><br>AWS 提供了 Amazon CloudWatch，它可以用于监视 EC2 实例的性能指标，如 CPU 使用率、网络流量等。您可以设置警报以响应性能问题，并根据需要配置自动伸缩策略，以自动调整实例数量。</p>\n<p><strong>安全性和身份验证</strong><br>EC2 实例可以与 AWS Identity and Access Management（IAM）集成，以实现身份验证和授权。您可以为实例分配 IAM 角色，以便它们可以访问其他 AWS 服务或资源，而无需硬编码的凭据。</p>\n<h3 id=\"计费模式\"><a href=\"#计费模式\" class=\"headerlink\" title=\"计费模式\"></a>计费模式</h3><p><strong>按需实例 (On-Demand Instances)</strong><br>按需实例是一种灵活的计费方式，您只需为您实际使用的计算资源付费，没有长期合同或预付费。这意味着您可以随时启动或停止实例，只支付实际的运行时间。</p>\n<p>适用于需要灵活性的工作负载，如开发和测试、临时工作负载、突发性工作负载。</p>\n<p><strong>预留实例 (Reserved Instances)</strong><br>预留实例是一种合同制度，您提前支付一定费用，获得对特定实例类型的一定时期内的折扣，通常为1年或3年。这通常比按需实例更经济。</p>\n<p>适用于长期工作负载，可以预测的、稳定的使用情况，例如生产服务器。</p>\n<p><strong>可用性区域保留实例 (Reserved Instances for Availability Zones)</strong><br>这是预留实例的一种变种，允许您为特定的可用性区域（AZ）购买预留容量。这对于需要在特定区域内保留容量的应用程序非常有用。</p>\n<p>适用于需要确保在特定可用性区域内拥有计算资源的工作负载。</p>\n<p><strong>可调整实例 (Convertible Reserved Instances)</strong><br>这是一种预留实例，允许在合同期内更改实例类型，以适应不同的工作负载需求。</p>\n<p>适用于工作负载需求可能会变化的情况，但仍然希望获得折扣。</p>\n<p><strong>定期实例 (Scheduled Instances)</strong><br>定期实例允许您按预定的时间启动 EC2 实例。您可以在每天的特定时间、每周某个时间或其他预定时间启动实例。</p>\n<p>适用于周期性的、预定的工作负载，如每天备份、批处理处理等。</p>\n<p><strong>批量实例 (Spot Instances)</strong><br>Spot 实例基于竞价定价模式，您可以设定愿意支付的价格，当市场价格低于您的出价时，您可以获得实例。但它们可能随时被终止。</p>\n<p>适用于可以容忍实例随时中断的工作负载，如大规模数据分析和渲染任务。</p>\n<p><strong>Dedicated Hosts（专用主机）</strong><br>专用主机允许您在 AWS 的物理服务器上运行 EC2 实例，这些服务器专门为您的账户保留。这提供了硬件级别的隔离，适用于具有特殊合规性要求的工作负载。</p>\n<p>适用于需要硬件隔离的工作负载，例如合规性要求非常高的应用程序，或者需要将许多实例部署到同一物理服务器上的场景。</p>\n<p><strong>Dedicated Instances（专用实例）</strong><br>专用实例是 EC2 实例，它们在共享的物理服务器上运行，但只与您的账户中的其他实例共享。这提供了实例级别的隔离。</p>\n<p>适用于需要实例级别隔离的工作负载，但不需要物理主机级别的隔离的场景。</p>\n<p><strong>Free Tier（免费层级）</strong><br>AWS 提供了一定程度的免费使用，即免费层级，对于新用户以及AWS账户中的某些服务和资源，提供有限的免费额度，通常为12个月。这是用于学习、试验和小型项目的好方法，以降低成本。</p>\n<p>适用于学习 AWS、开发和测试小型应用程序，或者初期的小规模项目。</p>\n<p>这些计费模式为不同的使用情况提供了各种选择。您可以根据您的需求和预算来选择适合您的模式。请注意，AWS定期更新其价格和计费模式，因此建议查看官方文档以获取最新的信息。</p>\n","site":{"data":{}},"excerpt":"<p>Amazon Elastic Compute Cloud（Amazon EC2）是Amazon Web Services（AWS）提供的一项基于云的可伸缩性、弹性、安全性和监控的计算服务，它允许用户租用虚拟服务器（称为EC2实例）来运行应用程序。我们从主要特点，工作方式以及计价模式来介绍下EC2<br><img src=\"/assets/images/aws/aws-ec2-intro.png\"></p>","more":"<h3 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h3><p><strong>可伸缩性 (Scalability)</strong><br>EC2 允许用户根据需要快速扩展或缩减实例数量。这种可伸缩性使您能够适应不断变化的工作负载，确保您的应用程序始终具备所需的计算资源。</p>\n<p><strong>多样性的实例类型 (Diverse Instance Types)</strong><br>AWS 提供多种不同类型的 EC2 实例，以满足各种计算需求。这些类型包括计算优化、内存优化、存储优化、GPU 实例等，每种类型都针对不同类型的工作负载进行了优化。</p>\n<p><strong>弹性IP地址 (Elastic IP Addresses)</strong><br>您可以分配弹性 IP 地址给 EC2 实例，确保即使实例停止和重新启动，IP 地址也能保持不变。这有助于确保应用程序的连通性。</p>\n<p><strong>安全组和网络 ACL (Security Groups and Network ACLs)</strong><br>EC2 允许您配置安全组和网络 ACL，以控制实例的入站和出站流量。这提供了一层网络安全性，以确保只有授权的流量可以访问实例。</p>\n<p><strong>Amazon Machine Images (AMIs)</strong><br>AMIs 是虚拟机镜像，包含了操作系统、应用程序和配置信息。您可以使用标准 AMIs 或创建自定义 AMIs 来启动 EC2 实例，从而简化部署。</p>\n<p><strong>多个操作系统支持 (Multiple OS Support)</strong><br>EC2 支持多种操作系统，包括各种 Linux 发行版、Windows Server 和其他操作系统。这使您可以选择适合您应用程序的操作系统。</p>\n<p><strong>自动化和托管选项 (Automation and Managed Options)</strong><br>EC2 实例可以与其他 AWS 服务集成，如 AWS Auto Scaling、Elastic Load Balancing 和 AWS Elastic Beanstalk，以实现自动化部署和托管。</p>\n<p><strong>监控和警报 (Monitoring and Alerts)</strong><br>EC2 实例集成了 Amazon CloudWatch，可监控实例的性能和状态，并配置警报以及自动响应性能问题。</p>\n<p><strong>可靠性和容错性 (Reliability and Fault Tolerance)</strong><br>EC2 提供高可用性和容错性，实例可以在不同的可用性区域和可用性域中运行，以确保服务的连续性。</p>\n<p><strong>身份和访问管理 (Identity and Access Management)</strong><br>EC2 实例可以与 AWS Identity and Access Management (IAM) 集成，以进行身份验证和授权，使您能够控制对实例和资源的访问权限。</p>\n<p><strong>多种定价选项 (Pricing Options)</strong><br>EC2 提供多种不同的定价选项，包括按需实例、预留实例、定期实例、Spot 实例等，以满足不同的预算和使用需求。</p>\n<h3 id=\"工作方式：\"><a href=\"#工作方式：\" class=\"headerlink\" title=\"工作方式：\"></a>工作方式：</h3><p><strong>选择实例类型</strong><br>在使用 EC2 之前，您首先需要选择适合您工作负载需求的 EC2 实例类型。不同类型的实例提供不同的计算、内存、存储和网络性能。您可以根据您的需求来选择。</p>\n<p><strong>启动实例</strong><br>一旦选择了实例类型，您可以使用 Amazon Machine Image（AMI）启动 EC2 实例。AMI 是一个预配置的虚拟机镜像，它包含了操作系统、应用程序和配置信息。您可以选择 AWS 提供的标准 AMI，也可以创建自己的自定义 AMI。</p>\n<p><strong>安全组和密钥对</strong><br>在启动实例时，您可以选择一个或多个安全组，这些安全组定义了实例的入站和出站流量规则，以确保安全性。您还可以选择密钥对，以便安全地访问您的 EC2 实例。</p>\n<p><strong>运行实例</strong><br>一旦实例启动，它将在 AWS 的数据中心中的物理服务器上运行。您可以通过 SSH（对于 Linux 实例）或 RDP（对于 Windows 实例）等远程协议连接到实例。</p>\n<p><strong>管理实例</strong><br>一旦运行，您可以随时管理 EC2 实例。这包括启动、停止、重启、终止实例，以及更改实例的配置，如调整实例大小、添加存储卷等。</p>\n<p><strong>存储和快照</strong><br>EC2 实例通常附带 Elastic Block Store（EBS）卷，您可以使用这些卷来存储数据。您还可以创建 EBS 快照，以备份数据或复制数据到其他地方。</p>\n<p><strong>监控和伸缩</strong><br>AWS 提供了 Amazon CloudWatch，它可以用于监视 EC2 实例的性能指标，如 CPU 使用率、网络流量等。您可以设置警报以响应性能问题，并根据需要配置自动伸缩策略，以自动调整实例数量。</p>\n<p><strong>安全性和身份验证</strong><br>EC2 实例可以与 AWS Identity and Access Management（IAM）集成，以实现身份验证和授权。您可以为实例分配 IAM 角色，以便它们可以访问其他 AWS 服务或资源，而无需硬编码的凭据。</p>\n<h3 id=\"计费模式\"><a href=\"#计费模式\" class=\"headerlink\" title=\"计费模式\"></a>计费模式</h3><p><strong>按需实例 (On-Demand Instances)</strong><br>按需实例是一种灵活的计费方式，您只需为您实际使用的计算资源付费，没有长期合同或预付费。这意味着您可以随时启动或停止实例，只支付实际的运行时间。</p>\n<p>适用于需要灵活性的工作负载，如开发和测试、临时工作负载、突发性工作负载。</p>\n<p><strong>预留实例 (Reserved Instances)</strong><br>预留实例是一种合同制度，您提前支付一定费用，获得对特定实例类型的一定时期内的折扣，通常为1年或3年。这通常比按需实例更经济。</p>\n<p>适用于长期工作负载，可以预测的、稳定的使用情况，例如生产服务器。</p>\n<p><strong>可用性区域保留实例 (Reserved Instances for Availability Zones)</strong><br>这是预留实例的一种变种，允许您为特定的可用性区域（AZ）购买预留容量。这对于需要在特定区域内保留容量的应用程序非常有用。</p>\n<p>适用于需要确保在特定可用性区域内拥有计算资源的工作负载。</p>\n<p><strong>可调整实例 (Convertible Reserved Instances)</strong><br>这是一种预留实例，允许在合同期内更改实例类型，以适应不同的工作负载需求。</p>\n<p>适用于工作负载需求可能会变化的情况，但仍然希望获得折扣。</p>\n<p><strong>定期实例 (Scheduled Instances)</strong><br>定期实例允许您按预定的时间启动 EC2 实例。您可以在每天的特定时间、每周某个时间或其他预定时间启动实例。</p>\n<p>适用于周期性的、预定的工作负载，如每天备份、批处理处理等。</p>\n<p><strong>批量实例 (Spot Instances)</strong><br>Spot 实例基于竞价定价模式，您可以设定愿意支付的价格，当市场价格低于您的出价时，您可以获得实例。但它们可能随时被终止。</p>\n<p>适用于可以容忍实例随时中断的工作负载，如大规模数据分析和渲染任务。</p>\n<p><strong>Dedicated Hosts（专用主机）</strong><br>专用主机允许您在 AWS 的物理服务器上运行 EC2 实例，这些服务器专门为您的账户保留。这提供了硬件级别的隔离，适用于具有特殊合规性要求的工作负载。</p>\n<p>适用于需要硬件隔离的工作负载，例如合规性要求非常高的应用程序，或者需要将许多实例部署到同一物理服务器上的场景。</p>\n<p><strong>Dedicated Instances（专用实例）</strong><br>专用实例是 EC2 实例，它们在共享的物理服务器上运行，但只与您的账户中的其他实例共享。这提供了实例级别的隔离。</p>\n<p>适用于需要实例级别隔离的工作负载，但不需要物理主机级别的隔离的场景。</p>\n<p><strong>Free Tier（免费层级）</strong><br>AWS 提供了一定程度的免费使用，即免费层级，对于新用户以及AWS账户中的某些服务和资源，提供有限的免费额度，通常为12个月。这是用于学习、试验和小型项目的好方法，以降低成本。</p>\n<p>适用于学习 AWS、开发和测试小型应用程序，或者初期的小规模项目。</p>\n<p>这些计费模式为不同的使用情况提供了各种选择。您可以根据您的需求和预算来选择适合您的模式。请注意，AWS定期更新其价格和计费模式，因此建议查看官方文档以获取最新的信息。</p>"},{"title":"什么是AWS EC2 Hibernation","date":"2022-04-08T09:00:59.000Z","comments":1,"top":true,"_content":"\n`EC2 Hibernation` 是 Amazon Elastic Compute Cloud (EC2) 服务的一个功能，它允许您将 EC2 实例从运行状态转换为休眠状态，然后再次唤醒它，而不会丢失实例的内存中的数据。这个功能非常适合那些需要保持应用程序状态或长时间运行进程的工作负载。\n![](/assets/images/aws/aws-ec2-hibernation-flow.png)\n这里详细说明 EC2 Hibernation 的**工作原理**\n<!--more-->\n### 工作原理\n\n**1.启用 Hibernation：** 要使用 EC2 Hibernation，首先需要在 EC2 实例上启用它。这可以通过使用支持 Hibernation 的实例类型，并在启动时启用 Hibernation 选项来完成。并且EBS卷必须要开启加密。\n![](/assets/images/aws/aws-ec2-hibernation-enable.png)\n\n**2.创建 Hibernation 快照：** 在启用 Hibernation 后，EC2 实例的内存状态将被定期保存到 Amazon Elastic Block Store (EBS) 卷上的 Hibernation 快照中。这确保了在实例休眠时不会丢失内存中的数据。\n\n**3.休眠实例：** 一旦 Hibernation 启用并创建了快照，您可以通过执行 hibernate 命令或使用 AWS 管理控制台将实例转换为休眠状态。在休眠期间，实例的状态和数据将保存在 EBS 卷上。\n\n**4.唤醒实例：** 当您希望恢复实例的运行状态时，只需执行唤醒命令或使用控制台，EC2 实例将从 Hibernation 快照中还原内存状态，并继续运行。\n\n\n### 使用场景\n\nEC2 Hibernation 可以应用于多种使用场景，包括但不限于：\n\n**长时间运行的进程：** 如果您的 EC2 实例运行有状态的应用程序或长时间运行的进程，您可以使用 Hibernation 将实例休眠，以节省计算成本，而无需中断应用程序。\n\n**工作负载保持状态：** 某些工作负载需要保持状态，例如内存中的会话数据或数据库连接。通过 Hibernation，您可以在需要时恢复工作负载，而无需重新创建状态。\n\n**成本优化：** 对于不需要全天候运行的工作负载，您可以使用 Hibernation 在闲置时降低成本，然后在需要时快速恢复。\n\n**实例维护：** 在 EC2 实例需要进行操作系统更新或其他维护操作时，可以使用 Hibernation 将实例休眠，然后在完成维护后唤醒它，以减少维护期间的停机时间。\n\n==请注意==，<u>不是所有的 EC2 实例类型都支持 Hibernation</u>，您需要选择支持该功能的实例类型并启用它。此外，<u>使用 Hibernation 可能会产生额外的 EBS 存储费用，因为需要存储 Hibernation 快照</u>。所以，在使用 Hibernation 时，需要权衡成本和性能需求。\n","source":"_posts/2022-04-08-shi-yao-shi-aws-ec2-hibernation.markdown","raw":"---\n\ntitle: \"什么是AWS EC2 Hibernation\"\ndate: 2022-04-08 17:00:59 +0800\ncomments: true\ncategories: 云计算\ntags: [云计算, AWS]\ntop: true\n---\n\n`EC2 Hibernation` 是 Amazon Elastic Compute Cloud (EC2) 服务的一个功能，它允许您将 EC2 实例从运行状态转换为休眠状态，然后再次唤醒它，而不会丢失实例的内存中的数据。这个功能非常适合那些需要保持应用程序状态或长时间运行进程的工作负载。\n![](/assets/images/aws/aws-ec2-hibernation-flow.png)\n这里详细说明 EC2 Hibernation 的**工作原理**\n<!--more-->\n### 工作原理\n\n**1.启用 Hibernation：** 要使用 EC2 Hibernation，首先需要在 EC2 实例上启用它。这可以通过使用支持 Hibernation 的实例类型，并在启动时启用 Hibernation 选项来完成。并且EBS卷必须要开启加密。\n![](/assets/images/aws/aws-ec2-hibernation-enable.png)\n\n**2.创建 Hibernation 快照：** 在启用 Hibernation 后，EC2 实例的内存状态将被定期保存到 Amazon Elastic Block Store (EBS) 卷上的 Hibernation 快照中。这确保了在实例休眠时不会丢失内存中的数据。\n\n**3.休眠实例：** 一旦 Hibernation 启用并创建了快照，您可以通过执行 hibernate 命令或使用 AWS 管理控制台将实例转换为休眠状态。在休眠期间，实例的状态和数据将保存在 EBS 卷上。\n\n**4.唤醒实例：** 当您希望恢复实例的运行状态时，只需执行唤醒命令或使用控制台，EC2 实例将从 Hibernation 快照中还原内存状态，并继续运行。\n\n\n### 使用场景\n\nEC2 Hibernation 可以应用于多种使用场景，包括但不限于：\n\n**长时间运行的进程：** 如果您的 EC2 实例运行有状态的应用程序或长时间运行的进程，您可以使用 Hibernation 将实例休眠，以节省计算成本，而无需中断应用程序。\n\n**工作负载保持状态：** 某些工作负载需要保持状态，例如内存中的会话数据或数据库连接。通过 Hibernation，您可以在需要时恢复工作负载，而无需重新创建状态。\n\n**成本优化：** 对于不需要全天候运行的工作负载，您可以使用 Hibernation 在闲置时降低成本，然后在需要时快速恢复。\n\n**实例维护：** 在 EC2 实例需要进行操作系统更新或其他维护操作时，可以使用 Hibernation 将实例休眠，然后在完成维护后唤醒它，以减少维护期间的停机时间。\n\n==请注意==，<u>不是所有的 EC2 实例类型都支持 Hibernation</u>，您需要选择支持该功能的实例类型并启用它。此外，<u>使用 Hibernation 可能会产生额外的 EBS 存储费用，因为需要存储 Hibernation 快照</u>。所以，在使用 Hibernation 时，需要权衡成本和性能需求。\n","slug":"2022-04-08-shi-yao-shi-aws-ec2-hibernation","published":1,"updated":"2023-09-03T00:40:55.542Z","_id":"clm27g4p9005aazv5bwjbeldv","layout":"post","photos":[],"link":"","content":"<p><code>EC2 Hibernation</code> 是 Amazon Elastic Compute Cloud (EC2) 服务的一个功能，它允许您将 EC2 实例从运行状态转换为休眠状态，然后再次唤醒它，而不会丢失实例的内存中的数据。这个功能非常适合那些需要保持应用程序状态或长时间运行进程的工作负载。<br><img src=\"/assets/images/aws/aws-ec2-hibernation-flow.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/aws/aws-ec2-hibernation-flow.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"><br>这里详细说明 EC2 Hibernation 的<strong>工作原理</strong></p>\n<span id=\"more\"></span>\n<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p><strong>1.启用 Hibernation：</strong> 要使用 EC2 Hibernation，首先需要在 EC2 实例上启用它。这可以通过使用支持 Hibernation 的实例类型，并在启动时启用 Hibernation 选项来完成。并且EBS卷必须要开启加密。<br><img src=\"/assets/images/aws/aws-ec2-hibernation-enable.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/aws/aws-ec2-hibernation-enable.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\"></p>\n<p><strong>2.创建 Hibernation 快照：</strong> 在启用 Hibernation 后，EC2 实例的内存状态将被定期保存到 Amazon Elastic Block Store (EBS) 卷上的 Hibernation 快照中。这确保了在实例休眠时不会丢失内存中的数据。</p>\n<p><strong>3.休眠实例：</strong> 一旦 Hibernation 启用并创建了快照，您可以通过执行 hibernate 命令或使用 AWS 管理控制台将实例转换为休眠状态。在休眠期间，实例的状态和数据将保存在 EBS 卷上。</p>\n<p><strong>4.唤醒实例：</strong> 当您希望恢复实例的运行状态时，只需执行唤醒命令或使用控制台，EC2 实例将从 Hibernation 快照中还原内存状态，并继续运行。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>EC2 Hibernation 可以应用于多种使用场景，包括但不限于：</p>\n<p><strong>长时间运行的进程：</strong> 如果您的 EC2 实例运行有状态的应用程序或长时间运行的进程，您可以使用 Hibernation 将实例休眠，以节省计算成本，而无需中断应用程序。</p>\n<p><strong>工作负载保持状态：</strong> 某些工作负载需要保持状态，例如内存中的会话数据或数据库连接。通过 Hibernation，您可以在需要时恢复工作负载，而无需重新创建状态。</p>\n<p><strong>成本优化：</strong> 对于不需要全天候运行的工作负载，您可以使用 Hibernation 在闲置时降低成本，然后在需要时快速恢复。</p>\n<p><strong>实例维护：</strong> 在 EC2 实例需要进行操作系统更新或其他维护操作时，可以使用 Hibernation 将实例休眠，然后在完成维护后唤醒它，以减少维护期间的停机时间。</p>\n<p>&#x3D;&#x3D;请注意&#x3D;&#x3D;，<u>不是所有的 EC2 实例类型都支持 Hibernation</u>，您需要选择支持该功能的实例类型并启用它。此外，<u>使用 Hibernation 可能会产生额外的 EBS 存储费用，因为需要存储 Hibernation 快照</u>。所以，在使用 Hibernation 时，需要权衡成本和性能需求。</p>\n","site":{"data":{}},"excerpt":"<p><code>EC2 Hibernation</code> 是 Amazon Elastic Compute Cloud (EC2) 服务的一个功能，它允许您将 EC2 实例从运行状态转换为休眠状态，然后再次唤醒它，而不会丢失实例的内存中的数据。这个功能非常适合那些需要保持应用程序状态或长时间运行进程的工作负载。<br><img src=\"/assets/images/aws/aws-ec2-hibernation-flow.png\"><br>这里详细说明 EC2 Hibernation 的<strong>工作原理</strong></p>","more":"<h3 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h3><p><strong>1.启用 Hibernation：</strong> 要使用 EC2 Hibernation，首先需要在 EC2 实例上启用它。这可以通过使用支持 Hibernation 的实例类型，并在启动时启用 Hibernation 选项来完成。并且EBS卷必须要开启加密。<br><img src=\"/assets/images/aws/aws-ec2-hibernation-enable.png\"></p>\n<p><strong>2.创建 Hibernation 快照：</strong> 在启用 Hibernation 后，EC2 实例的内存状态将被定期保存到 Amazon Elastic Block Store (EBS) 卷上的 Hibernation 快照中。这确保了在实例休眠时不会丢失内存中的数据。</p>\n<p><strong>3.休眠实例：</strong> 一旦 Hibernation 启用并创建了快照，您可以通过执行 hibernate 命令或使用 AWS 管理控制台将实例转换为休眠状态。在休眠期间，实例的状态和数据将保存在 EBS 卷上。</p>\n<p><strong>4.唤醒实例：</strong> 当您希望恢复实例的运行状态时，只需执行唤醒命令或使用控制台，EC2 实例将从 Hibernation 快照中还原内存状态，并继续运行。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>EC2 Hibernation 可以应用于多种使用场景，包括但不限于：</p>\n<p><strong>长时间运行的进程：</strong> 如果您的 EC2 实例运行有状态的应用程序或长时间运行的进程，您可以使用 Hibernation 将实例休眠，以节省计算成本，而无需中断应用程序。</p>\n<p><strong>工作负载保持状态：</strong> 某些工作负载需要保持状态，例如内存中的会话数据或数据库连接。通过 Hibernation，您可以在需要时恢复工作负载，而无需重新创建状态。</p>\n<p><strong>成本优化：</strong> 对于不需要全天候运行的工作负载，您可以使用 Hibernation 在闲置时降低成本，然后在需要时快速恢复。</p>\n<p><strong>实例维护：</strong> 在 EC2 实例需要进行操作系统更新或其他维护操作时，可以使用 Hibernation 将实例休眠，然后在完成维护后唤醒它，以减少维护期间的停机时间。</p>\n<p>&#x3D;&#x3D;请注意&#x3D;&#x3D;，<u>不是所有的 EC2 实例类型都支持 Hibernation</u>，您需要选择支持该功能的实例类型并启用它。此外，<u>使用 Hibernation 可能会产生额外的 EBS 存储费用，因为需要存储 Hibernation 快照</u>。所以，在使用 Hibernation 时，需要权衡成本和性能需求。</p>"},{"title":"What is Markdown","date":"2013-04-14T06:06:00.000Z","_content":"\nMarkdown is a **text-to-HTML** conversion tool for web writer. It can convert plain text format to  valid `XHTML`(or `HTML`) structure that can be represented by browser.\n\n<!--more-->\n\nMarkdown is very easy to read, very easy to write plain text format. Even though for these people who don't know web technique. \n\nThus, Markdown is two things:\n>- A  plain text formatting syntax.\n\n>- A software tool, written by Perl, and converts plain text format to HTML.\n","source":"_posts/2013-04-14-what-is-markdown.md","raw":"---\ntitle: \"What is Markdown\"\ndate: 2013-04-14 14:06\ncategories: Tools\ntags: [Markdown]\n---\n\nMarkdown is a **text-to-HTML** conversion tool for web writer. It can convert plain text format to  valid `XHTML`(or `HTML`) structure that can be represented by browser.\n\n<!--more-->\n\nMarkdown is very easy to read, very easy to write plain text format. Even though for these people who don't know web technique. \n\nThus, Markdown is two things:\n>- A  plain text formatting syntax.\n\n>- A software tool, written by Perl, and converts plain text format to HTML.\n","slug":"2013-04-14-what-is-markdown","published":1,"updated":"2023-09-02T16:35:34.172Z","_id":"clm27quyk0000c2v5es0yd7m9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Markdown is a <strong>text-to-HTML</strong> conversion tool for web writer. It can convert plain text format to  valid <code>XHTML</code>(or <code>HTML</code>) structure that can be represented by browser.</p>\n<span id=\"more\"></span>\n\n<p>Markdown is very easy to read, very easy to write plain text format. Even though for these people who don’t know web technique. </p>\n<p>Thus, Markdown is two things:</p>\n<blockquote>\n<ul>\n<li>A  plain text formatting syntax.</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>A software tool, written by Perl, and converts plain text format to HTML.</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Markdown is a <strong>text-to-HTML</strong> conversion tool for web writer. It can convert plain text format to  valid <code>XHTML</code>(or <code>HTML</code>) structure that can be represented by browser.</p>","more":"<p>Markdown is very easy to read, very easy to write plain text format. Even though for these people who don’t know web technique. </p>\n<p>Thus, Markdown is two things:</p>\n<blockquote>\n<ul>\n<li>A  plain text formatting syntax.</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>A software tool, written by Perl, and converts plain text format to HTML.</li>\n</ul>\n</blockquote>"},{"title":"Markdonw syntax for block elements","date":"2013-05-11T12:06:00.000Z","_content":"\n### Line breaks\nMarkdown can't break line automatically in paragraph. The break line is a break tag `< br />` in HTML. If you want to break line in paragraph, you need to `end a line with two or more spaces`, then type return.  \n\n<!--more-->\n\n### Heads\nMarkdown supports two styles for heads, one style is Setext, another is atx.  \n\n- Setext style headers are \"underlined\" using equal signs `=` (for `first-level-headers`) and using dashed signs `-` (for `second-level-headers`).  \n\n```\nThis is an H1\n====\nThis is an H2\n----\n```\n\n- Atx style headers use 1 to 6 hash characters `#` at the start of the line, corresponding to header levels 1-6.  \n\n```\n# This is an H1\n## This is an H2\n###### This is an H6\n```\n\n### Blockquotes\nJust put a `>` symbol before each line, like this:  \n\n```\n> This is a blockquote line \n```\n\nYou can put the symbol `>` before the first line of a hard-wrapped paragraph.  \nAnd also blockquotes can be nested (i.e. a blackquote-in-a-blackquote) by adding additional levels of the symbol `>`  \n\n```\n> This is first level blockquote\n> > This is nested blockquote \n```\n\nBlockquotes can contains other Markdown elements, including header, list, and codeblocks.  \n\n```\n> # This is an H1\n> - This is first list item\n> - This is second list item\n```\n\n### Lists\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.  \n\n* Unordered lists use asterisks `*`, pluses `+`, hyphens `-` before each list line.  \n\n```\n* item1\n* item2\n+ item3\n- item4\n```\n\n* Ordered list user numbers followed by each line:  \n\n```\n1. item1\n2. item2\n3. item3\n```\n\n>***Note:***\n>If you want a ordered list, you need use ordinal numbers in you ordered Markdown lists, and start 1 at first item.  \n\n### Code blocks\nPre-formatted code blocks are used fro programming or other markup source code, rather than forming normal paragraph.  \n\nIts' very simple to produce code blocks, just indent every line of block at least 4 spaces or 1 tab.  \n\n\tThis codeblock use 1 tab to generate\n\n### Horizontal rules\nThe horizontal rule tag < hr /> is used to divide up and down content.  and you can place at least three asterisks `*`, hyphens `-`, or underscores `_` on a line by themselves.  \n\n\t-----\n\t*****\n\t_____","source":"_posts/2013-05-11-markdonw-syntax-for-block-elements.md","raw":"---\ntitle: \"Markdonw syntax for block elements\"\ndate: 2013-05-11 20:06\ncategories: Tools\ntags: [Markdown]\n---\n\n### Line breaks\nMarkdown can't break line automatically in paragraph. The break line is a break tag `< br />` in HTML. If you want to break line in paragraph, you need to `end a line with two or more spaces`, then type return.  \n\n<!--more-->\n\n### Heads\nMarkdown supports two styles for heads, one style is Setext, another is atx.  \n\n- Setext style headers are \"underlined\" using equal signs `=` (for `first-level-headers`) and using dashed signs `-` (for `second-level-headers`).  \n\n```\nThis is an H1\n====\nThis is an H2\n----\n```\n\n- Atx style headers use 1 to 6 hash characters `#` at the start of the line, corresponding to header levels 1-6.  \n\n```\n# This is an H1\n## This is an H2\n###### This is an H6\n```\n\n### Blockquotes\nJust put a `>` symbol before each line, like this:  \n\n```\n> This is a blockquote line \n```\n\nYou can put the symbol `>` before the first line of a hard-wrapped paragraph.  \nAnd also blockquotes can be nested (i.e. a blackquote-in-a-blackquote) by adding additional levels of the symbol `>`  \n\n```\n> This is first level blockquote\n> > This is nested blockquote \n```\n\nBlockquotes can contains other Markdown elements, including header, list, and codeblocks.  \n\n```\n> # This is an H1\n> - This is first list item\n> - This is second list item\n```\n\n### Lists\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.  \n\n* Unordered lists use asterisks `*`, pluses `+`, hyphens `-` before each list line.  \n\n```\n* item1\n* item2\n+ item3\n- item4\n```\n\n* Ordered list user numbers followed by each line:  \n\n```\n1. item1\n2. item2\n3. item3\n```\n\n>***Note:***\n>If you want a ordered list, you need use ordinal numbers in you ordered Markdown lists, and start 1 at first item.  \n\n### Code blocks\nPre-formatted code blocks are used fro programming or other markup source code, rather than forming normal paragraph.  \n\nIts' very simple to produce code blocks, just indent every line of block at least 4 spaces or 1 tab.  \n\n\tThis codeblock use 1 tab to generate\n\n### Horizontal rules\nThe horizontal rule tag < hr /> is used to divide up and down content.  and you can place at least three asterisks `*`, hyphens `-`, or underscores `_` on a line by themselves.  \n\n\t-----\n\t*****\n\t_____","slug":"2013-05-11-markdonw-syntax-for-block-elements","published":1,"updated":"2023-09-02T17:43:23.810Z","_id":"clm27r4s30003c2v5b7ku1tvt","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Line-breaks\"><a href=\"#Line-breaks\" class=\"headerlink\" title=\"Line breaks\"></a>Line breaks</h3><p>Markdown can’t break line automatically in paragraph. The break line is a break tag <code>&lt; br /&gt;</code> in HTML. If you want to break line in paragraph, you need to <code>end a line with two or more spaces</code>, then type return.  </p>\n<span id=\"more\"></span>\n\n<h3 id=\"Heads\"><a href=\"#Heads\" class=\"headerlink\" title=\"Heads\"></a>Heads</h3><p>Markdown supports two styles for heads, one style is Setext, another is atx.  </p>\n<ul>\n<li>Setext style headers are “underlined” using equal signs <code>=</code> (for <code>first-level-headers</code>) and using dashed signs <code>-</code> (for <code>second-level-headers</code>).</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is an H1</span><br><span class=\"line\">====</span><br><span class=\"line\">This is an H2</span><br><span class=\"line\">----</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Atx style headers use 1 to 6 hash characters <code>#</code> at the start of the line, corresponding to header levels 1-6.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is an H1</span><br><span class=\"line\">## This is an H2</span><br><span class=\"line\">###### This is an H6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Blockquotes\"><a href=\"#Blockquotes\" class=\"headerlink\" title=\"Blockquotes\"></a>Blockquotes</h3><p>Just put a <code>&gt;</code> symbol before each line, like this:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; This is a blockquote line </span><br></pre></td></tr></table></figure>\n\n<p>You can put the symbol <code>&gt;</code> before the first line of a hard-wrapped paragraph.<br>And also blockquotes can be nested (i.e. a blackquote-in-a-blackquote) by adding additional levels of the symbol <code>&gt;</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; This is first level blockquote</span><br><span class=\"line\">&gt; &gt; This is nested blockquote </span><br></pre></td></tr></table></figure>\n\n<p>Blockquotes can contains other Markdown elements, including header, list, and codeblocks.  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; # This is an H1</span><br><span class=\"line\">&gt; - This is first list item</span><br><span class=\"line\">&gt; - This is second list item</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.  </p>\n<ul>\n<li>Unordered lists use asterisks <code>*</code>, pluses <code>+</code>, hyphens <code>-</code> before each list line.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* item1</span><br><span class=\"line\">* item2</span><br><span class=\"line\">+ item3</span><br><span class=\"line\">- item4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Ordered list user numbers followed by each line:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. item1</span><br><span class=\"line\">2. item2</span><br><span class=\"line\">3. item3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><em><strong>Note:</strong></em><br>If you want a ordered list, you need use ordinal numbers in you ordered Markdown lists, and start 1 at first item.  </p>\n</blockquote>\n<h3 id=\"Code-blocks\"><a href=\"#Code-blocks\" class=\"headerlink\" title=\"Code blocks\"></a>Code blocks</h3><p>Pre-formatted code blocks are used fro programming or other markup source code, rather than forming normal paragraph.  </p>\n<p>Its’ very simple to produce code blocks, just indent every line of block at least 4 spaces or 1 tab.  </p>\n<pre><code>This codeblock use 1 tab to generate\n</code></pre>\n<h3 id=\"Horizontal-rules\"><a href=\"#Horizontal-rules\" class=\"headerlink\" title=\"Horizontal rules\"></a>Horizontal rules</h3><p>The horizontal rule tag &lt; hr &#x2F;&gt; is used to divide up and down content.  and you can place at least three asterisks <code>*</code>, hyphens <code>-</code>, or underscores <code>_</code> on a line by themselves.  </p>\n<pre><code>-----\n*****\n_____\n</code></pre>\n","site":{"data":{}},"excerpt":"<h3 id=\"Line-breaks\"><a href=\"#Line-breaks\" class=\"headerlink\" title=\"Line breaks\"></a>Line breaks</h3><p>Markdown can’t break line automatically in paragraph. The break line is a break tag <code>&lt; br /&gt;</code> in HTML. If you want to break line in paragraph, you need to <code>end a line with two or more spaces</code>, then type return.  </p>","more":"<h3 id=\"Heads\"><a href=\"#Heads\" class=\"headerlink\" title=\"Heads\"></a>Heads</h3><p>Markdown supports two styles for heads, one style is Setext, another is atx.  </p>\n<ul>\n<li>Setext style headers are “underlined” using equal signs <code>=</code> (for <code>first-level-headers</code>) and using dashed signs <code>-</code> (for <code>second-level-headers</code>).</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is an H1</span><br><span class=\"line\">====</span><br><span class=\"line\">This is an H2</span><br><span class=\"line\">----</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Atx style headers use 1 to 6 hash characters <code>#</code> at the start of the line, corresponding to header levels 1-6.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is an H1</span><br><span class=\"line\">## This is an H2</span><br><span class=\"line\">###### This is an H6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Blockquotes\"><a href=\"#Blockquotes\" class=\"headerlink\" title=\"Blockquotes\"></a>Blockquotes</h3><p>Just put a <code>&gt;</code> symbol before each line, like this:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; This is a blockquote line </span><br></pre></td></tr></table></figure>\n\n<p>You can put the symbol <code>&gt;</code> before the first line of a hard-wrapped paragraph.<br>And also blockquotes can be nested (i.e. a blackquote-in-a-blackquote) by adding additional levels of the symbol <code>&gt;</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; This is first level blockquote</span><br><span class=\"line\">&gt; &gt; This is nested blockquote </span><br></pre></td></tr></table></figure>\n\n<p>Blockquotes can contains other Markdown elements, including header, list, and codeblocks.  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; # This is an H1</span><br><span class=\"line\">&gt; - This is first list item</span><br><span class=\"line\">&gt; - This is second list item</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.  </p>\n<ul>\n<li>Unordered lists use asterisks <code>*</code>, pluses <code>+</code>, hyphens <code>-</code> before each list line.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* item1</span><br><span class=\"line\">* item2</span><br><span class=\"line\">+ item3</span><br><span class=\"line\">- item4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Ordered list user numbers followed by each line:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. item1</span><br><span class=\"line\">2. item2</span><br><span class=\"line\">3. item3</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><em><strong>Note:</strong></em><br>If you want a ordered list, you need use ordinal numbers in you ordered Markdown lists, and start 1 at first item.  </p>\n</blockquote>\n<h3 id=\"Code-blocks\"><a href=\"#Code-blocks\" class=\"headerlink\" title=\"Code blocks\"></a>Code blocks</h3><p>Pre-formatted code blocks are used fro programming or other markup source code, rather than forming normal paragraph.  </p>\n<p>Its’ very simple to produce code blocks, just indent every line of block at least 4 spaces or 1 tab.  </p>\n<pre><code>This codeblock use 1 tab to generate\n</code></pre>\n<h3 id=\"Horizontal-rules\"><a href=\"#Horizontal-rules\" class=\"headerlink\" title=\"Horizontal rules\"></a>Horizontal rules</h3><p>The horizontal rule tag &lt; hr &#x2F;&gt; is used to divide up and down content.  and you can place at least three asterisks <code>*</code>, hyphens <code>-</code>, or underscores <code>_</code> on a line by themselves.  </p>\n<pre><code>-----\n*****\n_____\n</code></pre>"},{"title":"What editor tools used for Markdown","date":"2013-05-21T11:06:00.000Z","_content":"\nThere have many editor tools for Markdown now, but we just recommend a few of popular tools for you. You can choose it which you like. Hope it will be helpful for you.\n\n### Online tools\n- [StackEdit](https://stackedit.io/)\n\n\t In browser Markdown editor, it supplies many commands to create Markdown syntax instead of type it manually. And also it have supported many other functions, for example import, export and manage Markdown files.\n\t \n<!--more-->\n\t \n- [Dillinger](http://dillinger.io/)\n\n\tIt's online Markdown editor too,  but it supports functions less than `StackEdit` supports. Oh, one interesting things, you can change the theme whatever you like.\n\n>***Tip:***\n\n>Strongly recommend use `StackEdit` online editor. It supports almost all very useful functions for you. Trust me, you will like it. Just try it out. And one more thing, this blog is written with `StackEdit`.\n\n### Local tools\n- [MarkdownPad](http://markdownpad.com/)\n\n\tIt supplies many keyboard shortcuts and menu tools. \n\n- [ReText](http://sourceforge.net/p/retext/home/ReText/)\n\n\tIt can export the edited content to `PDF`, `OCD`, `HTML` and plain text file.\n\t\n- [Mou](http://mouapp.com/)\n\n\tMou is a epic Markdown editor on Mac. It supports almost all useful functions.\n\t \n- [CuteMarkEd](http://cloose.github.io/CuteMarkEd)\n\n\tIt supplies real time view content and math expression\n\t\n- [MarkPad](http://code52.org/DownmarkerWPF/)\n\n\tIt's a open source Markdown editor. And it use windows 8 metro style.\n\n- [Haroopad](http://pad.haroopress.com/user.html)\n\n\tIt cover three popular system, Windows, Mac OS X, Linux. Strongly recommend use it under Linux system.\n","source":"_posts/2013-05-21-what-editor-tools-used-for-markdown.md","raw":"---\ntitle: \"What editor tools used for Markdown\"\ndate: 2013-05-21 19:06\ncategories: Tools\ntags: [Markdown]\n---\n\nThere have many editor tools for Markdown now, but we just recommend a few of popular tools for you. You can choose it which you like. Hope it will be helpful for you.\n\n### Online tools\n- [StackEdit](https://stackedit.io/)\n\n\t In browser Markdown editor, it supplies many commands to create Markdown syntax instead of type it manually. And also it have supported many other functions, for example import, export and manage Markdown files.\n\t \n<!--more-->\n\t \n- [Dillinger](http://dillinger.io/)\n\n\tIt's online Markdown editor too,  but it supports functions less than `StackEdit` supports. Oh, one interesting things, you can change the theme whatever you like.\n\n>***Tip:***\n\n>Strongly recommend use `StackEdit` online editor. It supports almost all very useful functions for you. Trust me, you will like it. Just try it out. And one more thing, this blog is written with `StackEdit`.\n\n### Local tools\n- [MarkdownPad](http://markdownpad.com/)\n\n\tIt supplies many keyboard shortcuts and menu tools. \n\n- [ReText](http://sourceforge.net/p/retext/home/ReText/)\n\n\tIt can export the edited content to `PDF`, `OCD`, `HTML` and plain text file.\n\t\n- [Mou](http://mouapp.com/)\n\n\tMou is a epic Markdown editor on Mac. It supports almost all useful functions.\n\t \n- [CuteMarkEd](http://cloose.github.io/CuteMarkEd)\n\n\tIt supplies real time view content and math expression\n\t\n- [MarkPad](http://code52.org/DownmarkerWPF/)\n\n\tIt's a open source Markdown editor. And it use windows 8 metro style.\n\n- [Haroopad](http://pad.haroopress.com/user.html)\n\n\tIt cover three popular system, Windows, Mac OS X, Linux. Strongly recommend use it under Linux system.\n","slug":"2013-05-21-what-editor-tools-used-for-markdown","published":1,"updated":"2023-09-02T17:43:32.301Z","_id":"clm27rpf30006c2v50idq5ott","comments":1,"layout":"post","photos":[],"link":"","content":"<p>There have many editor tools for Markdown now, but we just recommend a few of popular tools for you. You can choose it which you like. Hope it will be helpful for you.</p>\n<h3 id=\"Online-tools\"><a href=\"#Online-tools\" class=\"headerlink\" title=\"Online tools\"></a>Online tools</h3><ul>\n<li><p><a href=\"https://stackedit.io/\">StackEdit</a></p>\n<p>   In browser Markdown editor, it supplies many commands to create Markdown syntax instead of type it manually. And also it have supported many other functions, for example import, export and manage Markdown files.</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><p><a href=\"http://dillinger.io/\">Dillinger</a></p>\n<p>  It’s online Markdown editor too,  but it supports functions less than <code>StackEdit</code> supports. Oh, one interesting things, you can change the theme whatever you like.</p>\n</li>\n</ul>\n<blockquote>\n<p><em><strong>Tip:</strong></em></p>\n</blockquote>\n<blockquote>\n<p>Strongly recommend use <code>StackEdit</code> online editor. It supports almost all very useful functions for you. Trust me, you will like it. Just try it out. And one more thing, this blog is written with <code>StackEdit</code>.</p>\n</blockquote>\n<h3 id=\"Local-tools\"><a href=\"#Local-tools\" class=\"headerlink\" title=\"Local tools\"></a>Local tools</h3><ul>\n<li><p><a href=\"http://markdownpad.com/\">MarkdownPad</a></p>\n<p>  It supplies many keyboard shortcuts and menu tools. </p>\n</li>\n<li><p><a href=\"http://sourceforge.net/p/retext/home/ReText/\">ReText</a></p>\n<p>  It can export the edited content to <code>PDF</code>, <code>OCD</code>, <code>HTML</code> and plain text file.</p>\n</li>\n<li><p><a href=\"http://mouapp.com/\">Mou</a></p>\n<p>  Mou is a epic Markdown editor on Mac. It supports almost all useful functions.</p>\n</li>\n<li><p><a href=\"http://cloose.github.io/CuteMarkEd\">CuteMarkEd</a></p>\n<p>  It supplies real time view content and math expression</p>\n</li>\n<li><p><a href=\"http://code52.org/DownmarkerWPF/\">MarkPad</a></p>\n<p>  It’s a open source Markdown editor. And it use windows 8 metro style.</p>\n</li>\n<li><p><a href=\"http://pad.haroopress.com/user.html\">Haroopad</a></p>\n<p>  It cover three popular system, Windows, Mac OS X, Linux. Strongly recommend use it under Linux system.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>There have many editor tools for Markdown now, but we just recommend a few of popular tools for you. You can choose it which you like. Hope it will be helpful for you.</p>\n<h3 id=\"Online-tools\"><a href=\"#Online-tools\" class=\"headerlink\" title=\"Online tools\"></a>Online tools</h3><ul>\n<li><p><a href=\"https://stackedit.io/\">StackEdit</a></p>\n<p>   In browser Markdown editor, it supplies many commands to create Markdown syntax instead of type it manually. And also it have supported many other functions, for example import, export and manage Markdown files.</p>\n</li>\n</ul>","more":"<ul>\n<li><p><a href=\"http://dillinger.io/\">Dillinger</a></p>\n<p>  It’s online Markdown editor too,  but it supports functions less than <code>StackEdit</code> supports. Oh, one interesting things, you can change the theme whatever you like.</p>\n</li>\n</ul>\n<blockquote>\n<p><em><strong>Tip:</strong></em></p>\n</blockquote>\n<blockquote>\n<p>Strongly recommend use <code>StackEdit</code> online editor. It supports almost all very useful functions for you. Trust me, you will like it. Just try it out. And one more thing, this blog is written with <code>StackEdit</code>.</p>\n</blockquote>\n<h3 id=\"Local-tools\"><a href=\"#Local-tools\" class=\"headerlink\" title=\"Local tools\"></a>Local tools</h3><ul>\n<li><p><a href=\"http://markdownpad.com/\">MarkdownPad</a></p>\n<p>  It supplies many keyboard shortcuts and menu tools. </p>\n</li>\n<li><p><a href=\"http://sourceforge.net/p/retext/home/ReText/\">ReText</a></p>\n<p>  It can export the edited content to <code>PDF</code>, <code>OCD</code>, <code>HTML</code> and plain text file.</p>\n</li>\n<li><p><a href=\"http://mouapp.com/\">Mou</a></p>\n<p>  Mou is a epic Markdown editor on Mac. It supports almost all useful functions.</p>\n</li>\n<li><p><a href=\"http://cloose.github.io/CuteMarkEd\">CuteMarkEd</a></p>\n<p>  It supplies real time view content and math expression</p>\n</li>\n<li><p><a href=\"http://code52.org/DownmarkerWPF/\">MarkPad</a></p>\n<p>  It’s a open source Markdown editor. And it use windows 8 metro style.</p>\n</li>\n<li><p><a href=\"http://pad.haroopress.com/user.html\">Haroopad</a></p>\n<p>  It cover three popular system, Windows, Mac OS X, Linux. Strongly recommend use it under Linux system.</p>\n</li>\n</ul>"},{"title":"Markdown syntax for span elements","date":"2013-06-24T08:06:00.000Z","_content":"\n### Links\n`Markdown` supports two styles for Links:  \n\n- *inline* \n\t> ***Syntax:***  \n\t> `[inline link text](www.inlinelink.com \"optional title\")`\n\n    > ***Effect:***  \n    >[inline link text](www.inlinelink.com \"optional title\")\n\t\n<!--more-->\n- *reference*\n   > ***Syntax:***  \n   > `[reference link text][id]`\n   > `[id]: www.referencelink.com \"optional title\"`\n\n   >***Effect:***  \n   >[reference link text][1]\n\n>***Note:***  \n>The `optional title` is not necessary.  You can input it for your demand.\n>Link definitions can be placed anywhere in your `Markdown` document.\n\n[1]: www.referencelink.com \"optional title\" \n\n\n### Emphasis\n`Markdown` uses asterisk(*) and underscore(_) symbol to wraps the text that you want to emphasis.  \n\n- Use one symbol asterisk`*` or underscore`_` to wrap text, it will produce the `< em>` tag of HTML Tags.  \n\t>***Syntax:***  \n\t>`*Sample Text*`  or `_Sample Text_`\n\n\t>___Effect:___  \n\t>*Sample Text* or _Sample Text_\n\n- Use double symbols asterisk`*` or underscore`_`, it will produce the `< strong>` tag of HTML Tags.  \n\t>***Syntax:***  \n\t>`**Sample Text**` or `__Sample Text__`\n\n\t>***Effect:***  \n\t>**Sample Text** or __Sample Text__\n\n### Code\n`Markdown` uses backtick quotes`` ` `` to wrap the code text. It will produce the `< code>` tag of HTML tags.\n>***Syntax:***  \n>`` `Code statement` ``\n\n>***Effect:***  \n>`Code statement`\n\nAnd if you want to wrap the backtick quote`` ` `` symbol. you can use double backticks as the opening and closing delimiter.  \n>***Syntax:***  \n> \\` \\` There is a literal backtick(\\`) here \\` \\`\n\n>***Effect:***  \n>`` There is a literal backtick(`) here``\n\n### Image\n`Markdown` uses an image syntax that is intended to resemble the syntax for links, allowing *inline* and *reference*  \n\n- *inline*\n    >***Syntax:***  \n\t>`![alt text](http://daringfireball.net/graphics/logos/ \"optional title\")`  \n\t\n    >***Effect:***  \n\t>![alt text](http://daringfireball.net/graphics/logos/ \"optional title\")\n\n- *reference*\n\t> ***Syntax:***  \n\t>`![alt text][id]`\n\t>`[id]:http://daringfireball.net/graphics/logos/ \"optional title\"`  \n\t\n    >***Effect:***  \n\t>![alt text][id]\n\t\n[id]:http://daringfireball.net/graphics/logos/ \"optional title\"\n\n>***Note:***  \n>`Markdown` has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML `< img>` tags.\n\n\t\n\t\n\n","source":"_posts/2013-06-24-markdown-syntax-for-span-elements.md","raw":"---\ntitle: \"Markdown syntax for span elements\"\ndate: 2013-06-24 16:06\ncategories: Tools\ntags: [Markdown]\n---\n\n### Links\n`Markdown` supports two styles for Links:  \n\n- *inline* \n\t> ***Syntax:***  \n\t> `[inline link text](www.inlinelink.com \"optional title\")`\n\n    > ***Effect:***  \n    >[inline link text](www.inlinelink.com \"optional title\")\n\t\n<!--more-->\n- *reference*\n   > ***Syntax:***  \n   > `[reference link text][id]`\n   > `[id]: www.referencelink.com \"optional title\"`\n\n   >***Effect:***  \n   >[reference link text][1]\n\n>***Note:***  \n>The `optional title` is not necessary.  You can input it for your demand.\n>Link definitions can be placed anywhere in your `Markdown` document.\n\n[1]: www.referencelink.com \"optional title\" \n\n\n### Emphasis\n`Markdown` uses asterisk(*) and underscore(_) symbol to wraps the text that you want to emphasis.  \n\n- Use one symbol asterisk`*` or underscore`_` to wrap text, it will produce the `< em>` tag of HTML Tags.  \n\t>***Syntax:***  \n\t>`*Sample Text*`  or `_Sample Text_`\n\n\t>___Effect:___  \n\t>*Sample Text* or _Sample Text_\n\n- Use double symbols asterisk`*` or underscore`_`, it will produce the `< strong>` tag of HTML Tags.  \n\t>***Syntax:***  \n\t>`**Sample Text**` or `__Sample Text__`\n\n\t>***Effect:***  \n\t>**Sample Text** or __Sample Text__\n\n### Code\n`Markdown` uses backtick quotes`` ` `` to wrap the code text. It will produce the `< code>` tag of HTML tags.\n>***Syntax:***  \n>`` `Code statement` ``\n\n>***Effect:***  \n>`Code statement`\n\nAnd if you want to wrap the backtick quote`` ` `` symbol. you can use double backticks as the opening and closing delimiter.  \n>***Syntax:***  \n> \\` \\` There is a literal backtick(\\`) here \\` \\`\n\n>***Effect:***  \n>`` There is a literal backtick(`) here``\n\n### Image\n`Markdown` uses an image syntax that is intended to resemble the syntax for links, allowing *inline* and *reference*  \n\n- *inline*\n    >***Syntax:***  \n\t>`![alt text](http://daringfireball.net/graphics/logos/ \"optional title\")`  \n\t\n    >***Effect:***  \n\t>![alt text](http://daringfireball.net/graphics/logos/ \"optional title\")\n\n- *reference*\n\t> ***Syntax:***  \n\t>`![alt text][id]`\n\t>`[id]:http://daringfireball.net/graphics/logos/ \"optional title\"`  \n\t\n    >***Effect:***  \n\t>![alt text][id]\n\t\n[id]:http://daringfireball.net/graphics/logos/ \"optional title\"\n\n>***Note:***  \n>`Markdown` has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML `< img>` tags.\n\n\t\n\t\n\n","slug":"2013-06-24-markdown-syntax-for-span-elements","published":1,"updated":"2023-09-02T17:45:14.467Z","_id":"clm27rxvv0009c2v513v812tc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h3><p><code>Markdown</code> supports two styles for Links:  </p>\n<ul>\n<li><em>inline</em> <blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>[inline link text](www.inlinelink.com &quot;optional title&quot;)</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><a href=\"www.inlinelink.com\" title=\"optional title\">inline link text</a></p>\n</blockquote>\n</li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><em>reference</em><blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>[reference link text][id]</code><br><code>[id]: www.referencelink.com &quot;optional title&quot;</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><a href=\"www.referencelink.com\" title=\"optional title\">reference link text</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><em><strong>Note:</strong></em><br>The <code>optional title</code> is not necessary.  You can input it for your demand.<br>Link definitions can be placed anywhere in your <code>Markdown</code> document.</p>\n</blockquote>\n<h3 id=\"Emphasis\"><a href=\"#Emphasis\" class=\"headerlink\" title=\"Emphasis\"></a>Emphasis</h3><p><code>Markdown</code> uses asterisk(*) and underscore(_) symbol to wraps the text that you want to emphasis.  </p>\n<ul>\n<li><p>Use one symbol asterisk<code>*</code> or underscore<code>_</code> to wrap text, it will produce the <code>&lt; em&gt;</code> tag of HTML Tags.  </p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>*Sample Text*</code>  or <code>_Sample Text_</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><em>Sample Text</em> or <em>Sample Text</em></p>\n</blockquote>\n</li>\n<li><p>Use double symbols asterisk<code>*</code> or underscore<code>_</code>, it will produce the <code>&lt; strong&gt;</code> tag of HTML Tags.  </p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>**Sample Text**</code> or <code>__Sample Text__</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><strong>Sample Text</strong> or <strong>Sample Text</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p><code>Markdown</code> uses backtick quotes<code>`</code> to wrap the code text. It will produce the <code>&lt; code&gt;</code> tag of HTML tags.</p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>`Code statement`</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><code>Code statement</code></p>\n</blockquote>\n<p>And if you want to wrap the backtick quote<code>`</code> symbol. you can use double backticks as the opening and closing delimiter.  </p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br>` ` There is a literal backtick(`) here ` `</p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><code> There is a literal backtick(`) here</code></p>\n</blockquote>\n<h3 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h3><p><code>Markdown</code> uses an image syntax that is intended to resemble the syntax for links, allowing <em>inline</em> and <em>reference</em>  </p>\n<ul>\n<li><p><em>inline</em></p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>![alt text](http://daringfireball.net/graphics/logos/ &quot;optional title&quot;)</code>  </p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><img src=\"http://daringfireball.net/graphics/logos/\" class=\"lazyload placeholder\" data-srcset=\"http://daringfireball.net/graphics/logos/\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"alt text\" title=\"optional title\"></p>\n</blockquote>\n</li>\n<li><p><em>reference</em></p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>![alt text][id]</code><br><code>[id]:http://daringfireball.net/graphics/logos/ &quot;optional title&quot;</code>  </p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><img src=\"http://daringfireball.net/graphics/logos/\" class=\"lazyload placeholder\" data-srcset=\"http://daringfireball.net/graphics/logos/\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"alt text\" title=\"optional title\"></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><em><strong>Note:</strong></em><br><code>Markdown</code> has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML <code>&lt; img&gt;</code> tags.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h3><p><code>Markdown</code> supports two styles for Links:  </p>\n<ul>\n<li><em>inline</em> <blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>[inline link text](www.inlinelink.com &quot;optional title&quot;)</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><a href=\"www.inlinelink.com\" title=\"optional title\">inline link text</a></p>\n</blockquote>\n</li>\n</ul>","more":"<ul>\n<li><em>reference</em><blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>[reference link text][id]</code><br><code>[id]: www.referencelink.com &quot;optional title&quot;</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><a href=\"www.referencelink.com\" title=\"optional title\">reference link text</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><em><strong>Note:</strong></em><br>The <code>optional title</code> is not necessary.  You can input it for your demand.<br>Link definitions can be placed anywhere in your <code>Markdown</code> document.</p>\n</blockquote>\n<h3 id=\"Emphasis\"><a href=\"#Emphasis\" class=\"headerlink\" title=\"Emphasis\"></a>Emphasis</h3><p><code>Markdown</code> uses asterisk(*) and underscore(_) symbol to wraps the text that you want to emphasis.  </p>\n<ul>\n<li><p>Use one symbol asterisk<code>*</code> or underscore<code>_</code> to wrap text, it will produce the <code>&lt; em&gt;</code> tag of HTML Tags.  </p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>*Sample Text*</code>  or <code>_Sample Text_</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><em>Sample Text</em> or <em>Sample Text</em></p>\n</blockquote>\n</li>\n<li><p>Use double symbols asterisk<code>*</code> or underscore<code>_</code>, it will produce the <code>&lt; strong&gt;</code> tag of HTML Tags.  </p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>**Sample Text**</code> or <code>__Sample Text__</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><strong>Sample Text</strong> or <strong>Sample Text</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p><code>Markdown</code> uses backtick quotes<code>`</code> to wrap the code text. It will produce the <code>&lt; code&gt;</code> tag of HTML tags.</p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>`Code statement`</code></p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><code>Code statement</code></p>\n</blockquote>\n<p>And if you want to wrap the backtick quote<code>`</code> symbol. you can use double backticks as the opening and closing delimiter.  </p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br>` ` There is a literal backtick(`) here ` `</p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><code> There is a literal backtick(`) here</code></p>\n</blockquote>\n<h3 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h3><p><code>Markdown</code> uses an image syntax that is intended to resemble the syntax for links, allowing <em>inline</em> and <em>reference</em>  </p>\n<ul>\n<li><p><em>inline</em></p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>![alt text](http://daringfireball.net/graphics/logos/ &quot;optional title&quot;)</code>  </p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><img src=\"http://daringfireball.net/graphics/logos/\" alt=\"alt text\" title=\"optional title\"></p>\n</blockquote>\n</li>\n<li><p><em>reference</em></p>\n<blockquote>\n<p><em><strong>Syntax:</strong></em><br><code>![alt text][id]</code><br><code>[id]:http://daringfireball.net/graphics/logos/ &quot;optional title&quot;</code>  </p>\n</blockquote>\n<blockquote>\n<p><em><strong>Effect:</strong></em><br><img src=\"http://daringfireball.net/graphics/logos/\" alt=\"alt text\" title=\"optional title\"></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><em><strong>Note:</strong></em><br><code>Markdown</code> has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML <code>&lt; img&gt;</code> tags.</p>\n</blockquote>"},{"title":"Backslash escapes in Markdown","date":"2013-07-03T03:02:00.000Z","_content":"\n`Markdown` allows you to use backslash to generate literal characters that possesses\nspecial meaning in `Markdown` syntax.  \n\n`Markdown` provides backslash escapes for the following characters:  \n>- \\ blackslash\n>- ` backtick\n>- \\* asterisk\n>- _ underscore\n>- {} curly braces\n>- [] square brackets\n>- () parentheses\n>- \\# hash mark\n>- \\+ push sign\n>- \\- minus sign (hyphen)\n>- . dot\n>- ! exclamation mark","source":"_posts/2013-07-03-backslash-escapes-in-markdown.md","raw":"---\ntitle: \"Backslash escapes in Markdown\"\ndate: 2013-07-03 11:02\ncategories: Tools\ntags: [Markdown]\n---\n\n`Markdown` allows you to use backslash to generate literal characters that possesses\nspecial meaning in `Markdown` syntax.  \n\n`Markdown` provides backslash escapes for the following characters:  \n>- \\ blackslash\n>- ` backtick\n>- \\* asterisk\n>- _ underscore\n>- {} curly braces\n>- [] square brackets\n>- () parentheses\n>- \\# hash mark\n>- \\+ push sign\n>- \\- minus sign (hyphen)\n>- . dot\n>- ! exclamation mark","slug":"2013-07-03-backslash-escapes-in-markdown","published":1,"updated":"2023-09-02T16:35:34.195Z","_id":"clm27sev2000cc2v5d07z28g5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>Markdown</code> allows you to use backslash to generate literal characters that possesses<br>special meaning in <code>Markdown</code> syntax.  </p>\n<p><code>Markdown</code> provides backslash escapes for the following characters:  </p>\n<blockquote>\n<ul>\n<li>\\ blackslash</li>\n<li>&#96; backtick</li>\n<li>* asterisk</li>\n<li>_ underscore</li>\n<li>{} curly braces</li>\n<li>[] square brackets</li>\n<li>() parentheses</li>\n<li># hash mark</li>\n<li>+ push sign</li>\n<li>- minus sign (hyphen)</li>\n<li>. dot</li>\n<li>! exclamation mark</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><code>Markdown</code> allows you to use backslash to generate literal characters that possesses<br>special meaning in <code>Markdown</code> syntax.  </p>\n<p><code>Markdown</code> provides backslash escapes for the following characters:  </p>\n<blockquote>\n<ul>\n<li>\\ blackslash</li>\n<li>&#96; backtick</li>\n<li>* asterisk</li>\n<li>_ underscore</li>\n<li>{} curly braces</li>\n<li>[] square brackets</li>\n<li>() parentheses</li>\n<li># hash mark</li>\n<li>+ push sign</li>\n<li>- minus sign (hyphen)</li>\n<li>. dot</li>\n<li>! exclamation mark</li>\n</ul>\n</blockquote>\n"},{"title":"What is Andriod","date":"2013-10-03T14:06:00.000Z","_content":"\n![Andriod](/assets/images/legacy/android.jpg)\n`Andriod` is built on the open linux kernel. Furthermore, it utilizes a custom virtual machine that has been designed to optimize memory and hardware resource in a mobile environment.\n\n<!--more-->   \n\nAnd this virtual machine is called `Dalvik` virtual machine(`DalvikVM`), which is  a register based on virtual machine, designed and written by *Dan Bornstein* and some other Google engineers, it's an important part of the `Andriod` platform. And it differece to normal Java virtual machines(`JVM`) which are stack based.   \n\nDevelopers can 100% customize their `Andriod-Device`. The `Andriod` System Communication is based on called `Intents`, which are more or less just a String(with some data attached) which defines an anction that needs to be handled.For example:   \n\n```\n\"android.provider.Telephony.SMS_RECEIVED\"\n```\n\nIf you want to develope `Andriod` applications, firstly you need to install the development tools just like `ADT`(Andriod Development Tools), you can download it  for mac from [here](https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip), or go to this [website](http://developer.android.com/sdk/index.html) download it for other os.   \n\nAnd you can visit the offical website of `Andriod` from [here](http://developer.android.com/index.html). There have some steps which can teach how to get started and how to develop an Andriod application, even supplies lots of application examples.   \n\nSo just enjoy it. Have your fun!\n\n   \n\n","source":"_posts/2013-10-03-what-is-andriod.md","raw":"---\ntitle: \"What is Andriod\"\ndate: 2013-10-03 22:06\ncategories: Mobile\ntags: [Android]\n---\n\n![Andriod](/assets/images/legacy/android.jpg)\n`Andriod` is built on the open linux kernel. Furthermore, it utilizes a custom virtual machine that has been designed to optimize memory and hardware resource in a mobile environment.\n\n<!--more-->   \n\nAnd this virtual machine is called `Dalvik` virtual machine(`DalvikVM`), which is  a register based on virtual machine, designed and written by *Dan Bornstein* and some other Google engineers, it's an important part of the `Andriod` platform. And it differece to normal Java virtual machines(`JVM`) which are stack based.   \n\nDevelopers can 100% customize their `Andriod-Device`. The `Andriod` System Communication is based on called `Intents`, which are more or less just a String(with some data attached) which defines an anction that needs to be handled.For example:   \n\n```\n\"android.provider.Telephony.SMS_RECEIVED\"\n```\n\nIf you want to develope `Andriod` applications, firstly you need to install the development tools just like `ADT`(Andriod Development Tools), you can download it  for mac from [here](https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip), or go to this [website](http://developer.android.com/sdk/index.html) download it for other os.   \n\nAnd you can visit the offical website of `Andriod` from [here](http://developer.android.com/index.html). There have some steps which can teach how to get started and how to develop an Andriod application, even supplies lots of application examples.   \n\nSo just enjoy it. Have your fun!\n\n   \n\n","slug":"2013-10-03-what-is-andriod","published":1,"updated":"2023-09-02T17:45:14.467Z","_id":"clm27sq2g000fc2v52awzczl2","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/assets/images/legacy/android.jpg\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/android.jpg\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"Andriod\"><br><code>Andriod</code> is built on the open linux kernel. Furthermore, it utilizes a custom virtual machine that has been designed to optimize memory and hardware resource in a mobile environment.</p>\n<span id=\"more\"></span>   \n\n<p>And this virtual machine is called <code>Dalvik</code> virtual machine(<code>DalvikVM</code>), which is  a register based on virtual machine, designed and written by <em>Dan Bornstein</em> and some other Google engineers, it’s an important part of the <code>Andriod</code> platform. And it differece to normal Java virtual machines(<code>JVM</code>) which are stack based.   </p>\n<p>Developers can 100% customize their <code>Andriod-Device</code>. The <code>Andriod</code> System Communication is based on called <code>Intents</code>, which are more or less just a String(with some data attached) which defines an anction that needs to be handled.For example:   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to develope <code>Andriod</code> applications, firstly you need to install the development tools just like <code>ADT</code>(Andriod Development Tools), you can download it  for mac from <a href=\"https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip\">here</a>, or go to this <a href=\"http://developer.android.com/sdk/index.html\">website</a> download it for other os.   </p>\n<p>And you can visit the offical website of <code>Andriod</code> from <a href=\"http://developer.android.com/index.html\">here</a>. There have some steps which can teach how to get started and how to develop an Andriod application, even supplies lots of application examples.   </p>\n<p>So just enjoy it. Have your fun!</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/images/legacy/android.jpg\" alt=\"Andriod\"><br><code>Andriod</code> is built on the open linux kernel. Furthermore, it utilizes a custom virtual machine that has been designed to optimize memory and hardware resource in a mobile environment.</p>","more":"<p>And this virtual machine is called <code>Dalvik</code> virtual machine(<code>DalvikVM</code>), which is  a register based on virtual machine, designed and written by <em>Dan Bornstein</em> and some other Google engineers, it’s an important part of the <code>Andriod</code> platform. And it differece to normal Java virtual machines(<code>JVM</code>) which are stack based.   </p>\n<p>Developers can 100% customize their <code>Andriod-Device</code>. The <code>Andriod</code> System Communication is based on called <code>Intents</code>, which are more or less just a String(with some data attached) which defines an anction that needs to be handled.For example:   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span><br></pre></td></tr></table></figure>\n\n<p>If you want to develope <code>Andriod</code> applications, firstly you need to install the development tools just like <code>ADT</code>(Andriod Development Tools), you can download it  for mac from <a href=\"https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip\">here</a>, or go to this <a href=\"http://developer.android.com/sdk/index.html\">website</a> download it for other os.   </p>\n<p>And you can visit the offical website of <code>Andriod</code> from <a href=\"http://developer.android.com/index.html\">here</a>. There have some steps which can teach how to get started and how to develop an Andriod application, even supplies lots of application examples.   </p>\n<p>So just enjoy it. Have your fun!</p>"},{"title":"What is Git","date":"2014-01-03T07:02:00.000Z","_content":"\n### Introduction\n![Git](/assets/images/legacy/git-logo.png) is `open source distributed version control system` that allows a team of people to work together, all using the same files. And it helps the team cope with the confusion that tends to happen when multiple people are editing the same files.\n\n<!--more-->   \n\nAnd also `git` supplies the GUI client mode and command line mode. You can choose which you prefer to.   \n\n### Install\n- GitHub for windows   \n  You can go to offical website and download windows version as below address:   \n  [https://windows.github.com](https://windows.github.com)\n  \n- GitHub for Mac\n  Go to offical website and download mac version as below address:   \n  [https://mac.github.com](https://mac.github.com)\n  \n- Git for all platforms\n  `Git` distributions for Linux and POSIX systems are available on the offical Git SCM web sit:   \n  [http://git-scm.com](http://git-scm.com)\n  \n\n","source":"_posts/2014-01-03-what-is-git.md","raw":"---\ntitle: \"What is Git\"\ndate: 2014-01-03 15:02\ncategories: Tools\ntags: [Git]\n---\n\n### Introduction\n![Git](/assets/images/legacy/git-logo.png) is `open source distributed version control system` that allows a team of people to work together, all using the same files. And it helps the team cope with the confusion that tends to happen when multiple people are editing the same files.\n\n<!--more-->   \n\nAnd also `git` supplies the GUI client mode and command line mode. You can choose which you prefer to.   \n\n### Install\n- GitHub for windows   \n  You can go to offical website and download windows version as below address:   \n  [https://windows.github.com](https://windows.github.com)\n  \n- GitHub for Mac\n  Go to offical website and download mac version as below address:   \n  [https://mac.github.com](https://mac.github.com)\n  \n- Git for all platforms\n  `Git` distributions for Linux and POSIX systems are available on the offical Git SCM web sit:   \n  [http://git-scm.com](http://git-scm.com)\n  \n\n","slug":"2014-01-03-what-is-git","published":1,"updated":"2023-09-02T17:45:14.378Z","_id":"clm27vkag000lc2v5buuibu1v","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p><img src=\"/assets/images/legacy/git-logo.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/git-logo.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"Git\"> is <code>open source distributed version control system</code> that allows a team of people to work together, all using the same files. And it helps the team cope with the confusion that tends to happen when multiple people are editing the same files.</p>\n<span id=\"more\"></span>   \n\n<p>And also <code>git</code> supplies the GUI client mode and command line mode. You can choose which you prefer to.   </p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><ul>\n<li><p>GitHub for windows<br>You can go to offical website and download windows version as below address:<br><a href=\"https://windows.github.com/\">https://windows.github.com</a></p>\n</li>\n<li><p>GitHub for Mac<br>Go to offical website and download mac version as below address:<br><a href=\"https://mac.github.com/\">https://mac.github.com</a></p>\n</li>\n<li><p>Git for all platforms<br><code>Git</code> distributions for Linux and POSIX systems are available on the offical Git SCM web sit:<br><a href=\"http://git-scm.com/\">http://git-scm.com</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p><img src=\"/assets/images/legacy/git-logo.png\" alt=\"Git\"> is <code>open source distributed version control system</code> that allows a team of people to work together, all using the same files. And it helps the team cope with the confusion that tends to happen when multiple people are editing the same files.</p>","more":"<p>And also <code>git</code> supplies the GUI client mode and command line mode. You can choose which you prefer to.   </p>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><ul>\n<li><p>GitHub for windows<br>You can go to offical website and download windows version as below address:<br><a href=\"https://windows.github.com/\">https://windows.github.com</a></p>\n</li>\n<li><p>GitHub for Mac<br>Go to offical website and download mac version as below address:<br><a href=\"https://mac.github.com/\">https://mac.github.com</a></p>\n</li>\n<li><p>Git for all platforms<br><code>Git</code> distributions for Linux and POSIX systems are available on the offical Git SCM web sit:<br><a href=\"http://git-scm.com/\">http://git-scm.com</a></p>\n</li>\n</ul>"},{"title":"Git Commands (1)","date":"2014-01-16T07:09:00.000Z","_content":"### Configure\n- Sets the name you want attached to your commit transactions:   \n`$ git config --global user.name \"[name]\"`   \n  \n- Sets the email you want attached to your commit transactions:   \n`$ git config --global user.email \"[email]\"`   \n\n- Enable git color for command line output:   \n`$ git config --global color.ui true`\n\n<!--more-->\n\n### Create Repositories\n- Create a new repository with the specifical name, it will create a specified name directory with git:   \n`$ git init [project-name]`   \n\n- Init current directory to git repository:   \n`$ git init`   \n\n- Downloads a project by repository url:   \n`$ git clone [url]`   \n\n- add local repository to remote repository:   \n`$ git remote add [remote-name] [remote-repository-url]`\n\n### Make Changes\n- List all currently new or modified or deleted files:   \n`$ git status`   \n\n- Show all differences of each modified file before staged:   \n`$ git diff`   \n\n- Show differences of specified file before staged:   \n`$ git diff [file]`\n\n- Show differences of file between staging and the last file version:   \n`$ git diff --staged`   \n\n- Add all new or modified files to snapshot for commit:    \n`$ git add .` or `$ git add --all`   \n\n- Add specified file to stage for commit:   \n`$ git add [file]`   \n\n- Discard the changes of specified file in working directory:   \n`$ git checkout [file]`   \n\n- remove the file which has been deleted from local from stage:   \n`$ git rm [file]`   \n\n- Removes the file from version control but preserves the file locally:   \n`$ git rm --cached [file]`\n\n- Change the file name and prepare it for commit:   \n`$ git mv [file-original] [file-renamed]`   \n\n- Unstage the file, but preserve its content:   \n`$ git reset [file]`   \n\n- Commit files which was newed or modified or deleted:   \n`$ git commit -m\"[descriptive message]\"`","source":"_posts/2014-01-16-git-commands-1.md","raw":"---\n\ntitle: \"Git Commands (1)\"\ndate: 2014-01-16 15:09\ncategories: Tools\ntags: [Git]\n\n---\n### Configure\n- Sets the name you want attached to your commit transactions:   \n`$ git config --global user.name \"[name]\"`   \n  \n- Sets the email you want attached to your commit transactions:   \n`$ git config --global user.email \"[email]\"`   \n\n- Enable git color for command line output:   \n`$ git config --global color.ui true`\n\n<!--more-->\n\n### Create Repositories\n- Create a new repository with the specifical name, it will create a specified name directory with git:   \n`$ git init [project-name]`   \n\n- Init current directory to git repository:   \n`$ git init`   \n\n- Downloads a project by repository url:   \n`$ git clone [url]`   \n\n- add local repository to remote repository:   \n`$ git remote add [remote-name] [remote-repository-url]`\n\n### Make Changes\n- List all currently new or modified or deleted files:   \n`$ git status`   \n\n- Show all differences of each modified file before staged:   \n`$ git diff`   \n\n- Show differences of specified file before staged:   \n`$ git diff [file]`\n\n- Show differences of file between staging and the last file version:   \n`$ git diff --staged`   \n\n- Add all new or modified files to snapshot for commit:    \n`$ git add .` or `$ git add --all`   \n\n- Add specified file to stage for commit:   \n`$ git add [file]`   \n\n- Discard the changes of specified file in working directory:   \n`$ git checkout [file]`   \n\n- remove the file which has been deleted from local from stage:   \n`$ git rm [file]`   \n\n- Removes the file from version control but preserves the file locally:   \n`$ git rm --cached [file]`\n\n- Change the file name and prepare it for commit:   \n`$ git mv [file-original] [file-renamed]`   \n\n- Unstage the file, but preserve its content:   \n`$ git reset [file]`   \n\n- Commit files which was newed or modified or deleted:   \n`$ git commit -m\"[descriptive message]\"`","slug":"2014-01-16-git-commands-1","published":1,"updated":"2023-09-02T17:45:14.378Z","_id":"clm27wfwb000nc2v57mutg1g5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Configure\"><a href=\"#Configure\" class=\"headerlink\" title=\"Configure\"></a>Configure</h3><ul>\n<li><p>Sets the name you want attached to your commit transactions:<br><code>$ git config --global user.name &quot;[name]&quot;</code>   </p>\n</li>\n<li><p>Sets the email you want attached to your commit transactions:<br><code>$ git config --global user.email &quot;[email]&quot;</code>   </p>\n</li>\n<li><p>Enable git color for command line output:<br><code>$ git config --global color.ui true</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Create-Repositories\"><a href=\"#Create-Repositories\" class=\"headerlink\" title=\"Create Repositories\"></a>Create Repositories</h3><ul>\n<li><p>Create a new repository with the specifical name, it will create a specified name directory with git:<br><code>$ git init [project-name]</code>   </p>\n</li>\n<li><p>Init current directory to git repository:<br><code>$ git init</code>   </p>\n</li>\n<li><p>Downloads a project by repository url:<br><code>$ git clone [url]</code>   </p>\n</li>\n<li><p>add local repository to remote repository:<br><code>$ git remote add [remote-name] [remote-repository-url]</code></p>\n</li>\n</ul>\n<h3 id=\"Make-Changes\"><a href=\"#Make-Changes\" class=\"headerlink\" title=\"Make Changes\"></a>Make Changes</h3><ul>\n<li><p>List all currently new or modified or deleted files:<br><code>$ git status</code>   </p>\n</li>\n<li><p>Show all differences of each modified file before staged:<br><code>$ git diff</code>   </p>\n</li>\n<li><p>Show differences of specified file before staged:<br><code>$ git diff [file]</code></p>\n</li>\n<li><p>Show differences of file between staging and the last file version:<br><code>$ git diff --staged</code>   </p>\n</li>\n<li><p>Add all new or modified files to snapshot for commit:<br><code>$ git add .</code> or <code>$ git add --all</code>   </p>\n</li>\n<li><p>Add specified file to stage for commit:<br><code>$ git add [file]</code>   </p>\n</li>\n<li><p>Discard the changes of specified file in working directory:<br><code>$ git checkout [file]</code>   </p>\n</li>\n<li><p>remove the file which has been deleted from local from stage:<br><code>$ git rm [file]</code>   </p>\n</li>\n<li><p>Removes the file from version control but preserves the file locally:<br><code>$ git rm --cached [file]</code></p>\n</li>\n<li><p>Change the file name and prepare it for commit:<br><code>$ git mv [file-original] [file-renamed]</code>   </p>\n</li>\n<li><p>Unstage the file, but preserve its content:<br><code>$ git reset [file]</code>   </p>\n</li>\n<li><p>Commit files which was newed or modified or deleted:<br><code>$ git commit -m&quot;[descriptive message]&quot;</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Configure\"><a href=\"#Configure\" class=\"headerlink\" title=\"Configure\"></a>Configure</h3><ul>\n<li><p>Sets the name you want attached to your commit transactions:<br><code>$ git config --global user.name &quot;[name]&quot;</code>   </p>\n</li>\n<li><p>Sets the email you want attached to your commit transactions:<br><code>$ git config --global user.email &quot;[email]&quot;</code>   </p>\n</li>\n<li><p>Enable git color for command line output:<br><code>$ git config --global color.ui true</code></p>\n</li>\n</ul>","more":"<h3 id=\"Create-Repositories\"><a href=\"#Create-Repositories\" class=\"headerlink\" title=\"Create Repositories\"></a>Create Repositories</h3><ul>\n<li><p>Create a new repository with the specifical name, it will create a specified name directory with git:<br><code>$ git init [project-name]</code>   </p>\n</li>\n<li><p>Init current directory to git repository:<br><code>$ git init</code>   </p>\n</li>\n<li><p>Downloads a project by repository url:<br><code>$ git clone [url]</code>   </p>\n</li>\n<li><p>add local repository to remote repository:<br><code>$ git remote add [remote-name] [remote-repository-url]</code></p>\n</li>\n</ul>\n<h3 id=\"Make-Changes\"><a href=\"#Make-Changes\" class=\"headerlink\" title=\"Make Changes\"></a>Make Changes</h3><ul>\n<li><p>List all currently new or modified or deleted files:<br><code>$ git status</code>   </p>\n</li>\n<li><p>Show all differences of each modified file before staged:<br><code>$ git diff</code>   </p>\n</li>\n<li><p>Show differences of specified file before staged:<br><code>$ git diff [file]</code></p>\n</li>\n<li><p>Show differences of file between staging and the last file version:<br><code>$ git diff --staged</code>   </p>\n</li>\n<li><p>Add all new or modified files to snapshot for commit:<br><code>$ git add .</code> or <code>$ git add --all</code>   </p>\n</li>\n<li><p>Add specified file to stage for commit:<br><code>$ git add [file]</code>   </p>\n</li>\n<li><p>Discard the changes of specified file in working directory:<br><code>$ git checkout [file]</code>   </p>\n</li>\n<li><p>remove the file which has been deleted from local from stage:<br><code>$ git rm [file]</code>   </p>\n</li>\n<li><p>Removes the file from version control but preserves the file locally:<br><code>$ git rm --cached [file]</code></p>\n</li>\n<li><p>Change the file name and prepare it for commit:<br><code>$ git mv [file-original] [file-renamed]</code>   </p>\n</li>\n<li><p>Unstage the file, but preserve its content:<br><code>$ git reset [file]</code>   </p>\n</li>\n<li><p>Commit files which was newed or modified or deleted:<br><code>$ git commit -m&quot;[descriptive message]&quot;</code></p>\n</li>\n</ul>"},{"title":"Git Commands (2)","date":"2014-02-09T06:02:00.000Z","_content":"### Group Changes\n- List all local branches in the current repository:   \n`$ git branch`   \n\n- Create a new branch with specified name:   \n`$ git branch [branch-new]`   \n\n- Switch to the specified branch and updates the working directory:   \n`$ git checkout [branch-name]`\n\n- Combine the specified branch to the current branch:   \n`$ git merge [branch-name]`\n\n- Delete the specified branch:   \n`$ git branch -d [branch-name]`\n\n<!--more-->\n\n### Suppress Tracking\n- A text file named `.gitigore` suppresses accidental versioning of files and paths matching the specified patterns, for example:   \n`*.log temp-* dir/*`   \nwill ignore log file and started with temp- files and all files in dir directory.   \n\n- List all ignore files in this project:   \n`$ git ls-files --other --ignored --exclude-standard`   \n\n### Review History\n- List all version history for the current branch:   \n`$ git log`\n\n- List viewsion history for a single file, including rename:   \n`$ git log --follow [file]`\n\n- Show content differences between two branchs:   \n`$ git diff [first-branch] [second-branch]`\n\n- Output metadata and content changes of the specified name:   \n`$ git show [commit]`","source":"_posts/2014-02-09-git-commands-2.md","raw":"---\n\ntitle: \"Git Commands (2)\"\ndate: 2014-02-09 14:02\ncategories: Tools\ntags: [Git]\n\n---\n### Group Changes\n- List all local branches in the current repository:   \n`$ git branch`   \n\n- Create a new branch with specified name:   \n`$ git branch [branch-new]`   \n\n- Switch to the specified branch and updates the working directory:   \n`$ git checkout [branch-name]`\n\n- Combine the specified branch to the current branch:   \n`$ git merge [branch-name]`\n\n- Delete the specified branch:   \n`$ git branch -d [branch-name]`\n\n<!--more-->\n\n### Suppress Tracking\n- A text file named `.gitigore` suppresses accidental versioning of files and paths matching the specified patterns, for example:   \n`*.log temp-* dir/*`   \nwill ignore log file and started with temp- files and all files in dir directory.   \n\n- List all ignore files in this project:   \n`$ git ls-files --other --ignored --exclude-standard`   \n\n### Review History\n- List all version history for the current branch:   \n`$ git log`\n\n- List viewsion history for a single file, including rename:   \n`$ git log --follow [file]`\n\n- Show content differences between two branchs:   \n`$ git diff [first-branch] [second-branch]`\n\n- Output metadata and content changes of the specified name:   \n`$ git show [commit]`","slug":"2014-02-09-git-commands-2","published":1,"updated":"2023-09-02T17:45:14.378Z","_id":"clm27wxut000pc2v54cqy7fuc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Group-Changes\"><a href=\"#Group-Changes\" class=\"headerlink\" title=\"Group Changes\"></a>Group Changes</h3><ul>\n<li><p>List all local branches in the current repository:<br><code>$ git branch</code>   </p>\n</li>\n<li><p>Create a new branch with specified name:<br><code>$ git branch [branch-new]</code>   </p>\n</li>\n<li><p>Switch to the specified branch and updates the working directory:<br><code>$ git checkout [branch-name]</code></p>\n</li>\n<li><p>Combine the specified branch to the current branch:<br><code>$ git merge [branch-name]</code></p>\n</li>\n<li><p>Delete the specified branch:<br><code>$ git branch -d [branch-name]</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Suppress-Tracking\"><a href=\"#Suppress-Tracking\" class=\"headerlink\" title=\"Suppress Tracking\"></a>Suppress Tracking</h3><ul>\n<li><p>A text file named <code>.gitigore</code> suppresses accidental versioning of files and paths matching the specified patterns, for example:<br><code>*.log temp-* dir/*</code><br>will ignore log file and started with temp- files and all files in dir directory.   </p>\n</li>\n<li><p>List all ignore files in this project:<br><code>$ git ls-files --other --ignored --exclude-standard</code></p>\n</li>\n</ul>\n<h3 id=\"Review-History\"><a href=\"#Review-History\" class=\"headerlink\" title=\"Review History\"></a>Review History</h3><ul>\n<li><p>List all version history for the current branch:<br><code>$ git log</code></p>\n</li>\n<li><p>List viewsion history for a single file, including rename:<br><code>$ git log --follow [file]</code></p>\n</li>\n<li><p>Show content differences between two branchs:<br><code>$ git diff [first-branch] [second-branch]</code></p>\n</li>\n<li><p>Output metadata and content changes of the specified name:<br><code>$ git show [commit]</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Group-Changes\"><a href=\"#Group-Changes\" class=\"headerlink\" title=\"Group Changes\"></a>Group Changes</h3><ul>\n<li><p>List all local branches in the current repository:<br><code>$ git branch</code>   </p>\n</li>\n<li><p>Create a new branch with specified name:<br><code>$ git branch [branch-new]</code>   </p>\n</li>\n<li><p>Switch to the specified branch and updates the working directory:<br><code>$ git checkout [branch-name]</code></p>\n</li>\n<li><p>Combine the specified branch to the current branch:<br><code>$ git merge [branch-name]</code></p>\n</li>\n<li><p>Delete the specified branch:<br><code>$ git branch -d [branch-name]</code></p>\n</li>\n</ul>","more":"<h3 id=\"Suppress-Tracking\"><a href=\"#Suppress-Tracking\" class=\"headerlink\" title=\"Suppress Tracking\"></a>Suppress Tracking</h3><ul>\n<li><p>A text file named <code>.gitigore</code> suppresses accidental versioning of files and paths matching the specified patterns, for example:<br><code>*.log temp-* dir/*</code><br>will ignore log file and started with temp- files and all files in dir directory.   </p>\n</li>\n<li><p>List all ignore files in this project:<br><code>$ git ls-files --other --ignored --exclude-standard</code></p>\n</li>\n</ul>\n<h3 id=\"Review-History\"><a href=\"#Review-History\" class=\"headerlink\" title=\"Review History\"></a>Review History</h3><ul>\n<li><p>List all version history for the current branch:<br><code>$ git log</code></p>\n</li>\n<li><p>List viewsion history for a single file, including rename:<br><code>$ git log --follow [file]</code></p>\n</li>\n<li><p>Show content differences between two branchs:<br><code>$ git diff [first-branch] [second-branch]</code></p>\n</li>\n<li><p>Output metadata and content changes of the specified name:<br><code>$ git show [commit]</code></p>\n</li>\n</ul>"},{"title":"Git Commands (3)","date":"2014-02-21T02:02:00.000Z","_content":"### Redo Commits\n- Undo all commits after [commit], and preserve changes locally:   \n`$ git reset [commit]`   \n\n- Discard all history and changes back to the specified commit:   \n`$ git reset --hard [commit]`\n\n<!--more-->\n\n### Save Fragments\n- Temporarily stores all modified **tracked** files:   \n`$ git stash`\n\n- Retore the most recently stashed files:   \n`$ git stash pop`\n\n- List all stashed changesets:   \n`$ git stash list`\n\n- Discard the most recently stashed changeset:   \n`$ git stash drop`   \n\n### Synchronize Changes\n- Download all history from the repostory bookmark:   \n`$ git fetch [bookmark]`\n\n- Combine bookmark's branch into current branch:    \n`$ git merge [bookmark]/[branch]`\n\n- Upload all local branch commits to Github:   \n`$ git push [alias] [branch]`\n\n- Downloads bookmark history and incorporates changes:   \n`$ git pull`\n\n- Copy a commit and create a new commit on the current branch with the same message and patch as another commit:   \n`$ git cherry-pick [commit]`\n\n- merge the version history of current branch onto another specified branch:   \n`$ git rebase [branch]`\n\n- merge the version history after specified commit of current branch onto another specified branch:   \n`$ git rebase --onto [branch] [commit]`\n","source":"_posts/2014-02-21-git-commands-3.md","raw":"---\n\ntitle: \"Git Commands (3)\"\ndate: 2014-02-21 10:02\ncategories: Tools\ntags: [Git]\n\n---\n### Redo Commits\n- Undo all commits after [commit], and preserve changes locally:   \n`$ git reset [commit]`   \n\n- Discard all history and changes back to the specified commit:   \n`$ git reset --hard [commit]`\n\n<!--more-->\n\n### Save Fragments\n- Temporarily stores all modified **tracked** files:   \n`$ git stash`\n\n- Retore the most recently stashed files:   \n`$ git stash pop`\n\n- List all stashed changesets:   \n`$ git stash list`\n\n- Discard the most recently stashed changeset:   \n`$ git stash drop`   \n\n### Synchronize Changes\n- Download all history from the repostory bookmark:   \n`$ git fetch [bookmark]`\n\n- Combine bookmark's branch into current branch:    \n`$ git merge [bookmark]/[branch]`\n\n- Upload all local branch commits to Github:   \n`$ git push [alias] [branch]`\n\n- Downloads bookmark history and incorporates changes:   \n`$ git pull`\n\n- Copy a commit and create a new commit on the current branch with the same message and patch as another commit:   \n`$ git cherry-pick [commit]`\n\n- merge the version history of current branch onto another specified branch:   \n`$ git rebase [branch]`\n\n- merge the version history after specified commit of current branch onto another specified branch:   \n`$ git rebase --onto [branch] [commit]`\n","slug":"2014-02-21-git-commands-3","published":1,"updated":"2023-09-02T17:45:14.378Z","_id":"clm27xc7n000rc2v5069ca66w","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Redo-Commits\"><a href=\"#Redo-Commits\" class=\"headerlink\" title=\"Redo Commits\"></a>Redo Commits</h3><ul>\n<li><p>Undo all commits after [commit], and preserve changes locally:<br><code>$ git reset [commit]</code>   </p>\n</li>\n<li><p>Discard all history and changes back to the specified commit:<br><code>$ git reset --hard [commit]</code></p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"Save-Fragments\"><a href=\"#Save-Fragments\" class=\"headerlink\" title=\"Save Fragments\"></a>Save Fragments</h3><ul>\n<li><p>Temporarily stores all modified <strong>tracked</strong> files:<br><code>$ git stash</code></p>\n</li>\n<li><p>Retore the most recently stashed files:<br><code>$ git stash pop</code></p>\n</li>\n<li><p>List all stashed changesets:<br><code>$ git stash list</code></p>\n</li>\n<li><p>Discard the most recently stashed changeset:<br><code>$ git stash drop</code></p>\n</li>\n</ul>\n<h3 id=\"Synchronize-Changes\"><a href=\"#Synchronize-Changes\" class=\"headerlink\" title=\"Synchronize Changes\"></a>Synchronize Changes</h3><ul>\n<li><p>Download all history from the repostory bookmark:<br><code>$ git fetch [bookmark]</code></p>\n</li>\n<li><p>Combine bookmark’s branch into current branch:<br><code>$ git merge [bookmark]/[branch]</code></p>\n</li>\n<li><p>Upload all local branch commits to Github:<br><code>$ git push [alias] [branch]</code></p>\n</li>\n<li><p>Downloads bookmark history and incorporates changes:<br><code>$ git pull</code></p>\n</li>\n<li><p>Copy a commit and create a new commit on the current branch with the same message and patch as another commit:<br><code>$ git cherry-pick [commit]</code></p>\n</li>\n<li><p>merge the version history of current branch onto another specified branch:<br><code>$ git rebase [branch]</code></p>\n</li>\n<li><p>merge the version history after specified commit of current branch onto another specified branch:<br><code>$ git rebase --onto [branch] [commit]</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Redo-Commits\"><a href=\"#Redo-Commits\" class=\"headerlink\" title=\"Redo Commits\"></a>Redo Commits</h3><ul>\n<li><p>Undo all commits after [commit], and preserve changes locally:<br><code>$ git reset [commit]</code>   </p>\n</li>\n<li><p>Discard all history and changes back to the specified commit:<br><code>$ git reset --hard [commit]</code></p>\n</li>\n</ul>","more":"<h3 id=\"Save-Fragments\"><a href=\"#Save-Fragments\" class=\"headerlink\" title=\"Save Fragments\"></a>Save Fragments</h3><ul>\n<li><p>Temporarily stores all modified <strong>tracked</strong> files:<br><code>$ git stash</code></p>\n</li>\n<li><p>Retore the most recently stashed files:<br><code>$ git stash pop</code></p>\n</li>\n<li><p>List all stashed changesets:<br><code>$ git stash list</code></p>\n</li>\n<li><p>Discard the most recently stashed changeset:<br><code>$ git stash drop</code></p>\n</li>\n</ul>\n<h3 id=\"Synchronize-Changes\"><a href=\"#Synchronize-Changes\" class=\"headerlink\" title=\"Synchronize Changes\"></a>Synchronize Changes</h3><ul>\n<li><p>Download all history from the repostory bookmark:<br><code>$ git fetch [bookmark]</code></p>\n</li>\n<li><p>Combine bookmark’s branch into current branch:<br><code>$ git merge [bookmark]/[branch]</code></p>\n</li>\n<li><p>Upload all local branch commits to Github:<br><code>$ git push [alias] [branch]</code></p>\n</li>\n<li><p>Downloads bookmark history and incorporates changes:<br><code>$ git pull</code></p>\n</li>\n<li><p>Copy a commit and create a new commit on the current branch with the same message and patch as another commit:<br><code>$ git cherry-pick [commit]</code></p>\n</li>\n<li><p>merge the version history of current branch onto another specified branch:<br><code>$ git rebase [branch]</code></p>\n</li>\n<li><p>merge the version history after specified commit of current branch onto another specified branch:<br><code>$ git rebase --onto [branch] [commit]</code></p>\n</li>\n</ul>"},{"title":"Visual git guide (basic usage)","date":"2014-03-03T11:01:00.000Z","_content":"\n**Note:** the original website address is [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Basic Usage\n![basic-usage](/assets/images/legacy/basic-usage.png)\n   \nThe four commands above copy files between the working directory, the stage (also called the index), and the history (in the form of commits).\n\n<!--more-->\n\n- `git add [files]` copies files (at their current state) to the stage.\n\n- `git commit` saves a snapshot of the stage as a commit.\n\n- `git reset -- [files]` unstages files; that is, it copies files from the latest commit to the stage. Use this command to \"undo\" a *git add files*. You can also *git reset* to unstage everything.\n\n- `git checkout -- [files]` copies files from the stage to the working directory. Use this to throw away local changes.   \n\nYou can use `git reset -p`, `git checkout -p`, or `git add -p` instead of (or in addition to) specifying particular files to interactively choose which hunks copy.   \n\nIt is also possible to jump over the stage and check out files directly from the history or commit files without staging first.   \n\n![basic-usage-2](/assets/images/legacy/basic-usage-2.png)\n\n- `git commit -a` is equivalent to running git add on all filenames that existed in the latest commit, and then running git commit.   \n\n- `git commit [files]` creates a new commit containing the contents of the latest commit, plus a snapshot of files taken from the working directory. Additionally, files are copied to the stage.   \n\n- `git checkout HEAD -- [files]` copies files from the latest commit to both the stage and the working directory.\n","source":"_posts/2014-03-03-visual-git-guide-basic-usage.md","raw":"---\n\ntitle: \"Visual git guide (basic usage)\"\ndate: 2014-03-03 19:01\ncategories: Tools\ntags: [Git]\n---\n\n**Note:** the original website address is [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Basic Usage\n![basic-usage](/assets/images/legacy/basic-usage.png)\n   \nThe four commands above copy files between the working directory, the stage (also called the index), and the history (in the form of commits).\n\n<!--more-->\n\n- `git add [files]` copies files (at their current state) to the stage.\n\n- `git commit` saves a snapshot of the stage as a commit.\n\n- `git reset -- [files]` unstages files; that is, it copies files from the latest commit to the stage. Use this command to \"undo\" a *git add files*. You can also *git reset* to unstage everything.\n\n- `git checkout -- [files]` copies files from the stage to the working directory. Use this to throw away local changes.   \n\nYou can use `git reset -p`, `git checkout -p`, or `git add -p` instead of (or in addition to) specifying particular files to interactively choose which hunks copy.   \n\nIt is also possible to jump over the stage and check out files directly from the history or commit files without staging first.   \n\n![basic-usage-2](/assets/images/legacy/basic-usage-2.png)\n\n- `git commit -a` is equivalent to running git add on all filenames that existed in the latest commit, and then running git commit.   \n\n- `git commit [files]` creates a new commit containing the contents of the latest commit, plus a snapshot of files taken from the working directory. Additionally, files are copied to the stage.   \n\n- `git checkout HEAD -- [files]` copies files from the latest commit to both the stage and the working directory.\n","slug":"2014-03-03-visual-git-guide-basic-usage","published":1,"updated":"2023-09-02T17:45:14.378Z","_id":"clm27ztrj0014c2v5a92s6xhl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address is <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Basic-Usage\"><a href=\"#Basic-Usage\" class=\"headerlink\" title=\"Basic Usage\"></a>Basic Usage</h3><p><img src=\"/assets/images/legacy/basic-usage.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/basic-usage.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"basic-usage\"></p>\n<p>The four commands above copy files between the working directory, the stage (also called the index), and the history (in the form of commits).</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p><code>git add [files]</code> copies files (at their current state) to the stage.</p>\n</li>\n<li><p><code>git commit</code> saves a snapshot of the stage as a commit.</p>\n</li>\n<li><p><code>git reset -- [files]</code> unstages files; that is, it copies files from the latest commit to the stage. Use this command to “undo” a <em>git add files</em>. You can also <em>git reset</em> to unstage everything.</p>\n</li>\n<li><p><code>git checkout -- [files]</code> copies files from the stage to the working directory. Use this to throw away local changes.</p>\n</li>\n</ul>\n<p>You can use <code>git reset -p</code>, <code>git checkout -p</code>, or <code>git add -p</code> instead of (or in addition to) specifying particular files to interactively choose which hunks copy.   </p>\n<p>It is also possible to jump over the stage and check out files directly from the history or commit files without staging first.   </p>\n<p><img src=\"/assets/images/legacy/basic-usage-2.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/basic-usage-2.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"basic-usage-2\"></p>\n<ul>\n<li><p><code>git commit -a</code> is equivalent to running git add on all filenames that existed in the latest commit, and then running git commit.   </p>\n</li>\n<li><p><code>git commit [files]</code> creates a new commit containing the contents of the latest commit, plus a snapshot of files taken from the working directory. Additionally, files are copied to the stage.   </p>\n</li>\n<li><p><code>git checkout HEAD -- [files]</code> copies files from the latest commit to both the stage and the working directory.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address is <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Basic-Usage\"><a href=\"#Basic-Usage\" class=\"headerlink\" title=\"Basic Usage\"></a>Basic Usage</h3><p><img src=\"/assets/images/legacy/basic-usage.png\" alt=\"basic-usage\"></p>\n<p>The four commands above copy files between the working directory, the stage (also called the index), and the history (in the form of commits).</p>","more":"<ul>\n<li><p><code>git add [files]</code> copies files (at their current state) to the stage.</p>\n</li>\n<li><p><code>git commit</code> saves a snapshot of the stage as a commit.</p>\n</li>\n<li><p><code>git reset -- [files]</code> unstages files; that is, it copies files from the latest commit to the stage. Use this command to “undo” a <em>git add files</em>. You can also <em>git reset</em> to unstage everything.</p>\n</li>\n<li><p><code>git checkout -- [files]</code> copies files from the stage to the working directory. Use this to throw away local changes.</p>\n</li>\n</ul>\n<p>You can use <code>git reset -p</code>, <code>git checkout -p</code>, or <code>git add -p</code> instead of (or in addition to) specifying particular files to interactively choose which hunks copy.   </p>\n<p>It is also possible to jump over the stage and check out files directly from the history or commit files without staging first.   </p>\n<p><img src=\"/assets/images/legacy/basic-usage-2.png\" alt=\"basic-usage-2\"></p>\n<ul>\n<li><p><code>git commit -a</code> is equivalent to running git add on all filenames that existed in the latest commit, and then running git commit.   </p>\n</li>\n<li><p><code>git commit [files]</code> creates a new commit containing the contents of the latest commit, plus a snapshot of files taken from the working directory. Additionally, files are copied to the stage.   </p>\n</li>\n<li><p><code>git checkout HEAD -- [files]</code> copies files from the latest commit to both the stage and the working directory.</p>\n</li>\n</ul>"},{"title":"Visual git guide (conventions)","date":"2014-04-13T09:10:00.000Z","_content":"**Note:** the original website address is [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Conventions\n![conventions](/assets/images/legacy/conventions.png)   \n\n<!--more-->\n\nCommits are shown in green as 5-character IDs, and they point to their parents. Branches are shown in orange, and they point to particular commits.The current branch is identified by the special reference HEAD, which is \"attached\" to that branch. In this image, the five latest commits are shown, with ed489 being the most recent. master (the current branch) points to this commit, while maint (another branch) points to an ancestor of master's commit.","source":"_posts/2014-04-13-visual-git-guide-conventions.md","raw":"---\n\ntitle: \"Visual git guide (conventions)\"\ndate: 2014-04-13 17:10\ncategories: Tools\ntags: [Git]\n\n---\n**Note:** the original website address is [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Conventions\n![conventions](/assets/images/legacy/conventions.png)   \n\n<!--more-->\n\nCommits are shown in green as 5-character IDs, and they point to their parents. Branches are shown in orange, and they point to particular commits.The current branch is identified by the special reference HEAD, which is \"attached\" to that branch. In this image, the five latest commits are shown, with ed489 being the most recent. master (the current branch) points to this commit, while maint (another branch) points to an ancestor of master's commit.","slug":"2014-04-13-visual-git-guide-conventions","published":1,"updated":"2023-09-02T17:45:14.378Z","_id":"clm280b2m0017c2v5cz446lha","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address is <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Conventions\"><a href=\"#Conventions\" class=\"headerlink\" title=\"Conventions\"></a>Conventions</h3><p><img src=\"/assets/images/legacy/conventions.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/conventions.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"conventions\">   </p>\n<span id=\"more\"></span>\n\n<p>Commits are shown in green as 5-character IDs, and they point to their parents. Branches are shown in orange, and they point to particular commits.The current branch is identified by the special reference HEAD, which is “attached” to that branch. In this image, the five latest commits are shown, with ed489 being the most recent. master (the current branch) points to this commit, while maint (another branch) points to an ancestor of master’s commit.</p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address is <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Conventions\"><a href=\"#Conventions\" class=\"headerlink\" title=\"Conventions\"></a>Conventions</h3><p><img src=\"/assets/images/legacy/conventions.png\" alt=\"conventions\">   </p>","more":"<p>Commits are shown in green as 5-character IDs, and they point to their parents. Branches are shown in orange, and they point to particular commits.The current branch is identified by the special reference HEAD, which is “attached” to that branch. In this image, the five latest commits are shown, with ed489 being the most recent. master (the current branch) points to this commit, while maint (another branch) points to an ancestor of master’s commit.</p>"},{"title":"visual git guide (checkout command)","date":"2014-04-21T03:11:00.000Z","_content":"\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Checkout\n\n\nThe checkout command is used to copy files from the history (or stage) to the working directory, and to optionally switch branches.   \n\nWhen a filename (and/or -p) is given, git copies those files from the given commit to the stage and the working directory. For example, git checkout HEAD~ foo.c copies the file foo.c from the commit called HEAD~ (the parent of the current commit) to the working directory, and also stages it. (*If no commit name is given, files are copied from the stage.*) **Note that the current branch is not changed.**   \n\n![checkout-files](/assets/images/legacy/checkout-files.png)\n\n<!--more-->\n\nWhen a filename is not given but the reference is a (local) branch, HEAD is moved to that branch (that is, we \"switch to\" that branch), and then the stage and working directory are set to match the contents of that commit. Any file that exists in the new commit (a47c3 below) is copied; any file that exists in the old commit (ed489) but not in the new one is deleted; and any file that exists in neither is ignored.   \n\n![checkout-branch](/assets/images/legacy/checkout-branch.png)\n\nWhen a filename is not given and the reference is not a (local) branch — say, it is a tag, a remote branch, a SHA-1 ID, or something like master~3 — we get an anonymous branch, called a detached HEAD. This is useful for jumping around the history. Say you want to compile version 1.6.6.1 of git. You can git checkout v1.6.6.1 (which is a tag, not a branch), compile, install, and then switch back to another branch, say git checkout master. However, committing works slightly differently with a detached HEAD; this is covered below.   \n\n![checkout-detached](/assets/images/legacy/checkout-detached.png)\n\nOnce you check out something else, say master, the commit is (presumably) no longer referenced by anything else, and gets lost. Note that after the command, there is nothing referencing 2eecb.       \n\n![checkout-after-detached](/assets/images/legacy/checkout-after-detached.png)   \n\nIf, on the other hand, you want to save this state, you can create a new named branch using `git checkout -b name`.   \n\n![checkout-b-detached](/assets/images/legacy/checkout-b-detached.png)","source":"_posts/2014-04-21-visual-git-guide-checkout-command.md","raw":"---\n\ntitle: \"visual git guide (checkout command)\"\ndate: 2014-04-21 11:11\ncategories: Tools\ntags: [Git]\n\n---\n\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Checkout\n\n\nThe checkout command is used to copy files from the history (or stage) to the working directory, and to optionally switch branches.   \n\nWhen a filename (and/or -p) is given, git copies those files from the given commit to the stage and the working directory. For example, git checkout HEAD~ foo.c copies the file foo.c from the commit called HEAD~ (the parent of the current commit) to the working directory, and also stages it. (*If no commit name is given, files are copied from the stage.*) **Note that the current branch is not changed.**   \n\n![checkout-files](/assets/images/legacy/checkout-files.png)\n\n<!--more-->\n\nWhen a filename is not given but the reference is a (local) branch, HEAD is moved to that branch (that is, we \"switch to\" that branch), and then the stage and working directory are set to match the contents of that commit. Any file that exists in the new commit (a47c3 below) is copied; any file that exists in the old commit (ed489) but not in the new one is deleted; and any file that exists in neither is ignored.   \n\n![checkout-branch](/assets/images/legacy/checkout-branch.png)\n\nWhen a filename is not given and the reference is not a (local) branch — say, it is a tag, a remote branch, a SHA-1 ID, or something like master~3 — we get an anonymous branch, called a detached HEAD. This is useful for jumping around the history. Say you want to compile version 1.6.6.1 of git. You can git checkout v1.6.6.1 (which is a tag, not a branch), compile, install, and then switch back to another branch, say git checkout master. However, committing works slightly differently with a detached HEAD; this is covered below.   \n\n![checkout-detached](/assets/images/legacy/checkout-detached.png)\n\nOnce you check out something else, say master, the commit is (presumably) no longer referenced by anything else, and gets lost. Note that after the command, there is nothing referencing 2eecb.       \n\n![checkout-after-detached](/assets/images/legacy/checkout-after-detached.png)   \n\nIf, on the other hand, you want to save this state, you can create a new named branch using `git checkout -b name`.   \n\n![checkout-b-detached](/assets/images/legacy/checkout-b-detached.png)","slug":"2014-04-21-visual-git-guide-checkout-command","published":1,"updated":"2023-09-02T17:45:14.378Z","_id":"clm280xqc0019c2v5f9953mp8","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Checkout\"><a href=\"#Checkout\" class=\"headerlink\" title=\"Checkout\"></a>Checkout</h3><p>The checkout command is used to copy files from the history (or stage) to the working directory, and to optionally switch branches.   </p>\n<p>When a filename (and&#x2F;or -p) is given, git copies those files from the given commit to the stage and the working directory. For example, git checkout HEAD~ foo.c copies the file foo.c from the commit called HEAD~ (the parent of the current commit) to the working directory, and also stages it. (<em>If no commit name is given, files are copied from the stage.</em>) <strong>Note that the current branch is not changed.</strong>   </p>\n<p><img src=\"/assets/images/legacy/checkout-files.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/checkout-files.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"checkout-files\"></p>\n<span id=\"more\"></span>\n\n<p>When a filename is not given but the reference is a (local) branch, HEAD is moved to that branch (that is, we “switch to” that branch), and then the stage and working directory are set to match the contents of that commit. Any file that exists in the new commit (a47c3 below) is copied; any file that exists in the old commit (ed489) but not in the new one is deleted; and any file that exists in neither is ignored.   </p>\n<p><img src=\"/assets/images/legacy/checkout-branch.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/checkout-branch.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"checkout-branch\"></p>\n<p>When a filename is not given and the reference is not a (local) branch — say, it is a tag, a remote branch, a SHA-1 ID, or something like master~3 — we get an anonymous branch, called a detached HEAD. This is useful for jumping around the history. Say you want to compile version 1.6.6.1 of git. You can git checkout v1.6.6.1 (which is a tag, not a branch), compile, install, and then switch back to another branch, say git checkout master. However, committing works slightly differently with a detached HEAD; this is covered below.   </p>\n<p><img src=\"/assets/images/legacy/checkout-detached.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/checkout-detached.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"checkout-detached\"></p>\n<p>Once you check out something else, say master, the commit is (presumably) no longer referenced by anything else, and gets lost. Note that after the command, there is nothing referencing 2eecb.       </p>\n<p><img src=\"/assets/images/legacy/checkout-after-detached.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/checkout-after-detached.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"checkout-after-detached\">   </p>\n<p>If, on the other hand, you want to save this state, you can create a new named branch using <code>git checkout -b name</code>.   </p>\n<p><img src=\"/assets/images/legacy/checkout-b-detached.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/checkout-b-detached.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"checkout-b-detached\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Checkout\"><a href=\"#Checkout\" class=\"headerlink\" title=\"Checkout\"></a>Checkout</h3><p>The checkout command is used to copy files from the history (or stage) to the working directory, and to optionally switch branches.   </p>\n<p>When a filename (and&#x2F;or -p) is given, git copies those files from the given commit to the stage and the working directory. For example, git checkout HEAD~ foo.c copies the file foo.c from the commit called HEAD~ (the parent of the current commit) to the working directory, and also stages it. (<em>If no commit name is given, files are copied from the stage.</em>) <strong>Note that the current branch is not changed.</strong>   </p>\n<p><img src=\"/assets/images/legacy/checkout-files.png\" alt=\"checkout-files\"></p>","more":"<p>When a filename is not given but the reference is a (local) branch, HEAD is moved to that branch (that is, we “switch to” that branch), and then the stage and working directory are set to match the contents of that commit. Any file that exists in the new commit (a47c3 below) is copied; any file that exists in the old commit (ed489) but not in the new one is deleted; and any file that exists in neither is ignored.   </p>\n<p><img src=\"/assets/images/legacy/checkout-branch.png\" alt=\"checkout-branch\"></p>\n<p>When a filename is not given and the reference is not a (local) branch — say, it is a tag, a remote branch, a SHA-1 ID, or something like master~3 — we get an anonymous branch, called a detached HEAD. This is useful for jumping around the history. Say you want to compile version 1.6.6.1 of git. You can git checkout v1.6.6.1 (which is a tag, not a branch), compile, install, and then switch back to another branch, say git checkout master. However, committing works slightly differently with a detached HEAD; this is covered below.   </p>\n<p><img src=\"/assets/images/legacy/checkout-detached.png\" alt=\"checkout-detached\"></p>\n<p>Once you check out something else, say master, the commit is (presumably) no longer referenced by anything else, and gets lost. Note that after the command, there is nothing referencing 2eecb.       </p>\n<p><img src=\"/assets/images/legacy/checkout-after-detached.png\" alt=\"checkout-after-detached\">   </p>\n<p>If, on the other hand, you want to save this state, you can create a new named branch using <code>git checkout -b name</code>.   </p>\n<p><img src=\"/assets/images/legacy/checkout-b-detached.png\" alt=\"checkout-b-detached\"></p>"},{"title":"Visual git guide (cherry pick command)","date":"2014-05-01T11:34:00.000Z","_content":"\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Cherry-pick command\n\nThe cherry-pick command \"copies\" a commit, creating a new commit on the current branch with the same message and patch as another commit.   \n\n![cherry-pick](/assets/images/legacy/cherry-pick.png)","source":"_posts/2014-05-01-visual-git-guide-cherry-pick-command.md","raw":"---\n\ntitle: \"Visual git guide (cherry pick command)\"\ndate: 2014-05-01 19:34\ncategories: Tools\ntags: [Git]\n\n---\n\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Cherry-pick command\n\nThe cherry-pick command \"copies\" a commit, creating a new commit on the current branch with the same message and patch as another commit.   \n\n![cherry-pick](/assets/images/legacy/cherry-pick.png)","slug":"2014-05-01-visual-git-guide-cherry-pick-command","published":1,"updated":"2023-09-02T17:45:14.356Z","_id":"clm281di8001bc2v58h3e6bl5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Cherry-pick-command\"><a href=\"#Cherry-pick-command\" class=\"headerlink\" title=\"Cherry-pick command\"></a>Cherry-pick command</h3><p>The cherry-pick command “copies” a commit, creating a new commit on the current branch with the same message and patch as another commit.   </p>\n<p><img src=\"/assets/images/legacy/cherry-pick.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/cherry-pick.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"cherry-pick\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Cherry-pick-command\"><a href=\"#Cherry-pick-command\" class=\"headerlink\" title=\"Cherry-pick command\"></a>Cherry-pick command</h3><p>The cherry-pick command “copies” a commit, creating a new commit on the current branch with the same message and patch as another commit.   </p>\n<p><img src=\"/assets/images/legacy/cherry-pick.png\" alt=\"cherry-pick\"></p>\n"},{"title":"Visual git guide (commit command)","date":"2014-05-03T12:02:00.000Z","_content":"\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Commit command\nWhen you commit, git creates a new commit object using the files from the stage and sets the parent to the current commit. It then points the current branch to this new commit. In the image below, the current branch is *master*. Before the command was run, *master* pointed to ed489. Afterward, a new commit, f0cec, was created, with parent ed489, and then *master* was moved to the new commit.\n\n<!--more-->   \n\n![commit-master](/assets/images/legacy/commit-master.png)\n\nThis same process happens even when the current branch is an ancestor of another. Below, a commit occurs on branch *maint*, which was an ancestor of *master*, resulting in 1800b. Afterward, *maint* is no longer an ancestor of *master*. To join the two histories, a **merge** (or **rebase**) will be necessary.   \n\n![commit-maint](/assets/images/legacy/commit-maint.png)\n\nSometimes a mistake is made in a commit, but this is easy to correct with `git commit --amend`. When you use this command, git creates a new commit with the same parent as the current commit. (*The old commit will be discarded if nothing else references it.*)   \n\n![commit-amend](/assets/images/legacy/commit-amend.png)\n\nWhen **HEAD** is detached, commits work like normal, except no named branch gets updated. (*You can think of this as an anonymous branch.*)   \n\n![commit-detached](/assets/images/legacy/commit-detached.png)","source":"_posts/2014-05-03-visual-git-guide-commit-command.md","raw":"---\n\ntitle: \"Visual git guide (commit command)\"\ndate: 2014-05-03 20:02\ncategories: Tools\ntags: [Git]\n\n---\n\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Commit command\nWhen you commit, git creates a new commit object using the files from the stage and sets the parent to the current commit. It then points the current branch to this new commit. In the image below, the current branch is *master*. Before the command was run, *master* pointed to ed489. Afterward, a new commit, f0cec, was created, with parent ed489, and then *master* was moved to the new commit.\n\n<!--more-->   \n\n![commit-master](/assets/images/legacy/commit-master.png)\n\nThis same process happens even when the current branch is an ancestor of another. Below, a commit occurs on branch *maint*, which was an ancestor of *master*, resulting in 1800b. Afterward, *maint* is no longer an ancestor of *master*. To join the two histories, a **merge** (or **rebase**) will be necessary.   \n\n![commit-maint](/assets/images/legacy/commit-maint.png)\n\nSometimes a mistake is made in a commit, but this is easy to correct with `git commit --amend`. When you use this command, git creates a new commit with the same parent as the current commit. (*The old commit will be discarded if nothing else references it.*)   \n\n![commit-amend](/assets/images/legacy/commit-amend.png)\n\nWhen **HEAD** is detached, commits work like normal, except no named branch gets updated. (*You can think of this as an anonymous branch.*)   \n\n![commit-detached](/assets/images/legacy/commit-detached.png)","slug":"2014-05-03-visual-git-guide-commit-command","published":1,"updated":"2023-09-02T17:45:14.311Z","_id":"clm281nf3001dc2v56o9w9fzg","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Commit-command\"><a href=\"#Commit-command\" class=\"headerlink\" title=\"Commit command\"></a>Commit command</h3><p>When you commit, git creates a new commit object using the files from the stage and sets the parent to the current commit. It then points the current branch to this new commit. In the image below, the current branch is <em>master</em>. Before the command was run, <em>master</em> pointed to ed489. Afterward, a new commit, f0cec, was created, with parent ed489, and then <em>master</em> was moved to the new commit.</p>\n<span id=\"more\"></span>   \n\n<p><img src=\"/assets/images/legacy/commit-master.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/commit-master.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"commit-master\"></p>\n<p>This same process happens even when the current branch is an ancestor of another. Below, a commit occurs on branch <em>maint</em>, which was an ancestor of <em>master</em>, resulting in 1800b. Afterward, <em>maint</em> is no longer an ancestor of <em>master</em>. To join the two histories, a <strong>merge</strong> (or <strong>rebase</strong>) will be necessary.   </p>\n<p><img src=\"/assets/images/legacy/commit-maint.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/commit-maint.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"commit-maint\"></p>\n<p>Sometimes a mistake is made in a commit, but this is easy to correct with <code>git commit --amend</code>. When you use this command, git creates a new commit with the same parent as the current commit. (<em>The old commit will be discarded if nothing else references it.</em>)   </p>\n<p><img src=\"/assets/images/legacy/commit-amend.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/commit-amend.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"commit-amend\"></p>\n<p>When <strong>HEAD</strong> is detached, commits work like normal, except no named branch gets updated. (<em>You can think of this as an anonymous branch.</em>)   </p>\n<p><img src=\"/assets/images/legacy/commit-detached.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/commit-detached.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"commit-detached\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Commit-command\"><a href=\"#Commit-command\" class=\"headerlink\" title=\"Commit command\"></a>Commit command</h3><p>When you commit, git creates a new commit object using the files from the stage and sets the parent to the current commit. It then points the current branch to this new commit. In the image below, the current branch is <em>master</em>. Before the command was run, <em>master</em> pointed to ed489. Afterward, a new commit, f0cec, was created, with parent ed489, and then <em>master</em> was moved to the new commit.</p>","more":"<p><img src=\"/assets/images/legacy/commit-master.png\" alt=\"commit-master\"></p>\n<p>This same process happens even when the current branch is an ancestor of another. Below, a commit occurs on branch <em>maint</em>, which was an ancestor of <em>master</em>, resulting in 1800b. Afterward, <em>maint</em> is no longer an ancestor of <em>master</em>. To join the two histories, a <strong>merge</strong> (or <strong>rebase</strong>) will be necessary.   </p>\n<p><img src=\"/assets/images/legacy/commit-maint.png\" alt=\"commit-maint\"></p>\n<p>Sometimes a mistake is made in a commit, but this is easy to correct with <code>git commit --amend</code>. When you use this command, git creates a new commit with the same parent as the current commit. (<em>The old commit will be discarded if nothing else references it.</em>)   </p>\n<p><img src=\"/assets/images/legacy/commit-amend.png\" alt=\"commit-amend\"></p>\n<p>When <strong>HEAD</strong> is detached, commits work like normal, except no named branch gets updated. (<em>You can think of this as an anonymous branch.</em>)   </p>\n<p><img src=\"/assets/images/legacy/commit-detached.png\" alt=\"commit-detached\"></p>"},{"title":"Visual git guide (diff command)","date":"2014-05-20T13:02:00.000Z","_content":"\n**Note:** the original website address is [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Diff Command\nThere are various ways to look at differences between commits. Below are some common examples. Any of these commands can optionally take extra filename arguments that limit the differences to the named files.\n\n<!--more-->   \n\n![diff](/assets/images/legacy/diff.png)   \n","source":"_posts/2014-05-20-visual-git-guide-diff-command.md","raw":"---\n\ntitle: \"Visual git guide (diff command)\"\ndate: 2014-05-20 21:02\ncategories: Tools\ntags: [Git]\n---\n\n**Note:** the original website address is [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Diff Command\nThere are various ways to look at differences between commits. Below are some common examples. Any of these commands can optionally take extra filename arguments that limit the differences to the named files.\n\n<!--more-->   \n\n![diff](/assets/images/legacy/diff.png)   \n","slug":"2014-05-20-visual-git-guide-diff-command","published":1,"updated":"2023-09-02T17:45:14.311Z","_id":"clm2822mt001hc2v51k8r38dv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address is <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Diff-Command\"><a href=\"#Diff-Command\" class=\"headerlink\" title=\"Diff Command\"></a>Diff Command</h3><p>There are various ways to look at differences between commits. Below are some common examples. Any of these commands can optionally take extra filename arguments that limit the differences to the named files.</p>\n<span id=\"more\"></span>   \n\n<p><img src=\"/assets/images/legacy/diff.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/diff.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"diff\">   </p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address is <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Diff-Command\"><a href=\"#Diff-Command\" class=\"headerlink\" title=\"Diff Command\"></a>Diff Command</h3><p>There are various ways to look at differences between commits. Below are some common examples. Any of these commands can optionally take extra filename arguments that limit the differences to the named files.</p>","more":"<p><img src=\"/assets/images/legacy/diff.png\" alt=\"diff\">   </p>"},{"title":"Visual git guide (merge command)","date":"2014-06-11T11:35:00.000Z","_content":"\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Merge command\nA merge creates a new commit that incorporates changes from other commits. Before merging, the stage must match the current commit. The trivial case is if the other commit is an ancestor of the current commit, in which case nothing is done. The next most simple is if the current commit is an ancestor of the other commit. This results in a fast-forward merge. The reference is simply moved, and then the new commit is checked out.  \n\n<!--more--> \n\n![merge-ff](/assets/images/legacy/merge-ff.png)\n\nOtherwise, a \"real\" merge must occur. You can choose other strategies, but the default is to perform a \"recursive\" merge, which basically takes the current commit (ed489 below), the other commit (33104), and their common ancestor (b325c), and performs a three-way merge. The result is saved to the working directory and the stage, and then a commit occurs, with an extra parent (33104) for the new commit.   \n\n![merge](/assets/images/legacy/merge.png)\n\n","source":"_posts/2014-06-11-visual-git-guide-merge-command.md","raw":"---\n\ntitle: \"Visual git guide (merge command)\"\ndate: 2014-06-11 19:35\ncategories: Tools\ntags: [Git]\n---\n\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Merge command\nA merge creates a new commit that incorporates changes from other commits. Before merging, the stage must match the current commit. The trivial case is if the other commit is an ancestor of the current commit, in which case nothing is done. The next most simple is if the current commit is an ancestor of the other commit. This results in a fast-forward merge. The reference is simply moved, and then the new commit is checked out.  \n\n<!--more--> \n\n![merge-ff](/assets/images/legacy/merge-ff.png)\n\nOtherwise, a \"real\" merge must occur. You can choose other strategies, but the default is to perform a \"recursive\" merge, which basically takes the current commit (ed489 below), the other commit (33104), and their common ancestor (b325c), and performs a three-way merge. The result is saved to the working directory and the stage, and then a commit occurs, with an extra parent (33104) for the new commit.   \n\n![merge](/assets/images/legacy/merge.png)\n\n","slug":"2014-06-11-visual-git-guide-merge-command","published":1,"updated":"2023-09-02T17:45:14.311Z","_id":"clm282l50001jc2v50ewpcmig","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Merge-command\"><a href=\"#Merge-command\" class=\"headerlink\" title=\"Merge command\"></a>Merge command</h3><p>A merge creates a new commit that incorporates changes from other commits. Before merging, the stage must match the current commit. The trivial case is if the other commit is an ancestor of the current commit, in which case nothing is done. The next most simple is if the current commit is an ancestor of the other commit. This results in a fast-forward merge. The reference is simply moved, and then the new commit is checked out.  </p>\n<span id=\"more\"></span> \n\n<p><img src=\"/assets/images/legacy/merge-ff.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/merge-ff.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"merge-ff\"></p>\n<p>Otherwise, a “real” merge must occur. You can choose other strategies, but the default is to perform a “recursive” merge, which basically takes the current commit (ed489 below), the other commit (33104), and their common ancestor (b325c), and performs a three-way merge. The result is saved to the working directory and the stage, and then a commit occurs, with an extra parent (33104) for the new commit.   </p>\n<p><img src=\"/assets/images/legacy/merge.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/merge.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"merge\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Merge-command\"><a href=\"#Merge-command\" class=\"headerlink\" title=\"Merge command\"></a>Merge command</h3><p>A merge creates a new commit that incorporates changes from other commits. Before merging, the stage must match the current commit. The trivial case is if the other commit is an ancestor of the current commit, in which case nothing is done. The next most simple is if the current commit is an ancestor of the other commit. This results in a fast-forward merge. The reference is simply moved, and then the new commit is checked out.  </p>","more":"<p><img src=\"/assets/images/legacy/merge-ff.png\" alt=\"merge-ff\"></p>\n<p>Otherwise, a “real” merge must occur. You can choose other strategies, but the default is to perform a “recursive” merge, which basically takes the current commit (ed489 below), the other commit (33104), and their common ancestor (b325c), and performs a three-way merge. The result is saved to the working directory and the stage, and then a commit occurs, with an extra parent (33104) for the new commit.   </p>\n<p><img src=\"/assets/images/legacy/merge.png\" alt=\"merge\"></p>"},{"title":"Visual git guide (rebase command)","date":"2014-06-13T08:45:00.000Z","_content":"\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Rebase command\nA rebase is an alternative to a merge for combining multiple branches. Whereas a merge creates a single commit with two parents, leaving a non-linear history, a rebase replays the commits from the current branch onto another, leaving a linear history. *In essence, this is an automated way of performing several cherry-picks in a row*.\n\n<!--more-->\n\n![rebase](/assets/images/legacy/rebase.png)\n\nThe above command takes all the commits that exist in topic but not in master (namely 169a6 and 2c33a), replays them onto master, and then moves the branch head to the new tip. Note that the old commits will be garbage collected if they are no longer referenced.    \n\nTo limit how far back to go, use the --onto option. The following command replays onto master the most recent commits on the current branch since 169a6 (exclusive), namely 2c33a.   \n\n![rebase-onto](/assets/images/legacy/rebase-onto.png)\n\nThere is also `git rebase --interactive`, which allows one to do more complicated things than simply replaying commits, namely dropping, reordering, modifying, and squashing commits. There is no obvious picture to draw for this; see git-rebase(1) for more details.","source":"_posts/2014-06-13-visual-git-guide-rebase-command.md","raw":"---\n\ntitle: \"Visual git guide (rebase command)\"\ndate: 2014-06-13 16:45\ncategories: Tools\ntags: [Git]\n---\n\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Rebase command\nA rebase is an alternative to a merge for combining multiple branches. Whereas a merge creates a single commit with two parents, leaving a non-linear history, a rebase replays the commits from the current branch onto another, leaving a linear history. *In essence, this is an automated way of performing several cherry-picks in a row*.\n\n<!--more-->\n\n![rebase](/assets/images/legacy/rebase.png)\n\nThe above command takes all the commits that exist in topic but not in master (namely 169a6 and 2c33a), replays them onto master, and then moves the branch head to the new tip. Note that the old commits will be garbage collected if they are no longer referenced.    \n\nTo limit how far back to go, use the --onto option. The following command replays onto master the most recent commits on the current branch since 169a6 (exclusive), namely 2c33a.   \n\n![rebase-onto](/assets/images/legacy/rebase-onto.png)\n\nThere is also `git rebase --interactive`, which allows one to do more complicated things than simply replaying commits, namely dropping, reordering, modifying, and squashing commits. There is no obvious picture to draw for this; see git-rebase(1) for more details.","slug":"2014-06-13-visual-git-guide-rebase-command","published":1,"updated":"2023-09-02T17:45:14.311Z","_id":"clm2837xs001mc2v53t279ogu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Rebase-command\"><a href=\"#Rebase-command\" class=\"headerlink\" title=\"Rebase command\"></a>Rebase command</h3><p>A rebase is an alternative to a merge for combining multiple branches. Whereas a merge creates a single commit with two parents, leaving a non-linear history, a rebase replays the commits from the current branch onto another, leaving a linear history. <em>In essence, this is an automated way of performing several cherry-picks in a row</em>.</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/assets/images/legacy/rebase.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/rebase.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"rebase\"></p>\n<p>The above command takes all the commits that exist in topic but not in master (namely 169a6 and 2c33a), replays them onto master, and then moves the branch head to the new tip. Note that the old commits will be garbage collected if they are no longer referenced.    </p>\n<p>To limit how far back to go, use the –onto option. The following command replays onto master the most recent commits on the current branch since 169a6 (exclusive), namely 2c33a.   </p>\n<p><img src=\"/assets/images/legacy/rebase-onto.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/rebase-onto.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"rebase-onto\"></p>\n<p>There is also <code>git rebase --interactive</code>, which allows one to do more complicated things than simply replaying commits, namely dropping, reordering, modifying, and squashing commits. There is no obvious picture to draw for this; see git-rebase(1) for more details.</p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Rebase-command\"><a href=\"#Rebase-command\" class=\"headerlink\" title=\"Rebase command\"></a>Rebase command</h3><p>A rebase is an alternative to a merge for combining multiple branches. Whereas a merge creates a single commit with two parents, leaving a non-linear history, a rebase replays the commits from the current branch onto another, leaving a linear history. <em>In essence, this is an automated way of performing several cherry-picks in a row</em>.</p>","more":"<p><img src=\"/assets/images/legacy/rebase.png\" alt=\"rebase\"></p>\n<p>The above command takes all the commits that exist in topic but not in master (namely 169a6 and 2c33a), replays them onto master, and then moves the branch head to the new tip. Note that the old commits will be garbage collected if they are no longer referenced.    </p>\n<p>To limit how far back to go, use the –onto option. The following command replays onto master the most recent commits on the current branch since 169a6 (exclusive), namely 2c33a.   </p>\n<p><img src=\"/assets/images/legacy/rebase-onto.png\" alt=\"rebase-onto\"></p>\n<p>There is also <code>git rebase --interactive</code>, which allows one to do more complicated things than simply replaying commits, namely dropping, reordering, modifying, and squashing commits. There is no obvious picture to draw for this; see git-rebase(1) for more details.</p>"},{"title":"Visual git guide (reset command)","date":"2014-07-07T15:15:00.000Z","_content":"\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Reset command\n**The reset command moves the current branch to another position**, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory.   \n\nIf a commit is given with no filenames, the current branch is moved to that commit, and then the stage is updated to match this commit. If --hard is given, the working directory is also updated. If --soft is given, neither is updated.\n\n<!--more-->   \n\n![reset-commit](/assets/images/legacy/reset-commit.png)\n\nIf a commit is not given, it defaults to HEAD. In this case, the branch is not moved, but the stage (and optionally the working directory, if --hard is given) are reset to the contents of the last commit.   \n\n![reset](/assets/images/legacy/reset.png)\n\nIf a filename (and/or -p) is given, then the command works similarly to checkout with a filename, except only the stage (and not the working directory) is updated. (You may also specify the commit from which to take files, rather than HEAD.)\n\n![reset-files](/assets/images/legacy/reset-files.png)","source":"_posts/2014-07-07-visual-git-guide-reset-command.md","raw":"---\n\ntitle: \"Visual git guide (reset command)\"\ndate: 2014-07-07 23:15\ncategories: Tools\ntags: [Git]\n---\n\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Reset command\n**The reset command moves the current branch to another position**, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory.   \n\nIf a commit is given with no filenames, the current branch is moved to that commit, and then the stage is updated to match this commit. If --hard is given, the working directory is also updated. If --soft is given, neither is updated.\n\n<!--more-->   \n\n![reset-commit](/assets/images/legacy/reset-commit.png)\n\nIf a commit is not given, it defaults to HEAD. In this case, the branch is not moved, but the stage (and optionally the working directory, if --hard is given) are reset to the contents of the last commit.   \n\n![reset](/assets/images/legacy/reset.png)\n\nIf a filename (and/or -p) is given, then the command works similarly to checkout with a filename, except only the stage (and not the working directory) is updated. (You may also specify the commit from which to take files, rather than HEAD.)\n\n![reset-files](/assets/images/legacy/reset-files.png)","slug":"2014-07-07-visual-git-guide-reset-command","published":1,"updated":"2023-09-02T17:45:14.311Z","_id":"clm283ots001oc2v5hrqt99r6","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Reset-command\"><a href=\"#Reset-command\" class=\"headerlink\" title=\"Reset command\"></a>Reset command</h3><p><strong>The reset command moves the current branch to another position</strong>, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory.   </p>\n<p>If a commit is given with no filenames, the current branch is moved to that commit, and then the stage is updated to match this commit. If –hard is given, the working directory is also updated. If –soft is given, neither is updated.</p>\n<span id=\"more\"></span>   \n\n<p><img src=\"/assets/images/legacy/reset-commit.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/reset-commit.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"reset-commit\"></p>\n<p>If a commit is not given, it defaults to HEAD. In this case, the branch is not moved, but the stage (and optionally the working directory, if –hard is given) are reset to the contents of the last commit.   </p>\n<p><img src=\"/assets/images/legacy/reset.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/reset.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"reset\"></p>\n<p>If a filename (and&#x2F;or -p) is given, then the command works similarly to checkout with a filename, except only the stage (and not the working directory) is updated. (You may also specify the commit from which to take files, rather than HEAD.)</p>\n<p><img src=\"/assets/images/legacy/reset-files.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/images/legacy/reset-files.png\" srcset=\"https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp\" alt=\"reset-files\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Reset-command\"><a href=\"#Reset-command\" class=\"headerlink\" title=\"Reset command\"></a>Reset command</h3><p><strong>The reset command moves the current branch to another position</strong>, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory.   </p>\n<p>If a commit is given with no filenames, the current branch is moved to that commit, and then the stage is updated to match this commit. If –hard is given, the working directory is also updated. If –soft is given, neither is updated.</p>","more":"<p><img src=\"/assets/images/legacy/reset-commit.png\" alt=\"reset-commit\"></p>\n<p>If a commit is not given, it defaults to HEAD. In this case, the branch is not moved, but the stage (and optionally the working directory, if –hard is given) are reset to the contents of the last commit.   </p>\n<p><img src=\"/assets/images/legacy/reset.png\" alt=\"reset\"></p>\n<p>If a filename (and&#x2F;or -p) is given, then the command works similarly to checkout with a filename, except only the stage (and not the working directory) is updated. (You may also specify the commit from which to take files, rather than HEAD.)</p>\n<p><img src=\"/assets/images/legacy/reset-files.png\" alt=\"reset-files\"></p>"},{"title":"Visual git guide (technical notes)","date":"2014-08-07T07:02:00.000Z","_content":"\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Technical notes\n\nThe contents of files are not actually stored in the index (.git/index) or in commit objects. Rather, each file is stored in the object database (.git/objects) as a blob, identified by its SHA-1 hash. The index file lists the filenames along with the identifier of the associated blob, as well as some other data. For commits, there is an additional data type, a tree, also identified by its hash. Trees correspond to directories in the working directory, and contain a list of trees and blobs corresponding to each filename within that directory. Each commit stores the identifier of its top-level tree, which in turn contains all of the blobs and other trees associated with that commit.   \n\n<!--more-->\n\nIf you make a commit using a detached HEAD, the last commit really is referenced by something: the reflog for HEAD. However, this will expire after a while, so the commit will eventually be garbage collected, similar to commits discarded with `git commit --amend` or `git rebase`.","source":"_posts/2014-08-07-visual-git-guide-technical-notes.md","raw":"---\n\ntitle: \"Visual git guide (technical notes)\"\ndate: 2014-08-07 15:02\ncategories: Tools\ntags: [Git]\n---\n\n**Note:** the original website address in [here](http://marklodato.github.io/visual-git-guide/index-en.html?no-svg)\n\n### Technical notes\n\nThe contents of files are not actually stored in the index (.git/index) or in commit objects. Rather, each file is stored in the object database (.git/objects) as a blob, identified by its SHA-1 hash. The index file lists the filenames along with the identifier of the associated blob, as well as some other data. For commits, there is an additional data type, a tree, also identified by its hash. Trees correspond to directories in the working directory, and contain a list of trees and blobs corresponding to each filename within that directory. Each commit stores the identifier of its top-level tree, which in turn contains all of the blobs and other trees associated with that commit.   \n\n<!--more-->\n\nIf you make a commit using a detached HEAD, the last commit really is referenced by something: the reflog for HEAD. However, this will expire after a while, so the commit will eventually be garbage collected, similar to commits discarded with `git commit --amend` or `git rebase`.","slug":"2014-08-07-visual-git-guide-technical-notes","published":1,"updated":"2023-09-02T18:00:36.147Z","_id":"clm284iph001sc2v54ro7293x","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Technical-notes\"><a href=\"#Technical-notes\" class=\"headerlink\" title=\"Technical notes\"></a>Technical notes</h3><p>The contents of files are not actually stored in the index (.git&#x2F;index) or in commit objects. Rather, each file is stored in the object database (.git&#x2F;objects) as a blob, identified by its SHA-1 hash. The index file lists the filenames along with the identifier of the associated blob, as well as some other data. For commits, there is an additional data type, a tree, also identified by its hash. Trees correspond to directories in the working directory, and contain a list of trees and blobs corresponding to each filename within that directory. Each commit stores the identifier of its top-level tree, which in turn contains all of the blobs and other trees associated with that commit.   </p>\n<span id=\"more\"></span>\n\n<p>If you make a commit using a detached HEAD, the last commit really is referenced by something: the reflog for HEAD. However, this will expire after a while, so the commit will eventually be garbage collected, similar to commits discarded with <code>git commit --amend</code> or <code>git rebase</code>.</p>\n","site":{"data":{}},"excerpt":"<p><strong>Note:</strong> the original website address in <a href=\"http://marklodato.github.io/visual-git-guide/index-en.html?no-svg\">here</a></p>\n<h3 id=\"Technical-notes\"><a href=\"#Technical-notes\" class=\"headerlink\" title=\"Technical notes\"></a>Technical notes</h3><p>The contents of files are not actually stored in the index (.git&#x2F;index) or in commit objects. Rather, each file is stored in the object database (.git&#x2F;objects) as a blob, identified by its SHA-1 hash. The index file lists the filenames along with the identifier of the associated blob, as well as some other data. For commits, there is an additional data type, a tree, also identified by its hash. Trees correspond to directories in the working directory, and contain a list of trees and blobs corresponding to each filename within that directory. Each commit stores the identifier of its top-level tree, which in turn contains all of the blobs and other trees associated with that commit.   </p>","more":"<p>If you make a commit using a detached HEAD, the last commit really is referenced by something: the reflog for HEAD. However, this will expire after a while, so the commit will eventually be garbage collected, similar to commits discarded with <code>git commit --amend</code> or <code>git rebase</code>.</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clm27g4p5004wazv5dpoo24j9","category_id":"clm27g4pj007bazv55oe57zsm","_id":"clm27g4pw009tazv518sfe94o"},{"post_id":"clm27g4p6004xazv5euyh1poj","category_id":"clm27g4pj007bazv55oe57zsm","_id":"clm27g4px009wazv5419u1o9g"},{"post_id":"clm27g4p60050azv57qyg3zjm","category_id":"clm27g4pj007bazv55oe57zsm","_id":"clm27g4px009zazv534w7c75w"},{"post_id":"clm27g4p90058azv5av4aczg5","category_id":"clm27g4pm007kazv5hh60gahd","_id":"clm27g4py00a5azv59jcw09l1"},{"post_id":"clm27sq2g000fc2v52awzczl2","category_id":"clm27tcex000jc2v5770i3j7g","_id":"clm27tcey000kc2v5c38n6a8n"},{"post_id":"clm27g4nu001dazv5cugu3d1g","category_id":"clm27tcex000jc2v5770i3j7g","_id":"clm27yrrm000zc2v5b0c33kma"},{"post_id":"clm27g4ny001fazv5csq73t34","category_id":"clm27tcex000jc2v5770i3j7g","_id":"clm27z1ha0011c2v5egu1duzl"},{"post_id":"clm27g4nz001hazv5a5rq2c53","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm28jksf0021c2v5d4271rfa"},{"post_id":"clm27g4o0001jazv5d9qkdvlz","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm28jqqz0023c2v5ftjp9vgi"},{"post_id":"clm27g4o1001mazv51qhj31tk","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm28kt0j002bc2v538rceit0"},{"post_id":"clm27g4o1001oazv59hcyfuy0","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm28l9qt002dc2v511tte4lw"},{"post_id":"clm27g4o2001qazv50j51cyft","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm28lls2002ic2v56913hmwi"},{"post_id":"clm27g4o4001vazv5b0ga8cpm","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm28ogbz002pc2v5cpgb1eny"},{"post_id":"clm27g4o70022azv5aku299g7","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm28szwt002rc2v51ttl81tx"},{"post_id":"clm27g4o5001yazv52wts2pl3","category_id":"clm28tly2002zc2v5cebo31dw","_id":"clm28tly30033c2v58d7u1lrn"},{"post_id":"clm27g4o3001tazv59hdyccm4","category_id":"clm28vgy00038c2v54xd0ed3z","_id":"clm28vgy10039c2v559kt25jk"},{"post_id":"clm27wxut000pc2v54cqy7fuc","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbkm003ec2v5gd9u7az1"},{"post_id":"clm280xqc0019c2v5f9953mp8","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbkm003fc2v58ulcbp0z"},{"post_id":"clm27rxvv0009c2v513v812tc","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbkn003gc2v5h3yu2h5z"},{"post_id":"clm27ztrj0014c2v5a92s6xhl","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbkn003hc2v52c9q0k32"},{"post_id":"clm280b2m0017c2v5cz446lha","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbks003jc2v59ph98rnj"},{"post_id":"clm27r4s30003c2v5b7ku1tvt","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbkt003lc2v54qxb2id8"},{"post_id":"clm281di8001bc2v58h3e6bl5","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbkv003oc2v5eez6fb2d"},{"post_id":"clm27wfwb000nc2v57mutg1g5","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbkx003pc2v5cs40b5c2"},{"post_id":"clm2822mt001hc2v51k8r38dv","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbky003qc2v5g6vifnt7"},{"post_id":"clm27rpf30006c2v50idq5ott","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl5003rc2v59yeg71qq"},{"post_id":"clm283ots001oc2v5hrqt99r6","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl6003tc2v55jaqa05l"},{"post_id":"clm282l50001jc2v50ewpcmig","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl6003vc2v5d98d6myp"},{"post_id":"clm27quyk0000c2v5es0yd7m9","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl6003wc2v56mzv1p5e"},{"post_id":"clm284iph001sc2v54ro7293x","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl6003xc2v58vks3woh"},{"post_id":"clm27xc7n000rc2v5069ca66w","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl6003yc2v5eg2ndy83"},{"post_id":"clm2837xs001mc2v53t279ogu","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl6003zc2v51j719ssr"},{"post_id":"clm281nf3001dc2v56o9w9fzg","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbl80040c2v54d3i92db"},{"post_id":"clm27sev2000cc2v5d07z28g5","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbn70041c2v516rphzrd"},{"post_id":"clm27vkag000lc2v5buuibu1v","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbna0043c2v56n2xbskh"},{"post_id":"clm27g4o60020azv57cvqdjyx","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm28wbna0044c2v558wj4o7w"},{"post_id":"clm27g4o70023azv5f34oe1w2","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm28xm9k0046c2v5h0nrbbxe"},{"post_id":"clm27g4o80025azv50dpc1zpq","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm28ye20004cc2v50knq3r3b"},{"post_id":"clm27g4o80026azv5773zgna7","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm28zayz004jc2v5aq8adv9e"},{"post_id":"clm27g4o90029azv57gi0ewgn","category_id":"clm2908ye004kc2v5d1x48tvz","_id":"clm2908yf004nc2v50dze3jpg"},{"post_id":"clm27g4oa002bazv563eghlsm","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm290sj2004wc2v53kbf3bzq"},{"post_id":"clm27g4ob002gazv59ucq12pz","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm291x6s004yc2v5cb3shqu6"},{"post_id":"clm27g4oc002hazv5enf588ik","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm2921900051c2v530jf4o0m"},{"post_id":"clm27g4od002jazv5fhmw1kw5","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm292jfk0053c2v5bflmelsb"},{"post_id":"clm27g4oe002kazv52z7f45jk","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm295u810056c2v59ig013nm"},{"post_id":"clm27g4of002nazv580v620zp","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm2968qh005ac2v56lmm94nu"},{"post_id":"clm27g4of002oazv5ey6m948l","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm297v3s005hc2v5ep8acjx9"},{"post_id":"clm27g4og002razv56ce9fhpz","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm298eqo005jc2v5hpgxg3cp"},{"post_id":"clm27g4oh002tazv5cfzq7ui5","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm298pyw005lc2v5dfve0tj2"},{"post_id":"clm27g4oh002vazv56pmcennq","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm29984a005oc2v52vwpdbfg"},{"post_id":"clm27g4oi002wazv5apya4ty7","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm299jvx005rc2v5br6ubzx4"},{"post_id":"clm27g4oj002zazv582uea0t6","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm299zfs005tc2v59vvd691v"},{"post_id":"clm27g4oj002yazv57uxsax0e","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29a61w005zc2v5d4v54769"},{"post_id":"clm27g4ok0031azv5h98zheu4","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29a93i0062c2v51rii5yx9"},{"post_id":"clm27g4ol0034azv5fb0b8kyk","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29abyq0065c2v56u2b8k39"},{"post_id":"clm27g4ol0035azv5goc5fdy9","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29ae9p0068c2v5gp0y73ni"},{"post_id":"clm27g4om0037azv51mri116c","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29ah0d006bc2v5gan7hec3"},{"post_id":"clm27g4oq003hazv58kmefqec","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm29ba48006dc2v58jke5xud"},{"post_id":"clm27g4or003iazv56jzx1hf7","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm29d87j006oc2v5fq1za6zz"},{"post_id":"clm27g4or003kazv5cd3vcjzt","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29dle2006wc2v545auhi9j"},{"post_id":"clm27g4os003lazv558e933fh","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29e92y006yc2v5at3jd0uo"},{"post_id":"clm27g4ot003oazv56zosaypz","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29efwj0071c2v5f42g6y3y"},{"post_id":"clm27g4oy0047azv507yr0f1b","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm29faxo0074c2v5dyh98ybn"},{"post_id":"clm27g4oz004cazv5byi68us9","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29g1kr0077c2v5aw6wd8jz"},{"post_id":"clm27g4p2004nazv588ji66g5","category_id":"clm28vgy00038c2v54xd0ed3z","_id":"clm29h0pl0079c2v5f80zf7gk"},{"post_id":"clm27g4p3004oazv52pamc16t","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm29hh9z007dc2v53n40cw7b"},{"post_id":"clm27g4p4004tazv58slsa4lw","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm29irhl007mc2v5hl3zhbv3"},{"post_id":"clm27g4p70051azv5cz915yj8","category_id":"clm29k9s0007tc2v5bb266q2q","_id":"clm29k9s1007wc2v5c08z4b55"},{"post_id":"clm27g4p80054azv5gfcigy0n","category_id":"clm28ogby002mc2v5aeptb2dj","_id":"clm29l20n0080c2v5cfk8fset"},{"post_id":"clm27g4p80055azv54tn60z6d","category_id":"clm27g4pm007kazv5hh60gahd","_id":"clm29lxal0087c2v518tr4cnh"},{"post_id":"clm27g4p9005aazv5bwjbeldv","category_id":"clm27g4pm007kazv5hh60gahd","_id":"clm29m61z008cc2v5bzyj9c5w"},{"post_id":"clm27g4on0038azv5fo4pbfnm","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2axz8u0002efv53er14gnv"},{"post_id":"clm27g4on003aazv5ev6sal7f","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay04a0005efv52o47awpf"},{"post_id":"clm27g4oo003bazv5bsedb54n","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay0w60008efv58467brtu"},{"post_id":"clm27g4op003dazv57xxpgh43","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay2ee000befv5338j4hxv"},{"post_id":"clm27g4op003eazv51pzvhul6","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay35w000eefv50yyk50p1"},{"post_id":"clm27g4oq003fazv54hhw2ho9","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay402000hefv517p85hiu"},{"post_id":"clm27g4ou003sazv56itdfaci","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay4qu000jefv50t6vbdlo"},{"post_id":"clm27g4ot003pazv58yqe5vqp","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay5h4000lefv59tl86bou"},{"post_id":"clm27g4ou003uazv5gx4wgicv","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay6mm000nefv5bi3o8zq9"},{"post_id":"clm27g4ov003xazv58ban09dy","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay7gb000pefv561hnaulb"},{"post_id":"clm27g4ov003zazv59iwedncz","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay854000refv593h08ufw"},{"post_id":"clm27g4ow0042azv55atddbos","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay8vf000tefv578r3d0g7"},{"post_id":"clm27g4ow0043azv5gwywd9lt","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ay9gl000vefv50s4x1543"},{"post_id":"clm27g4ox0046azv59262dbqf","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2aya36000xefv5bm74gigv"},{"post_id":"clm27g4oy0049azv5f6810f90","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ayaq9000zefv55ily95ur"},{"post_id":"clm27g4oz004bazv5hj5i7ko3","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2aybkp0011efv5a10tg4m3"},{"post_id":"clm27g4p0004fazv5cuhy86d4","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2aycm30013efv52zwlge4m"},{"post_id":"clm27g4p0004gazv5ai4e319g","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2aydyt0016efv5aessepze"},{"post_id":"clm27g4p1004jazv577fg8n9g","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ayf1j0018efv51ovtg3y9"},{"post_id":"clm27g4p2004lazv5h93ubtjx","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ayfnh001aefv57jfr1w0o"},{"post_id":"clm27g4p3004qazv5hfsqgdt3","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2aygov001cefv54ulddp0m"},{"post_id":"clm27g4p5004uazv5356w6dkt","category_id":"clm28jkse001yc2v57mrv2hc1","_id":"clm2ayhd3001eefv5b83t5z6o"},{"post_id":"clm27g4ob002eazv53e4wdp7o","category_id":"clm27g4pd005zazv5egkte63t","_id":"clm2c1xui0004jsv5hpob8vtm"}],"PostTag":[{"post_id":"clm27quyk0000c2v5es0yd7m9","tag_id":"clm27g4n70003azv52nm82atq","_id":"clm27quyn0001c2v532qte8if"},{"post_id":"clm27r4s30003c2v5b7ku1tvt","tag_id":"clm27g4n70003azv52nm82atq","_id":"clm27r4s40004c2v5bps5ctnq"},{"post_id":"clm27rpf30006c2v50idq5ott","tag_id":"clm27g4n70003azv52nm82atq","_id":"clm27rpf40007c2v55r4ianhl"},{"post_id":"clm27rxvv0009c2v513v812tc","tag_id":"clm27g4n70003azv52nm82atq","_id":"clm27rxvw000ac2v5f2wf1ffm"},{"post_id":"clm27sev2000cc2v5d07z28g5","tag_id":"clm27g4n70003azv52nm82atq","_id":"clm27sev3000dc2v529kq8k98"},{"post_id":"clm27sq2g000fc2v52awzczl2","tag_id":"clm27t5bj000hc2v59btc9xl2","_id":"clm27t5bk000ic2v5598mbnek"},{"post_id":"clm27g4nu001dazv5cugu3d1g","tag_id":"clm27t5bj000hc2v59btc9xl2","_id":"clm27yrrm000yc2v5az51casl"},{"post_id":"clm27g4ny001fazv5csq73t34","tag_id":"clm27t5bj000hc2v59btc9xl2","_id":"clm27z1ha0010c2v52fjk0upf"},{"post_id":"clm27ztrj0014c2v5a92s6xhl","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm27ztrl0015c2v5czyr9uft"},{"post_id":"clm281nf3001dc2v56o9w9fzg","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm281u6s001fc2v58ilf61pl"},{"post_id":"clm282l50001jc2v50ewpcmig","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm282l51001kc2v5bkto5xtw"},{"post_id":"clm283ots001oc2v5hrqt99r6","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm284aey001qc2v5grmi74no"},{"post_id":"clm284iph001sc2v54ro7293x","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm284ipi001tc2v5at7of85z"},{"post_id":"clm27g4nz001hazv5a5rq2c53","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm28jkse0020c2v53bsh318b"},{"post_id":"clm27g4o0001jazv5d9qkdvlz","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm28jqqy0022c2v5evad7xpd"},{"post_id":"clm27g4nz001hazv5a5rq2c53","tag_id":"clm28k4eg0024c2v586wp6aix","_id":"clm28k4eg0025c2v5f75419fl"},{"post_id":"clm27g4o0001jazv5d9qkdvlz","tag_id":"clm28k4eg0024c2v586wp6aix","_id":"clm28k8de0026c2v5d2s35pxk"},{"post_id":"clm27g4o1001mazv51qhj31tk","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm28kt0j0029c2v53a1zbali"},{"post_id":"clm27g4o1001mazv51qhj31tk","tag_id":"clm28k4eg0024c2v586wp6aix","_id":"clm28kt0j002ac2v534ez4dv8"},{"post_id":"clm27g4o1001oazv59hcyfuy0","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm28l9qt002ec2v583782mz5"},{"post_id":"clm27g4o1001oazv59hcyfuy0","tag_id":"clm28l9qt002cc2v5e6xtbp98","_id":"clm28l9qt002fc2v53qq386x1"},{"post_id":"clm27g4o2001qazv50j51cyft","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm28lls1002gc2v5e2zwf2oh"},{"post_id":"clm27g4o2001qazv50j51cyft","tag_id":"clm28k4eg0024c2v586wp6aix","_id":"clm28lls2002hc2v561fw6mrr"},{"post_id":"clm27g4o70022azv5aku299g7","tag_id":"clm28te59002tc2v5fvu4auuo","_id":"clm28te59002vc2v53zvjficb"},{"post_id":"clm27g4o70022azv5aku299g7","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm28te59002wc2v5878o5vxs"},{"post_id":"clm27g4o60020azv57cvqdjyx","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm28thkb002xc2v55f848sko"},{"post_id":"clm27g4o5001yazv52wts2pl3","tag_id":"clm28tly20030c2v576pj4x0a","_id":"clm28tly30031c2v52sb20ao9"},{"post_id":"clm27g4o5001yazv52wts2pl3","tag_id":"clm28szwt002qc2v54web2mv9","_id":"clm28tly30032c2v5hc0uhlyg"},{"post_id":"clm27g4o3001tazv59hdyccm4","tag_id":"clm28vojg003ac2v528yj1qin","_id":"clm28vojg003bc2v576y26toe"},{"post_id":"clm27wxut000pc2v54cqy7fuc","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbkk003cc2v520t1hji0"},{"post_id":"clm280xqc0019c2v5f9953mp8","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbkl003dc2v5fft12h1a"},{"post_id":"clm280b2m0017c2v5cz446lha","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbkr003ic2v51tmx7hwe"},{"post_id":"clm281di8001bc2v58h3e6bl5","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbks003kc2v58iv27rka"},{"post_id":"clm27wfwb000nc2v57mutg1g5","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbkt003mc2v507t242g3"},{"post_id":"clm2822mt001hc2v51k8r38dv","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbku003nc2v5bkoxdczb"},{"post_id":"clm27xc7n000rc2v5069ca66w","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbl5003sc2v5hcbhcyq7"},{"post_id":"clm2837xs001mc2v53t279ogu","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbl6003uc2v54hsi7ccd"},{"post_id":"clm27vkag000lc2v5buuibu1v","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm28wbn90042c2v5dtgzbees"},{"post_id":"clm27g4o70023azv5f34oe1w2","tag_id":"clm28xm9j0045c2v5d39q2teu","_id":"clm28xm9k0047c2v5dxk37vi7"},{"post_id":"clm27g4o70023azv5f34oe1w2","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm28xm9k0048c2v5bjbzhu8d"},{"post_id":"clm27g4o70023azv5f34oe1w2","tag_id":"clm28xros0049c2v55ova1o50","_id":"clm28xrot004ac2v55zjf1fu6"},{"post_id":"clm27g4o80025azv50dpc1zpq","tag_id":"clm28ye1z004bc2v5aksafsz4","_id":"clm28ye20004ec2v5eoep4yxs"},{"post_id":"clm27g4o80025azv50dpc1zpq","tag_id":"clm28ye20004dc2v5cu1dd0pj","_id":"clm28ye21004fc2v5bvqd5omi"},{"post_id":"clm27g4o70022azv5aku299g7","tag_id":"clm28ye20004dc2v5cu1dd0pj","_id":"clm28yshe004gc2v53uws6aae"},{"post_id":"clm27g4o80026azv5773zgna7","tag_id":"clm28ye1z004bc2v5aksafsz4","_id":"clm28zayz004hc2v55rl14isl"},{"post_id":"clm27g4o80026azv5773zgna7","tag_id":"clm28ye20004dc2v5cu1dd0pj","_id":"clm28zayz004ic2v5gz6df03i"},{"post_id":"clm27g4o90029azv57gi0ewgn","tag_id":"clm290g3p004oc2v510bgc33q","_id":"clm290g3q004rc2v5f71mhkjz"},{"post_id":"clm27g4o90029azv57gi0ewgn","tag_id":"clm290g3p004pc2v522hr93kp","_id":"clm290g3q004sc2v51tev9y55"},{"post_id":"clm27g4o90029azv57gi0ewgn","tag_id":"clm290g3q004qc2v57us89r82","_id":"clm290g3q004tc2v56ahz6d2z"},{"post_id":"clm27g4oa002bazv563eghlsm","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm290sj2004uc2v50740h1un"},{"post_id":"clm27g4oa002bazv563eghlsm","tag_id":"clm28k4eg0024c2v586wp6aix","_id":"clm290sj2004vc2v580hygdmh"},{"post_id":"clm27g4ob002gazv59ucq12pz","tag_id":"clm291x6r004xc2v55emj2xkc","_id":"clm291x6s004zc2v5fhhr1dkf"},{"post_id":"clm27g4oc002hazv5enf588ik","tag_id":"clm291x6r004xc2v55emj2xkc","_id":"clm2921900050c2v565zf6leh"},{"post_id":"clm27g4od002jazv5fhmw1kw5","tag_id":"clm292jfj0052c2v5c78f3j6b","_id":"clm292jfk0054c2v5djtpar67"},{"post_id":"clm27g4oe002kazv52z7f45jk","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm295u810057c2v50teub7gi"},{"post_id":"clm27g4oe002kazv52z7f45jk","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm295u810058c2v52kf9304y"},{"post_id":"clm27g4of002nazv580v620zp","tag_id":"clm2968qh0059c2v57gvl651u","_id":"clm2968qi005bc2v55jl94tev"},{"post_id":"clm27g4o60020azv57cvqdjyx","tag_id":"clm297k24005dc2v5gh39558d","_id":"clm297k24005ec2v5hzfu6g5u"},{"post_id":"clm27g4of002oazv5ey6m948l","tag_id":"clm297k24005dc2v5gh39558d","_id":"clm297v3s005fc2v59lwlfdbb"},{"post_id":"clm27g4of002oazv5ey6m948l","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm297v3s005gc2v5fh691po5"},{"post_id":"clm27g4oh002vazv56pmcennq","tag_id":"clm297k24005dc2v5gh39558d","_id":"clm29984a005mc2v54zl5f4gc"},{"post_id":"clm27g4oh002vazv56pmcennq","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm29984a005nc2v5eair28jo"},{"post_id":"clm27g4oi002wazv5apya4ty7","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm299jvx005pc2v5gkvqh94s"},{"post_id":"clm27g4oi002wazv5apya4ty7","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm299jvx005qc2v55t7thecm"},{"post_id":"clm27g4oj002zazv582uea0t6","tag_id":"clm299zfr005sc2v54ll24wef","_id":"clm299zfs005vc2v55ohegsbf"},{"post_id":"clm27g4oj002zazv582uea0t6","tag_id":"clm299zfs005uc2v5bsr5dc3x","_id":"clm299zfs005wc2v5gg918pc8"},{"post_id":"clm27g4oj002yazv57uxsax0e","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm29a61w005xc2v52yld214c"},{"post_id":"clm27g4oj002yazv57uxsax0e","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm29a61w005yc2v5e1f3dy2h"},{"post_id":"clm27g4ok0031azv5h98zheu4","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm29a93i0060c2v5g7kpggsk"},{"post_id":"clm27g4ok0031azv5h98zheu4","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm29a93i0061c2v5b1nv6j2a"},{"post_id":"clm27g4ol0034azv5fb0b8kyk","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm29abyq0063c2v5eipegtc9"},{"post_id":"clm27g4ol0034azv5fb0b8kyk","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm29abyq0064c2v52mp423oh"},{"post_id":"clm27g4ol0035azv5goc5fdy9","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm29ae9p0066c2v53m5q0nwl"},{"post_id":"clm27g4ol0035azv5goc5fdy9","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm29ae9p0067c2v570gc36sz"},{"post_id":"clm27g4om0037azv51mri116c","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm29ah0d0069c2v52ob662ti"},{"post_id":"clm27g4om0037azv51mri116c","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm29ah0d006ac2v5b5sx4qfl"},{"post_id":"clm27g4oq003hazv58kmefqec","tag_id":"clm291x6r004xc2v55emj2xkc","_id":"clm29ba48006cc2v55t60b352"},{"post_id":"clm27g4oq003hazv58kmefqec","tag_id":"clm29bo1c006ec2v5cinlcwqd","_id":"clm29bo1d006fc2v522zeb8be"},{"post_id":"clm27g4o4001vazv5b0ga8cpm","tag_id":"clm29cxa6006gc2v5dmyx7w5i","_id":"clm29cxa6006hc2v56kvl11dt"},{"post_id":"clm27g4oh002tazv5cfzq7ui5","tag_id":"clm29cxa6006gc2v5dmyx7w5i","_id":"clm29cxa7006ic2v57bdy2wzr"},{"post_id":"clm27g4of002nazv580v620zp","tag_id":"clm29cxa6006gc2v5dmyx7w5i","_id":"clm29cxcz006lc2v5glf1gajo"},{"post_id":"clm27g4og002razv56ce9fhpz","tag_id":"clm29cxa6006gc2v5dmyx7w5i","_id":"clm29cxd0006mc2v5fxj2022y"},{"post_id":"clm27g4or003iazv56jzx1hf7","tag_id":"clm29cxa6006gc2v5dmyx7w5i","_id":"clm29d87j006qc2v5f9bz8gkd"},{"post_id":"clm27g4or003iazv56jzx1hf7","tag_id":"clm29d87i006nc2v504ox15b5","_id":"clm29d87j006rc2v526zl58qo"},{"post_id":"clm27g4or003iazv56jzx1hf7","tag_id":"clm29d87j006pc2v5gs74ertu","_id":"clm29d87j006sc2v5hk77dj3x"},{"post_id":"clm27g4or003iazv56jzx1hf7","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm29d87k006tc2v54250d7jg"},{"post_id":"clm27g4or003kazv5cd3vcjzt","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm29dle2006uc2v514s6h3hs"},{"post_id":"clm27g4or003kazv5cd3vcjzt","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm29dle2006vc2v55d0z3bz7"},{"post_id":"clm27g4os003lazv558e933fh","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm29e92z006zc2v50or69357"},{"post_id":"clm27g4ot003oazv56zosaypz","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm29efwj0070c2v56jfaa7bi"},{"post_id":"clm27g4oy0047azv507yr0f1b","tag_id":"clm2968qh0059c2v57gvl651u","_id":"clm29faxo0072c2v5exq47g4a"},{"post_id":"clm27g4oy0047azv507yr0f1b","tag_id":"clm29cxa6006gc2v5dmyx7w5i","_id":"clm29faxo0073c2v55y9l1xy2"},{"post_id":"clm27g4oz004cazv5byi68us9","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm29g1kq0075c2v57x0mfeeo"},{"post_id":"clm27g4oz004cazv5byi68us9","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm29g1kq0076c2v54s2m3gvv"},{"post_id":"clm27g4p2004nazv588ji66g5","tag_id":"clm27xwch000tc2v54qgwdzr1","_id":"clm29h0pl007ac2v5dm8o600g"},{"post_id":"clm27g4p2004nazv588ji66g5","tag_id":"clm29h0pl0078c2v51ywq1jwh","_id":"clm29h0pl007bc2v50m7d0c63"},{"post_id":"clm27g4p3004oazv52pamc16t","tag_id":"clm29hh9y007cc2v58r439arh","_id":"clm29hha0007fc2v5cpfu7e6g"},{"post_id":"clm27g4p3004oazv52pamc16t","tag_id":"clm29i0yk007ic2v52yr8gyye","_id":"clm29i0yk007jc2v5dqa2fiv7"},{"post_id":"clm27g4p4004tazv58slsa4lw","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm29irhl007kc2v5dhro6za6"},{"post_id":"clm27g4p4004tazv58slsa4lw","tag_id":"clm28te59002uc2v503xjar4d","_id":"clm29irhl007lc2v56hl4e5sl"},{"post_id":"clm27g4p5004wazv5dpoo24j9","tag_id":"clm29jftj007nc2v519upgq34","_id":"clm29jftk007oc2v54az9d30r"},{"post_id":"clm27g4p5004wazv5dpoo24j9","tag_id":"clm29jnbh007pc2v54lhw9kif","_id":"clm29jnbi007qc2v5hyisb3k9"},{"post_id":"clm27g4p60050azv57qyg3zjm","tag_id":"clm29jftj007nc2v519upgq34","_id":"clm29jts5007rc2v57xr0276s"},{"post_id":"clm27g4p60050azv57qyg3zjm","tag_id":"clm29jnbh007pc2v54lhw9kif","_id":"clm29jts6007sc2v5hm64ho7c"},{"post_id":"clm27g4p80054azv5gfcigy0n","tag_id":"clm29cxa6006gc2v5dmyx7w5i","_id":"clm29l20n007zc2v5dzhnbor9"},{"post_id":"clm27g4p80055azv54tn60z6d","tag_id":"clm29lsyo0082c2v59c4lgy0k","_id":"clm29lsyp0085c2v553ig0tgj"},{"post_id":"clm27g4p80055azv54tn60z6d","tag_id":"clm29lsyo0083c2v53kvqhf8l","_id":"clm29lsyp0086c2v570zig3g5"},{"post_id":"clm27g4p90058azv5av4aczg5","tag_id":"clm29lsyo0082c2v59c4lgy0k","_id":"clm29m3li0088c2v5esr30e7m"},{"post_id":"clm27g4p90058azv5av4aczg5","tag_id":"clm29lsyo0083c2v53kvqhf8l","_id":"clm29m3li0089c2v504ap6r9o"},{"post_id":"clm27g4p9005aazv5bwjbeldv","tag_id":"clm29lsyo0082c2v59c4lgy0k","_id":"clm29m61y008ac2v5hd9d8xa0"},{"post_id":"clm27g4p9005aazv5bwjbeldv","tag_id":"clm29lsyo0083c2v53kvqhf8l","_id":"clm29m61z008bc2v599ul033j"},{"post_id":"clm27g4on0038azv5fo4pbfnm","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm2axz8t0000efv5g0t3fspy"},{"post_id":"clm27g4on0038azv5fo4pbfnm","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm2axz8u0001efv50nvramj5"},{"post_id":"clm27g4on003aazv5ev6sal7f","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm2ay04a0003efv5bn00f2gv"},{"post_id":"clm27g4on003aazv5ev6sal7f","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm2ay04a0004efv5b6xraejl"},{"post_id":"clm27g4oo003bazv5bsedb54n","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm2ay0w50006efv56qui9i6y"},{"post_id":"clm27g4oo003bazv5bsedb54n","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm2ay0w50007efv5hnjudxfu"},{"post_id":"clm27g4op003dazv57xxpgh43","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm2ay2ee0009efv5atqu4jqy"},{"post_id":"clm27g4op003dazv57xxpgh43","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm2ay2ee000aefv57mkd9igt"},{"post_id":"clm27g4op003eazv51pzvhul6","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm2ay35v000cefv5coi9a2kj"},{"post_id":"clm27g4op003eazv51pzvhul6","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm2ay35w000defv5evylb2fa"},{"post_id":"clm27g4oq003fazv54hhw2ho9","tag_id":"clm28jkse001zc2v5aux01o2n","_id":"clm2ay402000fefv5fcc21eue"},{"post_id":"clm27g4oq003fazv54hhw2ho9","tag_id":"clm295u800055c2v5g4wg5vz1","_id":"clm2ay402000gefv5cigs90x1"},{"post_id":"clm27g4ou003sazv56itdfaci","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ay4qt000iefv5gnw09sql"},{"post_id":"clm27g4ot003pazv58yqe5vqp","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ay5h3000kefv5fkb56am7"},{"post_id":"clm27g4ou003uazv5gx4wgicv","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ay6mm000mefv543ux4sip"},{"post_id":"clm27g4ov003xazv58ban09dy","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ay7ga000oefv5e0gl8f6l"},{"post_id":"clm27g4ov003zazv59iwedncz","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ay853000qefv526ux0hp2"},{"post_id":"clm27g4ow0042azv55atddbos","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ay8vf000sefv53nw34642"},{"post_id":"clm27g4ow0043azv5gwywd9lt","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ay9gl000uefv5fub7497b"},{"post_id":"clm27g4ox0046azv59262dbqf","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2aya36000wefv5e8iehy9p"},{"post_id":"clm27g4oy0049azv5f6810f90","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ayaq9000yefv5fx85248k"},{"post_id":"clm27g4oz004bazv5hj5i7ko3","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2aybko0010efv568engxxo"},{"post_id":"clm27g4p0004fazv5cuhy86d4","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2aycm30012efv59ib37efz"},{"post_id":"clm27g4oz004cazv5byi68us9","tag_id":"clm29i0yk007ic2v52yr8gyye","_id":"clm2aydct0014efv51kyrat6x"},{"post_id":"clm27g4p0004gazv5ai4e319g","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2aydyt0015efv5ha817uad"},{"post_id":"clm27g4p1004jazv577fg8n9g","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ayf1j0017efv5h2ve8k41"},{"post_id":"clm27g4p2004lazv5h93ubtjx","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ayfng0019efv5b5stfg6b"},{"post_id":"clm27g4p3004qazv5hfsqgdt3","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2aygov001befv5hokwfdzv"},{"post_id":"clm27g4p5004uazv5356w6dkt","tag_id":"clm29e92y006xc2v5cw4p8173","_id":"clm2ayhd3001defv5dl1cbn18"},{"post_id":"clm27g4p6004xazv5euyh1poj","tag_id":"clm29jftj007nc2v519upgq34","_id":"clm2ayi0l001fefv54j1iddjz"},{"post_id":"clm27g4p6004xazv5euyh1poj","tag_id":"clm29jnbh007pc2v54lhw9kif","_id":"clm2ayi0l001gefv51qekhn4f"},{"post_id":"clm27g4p70051azv5cz915yj8","tag_id":"clm29k9s1007uc2v5fgpua3b7","_id":"clm2b086b0001jsv55l5kgx44"},{"post_id":"clm27g4p70051azv5cz915yj8","tag_id":"clm2b08690000jsv58f5ehmzn","_id":"clm2b086b0002jsv52dbv4aub"},{"post_id":"clm27g4ob002eazv53e4wdp7o","tag_id":"clm2c1xuh0003jsv5fu0n1imf","_id":"clm2c1xuj0006jsv572vycjjc"},{"post_id":"clm27g4ob002eazv53e4wdp7o","tag_id":"clm2c1xuj0005jsv59tf40ofd","_id":"clm2c1xuj0007jsv56t691dv0"}],"Tag":[{"name":"Markdown","_id":"clm27g4n70003azv52nm82atq"},{"name":"Android","_id":"clm27t5bj000hc2v59btc9xl2"},{"name":"Git","_id":"clm27xwch000tc2v54qgwdzr1"},{"name":"Java","_id":"clm28jkse001zc2v5aux01o2n"},{"name":"Guava","_id":"clm28k4eg0024c2v586wp6aix"},{"name":"JSP","_id":"clm28l9qt002cc2v5e6xtbp98"},{"name":"Javascript","_id":"clm28ogby002nc2v54cglbegk"},{"name":"Test","_id":"clm28szwt002qc2v54web2mv9"},{"name":"IETester","_id":"clm28te59002tc2v5fvu4auuo"},{"name":"Tool","_id":"clm28te59002uc2v503xjar4d"},{"name":"Cucumber","_id":"clm28tly20030c2v576pj4x0a"},{"name":"Soft Skill","_id":"clm28uzqf0035c2v5bmwo73to"},{"name":"SoftSkill","_id":"clm28vojg003ac2v528yj1qin"},{"name":"Guard","_id":"clm28xm9j0045c2v5d39q2teu"},{"name":"LiveReload","_id":"clm28xros0049c2v55ova1o50"},{"name":"CSS","_id":"clm28ye1z004bc2v5aksafsz4"},{"name":"IE","_id":"clm28ye20004dc2v5cu1dd0pj"},{"name":"MVC","_id":"clm290g3p004oc2v510bgc33q"},{"name":"MVP","_id":"clm290g3p004pc2v522hr93kp"},{"name":"MVVM","_id":"clm290g3q004qc2v57us89r82"},{"name":"HTML5","_id":"clm291x6r004xc2v55emj2xkc"},{"name":"CoffeeScript","_id":"clm292jfj0052c2v5c78f3j6b"},{"name":"Spring","_id":"clm295u800055c2v5g4wg5vz1"},{"name":"AngularJs","_id":"clm2968qh0059c2v57gvl651u"},{"name":"Sublime Text","_id":"clm297k24005dc2v5gh39558d"},{"name":"Tools","_id":"clm299zfr005sc2v54ll24wef"},{"name":"iTerm2","_id":"clm299zfs005uc2v5bsr5dc3x"},{"name":"HTML","_id":"clm29bo1c006ec2v5cinlcwqd"},{"name":"JavaScript","_id":"clm29cxa6006gc2v5dmyx7w5i"},{"name":"TypeScript","_id":"clm29d87i006nc2v504ox15b5"},{"name":"VSCode","_id":"clm29d87j006pc2v5gs74ertu"},{"name":"Ruby","_id":"clm29e92y006xc2v5cw4p8173"},{"name":"Collaboration","_id":"clm29h0pl0078c2v51ywq1jwh"},{"name":"Nginx","_id":"clm29hh9y007cc2v58r439arh"},{"name":"Mac","_id":"clm29hh9z007ec2v5hmz9b6qn"},{"name":"MacOS","_id":"clm29i0yk007ic2v52yr8gyye"},{"name":"算法","_id":"clm29jftj007nc2v519upgq34"},{"name":"数据结构","_id":"clm29jnbh007pc2v54lhw9kif"},{"name":"高清图片","_id":"clm29k9s1007uc2v5fgpua3b7"},{"name":"高清图片，资源","_id":"clm29kk97007xc2v58x505chw"},{"name":"云计算","_id":"clm29lsyo0082c2v59c4lgy0k"},{"name":"AWS","_id":"clm29lsyo0083c2v53kvqhf8l"},{"name":"资源","_id":"clm2b08690000jsv58f5ehmzn"},{"name":"Bracket","_id":"clm2c1xuh0003jsv5fu0n1imf"},{"name":"Web Design","_id":"clm2c1xuj0005jsv59tf40ofd"}]}}