<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Speech Translator base on Azure Speech Service</title>
      <link href="/2025/06/19/speech-translator-base-on-azure-speech-service/"/>
      <url>/2025/06/19/speech-translator-base-on-azure-speech-service/</url>
      
        <content type="html"><![CDATA[<p>Today we’re going to talk about how to build a speech translator using <code>Azure Speech Service</code> of <code>Azure AI</code> . We’ll be using the <code>JavaScript SDK</code> for the Speech Service to build the translator. We’ll using <code>Next.js</code> to build the web application.</p><h2 id="What-is-speech-translation"><a href="#What-is-speech-translation" class="headerlink" title="What is speech translation?"></a>What is speech translation?</h2><p>Speech translation is the process of translating speech from one language to another. It involves using speech recognition to convert the <code>speech to text</code>, and then using <code>text-to-speech</code> to convert the translated text back to speech. The <code>Azure AI Speech</code> provides a <code>speech to speech</code> translation service that can translate speech from one language to another. The Speech service supports <code>real-time</code>, <code>multi-language</code> speech to speech and speech to text translation of audio streams.</p><h2 id="Create-Azure-Speech-Service-resource"><a href="#Create-Azure-Speech-Service-resource" class="headerlink" title="Create Azure Speech Service resource"></a>Create Azure Speech Service resource</h2><p>In <code>Microsfot Azure</code> Cloud portal, select the <code>Speech Service</code> resource and go to the <code>AI Foundry</code> - <code>Speech service</code> management page.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-service.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-service.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Select Azure Speech Service" style="width:800px;"/></div><span class="image-caption">Select Azure Speech Service</span></div><p>To create a new <code>Speech Service</code> resource is very simple, just click the <code>Create</code> button, and then fill the name, location, and pricing tier of the resource.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-service-create.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-service-create.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Create Azure Speech Service" style="width:800px;"/></div><span class="image-caption">Create Azure Speech Service</span></div><p>Once the speech service created, you can see it in resouce list.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-service-list.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-service-list.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Azure Speech Service List" style="width:800px;"/></div><span class="image-caption">Azure Speech Service List</span></div><p>To get the <code>key</code> and <code>endpoint</code> of the speech service, click the <code>Manage Key</code> link, it will show the <code>key</code> and <code>endpoint</code>, <code>location</code> of the speech service. The subscription <code>Key</code> and <code>Location</code> will be used to access the speech service. </p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-service-key.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-service-key.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Azure Speech Service Key" style="width:800px;"/></div><span class="image-caption">Azure Speech Service Key</span></div><h2 id="Play-the-Speech-Service-via-Speech-Studio"><a href="#Play-the-Speech-Service-via-Speech-Studio" class="headerlink" title="Play the Speech Service via Speech Studio"></a>Play the Speech Service via Speech Studio</h2><p>To play the speech service, you can use the <code>Speech Studio</code> tool. Just go to the <code>Speech Studio</code> page, and then click the <code>Get Started</code> button. Select the <code>Speech Translation</code> card. Let’s speech Chinese to English voice.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-studio.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-studio.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Azure Speech Studio - Speech Translation" style="width:800px;"/></div><span class="image-caption">Azure Speech Studio - Speech Translation</span></div><p>Now, our speech service is ready to use.</p><h2 id="Create-Web-applicaiton"><a href="#Create-Web-applicaiton" class="headerlink" title="Create Web applicaiton"></a>Create Web applicaiton</h2><p>To create the web application, we’ll be using <code>Next.js</code> framework. The <code>Next.js</code> is a React framework that allows us to build server-side rendered (SSR) or client-side rendered (CSR) web applications. It is a powerful framework that allows us to build fast and efficient web applications.</p><p>To create the web application, we’ll use the <code>create-next-app</code> command. Open the terminal and run the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure><p>Let’s build a simple web application that user can access the device microphone and translate the Chinese (普通话), Cantonese (粤语) speech voice to English language voice in real-time. The UI of the web application will be simple and easy to use. Screenshots like below.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-translator-ui-1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-translator-ui-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Speech Translator UI - Microphone" style="width:300px;"/></div><span class="image-caption">Speech Translator UI - Microphone</span></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-translator-ui-2.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-translator-ui-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Speech Translator UI - Listening & Translation" style="width:300px;"/></div><span class="image-caption">Speech Translator UI - Listening & Translation</span></div><p>The UI is based on the <code>Tailwind CSS</code> framework. The <code>Tailwind CSS</code> is a utility-first CSS framework that allows us to build custom user interfaces with pre-defined classes. The <code>Tailwind CSS</code> framework provides a set of pre-defined classes that we can use to style our web application. The <code>Tailwind CSS</code> framework is very flexible and allows us to build custom user interfaces with pre-defined classes. Below are the <code>Tailwind CSS</code> classes that we can use to style our web application.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">geistSans.variable</span>&#125; $&#123;<span class="attr">geistMono.variable</span>&#125; <span class="attr">font-sans</span> <span class="attr">flex</span> <span class="attr">flex-col</span> <span class="attr">h-screen</span>`&#125;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center pt-10 pb-10 gap-5&quot;</span>&gt;</span></span><br><span class="line">    &#123;OriginalLanguages.map((language) =&gt; &#123;</span><br><span class="line">      return (</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center&quot;</span> <span class="attr">key</span>=<span class="string">&#123;language.value&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&#123;</span>`<span class="attr">radio-</span>$&#123;<span class="attr">language.value</span>&#125;`&#125; <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&#123;language.value&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;originalLanguage</span> === <span class="string">language.value&#125;</span> <span class="attr">disabled</span>=<span class="string">&#123;isRecording&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> setOriginalLanguage(language.value)&#125; name=&quot;default-radio&quot; className=&quot;w-8 h-8 text-blue-600 bg-gray-100 border-gray-30 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600&quot; /&gt;</span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&#123;</span>`<span class="attr">radio-</span>$&#123;<span class="attr">language.value</span>&#125;`&#125; <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">isRecording</span>? &quot;<span class="attr">text-gray-400</span>&quot; <span class="attr">:</span> &quot;<span class="attr">text-gray-900</span>&quot;&#125; <span class="attr">ms-2</span> <span class="attr">text-2xl</span> <span class="attr">font-medium</span> <span class="attr">dark:text-gray-300</span>`&#125;&gt;</span>&#123;language.label&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center flex-auto pb-20&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">isRecording</span>? &quot;<span class="attr">hidden</span>&quot; <span class="attr">:</span> &quot;<span class="attr">block</span>&quot;&#125; <span class="attr">flex</span> <span class="attr">items-center</span> <span class="attr">justify-center</span> <span class="attr">rounded-full</span> <span class="attr">size-64</span> <span class="attr">bg-blue-200</span> <span class="attr">mx-auto</span> <span class="attr">cursor-pointer</span> <span class="attr">hover:bg-blue-300</span> <span class="attr">transition-colors</span>`&#125;</span></span><br><span class="line"><span class="tag">    <span class="attr">onClick</span>=<span class="string">&#123;startRecording&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center rounded-full size-48 bg-blue-400 hover:bg-blue-500 transition-colors&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/microphone.svg&quot;</span>  <span class="attr">alt</span>=<span class="string">&quot;Microphone&quot;</span> <span class="attr">className</span>=<span class="string">&quot;size-24&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">isRecording</span>? &quot;<span class="attr">block</span>&quot; <span class="attr">:</span> &quot;<span class="attr">hidden</span>&quot;&#125; <span class="attr">flex-col</span> <span class="attr">items-center</span> <span class="attr">justify-center</span>`&#125;&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center rounded-full size-64 bg-red-200 mx-auto cursor-pointer hover:bg-red-300 transition-colors&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">onClick</span>=<span class="string">&#123;stopRecording&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center rounded-full size-48 bg-red-400 hover:bg-red-500 transition-colors&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;w-16 h-16 bg-white animate-pulse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center mt-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;block w-64 items-center justify-start text-xl&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/speech.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">className</span>=<span class="string">&quot;inline-block ml-12 size-12&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;inline-block text-center font-medium ml-2&quot;</span>&gt;</span>Listening <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;inline-block font-medium&quot;</span>&gt;</span>&#123;listenLoading&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Integrated-with-Azure-Speech-Service"><a href="#Integrated-with-Azure-Speech-Service" class="headerlink" title="Integrated with Azure Speech Service"></a>Integrated with Azure Speech Service</h2><p>The <code>Azure Speech Service</code> provides multiple language SDKs, including <code>JavaScript</code>, <code>Go</code>, <code>C#</code>, <code>Python</code>, <code>Java</code>, <code>Swift</code>, <code>Objective-C</code>, and <code>C++</code>. You can access this speech SDK link <a href="https://learn.microsoft.com/en-us/azure/ai-services/speech-service/speech-sdk">https://learn.microsoft.com/en-us/azure/ai-services/speech-service/speech-sdk</a>. We’ll be using the <code>JavaScript</code> SDK to integrate with the speech service.</p><p>To install the <code>JavaScript</code> SDK, we’ll use the <code>npm</code> command. Open the terminal and run the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install microsoft-cognitiveservices-speech-sdk</span><br></pre></td></tr></table></figure><p>Accessing the device microhpone, we can use <code>navigator.mediaDevices.getUserMedia()</code> method. The <code>getUserMedia()</code> method returns a <code>Promise</code> that resolves with a <code>MediaStream</code> object representing the captured media. We can then pass this <code>MediaStream</code> object to the <code>SpeechSDK.AudioConfig</code> object to create a <code>SpeechSDK.AudioConfig</code> object that represents the audio input device.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">requestMicrophoneAccess</span> = (<span class="params">callback</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.<span class="property">mediaDevices</span> &amp;&amp; navigator.<span class="property">mediaDevices</span>.<span class="property">getUserMedia</span>) &#123;</span><br><span class="line">      navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123; <span class="attr">audio</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Microphone access granted.&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> speechConfig = <span class="title class_">SpeechSDK</span>.<span class="property">SpeechTranslationConfig</span>.<span class="title function_">fromSubscription</span>(config.<span class="property">SPEECH_SUBSCRIPTION_KEY</span>, config.<span class="property">SPEECH_SERVICE_REGION</span>);</span><br><span class="line">          speechConfig.<span class="property">outputFormat</span> = <span class="title class_">SpeechSDK</span>.<span class="property">OutputFormat</span>.<span class="property">Detailed</span>;</span><br><span class="line">          speechConfig.<span class="property">speechRecognitionLanguage</span> = originalLanguage;</span><br><span class="line">          speechConfig.<span class="title function_">addTargetLanguage</span>(<span class="title class_">TargetLanguage</span>);</span><br><span class="line">          speechConfig.<span class="title function_">setProperty</span>(<span class="title class_">SpeechSDK</span>.<span class="property">PropertyId</span>.<span class="property">SpeechServiceConnection_TranslationVoice</span>, <span class="string">&quot;en-US-JennyNeural&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> audioConfig = <span class="title class_">SpeechSDK</span>.<span class="property">AudioConfig</span>.<span class="title function_">fromStreamInput</span>(stream);</span><br><span class="line">          <span class="keyword">const</span> recognizer = <span class="keyword">new</span> <span class="title class_">SpeechSDK</span>.<span class="title class_">TranslationRecognizer</span>(speechConfig, audioConfig);</span><br><span class="line">          recognizer.<span class="property">recognizing</span> = speechRecognizing;</span><br><span class="line">          recognizer.<span class="property">recognized</span> = speechRecognized;</span><br><span class="line">          recognizer.<span class="property">synthesizing</span> = speechSynthesizing;</span><br><span class="line">          callback &amp;&amp; <span class="title function_">callback</span>(recognizer);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error accessing microphone:&quot;</span>, error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;getUserMedia is not supported in this browser.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above code, we are using the <code>SpeechTranslationConfig</code> object to configure the speech translation service. We are setting the <code>outputFormat</code> to <code>Detailed</code> to get the detailed translation result. We are setting the <code>speechRecognitionLanguage</code> to the original language and the <code>addTargetLanguage</code> to the target language. We are setting the <code>SpeechServiceConnection_TranslationVoice</code> property to <code>en-US-JennyNeural</code> to get the neural voice for the target language. We are creating a <code>SpeechSDK.AudioConfig</code> object from the <code>MediaStream</code> object and passing it to the <code>SpeechSDK.TranslationRecognizer</code> object, and setting the <code>recognizing</code>, <code>recognized</code>, and <code>synthesizing</code> event handlers to get the translation result.</p><p>The <code>config.SPEECH_SUBSCRIPTION_KEY</code> and <code>config.SPEECH_SERVICE_REGION</code> are the subscription key and region for the speech service. We are using these values to configure the speech translation service.</p><p>The <code>recognizing</code> event handler is called when the speech service is processing the audio input, and the <code>recognized</code> event handler is called when the speech service has recognized the speech input. The <code>synthesizing</code> event handler is called when the speech service is synthesizing the translated text to speech.</p><p>Below are these event handlers.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">speechRecognizing</span> = (<span class="params">s, e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Recognizing: <span class="subst">$&#123;e.result.text&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">speechRecognized</span> = (<span class="params">s, e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">RecognizedSpeech</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Recognized: <span class="subst">$&#123;e.result.text&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">TranslatedSpeech</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Translate Recognized: <span class="subst">$&#123;e.result.text&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">NoMatch</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No speech could be recognized.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">Canceled</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cancellation = <span class="title class_">SpeechSDK</span>.<span class="property">CancellationDetails</span>.<span class="title function_">fromResult</span>(e.<span class="property">result</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CANCELED: Reason=<span class="subst">$&#123;cancellation.reason&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cancellation.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">CancellationReason</span>.<span class="property">Error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CANCELED: ErrorCode=<span class="subst">$&#123;cancellation.errorCode&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CANCELED: ErrorDetails=<span class="subst">$&#123;cancellation.errorDetails&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CANCELED: Did you set the speech resource key and region values?&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">speechSynthesizing</span> = (<span class="params">s, e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> audioSize = e.<span class="property">result</span>.<span class="property">audio</span> === <span class="literal">undefined</span> ? <span class="number">0</span> : e.<span class="property">result</span>.<span class="property">audio</span>.<span class="property">byteLength</span>;</span><br><span class="line">    <span class="keyword">var</span> text =<span class="string">&quot;&quot;</span>;</span><br><span class="line">    text += <span class="string">`(synthesizing) Reason: <span class="subst">$&#123;SpeechSDK.ResultReason[e.result.reason]&#125;</span>`</span></span><br><span class="line">        + <span class="string">` <span class="subst">$&#123;audioSize&#125;</span> bytes\r\n`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">audio</span> &amp;&amp; soundContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> source = soundContext.<span class="title function_">createBufferSource</span>();</span><br><span class="line">        soundContext.<span class="title function_">decodeAudioData</span>(e.<span class="property">result</span>.<span class="property">audio</span>, <span class="keyword">function</span> (<span class="params">newBuffer</span>) &#123;</span><br><span class="line">            source.<span class="property">buffer</span> = newBuffer;</span><br><span class="line">            source.<span class="title function_">connect</span>(soundContext.<span class="property">destination</span>);</span><br><span class="line">            source.<span class="title function_">start</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>synthesizing</code> event handler, we are logging the <code>ResultReason</code> and the audio size. If the <code>audio</code> property is not <code>undefined</code>, we are decoding the <code>audio</code> data and playing it using the <code>Web Audio API</code>.</p><p>The above <code>soundContext</code> is a global variable that we are using to play the audio. We can create the <code>soundContext</code> object using the <code>AudioContext</code> constructor. Below is the code to create the <code>soundContext</code> object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getSoundContext</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> soundContext = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">AudioContext</span> = <span class="variable language_">window</span>.<span class="property">AudioContext</span> || <span class="variable language_">window</span>.<span class="property">webkitAudioContext</span> || <span class="literal">false</span>;                          </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">AudioContext</span>) &#123;</span><br><span class="line">        soundContext = <span class="keyword">new</span> <span class="title class_">AudioContext</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Audio context not supported&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;no sound context found, no audio output. &quot;</span> + e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> soundContext;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> soundContext = <span class="title function_">getSoundContext</span>();</span><br></pre></td></tr></table></figure><h2 id="Play-it"><a href="#Play-it" class="headerlink" title="Play it"></a>Play it</h2><p>Now, we can run the web application using the <code>npm run dev</code> command. Open the web browser and go to <code>http://localhost:3000</code>. You should see the web application with the microphone icon. Click the microphone icon to start recording the speech. Speak Chinese Mandarin, Cantonese speech voice and the web application will translate the speech to English language voice in real-time.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-speech-translator-demo.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-speech-translator-demo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Speech Translator Demo" style="width:800px;"/></div><span class="image-caption">Speech Translator Demo</span></div><p>In above screenshot, it is recognize the speech to the text and we print it in console log. Once speech recognized. It is translated to English language voice and played in the web application.</p><p>Below are major code in <code>index.js</code> for <code>Azure Speech Translator</code>. It is simple to using <code>Azure Speech Service</code> to do the continous <code>Speech Translation</code> in real-time.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Geist</span>, <span class="title class_">Geist</span>_Mono &#125; <span class="keyword">from</span> <span class="string">&quot;next/font/google&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">SpeechSDK</span> <span class="keyword">from</span> <span class="string">&quot;microsoft-cognitiveservices-speech-sdk&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&quot;../config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> geistSans = <span class="title class_">Geist</span>(&#123;</span><br><span class="line">  <span class="attr">variable</span>: <span class="string">&quot;--font-geist-sans&quot;</span>,</span><br><span class="line">  <span class="attr">subsets</span>: [<span class="string">&quot;latin&quot;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> geistMono = <span class="title class_">Geist</span>_Mono(&#123;</span><br><span class="line">  <span class="attr">variable</span>: <span class="string">&quot;--font-geist-mono&quot;</span>,</span><br><span class="line">  <span class="attr">subsets</span>: [<span class="string">&quot;latin&quot;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TargetLanguage</span> = <span class="string">&quot;en-US&quot;</span>; <span class="comment">// &quot;en-US&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OriginalLanguages</span> = [&#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="string">&#x27;Mandarin&#x27;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="string">&quot;Cantonese&quot;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;yue-cn&quot;</span>,</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getSoundContext</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> soundContext = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">AudioContext</span> = <span class="variable language_">window</span>.<span class="property">AudioContext</span> || <span class="variable language_">window</span>.<span class="property">webkitAudioContext</span> || <span class="literal">false</span>;                          </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">AudioContext</span>) &#123;</span><br><span class="line">        soundContext = <span class="keyword">new</span> <span class="title class_">AudioContext</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Audio context not supported&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;no sound context found, no audio output. &quot;</span> + e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> soundContext;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> soundContext = <span class="title function_">getSoundContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isRecording, setIsRecording] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [speechRecognizer, setSpeechRecognizer] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [originalLanguage, setOriginalLanguage] = <span class="title function_">useState</span>(<span class="string">&#x27;zh-CN&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [listenLoading, setlistenLoading] = <span class="title function_">useState</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">startRecording</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">requestMicrophoneAccess</span>(<span class="function">(<span class="params">recognizer</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setSpeechRecognizer</span>(recognizer);</span><br><span class="line">      <span class="title function_">setIsRecording</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Microphone access granted, starting recognition...&quot;</span>);</span><br><span class="line"></span><br><span class="line">      recognizer.<span class="title function_">startContinuousRecognitionAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Continuous recognition started.&quot;</span>);</span><br><span class="line">      &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">stopRecording</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (speechRecognizer !== <span class="literal">null</span>) &#123;</span><br><span class="line">      speechRecognizer.<span class="title function_">stopContinuousRecognitionAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Continuous recognition stopped.&quot;</span>);</span><br><span class="line">        <span class="title function_">setIsRecording</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">requestMicrophoneAccess</span> = (<span class="params">callback</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.<span class="property">mediaDevices</span> &amp;&amp; navigator.<span class="property">mediaDevices</span>.<span class="property">getUserMedia</span>) &#123;</span><br><span class="line">      navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123; <span class="attr">audio</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Microphone access granted.&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> speechConfig = <span class="title class_">SpeechSDK</span>.<span class="property">SpeechTranslationConfig</span>.<span class="title function_">fromSubscription</span>(config.<span class="property">SPEECH_SUBSCRIPTION_KEY</span>, config.<span class="property">SPEECH_SERVICE_REGION</span>);</span><br><span class="line">          speechConfig.<span class="property">outputFormat</span> = <span class="title class_">SpeechSDK</span>.<span class="property">OutputFormat</span>.<span class="property">Detailed</span>;</span><br><span class="line">          speechConfig.<span class="property">speechRecognitionLanguage</span> = originalLanguage;</span><br><span class="line">          speechConfig.<span class="title function_">addTargetLanguage</span>(<span class="title class_">TargetLanguage</span>);</span><br><span class="line">          speechConfig.<span class="title function_">setProperty</span>(<span class="title class_">SpeechSDK</span>.<span class="property">PropertyId</span>.<span class="property">SpeechServiceConnection_TranslationVoice</span>, <span class="string">&quot;en-US-JennyNeural&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> audioConfig = <span class="title class_">SpeechSDK</span>.<span class="property">AudioConfig</span>.<span class="title function_">fromStreamInput</span>(stream);</span><br><span class="line">          <span class="keyword">const</span> recognizer = <span class="keyword">new</span> <span class="title class_">SpeechSDK</span>.<span class="title class_">TranslationRecognizer</span>(speechConfig, audioConfig);</span><br><span class="line">          recognizer.<span class="property">recognizing</span> = speechRecognizing;</span><br><span class="line">          recognizer.<span class="property">recognized</span> = speechRecognized;</span><br><span class="line">          recognizer.<span class="property">synthesizing</span> = speechSynthesizing;</span><br><span class="line">          callback &amp;&amp; <span class="title function_">callback</span>(recognizer);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error accessing microphone:&quot;</span>, error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;getUserMedia is not supported in this browser.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">speechRecognizing</span> = (<span class="params">s, e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Recognizing: <span class="subst">$&#123;e.result.text&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">speechRecognized</span> = (<span class="params">s, e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">RecognizedSpeech</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Recognized: <span class="subst">$&#123;e.result.text&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">TranslatedSpeech</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Translate Recognized: <span class="subst">$&#123;e.result.text&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">NoMatch</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No speech could be recognized.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">ResultReason</span>.<span class="property">Canceled</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cancellation = <span class="title class_">SpeechSDK</span>.<span class="property">CancellationDetails</span>.<span class="title function_">fromResult</span>(e.<span class="property">result</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CANCELED: Reason=<span class="subst">$&#123;cancellation.reason&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cancellation.<span class="property">reason</span> === <span class="title class_">SpeechSDK</span>.<span class="property">CancellationReason</span>.<span class="property">Error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CANCELED: ErrorCode=<span class="subst">$&#123;cancellation.errorCode&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CANCELED: ErrorDetails=<span class="subst">$&#123;cancellation.errorDetails&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CANCELED: Did you set the speech resource key and region values?&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">speechSynthesizing</span> = (<span class="params">s, e</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> audioSize = e.<span class="property">result</span>.<span class="property">audio</span> === <span class="literal">undefined</span> ? <span class="number">0</span> : e.<span class="property">result</span>.<span class="property">audio</span>.<span class="property">byteLength</span>;</span><br><span class="line">    <span class="keyword">var</span> text =<span class="string">&quot;&quot;</span>;</span><br><span class="line">    text += <span class="string">`(synthesizing) Reason: <span class="subst">$&#123;SpeechSDK.ResultReason[e.result.reason]&#125;</span>`</span></span><br><span class="line">        + <span class="string">` <span class="subst">$&#123;audioSize&#125;</span> bytes\r\n`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">result</span>.<span class="property">audio</span> &amp;&amp; soundContext) &#123;</span><br><span class="line">        <span class="keyword">var</span> source = soundContext.<span class="title function_">createBufferSource</span>();</span><br><span class="line">        soundContext.<span class="title function_">decodeAudioData</span>(e.<span class="property">result</span>.<span class="property">audio</span>, <span class="keyword">function</span> (<span class="params">newBuffer</span>) &#123;</span><br><span class="line">            source.<span class="property">buffer</span> = newBuffer;</span><br><span class="line">            source.<span class="title function_">connect</span>(soundContext.<span class="property">destination</span>);</span><br><span class="line">            source.<span class="title function_">start</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isRecording) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> listening = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isRecording) &#123;</span><br><span class="line">        <span class="title function_">setlistenLoading</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev.<span class="property">length</span> &lt; <span class="number">5</span> ? prev + <span class="string">&quot;.&quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(listening);</span><br><span class="line">  &#125;, [isRecording]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">main</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">geistSans.variable</span>&#125; $&#123;<span class="attr">geistMono.variable</span>&#125; <span class="attr">font-sans</span> <span class="attr">flex</span> <span class="attr">flex-col</span> <span class="attr">h-screen</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center pt-10 pb-10 gap-5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;OriginalLanguages.map((language) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center&quot;</span> <span class="attr">key</span>=<span class="string">&#123;language.value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&#123;</span>`<span class="attr">radio-</span>$&#123;<span class="attr">language.value</span>&#125;`&#125; <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&#123;language.value&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;originalLanguage</span> === <span class="string">language.value&#125;</span> <span class="attr">disabled</span>=<span class="string">&#123;isRecording&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;()</span> =&gt;</span> setOriginalLanguage(language.value)&#125; name=&quot;default-radio&quot; className=&quot;w-8 h-8 text-blue-600 bg-gray-100 border-gray-30 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600&quot; /&gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&#123;</span>`<span class="attr">radio-</span>$&#123;<span class="attr">language.value</span>&#125;`&#125; <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">isRecording</span>? &quot;<span class="attr">text-gray-400</span>&quot; <span class="attr">:</span> &quot;<span class="attr">text-gray-900</span>&quot;&#125; <span class="attr">ms-2</span> <span class="attr">text-2xl</span> <span class="attr">font-medium</span> <span class="attr">dark:text-gray-300</span>`&#125;&gt;</span>&#123;language.label&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )</span></span><br><span class="line"><span class="language-xml">        &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center flex-auto pb-20&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">isRecording</span>? &quot;<span class="attr">hidden</span>&quot; <span class="attr">:</span> &quot;<span class="attr">block</span>&quot;&#125; <span class="attr">flex</span> <span class="attr">items-center</span> <span class="attr">justify-center</span> <span class="attr">rounded-full</span> <span class="attr">size-64</span> <span class="attr">bg-blue-200</span> <span class="attr">mx-auto</span> <span class="attr">cursor-pointer</span> <span class="attr">hover:bg-blue-300</span> <span class="attr">transition-colors</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;startRecording&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center rounded-full size-48 bg-blue-400 hover:bg-blue-500 transition-colors&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/microphone.svg&quot;</span>  <span class="attr">alt</span>=<span class="string">&quot;Microphone&quot;</span> <span class="attr">className</span>=<span class="string">&quot;size-24&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">isRecording</span>? &quot;<span class="attr">block</span>&quot; <span class="attr">:</span> &quot;<span class="attr">hidden</span>&quot;&#125; <span class="attr">flex-col</span> <span class="attr">items-center</span> <span class="attr">justify-center</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center rounded-full size-64 bg-red-200 mx-auto cursor-pointer hover:bg-red-300 transition-colors&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;stopRecording&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center rounded-full size-48 bg-red-400 hover:bg-red-500 transition-colors&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;w-16 h-16 bg-white animate-pulse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex items-center justify-center mt-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;block w-64 items-center justify-start text-xl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/speech.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;voice&quot;</span> <span class="attr">className</span>=<span class="string">&quot;inline-block ml-12 size-12&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;inline-block text-center font-medium ml-2&quot;</span>&gt;</span>Listening <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;inline-block font-medium&quot;</span>&gt;</span>&#123;listenLoading&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Speech Service</code> of <code>Azure AI</code> is a cloud-based service that provides speech recognition and speech synthesis capabilities. It is a part of <code>Azure AI</code> suite. We can use it to build speech-enabled applications, such as speech-to-text, text-to-speech, and speech translation.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AI </tag>
            
            <tag> Cloud </tag>
            
            <tag> React </tag>
            
            <tag> Azure </tag>
            
            <tag> Next.js </tag>
            
            <tag> Tailwind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Generative AI Tools</title>
      <link href="/2025/05/11/introduction-to-generative-ai-tools/"/>
      <url>/2025/05/11/introduction-to-generative-ai-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction-to-Generative-AI-Tools"><a href="#Introduction-to-Generative-AI-Tools" class="headerlink" title="Introduction to Generative AI Tools"></a>Introduction to Generative AI Tools</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-intro.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-intro.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Generative AI Tools" style="width:500px;"/></div><span class="image-caption">Generative AI Tools</span></div><p>Generative AI tools are revolutionizing the way content is created by leveraging advanced machine learning models. These tools enable users to generate <code>text</code>, <code>images</code>, <code>videos</code>, and more, offering innovative solutions across various industries.</p><h2 id="Popular-Generative-AI-Tools"><a href="#Popular-Generative-AI-Tools" class="headerlink" title="Popular Generative AI Tools"></a>Popular Generative AI Tools</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-popular.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-popular.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Popular Generative AI Tools" style="width:800px;"/></div><span class="image-caption">Popular Generative AI Tools</span></div><p>Several generative AI tools are widely used across industries. Tools like <code>ChatGPT</code> and <code>Jasper</code> are popular for generating human-like text, while platforms like <code>DALL·E</code> and <code>Midjourney</code> excel in creating stunning visuals based on textual descriptions.</p><p>Other tools, such as <code>Runway</code> for video creation and <code>ElevenLabs</code> for AI-generated voices, showcase the versatility of generative AI. These tools simplify complex tasks, making them accessible to professionals and non-experts alike.</p><h3 id="AI-Tools-for-Text-Generation"><a href="#AI-Tools-for-Text-Generation" class="headerlink" title="AI Tools for Text Generation"></a>AI Tools for Text Generation</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-text.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-text.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Text Generation AI Tools" style="width:800px;"/></div><span class="image-caption">Text Generation AI Tools</span></div><p>Generative AI tools for text creation include platforms like <code>Jasper</code> and <code>Anyword</code>, which assist in crafting marketing content and sales copy. These tools leverage advanced machine learning algorithms to produce human-like text tailored to specific audiences and purposes.</p><p><code>Quillbot</code> is another example, offering paraphrasing and summarization features that enhance writing efficiency. Such tools are widely used in industries ranging from education to marketing, streamlining workflows and boosting productivity.</p><h3 id="AI-Tools-for-Image-Creation"><a href="#AI-Tools-for-Image-Creation" class="headerlink" title="AI Tools for Image Creation"></a>AI Tools for Image Creation</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-image.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Image Generation AI Tools" style="width:800px;"/></div><span class="image-caption">Image Generation AI Tools</span></div><p>Generative AI tools like <code>DALL·E 3</code> and <code>Midjourney</code> are revolutionizing image creation by generating high-quality visuals from textual descriptions. These tools are ideal for creating unique artwork, marketing materials, and design prototypes.</p><p><code>Adobe Photoshop</code> also incorporates AI features for enhancing images, such as automated background removal and content-aware editing. These tools empower users to produce professional-grade visuals with minimal effort.</p><h3 id="Video-And-Audio-Generation-Platforms"><a href="#Video-And-Audio-Generation-Platforms" class="headerlink" title="Video And Audio Generation Platforms"></a>Video And Audio Generation Platforms</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-audio-video.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-audio-video.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Audio and Video Generation AI Tools" style="width:800px;"/></div><span class="image-caption">Audio and Video Generation AI Tools</span></div><p><code>Runway</code> and <code>Wondershare Filmora</code> are popular generative AI tools for video creation, enabling users to produce creative and polished videos effortlessly. These platforms offer features like automated editing, special effects, and AI-driven enhancements.</p><p>For audio, <code>ElevenLabs</code> provides an extensive library of AI-generated voices, while <code>Suno</code> specializes in music generation. These tools are transforming the way multimedia content is created, making it accessible to professionals and hobbyists alike.</p><h2 id="Applications-Across-Industries"><a href="#Applications-Across-Industries" class="headerlink" title="Applications Across Industries"></a>Applications Across Industries</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-industries.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-industries.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Generative AI Tools for Industries" style="width:800px;"/></div><span class="image-caption">Generative AI Tools for Industries</span></div><p>Generative AI tools have diverse applications, from creating personalized marketing content to designing immersive <code>gaming</code> environments. In <code>healthcare</code>, these tools assist in generating synthetic data for research and training purposes.</p><p>In <code>education</code>, generative AI enhances learning experiences by creating tailored materials and automating grading. The technology’s adaptability ensures its relevance across various sectors, driving innovation and efficiency.</p><h3 id="Applications-in-Content-Generation"><a href="#Applications-in-Content-Generation" class="headerlink" title="Applications in Content Generation"></a>Applications in Content Generation</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-applications.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-applications.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="20 Best AI Tools for Content Creation" style="width:800px;"/></div><span class="image-caption">20 Best AI Tools for Content Creation</span></div><p>Generative AI tools are widely used in content creation to streamline processes and enhance creativity. For instance, tools like <code>Jasper</code> and <code>DALL·E 3</code> enable marketers to craft engaging campaigns with minimal manual effort.</p><p>In education, generative AI helps create personalized learning materials and automate grading. These applications demonstrate the versatility of generative AI in addressing diverse content needs across industries.</p><h2 id="Selecting-the-Right-Tool"><a href="#Selecting-the-Right-Tool" class="headerlink" title="Selecting the Right Tool"></a>Selecting the Right Tool</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-ai-tool-choose.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-ai-tool-choose.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Selecting the Right Generative AI Tool" style="width:800px;"/></div><span class="image-caption">Selecting the Right Generative AI Tool</span></div><p>Choosing the right generative AI tool depends on your specific needs and objectives. <span class='pbg sucess'>Consider factors such as the type of content you want to create</span></p><p>For instance, tools like <code>Jasper</code> are ideal for marketing professionals, while <code>DALL·E</code> suits designers seeking AI-generated visuals. Evaluating the tool’s features and limitations ensures optimal results for your projects.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><code>Generative AI</code> tools are transforming industries by enabling the creation of innovative and personalized content. By understanding their capabilities and applications, users can harness these tools to enhance creativity and streamline workflows.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> AI </tag>
            
            <tag> Generative AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Traditional Programming vs Artificial Intelligence</title>
      <link href="/2025/05/03/traditional-programming-vs-artificial-intelligence/"/>
      <url>/2025/05/03/traditional-programming-vs-artificial-intelligence/</url>
      
        <content type="html"><![CDATA[<p><strong>Traditional Programming</strong> relies on <code>algorithms</code> and <code>code</code> and is restricted to the limitations defined by the programmer. It follows <code>rules</code> and <code>logic</code>, making it ideal for problems with clear guidelines and well-defined logic.</p><p><strong>Artificial Intelligence (AI)</strong> is <code>data-driven</code> and learns from examples by <code>training</code> itself. AI relies on <code>large datasets</code> to identify patterns, make predictions, and make real-time decisions based on its <code>analysis of historical data</code>.</p><h2 id="Key-Differences-Between-AI-and-Traditional-Programming"><a href="#Key-Differences-Between-AI-and-Traditional-Programming" class="headerlink" title="Key Differences Between AI and Traditional Programming"></a>Key Differences Between AI and Traditional Programming</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ai-vs-traditional-programming.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ai-vs-traditional-programming.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Traditional Programming vs Artificial Intelligence" style="width:800px;"/></div><span class="image-caption">Traditional Programming vs Artificial Intelligence</span></div><h3 id="Key-Differences-in-Outputs"><a href="#Key-Differences-in-Outputs" class="headerlink" title="Key Differences in Outputs"></a>Key Differences in Outputs</h3><p>Conventional programming produces reliable and <code>expected results</code>, delivering the <code>identical output</code> for the same input. This characteristic makes them perfect for activities demanding total accuracy, like mathematical computations or established procedures.</p><p>Conversely, AI outputs depend on <code>probabilities</code> and <code>patterns</code> that come from data. They are employed in situations characterized by uncertainty or variability, such as forecasting customer behavior or predicting the weather.</p><h3 id="When-to-Use-Traditional-Programming"><a href="#When-to-Use-Traditional-Programming" class="headerlink" title="When to Use Traditional Programming"></a>When to Use Traditional Programming</h3><p><strong>Traditional programming</strong> models are particularly <code>well-suited for scenarios where precision and consistency are crucial</code>. These models find their primary applications in fields such as <code>financial computations</code>, <code>engineering simulations</code>, and <code>software development</code> tailored for specific tasks.</p><p>Furthermore, these programming approaches are favored in situations where the <code>logic</code> and <code>rules</code> are clearly articulated and well-defined. They provide developers with the ability to meticulously control every step of the development process, which not only enhances the reliability of the final product but also simplifies the debugging process. This level of control is critical in ensuring that the applications function correctly and meet the high standards expected in various industries.</p><h3 id="When-to-Use-AI"><a href="#When-to-Use-AI" class="headerlink" title="When to Use AI"></a>When to Use AI</h3><p><strong>AI models</strong> are particularly adept at managing <code>complex and data-driven scenarios where outcomes are not predetermined</code>. AI solutions have been applied extensively across various fields, including <code>healthcare</code> for <code>predicting disease outbreaks</code>, <code>finance</code> for conducting thorough risk assessments, and <code>marketing</code> for effectively segmenting customers.</p><p>These advanced models utilize historical data to generate informed <code>predictions</code>, continuously learning and adapting to emerging new <code>patterns</code> and <code>trends</code>. This capacity for flexibility and evolution is what makes AI models especially invaluable in dynamic and uncertain environments where conditions frequently change and new challenges arise. Their ability to process and analyze vast amounts of data enables organizations to make informed decisions, mitigate risks, and optimize outcomes in a rapidly changing world.</p><h3 id="Advantages-and-Limitaitons-of-Each"><a href="#Advantages-and-Limitaitons-of-Each" class="headerlink" title="Advantages and Limitaitons of Each"></a>Advantages and Limitaitons of Each</h3><p><strong>Traditional programming</strong> models are praised for their <code>precision</code> and <code>simplicity</code>, which facilitate easy understanding and debugging. However, they struggle with flexibility, making it challenging to adapt to varying inputs and changing requirements.</p><p>In contrast, <strong>AI solutions</strong> excel at handling <code>complex</code>, <code>variable data</code> and can <code>learn</code> from new information, enabling greater adaptability and responsiveness. This inherent flexibility of AI comes at the cost of increased complexity in understanding and debugging compared to traditional programming.</p><p><strong>AI solutions</strong> can analyze vast datasets and uncover hidden patterns, enabling informed decision-making. However, <span class='pbg danger'>the effectiveness of AI is heavily dependent on the `quality and quantity of data` available</span></p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The difference of set cookie in Tomcat and Jetty</title>
      <link href="/2025/04/25/the-difference-of-set-cookie-in-tomcat-and-jetty/"/>
      <url>/2025/04/25/the-difference-of-set-cookie-in-tomcat-and-jetty/</url>
      
        <content type="html"><![CDATA[<p>In previous blog <a href="https://stonefishy.github.io/2025/04/11/switching-tomcat-with-jetty-in-spring-boot-easily/">Switching Tomcat with Jetty in Spring Boot Easily</a>, to resolve the spring boot 2 tomcat security issue in short time, we switching <code>Tomcat</code> with <code>Jetty</code> in Spring Boot. We found there is a difference by set cookie handling between <code>Tomcat</code> and <code>Jetty</code> by default. Let’s first talk about the cookie.</p><h2 id="What-is-cookie"><a href="#What-is-cookie" class="headerlink" title="What is cookie?"></a>What is cookie?</h2><p>A cookie is a small piece of data that is stored on the user’s computer by the web server. It is used to store user preferences, login information, and other information that the user wants to be remembered. The cookie is sent to the user’s browser when the user makes a request to the web server. The browser then sends it back to the web server with subsequent requests.</p><h2 id="Cookie-Attributes"><a href="#Cookie-Attributes" class="headerlink" title="Cookie Attributes"></a>Cookie Attributes</h2><p>There are several attributes that can be set for a cookie:</p><ul><li><code>Domain</code>: The domain attribute specifies the domain for which the cookie is valid. If the domain is not specified, the cookie is valid for the entire domain.</li><li><code>Path</code>: The path attribute specifies the path on the server where the cookie is valid. If the path is not specified, the cookie is valid for the entire path.</li><li><code>Max-Age</code>: The max-age attribute specifies the maximum age of the cookie in seconds. If the max-age is not specified, the cookie is valid until the browser is closed.</li><li><code>Expires</code>: The expires attribute specifies the expiration date of the cookie. If the expires attribute is not specified, the cookie is valid until the browser is closed.</li><li><code>Secure</code>: The secure attribute specifies that the cookie should only be sent over HTTPS connections.</li><li><code>HttpOnly</code>: The httpOnly attribute specifies that the cookie should not be accessible to client-side scripts.</li><li><code>SameSite</code>: The sameSite attribute specifies whether the cookie should be sent with cross-site requests. The sameSite attribute can have the following values: <code>Strict</code>, <code>Lax</code>, or <code>None</code>.</li></ul><p>When <code>Max-Age</code> and <code>Expires</code> are not specified, the cookie is valid until the browser is closed. If <code>Max-Age</code> is specified, the cookie is valid for the specified number of seconds. If <code>Expires</code> is specified, the cookie is valid until the specified date. If both <code>Max-Age</code> and <code>Expires</code> are specified, the cookie is valid for the minimum of the two values.</p><h2 id="Set-Cookie-in-Spring-Boot"><a href="#Set-Cookie-in-Spring-Boot" class="headerlink" title="Set-Cookie in Spring Boot"></a>Set-Cookie in Spring Boot</h2><p>In Spring Boot, the <code>Set-Cookie</code> header is used to send cookies to the user’s browser. The <code>Set-Cookie</code> header is sent in the response to the user’s request. The <code>Set-Cookie</code> header contains the name, value, and other attributes of the cookie. Here is an example of the <code>Set-Cookie</code> header in Spring Boot:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: JSESSIONID=1234567890; Path=/; HttpOnly; Secure</span><br></pre></td></tr></table></figure><p>In this example, the <code>JSESSIONID</code> is the name of the cookie, <code>1234567890</code> is the value of the cookie, <code>Path</code> is the path on the server where the cookie is valid, <code>/</code> is the path, <code>HttpOnly</code> is a flag that indicates that the cookie should not be accessible to client-side scripts, <code>Secure</code> is a flag that indicates that the cookie should only be sent over HTTPS connections, and <code>SameSite</code> is not set.</p><p>In <code>Network</code> tab of <code>Chrome DevTools</code>, we can see the <code>Set-Cookie</code> header in the response headers. That means these cookie are set by web server and sent to the user’s browser and stored in the user’s computer.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/set-cookie-in-response-headers.png" class="lazyload placeholder" data-srcset="/assets/images/java/set-cookie-in-response-headers.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Set-Cookie in response headers"/></div><span class="image-caption">Set-Cookie in response headers</span></div><p>And we can also see the cookies in <code>Application</code> tab of <code>Chrome DevTools</code>. The cookies are stored in the user’s browser and can be accessed by the web server in subsequent requests.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/cookie-in-browser-application-tab.png" class="lazyload placeholder" data-srcset="/assets/images/java/cookie-in-browser-application-tab.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Cookies in Browser Application tab"/></div><span class="image-caption">Cookies in Browser Application tab</span></div><h2 id="Difference-of-Set-Cookie-in-Tomcat-and-Jetty"><a href="#Difference-of-Set-Cookie-in-Tomcat-and-Jetty" class="headerlink" title="Difference of Set-Cookie in Tomcat and Jetty"></a>Difference of Set-Cookie in Tomcat and Jetty</h2><p>Okay, let’s talk about the difference of <code>Set-Cookie</code> header handling between <code>Tomcat</code> and <code>Jetty</code>. Here we will use <code>curl</code> command to send a request to the server and see the <code>Set-Cookie</code> header in the response for default configuration.</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>If we want to reduce <code>XSS cross-site scripting attacks</code> and <code>prevent reading and modifying cookie contents</code>, we can set the <code>HttpOnly</code> attribute for the cookie. In <code>Tomcat 6</code>,  we need to config it in the <code>tomcat/conf/context.xml</code> file. Add the <code>useHttpOnly=&quot;true&quot;</code> attribute in <code>&lt;Context&gt;</code> tag.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">useHttpOnly</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p>But for <code>Tomcat 7</code> and later version. We don’t need to config it in <code>context.xml</code> any more. The <code>useHttpOnly</code> attribute is set to <code>true</code> by default. It is introduced in <code>Tomcat 7</code> official doc (<a href="https://tomcat.apache.org/tomcat-7.0-doc/config/context.html">https://tomcat.apache.org/tomcat-7.0-doc/config/context.html</a>)</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/http-only-in-tomcat7.png" class="lazyload placeholder" data-srcset="/assets/images/java/http-only-in-tomcat7.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="HttpOnly in Tomcat 7"/></div><span class="image-caption">HttpOnly in Tomcat 7</span></div><p>Below is the screenshot that using <code>curl</code> command to send a request to our current Spring Boot application with <code>Tomcat</code> server:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/set-cookie-with-http-only.png" class="lazyload placeholder" data-srcset="/assets/images/java/set-cookie-with-http-only.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Set-Cookie with HttpOnly"/></div><span class="image-caption">Set-Cookie with HttpOnly</span></div><p>From the screenshot, you can see the <code>Set-Cookie</code> header in the response. The <code>HttpOnly</code> attribute is appended in the cookie by default.</p><p>BTW, from <code>Spring Boot</code> 2 version, it is starting use <code>Tomcat</code> 8 version which will set <code>HttpOnly</code> attribute by default in the cookie.</p><h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><p>For <code>Jetty</code>, the <code>HttpOnly</code> attribute is <code>not</code> set by default. We need to config it in the <code>web.xml</code> file. Add the <code>&lt;http-only&gt;</code> element in <code>&lt;cookie-config&gt;</code> tag.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cookie-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">http-only</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cookie-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We also can set the <code>HttpOnly</code> attribute for the cookie in the code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SessionCookieConfig.setHttpOnly(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>We can find the evidence in the <code>Jetty</code> official doc <a href="https://jetty.org/docs/jetty/12/programming-guide/server/session.html">https://jetty.org/docs/jetty/12/programming-guide/server/session.html</a>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/http-only-in-jetty.png" class="lazyload placeholder" data-srcset="/assets/images/java/http-only-in-jetty.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="HttpOnly in Jetty"/></div><span class="image-caption">HttpOnly in Jetty</span></div><p>By default, the <code>HttpOnly</code> attribute is not set in the <code>Set-Cookie</code> header in jetty. Below is the screenshot that using <code>curl</code> command to send a request to our current Spring Boot application with <code>Jetty</code> server by default configuration:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/set-cookie-without-http-only.png" class="lazyload placeholder" data-srcset="/assets/images/java/set-cookie-without-http-only.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Set-Cookie without HttpOnly"/></div><span class="image-caption">Set-Cookie without HttpOnly</span></div><p>As you can see, the <code>HttpOnly</code> attribute is not set in the <code>Set-Cookie</code> header in <code>Jetty</code> by default when we use the <code>curl</code> command. The code are same, just simply switch <code>Tomcat</code> to <code>Jetty</code> in the <code>pom.xml</code> file in previous blog.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The <code>Set-Cookie</code> header is used to send cookies to the user’s browser. The <code>HttpOnly</code> attribute is used to prevent client-side scripts from accessing the cookie. The <code>Secure</code> attribute is used to ensure that the cookie is only sent over HTTPS connections. The <code>SameSite</code> attribute is used to prevent cross-site requests. The difference of <code>Set-Cookie</code> header handling between <code>Tomcat</code> and <code>Jetty</code> is that <code>Tomcat</code> set the <code>HttpOnly</code> attribute by default, while <code>Jetty</code> does not set it by default. We need to config it in the <code>web.xml</code> file for <code>Jetty</code> or set it in the code for <code>Tomcat</code>. So when you switche <code>Tomcat</code> to <code>Jetty</code>, you need to check the <code>HttpOnly</code> attribute in the <code>Set-Cookie</code> header for session id for security reason.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Tomcat </tag>
            
            <tag> Jetty </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding the Model Context Protocol (MCP)</title>
      <link href="/2025/04/21/understanding-the-model-context-protocol-mcp/"/>
      <url>/2025/04/21/understanding-the-model-context-protocol-mcp/</url>
      
        <content type="html"><![CDATA[<p>In the rapidly evolving landscape of artificial intelligence, ensuring the effective and efficient management of model contexts is crucial for the deployment and utilization of AI systems. The model context is refer to the set of information that is necessary for the <code>AI model</code> like <code>DeepSeek</code>, <code>Claude</code>, <code>ChatGPT</code>, <code>Gemini</code> to make a correct and efficient decision. However, managing the model context is not an easy task, as it requires a combination of technical expertise, domain knowledge, and business intelligence.</p><p>One significant protocol that has emerged to address this challenge is the <code>Model Context Protocol (MCP)</code>. Let’s talk about it in this blog.</p><h2 id="What-is-MCP"><a href="#What-is-MCP" class="headerlink" title="What is MCP?"></a>What is <code>MCP</code>?</h2><p>A brief overview of the <code>Model Context Protocol (MCP)</code> which introduced by official:</p><blockquote><p><code>The Model Context Protocol (MCP)</code> is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you’re building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.</p></blockquote><blockquote><p>Think of <code>MCP</code> like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/mcp-like-usb.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/mcp-like-usb.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>So it’s a protocol that defines a standardized way to connect <code>LLMs</code> with the context they need. The <code>MCP</code> is designed to address the challenges of managing the model context. It’s introduced by <code>Anthropic</code> company at 2024, the <code>Claude Desktop</code> supports very well. </p><h2 id="Why-MCP-Came-Out"><a href="#Why-MCP-Came-Out" class="headerlink" title="Why MCP Came Out?"></a>Why MCP Came Out?</h2><p>Below  explains the Model Context Protocol’s architecture and capabilities, how it solves the inherent challenges of AI integration.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/mcp-before-after.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/mcp-before-after.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Before the <code>MCP</code>, we usually use the <code>Function calling</code>, which allows LLMs to invoke predetermined functions based on user requests, is a well-established feature of modern AI models. Sometimes referred to as “tool use,” function calling is not mutually exclusive with MCP; the new protocol simply standardizes how this API feature works. </p><p>Without MCP, when you use a function call directly with an LLM API, you need to:</p><ol><li>Define model-specific function schemas, which are JSON descriptions of the function, acceptable parameters, and what it returns.</li><li>Implement handlers (the actual code that executes when a function is called) for those functions.</li><li>Create different implementations for each model you support.</li></ol><p>With MCP, the MCP standardizes this process by:</p><ol><li>Defining a consistent way to specify tools (functions) across any AI system.</li><li>Providing a protocol for discovering available tools and executing them.</li><li>Creating a universal, plug-and-play format where any AI app can use any tool without custom integration code.</li></ol><p>You might be familiar with AI apps that use function calling, like Custom GPTs using GPT Actions. A Custom GPT can determine which API call resolves the user’s prompt, create the necessary JSON, then make the API call with it. While this allows some purpose-built tooling, it’s bound to OpenAI’s ecosystem. <code>MCP</code> brings similar capabilities to any AI application that implements the protocol, regardless of the underlying model vendor.</p><h2 id="MCP-Architectures-and-Core-Components"><a href="#MCP-Architectures-and-Core-Components" class="headerlink" title="MCP Architectures and Core Components"></a>MCP Architectures and Core Components</h2><p>Below is general architecture of <code>MCP</code>:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/mcp-general-architecture.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/mcp-general-architecture.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MCP General Architecture"/></div><span class="image-caption">MCP General Architecture</span></div><p><strong>Host application</strong>: <code>LLMs</code> that interact with users and initiate connections. This includes <code>Claude Desktop</code>, AI-enhanced IDEs like <code>Cursor</code>, and standard web-based LLM chat interfaces.</p><p><strong>MCP client</strong>: Integrated within the host application to handle connections with MCP servers, translating between the host’s requirements and the Model Context Protocol. Clients are built into host applications, like the MCP client inside Claude Desktop.</p><p><strong>MCP server</strong>: Adds context and capabilities, exposing specific functions to AI apps through MCP. Each standalone server typically focuses on a specific integration point, like GitHub for repository access or a PostgreSQL for database operations.</p><p><strong>Data Source</strong>: The source of information or functionality that the MCP server connects to. This could be a database, API, or any other data source that the server can access.</p><ol><li><strong>Local Data Sources</strong>: Your computer’s files, databases, and services that MCP servers can securely access</li><li><strong>Remote Services</strong>: External systems available over the internet (e.g., through APIs) that MCP servers can connect to</li></ol><p><strong>Transport layer</strong>: The communication mechanism between clients and servers. MCP supports two primary transport methods:</p><ol><li><strong>STDIO (Standard Input&#x2F;Output)</strong>: Mainly local integrations where the server runs in the same environment as the client.</li><li><strong>HTTP+SSE (Server-Sent Events)</strong>: Remote connections, with HTTP for client requests and SS for server responses and streaming.</li></ol><p>All communication in MCP uses <code>JSON-RPC 2.0</code> as the underlying message standard, providing a standardized structure for requests, responses, and notifications.</p><h2 id="How-MCP-Works"><a href="#How-MCP-Works" class="headerlink" title="How MCP Works"></a>How MCP Works</h2><p>When a user interacts with a host application (an AI app) that supports <code>MCP</code>, several processes occur behind the scenes to enable quick and seamless communication between the AI and external systems. Let’s take a look the example.</p><h3 id="Protocol-handshake"><a href="#Protocol-handshake" class="headerlink" title="Protocol handshake"></a>Protocol handshake</h3><ol><li><strong>Initial connection</strong>: When an MCP client (like Claude Desktop) starts up, it connects to the configured MCP servers on your device.</li><li><strong>Capability discovery</strong>: The client asks each server “What capabilities do you offer?” Each server responds with its available tools, resources, and prompts.</li><li><strong>Registration</strong>: The client registers these capabilities, making them available for the AI to use during your conversation.</li></ol><h3 id="An-Example"><a href="#An-Example" class="headerlink" title="An Example"></a>An Example</h3><p>Let’s use an example to talk about it. Below is the example general communication flow of <code>MCP</code>:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/mcp-communication-flow.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/mcp-communication-flow.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MCP How Works"/></div><span class="image-caption">MCP How Works</span></div><p>Let’s say you ask Claude, “What’s the weather like in San Francisco today?” Here’s what happens:</p><ol><li><strong>Need recognition</strong>: Claude analyzes your question and recognizes it needs external, real-time information that wasn’t in its training data.</li><li><strong>Tool or resource selection</strong>: Claude identifies that it needs to use an MCP capability to fulfill your request.</li><li><strong>Permission request</strong>: The client displays a permission prompt asking if you want to allow access to the external tool or resource. </li><li><strong>Information exchange</strong>: Once approved, the client sends a request to the appropriate MCP server using the standardized protocol format.</li><li><strong>External processing</strong>: The MCP server processes the request, performing whatever action is needed—querying a weather service, reading a file, or accessing a database.</li><li><strong>Result return</strong>: The server returns the requested information to the client in a standardized format.</li><li><strong>Context integration</strong>: Claude receives this information and incorporates it into its understanding of the conversation.</li><li><strong>Response generation</strong>: Claude generates a response that includes the external information, providing you with an answer based on current data.</li></ol><h2 id="MCP-Servers"><a href="#MCP-Servers" class="headerlink" title="MCP Servers"></a>MCP Servers</h2><p>Since the MCP just released at end of the 2024 by Anthropic, but it is growing rapidly. There are many MCP servers available now, and they are categorized into different categories. There are some awsome MCP servers:</p><ul><li><strong>GitHub</strong>: MCP server for GitHub, which allows you to access repositories and files in your GitHub account.</li><li><strong>PostgreSQL</strong>: MCP server for PostgreSQL, which allows you to access and manage your PostgreSQL databases.</li><li><strong>Docker</strong>: MCP server for Docker, which allows you to manage your Docker containers and images.</li><li><strong>Kubernetes</strong>: MCP server for Kubernetes, which allows you to manage your Kubernetes clusters and resources.</li><li><strong>Google Cloud Platform</strong>: MCP server for Google Cloud Platform, which allows you to access and manage your Google Cloud resources.</li><li><strong>Amazon Web Services</strong>: MCP server for Amazon Web Services, which allows you to access and manage your AWS resources.</li></ul><p>There is a MCP servers collections link: <a href="https://github.com/punkpeye/awesome-mcp-servers">https://github.com/punkpeye/awesome-mcp-servers</a>, you can find existing MCP servers and their capabilities. Also, you can create your own MCP server by following the MCP server development guide. We will talk about it in the future.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Chatbot </tag>
            
            <tag> MCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supercharge Your Python project with UV: The Lightning-Fast Package Manager</title>
      <link href="/2025/04/16/supercharge-your-python-project-with-uv-the-lightning-fast-package-manager/"/>
      <url>/2025/04/16/supercharge-your-python-project-with-uv-the-lightning-fast-package-manager/</url>
      
        <content type="html"><![CDATA[<p>Python’s ecosystem thrives on its rich library of packages, but managing dependencies can sometimes feel sluggish, especially in large projects. Enter <code>UV</code>, a modern package manager and resolver designed to supercharge your workflow. Developed by <code>Astral</code> (the team behind the popular Ruff linter), <code>UV</code> promises blazing speed and seamless integration with existing Python tools. Let’s explore why UV might become your new go-to for dependency management.</p><h2 id="What-is-UV"><a href="#What-is-UV" class="headerlink" title="What is UV?"></a>What is UV?</h2><p><code>UV</code> is a Rust-powered tool that combines a package installer (<code>pip</code>) and virtual environment manager (<code>venv</code>) into one ultra-fast solution. It aims to replace traditional tools like <code>pip</code>, <code>pipenv</code>, and <code>poetry</code> while staying fully compatible with their workflows. By leveraging Rust’s performance advantages, UV dramatically reduces installation and resolution times—often by <code>10-100x</code> compared to older tools.</p><h2 id="Why-Use-UV"><a href="#Why-Use-UV" class="headerlink" title="Why Use UV?"></a>Why Use UV?</h2><p><strong>Speed</strong>: <code>UV</code> resolves and installs dependencies in seconds, even for complex projects.<br><strong>Simplicity</strong>: It’s a drop-in replacement for <code>pip</code> and <code>venv</code>, requiring no workflow changes.<br><strong>Modern Features</strong>: Supports <code>pyproject.toml</code>, <code>lock</code> files, and advanced dependency resolution.<br><strong>Cross-Platform</strong>: Works on Windows, macOS, and Linux.</p><h2 id="Getting-Started-with-UV"><a href="#Getting-Started-with-UV" class="headerlink" title="Getting Started with UV"></a>Getting Started with UV</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p><code>UV</code> is distributed as a static binary, so installation is straightforward:</p><h4 id="Install-via-pip-recommended"><a href="#Install-via-pip-recommended" class="headerlink" title="Install via pip (recommended)"></a>Install via pip (recommended)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure><h4 id="Or-use-curl-Mac-Linux-only"><a href="#Or-use-curl-Mac-Linux-only" class="headerlink" title="Or use curl (Mac&#x2F;Linux only)"></a>Or use curl (Mac&#x2F;Linux only)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><p>Once the installation is complete, you can verify the installation by running:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv --version</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-version.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-version.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="UV version"/></div><span class="image-caption">UV version</span></div><p>Running below command to get the help message:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-help.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-help.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="UV help"/></div><span class="image-caption">UV help</span></div><h3 id="Creating-a-Project"><a href="#Creating-a-Project" class="headerlink" title="Creating a Project"></a>Creating a Project</h3><p>To create a new project with <code>UV</code>, run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv init &lt;project-name&gt;</span><br></pre></td></tr></table></figure><p>This will create a new project called <project-name> directory with a <code>pyproject.toml</code> file and a <code>uv.lock</code> file. The <code>pyproject.toml</code> file is where you can specify your project’s dependencies and other metadata. The <code>uv.lock</code> file is where <code>UV</code> stores the resolved dependencies and their versions.</p><p>Let’s create a new project called <code>uv-sample</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv init uv-sample</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-init1.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-init1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="UV init project"/></div><span class="image-caption">UV init project</span></div><p>It also creates associated with the <code>git</code> for this project, <code>.python-version</code> file for managing Python version, and a sample <code>main.py</code> python file.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-init2.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-init2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Project files generated by UV init"/></div><span class="image-caption">Project files generated by UV init</span></div><p>The <code>pyproject.toml</code> file is where you can specify your project’s dependencies and other metadata. Since this project doesn’t have any dependencies, so the <code>uv.lock</code> file is empty. Below is <code>uv-sample</code> <code>pyproject.toml</code> file:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;uv-sample&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;Add your description here&quot;</span></span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="attr">requires-python</span> = <span class="string">&quot;&gt;=3.12&quot;</span></span><br><span class="line"><span class="attr">dependencies</span> = []</span><br></pre></td></tr></table></figure><h3 id="Manage-Dependencies"><a href="#Manage-Dependencies" class="headerlink" title="Manage Dependencies"></a>Manage Dependencies</h3><p>Using <code>uv</code> to manage dependencies is as simple as adding them to the <code>dependencies</code> section of the <code>pyproject.toml</code> file. For example, to add <code>pandas</code> as a dependency, we can run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add pandas</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-add-dependency.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-add-dependency.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="UV Add dependency"/></div><span class="image-caption">UV Add dependency</span></div><p>From the screenshot, you can see before adding the dependency in python project. The <code>uv</code> also help us to create a virtual environment for our project. The package and dependencies installed in the virtual environment will be isolated from the system-wide packages.</p><p>The <code>uv.lock</code> file will be updated with the installed dependencies and their versions. And the <code>pyproject.toml</code> file will be updated with the new dependency.</p><p><code>pyproject.toml</code> file after adding <code>pandas</code> as a dependency:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;uv-sample&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;Add your description here&quot;</span></span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="attr">requires-python</span> = <span class="string">&quot;&gt;=3.12&quot;</span></span><br><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">&quot;pandas&gt;=2.2.3&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>uv.lock</code> file is like a <code>package-lock.json</code> file for <code>npm</code> or <code>yarn</code>. It contains the resolved dependencies and their versions. We can see the installed dependencies and their versions in the <code>uv.lock</code> file. Please don’t edit this file manually.</p><p>To see the dependencies tree, we can run <code>uv tree</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv tree</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-tree.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-tree.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Dependencies via UV tree"/></div><span class="image-caption">Dependencies via UV tree</span></div><p>It lists all the dependencies and their dependencies recursively.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-lock-file.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-lock-file.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="UV lock file"/></div><span class="image-caption">UV lock file</span></div><p>You can also remove the dependency by running: <code>uv remove &lt;dependency-name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv remove pandas</span><br></pre></td></tr></table></figure><p>If your project is cloned. And you want to setup the development environment on your local. You can run <code>uv sync</code> to install the dependencies from the <code>uv.lock</code> file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv <span class="built_in">sync</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-sync.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-sync.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Install dependencies from UV sync"/></div><span class="image-caption">Install dependencies from UV sync</span></div><p>See, it’s very easy. It created a virtual environment for our project and installed the dependencies from the <code>uv.lock</code> file.</p><p>The <code>uv</code> has more features like using <code>uv</code> to install and select specific python verison, run the python code.</p><h3 id="Manage-Python-Version"><a href="#Manage-Python-Version" class="headerlink" title="Manage Python Version"></a>Manage Python Version</h3><p>Using the <code>uv</code> also can manage the python version for your project. Below is the snapshot to manage the python.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-python.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-python.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="UV python"/></div><span class="image-caption">UV python</span></div><p>List all the available downloaded python.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python list</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-python-list.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-python-list.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="List of python versions"/></div><span class="image-caption">List of python versions</span></div><p>You can download and install the specific python version. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python install &lt;version&gt;</span><br></pre></td></tr></table></figure><p>Let’s install the python version 3.14. See below screenshot.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv python install 3.14</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-python-install.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-python-install.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Install python version"/></div><span class="image-caption">Install python version</span></div><p>So using <code>uv</code> we can manage multiple python versions at same time. It’s like <code>nvm</code> for node.js. For more using <code>uv</code> to manage the python version, you can type <code>uv python --help</code> to get the help message.</p><h3 id="Run-Python-Code"><a href="#Run-Python-Code" class="headerlink" title="Run Python Code"></a>Run Python Code</h3><p>Before <code>uv</code>, we running the python code usuallly by using <code>python &lt;python-file&gt;</code>. In <code>uv</code>, we can run the python code using <code>uv run</code> command.</p><p><code>main.py</code> example file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello from uv-sample!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Executing below command to run the python code.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run main.py</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/python/uv-run-python.png" class="lazyload placeholder" data-srcset="/assets/images/python/uv-run-python.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Run python code"/></div><span class="image-caption">Run python code</span></div><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><code>UV</code> is a modern package manager and resolver designed to supercharge your workflow. It promises blazing speed and seamless integration with existing Python tools. It’s a drop-in replacement for <code>pip</code> and <code>venv</code>, requiring no workflow changes. It works on Windows, macOS, and Linux.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> UV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Switching Tomcat with Jetty in Spring Boot Easily</title>
      <link href="/2025/04/11/switching-tomcat-with-jetty-in-spring-boot-easily/"/>
      <url>/2025/04/11/switching-tomcat-with-jetty-in-spring-boot-easily/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Recently, we received the critical security vulnerability which is CVE-2025-24813 (<a href="https://www.cvedetails.com/cve/CVE-2025-24813/">https://www.cvedetails.com/cve/CVE-2025-24813/</a>) information from cloud security team. It request the team to check if there any projects are using tomcat which affected by this vulnerability, and remediate it quickly.</p><p>The CVE-2025-24813 describe below, and publised at 2025-03-10 17:15:35. It’s new found vulnerability.</p><blockquote><p>Path Equivalence: ‘file.Name’ (Internal Dot) leading to Remote Code Execution and&#x2F;or Information disclosure and&#x2F;or malicious content added to uploaded files via write enabled Default Servlet in Apache Tomcat.</p></blockquote><p>Our all microservices are using tomcat as servlet container. And we’re using <code>spring-boot-starter-tomcat</code> version 2.6.4 which is affacted. Actually all spring boot 2 contains this vulnerability. Even in most of embedded tomcat libraries in sprint boot 3.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/spring-boot-starter-tomcat-2.6.4.png" class="lazyload placeholder" data-srcset="/assets/images/java/spring-boot-starter-tomcat-2.6.4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="CVE-2025-24813 in Spring Boot Starter Tomcat 2.6.4"/></div><span class="image-caption">CVE-2025-24813 in Spring Boot Starter Tomcat 2.6.4</span></div><p>This tomcat vulnerability has been fixed since <code>spring-boot-starter-tomcat</code> version <code>3.4.3</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/spring-boot-starter-tomcat-3.4.3.png" class="lazyload placeholder" data-srcset="/assets/images/java/spring-boot-starter-tomcat-3.4.3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="CVE-2025-24813 Resolved in Spring Boot Starter Tomcat 3.4.3"/></div><span class="image-caption">CVE-2025-24813 Resolved in Spring Boot Starter Tomcat 3.4.3</span></div><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>To resolve this vulnerability issue, there are two solutions: </p><ol><li>One is upgrade <code>spring-boot-starter-tomcat</code> to latest version. </li><li>We can switch to other servlet container, such as <code>Jetty</code>.</li></ol><p>For the first solution, we have to upgrade our entire all microservice from Spring Boot 2 to Spring Boot 3 which requires Java 17. Official guide <a href="https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0">https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0</a>. Currently our all microserces are still using Java 8. In short term, It’s hard to upgrade Java 8 to Java 17 and Spring Boot 2 to Spring Boot 3, it will take much time and efforts. There also third party libraries requires to be upgrade when upgrade Java 8 to Java 17.</p><p>More over, we are using <code>spring-cloud-starter-netflix-zuul</code>, in spring cloud github, it mentioned <code>spring-cloud-starter-netflix-zuul</code> not work with <code>spring-boot 3.0</code> and spring 6.0, it has been out of support. It suggests to using <code>Spring Cloud Gateway</code>.  Refer official issue link: <a href="https://github.com/spring-cloud/spring-cloud-netflix/issues/4158">https://github.com/spring-cloud/spring-cloud-netflix/issues/4158</a>. Besides currently the Spring Cloud Gateway does not support the SSO SAML. Hope it supports SAML in future.</p><p>So the solution 2 is best to resolve this vulnuerability in short term.</p><h2 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/jetty-logo.png" class="lazyload placeholder" data-srcset="/assets/images/java/jetty-logo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Jetty"/></div><span class="image-caption">Jetty</span></div><p><code>Jetty</code> is a part of the Eclipse foundation and started in 1995. Jetty is not just a web server and servlet container. But it offers support for WebSocket, HTTP&#x2F;2, OSGi, JNDI, JMX, JAAS, and many other integrations. Additionally  Jetty is popular among developers and also works as an embedded tool for a lot of frameworks, cloud services, application servers, and devices. </p><p>According to stats Jetty maintains a market share of 10% among Java application servers. Some popular companies that use Jetty are <code>Google</code>, <code>Yahoo</code>, <code>Nuxeo</code> and <code>Canva</code>. </p><p>Jetty can:</p><ul><li>Jetty is user friendly and has a better interface than Tomcat.</li><li>Can be used as a part of or full Java application server stack.</li><li>Might be applied as a part of other frameworks due to its flexibility.</li><li>Supports cloud style operations.</li><li>The conceptual weight of the framework is less, very fast, and thin.</li><li>Better for handling simultaneous users compared to Tomcat.</li><li>Small memory trace to work speedily.</li><li>Users can use it easily because the required knowledge and skills are very few.</li></ul><p>Compare with <code>Tomcat</code>, they have the following simlarities:</p><ul><li>Both these tools are open source platforms and written in Java.</li><li>Companies use them in production environments (live releases).</li><li>They can process all components of the Core Java enterprise.</li><li>Both tools have large community support.</li></ul><h2 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h2><p>To switching Tomcat to Jetty in Spring Boot is very easily. You don’t need to update any logic code, the one thing you need to do is that exclude the embedded Tomcat <code>spring-boot-starter-tomcat</code> from <code>spring-boot-stater-web</code> and add dependency <code>spring-boot-starter-jetty</code> in <code>Maven</code> or <code>Gradle</code></p><h3 id="For-Maven-Users"><a href="#For-Maven-Users" class="headerlink" title="For Maven Users:"></a>For Maven Users:</h3><p>Update the <code>pom.xml</code> and making below changes.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Exclude Tomcat starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Add Jetty starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="For-Gradle-Users"><a href="#For-Gradle-Users" class="headerlink" title="For Gradle Users:"></a>For Gradle Users:</h3><p>Update the <code>build.gradle</code> file as below:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// Exclude Tomcat starter</span></span><br><span class="line">    implementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>) &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;spring-boot-starter-tomcat&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add Jetty starter</span></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-jetty&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After you make above changes. Spring Boot stop auto-configuring <code>Tomcat</code> as the embedded server and to set up <code>Jetty</code> instead. <span class='pbg success'>It’s a seamless transition that requires no additional code.</span> Spring Boot’s auto-configuration capabilities recognize the absence of Tomcat and the presence of Jetty and automatically configure your application to use Jetty as its embedded servlet container.</p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>It’s always a good idea to fine-tune your server settings to ensure optimal performance. With Jetty, you can easily configure thread pools, port settings, and more through the <code>application.properties</code> or <code>application.yml</code> file in your Spring Boot project.</p><p>For example, to change the server port and configure the max thread pool size in application.properties, you can add below settings in <code>application.properties</code> file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=8001</span><br><span class="line">server.jetty.threads.max=200</span><br></pre></td></tr></table></figure><p>Once you have complete configuration. You can start your application. The Jetty servlet container started like below.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/java/spring-boot-jetty-started.png" class="lazyload placeholder" data-srcset="/assets/images/java/spring-boot-jetty-started.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Spring Boot Application Started with Jetty"/></div><span class="image-caption">Spring Boot Application Started with Jetty</span></div><h2 id="Summery"><a href="#Summery" class="headerlink" title="Summery"></a>Summery</h2><p>Switching from <code>Tomcat</code> to <code>Jetty</code> in a Spring Boot application isn’t just feasible; it’s straightforward with Spring Boot’s flexible architecture. Whether you’re looking for increased performance, reduced resource consumption, or simply exploring alternatives, transitioning to Jetty offers tangible benefits with minimal hassle.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Tomcat </tag>
            
            <tag> Jetty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create your own OpenAI endpoints in Azure Cloud.</title>
      <link href="/2025/03/14/create-your-own-openai-endpoints-in-azure-cloud/"/>
      <url>/2025/03/14/create-your-own-openai-endpoints-in-azure-cloud/</url>
      
        <content type="html"><![CDATA[<p>Previously, we have introduced how to use Azure OpenAI to develop a RAG (Retrieval-Augmented Generation) chatbot. In this article, we will learn how to create your own OpenAI endpoints in <code>Azure Cloud</code>.</p><p><code>Azure OpenAI</code> is a service provided by Microsoft Azure that allows businesses and developers to integrate OpenAI’s advanced AI models into their applications and systems. This service gives users access to powerful language models like <code>GPT-3</code>, <code>GPT-4</code>, and other AI models developed by OpenAI, via an API hosted on Microsoft’s Azure cloud platform.</p><p>To use Azure OpenAI, users need an Azure subscription and access to the OpenAI API via Azure. Assume you already have an Azure Cloud account and an Azure subscription. Here are the steps to create your own OpenAI endpoints in Azure Cloud</p><h2 id="Step-1-Create-Azure-OpenAI-Resource"><a href="#Step-1-Create-Azure-OpenAI-Resource" class="headerlink" title="Step 1: Create Azure OpenAI Resource"></a>Step 1: Create Azure OpenAI Resource</h2><p>In Microsoft Azure Cloud, Open the <code>Azure AI Services</code> and create a <code>Azure OpenAI</code> resource. Select your subscription and resource group, create a new resource group if you don’t have one. Fill the endpoint name and select the pricing tier. </p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>In Network, choose the All networks including internet option. because we want to access the OpenAI API from anywhere.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-2.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>For the tags, you can type your own tags for this resource.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-3.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>After that, you can review your resource and create it.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-4.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Deploying the resource can take a few seconds.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-5.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Once the resource is deployed, you can select your resource and click the <code>Endpoints</code> and <code>Manage keys</code> to see the API endpoint and key.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-6.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-6.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>You can copy the API endpoint and key and use it in your application to access the OpenAI API.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-7.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-7.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Do you think we have finished to create our own OpenAI endpoints in Azure Cloud? The answer is No, We still need to deploy the OpenAI Model to our Azure OpenAI resource. If we access this API endpoint directly, we will get an error message. like below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openai.NotFoundError: Error code: 404 - &#123;&#x27;error&#x27;: &#123;&#x27;code&#x27;: &#x27;DeploymentNotFound&#x27;, &#x27;message&#x27;: &#x27;The API deployment for this resource does not exist. If you created the deployment within the last 5 minutes, please wait a moment and try again.&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Step-2-Deploy-OpenAI-Model-to-Azure-OpenAI-Resource"><a href="#Step-2-Deploy-OpenAI-Model-to-Azure-OpenAI-Resource" class="headerlink" title="Step 2: Deploy OpenAI Model to Azure OpenAI Resource"></a>Step 2: Deploy OpenAI Model to Azure OpenAI Resource</h2><p>To deploy the OpenAI model to our Azure OpenAI resource, open <code>Azure AI Foundry</code> and select <code>Deployments</code> item in left menu. Click <code>Deploy model</code> button and select <code>Deploy base model</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-8.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-8.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Let’s choose the <code>GPT-4o</code> model.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-9.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-9.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>In deployment model dialog, let’s keep the deployment name and deployment type select as Global Standard.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-10.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-10.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="Step-3-Test-the-OpenAI-Endpoint"><a href="#Step-3-Test-the-OpenAI-Endpoint" class="headerlink" title="Step 3: Test the OpenAI Endpoint"></a>Step 3: Test the OpenAI Endpoint</h2><p>Once the model deployment done, we can go to <code>Playground</code> menu to test our model.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-11.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-11.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Now, you can use your own OpenAI endpoints in your application without errors. Below is using <code>RESTMan</code> extension to call the Azure OpenAI endpoints via REST API way.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-create-12.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-create-12.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>There are many models in Azure AI Foundry, you can choose the model you want to use.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/azure-openai-models.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/azure-openai-models.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Hope this article helps you to create your own OpenAI endpoints in Azure Cloud.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Cloud </tag>
            
            <tag> OpenAI </tag>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creating and Rendering a PDF from React Easily</title>
      <link href="/2025/03/11/creating-and-rendering-pdf-from-react/"/>
      <url>/2025/03/11/creating-and-rendering-pdf-from-react/</url>
      
        <content type="html"><![CDATA[<p>Creating or rendering a PDF file in a web page is a common requirement. It allows user to download the pdf file and view it offline in some scenarios. Today, we will learn how to render and generate a PDF file from React using the <code>react-pdf</code> library.</p><p>The <code>react-pdf</code> library is a React component that allows us to design and render PDF documents in React. Let’s get started an example, it’s very simple to create a pdf and render it in React.</p><h2 id="Install-the-react-pdf-Library"><a href="#Install-the-react-pdf-Library" class="headerlink" title="Install the react-pdf Library"></a>Install the <code>react-pdf</code> Library</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @react-pdf/renderer --save</span><br></pre></td></tr></table></figure><h2 id="Create-a-PDF-Document"><a href="#Create-a-PDF-Document" class="headerlink" title="Create a PDF Document"></a>Create a PDF Document</h2><p>We will create a simple PDF document using the <code>react-pdf</code> library. It supports customize styles and Flex layout to create the PDF.  Below code example using <code>react-pdf</code> library to create a PDF document, including using <code>Document</code>, <code>Page</code>, <code>StyleSheet</code>, <code>Image</code>, <code>View</code>, <code>Text</code>, <code>Link</code> components.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Document</span>, <span class="title class_">Page</span>, <span class="title class_">StyleSheet</span>, <span class="title class_">Image</span>, <span class="title class_">View</span>, <span class="title class_">Text</span>, <span class="title class_">Link</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@react-pdf/renderer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = <span class="title class_">StyleSheet</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">page</span>: &#123;</span><br><span class="line">        <span class="attr">flexDirection</span>: <span class="string">&#x27;column&#x27;</span>,</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">section</span>: &#123;</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="string">&quot;30px&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="attr">textAlign</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&quot;24px&quot;</span>,</span><br><span class="line">        <span class="attr">fontWeight</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="string">&quot;30px&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">logo</span>: &#123;</span><br><span class="line">        <span class="attr">height</span>: <span class="string">&quot;90px&quot;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&quot;100px&quot;</span>,</span><br><span class="line">        <span class="attr">margin</span>: <span class="string">&quot;20px auto&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">fontWeight</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="string">&quot;10px&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">text</span>: &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&quot;14px&quot;</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="string">&quot;10px&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">code</span>: &#123;</span><br><span class="line">        <span class="attr">fontSize</span>: <span class="string">&quot;14px&quot;</span>,</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&quot;#3e3e3e&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">        <span class="attr">padding</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">        <span class="attr">marginBottom</span>: <span class="string">&quot;10px&quot;</span>,</span><br><span class="line">        <span class="attr">borderRadius</span>: <span class="string">&quot;5px&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PdfDocument</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Document</span> <span class="attr">title</span>=<span class="string">&quot;My PDF Document&quot;</span> <span class="attr">author</span>=<span class="string">&quot;Andrewsy&quot;</span> <span class="attr">subject</span>=<span class="string">&quot;This is a sample PDF document&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Page</span> <span class="attr">size</span>=<span class="string">&quot;A4&quot;</span> <span class="attr">style</span>=<span class="string">&#123;styles.page&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.section&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.header&#125;</span>&gt;</span>React PDF Renderer<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>The react-pdf library allows you to render PDF documents using React components.<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Image</span> <span class="attr">style</span>=<span class="string">&#123;styles.logo&#125;</span> <span class="attr">src</span>=<span class="string">&quot;images/logo.png&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.section&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>Install react-pdf library<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>To install the react-pdf library, you can use npm or yarn:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.code&#125;</span>&gt;</span>npm install @react-pdf/renderer<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span>&gt;</span><span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.code&#125;</span>&gt;</span>yarn add @react-pdf/renderer<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.text&#125;</span>&gt;</span>For component documentation, visit the official website <span class="tag">&lt;<span class="name">Link</span> <span class="attr">src</span>=<span class="string">&quot;https://react-pdf.org/&quot;</span>&gt;</span>@react-pdf/renderer<span class="tag">&lt;/<span class="name">Link</span>&gt;</span>.<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Document</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PdfDocument</span>;</span><br></pre></td></tr></table></figure><p>From above, we can see that we have created a PDF document using <code>react-pdf</code> library. We have used <code>Document</code> and <code>Page</code> components to create the PDF document. We have also used <code>StyleSheet</code> to define the styles for the PDF document. And using <code>Image</code>, <code>View</code>, <code>Text</code>, <code>Link</code> components to create the content of the PDF document.</p><h2 id="View-PDF-Document"><a href="#View-PDF-Document" class="headerlink" title="View PDF Document"></a>View PDF Document</h2><p>To view the PDF document, we need to use <code>PDFViewer</code> component to render the PDF document in the browser. There is one thing need notice, if your project is using <code>Next.js</code>, and you want to use <code>PDFViewer</code> or <code>PDFDownloadLink</code> component in client side render directly, you will get below error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Error: PDFViewer is a web specific API. You&#x27;re either using this component on Node, or your bundler is not loading react-pdf from the appropriate web build.]</span><br></pre></td></tr></table></figure><p>To fixed the issue in <code>Next.js</code> project. Use Next dynamic function to manually set server-side rendering off and import it through that function instead of the regular import</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">&quot;next/dynamic&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PDFViewer</span> = <span class="title function_">dynamic</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@react-pdf/renderer&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">mod</span>) =&gt;</span> mod. <span class="title class_">PDFViewer</span>),&#123;<span class="attr">ssr</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PDFDownloadLink</span> = <span class="title function_">dynamic</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@react-pdf/renderer&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">mod</span>) =&gt;</span> mod. <span class="title class_">PDFDownloadLink</span>),&#123;<span class="attr">ssr</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PDFViewer</span>, <span class="title class_">PDFDownloadLink</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@react-pdf/renderer&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The view PDF document code is below, for the <code>PDFViewer</code> component, we need to set the width and height of the PDF document. Actually it is rendered as a <code>iframe</code> element in the browser. This width and height is setting to iframe.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">&quot;next/dynamic&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PdfDocument</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/pdf-document&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PDFViewer</span> = <span class="title function_">dynamic</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@react-pdf/renderer&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">PDFViewer</span>), &#123; <span class="attr">ssr</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Pdf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;, <span class="attr">justifyContent:</span> &#x27;<span class="attr">center</span>&#x27;, <span class="attr">alignItems:</span> &#x27;<span class="attr">center</span>&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100vh</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">PDFViewer</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;900px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">PdfDocument</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">PDFViewer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s see the screenshot. It’s beautifully and easily rendered PDF document in the browser.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/react/react-pdf.png" class="lazyload placeholder" data-srcset="/assets/images/react/react-pdf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="React PDF Renderer"/></div><span class="image-caption">React PDF Renderer</span></div><h2 id="Download-the-PDF-Document"><a href="#Download-the-PDF-Document" class="headerlink" title="Download the PDF Document"></a>Download the PDF Document</h2><p>To download the PDF document, we can use <code>PDFDownloadLink</code> component. It allows us to download the PDF document as a file. The code is below.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">&quot;next/dynamic&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PdfDocument</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/pdf-document&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PDFViewer</span> = <span class="title function_">dynamic</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@react-pdf/renderer&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">PDFViewer</span>), &#123; <span class="attr">ssr</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PDFDownloadLink</span> = <span class="title function_">dynamic</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@react-pdf/renderer&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">PDFDownloadLink</span>), &#123; <span class="attr">ssr</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Pdf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;, <span class="attr">flexDirection:</span>&#x27;<span class="attr">column</span>&#x27;, <span class="attr">alignItems:</span> &#x27;<span class="attr">center</span>&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100vh</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">PDFViewer</span> <span class="attr">width</span>=<span class="string">&quot;850px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;850px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">PdfDocument</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">PDFViewer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">PDFDownloadLink</span> <span class="attr">document</span>=<span class="string">&#123;</span>&lt;<span class="attr">PdfDocument</span> /&gt;</span>&#125; fileName=&quot;my-pdf-document.pdf&quot; style=&#123;&#123;marginTop: &#x27;10px&#x27;&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                &#123;(&#123; blob, url, loading, error &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">                    loading ? &#x27;Loading document...&#x27; : <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> &#x27;#<span class="attr">171717</span>&#x27;, <span class="attr">color:</span> &#x27;<span class="attr">white</span>&#x27;, <span class="attr">padding:</span> &#x27;<span class="attr">10px</span>&#x27;, <span class="attr">borderRadius:</span> &#x27;<span class="attr">5px</span>&#x27;, <span class="attr">cursor:</span> &#x27;<span class="attr">pointer</span>&#x27; &#125;&#125;&gt;</span>Download<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                )&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">PDFDownloadLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above code, we have used <code>PDFDownloadLink</code> component to download the PDF document, passed the <code>PdfDocument</code> component as the <code>document</code> prop of <code>PDFDownloadLink</code> component. We have also set the <code>fileName</code> prop to <code>my-pdf-document.pdf</code> to set the file name of the downloaded file. The <code>style</code> prop is used to set the style of the download button. We also use the <code>loading</code> prop to show the loading message while the PDF document is being downloaded.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/react/react-pdf-download.png" class="lazyload placeholder" data-srcset="/assets/images/react/react-pdf-download.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="React PDF Download"/></div><span class="image-caption">React PDF Download</span></div><p>Below PDF document is downloaded as a file.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/react/react-pdf-doc.png" class="lazyload placeholder" data-srcset="/assets/images/react/react-pdf-doc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="React PDF Document Opened in Adobe Acrobat Reader"/></div><span class="image-caption">React PDF Document Opened in Adobe Acrobat Reader</span></div><p>See it’s easily to create and render a PDF document in React using the <code>react-pdf</code> library.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The <code>react-pdf</code> library is a React component that allows us to design and render PDF documents in React. It supports customize styles and Flex layout to create the PDF. We have learned how to create a PDF document using <code>react-pdf</code> library, how to view and download the PDF document.</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
            <tag> Next.js </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conversational RAG Chatbot - Build a Chatbot with LangChain and Chainlit</title>
      <link href="/2025/02/27/conversational-rag-chatbot-build-a-chatbot-with-langchain/"/>
      <url>/2025/02/27/conversational-rag-chatbot-build-a-chatbot-with-langchain/</url>
      
        <content type="html"><![CDATA[<p>In previous blog, we have converting the PDF documents into the <code>FAISS</code> vector index, and saved in the local. Now, we will build a RAG chatbot using the <code>LangChain</code>, <code>Chainlit</code> and <code>OpenAI</code> base on previous <code>FAISS</code> index.</p><p>Before we get started, let’s talk about what is <code>Chainlit</code> and <code>LangChain</code>.</p><h2 id="Chainlit"><a href="#Chainlit" class="headerlink" title="Chainlit"></a>Chainlit</h2><p>We choose the <code>Chainlit</code> framework to build the chatbot. <code>Chainlit</code> is a framework designed to simplify the process of building and deploying chatbots for large language models (<code>LLMs</code>). It provides a way to create conversational applications that can interact with users through chat interfaces. Chainlit helps developers to chain together different components of a chatbot, such as the model itself, user interfaces, and data sources, making it easier to build complex conversational systems. It is particularly useful for those who want to integrate LLMs into their existing applications or create standalone chatbots. You can find the <code>Chainlit</code> documentation <a href="https://docs.chainlit.io/get-started/overview">here</a>.</p><h2 id="LangChain"><a href="#LangChain" class="headerlink" title="LangChain"></a>LangChain</h2><p><code>LangChain</code> is a framework designed to simplify the process of building language models and applications that leverage these models. It provides a set of tools and libraries that allow developers to integrate language models into their applications more easily, handle data flow, and manage the interactions between different components of their system. LangChain supports various language models and can be used to create a wide range of applications, from chatbots and virtual assistants to document summarization and translation tools. It aims to make it straightforward to build, deploy, and scale language-driven applications.</p><h2 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h2><p>Ok, let’s get started. First, we need to install the <code>LangChain</code> and <code>Chainlit</code> and other libraries, all the required libraries are below. Creating a <code>requirements.txt</code> file and store below libraries in it:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">openai</span><br><span class="line">langchain</span><br><span class="line">chainlit</span><br><span class="line">faiss-cpu</span><br><span class="line">tiktoken</span><br><span class="line">pymupdf</span><br><span class="line">PyPDF2</span><br><span class="line">langchain_openai</span><br><span class="line">langchain_community</span><br></pre></td></tr></table></figure><p>I suggest to create a virtual environment for this project before installing these libraries. We can use the following command to create a virtual environment:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv venv</span><br></pre></td></tr></table></figure><p>After creating the virtual environment, activate it using the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><p>Then install all the required libraries using the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>Now, we can start building the chatbot.</p><h2 id="Building-Chatbot-UI"><a href="#Building-Chatbot-UI" class="headerlink" title="Building Chatbot UI"></a>Building Chatbot UI</h2><p>The <code>Chainlit</code> provides the wonderful API to build the chatbot UI. It saves much time and efforts. In the project, create a <code>app.py</code> and import the <code>chainlit</code> library then write the below code. We will use 3 chainlit annotations. <code>@cl.set_starters</code>, <code>@cl.on_chat_start</code>, and <code>@cl.on_message</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chainlit <span class="keyword">as</span> cl</span><br><span class="line"></span><br><span class="line"><span class="meta">@cl.set_starters</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">set_starters</span>():</span><br><span class="line">    <span class="comment"># The chatbot starter page which displays the quick list of questions</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        cl.Starter(</span><br><span class="line">            label=<span class="string">&quot;The Major Updates in Wix5&quot;</span>,</span><br><span class="line">            message=<span class="string">&quot;What&#x27;s the major updates in Wix5?&quot;</span>,</span><br><span class="line">            icon=<span class="string">&quot;/public/images/specifications.svg&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">        cl.Starter(</span><br><span class="line">            label=<span class="string">&quot;Migrate Project from Wix4 to Wix5&quot;</span>,</span><br><span class="line">            message=<span class="string">&quot;How to mirage the wix4 project to wix5?&quot;</span>,</span><br><span class="line">            icon=<span class="string">&quot;/public/images/jigsaw.png&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">        cl.Starter(</span><br><span class="line">            label=<span class="string">&quot;Build Burn Bootstrapper on Wix5&quot;</span>,</span><br><span class="line">            message=<span class="string">&quot;How to build a burn bootstrapper on wix5?&quot;</span>,</span><br><span class="line">            icon=<span class="string">&quot;/public/images/bundle.svg&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cl.on_chat_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="comment"># starting the chatbot logic</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@cl.on_message</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">message: cl.Message</span>):</span><br><span class="line">    <span class="comment"># chatbot logic and response here</span></span><br></pre></td></tr></table></figure><ol><li><p>The <code>@cl.set_starters</code> annotation is used to set the chatbot starter page. It takes a list of <code>cl.Starter</code> objects as input. Each <code>cl.Starter</code> object represents a question and its corresponding message. The <code>icon</code> parameter is used to set the icon for the question.</p></li><li><p>The <code>@cl.on_chat_start</code> annotation is used to start the chatbot logic. Such as setting the initial state of the chatbot, loading the chatbot model, FAISS index, create a langchain pipeline, etc.</p></li><li><p>The <code>@cl.on_message</code> annotation is used to handle the chatbot logic and response. It takes a <code>cl.Message</code> object as input. The <code>cl.Message</code> object contains the user’s message and other metadata. We can use the <code>message.content</code> attribute to get the user’s message.</p></li></ol><p>The starter page screenshot like below:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/chainlit-chatbot-starter-page.png %" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/chainlit-chatbot-starter-page.png %" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Chainlit Chatbot Starter Page"/></div><span class="image-caption">Chainlit Chatbot Starter Page</span></div><p>You can also customize the theme, or do some changes in UI. </p><h2 id="Loading-the-FAISS-Vector-Index"><a href="#Loading-the-FAISS-Vector-Index" class="headerlink" title="Loading the FAISS Vector Index"></a>Loading the FAISS Vector Index</h2><p>Using <code>FAISS</code> library, we can load the <code>FAISS</code> vector index. We need to pass the <code>embeddings</code> and <code>index_name</code> to the <code>FAISS.load_local</code> method. The <code>embeddings</code> parameter is the embedding model we used before, and the <code>index_name</code> parameter is the name of the index. Here, our embedding model is <code>AzureOpenAIEmbeddings</code> and the index name is <code>wix-upgrade</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">VECTOR_INDEX_NAME = <span class="string">&#x27;wix-upgrade&#x27;</span></span><br><span class="line">AZURE_OPENAI_API_KEY = os.getenv(<span class="string">&quot;AZURE_OPENAI_API_KEY&quot;</span>)</span><br><span class="line">AZURE_OPENAI_ENDPOINT = os.getenv(<span class="string">&quot;AZURE_OPENAI_ENDPOINT&quot;</span>)</span><br><span class="line">AZURE_OPENAI_ADA_DEPLOYMENT_VERSION = os.getenv(<span class="string">&quot;AZURE_OPENAI_ADA_DEPLOYMENT_VERSION&quot;</span>)</span><br><span class="line">AZURE_OPENAI_CHAT_DEPLOYMENT_VERSION= os.getenv(<span class="string">&quot;AZURE_OPENAI_CHAT_DEPLOYMENT_VERSION&quot;</span>)</span><br><span class="line">AZURE_OPENAI_ADA_EMBEDDING_DEPLOYMENT_NAME = os.getenv(<span class="string">&quot;AZURE_OPENAI_ADA_EMBEDDING_DEPLOYMENT_NAME&quot;</span>)</span><br><span class="line">AZURE_OPENAI_ADA_EMBEDDING_MODEL_NAME = os.getenv(<span class="string">&quot;AZURE_OPENAI_ADA_EMBEDDING_MODEL_NAME&quot;</span>)</span><br><span class="line">AZURE_OPENAI_CHAT_DEPLOYMENT_NAME = os.getenv(<span class="string">&quot;AZURE_OPENAI_CHAT_DEPLOYMENT_NAME&quot;</span>)</span><br><span class="line"></span><br><span class="line">embeddings = AzureOpenAIEmbeddings(</span><br><span class="line">    deployment=AZURE_OPENAI_ADA_EMBEDDING_DEPLOYMENT_NAME,</span><br><span class="line">    model=AZURE_OPENAI_ADA_EMBEDDING_MODEL_NAME,</span><br><span class="line">    azure_endpoint=AZURE_OPENAI_ENDPOINT,</span><br><span class="line">    openai_api_key=AZURE_OPENAI_API_KEY,</span><br><span class="line">    openai_api_version=AZURE_OPENAI_ADA_DEPLOYMENT_VERSION</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">docs_vector_store = FAISS.load_local(</span><br><span class="line">    folder_path=<span class="string">&quot;./vector_stores&quot;</span>, </span><br><span class="line">    embeddings=embeddings, </span><br><span class="line">    index_name=VECTOR_INDEX_NAME,</span><br><span class="line">    allow_dangerous_deserialization=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Using <code>load_dotenv()</code> method, we can load the environment variables from the <code>.env</code> file. We can put the loading vector index code in the <code>@cl.on_chat_start</code> annotation.</p><h2 id="Building-the-Converstaion-Chain"><a href="#Building-the-Converstaion-Chain" class="headerlink" title="Building the Converstaion Chain"></a>Building the Converstaion Chain</h2><p>After we load the vector index, we can build the conversation chain using <code>LangChain</code>. The main logic are below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> AzureOpenAIEmbeddings,AzureChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain_community.chat_message_histories <span class="keyword">import</span> ChatMessageHistory</span><br><span class="line"><span class="keyword">from</span> langchain.chains.combine_documents <span class="keyword">import</span> create_stuff_documents_chain</span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_history_aware_retriever, create_retrieval_chain</span><br><span class="line"><span class="keyword">from</span> langchain_core.chat_history <span class="keyword">import</span> BaseChatMessageHistory</span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables.history <span class="keyword">import</span> RunnableWithMessageHistory</span><br><span class="line"></span><br><span class="line">chat_history_store = &#123;&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session_history</span>(<span class="params">session_id: <span class="built_in">str</span></span>) -&gt; BaseChatMessageHistory:</span><br><span class="line">    <span class="keyword">if</span> session_id <span class="keyword">not</span> <span class="keyword">in</span> chat_history_store:</span><br><span class="line">        chat_history_store[session_id] = ChatMessageHistory()</span><br><span class="line">    <span class="keyword">return</span> chat_history_store[session_id]</span><br><span class="line"></span><br><span class="line"><span class="meta">@cl.on_chat_start</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    docs_vector_store = FAISS.load_local(</span><br><span class="line">        folder_path=<span class="string">&quot;./vector_stores&quot;</span>, </span><br><span class="line">        embeddings=embeddings, </span><br><span class="line">        index_name=VECTOR_INDEX_NAME,</span><br><span class="line">        allow_dangerous_deserialization=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    llm=AzureChatOpenAI(</span><br><span class="line">        api_key=AZURE_OPENAI_API_KEY,</span><br><span class="line">        azure_endpoint=AZURE_OPENAI_ENDPOINT,</span><br><span class="line">        api_version=AZURE_OPENAI_CHAT_DEPLOYMENT_VERSION,</span><br><span class="line">        openai_api_type=<span class="string">&quot;azure&quot;</span>,</span><br><span class="line">        azure_deployment=AZURE_OPENAI_CHAT_DEPLOYMENT_NAME,</span><br><span class="line">        streaming=<span class="literal">True</span>,</span><br><span class="line">        verbose=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    retriever = docs_vector_store.as_retriever()</span><br><span class="line">    history_aware_retriever = create_history_aware_retriever(llm, retriever, contextualize_q_prompt)</span><br><span class="line">    question_answer_chain = create_stuff_documents_chain(llm, QA_PROMPT)</span><br><span class="line">    rag_chain = create_retrieval_chain(history_aware_retriever, question_answer_chain)</span><br><span class="line"></span><br><span class="line">    conversational_rag_chain = RunnableWithMessageHistory(</span><br><span class="line">        rag_chain,</span><br><span class="line">        get_session_history,</span><br><span class="line">        input_messages_key=<span class="string">&quot;input&quot;</span>,</span><br><span class="line">        history_messages_key=<span class="string">&quot;chat_history&quot;</span>,</span><br><span class="line">        output_messages_key=<span class="string">&quot;answer&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    cl.user_session.<span class="built_in">set</span>(<span class="string">&quot;chain&quot;</span>, conversational_rag_chain)</span><br></pre></td></tr></table></figure><p>In above code, we first load the <code>FAISS</code> vector index and create the <code>AzureChatOpenAI</code> language model. We then create the <code>retriever</code> using the <code>docs_vector_store</code> and create the <code>history_aware_retriever</code> using the <code>create_history_aware_retriever</code> method. The <code>contextualize_q_prompt</code> method is used to create the contextualized question prompt. The <code>create_stuff_documents_chain</code> method is used to create the question answer chain. Finally, we create the <code>rag_chain</code> using the <code>create_retrieval_chain</code> method.</p><p>We then create the <code>conversational_rag_chain</code> using the <code>RunnableWithMessageHistory</code> class. The <code>get_session_history</code> method is used to get the chat history for each session. The <code>input_messages_key</code>, <code>history_messages_key</code>, and <code>output_messages_key</code> parameters are used to set the keys for the input, history, and output messages.</p><p>We set the <code>conversational_rag_chain</code> as the chatbot chain using the <code>cl.user_session.set</code> method. We can use it later.</p><p>Here you’re notice there is <code>contextualize_q_prompt</code> and <code>QA_PROMPT</code> variable. They are prompts which will passting to LLM to restrict the LLM answers. The code is below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.prompts.chat <span class="keyword">import</span> (</span><br><span class="line">    ChatPromptTemplate,</span><br><span class="line">    MessagesPlaceholder</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">contextualize_q_system_prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Given a chat history and the latest user question \</span></span><br><span class="line"><span class="string">which might reference context in the chat history, formulate a standalone question \</span></span><br><span class="line"><span class="string">which can be understood without the chat history. Do NOT answer the question, \</span></span><br><span class="line"><span class="string">just reformulate it if needed and otherwise return it as is.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">contextualize_q_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, contextualize_q_system_prompt),</span><br><span class="line">        MessagesPlaceholder(<span class="string">&quot;chat_history&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">qa_system_prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Act like a WiX (WixToolset) development expert and help me with related WiX development questions. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Some **strict rules** you have to follow NO MATTER WHAT:</span></span><br><span class="line"><span class="string">Only answer related questions about WiX development.</span></span><br><span class="line"><span class="string">If you don&#x27;t know the answer, say:</span></span><br><span class="line"><span class="string">I don&#x27;t have such information, please refer to WiX offical documentation for the information. https://docs.firegiant.com/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please Use the following pieces of context to answer the user&#x27;s question. </span></span><br><span class="line"><span class="string">----------------</span></span><br><span class="line"><span class="string">&#123;context&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">QA_PROMPT = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, qa_system_prompt),</span><br><span class="line">        MessagesPlaceholder(<span class="string">&quot;chat_history&quot;</span>),</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The <code>contextualize_q_prompt</code> is used to create the contextualized question prompt base on chat history and the latest user iput. The <code>MessagesPlaceholder(&quot;chat_history&quot;)</code> is used to insert the chat history in the prompt. From the prompt, It will formulate a standard question base on chat history and the latest user input.</p><p>The <code>qa_system_prompt</code> is used to create the question answer prompt. It is limit to only answer the related questions about WiX development. If the user’s question is not related to WiX development, it will say I don’t have such information, please refer to the WiX offical documentation for the information. You can also remove this limitation prompt text to make the AI model reply any question.</p><p>So now, our chain is ready to use. Next step we will uset this chain to answer the user’s question.</p><h2 id="Invoke-Chain"><a href="#Invoke-Chain" class="headerlink" title="Invoke Chain"></a>Invoke Chain</h2><p>In previous step, we have set the <code>conversational_rag_chain</code> as the chatbot chain using the <code>cl.user_session.set</code> method. Now, we can use it to answer the user’s question. Below is <code>@cl.on_message</code> annotation to invoke the chain and send the response.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@cl.on_message</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">message: cl.Message</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chain = cl.user_session.get(<span class="string">&quot;chain&quot;</span>)</span><br><span class="line">        msg = cl.Message(content=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        res = chain.invoke(</span><br><span class="line">            &#123;<span class="string">&quot;input&quot;</span>: message.content&#125;, </span><br><span class="line">            config=&#123;</span><br><span class="line">                <span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;session_id&quot;</span>: cl.user_session.get(<span class="string">&quot;id&quot;</span>)&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        response = res[<span class="string">&quot;answer&quot;</span>]</span><br><span class="line"></span><br><span class="line">        stream_size = <span class="number">20</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(<span class="built_in">len</span>(response) / stream_size)) + <span class="number">1</span>):</span><br><span class="line">            msg.content = response[<span class="number">0</span> : (i + <span class="number">1</span>) * stream_size]</span><br><span class="line">            <span class="keyword">await</span> msg.send()</span><br><span class="line">            time.sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> e.code == <span class="string">&quot;content_filter&quot;</span>:</span><br><span class="line">            <span class="keyword">await</span> cl.ErrorMessage(</span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                The response was filtered due to the prompt triggering Azure OpenAI&#x27;s content management policy. Please modify your prompt and retry. </span></span><br><span class="line"><span class="string">                To learn more about our content filtering policies please read our documentation: </span></span><br><span class="line"><span class="string">                https://go.microsoft.com/fwlink/?linkid=2198766</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">                ).send()</span><br></pre></td></tr></table></figure><p>In above code, we get the <code>conversational_rag_chain</code> from the <code>cl.user_session</code> and invoke it with the user’s message. We set the <code>session_id</code> in the <code>config</code> parameter to get the chat history for each session. We then send the response to the user in chunks of 20 characters.</p><p>The following code is simulating the stream response in the UI. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stream_size = <span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(<span class="built_in">len</span>(response) / stream_size)) + <span class="number">1</span>):</span><br><span class="line">    msg.content = response[<span class="number">0</span> : (i + <span class="number">1</span>) * stream_size]</span><br><span class="line">    <span class="keyword">await</span> msg.send()</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br></pre></td></tr></table></figure><p>The AzureOpenAI has content limitation, the user input which pass to the OpenAI API will be filtered if it contains any offensive or inappropriate content. So, we need to handle this situation. We can use the <code>ErrorMessage</code> class to send the error message to the user if the response is filtered.</p><h2 id="Chat-Demo-Screenshoots"><a href="#Chat-Demo-Screenshoots" class="headerlink" title="Chat Demo Screenshoots"></a>Chat Demo Screenshoots</h2><p>Below are screenshots of the chatbot conversation UI and response.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/chainlit-chatbot-chat-1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/chainlit-chatbot-chat-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/chainlit-chatbot-chat-2.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/chainlit-chatbot-chat-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/chainlit-chatbot-chat-3.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/chainlit-chatbot-chat-3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this blog, we have built a RAG chatbot using the <code>LangChain</code>, <code>Chainlit</code> and <code>OpenAI</code> base on previous <code>FAISS</code> index. We have used the <code>Chainlit</code> to build the chatbot UI, and the <code>LangChain</code> to build the conversation chain. We have also used the <code>FAISS</code> library to load the <code>FAISS</code> vector index and the <code>AzureChatOpenAI</code> language model. Finally, we have used the <code>RunnableWithMessageHistory</code> class to handle the chat history and the <code>ErrorMessage</code> class to handle the content filter.</p><p>If you want to get the full code, you can find it in the <a href="https://github.com/stonefishy/converstional-rag-chatbot">GitHub repository</a>. In this demo, we just put the 4 PDF documents which upgrade Wix3, Wix4 to Wix5. You can replace it with your own documents.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
            <tag> OpenAI </tag>
            
            <tag> RAG </tag>
            
            <tag> FAISS </tag>
            
            <tag> Langchain </tag>
            
            <tag> Chainlit Chatbot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conversational RAG Chatbot - Converting PDF Document to Vector</title>
      <link href="/2025/02/24/conversational-rag-chatbot-converting-pdf-document-to-vector/"/>
      <url>/2025/02/24/conversational-rag-chatbot-converting-pdf-document-to-vector/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this series of blogs, we will build a <code>RAG(Retrieval-Augmented Generation)</code> chatbot which using <code>WiX(WiXToolset)</code> documents as knowledge data. It will contains below steps:</p><ol><li>Converting PDF Document to Vector</li><li>Building a Chatbot that can answer questions based on the documents</li></ol><p>The technology stack used in this project are</p><ul><li>Python</li><li>LangChain</li><li>OpenAI</li><li>Chainlit</li><li>FAISS</li></ul><p>In this blog, we will focus on the first step, Converting PDF Document to Vector. </p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>The vector is a mathematical representation of a document or a text. It is a numerical representation of the text that can be used for various natural language processing tasks. The vector can be generated using various techniques like Bag-of-Words, TF-IDF, Word2Vec, etc. To store the vector, we can use various databases like FAISS, Pinecone, chroma etc.</p><h2 id="PDF-Document-to-Vector"><a href="#PDF-Document-to-Vector" class="headerlink" title="PDF Document to Vector"></a>PDF Document to Vector</h2><h3 id="FAISS"><a href="#FAISS" class="headerlink" title="FAISS"></a>FAISS</h3><p>In this blog, we will use <code>FAISS(Facebook AI Similarity Search)</code> to save the vector on local. The FAISS is  is a library for efficient similarity search and clustering of dense vectors. It is developed by Faiss Team at Facebook AI Research. FAISS is designed to handle large-scale nearest neighbor searches, which are common in applications like recommendation systems, image retrieval, and natural language processing. The library provides multiple algorithms for searching and clustering, including exact and approximate methods, and is optimized for both speed and accuracy. It supports various types of vector norms and can be used on both CPU and GPU for fast computation.</p><h3 id="Prepare-the-PDF-documents"><a href="#Prepare-the-PDF-documents" class="headerlink" title="Prepare the PDF documents"></a>Prepare the PDF documents</h3><p>For the WiX documents, we can download the documents from the official website <a href="https://docs.firegiant.com/wix/fivefour/">https://docs.firegiant.com/wix/fivefour/</a>. And here we only use the WiX upgrade guide document. Below are documents we are using:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/faiss-wix-pdfs.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/faiss-wix-pdfs.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h3 id="Extracting-Text-from-PDF-Documents"><a href="#Extracting-Text-from-PDF-Documents" class="headerlink" title="Extracting Text from PDF Documents"></a>Extracting Text from PDF Documents</h3><p>We will using the library <code>PyPDF2</code> to extract the text from the PDF documents. Below is code snippet to extract all the text from the PDF documents and store it in a text variable. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pdf_directory = Path(pdf_storage_path)</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pdf_path <span class="keyword">in</span> pdf_directory.glob(<span class="string">&quot;*.pdf&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Reading document <span class="subst">&#123;pdf_path&#125;</span>&quot;</span>)</span><br><span class="line">    pdf_reader = PdfReader(pdf_path, <span class="literal">True</span>)</span><br><span class="line">    pdf_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> pdf_reader.pages:</span><br><span class="line">        page_text = page.extract_text()</span><br><span class="line">        pdf_text += page_text</span><br><span class="line"></span><br><span class="line">    txt_path = pdf_path.with_name(pdf_path.stem + <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(pdf_text)</span><br><span class="line">    text += pdf_text + <span class="string">&quot;\n\n&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="Embeddings"><a href="#Embeddings" class="headerlink" title="Embeddings"></a>Embeddings</h3><p>Using the <code>AzureOpenAIEmbeddings</code> class from <code>langchain</code> library to get the vector representation of the text. For the Azuer OpenAI endpoints and api keys you can define it in the <code>.env</code> file.</p><p>.env file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AZURE_OPENAI_ENDPOINT=</span><br><span class="line">AZURE_OPENAI_API_KEY=</span><br><span class="line">AZURE_OPENAI_CHAT_DEPLOYMENT_NAME=gpt-4o</span><br><span class="line">AZURE_OPENAI_CHAT_DEPLOYMENT_VERSION=<span class="number">2023</span>-07-01-preview</span><br><span class="line">AZURE_OPENAI_ADA_EMBEDDING_MODEL_NAME=text-embedding-ada-002</span><br><span class="line">AZURE_OPENAI_ADA_EMBEDDING_DEPLOYMENT_NAME=text-embedding-ada-002</span><br><span class="line">AZURE_OPENAI_ADA_DEPLOYMENT_VERSION=<span class="number">2023</span>-07-01-preview</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">embeddings = AzureOpenAIEmbeddings(</span><br><span class="line">    deployment=AZURE_OPENAI_ADA_EMBEDDING_DEPLOYMENT_NAME,</span><br><span class="line">    model=AZURE_OPENAI_ADA_EMBEDDING_MODEL_NAME,</span><br><span class="line">    azure_endpoint=AZURE_OPENAI_ENDPOINT,</span><br><span class="line">    openai_api_key=AZURE_OPENAI_API_KEY,</span><br><span class="line">    openai_api_version=AZURE_OPENAI_ADA_DEPLOYMENT_VERSION</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Construct-FAISS"><a href="#Construct-FAISS" class="headerlink" title="Construct FAISS"></a>Construct FAISS</h3><p>After we have extracted the text from the PDF documents, below code snippet will construct the FAISS index. Using the <code>RecursiveCharacterTextSplitter</code> class from <code>langchain</code> library to split the text into chunks. Using <code>AzureOpenAIEmbeddings</code> class from <code>langchain</code> library, we can get the vector representation of the text. And save it into the FAISS index.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">    separators=<span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    chunk_size=<span class="number">1000</span>, </span><br><span class="line">    chunk_overlap=<span class="number">250</span>,</span><br><span class="line">    length_function=<span class="built_in">len</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;splitting text into chunks...&quot;</span>)</span><br><span class="line">chunks = text_splitter.split_text(text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;embedding all documents...&quot;</span>)</span><br><span class="line">vector_store =FAISS.from_texts(chunks, embeddings)</span><br><span class="line">vector_store.save_local(<span class="string">&quot;./vector_stores&quot;</span>, index_name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;finished processing all pdfs!&quot;</span>)</span><br></pre></td></tr></table></figure><p>So the entire workflow is that we have downloaded the PDF documents, extracted the text from the PDF documents, and constructed the FAISS index. The FAISS index will be saved in the local directory.</p><p>Below is the function code snippet:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pdfs_to_faiss</span>(<span class="params">pdf_storage_path: <span class="built_in">str</span>, index_name: <span class="built_in">str</span></span>):</span><br><span class="line">    pdf_directory = Path(pdf_storage_path)</span><br><span class="line">    text = <span class="string">&quot;&quot;</span></span><br><span class="line">    text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">        separators=<span class="string">&quot;\n&quot;</span>,</span><br><span class="line">        chunk_size=<span class="number">1000</span>, </span><br><span class="line">        chunk_overlap=<span class="number">250</span>,</span><br><span class="line">        length_function=<span class="built_in">len</span></span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pdf_path <span class="keyword">in</span> pdf_directory.glob(<span class="string">&quot;*.pdf&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Reading document <span class="subst">&#123;pdf_path&#125;</span>&quot;</span>)</span><br><span class="line">        pdf_reader = PdfReader(pdf_path, <span class="literal">True</span>)</span><br><span class="line">        pdf_text = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> pdf_reader.pages:</span><br><span class="line">            page_text = page.extract_text()</span><br><span class="line">            pdf_text += page_text</span><br><span class="line"></span><br><span class="line">        txt_path = pdf_path.with_name(pdf_path.stem + <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(pdf_text)</span><br><span class="line">        text += pdf_text + <span class="string">&quot;\n\n&quot;</span> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;splitting text into chunks...&quot;</span>)</span><br><span class="line">    chunks = text_splitter.split_text(text)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;embedding all documents...&quot;</span>)</span><br><span class="line">    vector_store =FAISS.from_texts(chunks, embeddings)</span><br><span class="line">    vector_store.save_local(<span class="string">&quot;./vector_stores&quot;</span>, index_name)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finished processing all pdfs!&quot;</span>)</span><br></pre></td></tr></table></figure><p>There is also another way to construct the FAISS index using the <code>langchain</code> library from pdf documents. Using <code>PyMuPDFLoader</code> to load the pdf documents instead of extracting the text from the pdf documents. Below is the code snippet:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pdfs_to_faiss2</span>(<span class="params">pdf_storage_path: <span class="built_in">str</span>, index_name: <span class="built_in">str</span></span>):</span><br><span class="line">    pdf_directory = Path(pdf_storage_path)</span><br><span class="line">    docs = []</span><br><span class="line">    text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">        separators=[<span class="string">&quot;\n\n&quot;</span>, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot; &quot;</span>],</span><br><span class="line">        chunk_size=<span class="number">1000</span>, </span><br><span class="line">        chunk_overlap=<span class="number">250</span>,</span><br><span class="line">        length_function=<span class="built_in">len</span></span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pdf_path <span class="keyword">in</span> pdf_directory.glob(<span class="string">&quot;*.pdf&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Reading document <span class="subst">&#123;pdf_path&#125;</span>&quot;</span>)</span><br><span class="line">        loader = PyMuPDFLoader(<span class="built_in">str</span>(pdf_path))</span><br><span class="line">        documents = loader.load()</span><br><span class="line">        pdf_docs= text_splitter.split_documents(documents)</span><br><span class="line">        docs += pdf_docs</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;embedding all documents...&quot;</span>)</span><br><span class="line">    vector_store =FAISS.from_documents(docs, embeddings)</span><br><span class="line">    vector_store.save_local(<span class="string">&quot;./vector_stores&quot;</span>, index_name)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finished processing all pdfs!&quot;</span>)</span><br></pre></td></tr></table></figure><p>Above two code snippets are reading all documents from one directory and saving them into the FAISS index. But somehow, if the text is too long and exceed the maximum length of the Azure OpenAI API, it failed to process the text. Refer to Azure OpenAI API documentation <a href="https://learn.microsoft.com/en-us/azure/ai-services/openai/quotas-limits">https://learn.microsoft.com/en-us/azure/ai-services/openai/quotas-limits</a>. </p><p>We can count the token by using <code>tiktoken</code> library. The model is used to tokenize the text. If the model is not found, it defaults to using the ‘cl100k_base’ tokenizer. Here we can passing the AzureOpenAIEmbeddings model to the <code>count_tokens</code> function to count the number of tokens in the text.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Counts the number of tokens in a given text using the specified model&#x27;s tokenizer.</span></span><br><span class="line"><span class="string">If the model is not found, it defaults to using the &#x27;cl100k_base&#x27; tokenizer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Args:</span></span><br><span class="line"><span class="string">    text (str): The input text to be tokenized.</span></span><br><span class="line"><span class="string">    model (str): The name of the model for which the tokenizer is used.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    int: The total number of tokens in the text.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_tokens</span>(<span class="params">text, model</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        encoding = tiktoken.encoding_for_model(model)</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Warning: model not found. Using cl100k_base encoding.&quot;</span>)</span><br><span class="line">        encoding = tiktoken.get_encoding(<span class="string">&quot;cl100k_base&quot;</span>)</span><br><span class="line">    num_tokens = <span class="built_in">len</span>(encoding.encode(text))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total tokens: <span class="subst">&#123;num_tokens&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> num_tokens</span><br></pre></td></tr></table></figure><h3 id="Mergging-Indexes"><a href="#Mergging-Indexes" class="headerlink" title="Mergging Indexes"></a>Mergging Indexes</h3><p>The FAISS supports to merge multiple indexes into one index. So we can merge the index of all the documents into one index. Below is the code snippet to merge the index of all the documents into one index.</p><p>Let’s write another function to embedding pdfs into individual index. Below function will embedding all the pdfs into individual index and save it in the specified directory.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pdfs_to_faiss_files</span>(<span class="params">pdf_storage_path: <span class="built_in">str</span>, faiss_dir_path: <span class="built_in">str</span></span>):</span><br><span class="line">    pdf_directory = Path(pdf_storage_path)</span><br><span class="line">    text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">        separators=[<span class="string">&quot;\n\n&quot;</span>, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot; &quot;</span>],</span><br><span class="line">        chunk_size=<span class="number">1000</span>, </span><br><span class="line">        chunk_overlap=<span class="number">200</span>,</span><br><span class="line">        length_function=<span class="built_in">len</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pdf_path <span class="keyword">in</span> pdf_directory.glob(<span class="string">&quot;*.pdf&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Reading document <span class="subst">&#123;pdf_path&#125;</span>&quot;</span>)</span><br><span class="line">        loader = PyMuPDFLoader(<span class="built_in">str</span>(pdf_path))</span><br><span class="line">        documents = loader.load()</span><br><span class="line">        pdf_docs= text_splitter.split_documents(documents)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;embedding document <span class="subst">&#123;pdf_path&#125;</span>&quot;</span>)</span><br><span class="line">        vector_store =FAISS.from_documents(pdf_docs, embeddings)</span><br><span class="line">        vector_store.save_local(faiss_dir_path, pdf_path.stem)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;finished processing pdf <span class="subst">&#123;pdf_path&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure><p>Call this function with below code snippet to embedding all the pdfs into individual index.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdfs_to_faiss_files(PDF_STORAGE_PATH, <span class="string">&quot;./faiss_files&quot;</span>)</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/faiss-wix-pdfs-indexing.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/faiss-wix-pdfs-indexing.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/faiss-wix-indexes.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/faiss-wix-indexes.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>After these indexes are created, we can use FAISS to merge them into one index. Below is the code snippet to merge the index of all the documents into one index.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Merges multiple FAISS files into a single index.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Args:</span></span><br><span class="line"><span class="string">    faiss_dir_path (str): The path to the directory containing the FAISS files.</span></span><br><span class="line"><span class="string">    index_name (str): The name of the index to be saved.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_faiss_files</span>(<span class="params">faiss_dir_path: <span class="built_in">str</span>, index_name: <span class="built_in">str</span></span>):</span><br><span class="line">    faiss_directory = Path(faiss_dir_path)</span><br><span class="line">    </span><br><span class="line">    is_first_faiss = <span class="literal">True</span></span><br><span class="line">    first_faiss = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> faiss_path <span class="keyword">in</span> faiss_directory.glob(<span class="string">&quot;*.faiss&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading FAISS file <span class="subst">&#123;faiss_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_first_faiss:</span><br><span class="line">            is_first_faiss = <span class="literal">False</span></span><br><span class="line">            first_faiss = FAISS.load_local(</span><br><span class="line">                folder_path=faiss_dir_path, </span><br><span class="line">                embeddings=embeddings, </span><br><span class="line">                index_name=faiss_path.stem,</span><br><span class="line">                allow_dangerous_deserialization=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Merging with <span class="subst">&#123;faiss_path&#125;</span>&quot;</span>)</span><br><span class="line">            first_faiss.merge_from(FAISS.load_local(</span><br><span class="line">                folder_path=faiss_dir_path, </span><br><span class="line">                embeddings=embeddings, </span><br><span class="line">                index_name=faiss_path.stem,</span><br><span class="line">                allow_dangerous_deserialization=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    first_faiss.save_local(<span class="string">&quot;./vector_stores&quot;</span>, index_name)</span><br></pre></td></tr></table></figure><p>Call this function with below code snippet to merge all the indexes into one index. We merged all <code>FAISS</code> index files which are saved in the <code>faiss_files</code> directory into one index.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge_faiss_files(<span class="string">&quot;./faiss_files&quot;</span>, INDEX_NAME)</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/faiss-wix-merging-indexings.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/faiss-wix-merging-indexings.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/faiss-wix-merged-index.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/faiss-wix-merged-index.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Next step, we will build a WiX chatbot which loading this <code>FAISS</code> index and passing the question and retrieving the relevant documents from the index. For the entire code, you can check the github <a href="https://github.com/stonefishy/converstional-rag-chatbot">GitHub repository</a> to see the entire code.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
            <tag> OpenAI </tag>
            
            <tag> RAG </tag>
            
            <tag> Chatbot </tag>
            
            <tag> FAISS </tag>
            
            <tag> Langchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy User Friendly AI Interface Chatbot on Local by Using Ollama + Open-WebUI.</title>
      <link href="/2025/02/10/deploy-user-friendly-ai-interface-on-local-by-using-ollama-open-webui/"/>
      <url>/2025/02/10/deploy-user-friendly-ai-interface-on-local-by-using-ollama-open-webui/</url>
      
        <content type="html"><![CDATA[<p>In Previous blog, we talk about how to running <code>DeepSeek</code> large language model (LLM) on local machine by using Ollama. For installing Ollama, you can check the previous blog. We play it and chat on terminal. In this blog, we will talk about how to deploy user-friendly AI interface chatbot on local machine by using Ollama and Open-WebUI.</p><h2 id="What-is-Open-WebUI"><a href="#What-is-Open-WebUI" class="headerlink" title="What is Open-WebUI?"></a>What is Open-WebUI?</h2><p><code>Open WebUI</code> is an extensible, feature-rich, and user-friendly self-hosted AI platform designed to operate entirely offline. It supports various LLM runners like <code>Ollama</code> and <code>OpenAI-compatible APIs</code>, with built-in inference engine for RAG, making it a powerful AI deployment solution.</p><h2 id="Install-Ollama"><a href="#Install-Ollama" class="headerlink" title="Install Ollama"></a>Install Ollama</h2><p>To install the Ollama, you can download the <code>Ollama</code> from official website and follow the installation guide. Once installed, you can check the ollama version and commands using below commands in your terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ollama --version</span><br><span class="line">ollama --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ollama-version-commands.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ollama-version-commands.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>For downloading the <code>LLM</code> model, using below command <code>ollama pull &lt;model_name&gt;</code>in your terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama pull deepseek-r1:1.5b</span><br></pre></td></tr></table></figure><p>I already downloaded the <code>deepseek</code> and <code>gemma</code> models in my local machine. You can check the downloaded models using <code>ollama ls</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ollama-models-list.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ollama-models-list.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="Set-up-Open-WebUI"><a href="#Set-up-Open-WebUI" class="headerlink" title="Set up Open-WebUI"></a>Set up Open-WebUI</h2><p>After you setup the Ollama, to set up Open-WebUI, there are multiple ways</p><h3 id="Docker-way"><a href="#Docker-way" class="headerlink" title="Docker way"></a>Docker way</h3><p>If you have installed <code>Docker</code> on your local, you can easily launch Open-WebUI using below command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><p>Once it done, access the Open-WebUI by using <code>http://localhost:3000</code> in your browser.</p><h3 id="Python-pip-way"><a href="#Python-pip-way" class="headerlink" title="Python pip way"></a>Python pip way</h3><p>The second way is to install Open-WebUI by using Python pip and launch it locally. It requires <code>Python 3.11</code> to avoid the compatibility issues.</p><p>Check Python version, ensure the version is 3.11 or above.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>Next, install Open-WebUI using pip.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install open-webui</span><br></pre></td></tr></table></figure><p>When you install Open-WebUI by using python pip command, if you local machine  Microsoft Visual C++ compiler version is lower than 14, you may encounter the below error.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Building wheels for collected packages: chroma-hnswlib</span><br><span class="line">  Building wheel for chroma-hnswlib (pyproject.toml) ... error</span><br><span class="line">  error: subprocess-exited-with-error</span><br><span class="line"></span><br><span class="line">  × Building wheel for chroma-hnswlib (pyproject.toml) did not run successfully.</span><br><span class="line">  │ exit code: 1</span><br><span class="line">  ╰─&gt; [5 lines of output]</span><br><span class="line">      running bdist_wheel</span><br><span class="line">      running build</span><br><span class="line">      running build_ext</span><br><span class="line">      building &#x27;hnswlib&#x27; extension</span><br><span class="line">      error: Microsoft Visual C++ 14.0 or greater is required. Get it with &quot;Microsoft C++ Build Tools&quot;: https://visualstudio.microsoft.com/visual-cpp-build-tools/</span><br><span class="line">      [end of output]</span><br><span class="line"></span><br><span class="line">  note: This error originates from a subprocess, and is likely not a problem with pip.</span><br><span class="line">  ERROR: Failed building wheel for chroma-hnswlib</span><br><span class="line">Failed to build chroma-hnswlib</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/open-webui-pip-install-error.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/open-webui-pip-install-error.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div>.<p>To fix this issue, you can install the latest version of C++ compiler and re-install the Open-WebUI. Download the Microsoft C++ Build Tools from the official website <a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">https://visualstudio.microsoft.com/visual-cpp-build-tools/</a>.</p><p>Install the <code>Desktop development with C++</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/open-webui-pip-error-resolved.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/open-webui-pip-error-resolved.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>After the latest C++ compiler installed, re-install <code>Open-WebUI</code> again, once all completed, launch the Open-WebUI using below command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open-webui serve</span><br></pre></td></tr></table></figure><p>This will start the Open WebUI server, which we can access at <a href="http://localhost:8080/">http://localhost:8080</a></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/open-webui-serve.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/open-webui-serve.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>Access the Open-WebUI by using <code>http://localhost:8080</code> in your browser. And create an admin account. Then you can start to use the <code>Open-WebUI</code>.<br>I have already installed some LLM models from <code>Ollama</code>, so we can see there are several models listed in the <code>Open-WebUI</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/open-webui-models.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/open-webui-models.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="Have-Fun-with-Open-WebUI"><a href="#Have-Fun-with-Open-WebUI" class="headerlink" title="Have Fun with Open-WebUI"></a>Have Fun with Open-WebUI</h2><p>Let’s try to use <code>Gemma</code> model and <code>DeepSeek</code> model to chat with Open-WebUI.</p><h3 id="Using-Gemma-model"><a href="#Using-Gemma-model" class="headerlink" title="Using Gemma model"></a>Using Gemma model</h3><p>To use the <code>Gemma</code> model, select the <code>Gemma</code> model from the <code>Models</code> dropdown list and start to chat with the chatbot. Let’s use the <code>gemma:2b</code> model to chat.<br>If the model is not listed, using <code>Ollama</code> to download the model first.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/open-webui-gemma-model.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/open-webui-gemma-model.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h3 id="Using-DeepSeek-model"><a href="#Using-DeepSeek-model" class="headerlink" title="Using DeepSeek model"></a>Using DeepSeek model</h3><p>To use the <code>DeepSeek</code> model, select the <code>DeepSeek</code> model from the <code>Models</code> dropdown list and start to chat with the chatbot. Let’s use the <code>deepseek-r1:1.5b</code> model to chat.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/open-webui-deepseek-model.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/open-webui-deepseek-model.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>We can see the results of the <code>gemma:2b</code> model and the <code>deepseek-r1:1.5b</code> model are different. The <code>gemma:2b</code> model is just decreased in quality, however, the <code>deepseek-r1:1.5b</code> model is more accurate. It takes some time to deep thinking, and answer it carefully.</p><p>In <code>DeepSeek</code> model, we can see the thinking process of the deepseek model. It is a good way to understand how the deepseek thinking.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/open-webui-deepseek-thinking.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/open-webui-deepseek-thinking.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this blog, we have talked about how to deploy user-friendly AI interface chatbot on local machine by using Ollama and Open-WebUI. We have also used the <code>Gemma</code> and <code>DeepSeek</code> models to chat with the chatbot. We can see the results of the <code>gemma:2b</code> model and the <code>deepseek-r1:1.5b</code> model are different. The <code>gemma:2b</code> model is just decreased in quality, however, the <code>deepseek-r1:1.5b</code> model is more accurate. It takes some time to deep thinking, and answer it carefully.</p><p>Hope you like it. have fun to use <code>Open-WebUI</code>.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Chatbot </tag>
            
            <tag> Ollama </tag>
            
            <tag> DeepSeek </tag>
            
            <tag> Gemma </tag>
            
            <tag> Open-WebUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Running DeepSeek-R1 locally for free</title>
      <link href="/2025/02/07/running-deepseek-r1-locally-for-free/"/>
      <url>/2025/02/07/running-deepseek-r1-locally-for-free/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/deepseek-logo.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/deepseek-logo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div><p>The <code>DeepSeek</code> recently is very popular. The application download is on topest of the app store globally. The deepseek has several models, like <code>deepseek-r1</code>, <code>deepseek-coder</code> and <code>deepseek-v3</code> models etc. It’s all open source and free to use.</p><ul><li><code>deepseek-r1</code>: DeepSeek’s first-generation of reasoning models with comparable performance to OpenAI-o1, including six dense models distilled from DeepSeek-R1 based on Llama and Qwen.</li><li><code>deepseek-coder</code>: It is a capable coding model trained on two trillion code and natural language tokens.</li><li><code>deepseek-v3</code>: A strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token.</li></ul><p>Here we will run the <code>deepseek-r1</code> model locally. It’s very easy and setup it quickly. Let’s get started.</p><h2 id="Ollama-download-and-installation"><a href="#Ollama-download-and-installation" class="headerlink" title="Ollama download and installation"></a>Ollama download and installation</h2><p>The first step is to download the <code>Ollama</code> and install it on your local machine. It supports Windows, Linux and MacOS. You can download the latest version from the official website. <a href="https://ollama.com/">https://ollama.com/</a></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ollama.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ollama.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Ollama" style="width:600px;"/></div><span class="image-caption">Ollama</span></div><p>After download and install it, you can check the version or commands from terminal or command-line.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Check the version of Ollama</span></span><br><span class="line">ollama --version</span><br><span class="line"></span><br><span class="line"><span class="comment">## Check the commands of Ollama</span></span><br><span class="line">ollama --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ollama-version-commands.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ollama-version-commands.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Ollama version and commands"/></div><span class="image-caption">Ollama version and commands</span></div><h2 id="Running-the-deepseek-r1-model"><a href="#Running-the-deepseek-r1-model" class="headerlink" title="Running the deepseek-r1 model"></a>Running the deepseek-r1 model</h2><p>Now, we can run the <code>deepseek-r1</code> model using Ollama. We need to download this model by using ollama. The <code>deepseek-r1</code> model contains serveral models, 1.5b, 7b, 8b, 14b, 32b, 70b and even 671b. For general computer performance, suggestion to use 1.5b model. I tried the 8b model on my local. It can run but the response is slowlly and memory is up to 90%. The 1.5b model running smoothly and response is fast. My local machine has 16GB RAM and i7 processor.</p><p>We can use the following command to download the <code>deepseek-r1</code> model.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama pull deepseek-r1:1.5b</span><br></pre></td></tr></table></figure><p>we also can run this model directly, if the model not exist, it will download automatically.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ollama run deepseek-r1:1.5b</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ollama-run-deepseek-r1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ollama-run-deepseek-r1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Ollama run deepseek-r1"/></div><span class="image-caption">Ollama run deepseek-r1</span></div><h2 id="Ask-anything-in-deepseek"><a href="#Ask-anything-in-deepseek" class="headerlink" title="Ask anything in deepseek"></a>Ask anything in deepseek</h2><p>Now, we can ask anything in deepseek. Just type the question and press enter. The model will answer the question. See below screenshot</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ollama-deepseek-answer-1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ollama-deepseek-answer-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="DeepSeek-R1 Answer"/></div><span class="image-caption">DeepSeek-R1 Answer</span></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ollama-deepseek-answer-2.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ollama-deepseek-answer-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="DeepSeek-R1 Answer"/></div><span class="image-caption">DeepSeek-R1 Answer</span></div><p>See, it’s easy to run the <code>deepseek-r1</code> model locally. You can also run other models like <code>deepseek-coder</code> and <code>deepseek-v3</code> models, or <code>llama</code> model. The <code>Ollama</code> models contains many open source models, you can use it for free.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Ollama </tag>
            
            <tag> DeepSeek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A RAG Chatbot base on Azure OpenAI</title>
      <link href="/2025/01/23/rag-chatbot-base-on-azure-openai/"/>
      <url>/2025/01/23/rag-chatbot-base-on-azure-openai/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this article, we will build a <code>RAG (Retrieval-Augmented Generation)</code> chatbot using Azure OpenAI’s GPT-4 language model. We will use <code>Python</code>, <code>LangChain</code> and the <code>Streamlit</code> library to build the chatbot interface. Vector store will use <code>FAISS</code> library to store the text chunks and metadata.</p><h2 id="What-is-RAG"><a href="#What-is-RAG" class="headerlink" title="What is RAG?"></a>What is RAG?</h2><p><code>RAG</code> is a technique that combines retrieval-based methods with generative models to enhance the quality and relevance of the information produced by AI systems. Here’s a breakdown of the two components:</p><ol><li><p><strong>Retrieval</strong>: The model first retrieves relevant documents, text, or data from a knowledge base, database, or external source using information retrieval techniques. This allows the model to access specialized or domain-specific knowledge, which it might not have inherently learned during training.</p></li><li><p><strong>Generation</strong>: After retrieving relevant information, the model then uses a generative language model (like GPT-3 or GPT-4) to create a response that is coherent, contextually appropriate, and informed by the retrieved content. This allows the AI to answer questions, generate text, or assist in decision-making with enhanced accuracy and knowledge.</p></li></ol><h2 id="Technical-Stack"><a href="#Technical-Stack" class="headerlink" title="Technical Stack"></a>Technical Stack</h2><p>To build the chatbot, we will use the following techiniques:</p><ul><li><strong>Azure OpenAI GPT-4</strong>: We will use the GPT-4 language model from Azure OpenAI to generate responses. GPT-4 is a transformer-based language model that is capable of generating coherent and diverse text.</li><li><strong>LangChain</strong>: LangChain is a Python library that allows us to use the GPT-4 model from Azure OpenAI in our chatbot. LangChain provides a simple interface for building chatbots using GPT-4.</li><li><strong>Streamlit</strong>: We will use Streamlit to build the chatbot interface. Streamlit is a framework for building web applications in Python. It allows us to create a user-friendly interface for our chatbot.</li><li><strong>FAISS</strong>: FAISS (Facebook AI Similarity Search) is an open-source library developed by Facebook AI Research. It’s designed for efficient similarity search and clustering of high-dimensional data, such as vectors. The primary use case for FAISS is in applications where you need to search for the most similar items to a given query item in large datasets of vectors</li></ul><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before we start, make sure you have the following prerequisites:</p><ul><li>An Azure account</li><li>Python 3.6 or higher</li><li>An IDE or text editor</li><li>A knowledge base or dataset of relevant information</li></ul><h2 id="Setting-up-the-Environment"><a href="#Setting-up-the-Environment" class="headerlink" title="Setting up the Environment"></a>Setting up the Environment</h2><p>To set up the environment, we will need to install the following important libraries:</p><ul><li>LangChain</li><li>Streamlit</li><li>Azure OpenAI GPT-4</li></ul><p>And also include the <code>FAISS</code> and <code>PyPDF2</code> libraries. The <code>FAISS</code> library is used for efficient similarity search, and the <code>PyPDF2</code> library is used to extract text from PDF files.</p><p>Below is the entire python libraries:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">streamlit==1.40.0</span><br><span class="line">PyPDF2==3.0.1</span><br><span class="line">faiss-cpu==1.9.0</span><br><span class="line">openai==1.59.6</span><br><span class="line">tiktoken==0.8.0</span><br><span class="line">langchain==0.3.14</span><br><span class="line">langchain-community==0.3.14</span><br><span class="line">langchain-core==0.3.29</span><br><span class="line">langchain-openai==0.3.0</span><br><span class="line">langchain-text-splitters==0.3.5</span><br></pre></td></tr></table></figure><h2 id="Process-PDFs"><a href="#Process-PDFs" class="headerlink" title="Process PDFs"></a>Process PDFs</h2><p>Here we will read the PDF files and extract the text from them. We will use the <code>PyPDF2</code> library to extract the text from the PDF files. And then save it into local vector store which can be used for similarity search by FAISS. The entire code is below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfReader</span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> AzureOpenAIEmbeddings</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line">azure_endpoint = os.getenv(<span class="string">&quot;AZURE_OPENAI_ENDPOINT&quot;</span>)</span><br><span class="line">api_version = os.getenv(<span class="string">&quot;AZURE_OPENAI_API_VERSION&quot;</span>)</span><br><span class="line">api_key = os.getenv(<span class="string">&quot;OPENAI_API_KEY&quot;</span>)</span><br><span class="line">embedding_deployment = os.getenv(<span class="string">&quot;AZURE_OPENAI_EMBEDDING_DEPLOYMENT&quot;</span>)</span><br><span class="line">chat_deployment = os.getenv(<span class="string">&quot;AZURE_OPENAI_CHAT_DEPLOYMENT&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">embeddings</span>():</span><br><span class="line">    <span class="comment"># generating embedding</span></span><br><span class="line">    <span class="keyword">return</span> AzureOpenAIEmbeddings(</span><br><span class="line">        azure_deployment=embedding_deployment,</span><br><span class="line">        api_version=api_version,</span><br><span class="line">        api_key=api_key,</span><br><span class="line">        azure_endpoint=azure_endpoint)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_files</span>(<span class="params">directory</span>):</span><br><span class="line">    path = Path(os.path.join(os.getcwd(), directory))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> path.exists():</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;Directory <span class="subst">&#123;path.absolute()&#125;</span> does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">str</span>(file) <span class="keyword">for</span> file <span class="keyword">in</span> path.rglob(<span class="string">&quot;*&quot;</span>) <span class="keyword">if</span> file.is_file()]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_pdfs</span>(<span class="params">pdfs_directory, vector_store_folder_path, vector_store_index_name</span>):</span><br><span class="line">    pdf_files = get_all_files(pdfs_directory)</span><br><span class="line">    text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> pdf_file <span class="keyword">in</span> pdf_files:</span><br><span class="line">        <span class="comment"># Read pdf file</span></span><br><span class="line">        pdf_reader = PdfReader(pdf_file)</span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> pdf_reader.pages:</span><br><span class="line">            text += page.extract_text()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Break it into chunks</span></span><br><span class="line">    text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">        separators=<span class="string">&quot;\n&quot;</span>,</span><br><span class="line">        chunk_size=<span class="number">1000</span>,</span><br><span class="line">        chunk_overlap=<span class="number">150</span>,</span><br><span class="line">        length_function=<span class="built_in">len</span></span><br><span class="line">    )</span><br><span class="line">    chunks = text_splitter.split_text(text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Creating vector store - FAISS</span></span><br><span class="line">    vector_store = FAISS.from_texts(chunks, embeddings())</span><br><span class="line">    vector_store.save_local(vector_store_folder_path, vector_store_index_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Processed PDF documents to vector store path `<span class="subst">&#123;vector_store_folder_path&#125;</span>`&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    process_pdfs(config.pdfs_directory, config.vector_store_folder_path, config.vector_store_index_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In above code, we are reading the PDF files and extracting the text from them. We are using the <code>RecursiveCharacterTextSplitter</code> to break the text into chunks of 1000 characters with 150 characters overlap. And then using the <code>FAISS</code> library to create a vector store of the text chunks. The vector store is saved in the local file system. The vector store files contains two files (<code>*.faiss</code> and <code>*.pkl</code>) which can be used for similarity search.</p><p>The <code>*.faiss</code> file contains the vector representation of the text chunks. The <code>*.pkl</code> file contains the metadata of the text chunks.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/rag-chatbot-vector-store.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/rag-chatbot-vector-store.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="RAG Chatbot Vector Store"/></div><span class="image-caption">RAG Chatbot Vector Store</span></div><p>You may noticing that we are using the <code>dotenv</code> library to load the environment variables. You can create a <code>.env</code> file in the root directory of your project and add the following variables:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AZURE_OPENAI_ENDPOINT=&lt;your_endpoint_url&gt;</span><br><span class="line">AZURE_OPENAI_API_VERSION=&lt;your_api_version&gt;</span><br><span class="line">OPENAI_API_KEY=&lt;your_api_key?</span><br><span class="line">AZURE_OPENAI_CHAT_DEPLOYMENT=gpt-4o # we are using gpt-4o model, you can use any other model which you deployed in your endpoint.</span><br><span class="line">AZURE_OPENAI_EMBEDDING_DEPLOYMENT=text-embedding-ada-002 # we are using text-embedding-ada-002 model.</span><br></pre></td></tr></table></figure><h2 id="Building-the-Chatbot"><a href="#Building-the-Chatbot" class="headerlink" title="Building the Chatbot"></a>Building the Chatbot</h2><p>After we have processed the PDF files and created the vector store, we can now build the chatbot using LangChain.</p><p>First, we will create a <code>LangChain</code> instance and load the vector store. Using <code>FAISS.load_local</code> method, we can load the vector store from the local file system with the same embeddings model.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">embeddings</span>():</span><br><span class="line">    <span class="comment"># generating embedding</span></span><br><span class="line">    <span class="keyword">return</span> AzureOpenAIEmbeddings(</span><br><span class="line">        azure_deployment=embedding_deployment,</span><br><span class="line">        api_version=api_version,</span><br><span class="line">        api_key=api_key,</span><br><span class="line">        azure_endpoint=azure_endpoint)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_vector_store</span>(<span class="params">vector_store_folder_path, vectore_store_name</span>):</span><br><span class="line">    vector_store = FAISS.load_local(</span><br><span class="line">        folder_path=vector_store_folder_path, </span><br><span class="line">        embeddings=embeddings(), </span><br><span class="line">        index_name=vectore_store_name,</span><br><span class="line">        allow_dangerous_deserialization=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> vector_store </span><br></pre></td></tr></table></figure><p>Then, we will create a <code>AzureChatOpenAI</code> instance and load the chatbot model. We will use the <code>AzureChatOpenAI</code> class to interact with the GPT-4 model from Azure OpenAI. Using <code>load_qa_chain</code> method which is provided by <code>LangChain</code>, we can load the chatbot model from the Azure OpenAI.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generateChain</span>():</span><br><span class="line">    llm =  AzureChatOpenAI(</span><br><span class="line">        azure_endpoint=azure_endpoint,</span><br><span class="line">        api_key=api_key,</span><br><span class="line">        api_version=api_version,</span><br><span class="line">        azure_deployment=chat_deployment,</span><br><span class="line">        temperature=<span class="number">0</span>,</span><br><span class="line">        max_tokens=<span class="number">1000</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># chain -&gt; take the question, get relevant document, pass it to the LLM, generate the output</span></span><br><span class="line">    chain = load_qa_chain(llm, chain_type=<span class="string">&quot;stuff&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> chain</span><br></pre></td></tr></table></figure><p>After the chain and the vector store are loaded, we can use FAISS vector store to similarity search the user input and retrieve the most relevant document. Passing the retrieved document to the LangChain chain which loads the AzureChatOpenAI to generate the response. Below is core code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector_store = load_vector_store(config.vector_store_folder_path, config.vector_store_index_name)</span><br><span class="line">chain = generateChain()</span><br><span class="line">match_documents = vector_store.similarity_search(prompt)</span><br><span class="line">response = chain.run(input_documents = match_documents, question = prompt)</span><br></pre></td></tr></table></figure><p>The <code>chain.run</code> method takes the input documents and the question as input and returns the generated response. The <code>match_documents</code> variable contains the most relevant documents retrieved from the vector store. The <code>response</code> variable contains the generated response from the chatbot.</p><p>Finally, we will create a Streamlit interface to interact with the chatbot. We will use the <code>streamlit</code> library to create a user-friendly interface for our chatbot. For the <code>streamlit</code> library usage, you can refer to the official documentation. <a href="https://docs.streamlit.io/">https://docs.streamlit.io/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    st.set_page_config(</span><br><span class="line">        page_title=<span class="string">&quot;JBL Products Chatbot&quot;</span>,</span><br><span class="line">        page_icon=<span class="string">&quot;🧊&quot;</span>,</span><br><span class="line">        layout=<span class="string">&quot;centered&quot;</span>,</span><br><span class="line">        initial_sidebar_state=<span class="string">&quot;expanded&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    st.header(<span class="string">&quot;JBL Products Chatbot&quot;</span>)</span><br><span class="line">    vector_store = load_vector_store(config.vector_store_folder_path, config.vector_store_index_name)</span><br><span class="line">    chain = generateChain()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> st.chat_message(<span class="string">&quot;assistant&quot;</span>):</span><br><span class="line">        st.markdown(<span class="string">&quot;Ask me anything about JBL devices (JBL Pulse 5, JBL Clip 5, JBL Bar 500)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">        st.session_state.messages = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> st.session_state.messages:</span><br><span class="line">        <span class="keyword">with</span> st.chat_message(message[<span class="string">&quot;role&quot;</span>]):</span><br><span class="line">            st.markdown(message[<span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> prompt := st.chat_input(<span class="string">&quot;Ask me something&quot;</span>):</span><br><span class="line">        st.chat_message(<span class="string">&quot;user&quot;</span>).markdown(prompt)</span><br><span class="line">        st.session_state.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;)</span><br><span class="line"></span><br><span class="line">        response = <span class="string">&quot;I am thinking...&quot;</span></span><br><span class="line">        <span class="keyword">with</span> st.spinner(response):</span><br><span class="line">            match_documents = vector_store.similarity_search(prompt)</span><br><span class="line">            response = chain.run(input_documents = match_documents, question = prompt)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> st.chat_message(<span class="string">&quot;assistant&quot;</span>):</span><br><span class="line">            st.write_stream(generate_stream(response))</span><br><span class="line">        st.session_state.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: response&#125;)</span><br></pre></td></tr></table></figure><p>In above code, we are using the <code>st.chat_message</code> method to create a chat message with a specific role, using the <code>st.chat_input</code> method to get the user input. And using the <code>st.spinner</code> method to show a loading spinner while the chatbot is generating the response. Finally using the <code>st.write_stream</code> method to write the response to the chat message.</p><p>For the stream response, actually we mock it by using the <code>generate_stream</code> method. This method is used to generate the stream response. We can use the <code>st.write_stream</code> method to write the stream response to the chat message. This will let the chatbot to print word one by one in the chat message.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_stream</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="comment"># generate the stream of messages</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> response.split(<span class="string">&quot; &quot;</span>):</span><br><span class="line">        <span class="keyword">yield</span> word + <span class="string">&quot; &quot;</span></span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br></pre></td></tr></table></figure><p>Below is chatbot conversational interface:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/rag-chatbot-streamlit-interface.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/rag-chatbot-streamlit-interface.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="RAG Chatbot Streamlit Interface"/></div><span class="image-caption">RAG Chatbot Streamlit Interface</span></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article, we have built a <code>RAG (Retrieval-Augmented Generation)</code> chatbot using Azure OpenAI’s GPT-4 language model. We have used Python, LangChain and the Streamlit library to build the chatbot interface. We have also processed the PDF files and created the vector store using FAISS library. The pdf files is crawled from the website <a href="https://www.manua.ls/">https://www.manua.ls</a></p><p>For the entire code, you can refer to the Github repository: <a href="https://github.com/stonefishy/rag-chatbot">https://github.com/stonefishy/rag-chatbot</a>. Please don’t forget to star the repository if you find it useful. Thank you for reading.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
            <tag> OpenAI </tag>
            
            <tag> RAG </tag>
            
            <tag> Azure </tag>
            
            <tag> LangChain </tag>
            
            <tag> Chatbot </tag>
            
            <tag> Streamlit </tag>
            
            <tag> FAISS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Paho MQTT Client Lib in Python3</title>
      <link href="/2025/01/06/how-to-use-paho-mqtt-client-lib-in-python3/"/>
      <url>/2025/01/06/how-to-use-paho-mqtt-client-lib-in-python3/</url>
      
        <content type="html"><![CDATA[<p>The <code>Paho MQTT client</code> library for Python is a popular choice for building MQTT applications in Python. Here’s how to use it in Python3. <code>Paho MQTT Client</code> provides a simple and easy-to-use API for publishing and subscribing to MQTT topics. It supports MQTT 5.0, 3.1.1, and 3.1 protocols.</p><h2 id="Install-Paho-MQTT-Client"><a href="#Install-Paho-MQTT-Client" class="headerlink" title="Install Paho MQTT Client"></a>Install Paho MQTT Client</h2><p>To install <code>Paho MQTT Client</code> library, you can use the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paho-mqtt</span><br></pre></td></tr></table></figure><h2 id="Prepare-the-MQTT-Broker"><a href="#Prepare-the-MQTT-Broker" class="headerlink" title="Prepare the MQTT Broker"></a>Prepare the MQTT Broker</h2><p>Before using the <code>Paho MQTT Client</code> library, we need to prepare the MQTT broker. We can use any MQTT broker that supports the MQTT 5.0, 3.1.1, or 3.1 protocols. Here we use the public free MQTT broker: <code>EMQX</code>, below is broker information.</p><blockquote><p>Server：broker.emqx.io<br>TCP Port：1883<br>WebSocket Port：8083<br>SSL&#x2F;TLS Port：8883<br>Secure WebSocket Port：8084</p></blockquote><h2 id="Import-Paho-MQTT-Client"><a href="#Import-Paho-MQTT-Client" class="headerlink" title="Import Paho MQTT Client"></a>Import Paho MQTT Client</h2><p>To use the <code>Paho MQTT Client</code> library in the Python code, need to import it first.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paho.mqtt <span class="keyword">import</span> client <span class="keyword">as</span> mqtt_client</span><br></pre></td></tr></table></figure><h2 id="Create-a-MQTT-Connection"><a href="#Create-a-MQTT-Connection" class="headerlink" title="Create a MQTT Connection"></a>Create a MQTT Connection</h2><p>Before create a MQTT connection, specify the MQTT client id, MQTT broker address, port and mesage topic. We can use the python <code>random.randint()</code> function to generate a random client id.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">broker = <span class="string">&quot;broker.emqx.io&quot;</span></span><br><span class="line">port = <span class="number">1883</span></span><br><span class="line">topic = <span class="string">&quot;paho/mqtt/test&quot;</span></span><br><span class="line">client_id = <span class="string">f&quot;client_<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">1000</span>)&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>Next, we need to write the <code>on_connect</code> callback function in order to connect to the proxy. This function is called after the client successfully connects, we can use the <code>rc</code> parameter to check the connection status. Typically, we also create a client object that is also connected to “broker.emqx.io”.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">connect_mqtt</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_connect</span>(<span class="params">client, userdata, flags, reason_code, properties</span>):</span><br><span class="line">        <span class="keyword">if</span> reason_code == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Connected to MQTT Broker!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to connect, return code %d\n&quot;</span>, reason_code)</span><br><span class="line">    client = mqtt_client.Client(client_id=client_id, callback_api_version=mqtt_client.CallbackAPIVersion.VERSION2)</span><br><span class="line"></span><br><span class="line">    client.on_connect = on_connect</span><br><span class="line">    client.connect(broker, port)</span><br><span class="line">    <span class="keyword">return</span> client</span><br></pre></td></tr></table></figure><p>When execute the <code>connect_mqtt()</code> function, it will return a <code>Client</code> instance that is connected to the MQTT broker, and printed the connection status.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/mqtt/mqtt-connected.png" class="lazyload placeholder" data-srcset="/assets/images/mqtt/mqtt-connected.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MQTT Connected to Broker"/></div><span class="image-caption">MQTT Connected to Broker</span></div><h2 id="Publish-Messages-to-MQTT-Topics"><a href="#Publish-Messages-to-MQTT-Topics" class="headerlink" title="Publish Messages to MQTT Topics"></a>Publish Messages to MQTT Topics</h2><p>publish messages to MQTT topics, let’s create a <code>publish()</code> function that will publish a message to the specified topic every second. Using <code>client.publish()</code> method, we can publish a message to the specified topic.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">publish</span>(<span class="params">client</span>):</span><br><span class="line">    msg_count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        msg = <span class="string">f&quot;messages: test <span class="subst">&#123;msg_count&#125;</span>&quot;</span></span><br><span class="line">        result = client.publish(topic, msg)</span><br><span class="line">        status = result[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Send `<span class="subst">&#123;msg&#125;</span>` to topic `<span class="subst">&#123;topic&#125;</span>`&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Failed to send message to topic <span class="subst">&#123;topic&#125;</span>&quot;</span>)</span><br><span class="line">        msg_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> msg_count &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/mqtt/mqtt-publish.png" class="lazyload placeholder" data-srcset="/assets/images/mqtt/mqtt-publish.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MQTT Publish Message"/></div><span class="image-caption">MQTT Publish Message</span></div><h2 id="Subscribe-to-MQTT-Topics"><a href="#Subscribe-to-MQTT-Topics" class="headerlink" title="Subscribe to MQTT Topics"></a>Subscribe to MQTT Topics</h2><p>To subscribe to MQTT topics, we can call the <code>subscribe()</code> method of the <code>Client</code> instance. We can define a callback function that will be called when a message is received on a subscribed topic. The callback function <code>on_message()</code> will be called when a message is received on the subscribed topic.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subscribe</span>(<span class="params">client: mqtt_client</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">client, userdata, msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received `<span class="subst">&#123;msg.payload.decode()&#125;</span>` which sent by `<span class="subst">&#123;client._client_id&#125;</span>` from `<span class="subst">&#123;msg.topic&#125;</span>` topic&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client.subscribe(topic)</span><br><span class="line">    client.on_message = on_message</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/mqtt/mqtt-subscribe.png" class="lazyload placeholder" data-srcset="/assets/images/mqtt/mqtt-subscribe.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MQTT Subscribe Message"/></div><span class="image-caption">MQTT Subscribe Message</span></div><h2 id="Run-the-MQTT-Client"><a href="#Run-the-MQTT-Client" class="headerlink" title="Run the MQTT Client"></a>Run the MQTT Client</h2><p>To run the MQTT client, we can use <code>loop_start()</code> method to run the client in a separate thread, <code>loop_stop()</code> method to stop the client loop. We also can call the <code>loop_forever()</code> method of the <code>Client</code> instance. This method will block the current thread and run the client indefinitely. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client.loop_start() <span class="comment"># start the client loop</span></span><br><span class="line">client.loop_stop() <span class="comment"># stop the client loop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">client.loop_forever() <span class="comment"># block the current thread and run the client indefinitely</span></span><br></pre></td></tr></table></figure><h2 id="Full-Code"><a href="#Full-Code" class="headerlink" title="Full Code"></a>Full Code</h2><p>Here’s the full code that uses the <code>Paho MQTT Client</code> library to connect to the MQTT broker, publish messages to a topic, and subscribe to a topic.</p><h3 id="client1-py"><a href="#client1-py" class="headerlink" title="client1.py"></a>client1.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> paho.mqtt <span class="keyword">import</span> client <span class="keyword">as</span> mqtt_client</span><br><span class="line"></span><br><span class="line">broker = <span class="string">&quot;broker.emqx.io&quot;</span></span><br><span class="line">port = <span class="number">1883</span></span><br><span class="line">topic = <span class="string">&quot;paho/mqtt/test&quot;</span></span><br><span class="line">client_id = <span class="string">f&quot;client_<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">1000</span>)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect_mqtt</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_connect</span>(<span class="params">client, userdata, flags, reason_code, properties</span>):</span><br><span class="line">        <span class="keyword">if</span> reason_code == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Connected to MQTT Broker!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to connect, return code %d\n&quot;</span>, reason_code)</span><br><span class="line">    client = mqtt_client.Client(client_id=client_id, callback_api_version=mqtt_client.CallbackAPIVersion.VERSION2)</span><br><span class="line"></span><br><span class="line">    client.on_connect = on_connect</span><br><span class="line">    client.connect(broker, port)</span><br><span class="line">    <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">publish</span>(<span class="params">client</span>):</span><br><span class="line">    msg_count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        msg = <span class="string">f&quot;messages: test <span class="subst">&#123;msg_count&#125;</span>&quot;</span></span><br><span class="line">        result = client.publish(topic, msg)</span><br><span class="line">        status = result[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> status == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Send `<span class="subst">&#123;msg&#125;</span>` to topic `<span class="subst">&#123;topic&#125;</span>`&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Failed to send message to topic <span class="subst">&#123;topic&#125;</span>&quot;</span>)</span><br><span class="line">        msg_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> msg_count &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    client = connect_mqtt()</span><br><span class="line">    client.loop_start()</span><br><span class="line">    publish(client)</span><br><span class="line">    client.loop_stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="client2-py"><a href="#client2-py" class="headerlink" title="client2.py"></a>client2.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> paho.mqtt <span class="keyword">import</span> client <span class="keyword">as</span> mqtt_client</span><br><span class="line"></span><br><span class="line">broker = <span class="string">&quot;broker.emqx.io&quot;</span></span><br><span class="line">port = <span class="number">1883</span></span><br><span class="line">topic = <span class="string">&quot;paho/mqtt/test&quot;</span></span><br><span class="line">client_id = <span class="string">f&quot;client_<span class="subst">&#123;random.randint(<span class="number">0</span>, <span class="number">1000</span>)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect_mqtt</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_connect</span>(<span class="params">client, userdata, flags, reason_code, properties</span>):</span><br><span class="line">        <span class="keyword">if</span> reason_code == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Connected to MQTT Broker!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to connect, return code %d\n&quot;</span>, reason_code)</span><br><span class="line">    client = mqtt_client.Client(client_id=client_id, callback_api_version=mqtt_client.CallbackAPIVersion.VERSION2)</span><br><span class="line"></span><br><span class="line">    client.on_connect = on_connect</span><br><span class="line">    client.connect(broker, port)</span><br><span class="line">    <span class="keyword">return</span> client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subscribe</span>(<span class="params">client: mqtt_client</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">client, userdata, msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received `<span class="subst">&#123;msg.payload.decode()&#125;</span>` which sent by `<span class="subst">&#123;client._client_id&#125;</span>` from `<span class="subst">&#123;msg.topic&#125;</span>` topic&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client.subscribe(topic)</span><br><span class="line">    client.on_message = on_message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    client = connect_mqtt()</span><br><span class="line">    subscribe(client)</span><br><span class="line">    client.loop_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>That’s it! You can now use the <code>Paho MQTT Client</code> library to build MQTT applications in Python3.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MQTT </tag>
            
            <tag> IoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Ultimate MQTT Client Tool - MQTTX</title>
      <link href="/2024/12/31/the-ultimate-mqtt-client-tool-mqttx/"/>
      <url>/2024/12/31/the-ultimate-mqtt-client-tool-mqttx/</url>
      
        <content type="html"><![CDATA[<p>In the world of <code>IoT (Internet of Things)</code>, <code>MQTT (Message Queuing Telemetry Transport)</code> is a popular lightweight messaging protocol that ensures efficient communication between devices, servers, and clients. MQTT is favored for its low-bandwidth requirements and its ability to work in low network environments. However, testing and debugging MQTT-based applications can be challenging without the right tools.</p><p>Today we’re talking about one such tool called <code>MQTTX</code>. MQTTX is a cross platform, open-source MQTT client tool that provides a user-friendly interface for testing and debugging MQTT-based applications. It supports multiple MQTT brokers, including EMQX, Mosquitto, HiveMQ, and others, and provides a range of features such as message history, message filtering, and more. It is available for multiple platforms, including <code>Windows</code>, <code>macOS</code>, and <code>Linux</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-tool.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-tool.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MQTTX tool" style="width:800px;"/></div><span class="image-caption">MQTTX tool</span></div><p>MQTTX supports all versions of the MQTT protocol, from MQTT 3.1.1 to MQTT 5.0, which makes it suitable for a wide range of use cases, from simple applications to advanced IoT systems.</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Let’s using MQTTX to test and debug an MQTT-based application. We’ll use the <code>EMQX</code> MQTT broker for this example. And here we using Web version of MQTTX. The web client is <a href="https://mqttx.app/web-client">https://mqttx.app/web-client</a>.</p><p>The public <code>EMQX</code> server information is as follows:</p><blockquote><p><strong>Server</strong>: broker.emqx.io</p><p><strong>TCP Port</strong>: 1883</p><p><strong>WebSocket Port</strong>: 8083</p><p><strong>SSL&#x2F;TLS Port</strong>: 8883</p><p><strong>Secure WebSocket Port</strong>: 8084</p></blockquote><h3 id="Create-a-New-Connection"><a href="#Create-a-New-Connection" class="headerlink" title="Create a New Connection"></a>Create a New Connection</h3><p>Open web client of MQTTX and click on the <code>+</code> button on the top-left corner to create a new connection.  Naming the connection as ‘cloudserver’, and keep to using <code>EMQX</code> as the broker.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-create-connection.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-create-connection.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Create a new connection" style="width:800px;"/></div><span class="image-caption">Create a new connection</span></div><h3 id="Subscribe-to-a-Topic"><a href="#Subscribe-to-a-Topic" class="headerlink" title="Subscribe to a Topic"></a>Subscribe to a Topic</h3><p>Once the connection is established, we can subscribe to a topic by clicking on the <code>New Subscription</code> button. Let’s subscribe to the topic <code>test/temperature</code>. </p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-subscribe-topic.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-subscribe-topic.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Create a subscription to a topic" style="width:800px;"/></div><span class="image-caption">Create a subscription to a topic</span></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-subscribe-topic2.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-subscribe-topic2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Subscribe to a topic" style="width:800px;"/></div><span class="image-caption">Subscribe to a topic</span></div><h3 id="Create-two-new-clients"><a href="#Create-two-new-clients" class="headerlink" title="Create two new clients"></a>Create two new clients</h3><p>Now, let’s create two new clients connection, naming as <code>sensor1</code> and <code>sensor2</code>. Both clients will subscribe to the same topic <code>test/resp</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-create-clients.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-create-clients.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Create new clients" style="width:800px;"/></div><span class="image-caption">Create new clients</span></div><h3 id="Publish-a-Message"><a href="#Publish-a-Message" class="headerlink" title="Publish a Message"></a>Publish a Message</h3><p>Let’s publish a message which using JSON format from <code>sensor1</code> to the topic <code>test/temperature</code>. And we can see the message is received by <code>sensor1</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Topic: </span><br><span class="line">test/temperature</span><br><span class="line"></span><br><span class="line">Message:</span><br><span class="line">&#123;&quot;id&quot;: &quot;sensor1&quot;, &quot;value&quot;: &quot;2&quot;&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-publish-message.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-publish-message.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Publish a message" style="width:800px;"/></div><span class="image-caption">Publish a message</span></div><p>We can see the ‘cloudserver’ client which subscribed the topic <code>test/temperature</code> received the message.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-message-received.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-message-received.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Message received" style="width:800px;"/></div><span class="image-caption">Message received</span></div><p>In ‘cloudserver’ client, we also can send the message to the topic <code>test/resp</code>. Then both <code>sensor1</code> and <code>sensor2</code> will receive the message.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Topic:</span><br><span class="line">test/resp</span><br><span class="line"></span><br><span class="line">Message:</span><br><span class="line">&#123;&quot;id&quot;: &quot;cloudserver&quot;, &quot;value&quot;: &quot;100&quot;&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-publish-message2.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-publish-message2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Publish a message to a topic" style="width:800px;"/></div><span class="image-caption">Publish a message to a topic</span></div><h3 id="Topic-with-Wildcard"><a href="#Topic-with-Wildcard" class="headerlink" title="Topic with Wildcard"></a>Topic with Wildcard</h3><p>The MQTT protocol forwards messages based on the topic. Topics are hierarchical by <code>/</code>, similar to URL paths, for example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chat/room/1</span><br><span class="line"></span><br><span class="line">sensor/10/temperature</span><br><span class="line"></span><br><span class="line">sensor/+/temperature</span><br></pre></td></tr></table></figure><p>MQTT topics support two wildcards: <code>+</code> and <code>#</code>.</p><p><strong>+</strong>: Represents a single-layer wildcard, such as A&#x2F;+ matching A&#x2F;X or A&#x2F;Y.<br><strong>#</strong>: Represents a multi-layered wildcard, e.g. A&#x2F;# matches A&#x2F;X, A&#x2F;B&#x2F;C&#x2F;D.</p><blockquote><p>Note: Wildcard topics can only be used for subscriptions, not for publishing.</p></blockquote><p>Let’s update the subscription of <code>cloudserver</code> client to subscribe to the topic <code>test/+/temperature</code>. This will match all topics that start with <code>test/</code> and end with <code>temperature</code>. And using <code>sensor1</code> client to publish a message to the topic <code>test/1/temperature</code>, <code>sensor2</code> client to publish a message to the topic <code>test/2/temperature</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-subscribe-topic3.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-subscribe-topic3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Subscribe to a topic with wildcard" style="width:800px;"/></div><span class="image-caption">Subscribe to a topic with wildcard</span></div><p>As you can see the <code>cloudserver</code> client received both messages.</p><p>The MQTTX tool provides QoS, message retained and more features for testing and debugging MQTT-based applications. You can test and debug your MQTT-based applications using MQTTX.</p><h2 id="Client-Version"><a href="#Client-Version" class="headerlink" title="Client Version"></a>Client Version</h2><p>The MQTTX tool client version includes more features such as topic tree visualization.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/mqttx-topic-tree.png" class="lazyload placeholder" data-srcset="/assets/images/tools/mqttx-topic-tree.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Topic tree visualization" style="width:800px;"/></div><span class="image-caption">Topic tree visualization</span></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>MQTTX is a powerful and user-friendly MQTT client tool that provides a range of features for testing and debugging MQTT-based applications. It supports multiple MQTT brokers, including EMQX, Mosquitto, HiveMQ, and others, and provides a cross-platform client for Windows, macOS, and Linux.   </p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQTT </tag>
            
            <tag> IoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈物联网IoT中常见的消息传输协议MQTT</title>
      <link href="/2024/12/30/what-is-mqtt-and-how-it-works/"/>
      <url>/2024/12/30/what-is-mqtt-and-how-it-works/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是MQTT？"><a href="#什么是MQTT？" class="headerlink" title="什么是MQTT？"></a>什么是MQTT？</h2><p><code>MQTT （Message Queuing Telemetry Transport, 消息队列遥测传输协议）</code>是一种基于<code>发布/订阅（Publish/Subscribe）</code>模式的轻量级消息传输协议，最初由IBM在1999年开发，主要用于<code>低带宽</code>、<code>不稳定网络环境</code>下的设备通信。MQTT协议设计简单，占用资源少，适合在资源受限的嵌入式设备上运行。</p><p>MQTT的核心思想是将消息的发送者（发布者）和接收者（订阅者）解耦，通过一个中间代理（Broker）来传递消息。发布者将消息发送到特定的主题（Topic），订阅者则订阅感兴趣的主题，从而接收相关消息。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/mqtt/mqtt-diagram.png" class="lazyload placeholder" data-srcset="/assets/images/mqtt/mqtt-diagram.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MQTT (Message Queuing Telemetry Transport)"/></div><span class="image-caption">MQTT (Message Queuing Telemetry Transport)</span></div><h2 id="MQTT的应用场景"><a href="#MQTT的应用场景" class="headerlink" title="MQTT的应用场景"></a>MQTT的应用场景</h2><p><code>MQTT</code>广泛应用于IoT(Internet of Things, 物联网)领域，主要用于物联网、移动互联网、智能家居、工业自动化等领域。以下是一些典型的应用场景：</p><ol><li><p>物联网（IoT）<br>在物联网中，设备通常分布在不同的地理位置，且网络条件可能不稳定。MQTT的低带宽消耗和可靠性使其成为连接这些设备的理想选择。例如，传感器可以通过MQTT将数据发送到云端，供其他设备或应用程序使用。</p></li><li><p>智能家居<br>在智能家居系统中，各种设备（如灯光、温控器、安防系统等）需要相互通信。MQTT可以帮助这些设备高效地交换信息，实现自动化控制。</p></li><li><p>工业自动化<br>在工业自动化领域，MQTT可以用于监控和控制生产线上的设备。通过MQTT，工厂可以实时获取设备状态，进行远程控制和故障诊断。</p></li><li><p>移动应用<br>在移动应用中，MQTT可以用于推送通知、实时消息传递等场景。由于MQTT协议轻量且高效，非常适合在移动设备上使用。</p></li></ol><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/mqtt/mqtt-example.png" class="lazyload placeholder" data-srcset="/assets/images/mqtt/mqtt-example.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MQTT Example"/></div><span class="image-caption">MQTT Example</span></div><h2 id="MQTT的工作原理"><a href="#MQTT的工作原理" class="headerlink" title="MQTT的工作原理"></a>MQTT的工作原理</h2><p>MQTT协议基于发布&#x2F;订阅模式，其核心组件包括以下三个：</p><p><strong>发布者（Publisher）</strong>：负责将消息发送到特定的主题Topic。<br><strong>订阅者（Subscriber）</strong>：订阅感兴趣的主题，接收相关消息。<br><strong>代理（Broker）</strong>：负责接收发布者的消息，并将其转发给订阅者。</p><h4 id="主题（Topic）"><a href="#主题（Topic）" class="headerlink" title="主题（Topic）"></a>主题（Topic）</h4><p>主题是MQTT中消息的分类标识符，采用<code>分层结构</code>。例如，home&#x2F;livingroom&#x2F;temperature 表示“客厅温度”主题。发布者将消息发送到特定主题，订阅者则通过订阅主题来接收消息。</p><h4 id="服务质量（QoS）"><a href="#服务质量（QoS）" class="headerlink" title="服务质量（QoS）"></a>服务质量（QoS）</h4><p>MQTT支持三种服务质量级别，用于控制消息传递的可靠性：</p><p><strong>QoS 0</strong>：最多一次传递。消息可能会丢失，但不会重复。<br><strong>QoS 1</strong>：至少一次传递。消息不会丢失，但可能会重复。<br><strong>QoS 2</strong>：恰好一次传递。消息既不会丢失，也不会重复。</p><h4 id="持久会话（Persistent-Session）"><a href="#持久会话（Persistent-Session）" class="headerlink" title="持久会话（Persistent Session）"></a>持久会话（Persistent Session）</h4><p>MQTT支持持久会话，允许客户端在断开连接后重新连接时，继续接收未处理的消息。这对于不稳定的网络环境非常有用。</p><h2 id="MQTT的工作流程"><a href="#MQTT的工作流程" class="headerlink" title="MQTT的工作流程"></a>MQTT的工作流程</h2><p>MQTT的工作流程可以分为以下几个步骤：</p><ol><li><p>连接代理<br>客户端(Client)（发布者或订阅者）首先与MQTT代理(Broker)建立连接。连接时，客户端需要提供客户端ID、用户名、密码等信息。</p></li><li><p>订阅主题<br>订阅者向代理发送订阅请求，指定感兴趣的主题。代理会记录订阅者的订阅信息。</p></li><li><p>发布消息<br>发布者将消息发送到特定主题。代理接收到消息后，会根据主题将消息转发给所有订阅该主题的订阅者。</p></li><li><p>接收消息<br>订阅者从代理接收消息，并根据需要进行处理。</p></li><li><p>断开连接<br>客户端可以主动断开与代理的连接，或者由于网络问题导致连接断开。如果启用了持久会话，客户端重新连接后可以继续接收未处理的消息。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>MQTT</code>作为一种轻量级、高效的通信协议，在物联网、智能家居、工业自动化等领域有着广泛的应用。其基于发布&#x2F;订阅模式的设计，使得设备之间的通信更加灵活和高效。通过理解MQTT的工作原理和工作流程，开发者可以更好地利用这一协议，构建稳定、可靠的物联网系统。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQTT </tag>
            
            <tag> IoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentry: The Developer’s Best Friend for Error Tracking and Performance Monitoring</title>
      <link href="/2024/12/19/sentry-the-developer-s-best-friend-for-error-tracking-and-performance-monitoring/"/>
      <url>/2024/12/19/sentry-the-developer-s-best-friend-for-error-tracking-and-performance-monitoring/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/sentry.png" class="lazyload placeholder" data-srcset="/assets/images/tools/sentry.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Sentry"/></div><span class="image-caption">Sentry</span></div><p>As developers, we know how frustrating it can be to track down bugs and performance issues, especially when they slip through the cracks and impact end-users. Fortunately, <code>Sentry</code> is here to help you take control of your application’s stability and performance, offering a comprehensive solution for error tracking and performance monitoring.</p><p>In this post, we’ll dive into what Sentry is, how it works, and why it should be a key part of your development workflow.</p><h2 id="What-is-Sentry"><a href="#What-is-Sentry" class="headerlink" title="What is Sentry?"></a>What is Sentry?</h2><p><code>Sentry</code> is an <code>open-source</code> <code>error tracking</code> and <code>performance monitoring</code> tool that helps you find and fix issues in your applications—whether they’re web-based, mobile, or server-side. It captures errors in real-time, giving you deep insights into what went wrong, where it happened, and what might be causing it. Whether you’re building an app with React, Django, or even a mobile app, Sentry works across a wide variety of languages and platforms.</p><h2 id="Why-Should-Developers-Use-Sentry"><a href="#Why-Should-Developers-Use-Sentry" class="headerlink" title="Why Should Developers Use Sentry?"></a>Why Should Developers Use Sentry?</h2><ol><li><p>Track Errors in Real-Time<br>No one likes finding out about an issue after a user complains. Sentry sends real-time error alerts straight to your team—whether it’s through email, Slack, or other channels—so you can address problems as they arise. And with detailed stack traces and contextual information, you’re not left guessing about where or why the issue happened.</p></li><li><p>Monitor Performance Issues<br>Sentry isn’t just for catching errors; it also provides powerful performance monitoring. From slow page loads to database bottlenecks, Sentry helps you track performance metrics and diagnose why your app might be lagging, allowing you to optimize performance proactively.</p></li><li><p>Understand Context Around Errors<br>When an error happens, Sentry doesn’t just provide a stack trace. It enriches the error data with contextual information like user actions, environment (production vs. staging), browser version, and the specific code version that caused the issue. This context allows you to fix issues faster because you get a better sense of what happened right before the error occurred.</p></li><li><p>Release Tracking<br>Have you ever deployed a new release, only to realize later that it introduced a bug? Sentry connects errors to specific releases, so you can quickly figure out which version of your app caused the problem. Plus, you can monitor the health of each release, so you know when it’s time to roll back or fix issues.</p></li></ol><h2 id="Core-Features-You’ll-Love"><a href="#Core-Features-You’ll-Love" class="headerlink" title="Core Features You’ll Love"></a>Core Features You’ll Love</h2><ol><li><p>Error Aggregation<br>Sentry aggregates errors that are similar or identical, helping you prioritize the most critical issues without being overwhelmed by duplicates. This makes it easier to focus on the errors that matter.</p></li><li><p>Customizable Alerts &amp; Notifications<br>You can set custom thresholds for error severity or the frequency of an error before triggering an alert. This ensures you’re not flooded with notifications for every minor issue but are still on top of critical bugs.</p></li><li><p>Issue Resolution Workflow<br>With issue tracking integration (e.g., JIRA, GitHub), you can automatically assign issues to team members and track their resolution status without leaving your existing tools. This helps streamline your workflow and ensures bugs don’t fall through the cracks.</p></li><li><p>Contextual Information<br>The error reports include all the context you need to solve a bug, like the user’s device info, the environment it happened in, stack traces, request URLs, and even relevant logs. This reduces the time it takes to identify and fix problems.</p></li><li><p>Performance Monitoring<br>With Sentry’s performance monitoring, you can trace the performance of specific transactions across your app. This helps pinpoint slow database queries, inefficient API calls, and anything else that might be affecting performance.</p></li><li><p>Wide Integration Support<br>Sentry integrates with many of the tools you already use, such as <code>GitHub</code>, <code>GitLab</code>, <code>Slack</code>, <code>JIRA</code>, <code>Trello</code>, and more. This makes it simple to plug Sentry into your existing workflow and ensure your development process is smooth.</p></li></ol><h2 id="How-Does-Sentry-Work"><a href="#How-Does-Sentry-Work" class="headerlink" title="How Does Sentry Work?"></a>How Does Sentry Work?</h2><p>Integrating Sentry is simple and quick, and once you set it up, it works seamlessly behind the scenes. Here’s a high-level look at how it works:</p><ol><li><p>Error Detection:<br>Sentry works by using SDKs specific to your tech stack. Once integrated, it automatically detects unhandled errors in your application.</p></li><li><p>Context Collection:</p><span class='pbg danger'>When an error is captured</span></li><li><p>Error Aggregation &amp; Notifications:<br>The error is aggregated and displayed on your Sentry dashboard. If you’ve set up notifications, your team will be alerted in real-time via Slack, email, or any other supported channel.</p></li><li><p>Resolution &amp; Feedback:<br>Once a developer resolves an issue, Sentry marks it as resolved. If the issue reoccurs, Sentry notifies you again, keeping you in the loop.</p></li></ol><h2 id="How-to-Get-Started-with-Sentry"><a href="#How-to-Get-Started-with-Sentry" class="headerlink" title="How to Get Started with Sentry"></a>How to Get Started with Sentry</h2><ol><li><p>Create an Account<br>Go to Sentry’s website and sign up for a free account. You’ll be guided through the setup process, and you can create a new project for your app. Accessing <a href="https://sentry.io/">https://sentry.io</a> to create your own account.</p></li><li><p>Install the SDK<br>Depending on the tech stack you’re using, you’ll need to install the appropriate SDK. For example:</p></li></ol><p>In React Application:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @sentry/react</span><br></pre></td></tr></table></figure><p>Then, initialize Sentry in your app:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Sentry</span> <span class="keyword">from</span> <span class="string">&quot;@sentry/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Sentry</span>.<span class="title function_">init</span>(&#123;</span><br><span class="line">  <span class="attr">dsn</span>: <span class="string">&quot;https://&lt;key&gt;@sentry.io/&lt;project&gt;&quot;</span>,</span><br><span class="line">  <span class="comment">// This enables automatic instrumentation (highly recommended)</span></span><br><span class="line">  <span class="comment">// If you only want to use custom instrumentation:</span></span><br><span class="line">  <span class="comment">// * Remove the BrowserTracing integration</span></span><br><span class="line">  <span class="comment">// * add Sentry.addTracingExtensions() above your Sentry.init() call</span></span><br><span class="line">  <span class="attr">integrations</span>: [</span><br><span class="line">    <span class="title class_">Sentry</span>.<span class="title function_">browserTracingIntegration</span>(),</span><br><span class="line">    <span class="comment">// Or, if you are using react router, use the appropriate integration</span></span><br><span class="line">    <span class="comment">// See docs for support for different versions of react router</span></span><br><span class="line">    <span class="comment">// https://docs.sentry.io/platforms/javascript/guides/react/configuration/integrations/react-router/</span></span><br><span class="line">    <span class="title class_">Sentry</span>.<span class="title function_">reactRouterV6BrowserTracingIntegration</span>(&#123;</span><br><span class="line">      <span class="attr">useEffect</span>: <span class="title class_">React</span>.<span class="property">useEffect</span>,</span><br><span class="line">      useLocation,</span><br><span class="line">      useNavigationType,</span><br><span class="line">      createRoutesFromChildren,</span><br><span class="line">      matchRoutes,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// For finer control of sent transactions you can adjust this value, or</span></span><br><span class="line">  <span class="comment">// use tracesSampler</span></span><br><span class="line">  <span class="attr">tracesSampleRate</span>: <span class="number">1.0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set tracePropagationTargets to control for which URLs distributed tracing should be enabled</span></span><br><span class="line">  <span class="attr">tracePropagationTargets</span>: [<span class="string">&#x27;localhost&#x27;</span>, <span class="regexp">/^https:/</span><span class="regexp">/yourserver.io/</span>api/],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><p>Sentry SDK supports multiple languages and frameworks, including React, Angular, Vue, .NET, Go, Python, SpringBoot, Next.js and more.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/tools/sentry-sdks.png" class="lazyload placeholder" data-srcset="/assets/images/tools/sentry-sdks.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Sentry SDK Integrations"/></div><span class="image-caption">Sentry SDK Integrations</span></div><ol start="3"><li><p>Integrate Error &amp; Performance Monitoring<br>Sentry works out of the box for most errors, but you can also use it to track performance. You can instrument specific parts of your code to track performance issues, like database queries or API calls.</p></li><li><p>Configure Notifications<br>Set up notification channels (e.g., <code>Slack</code>, <code>email</code>) so your team is alerted whenever a critical error occurs. Customize the rules to avoid spamming you with minor issues.</p></li><li><p>Monitor in the Dashboard<br>Once the integration is complete, you’ll start seeing error logs, performance metrics, and more on your Sentry dashboard. You can drill down into individual issues, see affected users, and get all the data you need to fix the bug fast.</p></li></ol><h2 id="Benefits-of-Using-Sentry-for-Developers"><a href="#Benefits-of-Using-Sentry-for-Developers" class="headerlink" title="Benefits of Using Sentry for Developers"></a>Benefits of Using Sentry for Developers</h2><ol><li><p>Faster Debugging:<br>With all the contextual data Sentry provides, debugging becomes faster. No more chasing elusive bugs—get right to the root cause.</p></li><li><p>Proactive Monitoring:<br>Monitor both errors and performance, which helps you prevent issues before they affect users. Sentry gives you the insights to optimize performance and fix bugs early.</p></li><li><p>Increased Collaboration:<br>Integrated workflows with tools like GitHub, JIRA, and Slack mean you and your team can stay on the same page, and bugs can be tracked, assigned, and resolved efficiently.</p></li><li><p>Free Tier Available:<br>Sentry offers a free plan with generous limits, so you can get started without any upfront costs. As your project grows, you can scale to a paid plan with more features.</p></li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Sentry is an invaluable tool for developers, offering real-time error tracking and powerful performance monitoring. By integrating Sentry into your workflow, you can catch and resolve errors faster, improve your app’s performance, and provide a better experience for your users.</p><p>So if you’re looking to streamline your debugging process, improve performance monitoring, and keep your app healthy, you can try sentry in your application!</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Sentry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to LangChain: Make AI Smarter and Easier to use</title>
      <link href="/2024/11/12/introduction-to-langchain-make-ai-smarter-and-easy-to-use/"/>
      <url>/2024/11/12/introduction-to-langchain-make-ai-smarter-and-easy-to-use/</url>
      
        <content type="html"><![CDATA[<div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/langchain-image.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/langchain-image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:600px;"/></div></div><p>Have you ever wondered how some apps and websites can have conversations with you, answer your questions? Many of these apps use <code>artificial intelligence (AI)</code>, like the chatbot you might use to ask questions or get advice. But creating these smart systems can be tricky. This is where a tool called <code>LangChain</code> comes in to help!</p><p><code>LangChain</code> is a framework that makes it easier for developers to build applications that use <code>AI models</code>, like chatbots or smart helpers. In this blog, we’re going to explain what LangChain is, how it works, and why it’s useful for making AI apps.</p><h2 id="What-is-LangChain"><a href="#What-is-LangChain" class="headerlink" title="What is LangChain?"></a>What is LangChain?</h2><p>LangChain is a tool for developers that helps them build applications using <code>large language models (LLMs)</code>—the same kind of AI that powers chatbots, writing assistants, and more. LLMs can understand and generate text in a way that sounds like a real person. However, using these models to make powerful apps can be complicated. LangChain makes it easier by offering ready-made building blocks to connect these models to other tools, data, and even databases.</p><p>Think of LangChain like a set of Lego blocks that you can use to build cool things with AI. It saves developers time by giving them ready-made pieces to use, rather than having to create everything from scratch.</p><h2 id="Features-of-LangChain"><a href="#Features-of-LangChain" class="headerlink" title="Features of LangChain"></a>Features of LangChain</h2><p>Let’s break down some of the cool features LangChain offers and how they help developers make smarter apps.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/langchain-features.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/langchain-features.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="LangChain Features"/></div><span class="image-caption">LangChain Features</span></div><ol><li><p><strong>Chains</strong>: Putting Multiple Steps Together<br>Imagine you have a robot that can help with math homework. The robot might need to do multiple things to solve a problem. First, it could look up the math formula, then solve the problem, and finally explain the answer. In LangChain, these steps are called chains.</p><blockquote><p>A chain is a sequence of actions where each step depends on the previous one. For example, you could create a chain where:</p><p>First, the app asks the AI to pull data from a website.<br>Then, it uses that data to answer a question.<br>Finally, it summarizes the answer for the user.</p></blockquote></li><li><p><strong>Prompt Management</strong>: Talking to AI the Right Way<br>When you talk to an AI, how you ask your question or give your instruction is really important. That’s called a prompt. LangChain helps developers make the best prompts by letting them create templates. These templates let developers easily change certain parts of the prompt without having to rewrite it every time.</p><blockquote><p>For example, if you wanted to ask the AI to summarize a story, you could have a prompt like this:</p><p>“Please summarize the following story: {story}”</p><p>In this template, {story} is a placeholder that can be replaced with any story you want the AI to summarize.</p></blockquote></li><li><p><strong>Agents</strong>: Letting AI Decide What to Do Next<br>Sometimes, a smart system needs to decide what to do next based on the information it gets. For example, if you ask an AI about the weather, it might decide to pull the latest weather data from the internet. This decision-making is done by agents.</p><blockquote><p>An agent is like a helper that looks at the information it gets and chooses the best action. LangChain helps developers build agents that can make these decisions automatically.</p></blockquote></li><li><p><strong>Memory</strong>: Remembering What Happened Before<br>Have you ever talked to a chatbot and then later felt like it forgot what you said earlier? That can make a conversation feel weird. <code>LangChain helps solve this problem by letting the AI remember what was said earlier in the conversation</code>. This feature is called memory.</p><blockquote><p>or example, if you ask a chatbot for homework help and then ask a follow-up question, LangChain can help the AI remember the first question and give a more useful answer based on that memory.</p></blockquote></li><li><p><strong>Integrations</strong>: Connecting to Other Tools and Websites<br>Sometimes, an AI app needs to talk to other systems to get more information. <span class='pbg success'>LangChain makes this easy by letting developers connect their AI app to other tools</span> This is like having a personal assistant that not only talks to you but also has access to tons of information online.</p><blockquote><p>For example, an AI app could pull up the latest sports scores, or check the weather for you, using real-time data from the internet.</p></blockquote></li><li><p><strong>Retrieval-Augmented Generation (RAG)</strong>: Getting Smarter Answers<br>LangChain also lets AI search for information in real-time. This is called retrieval-augmented generation (RAG). It allows the AI to look up the latest data, like news stories or facts, and use that information to create smarter answers.</p><blockquote><p>For example, if you ask about the latest trends in video games, the AI can search the web for the most up-to-date information and then explain it to you.</p></blockquote></li></ol><h2 id="Why-Do-Developers-Use-LangChain"><a href="#Why-Do-Developers-Use-LangChain" class="headerlink" title="Why Do Developers Use LangChain?"></a>Why Do Developers Use LangChain?</h2><p>There are several reasons why developers might want to use LangChain:</p><ol><li><p>Makes It Easier to Build AI Apps<br>Instead of starting from scratch, LangChain gives developers tools that speed up the process of creating AI apps. Developers can use LangChain’s building blocks to create powerful applications without needing to write everything by hand.</p></li><li><p>It’s Flexible<br>LangChain can be used for a wide variety of apps. Whether you want to build a chatbot, a smart search engine, or an app that helps you study, LangChain has tools that make it easier to put everything together.</p></li><li><p>Saves Time<br>Developers don’t have to spend a lot of time figuring out how to make an AI model work with a database or how to chain steps together. LangChain does much of the heavy lifting, so developers can focus on the fun and creative parts of building their apps.</p></li><li><p>It’s <code>Open-Source</code><br>LangChain is free for anyone to use and improve. It’s open-source, which means developers from all over the world can contribute to making it better. If you’re learning to code or want to help improve the tool, you can!</p></li></ol><h2 id="Real-World-Examples-of-LangChain"><a href="#Real-World-Examples-of-LangChain" class="headerlink" title="Real-World Examples of LangChain"></a>Real-World Examples of LangChain</h2><p>LangChain is already being used in many cool ways. Here are a few examples:</p><ol><li><p>Chatbots<br>Developers can use LangChain to build chatbots that remember previous conversations and can talk to you like a real person. For example, you could create a chatbot to help you study for a test, and it would remember what you’ve learned so far.</p></li><li><p>Smart Assistants<br>LangChain can help build systems that pull information from the internet and use AI to explain things in simple terms. For example, if you’re stuck on a science problem, an AI could look up the topic online and explain it to you in a way you understand.</p></li><li><p>Automated Content Creation<br>Some apps use LangChain to automatically write articles or summaries. For example, a news website could use LangChain to summarize long articles or pull out the key points from reports, saving readers time.</p></li><li><p>Personalized Search Engines<br>LangChain can be used to build search engines that don’t just give you a list of links but also summarize the best results for you. This could help you find the exact answer you need faster.</p></li></ol><h2 id="How-to-Get-Started-with-LangChain"><a href="#How-to-Get-Started-with-LangChain" class="headerlink" title="How to Get Started with LangChain"></a>How to Get Started with LangChain</h2><p>If you’re excited to try out LangChain, here’s how you can get started:</p><ol><li>Install Python: LangChain works with Python, a programming language that’s great for beginners.</li><li>Install LangChain: You can install LangChain by running the command <code>pip install langchain</code> in Python.</li><li>Start Building: Once LangChain is installed, you can start building your own AI-powered applications! LangChain has tutorials and guides to help you learn how to use it.</li></ol><p>For more information, check out the LangChain documentation at <a href="https://python.langchain.com/docs/introduction/">https://python.langchain.com/docs/introduction/</a></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>LangChain is a super helpful tool for developers who want to build cool apps powered by AI. It makes it easier to connect different parts of an app, like databases or the web, with a language model that can understand and generate text. Whether it’s helping with homework, answering questions, or building a chatbot, LangChain is a great way to build smarter, more interactive applications.</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> LangChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Prompt Engineering? Best Practices and Examples</title>
      <link href="/2024/11/05/what-is-prompt-engineer/"/>
      <url>/2024/11/05/what-is-prompt-engineer/</url>
      
        <content type="html"><![CDATA[<p>As artificial intelligence (AI) models, especially large language models (LLMs) like OpenAI’s GPT series, have become increasingly sophisticated, a new role has emerged in the AI ecosystem: <code>the Prompt Engineer</code>. The term might sound technical or niche, but it’s actually pivotal to leveraging AI models effectively. Whether you’re interacting with AI in your personal or professional life, the quality of the interaction largely depends on how well the prompt is designed. This article will explore what a prompt engineer does, the best practices for writing effective prompts, and provide examples comparing outputs with and without a prompt engineer’s expertise.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/prompt-engineering.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/prompt-engineering.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div><h2 id="What-is-a-Prompt-Engineer"><a href="#What-is-a-Prompt-Engineer" class="headerlink" title="What is a Prompt Engineer?"></a>What is a Prompt Engineer?</h2><p><em>A Prompt Engineer is someone who specializes in crafting, refining, and optimizing prompts to ensure that AI models respond with the most relevant,accurate,and actionable information.</em> The role requires a blend of creativity, technical understanding, and knowledge of the AI’s underlying model architecture.</p><p>In essence, the prompt engineer’s job is to “speak” the language of the AI model. Since AI models like <code>GPT-3</code> or <code>GPT-4</code> don’t “think” like humans, their responses depend heavily on how the question or task is framed. A prompt engineer ensures that the right context, constraints, and phrasing are in place to guide the model toward producing the most useful responses.</p><h2 id="Why-is-Prompt-Engineering-Important"><a href="#Why-is-Prompt-Engineering-Important" class="headerlink" title="Why is Prompt Engineering Important?"></a>Why is Prompt Engineering Important?</h2><p>While AI models are capable of generating human-like text and performing complex tasks, their outputs are highly sensitive to the structure of the prompt. The same AI model could provide vastly different answers depending on the way a question is asked. Prompt engineers understand this sensitivity and use it to maximize the effectiveness of the interaction with AI.</p><p>Here are some reasons why prompt engineering is important:</p><p><strong>Maximizing output quality</strong>: Well-designed prompts improve the accuracy, relevance, and clarity of responses.<br><strong>Reducing errors</strong>: By properly framing a prompt, prompt engineers can help reduce misunderstandings or irrelevant responses.<br><strong>Efficiency</strong>: Instead of relying on trial and error to get useful responses, prompt engineers streamline the interaction process, saving time and resources.<br><strong>Contextuality</strong>: A good prompt will provide the necessary context for the model, ensuring that the response is in line with the user’s expectations.</p><h2 id="The-Path-of-a-Prompt-Engineer"><a href="#The-Path-of-a-Prompt-Engineer" class="headerlink" title="The Path of a Prompt Engineer"></a>The Path of a Prompt Engineer</h2><p>The process that a prompt engineer follows to ensure optimal results involves several stages. Each stage builds upon the last, leading to an iterative cycle that refines both the prompt and the AI’s output. Here’s a breakdown of the typical path of a prompt engineer:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/prompt-engineer-path.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/prompt-engineer-path.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="The Path of a Prompt Engineer" style="width:800px;"/></div><span class="image-caption">The Path of a Prompt Engineer</span></div><h3 id="1-Task-Understanding"><a href="#1-Task-Understanding" class="headerlink" title="1.Task Understanding:"></a>1.Task Understanding:</h3><p>Before crafting any prompt, the first step is to fully understand the task at hand. This involves clarifying the user’s goal, determining the desired output format, and understanding the nuances of the request. A deep understanding of the problem ensures that the prompt engineer can craft a question or instruction that addresses all necessary aspects.</p><blockquote><p>Example: If the task is to generate a poem, the prompt engineer will need to understand the tone, style, and subject matter required.</p></blockquote><h3 id="2-Crafting-Prompts"><a href="#2-Crafting-Prompts" class="headerlink" title="2.Crafting Prompts:"></a>2.Crafting Prompts:</h3><p>The next step is to craft the prompt. This involves framing the task clearly, with enough specificity to guide the AI toward the desired output. Crafting an effective prompt is not about asking a single question, but about <em>providing the model with the right context, constraints, and direction</em>.</p><blockquote><p>Example: Instead of asking, “Write a poem,” a more specific prompt might be, “Write a rhyming poem about the beauty of autumn, focusing on imagery and feelings of nostalgia.”</p></blockquote><h3 id="3-Prompt-Alignment"><a href="#3-Prompt-Alignment" class="headerlink" title="3.Prompt Alignment:"></a>3.Prompt Alignment:</h3><p>At this stage, the prompt must be aligned with the intended outcome. This means considering the AI model’s strengths and limitations and ensuring that the prompt leads the AI to produce a response that fits the desired format, tone, and depth. The prompt should ensure the model understands the context of the task, as well as any constraints or preferences that need to be respected.</p><blockquote><p>Example: For a technical article, aligning the prompt would involve ensuring the language model knows to prioritize clarity, accuracy, and technical precision.</p></blockquote><h3 id="4-Optimizing-Prompt"><a href="#4-Optimizing-Prompt" class="headerlink" title="4.Optimizing Prompt:"></a>4.Optimizing Prompt:</h3><p>After alignment, the prompt may need further refinement. This step involves fine-tuning the wording, simplifying complex instructions, or narrowing down the scope to ensure that the prompt is as effective as possible. <em>Optimization often involves making the prompt more specific and reducing ambiguity.</em></p><blockquote><p>Example: “Write a 300-word summary of the research paper on AI ethics, emphasizing the ethical dilemmas and implications for technology companies.” This version is more optimized than a broad, vague instruction.</p></blockquote><h3 id="5-AI-Model-Processing"><a href="#5-AI-Model-Processing" class="headerlink" title="5.AI Model Processing:"></a>5.AI Model Processing:</h3><p>Once the optimized prompt is provided, the AI model processes it and generates a response. This is where the model applies its underlying machine learning architecture, leveraging its training data to formulate a response.</p><blockquote><p>Example: The AI will analyze the prompt, consider patterns in its training data, and produce a response based on its understanding of the language and context.</p></blockquote><h3 id="6-Generating-Output"><a href="#6-Generating-Output" class="headerlink" title="6.Generating Output:"></a>6.Generating Output:</h3><p>The AI model generates the initial output based on the prompt. Depending on the AI model’s capabilities, this output may vary in length, style, accuracy, or even relevance to the task.</p><blockquote><p>Example: If the task was to summarize a paper, the output might include key findings, conclusions, and references to methodology.</p></blockquote><h3 id="7-Output-Refinement"><a href="#7-Output-Refinement" class="headerlink" title="7.Output Refinement:"></a>7.Output Refinement:</h3><p>Once the output is generated, prompt engineers review and refine it. This may involve removing irrelevant information, adjusting tone, adding details, or improving clarity. In some cases, the output might need to be restructured to fit the desired format.</p><blockquote><p>Example: If the AI’s response contains tangential information or lacks clarity, the prompt engineer would reword it or fine-tune the output to better align with the user’s expectations.</p></blockquote><h3 id="8-Iterative-Improvement"><a href="#8-Iterative-Improvement" class="headerlink" title="8.Iterative Improvement:"></a>8.Iterative Improvement:</h3><p>Finally, the process of prompt engineering is iterative. After refining the output, prompt engineers analyze the effectiveness of the response and assess how the prompt can be improved for future tasks. This leads to continuous improvement, ensuring that future prompts are even more optimized, concise, and aligned with user needs.</p><blockquote><p>Example: The engineer might adjust the prompt for the next interaction to ensure more relevant details or a more focused response.</p></blockquote><h2 id="Key-Skills-and-Tools-of-a-Prompt-Engineer"><a href="#Key-Skills-and-Tools-of-a-Prompt-Engineer" class="headerlink" title="Key Skills and Tools of a Prompt Engineer"></a>Key Skills and Tools of a Prompt Engineer</h2><p>Prompt engineering requires a variety of skills:</p><p><strong>Understanding of Language Models</strong>:<br>A prompt engineer should have a deep understanding of how LLMs like GPT process language. Knowing their strengths and weaknesses allows for better prompt design.</p><p><strong>Communication Skills</strong>:<br>Effective communication is critical, as prompt engineers must be able to convey complex instructions in a way that the model can interpret clearly.</p><p><strong>Creativity and Experimentation</strong>:<br>Crafting effective prompts often requires trial and error, testing different phrasings and structures to see what works best.</p><p><strong>Analytical Thinking</strong>:<br>Understanding how different types of inputs influence the model’s outputs and iterating to improve results.</p><p>In addition to these skills, prompt engineers also use tools to test and refine their prompts. For instance, platforms like OpenAI’s Playground allow users to experiment with various prompts in real-time, while more advanced professionals might leverage APIs to automate or scale their prompt engineering work.</p><h2 id="Best-Practices-for-Prompt-Engineering"><a href="#Best-Practices-for-Prompt-Engineering" class="headerlink" title="Best Practices for Prompt Engineering"></a>Best Practices for Prompt Engineering</h2><p>There are several strategies that a prompt engineer can employ to get the most out of a language model. Below are some of the best practices:</p><ol><li><p><strong>Be Specific and Clear</strong>: Ambiguous prompts can confuse AI models, leading to vague or incorrect responses. Make sure the prompt is clear and as specific as possible.</p><blockquote><p>Example: Instead of asking, “Tell me about AI,” a more specific prompt would be, “Can you explain the difference between supervised and unsupervised learning in AI?”</p></blockquote></li><li><p><strong>Use Context Effectively</strong>: Providing context can guide the model to better understand the desired output.</p><blockquote><p>Example: Instead of saying, “Write a poem,” say, “Write a rhyming poem about the beauty of autumn with a melancholic tone.”</p></blockquote></li><li><p><strong>Limit the Scope</strong>: Sometimes, less is more. Limit the scope of the prompt to avoid overwhelming the model with too much information or too many instructions.</p><blockquote><p>Example: Instead of “Write an article about the importance of artificial intelligence in modern business, covering all aspects of AI from machine learning to natural language processing,” you could say, “Write a short article explaining the importance of AI in customer service.”</p></blockquote></li><li><p><strong>Test and Iterate</strong>: A prompt engineer should test various iterations of a prompt to identify the most effective structure.</p></li><li><p><strong>Give Examples</strong>: For tasks requiring specific output formats, include an example to guide the model.</p><blockquote><p>Example: If you want a bulleted list, you could say, “List the steps in a process to build a website. For example: Step 1: Plan the layout.”</p></blockquote></li><li><p><strong>Use Temperature and Max Tokens</strong>: Some models allow you to adjust the <code>temperature (which controls randomness)</code> and the <code>max tokens (which sets a character limit)</code> to control the output. These can be adjusted to fine-tune the model’s output.</p></li></ol><h2 id="Comparing-with-and-without-Prompt-Engineering"><a href="#Comparing-with-and-without-Prompt-Engineering" class="headerlink" title="Comparing with and without Prompt Engineering"></a>Comparing with and without Prompt Engineering</h2><p>Now let’s look at some concrete examples of how a well-crafted prompt versus a poorly constructed one can affect the outcome.</p><h3 id="Example-1-Writing-a-Research-Summary"><a href="#Example-1-Writing-a-Research-Summary" class="headerlink" title="Example 1: Writing a Research Summary"></a>Example 1: Writing a Research Summary</h3><ul><li>Without a Prompt Engineer:</li></ul><p><strong>Prompt</strong>: “Summarize this research paper.”</p><p>The AI may generate a generic or overly simplistic summary, without capturing the key aspects of the paper, such as methodology, results, and conclusions.</p><ul><li>With a Prompt Engineer:</li></ul><p><strong>Prompt</strong>: “Summarize the research paper titled ‘Exploring AI Ethics in Autonomous Vehicles.’ Focus on the methodology, key findings, and implications for policy. Keep the summary under 200 words.”</p><p>The AI’s response will be more targeted, concise, and aligned with the user’s expectations, providing a detailed summary that addresses the core aspects of the paper.</p><h3 id="Example-2-Writing-a-Creative-Story"><a href="#Example-2-Writing-a-Creative-Story" class="headerlink" title="Example 2: Writing a Creative Story"></a>Example 2: Writing a Creative Story</h3><ul><li>Without a Prompt Engineer:</li></ul><p><strong>Prompt</strong>: “Write a story.”</p><p>The story might lack direction, coherence, or creativity, leading to a generic or even nonsensical narrative.</p><ul><li>With a Prompt Engineer:</li></ul><p><strong>Prompt</strong>: “Write a short story set in a post-apocalyptic world where humans are living on Mars. The protagonist is a scientist struggling with the ethical implications of using artificial intelligence to terraform the planet. Make the tone introspective and thought-provoking.”</p><p>The story produced will be richer, more engaging, and aligned with the specific context and themes the user wanted.</p><h3 id="Example-3-Asking-for-Code"><a href="#Example-3-Asking-for-Code" class="headerlink" title="Example 3: Asking for Code"></a>Example 3: Asking for Code</h3><ul><li>Without a Prompt Engineer:</li></ul><p><strong>Prompt</strong>: “Write a Python function.”</p><p>The AI may generate a simple function, but it may not meet the user’s needs or lack important features such as error handling or optimization.</p><ul><li>With a Prompt Engineer:</li></ul><p><strong>Prompt</strong>: “Write a Python function to validate an email address using regular expressions. The function should return True if the email is valid and False if it is invalid. It should also handle common edge cases such as missing domain names or incorrect characters.”</p><p>The AI’s response will be much more precise, including the correct implementation, error handling, and edge case considerations.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In the world of AI, a <code>Prompt Engineer</code> plays a critical role in ensuring that AI models deliver optimal results. The expertise of prompt engineers can dramatically influence the quality, relevance, and accuracy of responses from language models like <code>GPT-4</code>. By following best practices—such as being specific, providing context, testing different iterations, and using examples—they can significantly improve the interaction between humans and AI.</p><p>As AI continues to evolve, the role of prompt engineering will become even more important, helping users and businesses unlock the full potential of artificial intelligence. Whether it’s writing, problem-solving, or complex technical tasks, the way we interact with AI will increasingly depend on how well we craft our prompts.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> OpenAI </tag>
            
            <tag> GPT-4 </tag>
            
            <tag> GPT-3 </tag>
            
            <tag> Prompt Engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding the Azure OpenAI GPT-4 API Chat Role Usage</title>
      <link href="/2024/11/01/understanding-the-azure-openai-gpt-4-api-role/"/>
      <url>/2024/11/01/understanding-the-azure-openai-gpt-4-api-role/</url>
      
        <content type="html"><![CDATA[<p><code>Azure OpenAI</code> is a service provided by Microsoft that integrates OpenAI’s advanced language models into the Azure cloud platform. It allows developers to access and use OpenAI’s capabilities, such as natural language processing, code generation, and more, through Azure’s infrastructure.</p><p>Recently, we have deployed our first version of the OpenAI <code>GPT-4</code> model into the Azure cloud platform. This model is a powerful natural language model that can generate text based on a given prompt.</p><h2 id="What-is-GPT-4"><a href="#What-is-GPT-4" class="headerlink" title="What is GPT-4?"></a>What is GPT-4?</h2><p><code>GPT-4</code> is a transformer-based language model that was developed by OpenAI. It is a powerful language model that can generate text based on a given prompt. It has been trained on a large dataset of text and can generate coherent and engaging text that is often considered to be the next big thing in language models.</p><h2 id="How-can-I-use-the-GPT-4-API"><a href="#How-can-I-use-the-GPT-4-API" class="headerlink" title="How can I use the GPT-4 API?"></a>How can I use the GPT-4 API?</h2><p>To use the GPT-4 API, you need to follow these steps:</p><ol><li>Create an Azure account.</li><li>Create a resource group.</li><li>Create a new OpenAI resource.</li><li>Generate an API key.</li><li>Use the API key to make API requests.</li></ol><h3 id="1-Create-an-Azure-account"><a href="#1-Create-an-Azure-account" class="headerlink" title="1. Create an Azure account"></a>1. Create an Azure account</h3><p>To use the GPT-4 API, you need to have an Azure account. If you don’t have one, you can create one for free by following the steps in the <a href="https://azure.microsoft.com/en-us/free/">Azure sign-up page</a>.</p><h3 id="2-Create-a-resource-group"><a href="#2-Create-a-resource-group" class="headerlink" title="2. Create a resource group"></a>2. Create a resource group</h3><p>Create a resource group to organize your Azure resources. To create a new resource group, follow these steps:</p><ol><li>Go to the <a href="https://portal.azure.com/">Azure portal</a>.</li><li>Click on the <code>Resource groups</code> option in the left-hand menu.</li><li>Click on the <code>+ Create</code> button.</li><li>Enter a name for your resource group and select your subscription.</li><li>Click on the <code>Review + create</code> button.</li></ol><h3 id="3-Create-a-new-OpenAI-resource"><a href="#3-Create-a-new-OpenAI-resource" class="headerlink" title="3. Create a new OpenAI resource"></a>3. Create a new OpenAI resource</h3><p>To create a new OpenAI resource, follow these steps:</p><ol><li>Go to the <a href="https://portal.azure.com/">Azure portal</a>.</li><li>Click on the <code>Create a resource</code> button.</li><li>Search for <code>OpenAI</code> in the search bar.</li><li>Click on the <code>OpenAI</code> resource.</li><li>Click on the <code>Create</code> button.</li><li>Enter a name for your OpenAI resource and select your subscription.</li><li>Select the resource group you created earlier.</li><li>Select the pricing tier.</li><li>Click on the <code>Create</code> button.</li></ol><h3 id="4-Generate-an-API-key"><a href="#4-Generate-an-API-key" class="headerlink" title="4. Generate an API key"></a>4. Generate an API key</h3><p>To generate an API key, follow these steps:</p><ol><li>Go to the <a href="https://portal.azure.com/">Azure portal</a>.</li><li>Click on the <code>All resources</code> option in the left-hand menu.</li><li>Search for your OpenAI resource.</li><li>Click on the resource.</li><li>Click on the <code>Show access keys</code> button.</li><li>Copy the <code>Key 1</code> value.</li></ol><h3 id="5-Use-the-API-key-to-make-API-requests"><a href="#5-Use-the-API-key-to-make-API-requests" class="headerlink" title="5. Use the API key to make API requests"></a>5. Use the API key to make API requests</h3><p>To make API requests, we need to include the API key in the request headers. Here’s an example of how to make a request to the GPT-4 API with REST styles. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="variable">$AZURE_OPENAI_ENDPOINT</span>/openai/deployments/gpt-4o/chat/completions?api-version=2023-07-01-preview \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;api-key: <span class="variable">$AZURE_OPENAI_API_KEY</span>&quot;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123;&quot;messages&quot;:[&#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;There are 5 classifications: Suggestion, Meanless, Compliment, Complaint, Please provide a classification for user input.&quot;&#125;,&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Does Azure OpenAI support customer managed keys?&quot;&#125;,&#123;&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: &quot;A classification word&quot;&#125;,&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;its great and easy to use&quot;&#125;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>Place your API key and endpoint in the appropriate variables, and update which deployments model (gpt-4, gpt-4o or other models) and model version of your endpoint is using.</p><p>The Azure OpenAI also supports multiple programming languages, including <code>Python</code>, <code>JavaScript</code>, and <code>C#</code>. You can use the API to generate text in your preferred programming language.</p><h2 id="GPT-4-Chat-Roles"><a href="#GPT-4-Chat-Roles" class="headerlink" title="GPT-4 Chat Roles"></a>GPT-4 Chat Roles</h2><p>In above message parameter, you may notice thata there are three roles: <code>system</code>, <code>user</code>, and <code>assistant</code>. The GPT-4 API supports three chat roles. Let digger deeper into each role:</p><p><strong>System</strong>: This role sets the context or guidelines for the conversation. It’s where you can specify instructions or constraints for how the assistant should behave throughout the interaction.</p><p><strong>User</strong>: This role represents the input from the person interacting with the model. Any questions or prompts posed by the user fall under this role.</p><p><strong>Assistant</strong>: This role is for the model’s responses. It contains the output generated by the assistant based on the user input and the context provided by the system.</p><p>In another word. The <code>system</code> role sets the context, the <code>user</code> role represents the input, and the <code>assistant</code> role contains the output.</p><blockquote><p>Use system to define the conversation’s tone, behavior, or rules.<br>Use user for all queries or statements made by the person.<br>Use assistant for the model’s replies.</p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Let’s say we want to classify the product feedback classification as <code>Suggestion</code>, <code>Meanless</code>, <code>Compliment</code>, <code>Complaint</code>, or <code>Others</code>. We can use the GPT-4 API to generate text based on the given prompt and classify the feedback.</p><p>First, we define the context or guidelines to let the assistant know what result we want to achieve. Given below content to the <code>system</code> role.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;There are 5 classifications: Suggestion, Meanless, Compliment, Complaint, Please provide a classification for user input.&quot;&#125;,</span><br></pre></td></tr></table></figure><p>And, we only the <code>OpenAI</code> to reply me the classification word when user input is provided. So we define the <code>assistant</code> role as <code>classification word</code>.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: &quot;A classification word&quot;&#125;</span><br></pre></td></tr></table></figure><p>Now, we can ask the user to provide the feedback and provide the <code>user</code> role.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;its great and easy to use&quot;&#125;</span><br></pre></td></tr></table></figure><p>After the conversation, the <code>assistant</code> role will provide the classification word as <code>Compliment</code>. You will notice that there is a piece of json indicates the <code>assistant</code> role content value in the response. The OpenAI gpt-4o model knows “its great and easy to use” is a “Compliment” and provides the classification word as “Compliment”.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Compliment&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/openai-chat-role-api-usage-example-1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/openai-chat-role-api-usage-example-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Classification - its great and easy to use" style="width:800px;"/></div><span class="image-caption">Classification - its great and easy to use</span></div><p>Let’s try another user input.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;I&#x27;m in your walls&quot;&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/openai-chat-role-api-usage-example-2.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/openai-chat-role-api-usage-example-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Classification - I'm in your walls" style="width:800px;"/></div><span class="image-caption">Classification - I'm in your walls</span></div><p>The <code>assistant</code> role will provide the classification word as <code>Meanless</code>. Because this input is not meanful for any product feedback.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this article, we have explored the role of the Azure OpenAI GPT-4 API and how it can be used to generate text. We have also learned about the chat roles and how to use them to classify the product feedback.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> OpenAI </tag>
            
            <tag> Azure </tag>
            
            <tag> GPT-4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Analysis Chart by Generative AI</title>
      <link href="/2024/10/29/data-analysis-chart-by-generative-ai/"/>
      <url>/2024/10/29/data-analysis-chart-by-generative-ai/</url>
      
        <content type="html"><![CDATA[<p>In data analysis, we often need to create charts to visualize the data by using BI tools, such as <code>Tableau</code>, <code>Power BI</code>, <code>AWS Quicksight</code>, or <code>Qlik Sense</code>. These tools allow us to create interactive and visually appealing charts, which can help us to identify patterns and trends in the data.</p><h2 id="General-Solution-Architecture-for-Data-Analysis-BI-Chart"><a href="#General-Solution-Architecture-for-Data-Analysis-BI-Chart" class="headerlink" title="General Solution Architecture for Data Analysis BI Chart"></a>General Solution Architecture for Data Analysis BI Chart</h2><p>The general data analysis BI chart solution architecture like below:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/bi-chart-general-arch.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/bi-chart-general-arch.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="General Solution Architecture for Data Analysis BI Chart" style="width:800px;"/></div><span class="image-caption">General Solution Architecture for Data Analysis BI Chart</span></div>.<p>Usually, the engieering create business chart by using BI tools after data is ETL proceseed. If the business want to see the data distribution chart, they need to ask the data engineer to create the chart. The data engineer will create the chart using BI tools and share it with the business. This may take some time and effort.</p><h2 id="Solution-Architecture-for-Data-Analysis-BI-Chart-by-Generative-AI"><a href="#Solution-Architecture-for-Data-Analysis-BI-Chart-by-Generative-AI" class="headerlink" title="Solution Architecture for Data Analysis BI Chart by Generative AI"></a>Solution Architecture for Data Analysis BI Chart by Generative AI</h2><p>Think about the scenario where the business want to see the data distribution chart without the data engineer’s help. How can we create the chart without the data engineer’s help?</p><p>One way to create the data distribution chart without the data engineer’s help is to use a generative AI model. The business just need to describe what the data they want to see and want to display as which chart type. The generative AI application will create the chart for them.</p><p>The core important thing we need to let the GenAI to understand user’s natural language and generate the information which application can be use. The solution architecture like below:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/bi-chart-AI-arch.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/bi-chart-AI-arch.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AI Solution Architecture for Data Analysis BI Chart" style="width:800px;"/></div><span class="image-caption">AI Solution Architecture for Data Analysis BI Chart</span></div>.<p>The AI application will take the user’s natural language as input and generate the chart for them. The AI application will use the following steps to generate the chart:</p><ol><li>Understand the user’s natural language and generate the chart title, chart type and chart related sql.</li><li>Connect to the database or dataset and execute the chart related sql to get the data.</li><li>Use the data to create the chart using the chart type.</li></ol><p>The AI model could be <code>ChatGPT</code>, <code>OpenAI</code> or <code>Claude</code> model. The AI model will generate the chart related sql, chart type and chart title based on the user’s natural language. The AI model will use the chart type to create the chart.</p><p>For example, if the user’s natural language is “Show the distribution of the sales by product category”, the AI application will generate the chart title as “Sales Distribution by Product Category” and chart type as “Bar Chart”. The AI application will execute the following sql to get the data:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_category, <span class="built_in">SUM</span>(sales) <span class="keyword">as</span> total_sales</span><br><span class="line"><span class="keyword">FROM</span> sales_data</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_category</span><br></pre></td></tr></table></figure><p>Below is a demo to generate the chart for the user’s natural language base on testing sample data.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/bi-chart-by-ai-test-1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/bi-chart-by-ai-test-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div>.<p>User input natural language: </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;I want to see the distribution of all product categories with duplicate devices removed, and exclude the empty category, please display it in a pie chart.&quot;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/bi-chart-by-ai-test-1a.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/bi-chart-by-ai-test-1a.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div>.<p>The AI model response below base on the user’s natural language and prompts.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;sql&#x27;<span class="punctuation">:</span> <span class="string">&quot;SELECT category, COUNT(DISTINCT macaddress) as device_count FROM device_demo_data WHERE category != &#x27;&#x27; GROUP BY category ORDER BY device_count DESC&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    &#x27;chart&#x27;<span class="punctuation">:</span> &#x27;pie&#x27;<span class="punctuation">,</span> </span><br><span class="line">    &#x27;title&#x27;<span class="punctuation">:</span> &#x27;Distribution of Unique Devices by Product Category&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>There is a question, how the AI model know to generate this data format for us? Actually it is because we provide the prompts to the AI model. The prompts will guide the AI model to generate the chart related sql, chart type and chart title. Below is sample prompts:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">You are a data analyst. Below is the table structure information about devices reported data. I will ask you questions, and then please generate the json data format &#123;&#x27;sql&#x27;:&#x27;&#x27;,&#x27;chart&#x27;:&#x27;table&#x27;,&#x27;title&#x27;:&#x27;&#x27;&#125; based on the questions I asked. </span><br><span class="line">Emphasize: I only need this json data format. The &#x27;sql&#x27; value is used by AWS Athena to query and generate the chart data. </span><br><span class="line">The &#x27;chart&#x27; value is the chart type, &#x27;numeric&#x27; represents a just a number, &#x27;table&#x27; represents a table chart, &#x27;pie&#x27; represents a pie chart, &#x27;bar&#x27; represents a bar chart, &#x27;line&#x27; represents a line chart. </span><br><span class="line">The &#x27;title&#x27; value is the chart title. Please remember, I only need the json string format data, don&#x27;t need other sentence.</span><br><span class="line">CREATE EXTERNAL TABLE `device_demo_data`(</span><br><span class="line">  `macaddress` string COMMENT &#x27;设备mac地址 / The device macaddress&#x27;, </span><br><span class="line">  `productname` string COMMENT &#x27;设备产品名称 / The device product name&#x27;, </span><br><span class="line">  `category` string COMMENT &#x27;设备产品的分类 / The device product category&#x27;, </span><br><span class="line">  `country` string COMMENT &#x27;设备所在的国家 / The country where the device is located&#x27;, </span><br><span class="line">  `region` string COMMENT &#x27;设备上传数据所在的区域 / The region where the device data is reported&#x27;, </span><br><span class="line">  `default_region` string COMMENT &#x27;设备出厂设置的默认区域 / The default region set by the device&#x27;, </span><br><span class="line">  `oneosversion` string COMMENT &#x27;设备OneOS的版本号 / The OneOS version of the device&#x27;, </span><br><span class="line">  `firmwareversion` string COMMENT &#x27;设备的固件版本号 / The firmware version of the device&#x27;, </span><br><span class="line">  `officialversion` string COMMENT &#x27;设备是否是官方的发布版本，1为官方版本， 0为非官方版本 / Whether the device is an official release, 1 for official version, 0 for non-official version&#x27;, </span><br><span class="line">  `createtime` string COMMENT &#x27;设备上报数据的日期, 数据类型是字符串，日期格式是2024-09-01，表示2024年9月1日 / The date when the device reported data, the data type is string, the date format is 2024-09-01, which means September 1, 2024&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>We tell AI model the data schema and each field means, and indicate only need the json format response with specific field. Once the AI model generate the response, we can use it to create the chart for the user’s natural language.</p><p>We can also generate the line chart base on time line.</p><p>User input natural language: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">How many distinct devices reported every week, exclude the empty date, display the data in line graph</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/bi-chart-by-ai-test-2.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/bi-chart-by-ai-test-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div>.<p>For the front-end UI to display the chart, we can use some chart library like <code>Echarts</code>, <code>Hightcharts</code>, <code>D3.js</code> or <code>Chart.js</code>. The front-end UI display the chart base on chart type and the data which queried by SQL.</p><p>All these generated charts can be added into dashboard.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/bi-chart-by-ai-dashboard.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/bi-chart-by-ai-dashboard.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div>.<h2 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h2><p>As you can see, the AI solution architecture is a new way to create BI chart. However, it still has some limitations. It can not generate the complex chart which like some BI tools advanced chart fucntionality. But it is still a good start to create the chart for business users.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Python </tag>
            
            <tag> AWS </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Intelligent SQL Generator base on Spring AI with AWS Bedrock</title>
      <link href="/2024/10/23/intelligent-sql-generator-base-on-spring-ai-with-aws-bedrock/"/>
      <url>/2024/10/23/intelligent-sql-generator-base-on-spring-ai-with-aws-bedrock/</url>
      
        <content type="html"><![CDATA[<p>The generative AI is a type of artificial intelligence (AI) that can learn from data and generate new data. In this article, we will discuss how to build an intelligent SQL generator using <code>Spring AI</code> and <code>AWS Bedrock</code>. For example, the application able to provide the data sql to us after we input the natural language questions, and we can query the data by using the sql, even display the chart base on data queried.</p><h2 id="Spring-AI"><a href="#Spring-AI" class="headerlink" title="Spring AI"></a>Spring AI</h2><p>The <code>Spring AI</code> is a project of <code>Spring</code>. It support for all major AI Model providers such as <code>Anthropic</code>, <code>OpenAI</code>, <code>Microsoft</code>, <code>Amazon</code>, <code>Google</code>, and <code>Ollama</code>. Model type supports such as <code>Chart Completion</code>, <code>Text to Image</code>, <code>Text to Speech</code>, <code>Translation</code>, <code>Audio Transcription</code> and so on. It make it easy to integrate AI models into the application.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/spring-ai.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/spring-ai.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Spring AI" style="width:500px;"/></div><span class="image-caption">Spring AI</span></div><h2 id="AWS-Bedrock"><a href="#AWS-Bedrock" class="headerlink" title="AWS Bedrock"></a>AWS Bedrock</h2><p>Amazon Bedrock is a fully managed service that makes FMs from leading AI startups and Amazon available via an API, so you can choose from a wide range of FMs to find the model that is best suited for your use case. It contains <code>Anthropic</code> (<code>Claude</code>), <code>Meta</code> (<code>Llama</code>) and <code>Stability AI</code> models. In this blog, we will use <code>Claude</code> AI model of <code>Anthropic</code> to build our intelligent SQL generator.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/aws-bedrock-ai.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/aws-bedrock-ai.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Bedrock" style="width:600px;"/></div><span class="image-caption">AWS Bedrock</span></div><h2 id="Building-Intelligent-SQL-Generator"><a href="#Building-Intelligent-SQL-Generator" class="headerlink" title="Building Intelligent SQL Generator"></a>Building Intelligent SQL Generator</h2><p>Assuming we’re data analyzer, we have product_sales, products and customers three tables data in mysql. And we want to query the data by input natural language instead of write specific SQL manually. We can use AI to understand user natural langauge to generate the SQL base on table schemas. Let’s get start. </p><h3 id="Create-a-new-Spring-Boot-project"><a href="#Create-a-new-Spring-Boot-project" class="headerlink" title="Create a new Spring Boot project"></a>Create a new Spring Boot project</h3><p>Create a <code>Spring Boot</code> project with restful api, add the following dependencies in maven <code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-bedrock-ai-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>spring-ai-bedrock-ai-spring-boot-starter</code> is library that provides integration with <code>AWS Bedrock</code> models in <code>Spring AI</code>.</p><h3 id="Configure-AWS-Bedrock-configuraitons"><a href="#Configure-AWS-Bedrock-configuraitons" class="headerlink" title="Configure AWS Bedrock configuraitons"></a>Configure AWS Bedrock configuraitons</h3><p>In application.properties, configur below configurations.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-ai-datasql</span><br><span class="line">spring.ai.bedrock.aws.region=us-east-1</span><br><span class="line">spring.ai.bedrock.aws.timeout=5m</span><br><span class="line">spring.ai.bedrock.anthropic3.chat.enabled=true</span><br><span class="line">spring.ai.bedrock.anthropic3.chat.options.max-tokens=4000</span><br><span class="line"></span><br><span class="line"># config below AWS credential key, configure it in Java environments or System environments</span><br><span class="line">spring.ai.bedrock.aws.access-key=$&#123;AWS_ACCESS_KEY_ID&#125;</span><br><span class="line">spring.ai.bedrock.aws.secret-key=$&#123;AWS_SECRET_ACCESS_KEY&#125;</span><br></pre></td></tr></table></figure><h3 id="Prepare-prompts-for-AI"><a href="#Prepare-prompts-for-AI" class="headerlink" title="Prepare prompts for AI"></a>Prepare prompts for AI</h3><p>Since we only need AI to generate the SQL base on mysql table schema. So we need prepare prompts to <code>AI</code> to fully understand our requirements. Below is <code>prompts.txt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">There are 3 mysql tables schema product_sales, products, customers.</span><br><span class="line">CREATE TABLE product_sales (</span><br><span class="line">    sale_id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    product_id INT NOT NULL,</span><br><span class="line">    sale_date DATETIME DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">    price DECIMAL(10, 2) NOT NULL,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    region VARCHAR(100),</span><br><span class="line">    FOREIGN KEY (product_id) REFERENCES products(product_id),</span><br><span class="line">    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE products (</span><br><span class="line">    product_id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    product_name VARCHAR(100),</span><br><span class="line">    product_category VARCHAR(100)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE customers (</span><br><span class="line">    customer_id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    customer_name VARCHAR(100)</span><br><span class="line">);</span><br><span class="line">I will ask you question, please base on table schema to generate the SQL text in single line, please note I only need full correct sql text, do not</span><br><span class="line">need other text or any other characters.</span><br></pre></td></tr></table></figure><p>In above prompts, you can see it tells AI we only need SQL text base on the 3 mysql table schemas.</p><h3 id="Core-Code"><a href="#Core-Code" class="headerlink" title="Core Code"></a>Core Code</h3><p>Create a restful controller and pass the prompts and user input message to AI model.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.ai.datasql.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatModel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> spring.ai.datasql.service.PromptService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLGenController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BedrockAnthropic3ChatModel chatModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PromptService prompts;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SQLGenController</span><span class="params">(BedrockAnthropic3ChatModel chatModel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chatModel = chatModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/ai/sql&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">generate</span><span class="params">(<span class="meta">@RequestBody</span> String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newMsg</span> <span class="operator">=</span> prompts.getContent() + message;</span><br><span class="line">        <span class="keyword">return</span> Map.of(<span class="string">&quot;sql&quot;</span>, chatModel.call(newMsg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above code, we inject <code>BedrockAnthropic3ChatModel</code> which is <code>Anthropic</code> model of <code>AWS Bedrock</code> provided by <code>Spring AI</code>. We also inject <code>PromptService</code> which is a service to read prompts.<br>In <code>generate</code> method, we read prompts from <code>PromptService</code> and append user input message to it. Then we call <code>chatModel.call</code> method to generate the SQL text.</p><p>Code of <code>PromptService</code> to read prompts from file.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.ai.datasql.service;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PromptService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;classpath:prompts.txt&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> org.springframework.core.io.Resource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileContent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        fileContent = <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(resource.getURI())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Run-the-application"><a href="#Run-the-application" class="headerlink" title="Run the application"></a>Run the application</h3><p>Run the application and test the API by sending a request with user input message. We may encounter below errors.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/aws-bedrock-model-can-not-access.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/aws-bedrock-model-can-not-access.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Bedrock Model can not access"/></div><span class="image-caption">AWS Bedrock Model can not access</span></div><p>This is because the <code>spring.ai.bedrock.anthropic3.chat.model</code> in  current Spring AI version default value is <code>anthropic.claude-3-sonnet-20240229-v1:0</code>. Let’s check the anthropic available Claude models in AWS Bedrock. Here we use <code>Claude 3.5</code> AI model.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/aws-bedrock-claude-model-id.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/aws-bedrock-claude-model-id.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Bedrock Anthropic Claude Model Id"/></div><span class="image-caption">AWS Bedrock Anthropic Claude Model Id</span></div><p>Copy this model id and update the <code>spring.ai.bedrock.anthropic3.chat.model</code> in <code>application.properties</code> file. The fully updated <code>application.properties</code> file should be like below.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=spring-ai-datasql</span><br><span class="line">spring.ai.bedrock.aws.region=us-east-1</span><br><span class="line">spring.ai.bedrock.aws.timeout=5m</span><br><span class="line">spring.ai.bedrock.anthropic3.chat.enabled=true</span><br><span class="line">spring.ai.bedrock.anthropic3.chat.options.max-tokens=4000</span><br><span class="line">spring.ai.bedrock.anthropic3.chat.model=anthropic.claude-3-5-sonnet-20240620-v1:0</span><br><span class="line"></span><br><span class="line"># config below AWS credential key, it also can be configure in Java environments or System environments</span><br><span class="line">spring.ai.bedrock.aws.access-key=$&#123;AWS_ACCESS_KEY_ID&#125;</span><br><span class="line">spring.ai.bedrock.aws.secret-key=$&#123;AWS_SECRET_ACCESS_KEY&#125;</span><br></pre></td></tr></table></figure><p>Now, we can run the application and test the API.</p><h4 id="Test-Example-1"><a href="#Test-Example-1" class="headerlink" title="Test Example 1"></a>Test Example 1</h4><p><strong>Input:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">What&#x27;s the total prices of product sales ?</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><p>The response will be like below.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(price) <span class="keyword">FROM</span> product_sales;</span><br></pre></td></tr></table></figure><p><strong>Postman Screenshot:</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-sql-by-ai-test-1.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-sql-by-ai-test-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>The <code>AI</code> model can generate the SQL text base on user input message.</p><h4 id="Test-Example-2"><a href="#Test-Example-2" class="headerlink" title="Test Example 2"></a>Test Example 2</h4><p><strong>Input:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">How many customers by our products? I only need unique customers.</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> customer_id) <span class="keyword">FROM</span> product_sales</span><br></pre></td></tr></table></figure><p><strong>Postman Screenshot:</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-sql-by-ai-test-2.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-sql-by-ai-test-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h4 id="Test-Example-3"><a href="#Test-Example-3" class="headerlink" title="Test Example 3"></a>Test Example 3</h4><p><strong>Input:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I want to see the total sales prices for each product categories.</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_category, <span class="built_in">SUM</span>(price) <span class="keyword">AS</span> total_sales <span class="keyword">FROM</span> product_sales <span class="keyword">JOIN</span> products <span class="keyword">ON</span> product_sales.product_id <span class="operator">=</span> products.product_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_category;</span><br></pre></td></tr></table></figure><p><strong>Postman Screenshot:</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-sql-by-ai-test-3.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-sql-by-ai-test-3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h4 id="Test-Example-4"><a href="#Test-Example-4" class="headerlink" title="Test Example 4"></a>Test Example 4</h4><p><strong>Input:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please show me all sales data which contains price, sales date, customer name and product name and product categories</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ps.price, ps.sale_date, c.customer_name, p.product_name, p.product_category <span class="keyword">FROM</span> product_sales ps <span class="keyword">JOIN</span> products p <span class="keyword">ON</span> ps.product_id <span class="operator">=</span> p.product_id <span class="keyword">JOIN</span> customers c <span class="keyword">ON</span> ps.customer_id <span class="operator">=</span> c.customer_id</span><br></pre></td></tr></table></figure><p><strong>Postman Screenshot:</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-sql-by-ai-test-4.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-sql-by-ai-test-4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h4 id="Test-Example-5"><a href="#Test-Example-5" class="headerlink" title="Test Example 5"></a>Test Example 5</h4><p><strong>Input:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please show total sales prices of each product category on 2nd quarter this year</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.product_category, <span class="built_in">SUM</span>(ps.price) <span class="keyword">AS</span> total_sales <span class="keyword">FROM</span> product_sales ps <span class="keyword">JOIN</span> products p <span class="keyword">ON</span> ps.product_id <span class="operator">=</span> p.product_id <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(ps.sale_date) <span class="operator">=</span> <span class="keyword">YEAR</span>(CURDATE()) <span class="keyword">AND</span> QUARTER(ps.sale_date) <span class="operator">=</span> <span class="number">2</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.product_category</span><br></pre></td></tr></table></figure><p><strong>Postman Screenshot:</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/gen-sql-by-ai-test-5.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/gen-sql-by-ai-test-5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>As you can see the <code>AI</code> model can generate the SQL text base on user input message. Base on this function, we can download the data from mysql or display the chart base on data queried. It’s good for business analyst to query the data by natural language.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> AI </tag>
            
            <tag> AWS </tag>
            
            <tag> SQL </tag>
            
            <tag> Spring AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The useEffect of React Runs Twice in Development Mode.</title>
      <link href="/2024/10/16/the-useeffect-of-react-runs-twice-in-development-mode/"/>
      <url>/2024/10/16/the-useeffect-of-react-runs-twice-in-development-mode/</url>
      
        <content type="html"><![CDATA[<p>Have you noticed that your <code>useEffect</code> hook of <code>React</code> runs twice when the page first loads in development mode? This occurs because since <code>React 18</code>, it can be confusing, especially for new developers. Let’s explore why this happens and what it means.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/react/react-hook-useEffect.png" class="lazyload placeholder" data-srcset="/assets/images/react/react-hook-useEffect.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="React Hook useEffect" style="width:800px;"/></div><span class="image-caption">React Hook useEffect</span></div><h2 id="What-is-useEffect"><a href="#What-is-useEffect" class="headerlink" title="What is useEffect?"></a>What is <code>useEffect</code>?</h2><p><code>useEffect</code> is a hook that allows you to perform side effects in your components. Side effects can be things like <strong>fetching data</strong>, <strong>subscribing to events</strong>, or <strong>changing the DOM</strong>. This hook takes two arguments:</p><ol><li>A function to run your side effect.</li><li>An optional array of dependencies that tells React when to run the effect again.</li></ol><p>Here’s a simple example of useEffect in action:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ExampleComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Effect has been executed&#x27;</span>);</span><br><span class="line">    <span class="comment">// Side effect logic here</span></span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above code, the log ‘Effect has been executed’ will be printed to the console twice when the component is first render on development mode.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/react/react-useEffect-runs-twice.png" class="lazyload placeholder" data-srcset="/assets/images/react/react-useEffect-runs-twice.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="React useEffect runs twice in development mode"/></div><span class="image-caption">React useEffect runs twice in development mode</span></div><h2 id="Why-Does-useEffect-Run-Twice-in-Development-Mode"><a href="#Why-Does-useEffect-Run-Twice-in-Development-Mode" class="headerlink" title="Why Does useEffect Run Twice in Development Mode?"></a>Why Does useEffect Run Twice in Development Mode?</h2><p>When you run your React app in development mode, you might see that the useEffect runs twice when the component loads for the first time. This can be confusing, especially for new developers.</p><h3 id="Reasons-for-the-Double-Execution"><a href="#Reasons-for-the-Double-Execution" class="headerlink" title="Reasons for the Double Execution"></a>Reasons for the Double Execution</h3><p><strong>Strict Mode:</strong> This behavior is part of React’s <code>Strict Mode</code>. It purposely runs certain lifecycle methods and hooks like useEffect twice during development. This helps check if your code can handle side effects correctly.</p><p><strong>Testing Effects:</strong> By running the effect two times, React tests if your side effects can handle being called multiple times without causing bugs. This helps catch problems early.</p><h3 id="What-Happens-in-Production"><a href="#What-Happens-in-Production" class="headerlink" title="What Happens in Production?"></a>What Happens in Production?</h3><span class='pbg danger'>The double call only happens in development mode. When you make your app for production</span><h2 id="How-to-Handle-the-Double-Execution"><a href="#How-to-Handle-the-Double-Execution" class="headerlink" title="How to Handle the Double Execution"></a>How to Handle the Double Execution</h2><p>Here are some tips for dealing with the double execution of useEffect:</p><p><strong>Be Careful with State Updates</strong>: If your effect updates state, make sure it’s safe to run the effect multiple times without causing issues.</p><p><strong>Use Cleanup Functions</strong>: Always return a cleanup function from your useEffect to free up resources and avoid memory issues.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Your side effect code here</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Cleanup code here</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [dependencies]);</span><br></pre></td></tr></table></figure><p><strong>Test Your Effects</strong>: Use the extra invocation to ensure that your effects work correctly.</p><h2 id="Disable-Strict-Mode"><a href="#Disable-Strict-Mode" class="headerlink" title="Disable Strict Mode"></a>Disable Strict Mode</h2><p>It is not recommend this way, but if you want to disable Strict Mode, in <code>React 18</code> you can disable Strict Mode by removing the <code>&lt;React.StrictMode&gt;</code> tag from the return statement in your root component.</p><p>In <code>Next.js</code>, you can disable Strict Mode by setting the following parameter in <code>next.config.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">reactStrictMode</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><span class='pbg green'>Seeing useEffect run twice in development mode can be surprising</span> Understanding this behavior and preparing your code for it will allow you to use React hooks effectively and build better applications.<p>Even though this might seem confusing at first, it’s an important part of the React development experience. Happy coding!</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Glue Iceberg tables schema can&#39;t be updated with Pulumi</title>
      <link href="/2024/10/09/aws-glue-iceberg-tables-schema-can-t-be-updated-with-pulumi/"/>
      <url>/2024/10/09/aws-glue-iceberg-tables-schema-can-t-be-updated-with-pulumi/</url>
      
        <content type="html"><![CDATA[<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>Recently, we’re planing to use <code>Pulumi</code> to manage all current existing <code>AWS Glue Datacatalog</code> tables which are <code>Iceberg</code> format. For the <code>Iceberg</code> tables, I have post a blog before to talk about what is iceberg and what’s feature of it. Here is post link: <a href="https://stonefishy.github.io/2020/05/23/what-is-apache-iceberg/">https://stonefishy.github.io/2020/05/23/what-is-apache-iceberg/</a></p><p>To manage the AWS Glue Iceberg tables with <code>Pulumi</code>, due to our catalog table schemas are continue changes base on requirements. We need to do some technical POC whethere the pulumi can also support to update the iceberg metadata schema as well.</p><h2 id="Create-Glue-Iceberg-Table"><a href="#Create-Glue-Iceberg-Table" class="headerlink" title="Create Glue Iceberg Table"></a>Create Glue Iceberg Table</h2><p>We’re using <code>Pulumi</code> to manage the AWS Cloud Infrastructure. Before create glue table, a glue database is indeed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulumi</span><br><span class="line"><span class="keyword">import</span> pulumi_aws <span class="keyword">as</span> aws</span><br><span class="line"></span><br><span class="line">pulumi_database_test = aws.glue.CatalogDatabase(<span class="string">&quot;pulumi_database_test&quot;</span>,</span><br><span class="line">    create_table_default_permissions=[aws.glue.CatalogDatabaseCreateTableDefaultPermissionArgs(</span><br><span class="line">        permissions=[<span class="string">&quot;ALL&quot;</span>],</span><br><span class="line">        principal=aws.glue.CatalogDatabaseCreateTableDefaultPermissionPrincipalArgs(</span><br><span class="line">            data_lake_principal_identifier=<span class="string">&quot;IAM_ALLOWED_PRINCIPALS&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">    )],</span><br><span class="line">    name=<span class="string">&quot;pulumi_database_test&quot;</span>)</span><br></pre></td></tr></table></figure><p>Above code is to create a glue database named pulumi_database_test. Next Step is to create a glue table with <code>Iceberg</code> format.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulumi</span><br><span class="line"><span class="keyword">import</span> pulumi_aws <span class="keyword">as</span> aws</span><br><span class="line"></span><br><span class="line">pulumi_external_table_test = aws.glue.CatalogTable(<span class="string">&quot;pulumi_external_table_test&quot;</span>,</span><br><span class="line">    database_name=<span class="string">&quot;pulumi_database_test&quot;</span>,</span><br><span class="line">    name=<span class="string">&quot;pulumi_external_table_test&quot;</span>,</span><br><span class="line">    storage_descriptor=aws.glue.CatalogTableStorageDescriptorArgs(</span><br><span class="line">        additional_locations=[<span class="string">&quot;s3://xxx/pulumi_external_table_test/data&quot;</span>],</span><br><span class="line">        columns=[</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test1&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test2&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test3&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;boolean&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test4&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">        location=<span class="string">&quot;s3://xxx/pulumi_external_table_test&quot;</span>,</span><br><span class="line">    ),</span><br><span class="line">    table_type=<span class="string">&quot;EXTERNAL_TABLE&quot;</span>,</span><br><span class="line">        open_table_format_input=aws.glue.CatalogTableOpenTableFormatInputArgs(</span><br><span class="line">        iceberg_input=aws.glue.CatalogTableOpenTableFormatInputIcebergInputArgs(</span><br><span class="line">            metadata_operation=<span class="string">&quot;CREATE&quot;</span></span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">    opts=pulumi.ResourceOptions(protect=<span class="literal">False</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>There is important thing to notice here is that we need to set <code>open_table_format_input</code> with <code>iceberg_input</code> and set <code>metadata_operation</code> as <code>CREATE</code>. This is because we want to create a new Iceberg table with new schema. </p><p>Below is glue iceberg table created screenshot. You can see the 4 fields is added in schema and table format is <code>Apache Iceberg</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-table.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-table.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Glue Table Schema Created by Pulumi"/></div><span class="image-caption">AWS Glue Table Schema Created by Pulumi</span></div><p>Next, let’s check the important file that is <code>Apache Iceberg</code> metadata file which is located in <code>s3://xxx/pulumi_external_table_test/metadata/</code>.  Download this json file <code>00006-fd122b03-a7aa-42cf-8fec-001535a9fcf5.metadata.json</code> from <code>S3</code>. The 4 fields are defined in metadata json file. That is good. The metadata json is created as well when creating glue table.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-iceberg-metadata.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-iceberg-metadata.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Glue Table Iceberg metadata"/></div><span class="image-caption">AWS Glue Table Iceberg metadata</span></div><h2 id="Insert-new-data-in-Glue-iceberg-table"><a href="#Insert-new-data-in-Glue-iceberg-table" class="headerlink" title="Insert new data in Glue iceberg table"></a>Insert new data in Glue iceberg table</h2><p>Let’s using <code>AWS Athena</code> to insert a test data in the table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pulumi_database_test.pulumi_external_table_test(test1,test2,test3,test4) <span class="keyword">VALUES</span>(<span class="string">&#x27;1a&#x27;</span>, <span class="string">&#x27;2a&#x27;</span>, <span class="literal">true</span>, <span class="string">&#x27;4a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The data is insert success and we can use <code>SELECT</code> sql to query the data.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-iceberg-table-query.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-iceberg-table-query.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Query inserted data in AWS Glue Iceberg table"/></div><span class="image-caption">Query inserted data in AWS Glue Iceberg table</span></div><p>In Iceberg table, we can <code>insert</code>, <code>update</code>, <code>delete</code> data as well.</p><h2 id="Update-Glue-Iceberg-table-schema"><a href="#Update-Glue-Iceberg-table-schema" class="headerlink" title="Update Glue Iceberg table schema"></a>Update Glue Iceberg table schema</h2><p>Let’s add a new field <code>test5</code> in the glue iceberg table base on previous code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulumi</span><br><span class="line"><span class="keyword">import</span> pulumi_aws <span class="keyword">as</span> aws</span><br><span class="line"></span><br><span class="line">pulumi_external_table_test = aws.glue.CatalogTable(<span class="string">&quot;pulumi_external_table_test&quot;</span>,</span><br><span class="line">    database_name=<span class="string">&quot;pulumi_database_test&quot;</span>,</span><br><span class="line">    name=<span class="string">&quot;pulumi_external_table_test&quot;</span>,</span><br><span class="line">    storage_descriptor=aws.glue.CatalogTableStorageDescriptorArgs(</span><br><span class="line">        additional_locations=[<span class="string">&quot;s3://xxx/pulumi_external_table_test/data&quot;</span>],</span><br><span class="line">        columns=[</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test1&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test2&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test3&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;boolean&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test4&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            aws.glue.CatalogTableStorageDescriptorColumnArgs(</span><br><span class="line">                name=<span class="string">&quot;test5&quot;</span>,</span><br><span class="line">                <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">        ],</span><br><span class="line">        location=<span class="string">&quot;s3://xxx/pulumi_external_table_test&quot;</span>,</span><br><span class="line">    ),</span><br><span class="line">    table_type=<span class="string">&quot;EXTERNAL_TABLE&quot;</span>,</span><br><span class="line">        open_table_format_input=aws.glue.CatalogTableOpenTableFormatInputArgs(</span><br><span class="line">        iceberg_input=aws.glue.CatalogTableOpenTableFormatInputIcebergInputArgs(</span><br><span class="line">            metadata_operation=<span class="string">&quot;CREATE&quot;</span></span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">    opts=pulumi.ResourceOptions(protect=<span class="literal">False</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Execute <code>pulumi up</code> command to update the glue table schema.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-iceberg-update-by-pulumi.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-iceberg-update-by-pulumi.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi update AWS Glue Iceberg table schema"/></div><span class="image-caption">Pulumi update AWS Glue Iceberg table schema</span></div><p>After that, we can check the glue table schema is updated to add a new field <code>test5</code>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-iceberg-table-new-field.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-iceberg-table-new-field.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Glue iceberg table new field"/></div><span class="image-caption">AWS Glue iceberg table new field</span></div><p>Let’s insert new data in the table with new field <code>test5</code> and run it in <code>AWS Athena</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pulumi_database_test.pulumi_external_table_test(test1,test2,test3,test4,test5) <span class="keyword">VALUES</span>(<span class="string">&#x27;1b&#x27;</span>, <span class="string">&#x27;2b&#x27;</span>, <span class="literal">true</span>, <span class="string">&#x27;4b&#x27;</span>, <span class="string">&#x27;5b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The Athena execute show below errors:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COLUMN_NOT_FOUND: Insert column name does not exist in target table: test5. If a data manifest file was generated at &#x27;s3://xxxxxx/4c346103-60d2-45ea-9813-d7060bd5efe9/Unsaved/2024/10/09/37f67a67-4604-43cb-b113-af351c363a51-manifest.csv&#x27;, you may need to manually clean the data from locations specified in the manifest. Athena will not delete data in your account.</span><br><span class="line">This query ran against the &quot;pulumi_database_test&quot; database, unless qualified by the query. Please post the error message on our forum  or contact customer support  with Query Id: 37f67a67-4604-43cb-b113-af351c363a51</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-iceberg-athena-insert-failed.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-iceberg-athena-insert-failed.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Athena insert glue iceberg table failed"/></div><span class="image-caption">AWS Athena insert glue iceberg table failed</span></div><p>But when we check the <code>Apache Iceberg</code> metadata file again. The new field <code>test5</code> is not added in the new metadata file. That’s why the insert new data with new field failed.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-iceberg-metadata-not-updated.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-iceberg-metadata-not-updated.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Glue iceberg table metadata not updated"/></div><span class="image-caption">AWS Glue iceberg table metadata not updated</span></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In Pulumi documentation. The <code>metadata_operation</code> of <code>iceberg_input</code> in <code>open_table_format_input</code> is only support <code>CREATE</code> value. It seems it only can create the iceberg metadata file when glue table created.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-glue-iceberg-pulumi-doc.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-iceberg-pulumi-doc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi API Doc"/></div><span class="image-caption">Pulumi API Doc</span></div><p>It seems this is <code>pulumi</code> issue. It is not updating the iceberg metadata file when the glue table schema is updated. I’ve raised a issue to pulumi,  here is issue link: <a href="https://github.com/pulumi/pulumi/issues/17516">https://github.com/pulumi/pulumi/issues/17516</a>. Hope this issue can be fixed soon.</p><p>Mean while, I found there is same issue in <code>Terraform</code> which also can not update the iceberg metadata file when the glue table schema is updated. Terraform issue link here <a href="https://github.com/hashicorp/terraform-provider-aws/issues/36641">https://github.com/hashicorp/terraform-provider-aws/issues/36641</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pulumi </tag>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
            <tag> IaC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>User Survey Feedback Sentiment Analysis Base on AWS Cloud Solution</title>
      <link href="/2024/09/19/user-survey-feedback-sentiment-analysis-base-on-aws-cloud-solution/"/>
      <url>/2024/09/19/user-survey-feedback-sentiment-analysis-base-on-aws-cloud-solution/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The App Product User Survey Feedback Sentiment Analysis Solution is a cloud-based solution that uses AWS services to analyze user feedback and sentiment of the app product. The solution uses Amazon Comprehend to perform sentiment analysis on the feedback and Amazon S3 to store the data. The solution is designed to be scalable and cost-effective, and can be easily integrated into any app product.</p><p>Basically, our survey feedback file is Excel file that contains the user feedback of app and related application info such as OS verion and app version. The feedback text is different language from global users, so we need to translate the text into English using Amazon Translate.  Besides, the feedback file is generated monthly. So, the solution will extract the feedback data from the Excel file, translate the text into English using Amazon Translate, perform sentiment analysis using Amazon Comprehend, and store the data in Amazon S3. The solution will also provide a dashboard to visualize the sentiment analysis results.</p><p>The <code>Amazon Comprehend</code> is a natural language processing (NLP) service that can analyze text and extract insights such as sentiment, syntax, entities, and key phrases. </p><h2 id="Solution-Architecture"><a href="#Solution-Architecture" class="headerlink" title="Solution Architecture"></a>Solution Architecture</h2><p>Below is the high-level architecture of the solution:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-sentiment-analysis-solution.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-sentiment-analysis-solution.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Sentiment Analysis Solution"/></div><span class="image-caption">AWS Sentiment Analysis Solution</span></div><h3 id="AWS-Services-Used"><a href="#AWS-Services-Used" class="headerlink" title="AWS Services Used"></a>AWS Services Used</h3><p>The solution uses the following AWS services:<br><code>AWS S3</code>: Amazon Simple Storage Service (S3) is a scalable object storage service that can store large amounts of data.<br><code>AWS Lambda</code>: AWS Lambda is a serverless compute service that can run code without provisioning or managing servers.<br><code>AWS Comprehend</code>: Amazon Comprehend is a natural language processing (NLP) service that can analyze text and extract insights such as sentiment, syntax, entities, and key phrases.<br><code>AWS SNS</code>: Amazon Simple Notification Service (SNS) is a messaging service that can be used to send notifications to users.<br><code>AWS Translate</code>: Amazon Translate is a machine translation service that can translate text from one language to another.<br><code>AWS SQS</code>: Amazon Simple Queue Service (SQS) is a messaging service that can be used to store and process large amounts of messages.<br><code>AWS CloudWatch</code>: Amazon CloudWatch is a monitoring service that can be used to monitor the solution and generate metrics.<br><code>AWS Glue</code>: Amazon Glue is a serverless ETL (extract, transform, and load) service that can be used to extract data from the survey feedback file and store it in Amazon S3.<br><code>AWS Athena</code>: Amazon Athena is a serverless data analytics service that can be used to query and analyze data stored in Amazon S3.<br><code>AWS QuickSight</code>: Amazon QuickSight is a business intelligence (BI) service that can be used to create visualizations and dashboards based on the sentiment analysis results.</p><h3 id="Solution-Implementation"><a href="#Solution-Implementation" class="headerlink" title="Solution Implementation"></a>Solution Implementation</h3><p>The solution implementation is divided into the following steps:</p><ol><li>Create an Amazon S3 bucket as raw data bucket to store the survey feedback Excel file.</li><li>Uploaded a survey feedback Excel file to the S3 bucket to trigger the AWS Lambda function.</li><li>AWS Lambda to extract the survey feedback data from the Excel file, translate the text into English using Amazon Translate, sentiment analysis using Amazon Comprehend, and store the data as Parquet format in another Amazon S3 Bucket.</li><li>Create an Amazon SNS topic to notify users by email when the Lambda process data failed.</li><li>Create an Amazon CloudWatch to log the lamdba exeuction logs, generate metrics.</li><li>AWS Glue Crawler to extract the parquet data from the processed amazon S3 bucket and generate a table schema.</li><li>Using Amazon Athena to query the data from the processed Amazon S3 bucket.</li><li>Create an Amazon QuickSight dashboard to visualize the sentiment analysis results.</li></ol><p>The AWS Lambda core function code is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pyarrow <span class="keyword">as</span> pa</span><br><span class="line"><span class="keyword">import</span> pyarrow.parquet <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> urllib.parse <span class="keyword">as</span> urlparse</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">S3_TARGET_BUCKET = os.environ[<span class="string">&#x27;QE_SURVEY_PROCESSED_TARGET_BUCKET&#x27;</span>]</span><br><span class="line">SNS_TOPIC_ARN = os.environ[<span class="string">&#x27;SNS_TOPIC_ARN&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">translate_feedbacks</span>(<span class="params">feedbacks</span>):</span><br><span class="line">    translate = boto3.client(<span class="string">&#x27;translate&#x27;</span>)</span><br><span class="line">    feedbacks_en = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;calling AWS Translate to auto detect language and translate feedback, total <span class="subst">&#123;feedbacks.__len__()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> feedback <span class="keyword">in</span> feedbacks:</span><br><span class="line">        response = translate.translate_text(</span><br><span class="line">            Text=feedback,</span><br><span class="line">            SourceLanguageCode=<span class="string">&#x27;auto&#x27;</span>,  <span class="comment"># Detect source language automatically</span></span><br><span class="line">            TargetLanguageCode=<span class="string">&#x27;en&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        feedbacks_en.append(response[<span class="string">&#x27;TranslatedText&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Finished transalate sourceText: <span class="subst">&#123;feedback&#125;</span> to targetText: <span class="subst">&#123;response[<span class="string">&#x27;TranslatedText&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> feedbacks_en</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">comprehend_sentiment</span>(<span class="params">feedbacks</span>):</span><br><span class="line">    comprehend = boto3.client(<span class="string">&#x27;comprehend&#x27;</span>)</span><br><span class="line">    batch_size = <span class="number">25</span></span><br><span class="line">    all_sentiments = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;calling AWS Comprehend AI to analysis feedback, total <span class="subst">&#123;feedbacks.__len__()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(feedbacks), batch_size):</span><br><span class="line">        batch_feedbacks = feedbacks[i:i+batch_size]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;calling AWS Comprehend AI to analysis feedback, batch <span class="subst">&#123;i&#125;</span> - <span class="subst">&#123;i+batch_size&#125;</span>&quot;</span>)</span><br><span class="line">        comprehend_response = comprehend.batch_detect_sentiment(TextList=batch_feedbacks, LanguageCode=<span class="string">&#x27;en&#x27;</span>)</span><br><span class="line">        sentiments = [response[<span class="string">&#x27;Sentiment&#x27;</span>] <span class="keyword">for</span> response <span class="keyword">in</span> comprehend_response[<span class="string">&#x27;ResultList&#x27;</span>]]</span><br><span class="line">        all_sentiments.extend(sentiments)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> all_sentiments</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    s3 = boto3.client(<span class="string">&#x27;s3&#x27;</span>)</span><br><span class="line">    sns_client = boto3.client(<span class="string">&#x27;sns&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    source_bucket = event[<span class="string">&#x27;Records&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;s3&#x27;</span>][<span class="string">&#x27;bucket&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    source_key = urlparse.unquote_plus(event[<span class="string">&#x27;Records&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;s3&#x27;</span>][<span class="string">&#x27;object&#x27;</span>][<span class="string">&#x27;key&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    target_bucket = S3_TARGET_BUCKET</span><br><span class="line">    target_key = <span class="string">f&quot;qe-survey/<span class="subst">&#123;source_key.replace(<span class="string">&#x27;.xlsx&#x27;</span>, <span class="string">&#x27;.parquet&#x27;</span>)&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = s3.get_object(Bucket=source_bucket, Key=source_key)</span><br><span class="line">        excel_file = response[<span class="string">&#x27;Body&#x27;</span>].read()</span><br><span class="line">        </span><br><span class="line">        columns = [<span class="string">&#x27;ce_timestamp&#x27;</span>, <span class="string">&#x27;ce_host_id&#x27;</span>, <span class="string">&#x27;ce_host_os&#x27;</span>, <span class="string">&#x27;ce_hw&#x27;</span>, <span class="string">&#x27;ce_fw&#x27;</span>, <span class="string">&#x27;ce_sw&#x27;</span>, <span class="string">&#x27;survey_feedback&#x27;</span>, <span class="string">&#x27;survey_rating&#x27;</span>]</span><br><span class="line">        df = pd.read_excel(io.BytesIO(excel_file), usecols=columns)</span><br><span class="line">        df[<span class="string">&#x27;ce_timestamp&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;ce_timestamp&#x27;</span>], <span class="built_in">format</span>=<span class="string">&#x27;%Y-%m-%d %H:%M:%S:%f&#x27;</span>)</span><br><span class="line">        df[<span class="string">&#x27;survey_feedback&#x27;</span>] = df[<span class="string">&#x27;survey_feedback&#x27;</span>].astype(<span class="built_in">str</span>)</span><br><span class="line">        valid_df = df[df[<span class="string">&#x27;survey_feedback&#x27;</span>].apply(<span class="keyword">lambda</span> x: x.strip() != <span class="string">&#x27;&#x27;</span>)]</span><br><span class="line">        valid_df = valid_df[valid_df[<span class="string">&#x27;survey_feedback&#x27;</span>] != <span class="string">&#x27;nan&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        feedbacks = valid_df[<span class="string">&#x27;survey_feedback&#x27;</span>].tolist()</span><br><span class="line">        </span><br><span class="line">        feedbacks_en = translate_feedbacks(feedbacks)</span><br><span class="line">        valid_df[<span class="string">&quot;survey_feedback_en&quot;</span>]= feedbacks_en</span><br><span class="line">        valid_df[<span class="string">&#x27;sentiment&#x27;</span>] = comprehend_sentiment(feedbacks_en)</span><br><span class="line">        </span><br><span class="line">        parquet_buffer = io.BytesIO()</span><br><span class="line">        pq.write_table(pa.Table.from_pandas(valid_df), parquet_buffer)</span><br><span class="line">        parquet_buffer.seek(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        s3.put_object(Bucket=target_bucket, Key=target_key, Body=parquet_buffer)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;source_key&#125;</span> File converted to Parquet <span class="subst">&#123;target_key&#125;</span> and stored in S3 bucket <span class="subst">&#123;target_bucket&#125;</span> successfully&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;statusCode&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;body&#x27;</span>: json.dumps(<span class="string">f&#x27;<span class="subst">&#123;source_key&#125;</span> File converted to Parquet <span class="subst">&#123;target_key&#125;</span> and stored in S3 bucket <span class="subst">&#123;target_bucket&#125;</span> successfully&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Error processing <span class="subst">&#123;source_key&#125;</span>: <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line">        sns_client.publish(</span><br><span class="line">            TopicArn=SNS_TOPIC_ARN,</span><br><span class="line">            Subject=<span class="string">&#x27;Lambda Function Processing QE Survey Feedback Failure Notification&#x27;</span>,</span><br><span class="line">            Message=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>The above code extracts the survey feedback data from the Excel file, translates the text into English using Amazon Translate, performs sentiment analysis using Amazon Comprehend, and stores the data as Parquet format in another Amazon S3 Bucket. also notify users by email when the Lambda process data failed by using Amazon SNS. </p><p>Below is sentiment analysis results visualization using Amazon QuickSight:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-sentiment-analysis-result.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-sentiment-analysis-result.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Sentiment Analysis Results"/></div><span class="image-caption">AWS Sentiment Analysis Results</span></div><p>This is a high-level overview of the solution implementation. The solution can be further customized and enhanced based on the specific requirements of the app product.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> AWS </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Fix AWS S3 Event Replacing Space With &#39;+&#39; Character Sign in Object Key Name</title>
      <link href="/2024/09/10/aws-s3-event-replacing-space-with-character-sign-in-object-key-name/"/>
      <url>/2024/09/10/aws-s3-event-replacing-space-with-character-sign-in-object-key-name/</url>
      
        <content type="html"><![CDATA[<p>The issue with AWS S3 Event notifications is that it replaces spaces with ‘+’ character sign in the object key name. This can cause issues when trying to access the object in S3. It will occurs <code>NoSuchKey</code> error if not handling this issue properly.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Configured a S3 bucket put event notification to a Lambda function. The Lambda function will be triggered when a new object is uploaded to the S3 bucket. I upload a file named ‘2023 2nd quarter QE survey raw data.xlsx’ into S3 bucket, the Lambda function is triggered, but when I try to access the object in S3, I get <code>NoSuchKey</code> error in <code>AWS CloudWatch Logs</code>. Debugging shows that the object key name is ‘2023+2nd+quarter+QE+survey+raw+data.xlsx’ instead of ‘2023 2nd quarter QE survey raw data.xlsx’. It means the S3 event notification is replacing the space with ‘+’ character sign in the object key name.</p><p>The detail error is below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] NoSuchKey: An error occurred (NoSuchKey) when calling the GetObject operation: The specified key does not exist.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>There are two solutions to fix this issue, one is from AWS S3 upload file side, another is from Lambda function side.</p><h3 id="1-From-AWS-S3-upload-file-side"><a href="#1-From-AWS-S3-upload-file-side" class="headerlink" title="1. From AWS S3 upload file side:"></a>1. From AWS S3 upload file side:</h3><p>If you have control over the upload process, ensure that the keys are properly URL-encoded.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">s3_client = boto3.client(<span class="string">&#x27;s3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example key with spaces</span></span><br><span class="line">object_key = <span class="string">&quot;2023 2nd quarter QE survey raw data.xlsx&quot;</span></span><br><span class="line">encoded_key = urllib.parse.quote(object_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Upload the object</span></span><br><span class="line">s3_client.upload_file(<span class="string">&quot;/tmp/2023 2nd quarter QE survey raw data.xlsx&quot;</span>, <span class="string">&quot;my-bucket-name&quot;</span>, encoded_key)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This will ensure that the object key name is properly URL-encoded, which will prevent the S3 event notification from replacing spaces with ‘+’ character sign. The <code>urllib.parse.quote</code> function will replace spaces with ‘%20’ and ‘+’ with ‘%2B’.</p><h3 id="2-From-Lambda-function-side"><a href="#2-From-Lambda-function-side" class="headerlink" title="2. From Lambda function side:"></a>2. From Lambda function side:</h3><p>To fix this issue, we need to modify the Lambda function to handle the object key name with ‘+’ character sign. We can use the <code>urllib.parse</code> package to handle it. The package library provide the function <code>unquote_plus</code> to replace ‘+’ with space. Here is the code to handle the object key name with ‘+’ character sign:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib.parse <span class="keyword">as</span> urlparse</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line">s3 = boto3.client(<span class="string">&#x27;s3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    bucket_name = event[<span class="string">&#x27;Records&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;s3&#x27;</span>][<span class="string">&#x27;bucket&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    object_key = event[<span class="string">&#x27;Records&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;s3&#x27;</span>][<span class="string">&#x27;object&#x27;</span>][<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    <span class="comment"># Replace &#x27;+&#x27; with space</span></span><br><span class="line">    object_key = urlparse.unquote_plus(object_key)</span><br><span class="line">    <span class="comment"># Download the object</span></span><br><span class="line">    s3.download_file(bucket_name, object_key, <span class="string">&#x27;/tmp/file.txt&#x27;</span>)</span><br><span class="line">    <span class="comment"># Do something with the downloaded file</span></span><br><span class="line">    <span class="comment">#...</span></span><br></pre></td></tr></table></figure><p>In the above code, we first get the bucket name and object key from the S3 event notification. We then use the <code>urlparse.unquote_plus</code> function to replace ‘+’ with space in the object key name. Finally, we download the object using the <code>s3.download_file</code> function.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>To fix the issue with AWS S3 Event notifications replacing space with ‘+’ character sign in the object key name, we need to handle it properly in the Lambda function. We can use the <code>urllib.parse</code> package to handle it.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
            <tag> AWS S3 </tag>
            
            <tag> AWS Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 中的 IS DISTINCT FROM 语法详解</title>
      <link href="/2024/08/16/introduce-is-distinct-from-in-sql/"/>
      <url>/2024/08/16/introduce-is-distinct-from-in-sql/</url>
      
        <content type="html"><![CDATA[<p>在SQL查询中，比较操作符 <code>=</code> 通常用于检查两个值是否相等。然而，当涉及到处理缺失值（<code>NULL</code>）时，这种操作符就会面临挑战。为了解决这一问题，<span class='pbg green'>SQL 提供了 `IS DISTINCT FROM` 操作符，它用于精确比较两个值是否不同，即使这些值中有 NULL</span>。本文将详细介绍 IS DISTINCT FROM 的语法、解决的问题以及常见的使用场景。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>IS DISTINCT FROM 的基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expression1 <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> expression2</span><br></pre></td></tr></table></figure><p>其中 expression1 和 expression2 是要进行比较的两个表达式。 该操作符返回布尔值：TRUE、FALSE。</p><h2 id="主要解决的问题"><a href="#主要解决的问题" class="headerlink" title="主要解决的问题"></a>主要解决的问题</h2><p>在SQL中，<code>NULL</code> 值代表缺失或未知的数据。当两个表达式中至少有一个为 NULL 时，使用传统的比较操作符（如 &#x3D; 或 &lt;&gt;）进行比较会导致不确定的结果。具体来说：</p><ul><li>expression1 &#x3D; expression2 在 expression1 或 expression2 为 NULL 时会返回 UNKNOWN。</li><li>expression1 &lt;&gt; expression2 在 expression1 或 expression2 为 NULL 时也会返回 UNKNOWN。</li></ul><p>比如下面的查询语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">as</span> A1,</span><br><span class="line">    <span class="keyword">NULL</span> <span class="operator">&lt;&gt;</span> <span class="number">1</span> <span class="keyword">as</span> A2,</span><br><span class="line">    <span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">as</span> A3,</span><br><span class="line">    <span class="keyword">NULL</span> <span class="operator">&lt;&gt;</span> <span class="keyword">NULL</span> <span class="keyword">as</span> A4,</span><br><span class="line">    <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> <span class="keyword">as</span> A5, </span><br><span class="line">    <span class="number">1</span> <span class="operator">&lt;&gt;</span> <span class="number">1</span> <span class="keyword">as</span> A6</span><br></pre></td></tr></table></figure><p>会返回以下结果：</p><table><thead><tr><th>A1</th><th>A2</th><th>A3</th><th>A4</th><th>A5</th><th>A6</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td>TRUE</td><td>FALSE</td></tr></tbody></table><p>可以看到，当 expression1 或 expression2 为 NULL 时，传统的比较操作符会返回 UNKNOWN空值， 如上面的A1, A2, A3, A4的结果值，这就会导致不确定性。</p><p><code>IS DISTINCT FROM</code> 操作符的出现，解决了这些问题。它能正确处理 <code>NULL</code> 值，会返回 <code>TRUE 或 FALSE</code>，确保结果的可靠性。 在以下情况下返回 TRUE：</p><ul><li>expression1 和 expression2 都为 NULL。</li><li>expression1 和 expression2 的值不同（不论是否为 NULL）。</li></ul><p>而在 expression1 和 expression2 相等（包括都是 NULL）的情况下，IS DISTINCT FROM 返回 FALSE。 另外还有一个 <code>IS NOT DISTINCT FROM</code> 操作符，用于判断两个值是否相等。其用法一样，只是语义相反。</p><p>下面的例子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="keyword">NULL</span> <span class="keyword">as</span> B1,</span><br><span class="line">    <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="number">1</span> <span class="keyword">as</span> B2,</span><br><span class="line">    <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="number">2</span> <span class="keyword">as</span> B3,</span><br><span class="line">    <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="keyword">NULL</span> <span class="keyword">as</span> B4,</span><br><span class="line">    <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="number">1</span> <span class="keyword">as</span> B5,</span><br><span class="line">    <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="number">1</span> <span class="keyword">as</span> B6</span><br></pre></td></tr></table></figure><p>查询结果如下:</p><table><thead><tr><th>B1</th><th>B2</th><th>B3</th><th>B4</th><th>B5</th><th>B6</th></tr></thead><tbody><tr><td>TRUE</td><td>TRUE</td><td>TRUE</td><td>FALSE</td><td>FALSE</td><td>TRUE</td></tr></tbody></table><p>可以看到，IS DISTINCT FROM 正确处理 NULL 值，返回 TRUE 或 FALSE，确保结果的可靠性。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="数据清洗和验证"><a href="#数据清洗和验证" class="headerlink" title="数据清洗和验证"></a>数据清洗和验证</h3><p>在<code>数据清洗</code>和<code>数据验证</code>过程中，经常需要检查数据库中的值是否不同，包括对 NULL 值的处理。例如，比较用户输入的数据与现有记录，以确定是否有不同的记录。<span class='pbg warning'>使用 IS DISTINCT FROM 可以更准确地处理 NULL 值，避免出现错误或遗漏。</span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> username <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="string">&#x27;andrewsy&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这条查询会返回所有 username 与 ‘andrewsy’ 不同的记录，包括那些 username 为 NULL 的记录。</p><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><p>在更新数据时，使用 IS DISTINCT FROM 可以确保只有在数据实际变化时才进行更新，从而避免不必要的更新操作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users</span><br><span class="line"><span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;new_andrewsy@email.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> <span class="string">&#x27;new_andrewsy@email.com&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这条查询会更新所有 email 不同于 ‘<a href="mailto:&#x6e;&#101;&#x77;&#x5f;&#x61;&#x6e;&#100;&#x72;&#x65;&#119;&#x73;&#x79;&#64;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x6e;&#101;&#x77;&#x5f;&#x61;&#x6e;&#100;&#x72;&#x65;&#119;&#x73;&#x79;&#64;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a>‘ 的记录，包括那些 email 为 NULL 的记录。</p><h3 id="数据比较"><a href="#数据比较" class="headerlink" title="数据比较"></a>数据比较</h3><p>在进行复杂的数据比较时，尤其是涉及到 NULL 值时，IS DISTINCT FROM 提供了更直观的比较逻辑。例如，在合并两个数据集时，可以使用此操作符来确保唯一性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    dataset1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    dataset2</span><br><span class="line"><span class="keyword">ON</span> </span><br><span class="line">    dataset1.id <span class="keyword">IS</span> <span class="keyword">DISTINCT</span> <span class="keyword">FROM</span> dataset2.id</span><br></pre></td></tr></table></figure><p>这条查询会找出两个数据集中 id 不同的记录，包括 id 为 NULL 的情况。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><code>IS DISTINCT FROM</code> 是 SQL 标准中的一部分，但并非所有数据库系统都支持。具体的支持情况需要查阅数据库的文档。在使用 IS DISTINCT FROM 时，确保数据库系统的版本和文档中对此操作符的支持及行为一致。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>IS DISTINCT FROM</code> 是一个强大的工具，用于在 SQL 中处理包含 NULL 值的数据比较。它解决了传统比较操作符在处理 NULL 值时的不足，使得数据验证、更新和比较更加准确和可靠。在实际应用中，根据数据库系统的支持情况，合理使用 IS DISTINCT FROM 可以显著提高数据操作的精确性和健壮性。</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解 SQL 中的 LAG 函数</title>
      <link href="/2024/08/15/what-is-lag-in-sql/"/>
      <url>/2024/08/15/what-is-lag-in-sql/</url>
      
        <content type="html"><![CDATA[<p>最近在做数据分析，需要挖掘数据随时间变化的信息。所有数据物理存储在AWS S3上，通过AWS Glue Catalog和AWS Athena进行数据查询。AWS Athena支持SQL语言，可以对数据进行分析。在处理时间序列数据或分析行间变化时， SQL中的 <code>LAG</code> 函数和 <code>LEAD</code> 函数是非常有用的。下面，我们来看一下 LAG 函数的基本用法。</p><h2 id="什么是-LAG-函数？"><a href="#什么是-LAG-函数？" class="headerlink" title="什么是 LAG 函数？"></a>什么是 LAG 函数？</h2><p>在 SQL 中，<code>LAG</code> 函数是一种<code>窗口函数</code>，<span class='pbg warning'>用于获取当前行之前某一行的值。这在处理时间序列数据或分析行间变化时非常有用。LAG 函数可以让你访问当前行之前的行数据，而不需要使用子查询或自连接。</span> 而<code>LEAD</code> 函数则是获取当前行之后的行数据。他们的语法和用法类似，只是方向不同。</p><h2 id="LAG-函数的语法"><a href="#LAG-函数的语法" class="headerlink" title="LAG 函数的语法"></a>LAG 函数的语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">LAG</span>(expression, <span class="keyword">offset</span>, <span class="keyword">default</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> partition_column <span class="keyword">ORDER</span> <span class="keyword">BY</span> order_column)</span><br></pre></td></tr></table></figure><ul><li><code>expression</code>：要返回的列或计算结果。</li><li><code>offset</code>：向前查找的行数，默认为 1（即前一行）。</li><li><code>default</code>：当没有前行时返回的默认值，默认为 NULL。</li><li><code>PARTITION BY</code>：用于将数据分组。如果省略，LAG 会在整个结果集上应用。</li><li><code>ORDER BY</code>：确定行的顺序，LAG 函数会根据这个顺序来访问前面的行。</li></ul><h2 id="如何使用-LAG-函数"><a href="#如何使用-LAG-函数" class="headerlink" title="如何使用 LAG 函数"></a>如何使用 LAG 函数</h2><p><code>LAG</code> 函数在使用时通常与 <code>OVER</code> 子句一起使用。OVER 子句用于定义窗口（即应用 LAG 函数的范围）。在窗口中，<code>ORDER BY</code> 确定了行的顺序，<code>PARTITION BY</code> 则可以用来将数据分组，使每个分组内的计算互相独立。</p><h3 id="基本使用示例："><a href="#基本使用示例：" class="headerlink" title="基本使用示例："></a>基本使用示例：</h3><p>假设我们有一个名为 sales 的表，包含 sale_date 和 amount 列。我们想要比较每笔销售金额与前一笔销售金额的变化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    sale_date,</span><br><span class="line">    amount,</span><br><span class="line">    <span class="built_in">LAG</span>(amount, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sale_date) <span class="keyword">AS</span> previous_amount</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>在这个查询中：</p><p>amount 是当前销售金额。<br>LAG(amount, 1) 获取当前销售的前一笔销售金额（根据 sale_date 排序）。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>时间序列分析：<br>LAG 函数非常适合分析时间序列数据，帮助用户了解数据变化趋势。例如，分析每月的销售数据，找出增长或下降的趋势。</p></li><li><p>计算变化量：<br>可以计算当前值与前一值之间的变化量，例如销售额变化、温度变化等。</p></li><li><p>生成滚动报告：<br>LAG 可以用来生成带有前值的滚动报告，例如计算累计销售额，或者生成滞后数据用于报表。</p></li></ol><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>假设我们有一个销售记录表 monthly_sales，结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> monthly_sales (</span><br><span class="line">    <span class="keyword">month</span> <span class="type">DATE</span>,</span><br><span class="line">    sales_amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> monthly_sales (<span class="keyword">month</span>, sales_amount) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;2024-01-01&#x27;</span>, <span class="number">1000.00</span>),</span><br><span class="line">(<span class="string">&#x27;2024-02-01&#x27;</span>, <span class="number">1500.00</span>),</span><br><span class="line">(<span class="string">&#x27;2024-03-01&#x27;</span>, <span class="number">1200.00</span>),</span><br><span class="line">(<span class="string">&#x27;2024-04-01&#x27;</span>, <span class="number">1700.00</span>);</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>LAG</code> 函数来比较每个月的销售额与前一个月的销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">month</span>,</span><br><span class="line">    sales_amount,</span><br><span class="line">    <span class="built_in">LAG</span>(sales_amount, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">month</span>) <span class="keyword">AS</span> previous_month_sales,</span><br><span class="line">    sales_amount <span class="operator">-</span> <span class="built_in">LAG</span>(sales_amount, <span class="number">1</span>) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">month</span>) <span class="keyword">AS</span> sales_difference</span><br><span class="line"><span class="keyword">FROM</span> monthly_sales;</span><br></pre></td></tr></table></figure><p>查询结果：</p><table><thead><tr><th>month</th><th>sales_amount</th><th>previous_month_sales</th><th>sales_difference</th></tr></thead><tbody><tr><td>2024-01-01</td><td>1000.00</td><td>NULL</td><td>NULL</td></tr><tr><td>2024-02-01</td><td>1500.00</td><td>1000.00</td><td>500.00</td></tr><tr><td>2024-03-01</td><td>1200.00</td><td>1500.00</td><td>-300.00</td></tr><tr><td>2024-04-01</td><td>1700.00</td><td>1200.00</td><td>500.00</td></tr></tbody></table><p>在这个查询中：<br>previous_month_sales 显示了前一个月的销售额。<br>sales_difference 显示了当前月与前一个月的销售额差异。<br>通过上述查询，我们可以方便地分析销售数据的变化情况。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>LAG</code> 函数是一个强大的工具，可以帮助你在数据分析中处理行间的比较和变化。无论是用于时间序列数据、计算变化量，还是生成滚动报告，LAG 函数都能提供有价值的信息。它通常与 <code>OVER</code> 子句一起使用, 在OVER子句中，我们可以指定分组条件、排序条件等。<code>ORDER BY</code> 确定行的顺序，<code>PARTITION BY</code> 则可以用来将数据分组，使每个分组内的计算互相独立。</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to query tree-structured relation data in MySQL</title>
      <link href="/2024/08/02/how-to-query-tree-structured-relation-data-in-mysql/"/>
      <url>/2024/08/02/how-to-query-tree-structured-relation-data-in-mysql/</url>
      
        <content type="html"><![CDATA[<p>To query hierarchical relational data in <code>MySQL</code>, <code>recursive Common Table Expressions (CTEs)</code> are typically used. However, MySQL did not support recursive CTEs before version 8.0, so in earlier versions, <code>self-joins</code> are commonly used to handle such queries. Below is an example using a self-join, assuming we have a table employees that contains information about employees and their manager IDs (manager_id).</p><h2 id="Create-Table-and-Insert-Data"><a href="#Create-Table-and-Insert-Data" class="headerlink" title="Create Table and Insert Data"></a>Create Table and Insert Data</h2><p>Creating a table named <code>employees</code> with the following columns:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    manager_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (manager_id) <span class="keyword">REFERENCES</span> employees(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (id, name, manager_id) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;CEO&#x27;</span>, <span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;CTO&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;CFO&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Developer Lead&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Accountant Lead&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;Developer&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;Junior Developer&#x27;</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;Senior Accountant&#x27;</span>, <span class="number">5</span>),</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;Junior Accountant&#x27;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="Self-Join"><a href="#Self-Join" class="headerlink" title="Self-Join"></a>Self-Join</h2><p>We can search for all employees and their direct reports (subordinates) using a self-join. The following SQL statement will list all employees and their direct manager’s name.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.name <span class="keyword">AS</span> employee_name, e2.name <span class="keyword">AS</span> manager_name</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e2 <span class="keyword">ON</span> e1.manager_id <span class="operator">=</span> e2.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e1.manager_id, e1.id;</span><br></pre></td></tr></table></figure><p>We can also use a self-join to count the number of direct reports for each manager. The following SQL statement will list all managers and the number of their direct reports.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.name <span class="keyword">AS</span> manager_name, <span class="built_in">COUNT</span>(e2.id) <span class="keyword">AS</span> subordinate_count</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees e2 <span class="keyword">ON</span> e1.id <span class="operator">=</span> e2.manager_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e1.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> subordinate_count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="Recursive-Common-Table-Expressions-CTEs"><a href="#Recursive-Common-Table-Expressions-CTEs" class="headerlink" title="Recursive Common Table Expressions (CTEs)"></a>Recursive Common Table Expressions (CTEs)</h2><p>MySQL 8.0 introduced support for recursive CTEs, which allows us to query hierarchical relational data more efficiently. The following SQL statement will list all employees and their direct reports (subordinates) using a recursive CTE.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> subordinates <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> id, name, manager_id</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- root node CEO, we can replace with any other root node ID, for example 2 which is CTO</span></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> e.id, e.name, e.manager_id</span><br><span class="line">    <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> subordinates s <span class="keyword">ON</span> e.manager_id <span class="operator">=</span> s.id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> subordinates;</span><br></pre></td></tr></table></figure><p>But please note that this method only works for <code>MySQL 8.0</code> and above, as these versions support <code>recursive CTEs</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 8.x CTEs feature - WITH clause</title>
      <link href="/2024/07/26/mysql-8-x-ctes-feature-with-clause/"/>
      <url>/2024/07/26/mysql-8-x-ctes-feature-with-clause/</url>
      
        <content type="html"><![CDATA[<p>MySQL <code>Common Table Expressions (CTEs)</code> are a powerful feature introduced in <code>MySQL 8.0</code>. CTEs are a type of MySQL 8.0 that provide a way to create <code>temporary result sets</code> that can be referenced within a <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement. <span class='pbg danger'>The primary purpose of `CTEs` is to make complex queries more readable and manageable by breaking them down into simpler</span>.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/mysql/mysql-cte-with-clause.png" class="lazyload placeholder" data-srcset="/assets/images/mysql/mysql-cte-with-clause.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="MYSQL CTEs feature - WITH clause" style="width:600px;"/></div><span class="image-caption">MYSQL CTEs feature - WITH clause</span></div><h2 id="Purpose-of-CTEs"><a href="#Purpose-of-CTEs" class="headerlink" title="Purpose of CTEs"></a>Purpose of CTEs</h2><ul><li><strong>Readability</strong>: <code>CTEs</code> can make SQL queries more readable, especially for complex queries involving multiple subqueries or recursive operations.</li><li><strong>Modularity</strong>: They allow you to define a temporary result set that can be reused within the same query, promoting code reuse and reducing redundancy.</li><li><strong>Recursive Queries</strong>: CTEs support recursive queries, which are useful for querying hierarchical data like organizational charts, bill of materials, or tree structures.</li></ul><h2 id="How-to-Use-CTEs"><a href="#How-to-Use-CTEs" class="headerlink" title="How to Use CTEs"></a>How to Use CTEs</h2><p><code>CTEs</code> are defined using the <code>WITH</code> clause and can be referenced within the main query. Here’s the basic syntax:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> cte_name <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> cte_name;</span><br></pre></td></tr></table></figure><h3 id="Basic-CTE"><a href="#Basic-CTE" class="headerlink" title="Basic CTE"></a>Basic CTE</h3><p>Suppose you have a table employees and you want to find the average salary of employees in each department.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> DepartmentSalaries <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> DepartmentSalaries;</span><br></pre></td></tr></table></figure><p>In this example, DepartmentSalaries is a CTE that calculates the average salary for each department. The main query then selects from this CTE.</p><p><code>CTEs</code> feature also supports multiple temporary result sets in the same query, see below example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span></span><br><span class="line">  cte1 <span class="keyword">AS</span> (<span class="keyword">SELECT</span> a, b <span class="keyword">FROM</span> table1),</span><br><span class="line">  cte2 <span class="keyword">AS</span> (<span class="keyword">SELECT</span> c, d <span class="keyword">FROM</span> table2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> b, d <span class="keyword">FROM</span> cte1 <span class="keyword">JOIN</span> cte2 <span class="keyword">WHERE</span> cte1.a <span class="operator">=</span> cte2.c;</span><br></pre></td></tr></table></figure><p>Above sqls defines two CTEs cte1 and cte2 and then joins them using a WHERE clause.</p><h3 id="Recursive-CTE"><a href="#Recursive-CTE" class="headerlink" title="Recursive CTE"></a>Recursive CTE</h3><p>A CTE can refer to itself to define a <code>recursive CTE</code>. Common applications of recursive CTEs include series generation and traversal of hierarchical or tree-structured data.</p><p>Suppose you have a table employees with a self-referencing column manager_id to represent a hierarchy. You want to find all subordinates of a given manager.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> Subordinates <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> employee_id, manager_id, name</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> manager_id <span class="operator">=</span> <span class="number">1</span>  <span class="comment">-- Starting with the manager ID 1</span></span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> e.employee_id, e.manager_id, e.name</span><br><span class="line">    <span class="keyword">FROM</span> employees e</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Subordinates s <span class="keyword">ON</span> e.manager_id <span class="operator">=</span> s.employee_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Subordinates;</span><br></pre></td></tr></table></figure><p>In this example, Subordinates is a recursive CTE that starts with employees directly reporting to manager ID 1 and then recursively includes all their subordinates.</p><h2 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h2><ul><li><strong>Non-Recursive CTEs</strong>: These are straightforward and do not involve recursion. They are simply a way to define a temporary result set for use within the query.</li><li><strong>Recursive CTEs</strong>: These involve recursion and are useful for hierarchical or tree-structured data. They must include a <code>UNION ALL</code> clause to combine the initial result set with the recursive result set.</li><li><strong>Scope</strong>: CTEs are scoped to the query they are defined in and cannot be referenced outside of that query.</li></ul><p><code>CTEs</code> are a powerful tool in MySQL that can significantly improve the <code>readability</code> and <code>maintainability</code> of <code>complex SQL queries</code>.</p><h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links:"></a>Reference Links:</h2><p>For other scenarios, like use <code>WITH</code> clause in <code>UPDATE</code> or <code>DELETE</code> statements, please refer to the following links:</p><ul><li><strong>WITH (Common Table Expressions)</strong>: <a href="https://dev.mysql.com/doc/refman/8.4/en/with.html">https://dev.mysql.com/doc/refman/8.4/en/with.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Pulumi to Import the AWS Resources of the Other Region</title>
      <link href="/2024/07/04/using-pulumi-to-import-the-aws-resources-of-the-other-region/"/>
      <url>/2024/07/04/using-pulumi-to-import-the-aws-resources-of-the-other-region/</url>
      
        <content type="html"><![CDATA[<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>By default, the Pulumi import the resource in the region which is specified in the <code>Pulumi.yaml</code> or <code>Pulumi.&lt;stack-name&gt;.yaml</code> file. If we import the resources which is located in other regions. It will cause the error by using <code>pulumi import</code> command.</p><p>For example, we have quicksight resources such like DataSource, DataSet located in the <code>eu-west-1</code> region, we already manage these resources in the pulumi by using <code>pulumi import</code> CLI command. All resources are located in <code>eu-west-1</code> region. It is specified in the <code>Pulumi.yaml</code> or <code>Pulumi.&lt;stack-name&gt;.yaml</code> file like below.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">aws:region:</span> <span class="string">eu-west-1</span></span><br></pre></td></tr></table></figure><p>Now we also want to import the existing resources such like QuickSight user Groups into the pulumi. But the AWS Quicksight user Groups resources all are located in the <code>us-east-1</code> region. The pulumi will give us the error if we try to import the other region resource direclty.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-import-other-region-resource-error.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-import-other-region-resource-error.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>This is because the Pulumi is using default <code>provider</code> for the AWS resources. The default provider is set to the region which is specified in the <code>Pulumi.yaml</code> or <code>Pulumi.&lt;stack-name&gt;.yaml</code> file. So, if we want to import the resources from other region, we need to specify the provider for that region.</p><h2 id="Pulumi-Provider"><a href="#Pulumi-Provider" class="headerlink" title="Pulumi Provider"></a>Pulumi Provider</h2><p>A <code>Pulumi provider</code> is a plugin that enables Pulumi to interact with a specific cloud provider or service. These providers are responsible for translating the Pulumi code into the appropriate API calls for the target cloud platform. </p><p>By default, each provider uses its package’s global configuration settings, which are controlled by your stack’s configuration. You can set information such as your cloud provider credentials with environment variables and configuration files. If you store this data in standard locations, Pulumi knows how to retrieve them. For example, you can run below command to set the AWS region to <code>eu-west-1</code> region for the AWS provider configuration.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi config set aws:region eu-west-1</span><br></pre></td></tr></table></figure><p>This command actually will set the <code>aws:region</code> configuration value for the AWS provider in your Pulumi stack yaml file. You can also define the provider in your pulumi code, and create related resources in the specified region.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulumi</span><br><span class="line"><span class="keyword">import</span> pulumi_aws <span class="keyword">as</span> aws</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new provider for the us-east-1 region</span></span><br><span class="line">us_east_1_provider = aws.Provider(<span class="string">&#x27;us-east-1&#x27;</span>, region=<span class="string">&#x27;us-east-1&#x27;</span>)</span><br><span class="line"><span class="comment"># Create the Quicksight Groups resources in the us-east-1 region</span></span><br><span class="line">quicksight_group = aws.quicksight.Group(</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>,</span><br><span class="line">    aws_account_id=<span class="string">&quot;&lt;aws-account-id&gt;&quot;</span>,</span><br><span class="line">    group_name=<span class="string">&quot;dev&quot;</span>,</span><br><span class="line">    opts=pulumi.ResourceOptions(</span><br><span class="line">        provider=us_east_1_provider</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>In above code, we create a new provider for the <code>us-east-1</code> region and then create the Quicksight user Groups resources in the <code>us-east-1</code> region. The <code>provider</code> option is used to specify the provider to use for the resource. Even we have global configuration for the <code>eu-west-1</code> region, we can still create the resources in the <code>us-east-1</code> region by specifying the provider.</p><h2 id="Importing-the-AWS-Resources-of-the-Other-Region"><a href="#Importing-the-AWS-Resources-of-the-Other-Region" class="headerlink" title="Importing the AWS Resources of the Other Region"></a>Importing the AWS Resources of the Other Region</h2><p>Back to previous topic, if we want to import the AWS Quicksight Users and Groups resources from the <code>us-east-1</code> region in current pulumi stack from the command line, we need to specify the provider for the pulumi command line. The Pulumi CLI import command takes an additional <code>--provider</code> option to specify the provider to use for the import.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi import aws:quicksight/group:Group dev xxxxxx/default/dev --provider name=urn</span><br></pre></td></tr></table></figure><p>In above command, we are importing the <code>aws:quicksight/group:Group</code> resource with the <code>dev</code> name in the provider. For the <code>--provider</code> option, The <code>name</code> is the name of the provider to use for the import, and <code>urn</code> is the URN of the provider to use for the import. Typically, the resource urns in pulumis is below format.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urn:pulumi:production::acmecorp-website::custom:resources:Resource$aws:s3/bucket:Bucket::my-bucket</span><br><span class="line">           ^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^</span><br><span class="line">           &lt;stack-name&gt; &lt;project-name&gt;   &lt;parent-type&gt;             &lt;resource-type&gt;       &lt;resource-name&gt;</span><br></pre></td></tr></table></figure><p>If there is no <code>parent-type</code> in the resource urn, the urns will be like below format.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urn:pulumi:production::acmecorp-website::aws:s3/bucket:Bucket::my-bucket</span><br><span class="line">           ^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^</span><br><span class="line">           &lt;stack-name&gt; &lt;project-name&gt;   &lt;resource-type&gt;       &lt;resource-name&gt;</span><br></pre></td></tr></table></figure><p>For the details of Pulumi Resources URNs, please refer to the <a href="https://www.pulumi.com/docs/concepts/resources/names/#urns">Pulumi URNs</a>.</p><p>In our scenario, we can import the Quicksight Groups resources from the <code>us-east-1</code> region by using the provider. <span class='pbg warning'>There is one thing is important to note</span> For example, we don’t have any <code>Provider</code> resources for the <code>us-east-1</code> region in our current stack. If we run below command to import the Quicksight Groups resources from the <code>us-east-1</code> region, it will fail. Below is an examle of the full import resource with <code>--provider</code> option</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi import aws:quicksight/group:Group dev &lt;aws-account-id&gt;/default/dev --provider us_east_1_provider=urn:pulumi:&lt;pulumi-project-name&gt;::quicksight::pulumi:providers:aws::us_east_1_provider</span><br></pre></td></tr></table></figure><p>The <code>&lt;aws-account-id&gt;</code> and <code>&lt;pulumi-project-name&gt;</code> are placeholder just for example. Without the <code>Provider</code> resource for the <code>us-east-1</code> region, the import command will fail as below error message.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Preview failed: bad provider reference &#x27;us_east_1_provider=urn:pulumi:&lt;pulumi-project-name&gt;::quicksight::pulumi:providers:aws::us_east_1_provider&#x27; is not valid URN&#x27;</span><br></pre></td></tr></table></figure><p>The error full screenshot is below.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-import-without-provider-error.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-import-without-provider-error.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>To fix this issue, we need to create the <code>Provider</code> resource for the <code>us-east-1</code> region in our current stack. We can do this by adding the <code>Provider</code> resource in in our Pulumi code and using <code>Pulumi up</code> command to create the resource.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulumi</span><br><span class="line"><span class="keyword">import</span> pulumi_aws <span class="keyword">as</span> aws</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new provider for the us-east-1 region</span></span><br><span class="line">us_east_1_provider = aws.Provider(<span class="string">&#x27;us-east-1&#x27;</span>, region=<span class="string">&#x27;us-east-1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>After that, we can run the import command again to import the Quicksight Groups resources from the <code>us-east-1</code> region. And now you will see the Quicksight Groups resources of the <code>us-east-1</code> region in your pulumi stack.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-import-provider-success.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-import-provider-success.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To import the AWS resources of the other region, we need to specify the provider for the pulumi command line. The Pulumi CLI import command takes an additional <code>--provider</code> option to specify the provider to use for the import. The <code>provider</code> resource should be created in pulumi before importing the resources of the other region resource.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pulumi </tag>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
            <tag> IaC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras3.0 - A Multi-framework Machine Learning Library</title>
      <link href="/2024/06/25/keras3-0-a-multi-framework-machine-learning-library/"/>
      <url>/2024/06/25/keras3-0-a-multi-framework-machine-learning-library/</url>
      
        <content type="html"><![CDATA[<p><code>Keras</code>3 is a full rewrite of Keras that enables you to run your Keras workflows on top of either <code>JAX</code>, <code>TensorFlow</code>, or <code>PyTorch</code>, and that unlocks brand new large-scale model training and deployment capabilities. It’s multi-framework machine learning, meaning that you can use Keras to train models on top of different backends, and deploy them to different platforms. You can also use Keras as a low-level cross-framework language to develop custom components such as layers, models, or metrics that can be used in native workflows in JAX, TensorFlow, or PyTorch — with one codebase.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/keras3-multi-framework-machine-learning.jpg" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/keras3-multi-framework-machine-learning.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Keras 3 Multi-framework Machine Learning"/></div><span class="image-caption">Keras 3 Multi-framework Machine Learning</span></div><h2 id="What’s-New-in-Keras-3"><a href="#What’s-New-in-Keras-3" class="headerlink" title="What’s New in Keras 3?"></a>What’s New in Keras 3?</h2><p>Keras 3 introduces several exciting features that enhance its usability, performance, and flexibility:</p><h4 id="Unified-API"><a href="#Unified-API" class="headerlink" title="Unified API"></a>Unified API</h4><p>Keras 3 continues to build on its legacy of a user-friendly and intuitive API. It aims to unify the high-level and low-level APIs more seamlessly, providing a consistent experience across different backends such as TensorFlow, PyTorch, and others.</p><h4 id="Multi-backend-Support"><a href="#Multi-backend-Support" class="headerlink" title="Multi-backend Support"></a>Multi-backend Support</h4><p>While Keras has traditionally been closely associated with TensorFlow, Keras 3 expands its compatibility to other popular deep learning frameworks. This means you can now use Keras with PyTorch and other backends, leveraging Keras’ high-level abstractions and ease of use across different environments.</p><h4 id="Improved-Performance"><a href="#Improved-Performance" class="headerlink" title="Improved Performance"></a>Improved Performance</h4><p>Efforts have been made in Keras 3 to optimize performance across various operations, ensuring faster execution times and better utilization of hardware resources. This improvement is crucial for handling larger datasets and complex models efficiently.</p><h4 id="Enhanced-Model-Deployment"><a href="#Enhanced-Model-Deployment" class="headerlink" title="Enhanced Model Deployment"></a>Enhanced Model Deployment</h4><p>Keras 3 simplifies the process of deploying trained models to production environments. With streamlined APIs for model serialization and deployment tools, it becomes easier to integrate Keras models into real-world applications.</p><h4 id="Expanded-Model-Zoo"><a href="#Expanded-Model-Zoo" class="headerlink" title="Expanded Model Zoo"></a>Expanded Model Zoo</h4><p>Keras 3 comes with an expanded model zoo, offering <code>pre-trained models</code> for a wider range of tasks and domains. This includes vision models (e.g., ResNet, EfficientNet), NLP models (e.g., BERT, GPT), and other specialized architectures, all accessible through a unified interface.</p><h4 id="Advanced-AutoML-Capabilities"><a href="#Advanced-AutoML-Capabilities" class="headerlink" title="Advanced AutoML Capabilities"></a>Advanced AutoML Capabilities</h4><p>The new release includes improved AutoML capabilities, allowing developers to automate model selection, hyperparameter tuning, and architecture search. This feature can significantly accelerate the model development process, especially for beginners and researchers exploring new domains.</p><h2 id="Pre-trained-Models"><a href="#Pre-trained-Models" class="headerlink" title="Pre-trained Models"></a>Pre-trained Models</h2><p>There’s a wide range of pretrained models that you can start using today with Keras 3. About 40 Keras Applications models (the <code>keras.applications</code> namespace) are available in all backends. These models are pre-trained on large datasets and can be used for transfer learning or fine-tuning. It includes:</p><h4 id="Pre-trained-Models-for-Natural-Language-Processing"><a href="#Pre-trained-Models-for-Natural-Language-Processing" class="headerlink" title="Pre-trained Models for Natural Language Processing"></a>Pre-trained Models for Natural Language Processing</h4><ul><li>Albert</li><li>Bart</li><li>Bert</li><li>Bloom</li><li>DebertaV3</li><li>DistilBert</li><li>Gemma</li><li>Electra</li><li>Falcon</li><li>FNet</li><li>GPT2</li><li>Llama</li><li>Llama3</li><li>Mistral</li><li>OPT</li><li>PaliGemma</li><li>Phi3</li><li>Roberta</li><li>XLMRoberta</li></ul><h4 id="Pre-trained-Models-for-Computer-Vision"><a href="#Pre-trained-Models-for-Computer-Vision" class="headerlink" title="Pre-trained Models for Computer Vision"></a>Pre-trained Models for Computer Vision</h4><ul><li>CSPDarkNet</li><li>EfficientNetV2</li><li>MiT</li><li>MobileNetV3</li><li>ResNetV1</li><li>ResNetV2</li><li>VideoSwinB</li><li>VideoSwinS</li><li>VideoSwinT</li><li>VitDet</li><li>YOLOV8</li><li>ImageClassifier</li><li>VideoClassifier</li><li>CLIP</li><li>RetinaNet</li></ul><h2 id="How-to-Get-Started-with-Keras-3"><a href="#How-to-Get-Started-with-Keras-3" class="headerlink" title="How to Get Started with Keras 3?"></a>How to Get Started with Keras 3?</h2><h4 id="1-Install-Keras-3"><a href="#1-Install-Keras-3" class="headerlink" title="1.Install Keras 3"></a>1.Install Keras 3</h4><p>Ensure you have the latest version of Keras installed. You can install Keras via pip if you haven’t already:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade keras</span><br></pre></td></tr></table></figure><h4 id="2-Define-Model"><a href="#2-Define-Model" class="headerlink" title="2.Define Model"></a>2.Define Model</h4><p>Use Keras’ high-level API to define your deep learning model. Here’s a simple example of a convolutional neural network (CNN) for image classification:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv2D, MaxPooling2D, Flatten, Dense</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">    Conv2D(<span class="number">32</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>, input_shape=(<span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>)),</span><br><span class="line">    MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    Conv2D(<span class="number">64</span>, (<span class="number">3</span>, <span class="number">3</span>), activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    MaxPooling2D((<span class="number">2</span>, <span class="number">2</span>)),</span><br><span class="line">    Flatten(),</span><br><span class="line">    Dense(<span class="number">64</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    Dense(<span class="number">10</span>, activation=<span class="string">&#x27;softmax&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="3-Compile-and-Train-Model"><a href="#3-Compile-and-Train-Model" class="headerlink" title="3.Compile and Train Model"></a>3.Compile and Train Model</h4><p>Compile the model with a loss function, optimizer, and metrics, then train it on your data:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=<span class="string">&#x27;sparse_categorical_crossentropy&#x27;</span>,</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.fit(train_images, train_labels, epochs=<span class="number">10</span>, batch_size=<span class="number">32</span>, validation_data=(val_images, val_labels))</span><br></pre></td></tr></table></figure><h4 id="4-Deploy-models"><a href="#4-Deploy-models" class="headerlink" title="4.Deploy models"></a>4.Deploy models</h4><p>Keras 3 provides a simple and unified interface for deploying trained models to production environments. You can serialize your models and deploy them using tools such as TensorFlow Serving, PyTorch Hub, or JAX Hub. </p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Keras 3 bring a lot of exciting features to the table, including multi-backend support, improved performance, and enhanced model deployment. It also includes a wide range of pre-trained models for natural language processing and computer vision, making it easy to get started with deep learning. With these features, Keras 3 is a powerful and flexible tool for building and deploying deep learning models.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> PyTorch </tag>
            
            <tag> JAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Security - Understanding the X-Frame-Options HTTP Header</title>
      <link href="/2024/06/14/understanding-the-x-frame-options-http-header/"/>
      <url>/2024/06/14/understanding-the-x-frame-options-http-header/</url>
      
        <content type="html"><![CDATA[<p>Recently, we build a frontend website as a nginx docker image, before go live on production. We asking the security team to do the security scan for the website on stage environment. One of security issues indicates the <code>X-Frame-Options</code> HTTP header is not set properly. It will cause the website to be vulnerable to clickjacking attacks.</p><h2 id="Clickjacking-Attack"><a href="#Clickjacking-Attack" class="headerlink" title="Clickjacking Attack"></a>Clickjacking Attack</h2><p><code>Clickjacking</code> is a type of security vulnerability that allows an attacker to trick a user into clicking on a link or button on a malicious website that is designed to look like the legitimate website. This can happen when the attacker embeds the malicious website within a frame on the legitimate website, which can trick the user into clicking on the malicious link or button.</p><p>To prevent clickjacking attacks, we can use the <code>X-Frame-Options</code> HTTP header to specify whether a web page can be displayed within a frame or iframe. This header can have three possible values: <code>DENY</code>, <code>SAMEORIGIN</code>, and <code>ALLOW-FROM</code> uri.</p><h2 id="What-is-X-Frame-Options"><a href="#What-is-X-Frame-Options" class="headerlink" title="What is X-Frame-Options?"></a>What is X-Frame-Options?</h2><p>The X-Frame-Options is an HTTP response header used to control whether a web page can be displayed within a frame or iframe. It helps to mitigate clickjacking attacks by preventing malicious websites from embedding a vulnerable site within a frame and tricking users into taking unintended actions.</p><h2 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works"></a>How it works</h2><p>The X-Frame-Options header can have three possible values: DENY, SAMEORIGIN, and ALLOW-FROM uri.</p><p><code>DENY</code>: This value prevents the page from being displayed in a frame, regardless of the site attempting to do so.</p><p><code>SAMEORIGIN</code>: With this value, the page can be displayed in a frame on the same origin as the page itself. This restricts the frame to the same origin as the parent page.</p><p><code>ALLOW-FROM uri</code>: Here, the page can only be displayed in a frame on the specified origin.</p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>To implement the X-Frame-Options header, simply include the header in the server’s HTTP response. It can be implemented on code programming, server configuration, or web server configuration.</p><h3 id="Code-Programming"><a href="#Code-Programming" class="headerlink" title="Code Programming"></a>Code Programming</h3><p>Below is an example of how to set the header using different programming languages:</p><h4 id="Using-Node-js-Express"><a href="#Using-Node-js-Express" class="headerlink" title="Using Node.js (Express)"></a>Using Node.js (Express)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set X-Frame-Options header to DENY</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;X-Frame-Options&#x27;</span>, <span class="string">&#x27;DENY&#x27;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Using-Django-Python"><a href="#Using-Django-Python" class="headerlink" title="Using Django (Python)"></a>Using Django (Python)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set X-Frame-Options header to SAMEORIGIN</span></span><br><span class="line">response[<span class="string">&#x27;X-Frame-Options&#x27;</span>] = <span class="string">&#x27;SAMEORIGIN&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Using-ASP-NET-C"><a href="#Using-ASP-NET-C" class="headerlink" title="Using ASP.NET (C#)"></a>Using ASP.NET (C#)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set X-Frame-Options header to ALLOW-FROM</span></span><br><span class="line">Response.AddHeader(<span class="string">&quot;X-Frame-Options&quot;</span>, <span class="string">&quot;ALLOW-FROM https://example.com&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Server-Configuration"><a href="#Server-Configuration" class="headerlink" title="Server Configuration"></a>Server Configuration</h3><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>To configure Nginx to send the X-Frame-Options header, add this either to your http, server or location configuration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_header X-Frame-Options SAMEORIGIN always;</span><br></pre></td></tr></table></figure><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>To configure Apache to send the X-Frame-Options header for all pages, add this to your site’s configuration:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header always set X-Frame-Options &quot;DENY&quot;</span><br></pre></td></tr></table></figure><h4 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h4><p>To configure IIS to send the X-Frame-Options header for all pages, add this to your web.config file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;X-Frame-Options&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DENY&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>To demonstrate the effectiveness of the X-Frame-Options header, we can create a parent html page, and a child html page that is embedded within a frame in the parent page.</p><h3 id="Parent-HTML-Page"><a href="#Parent-HTML-Page" class="headerlink" title="Parent HTML Page"></a>Parent HTML Page</h3><p>Parent HTML page includes the iframe of the child page. The child page is hosted on a different domain (<a href="http://localhost:3333/child.html">http://localhost:3333/child.html</a>) to demonstrate the effectiveness of the X-Frame-Options header. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Parent Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parent Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is parent page. below is the iframe of child page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:3333/child.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">sandbox</span>=<span class="string">&quot;allow-scripts&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Child-HTML-Page"><a href="#Child-HTML-Page" class="headerlink" title="Child HTML Page"></a>Child HTML Page</h3><p>Child HTML page is a simple page that displays a message. It is hosted on the domain (<a href="http://localhost:3333/child.html">http://localhost:3333/child.html</a>) by using <code>httpster</code> tool.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Child Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Child Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a child page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>To test the effectiveness of the X-Frame-Options header, we can open the parent page in a browser and observe the behavior.</p><h4 id="Without-X-Frame-Options-Header"><a href="#Without-X-Frame-Options-Header" class="headerlink" title="Without X-Frame-Options Header"></a>Without X-Frame-Options Header</h4><p>By default, the <code>httpster</code> does not add the X-Frame-Options header to the response. Therefore, the child page can be embedded within a frame on the parent page. See below screenshot, these is no X-Frame-Options header in the response.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/frontend/without-x-frame-options-response-header.png" class="lazyload placeholder" data-srcset="/assets/images/frontend/without-x-frame-options-response-header.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Without X-Frame-Options Header"/></div><span class="image-caption">Without X-Frame-Options Header</span></div><h4 id="With-X-Frame-Options-Header"><a href="#With-X-Frame-Options-Header" class="headerlink" title="With X-Frame-Options Header"></a>With X-Frame-Options Header</h4><p>With the X-Frame-Options header set to DENY, the child page cannot be embedded within a frame on the parent page.</p><p>To test the X-Frame-Options header, we need to modify the <code>httpster</code> server source code to add the X-Frame-Options header to the response. Actually, the <code>httpster</code> tool is a simple HTTP server base on node express. We can modify the <code>app.use</code> function to set the X-Frame-Options header in the httpster source code. </p><p>Here is the modified <code>app.use</code> function with the X-Frame-Options header set to DENY:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">   res.<span class="title function_">setHeader</span>(<span class="string">&#x27;X-Frame-Options&#x27;</span>, <span class="string">&#x27;DENY&#x27;</span>);</span><br><span class="line">   <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We can then open the parent page in a browser and observe the behavior. See below screenshot, these is with X-Frame-Options header value set to DENY in the response. And the child page is blocked from being embedded within a frame on the parent page.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/frontend/with-x-frame-options-response-header-deny.png" class="lazyload placeholder" data-srcset="/assets/images/frontend/with-x-frame-options-response-header-deny.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="With X-Frame-Options Header Value DENY"/></div><span class="image-caption">With X-Frame-Options Header Value DENY</span></div><p>And also, there is error message in the console of the browser, which indicates that the child page is blocked from being embedded within a frame on the parent page.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/frontend/with-x-frame-opitons-response-header-deny-console.png" class="lazyload placeholder" data-srcset="/assets/images/frontend/with-x-frame-opitons-response-header-deny-console.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="With X-Frame-Options Header Value DENY Console Error"/></div><span class="image-caption">With X-Frame-Options Header Value DENY Console Error</span></div><p>You can also test the X-Frame-Options header with different values such as SAMEORIGIN and ALLOW-FROM uri to see how it affects the behavior of the website.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>By implementing the X-Frame-Options header, web developers can enhance the security of their websites and protect users from potential clickjacking attacks. It is recommended to set this header appropriately based on the specific requirements of the web application.</p><p>Remember to test the effectiveness of the header using browser developer tools and security testing tools to ensure that it is properly configured.</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Points of AWS China CloudFront You Need to Notice</title>
      <link href="/2024/04/18/the-points-of-aws-china-cloudfront-you-need-to-notice/"/>
      <url>/2024/04/18/the-points-of-aws-china-cloudfront-you-need-to-notice/</url>
      
        <content type="html"><![CDATA[<p>There are much difference between AWS Global and AWS China. The background of this blog is that I’m responsible for migrating the aws global application to aws china. The application already go lived on AWS Global. The application is  collecting the user inforamtion and for business logic. The business wants this application to serve China customer. Due to the application regulation,  the application needs to deployed in AWS China and store the user information in AWS China.</p><p>The application is using below AWS services:</p><ul><li>AWS S3: store the static website assets and user information.</li><li>AWS ALB: the load balancer for the application.</li><li>AWS ASG: auto scaling group for the application.</li><li>AWS ECR: store the application container image.</li><li>AWS ECS: run the application container.</li><li>AWS ACM: manage the SSL certificate.</li><li>AWS WAF: web application firewall.</li><li>AWS VPC: virtual private cloud.</li><li>AWS S3 VPC Gateway: access the S3 bucket from the VPC.</li><li>AWS CloudWatch: monitor the application logs, performance and alarms.</li><li>AWS SNS: notificate the stack holder when application performance is abnormal.</li><li>AWS CloudFront: serve the static website and user information.</li></ul><h2 id="AWS-China"><a href="#AWS-China" class="headerlink" title="AWS China"></a>AWS China</h2><p>The AWS China is a separate entity operated by a local partner in compliance with Chinese regulations. Data centers located in Beijing and Ningxia. The operator is different between Beijing and Ningxia. Beijing region operated by Sinnet(光环新网)，Ningxia region operated by NWCD(西云数据). Basically， the service price of Ningxia region is cheaper than Beijing region. You can find the detail pricing in the AWS China link <a href="https://calculator.amazonaws.cn/#/">https://calculator.amazonaws.cn/#/</a>. AWS Fargate priciing is here <a href="https://www.amazonaws.cn/en/fargate/pricing">https://www.amazonaws.cn/en/fargate/pricing</a></p><h2 id="Difference-between-AWS-Global-and-AWS-China"><a href="#Difference-between-AWS-Global-and-AWS-China" class="headerlink" title="Difference between AWS Global and AWS China"></a>Difference between AWS Global and AWS China</h2><p>The AWS China has many limiation and difference with AWS Global. And also some new services are not available in AWS China. When you migrate the application to AWS China, you need to consider the below points:</p><ol><li>AWS China has different pricing policy. The pricing policy is different between Beijing and Ningxia. </li><li>The Infrastructure code is different between AWS Global and AWS China. The code need to be modified to adapt to AWS China.</li><li>The Website should be do the ICP filling and Goverment Filling. (域名备案，网安备案)</li></ol><h3 id="Infrastructure-as-Code"><a href="#Infrastructure-as-Code" class="headerlink" title="Infrastructure as Code"></a>Infrastructure as Code</h3><p>We’re using <code>Pulumi</code> to manage the infrastructure as code. Pulumi is a tool for developing, building, and deploying cloud applications and infrastructure. It supports multiple cloud providers including AWS, Azure, GCP, and Kubernetes.<br>There are AWS Service Resource definition is different with AWS Global on AWS China. In AWS China there is an <code>amazonaws.com.cn</code> string for endpoint, and <code>aws-cn</code> ARN prefix. The code need to be modified to adapt to AWS China.</p><h4 id="AWS-China-1"><a href="#AWS-China-1" class="headerlink" title="AWS China"></a>AWS China</h4><ul><li>AWS EndPoint: xxxxxxx.s3.cn-northwest-1.<strong>amazonaws.com.cn</strong>&#x2F;example.txt</li><li>AWS ARNs: arn:<strong>aws-cn</strong>:s3:::xxxxxxx&#x2F;example.txt</li></ul><h4 id="AWS-Global"><a href="#AWS-Global" class="headerlink" title="AWS Global"></a>AWS Global</h4><ul><li>AWS EndPoint: xxxxxxx.s3.cn-northwest-1.<strong>amazonaws.com</strong>&#x2F;example.txt</li><li>AWS ARNs: arn:<strong>aws</strong>:s3:::xxxxxxx&#x2F;example.txt</li></ul><h3 id="CloudFront"><a href="#CloudFront" class="headerlink" title="CloudFront"></a>CloudFront</h3><p>In our application is much difference between AWS Global and AWS China, especially the CloudFront.</p><ul><li>Requires ICP filing and domain name filing in AWS China.</li><li>The CloudFront provides domain name like “*.cloudfront.cn” which cannot be used in for website serving in AWS China. You can not access the website through the CloudFront domain name. It returns 403 Forbidden error.</li><li>The SSL&#x2F;TLS certificates for CloudFront does not support the Amazon Certificate Manager in AWS China. It requires to use SSL&#x2F;TLS certificate from third party, and then - - import certificate in IAM. It is only support IAM to store the certificates for CloudFront in AWS China.</li><li>The CloudFront does not supports the Amazon WAF in AWS China.</li><li>The Cache polices and Origin request polices does not support in AWS China</li><li>The Lambda@Edge is not available in AWS China.</li><li>CloudFront origin access only supports legacy access identities OAI for S3 bucket, does not support OAC in AWS China</li><li>The CloudFront origin for S3 bucket which is not a website endpoint, the following format: <code>bucket-name.s3.region.amazonaws.com.cn</code>, remember <code>region</code> after <code>s3</code></li><li>The CloudFront origin for S3 bucket which is a website endpoint, use the following format: <code>bucket-name.s3-website.region.amazonaws.com.cn</code>, remember <code>region</code> after <code>s3-website</code></li></ul><p>For more information, please refer to the AWS China CloudFront <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/cloudfront.html#feature-diff">https://docs.amazonaws.cn/en_us/aws/latest/userguide/cloudfront.html#feature-diff</a></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this blog, we have discussed the important points when migrate the aws global application to aws china, especially for the AWS CloudFront. We have listed the difference between AWS Global and AWS China, and also the CloudFront difference between AWS Global and AWS China.</p><p>If you want to know more about AWS China service difference with AWS Global, you can refer to this official link <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/services.html">https://docs.amazonaws.cn/en_us/aws/latest/userguide/services.html</a></p><p>Hope this blog can help you to migrate the application to AWS China.</p><h2 id="Useful-Links"><a href="#Useful-Links" class="headerlink" title="Useful Links"></a>Useful Links</h2><ul><li>AWS China Service Difference: <a href="https://docs.amazonaws.cn/en_us/aws/latest/userguide/services.html">https://docs.amazonaws.cn/en_us/aws/latest/userguide/services.html</a></li><li>AWS China Service Pricing: <a href="https://calculator.amazonaws.cn/#/">https://calculator.amazonaws.cn/#/</a></li><li>AWS China Fargate Pricing: <a href="https://www.amazonaws.cn/en/fargate/pricing">https://www.amazonaws.cn/en/fargate/pricing</a></li><li>AWS China Edge Location: <a href="https://www.amazonaws.cn/en/cloudfront/features/">https://www.amazonaws.cn/en/cloudfront/features/</a></li><li>AWS China CloudFront Error Investigation: <a href="https://zhuanlan.zhihu.com/p/182517851">https://zhuanlan.zhihu.com/p/182517851</a></li><li>ICP&#x2F;IP地址&#x2F;域名信息备案管理系统: <a href="https://beian.miit.gov.cn/#/Integrated/index">https://beian.miit.gov.cn/#/Integrated/index</a></li><li>全国互联网安全管理服务平台: <a href="https://beian.mps.gov.cn/#/query/webSearch">https://beian.mps.gov.cn/#/query/webSearch</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Migrate a legacy application to AWS Cloud</title>
      <link href="/2024/03/13/migrate-a-legacy-application-to-aws-cloud/"/>
      <url>/2024/03/13/migrate-a-legacy-application-to-aws-cloud/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Recently, we got a requirement from the company to move the application to AWS Cloud. The company has a strong focus on security and compliance, and stack holders also want the application more reliable and scalable. The migration also need to be done as soon as possible.</p><p>The application running on a local data center. The application is consists of two parts, frontend is a static website built with React and provide the user interface to user, the backend is a Python Flask application that provide the API to interact with the frontend. The backend server also contains a machine learning model algorithm that is used to process the user’s ears photo. </p><p>The application main logic is that the user answer some questions and scan and upload their ears photo to the backend server from the website, the backend server will process the photo and return the suggestion result to user to recommend which headset or earphone is the best fit for them.</p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>After analysis application technologies and architecture, base on the requirements, we did some architecture design. Below is the architecture of the application on AWS Cloud. </p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-migrate-legacy-app-arch.png" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-migrate-legacy-app-arch.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Application Architecture on AWS Cloud"/></div><span class="image-caption">Application Architecture on AWS Cloud</span></div><p>The application is hosted on AWS Cloud, major is that the frontend is served by CloudFront, the backend is served by ECS, and the user’s ears photo is stored in S3 bucket. The application is using the following AWS services:</p><h4 id="AWS-S3-Bucket"><a href="#AWS-S3-Bucket" class="headerlink" title="AWS S3 Bucket"></a>AWS S3 Bucket</h4><p>Setup two s3 buckets, one is for storing the user’s ears photo, and config the object expires after 90 days. second bucket is for storing the static website files. All s3 buckets are public blocked.</p><h4 id="AWS-VPC"><a href="#AWS-VPC" class="headerlink" title="AWS VPC"></a>AWS VPC</h4><p>Create a dedicate VPC for the application, and configure the subnets, route tables, and security groups. Two public subnets and two private subnets are used.</p><h4 id="AWS-ECR"><a href="#AWS-ECR" class="headerlink" title="AWS ECR"></a>AWS ECR</h4><p>Use ECR to store the Docker image of the backend application. The image will be built and pushed to ECR by CI&#x2F;CD pipeline.</p><h4 id="AWS-ECS"><a href="#AWS-ECS" class="headerlink" title="AWS ECS"></a>AWS ECS</h4><p>Use ECS to run the backend application as a container in private subnets, and configure the auto scaling group and load balancer. Autoscaling minimum size is 2 and maximum size is 20.</p><h4 id="AWS-ALB"><a href="#AWS-ALB" class="headerlink" title="AWS ALB"></a>AWS ALB</h4><p>Create a ALB to serve the backend ECS service, and configure the listener rules to forward the traffic to the ECS service. The ALB attached the SSL certificate from ACM.</p><h4 id="AWS-S3-VPC-Gateway-Endpoint"><a href="#AWS-S3-VPC-Gateway-Endpoint" class="headerlink" title="AWS S3 VPC Gateway Endpoint"></a>AWS S3 VPC Gateway Endpoint</h4><p>Use the S3 VPC Gateway Endpoint to access the s3 bucket from the backend ECS container.</p><h4 id="AWS-Internet-Gateway"><a href="#AWS-Internet-Gateway" class="headerlink" title="AWS Internet Gateway"></a>AWS Internet Gateway</h4><p>The Internet Gateway to connect the VPC to the internet. Put the ALB on the two public subnets across two AZs </p><h4 id="AWS-CloudWatch"><a href="#AWS-CloudWatch" class="headerlink" title="AWS CloudWatch"></a>AWS CloudWatch</h4><p>Use CloudWatch to monitor the application performance, and create alarms to notify the team when the application is not running as expected.</p><h4 id="AWS-SNS"><a href="#AWS-SNS" class="headerlink" title="AWS SNS"></a>AWS SNS</h4><p>Use SNS to notify the team when the application performance is not good, and the team can take action to improve the application performance.</p><h4 id="AWS-ACM"><a href="#AWS-ACM" class="headerlink" title="AWS ACM"></a>AWS ACM</h4><p>Use ACM to manage the SSL certificate for the ALB and CloudFront, the certificate is issued by the IT team. The application is served over HTTPS.</p><h4 id="AWS-CloudFront"><a href="#AWS-CloudFront" class="headerlink" title="AWS CloudFront"></a>AWS CloudFront</h4><p>Use CloudFront to serve the static website files, and cache the files to improve the website loading speed. Config CloudFront to access s3 bucket by OAC. Create a another origin for the ALB.</p><h4 id="AWS-Security-Group"><a href="#AWS-Security-Group" class="headerlink" title="AWS Security Group"></a>AWS Security Group</h4><p>Create a security group for the ECS container, and allow the traffic from the ALB to the ECS container. And one more security group for the ALB to allow the traffic only from AWS CloudFront prefix list.</p><h4 id="AWS-IAM"><a href="#AWS-IAM" class="headerlink" title="AWS IAM"></a>AWS IAM</h4><p>Create an IAM role for the ECS container, and attach the necessary policies to the role to access the s3 bucket, ECR, and CloudWatch.</p><h4 id="AWS-WAF"><a href="#AWS-WAF" class="headerlink" title="AWS WAF"></a>AWS WAF</h4><p>Use WAF to protect the application from common web exploits and attacks. This is mandatory for the company’s security policy. The security team will also review the infrastucture and do the security scan the application. The application won’t be deployed to production if the security scan failed.</p><h2 id="IaC-with-Pulumi"><a href="#IaC-with-Pulumi" class="headerlink" title="IaC with Pulumi"></a>IaC with Pulumi</h2><p>Use Pulumi to manage the AWS resources, and create the infrastructure as code. The code will be checked into the source control, and for the pipeline, we’re using Bamboo pipeline as company already using Bamboo for CI&#x2F;CD. The pipeline will doing below major things.</p><ol><li>Build the Docker image and push to ECR.</li><li>Deploy the frontend static website to CloudFront, and invalidate the cache to make the content updated for end user.</li><li>Update the infrastucture by creating or updating the AWS resources by using pulumi.</li></ol><h2 id="Rationale"><a href="#Rationale" class="headerlink" title="Rationale"></a>Rationale</h2><p>The migration of the legacy application to AWS Cloud is a complex task, and we need to follow the best practices to make the migration successful.</p><ol><li>Using CloudFront and S3 bucket to host the static website and user’s ears photo is scalable and cost-effective. </li><li>Using the ECS and ALB to serve the backend application is also a good choice to improve the application performance and scalability. We’re not using AWS API Gateway and AWS Lambda to serve as backend because we are requested to migrate the application to Cloud as soon as possible. Build the python <code>Flask</code> application to a docker image and push to ECR is a good practice to deploy the application to AWS Cloud in this situation.</li><li>Using the VPC and security group to isolate the application and improve the security is a must. The ECS is located in private subnets, and the ALB is in public subnets, and the traffic is only allowed from AWS CloudFront prefix list to ALB, then forward traffic to ECS container.</li><li>Using the ACM to manage the SSL certificate for the ALB and CloudFront is a good practice to improve the security and compliance.</li><li>Using the CloudWatch to monitor the application performance and create alarms to notify the team when the application is not running as expected is a good practice to improve the application reliability.</li><li>Using the IAM role to access the s3 bucket, ECR, and CloudWatch is a good practice to improve the security and control.</li><li>Using the WAF to protect the application from common web exploits and attacks is a mandatory requirement for the company’s security policy.</li><li>Using Pulumi to manage the AWS resources as code is a good practice to improve the automation and reliability of the migration process.</li></ol><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This is just a sample of how to migrate a legacy application to AWS Cloud, and there are many other factors to consider when migrating a legacy application to AWS Cloud. The key is to follow the best practices and use the right tools to make the migration successful base on the requirements.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pulumi </tag>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
            <tag> IaC </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manage the Existing Cloud Resources By Using Pulumi Import</title>
      <link href="/2024/02/27/importing-existing-cloud-resources-with-pulumi/"/>
      <url>/2024/02/27/importing-existing-cloud-resources-with-pulumi/</url>
      
        <content type="html"><![CDATA[<p>In many real-world scenarios, cloud infrastructure is already in place before adopting infrastructure as code (IaC) solutions like Pulumi. Pulumi provides a feature called <code>import</code> to help manage existing cloud resources within its IaC framework. This feature allows users to import the current state of resources into their Pulumi codebase, making it easier to adopt Pulumi for managing existing infrastructure.</p><h2 id="Pulumi-Import"><a href="#Pulumi-Import" class="headerlink" title="Pulumi Import"></a>Pulumi Import</h2><p>Pulumi’s import feature provides a way to bring existing cloud resources under Pulumi’s management. By creating a Pulumi program and using the pulumi import command, users can declare and manage existing infrastructure resources using Pulumi. The pulumi supports both importing existing resources with the CLI and importing existing resources in the code. Here we’re talking about the CLI import to generate the code for the imported resources. </p><h2 id="Usage-and-Syntax"><a href="#Usage-and-Syntax" class="headerlink" title="Usage and Syntax"></a>Usage and Syntax</h2><p>To import an existing cloud resource into Pulumi, you need to follow these steps:</p><ol><li><p>Create a Pulumi Project<br>Create a new Pulumi project or use an existing Pulumi project where you want to manage the imported resources. For creating a pulumi project, you can check the previous blog post on how to create a new Pulumi project.</p></li><li><p>Identify the Resource to Import<br>Identify the existing resource in your cloud provider environment that you want to import into Pulumi. This could be a virtual machine, database, storage bucket, or any other supported resource.</p></li><li><p>Apply the Import<br>Apply the import operation to bring the existing resource under Pulumi’s management. Pulumi will generate the appropriate code for the resource based on its current state in the cloud provider environment.</p></li></ol><p>The syntax for the import command is as follows:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi import &lt;type&gt; &lt;name&gt; &lt;id&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;type&gt;</code> is the Pulumi type token to use for the imported resource.</li><li><code>&lt;name&gt;</code> is the resource name to apply to the resource once it’s imported.</li><li><code>&lt;id&gt;</code> is the value to use for the resource lookup in the cloud provider.</li></ul><h2 id="Managing-Imported-Resources"><a href="#Managing-Imported-Resources" class="headerlink" title="Managing Imported Resources"></a>Managing Imported Resources</h2><p>Once the resources are imported, they can be managed just like any other Pulumi-managed resources. The imported resources can be updated, deleted, and included in stacks alongside other Pulumi-declared infrastructure.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>I created a S3 bucket name <code>my-s3-bucket</code> from AWS Console manually. But now I want to manage this S3 bucket by Pulumi. After identifying the bucket to be imported, the import command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi import aws:s3/bucket:Bucket my-bucket my-s3-bucket</span><br></pre></td></tr></table></figure><ul><li><code>aws:s3/bucket:Bucket</code> is the Pulumi type token for the S3 bucket resource.</li><li><code>my-bucket</code> is the resource name to apply to the imported resource.</li><li><code>my-s3-bucket</code> is the value to use for the resource lookup in the AWS provider, here it’s bucket name.</li></ul><p>After running the import command, Pulumi will generate the appropriate code for the S3 bucket resource based on its current state in the AWS provider. Below is screenshot of the output of the import command:</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-import.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-import.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi Import"/></div><span class="image-caption">Pulumi Import</span></div><p>And generated code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulumi</span><br><span class="line"><span class="keyword">import</span> pulumi_aws <span class="keyword">as</span> aws</span><br><span class="line"></span><br><span class="line">my_bucket = aws.s3.Bucket(<span class="string">&quot;my-bucket&quot;</span>,</span><br><span class="line">    arn=<span class="string">&quot;arn:aws-cn:s3:::my-s3-bucket&quot;</span>,</span><br><span class="line">    bucket=<span class="string">&quot;my-s3-bucket&quot;</span>,</span><br><span class="line">    hosted_zone_id=<span class="string">&quot;Z282HJ1KT0DH03&quot;</span>,</span><br><span class="line">    request_payer=<span class="string">&quot;BucketOwner&quot;</span>,</span><br><span class="line">    server_side_encryption_configuration=aws.s3.BucketServerSideEncryptionConfigurationArgs(</span><br><span class="line">        rule=aws.s3.BucketServerSideEncryptionConfigurationRuleArgs(</span><br><span class="line">            apply_server_side_encryption_by_default=aws.s3.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(</span><br><span class="line">                sse_algorithm=<span class="string">&quot;AES256&quot;</span>,</span><br><span class="line">            ),</span><br><span class="line">            bucket_key_enabled=<span class="literal">True</span>,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    opts=pulumi.ResourceOptions(protect=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>In above code, you will notice there is a <code>protect=True</code> option set for the imported resource. This is to prevent any accidental deletion of the imported resource.</p><p>So when you try to delete the imported resource, Pulumi will give the errors to you. Let’s try to delete the imported S3 bucket:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi destroy</span><br></pre></td></tr></table></figure><p>You see, it displays the error message that the S3 bucket is protected and cannot be deleted.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-destory-import.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-destory-import.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi Destory Import Protected Resource"/></div><span class="image-caption">Pulumi Destory Import Protected Resource</span></div><p>If you want to delete the resource in the cloud provider environment, you can remove the <code>protect=True</code> option from the code or change the <code>protect</code> option to <code>False</code>.</p><p>In above we’re using <code>pulumi import</code> to import the s3 bucket resource and code is generated on console. We can also generate the code into python file directly by using below command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi import aws:s3/bucket:Bucket my-bucket my-s3-bucket -o my-s3-bucket.py</span><br></pre></td></tr></table></figure><h2 id="Pulumi-State"><a href="#Pulumi-State" class="headerlink" title="Pulumi State"></a>Pulumi State</h2><p>Pulumi maintains a state file that tracks the current state of all resources in the cloud provider environment. When a resource is imported, Pulumi updates the state file to reflect the imported resource. This allows Pulumi to manage the imported resource as if it were created in the cloud provider environment.</p><p>Sometimes, we want to delete the state which imported in pulumi, but keep the existing cloud resources. In such case, we can use below command to only delete the state and keep the existing cloud resources.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi state delete &lt;urn&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;urn&gt;</code> is the unique resource identifier of the imported resource.</li></ul><p>To check the <code>&lt;urn&gt;</code> of the resource, we can use <code>pulumi stack --show-urns</code> to see the list urns of all resources in the current stack.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi stack --show-urns</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-stack-show-urns.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-stack-show-urns.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi Stack Show Urns"/></div><span class="image-caption">Pulumi Stack Show Urns</span></div><p>In above screenshot, we can see the <code>&lt;urn&gt;</code> of the imported S3 bucket resource.To delete the state of the imported resource, we can use the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi state delete urn:pulumi:dev::pulumi-test::aws:s3/bucket:Bucket::my-bucket --force -y</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-state-delete.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-state-delete.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi State Delete Imported Resource"/></div><span class="image-caption">Pulumi State Delete Imported Resource</span></div><p>After deleting the state, the imported S3 bucket will still exist in the cloud provider environment.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Pulumi’s import feature allows users to seamlessly integrate existing cloud resources into their Pulumi programs. By following the import process and syntax, users can effectively manage their entire infrastructure, including existing resources, through Pulumi’s IaC approach.</p><p>This feature simplifies the transition to Pulumi for managing infrastructure and enables teams to leverage the benefits of IaC without having to recreate their entire cloud environment from scratch.</p><h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><ul><li>Pulumi Import: <a href="https://www.pulumi.com/docs/cli/commands/pulumi_import/">https://www.pulumi.com/docs/cli/commands/pulumi_import/</a></li><li>S3 Bucket Import: <a href="https://www.pulumi.com/registry/packages/aws/api-docs/s3/bucket/#import">https://www.pulumi.com/registry/packages/aws/api-docs/s3/bucket/#import</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pulumi </tag>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
            <tag> IaC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pulumi - A Powerful IaC to manage the cloud infrastructure</title>
      <link href="/2024/02/11/pulumi-a-powerful-iac-to-manage-the-cloud-infrastructure/"/>
      <url>/2024/02/11/pulumi-a-powerful-iac-to-manage-the-cloud-infrastructure/</url>
      
        <content type="html"><![CDATA[<p>To manage the application cloud infrastructure more efficiently, we can use the <code>Terraform</code> for <code>IaC(Infrastructure as Code)</code>. But today, we’re not going to talk about the Terraform, we’re going to talk about the Pulumi. A powerful IaC tool that manages the cloud infrastructure.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-platform.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-platform.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi Platform"/></div><span class="image-caption">Pulumi Platform</span></div><p>Pulumi is an open-source <code>infrastructure as code (IaC)</code> tool that provides a powerful way to create, deploy, and manage cloud infrastructure. It is the easiest way to build and deploy infrastructure, of any architecture and on any cloud, using programming languages that you already know and love, such as <code>TypeScript</code>, <code>Python</code>, <code>Go</code>, <code>C#</code>, <code>Java</code> etc.</p><p>It is a cross-platform tool that runs on <code>Windows</code>, <code>Linux</code>, and <code>macOS</code>, and supports a wide range of cloud providers, including <code>AWS</code>, <code>Azure</code>, <code>GCP</code>, <code>Kubernetes</code>, <code>Docker</code>, and more. It is also easy to use and has a simple and intuitive interface.</p><p>CI&#x2F;CD integration is also supported, which means you can use Pulumi to deploy your infrastructure as part of your CI&#x2F;CD pipeline. This makes it easier to manage and update your infrastructure as your application evolves.</p><h2 id="Install-Pulumi"><a href="#Install-Pulumi" class="headerlink" title="Install Pulumi"></a>Install Pulumi</h2><p>The pulumi  is a cross-platform tool that runs on Windows, Linux, and macOS. You can find and download the latest version from the official website: <a href="https://www.pulumi.com/docs/install/versions/">https://www.pulumi.com/docs/install/versions/</a>. Follow this link to <a href="https://www.pulumi.com/docs/install/">https://www.pulumi.com/docs/install/</a> to install the Pulumi CLI. It’s very simple to set up the Pulumi CLI on your machine.</p><p>Once you installed pulumi, simply run the below command to check the version:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi version</span><br></pre></td></tr></table></figure><h2 id="Create-a-new-Pulumi-project"><a href="#Create-a-new-Pulumi-project" class="headerlink" title="Create a new Pulumi project"></a>Create a new Pulumi project</h2><p>To create a new Pulumi project, you can use the <code>pulumi new</code> command. Below command is creating a new project with AWS Python template.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi new aws-python</span><br></pre></td></tr></table></figure><p>This will create a new project with a simple AWS Python template. The project will have a <code>Pulumi.yaml</code> file, which is the configuration file for the project.</p><h2 id="Configure-the-Pulumi-project"><a href="#Configure-the-Pulumi-project" class="headerlink" title="Configure the Pulumi project"></a>Configure the Pulumi project</h2><p>The <code>Pulumi.yaml</code> file is the configuration file for the project. It contains the project name and some configuration.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">my-project</span></span><br><span class="line"><span class="attr">runtime:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">python</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">virtualenv:</span> <span class="string">venv</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">minimal</span> <span class="string">AWS</span> <span class="string">Python</span> <span class="string">Pulumi</span> <span class="string">program</span></span><br></pre></td></tr></table></figure><p>In the above configuration, we have set the project name as <code>my-project</code>, the runtime as <code>python</code> and the virtualenv as <code>venv</code>. The description is a brief description of the project.</p><h2 id="Create-a-new-stack"><a href="#Create-a-new-stack" class="headerlink" title="Create a new stack"></a>Create a new stack</h2><p>To create a new stack, you can use the <code>pulumi stack init</code> command. Below command is creating a new stack with the name <code>dev</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi stack init dev</span><br></pre></td></tr></table></figure><p>Once you created the stack, the pululmi will generate a file named <code>Pulumi.dev.yaml</code> in your project folder. You can select it using the <code>pulumi stack select</code> command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi stack select dev</span><br></pre></td></tr></table></figure><h2 id="Configure-the-stack"><a href="#Configure-the-stack" class="headerlink" title="Configure the stack"></a>Configure the stack</h2><p>The <code>Pulumi.dev.yaml</code> file is the configuration file for the stack.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encryptionsalt:</span> <span class="string">v1:6YTR30z2X9tM=:v1:+fJN/nMOdJM+XjeZ:P7V9XPB9GHKE/dBuXX1uOCNGwgQztre==</span></span><br><span class="line"><span class="attr">config:</span> </span><br><span class="line">  <span class="attr">aws:region:</span> <span class="string">us-west-2</span></span><br><span class="line">  <span class="attr">aws:profile:</span> <span class="string">profile-account-1</span></span><br></pre></td></tr></table></figure><p>In above configuration, we have set the encryption salt (this is generated), and the AWS region and profile. You can add more configuration as per your requirement.</p><h2 id="Create-a-new-resource"><a href="#Create-a-new-resource" class="headerlink" title="Create a new resource"></a>Create a new resource</h2><p>To create a new resource, such as s3 bucket, you can write python code in the <code>main.py</code> file. Below is the code to create a new s3 bucket.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pulumi</span><br><span class="line"><span class="keyword">import</span> pulumi_aws <span class="keyword">as</span> aws</span><br><span class="line"></span><br><span class="line">bucket = aws.s3.Bucket(<span class="string">&quot;my-bucket&quot;</span>)</span><br></pre></td></tr></table></figure><p>In the above code, we have imported the <code>aws</code> module and created a new s3 bucket resource. The <code>Bucket</code> function creates a new s3 bucket with the name <code>my-bucket</code>.</p><h2 id="Preview-the-changes"><a href="#Preview-the-changes" class="headerlink" title="Preview the changes"></a>Preview the changes</h2><p>To preview the changes, you can use the <code>pulumi preview</code> command. This command will show the changes that will be applied to the infrastructure.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi preview</span><br></pre></td></tr></table></figure><p>Below is the project currently I’m working on for <code>pululmi preview</code> showcase.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-preview.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-preview.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi Preview"/></div><span class="image-caption">Pulumi Preview</span></div><p>In above screenshot, you can see the changes that will be applied to the infrastructure. Including <code>update</code>, <code>create</code> and <code>delete</code> resources listed. You can also use the <code>--diff</code> option to show the difference between the current state and the desired state.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi preview --diff</span><br></pre></td></tr></table></figure><h2 id="Deploy-the-infrastructure"><a href="#Deploy-the-infrastructure" class="headerlink" title="Deploy the infrastructure"></a>Deploy the infrastructure</h2><p>To deploy the infrastructure, you can use the <code>pulumi up</code> command. This command will deploy the infrastructure as per the configuration in the <code>Pulumi.yaml</code> file.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi up</span><br></pre></td></tr></table></figure><p>This will deploy the infrastructure and show the output.</p><h2 id="Check-the-status-of-the-infrastructure"><a href="#Check-the-status-of-the-infrastructure" class="headerlink" title="Check the status of the infrastructure"></a>Check the status of the infrastructure</h2><p>To check the status of the infrastructure, you can use the <code>pulumi stack</code> command. This command will show the status of the infrastructure.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi stack</span><br></pre></td></tr></table></figure><p>This will show the status of the infrastructure. Below is the output of the <code>pulumi stack</code> command of one project I’m working.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/pulumi/pulumi-stack.png" class="lazyload placeholder" data-srcset="/assets/images/pulumi/pulumi-stack.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Pulumi Stack"/></div><span class="image-caption">Pulumi Stack</span></div><h2 id="Destroy-the-infrastructure"><a href="#Destroy-the-infrastructure" class="headerlink" title="Destroy the infrastructure"></a>Destroy the infrastructure</h2><p>To destroy the infrastructure, you can use the <code>pulumi destroy</code> command. This command will destroy the infrastructure as per the configuration in the <code>Pulumi.yaml</code> file.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pulumi destroy</span><br></pre></td></tr></table></figure><p>This will destroy the infrastructure. Please be aware that this command will destroy all the resources in the stack. It’s dangerous to use this command, so use it with caution. You should know what you’re doing before using this command.</p><p>There are much more features of Pulumi, but I hope this article will give you a good idea about Pulumi.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Pulumi is a powerful IaC tool that manages the cloud infrastructure. It is easy to use and has a simple and intuitive interface. It supports a wide range of cloud providers, including AWS, Azure, GCP, Kubernetes, Docker, and more. It is also easy to integrate with CI&#x2F;CD pipeline.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pulumi </tag>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
            <tag> IaC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为何Redis选择单线程而非多线程架构？</title>
      <link href="/2024/01/25/why-redis-choose-single-thread/"/>
      <url>/2024/01/25/why-redis-choose-single-thread/</url>
      
        <content type="html"><![CDATA[<p>在现代的互联网应用中，数据存储和访问速度是至关重要的。Redis，作为一款高性能的内存数据库，以其快速的读写速度和灵活的数据结构而闻名。然而，令人惊奇的是，<code>Redis采用了单线程的执行模型</code>，而不是一些其他数据库采用的多线程或多进程模型。本文将深入探讨Redis为何选择这种看似不合理的设计决策，以及这个决策背后的技术原理。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/redis/redis-logo.webp" class="lazyload placeholder" data-srcset="/assets/images/redis/redis-logo.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Redis" style="width:600px;"/></div><span class="image-caption">Redis</span></div><h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p><code>Redis</code>是一款基于内存的数据存储系统，它支持多种数据结构，如字符串、哈希表、列表、集合等。由于数据完全存储在内存中，Redis能够提供极高的读写速度，使其成为许多应用的首选数据库。</p><p>然而，令人惊讶的是，Redis在设计时选择了单线程执行模型，与其他一些数据库系统采用的多线程或多进程模型形成鲜明对比。这个决策引起了许多人的好奇，接下来我们将深入探讨Redis为何做出这一选择。</p><h3 id="为何选择单线程？"><a href="#为何选择单线程？" class="headerlink" title="为何选择单线程？"></a>为何选择单线程？</h3><h4 id="1-简单性与可维护性"><a href="#1-简单性与可维护性" class="headerlink" title="1. 简单性与可维护性"></a>1. 简单性与可维护性</h4><p>Redis的设计哲学之一是保持简单性和可维护性。<code>单线程模型避免了复杂的并发控制和同步机制，使得代码更加清晰和容易维护</code>。在一个单线程的环境中，开发者更容易理解和调试代码，减少了出错的可能性。</p><h4 id="2-避免上下文切换开销"><a href="#2-避免上下文切换开销" class="headerlink" title="2. 避免上下文切换开销"></a>2. 避免上下文切换开销</h4><p>多线程模型中，线程之间的切换会引入上下文切换的开销。而在单线程模型下，这种开销被最小化，因为不存在多线程之间的竞争和切换。这使得Redis能够更有效地利用CPU资源，提高整体性能。</p><h4 id="3-内存访问的局部性"><a href="#3-内存访问的局部性" class="headerlink" title="3. 内存访问的局部性"></a>3. 内存访问的局部性</h4><p>Redis的工作负载通常是内存密集型的，而不是计算密集型的。在这种情况下，单线程模型的优势显而易见。由于Redis数据完全存储在内存中，对于大多数操作而言，CPU主要执行的是内存读写操作。<code>单线程模型避免了多线程之间频繁的共享内存访问</code>，利用了内存访问的局部性，从而提高了性能。</p><h4 id="4-原子性操作简化"><a href="#4-原子性操作简化" class="headerlink" title="4. 原子性操作简化"></a>4. 原子性操作简化</h4><p>Redis通过使用事务和原子性操作来确保数据的一致性。<code>在单线程模型下，原子性操作更容易实现，因为不需要考虑多线程之间的竞争条件</code>。这使得Redis能够提供可靠的事务支持，确保数据的完整性。</p><h3 id="单线程模型的挑战与应对"><a href="#单线程模型的挑战与应对" class="headerlink" title="单线程模型的挑战与应对"></a>单线程模型的挑战与应对</h3><h4 id="1-阻塞问题"><a href="#1-阻塞问题" class="headerlink" title="1. 阻塞问题"></a>1. 阻塞问题</h4><p>单线程模型的一个潜在问题是当执行某些阻塞操作时，整个系统会被阻塞。为了解决这个问题，Redis采用了非阻塞的I&#x2F;O模型。<code>通过使用异步非阻塞的网络I/O，Redis能够在等待外部操作完成的同时继续处理其他请求，从而提高系统的并发性</code>。<br><img src="/assets/images/redis/redis-io-multiplexing-2.webp" class="lazyload placeholder" data-srcset="/assets/images/redis/redis-io-multiplexing-2.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h4 id="2-多核利用问题"><a href="#2-多核利用问题" class="headerlink" title="2. 多核利用问题"></a>2. 多核利用问题</h4><p>单线程模型似乎不能充分利用多核处理器的优势。为了解决这个问题，Redis引入了多个实例的概念。通过运行多个Redis实例，每个实例在单独的线程中运行，从而利用多核处理器的优势。这种方式在保持简单性的同时，使得Redis能够在多核系统中发挥更大的性能优势。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Redis选择单线程而非多线程的设计决策并非出于偶然，而是经过深思熟虑的结果。在保持简单性、可维护性的同时，单线程模型通过避免上下文切换开销、利用内存访问的局部性等优势，实现了出色的性能。同时，通过采用非阻塞I&#x2F;O和多实例的策略，成功应对了单线程模型可能遇到的阻塞和多核利用的问题。</p><p>总体而言，Redis的设计决策展现了对性能和可维护性的平衡考虑，使得它成为一个在许多高性能应用场景中备受青睐的内存数据库。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis单线程之速度之谜解析</title>
      <link href="/2024/01/22/redis-single-thread-speed/"/>
      <url>/2024/01/22/redis-single-thread-speed/</url>
      
        <content type="html"><![CDATA[<p>在数据库领域中，多线程通常被认为是提高性能的关键。然而，<code>Redis</code>却是一个独特的存在，它以单线程的方式迅猛地处理各种请求，展现出惊人的速度和效率。本文将深入探讨Redis单线程模型的奥秘以及它如何在高并发环境下保持出色性能。</p><h3 id="Redis的单线程模型"><a href="#Redis的单线程模型" class="headerlink" title="Redis的单线程模型"></a>Redis的单线程模型</h3><p>Redis之所以被称为单线程，是因为它在处理客户端请求时采用了<code>单线程的事件循环机制</code>。这意味着Redis一次只能处理一个操作，例如读取或写入，而不是同时执行多个操作。然而，这并不妨碍Redis在实际应用中表现出色。</p><h3 id="事件驱动与异步非阻塞"><a href="#事件驱动与异步非阻塞" class="headerlink" title="事件驱动与异步非阻塞"></a>事件驱动与异步非阻塞</h3><p>Redis的单线程模型并不意味着它会阻塞在某个请求上，相反，它采用了<code>事件驱动</code>和<code>异步非阻塞</code>的方式。通过使用<code>I/O多路复用机制</code>，Redis能够在等待一个操作完成的同时继续处理其他请求。这种设计使得Redis能够充分利用系统资源，高效地响应大量并发请求。<br><img src="/assets/images/redis/redis-io-multiplexing.webp" class="lazyload placeholder" data-srcset="/assets/images/redis/redis-io-multiplexing.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Redis I/O Multiplexing"></p><h3 id="内存数据库与快速访问"><a href="#内存数据库与快速访问" class="headerlink" title="内存数据库与快速访问"></a>内存数据库与快速访问</h3><p>Redis将数据存储在内存中，这是其高速读写的关键。内存的快速访问速度远远超过了磁盘访问速度，使得Redis能够在瞬间完成诸如读取、写入等操作。此外，Redis通过使用数据结构的方式，如哈希表和有序集合，进一步提高了数据的访问效率。</p><h3 id="优秀的持久化机制"><a href="#优秀的持久化机制" class="headerlink" title="优秀的持久化机制"></a>优秀的持久化机制</h3><p>尽管Redis主要是内存数据库，但它也提供了持久化的机制，确保数据不会因服务器重启而丢失。通过将数据异步写入磁盘，Redis在保持高性能的同时，也具备了可靠的数据持久性，使其在关键业务场景中得以广泛应用。用户可以根据需求选择使用RDB快照或AOF日志来实现持久化。</p><h3 id="高级别的优化策略"><a href="#高级别的优化策略" class="headerlink" title="高级别的优化策略"></a>高级别的优化策略</h3><p>Redis通过采用多种高级优化策略，进一步提升了性能。例如，通过使用<code>管道技术</code>可以批量执行多个命令，减少通信开销。此外，Redis还实现了虚拟内存、集群模式等多种机制，为用户提供了灵活而强大的工具。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>尽管Redis采用了单线程模型，但其出色的性能和高效的设计使得它成为一个备受欢迎的数据库解决方案。通过<strong>事件驱动</strong>、<strong>异步非阻塞</strong>、<strong>内存数据库</strong>等多种技术手段的巧妙结合，Redis成功地解决了单线程模型可能面临的性能瓶颈，展现出强大的潜力和广泛的应用前景。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建JavaScript生成器：探索无穷可能的世界</title>
      <link href="/2024/01/19/javascript-generator-powerful/"/>
      <url>/2024/01/19/javascript-generator-powerful/</url>
      
        <content type="html"><![CDATA[<p>JavaScript作为一种强大而灵活的编程语言，为开发者提供了丰富的工具和功能。其中，生成器（<code>Generators</code>）是一项引人注目的特性，它们可以帮助我们在编写异步代码时更加轻松地管理流程和状态。本文将深入探讨JavaScript生成器的基本概念，并提供一些实用的代码示例，让我们一同踏入生成器的神奇世界。</p><h3 id="生成器是什么？"><a href="#生成器是什么？" class="headerlink" title="生成器是什么？"></a>生成器是什么？</h3><p>生成器是一种特殊类型的函数，它允许我们在需要时暂停和恢复执行。与普通函数不同，生成器的执行可以在每次暂停时保留其状态，这使得编写异步代码变得更加直观和可读。</p><p>要创建一个生成器，我们使用<code>function*</code>关键字，并在函数体内使用<code>yield</code>语句来指示暂停执行。以下是一个简单的生成器示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">simpleGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">simpleGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()); <span class="comment">// 输出: &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()); <span class="comment">// 输出: &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()); <span class="comment">// 输出: &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>()); <span class="comment">// 输出: &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个名为simpleGenerator的生成器，它依次产生数字1、2和3。每次调用generator.next()时，生成器会从上一次暂停的地方继续执行，直到遇到下一个yield语句或函数结束。</p><h3 id="使用生成器处理异步任务"><a href="#使用生成器处理异步任务" class="headerlink" title="使用生成器处理异步任务"></a>使用生成器处理异步任务</h3><p>生成器的真正威力体现在处理异步任务时。通过生成器和<code>yield</code>语句，我们可以以同步的方式编写异步代码，使其更易于理解和维护。以下是一个简单的异步生成器示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">`Data from <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">asyncGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">yield</span> <span class="title function_">fetchData</span>(<span class="string">&#x27;https://api.example.com/data1&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">yield</span> <span class="title function_">fetchData</span>(<span class="string">&#x27;https://api.example.com/data2&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更多异步任务...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runAsyncGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> generator = <span class="title function_">asyncGenerator</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleNext</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, done &#125; = generator.<span class="title function_">next</span>(result);</span><br><span class="line">    <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">      value.<span class="title function_">then</span>(handleNext);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleNext</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runAsyncGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Data from https://api.example.com/data1</span></span><br><span class="line"><span class="comment">// 输出：Data from https://api.example.com/data2</span></span><br></pre></td></tr></table></figure><p>在上述示例中，asyncGenerator是一个异步生成器，通过fetchData函数模拟异步数据获取。runAsyncGenerator函数负责启动异步生成器，并在每次生成器暂停时处理Promise的解析。</p><h3 id="生成器的错误处理"><a href="#生成器的错误处理" class="headerlink" title="生成器的错误处理"></a>生成器的错误处理</h3><p>生成器也可以用于更好地处理错误。通过在生成器内部使用<code>try...catch</code>语句，我们可以捕获并处理异步任务中的错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Error from <span class="subst">$&#123;url&#125;</span>`</span>));</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">errorHandlingGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">yield</span> <span class="title function_">fetchData</span>(<span class="string">&#x27;https://api.example.com&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runErrorHandlingGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> generator = <span class="title function_">errorHandlingGenerator</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleNext</span> = (<span class="params">result</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; value, done &#125; = generator.<span class="title function_">next</span>(result);</span><br><span class="line">      <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">        value.<span class="title function_">then</span>(handleNext).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> generator.<span class="keyword">throw</span>(error));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      generator.<span class="keyword">throw</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleNext</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runErrorHandlingGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： Error: error from https://api.example.com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述示例中，errorHandlingGenerator演示了如何在生成器内捕获异步任务的错误。runErrorHandlingGenerator函数用于启动生成器，并通过catch语句处理生成器内部的错误。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>JavaScript生成器是一项强大而灵活的功能，为异步编程带来了新的范式。通过结合<code>生成器</code>和<code>yield</code>语句，我们可以更清晰地表达代码的流程，并更容易地处理异步任务和错误。在实际项目中，生成器是一个值得深入研究和应用的工具，它为我们打开了无穷可能的编程世界。让我们在代码的海洋中畅游，发现生成器为我们带来的新奇和便利吧！</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解ES6中的Symbol类型</title>
      <link href="/2024/01/03/understand-es6-symbol/"/>
      <url>/2024/01/03/understand-es6-symbol/</url>
      
        <content type="html"><![CDATA[<p>在ES6（ECMAScript 2015）中引入了一种新的基本数据类型——<code>Symbol</code>。Symbol类型的引入丰富了JavaScript语言，为开发者提供了一种独一无二的标识符。本文将深入探讨Symbol的特性、用途以及代码示例。</p><h3 id="1-Symbol的创建"><a href="#1-Symbol的创建" class="headerlink" title="1. Symbol的创建"></a>1. Symbol的创建</h3><p>Symbol的创建是通过调用全局的Symbol函数实现的。Symbol函数接受一个可选的描述参数，该参数用于标识Symbol的用途，但不会影响Symbol的唯一性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个没有描述的Symbol</span></span><br><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> symbol1); <span class="comment">// 输出: symbol</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个带有描述的Symbol</span></span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;mySymbol&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol2.<span class="title function_">toString</span>()); <span class="comment">// 输出: Symbol(mySymbol)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Symbol的唯一性"><a href="#2-Symbol的唯一性" class="headerlink" title="2. Symbol的唯一性"></a>2. Symbol的唯一性</h3><p>Symbol是唯一的，即使描述相同，它们也是不同的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;mySymbol&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;mySymbol&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol1 === symbol2); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-Symbol作为对象属性名"><a href="#3-Symbol作为对象属性名" class="headerlink" title="3. Symbol作为对象属性名"></a>3. Symbol作为对象属性名</h3><p>使用Symbol作为对象属性名可以防止属性名冲突，提高代码的健壮性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;mySymbol&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">&#x27;Hello Symbol!&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[mySymbol]); <span class="comment">// 输出: Hello Symbol!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// 输出: John</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-内置Symbol"><a href="#4-内置Symbol" class="headerlink" title="4. 内置Symbol"></a>4. 内置Symbol</h3><p>ES6引入了一些内置的Symbol，它们在特定的上下文中有着重要的作用。</p><h4 id="Symbol-iterator：-用于定义对象的默认迭代器。"><a href="#Symbol-iterator：-用于定义对象的默认迭代器。" class="headerlink" title="Symbol.iterator： 用于定义对象的默认迭代器。"></a>Symbol.iterator： 用于定义对象的默认迭代器。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myIterable = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> myIterable) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Symbol-for和Symbol-keyFor：-用于创建和检索全局Symbol注册表中的Symbol。"><a href="#Symbol-for和Symbol-keyFor：-用于创建和检索全局Symbol注册表中的Symbol。" class="headerlink" title="Symbol.for和Symbol.keyFor： 用于创建和检索全局Symbol注册表中的Symbol。"></a>Symbol.for和Symbol.keyFor： 用于创建和检索全局Symbol注册表中的Symbol。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> globalSymbol = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;globalSymbol&#x27;</span>); <span class="comment">//注册到全局Symbol表</span></span><br><span class="line"><span class="keyword">const</span> localSymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;localSymbol&#x27;</span>); <span class="comment">// 未注册到全局Symbo表</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(globalSymbol)); <span class="comment">// 输出: globalSymbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(localSymbol)); <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-使用Symbol来定义常量"><a href="#5-使用Symbol来定义常量" class="headerlink" title="5. 使用Symbol来定义常量"></a>5. 使用Symbol来定义常量</h3><p>使用Symbol来定义常量可以有效地避免命名冲突。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_RED</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Red&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">COLOR_GREEN</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Green&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">COLOR_RED</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;红色&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">COLOR_GREEN</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;绿色&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未知颜色&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printColor</span>(<span class="variable constant_">COLOR_RED</span>); <span class="comment">// 输出: 红色</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>Symbol是一项强大而灵活的特性，它为JavaScript引入了一种全新的数据类型，提高了代码的安全性和可读性。在实际开发中，合理运用Symbol能够使代码更具表达力和扩展性。希望本文能够帮助你更深入地理解和应用ES6中的Symbol类型。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解RAG：信息检索与生成模型的结合</title>
      <link href="/2023/12/16/rag-info-retrieve-and-text-generation-combination/"/>
      <url>/2023/12/16/rag-info-retrieve-and-text-generation-combination/</url>
      
        <content type="html"><![CDATA[<p>在人工智能的快速发展中，如何有效地处理和生成自然语言成为了一个关键问题。近年来，<code>RAG（Retrieval-Augmented Generation）</code>系统的出现为这一挑战提供了新的解决方案。本文将深入探讨RAG的概念、出现的背景、原理以及其应用场景。</p><h2 id="什么是RAG？"><a href="#什么是RAG？" class="headerlink" title="什么是RAG？"></a>什么是RAG？</h2><p><code>RAG是一种结合信息检索与生成模型的自然语言处理系统</code>。它通过从外部知识库中检索相关信息，然后利用生成模型将这些信息整合，生成高质量的文本响应。这种方法不仅增强了生成内容的准确性，还提高了上下文的相关性。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/rag-workflow.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/rag-workflow.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="RAG工作流程" style="width:800px;"/></div><span class="image-caption">RAG工作流程</span></div><h2 id="为什么会出现RAG？"><a href="#为什么会出现RAG？" class="headerlink" title="为什么会出现RAG？"></a>为什么会出现RAG？</h2><p>传统的生成模型，如<code>GPT</code>系列，虽然在生成自然语言文本方面表现出色，但它们通常依赖于固定的训练数据集。这意味着它们的知识是静态的，不能自动更新。此外，当面临需要特定知识或最新信息的问题时，生成模型的回答可能会不准确或过时。</p><p>为了克服这些限制，RAG系统应运而生。它通过将生成模型与信息检索结合，使得系统能够动态访问和利用最新的信息，从而提高回答的质量和实用性。</p><h2 id="RAG的原理"><a href="#RAG的原理" class="headerlink" title="RAG的原理"></a>RAG的原理</h2><p>RAG系统主要包括两个核心组件：信息检索模块和生成模块。</p><p><strong>信息检索模块</strong>：该模块负责从一个大型文档库或知识库中检索与用户查询相关的文本片段。它通常使用向量检索、关键词匹配等技术，快速定位到与查询内容最相关的信息。</p><blockquote><p>向量检索：通过将文本表示为向量，计算相似度，以找到最相关的文档。常用的技术包括TF-IDF和Word Embeddings。<br>关键词匹配：使用关键词从数据库中筛选出相关文档，虽然效率较高，但可能不如向量检索全面。</p></blockquote><p><strong>生成模块</strong>：一旦检索到相关信息，生成模块将这些信息作为输入，结合上下文生成最终的响应。这一过程不仅保证了生成内容的流畅性和连贯性，还能融入最新的知识。生成模块利用深度学习模型（如Transformer架构）来整合检索到的信息，并生成自然流畅的文本。这一过程包括：</p><blockquote><p>上下文融合：生成模型在理解检索信息的基础上，结合用户的具体问题，生成具有上下文连贯性的回答。<br>多样性生成：通过调整生成策略，RAG可以生成多样的响应，避免单一回答。</p></blockquote><p>通过这样的组合，RAG系统能够在回答复杂问题时提供更加全面和准确的信息。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/rag-data-prepare-retrieval.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/rag-data-prepare-retrieval.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="数据准备与检索增强生成" style="width:800px;"/></div><span class="image-caption">数据准备与检索增强生成</span></div><h2 id="RAG的工作流程"><a href="#RAG的工作流程" class="headerlink" title="RAG的工作流程"></a>RAG的工作流程</h2><p>RAG的工作流程通常包括以下几个步骤：</p><ol><li>用户提出问题或请求信息。</li><li>系统根据用户的查询，从知识库中检索相关信息。</li><li>生成模块获取检索到的内容，并与上下文结合。</li><li>最终，系统生成并输出回答，确保信息的准确性和流畅性。</li></ol><h2 id="RAG的优越性"><a href="#RAG的优越性" class="headerlink" title="RAG的优越性"></a>RAG的优越性</h2><p>相较于传统的生成模型，RAG系统在以下几个方面具有明显的优势：</p><ol><li>动态更新：RAG能够实时访问和利用最新的信息，确保生成内容的时效性。</li><li>准确性提升：通过检索相关信息，RAG能够提供更为准确和上下文相关的答案。</li><li>灵活性：可应用于多种场景，满足不同用户需求，适应性强。</li></ol><h2 id="RAG的应用场景"><a href="#RAG的应用场景" class="headerlink" title="RAG的应用场景"></a>RAG的应用场景</h2><p>RAG系统的灵活性和高效性使其在多个领域得到了广泛应用，包括但不限于：</p><p><strong>问答系统</strong>：在客户支持或信息查询中，RAG可以快速检索到相关文档，提供即时和准确的回答。</p><p><strong>内容生成</strong>：在新闻报道、博客文章等内容创作中，RAG能够帮助作者整合最新的信息，生成具有深度和时效性的内容。</p><p><strong>教育和培训</strong>：RAG可以用于在线教育平台，提供个性化的学习建议和答案，帮助学生更好地理解复杂概念。</p><p><strong>医疗领域</strong>：在医学问答系统中，RAG可以结合最新的研究文献和指南，为患者和医生提供专业的建议。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RAG作为一种新兴的自然语言处理技术，通过结合信息检索与生成模型的优势，开辟了新的应用前景。随着技术的不断进步，RAG系统将继续在多个领域发挥重要作用，推动人机交互的进一步发展。无论是解决复杂问题，还是生成高质量内容，RAG都展示了其在智能应用中的巨大潜力。</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> OpenAI </tag>
            
            <tag> RAG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A fast in-process analytical database - DuckDB</title>
      <link href="/2023/11/19/a-fast-in-process-analytical-database-duckdb/"/>
      <url>/2023/11/19/a-fast-in-process-analytical-database-duckdb/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><code>DuckDB</code> is a seriously powerful database, with a host of unique and amazing features that are straight from the world of academic database research. It’s a fast in-process analytical database that can handle large datasets and perform complex queries. It’s <code>free</code>, <code>open-source</code>, and written in C++ and SQL. It supports to run on Linux, macOS, Windows, and all popular hardware architectures.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/duckdb-logo.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/duckdb-logo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:600px;"/></div></div><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>A few of key features for blazing fast OLAP query performance on large datasets (involving aggregations and joins on 100M+ rows on multiple tables), are listed below.</p><ul><li>Like other OLAP data warehouses, DuckDB uses <code>columnar storage</code>, which is a great fit for analytical workloads, because it allows for fast, efficient scans over large amounts of data</li><li>Uses vectorized query execution, which is a technique that allows for processing large amounts of data in batches.</li><li>Uses concurrent execution via threads, which allows for faster execution of queries, and is a great fit for modern multi-threaded CPUs.</li><li>Offers a rich SQL dialect. It can read and write file formats such as <code>CSV</code>, <code>Excel</code>, <code>Parquet</code>, and <code>JSON</code>, to and from the <code>local file system</code> and <code>remote endpoints</code> such as S3 buckets.</li><li>Supports integration with popular database such as <code>MySQL</code>, <code>PostgreSQL</code>, <code>SQLite</code>.</li><li>Data can very easily move from a DuckDB table to a <code>Pandas</code> or <code>Polars</code> <code>DataFrame</code>, and <code>vice-versa</code>.</li><li>It also offers connectors that allow users to directly read <code>Parquet</code> data from <code>AWS S3</code>, <code>GCS</code> and <code>Azure storage</code>.</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/duckdb-analytic-workloads.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/duckdb-analytic-workloads.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="A productive DuckDB setup for large (100M+ size) analytical workloads" style="width:800px;"/></div><span class="image-caption">A productive DuckDB setup for large (100M+ size) analytical workloads</span></div><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h3 id="As-Software"><a href="#As-Software" class="headerlink" title="As Software"></a>As Software</h3><p>DuckDB can be installed on <code>Linux</code>, <code>macOS</code>, and <code>Windows</code>. It can be installed using a package manager, or by downloading the source code and building it manually. You can refer to the official documentation for installation instructions. </p><h3 id="As-Library"><a href="#As-Library" class="headerlink" title="As Library"></a>As Library</h3><p><code>DuckDB</code> not only as tools or software on system. It also supports as a library that can be used in other applications, as a part of a larger application, or as a standalone database. It can be used in <code>Python</code>, <code>Node.js</code>, <code>R</code>, <code>Java</code>, <code>C++</code>, and other programming languages.</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install duckdb --upgrade</span><br></pre></td></tr></table></figure><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install duckdb</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.duckdb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>duckdb_jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Supports-Various-File-Formats"><a href="#Supports-Various-File-Formats" class="headerlink" title="Supports Various File Formats"></a>Supports Various File Formats</h3><p>For the DuckDB usage, below is using <code>Python</code> as an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> duckdb</span><br><span class="line">duckdb.read_csv(<span class="string">&quot;example.csv&quot;</span>)                <span class="comment"># read a CSV file into a Relation</span></span><br><span class="line">duckdb.read_parquet(<span class="string">&quot;example.parquet&quot;</span>)        <span class="comment"># read a Parquet file into a Relation</span></span><br><span class="line">duckdb.read_json(<span class="string">&quot;example.json&quot;</span>)              <span class="comment"># read a JSON file into a Relation</span></span><br><span class="line"></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT * FROM &#x27;example.csv&#x27;&quot;</span>)     <span class="comment"># directly query a CSV file</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT * FROM &#x27;example.parquet&#x27;&quot;</span>) <span class="comment"># directly query a Parquet file</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT * FROM &#x27;example.json&#x27;&quot;</span>)    <span class="comment"># directly query a JSON file</span></span><br><span class="line"></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT 42&quot;</span>).write_parquet(<span class="string">&quot;out.parquet&quot;</span>) <span class="comment"># Write to a Parquet file</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT 42&quot;</span>).write_csv(<span class="string">&quot;out.csv&quot;</span>)         <span class="comment"># Write to a CSV file</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;COPY (SELECT 42) TO &#x27;out.parquet&#x27;&quot;</span>)      <span class="comment"># Copy to a Parquet file</span></span><br><span class="line"></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT 42&quot;</span>).fetchall()   <span class="comment"># Python objects</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT 42&quot;</span>).df()         <span class="comment"># Pandas DataFrame</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT 42&quot;</span>).pl()         <span class="comment"># Polars DataFrame</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT 42&quot;</span>).arrow()      <span class="comment"># Arrow Table</span></span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT 42&quot;</span>).fetchnumpy() <span class="comment"># NumPy Arrays</span></span><br></pre></td></tr></table></figure><h3 id="Supports-Multiple-Data-Sources"><a href="#Supports-Multiple-Data-Sources" class="headerlink" title="Supports Multiple Data Sources"></a>Supports Multiple Data Sources</h3><p>It also supports various data sources, including local files, S3 buckets, and remote endpoints.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(trip_distance) <span class="keyword">FROM</span> <span class="string">&#x27;s3://yellow_tripdata_20[12]*.parquet&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;~/local/files/file.parquet&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;https://shell.duckdb.org/data/tpch/0_01/parquet/lineitem.parquet&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Pandas-DataFrames"><a href="#Pandas-DataFrames" class="headerlink" title="Pandas DataFrames"></a>Pandas DataFrames</h3><p>DuckDB can even treat pandas dataframes as DuckDB tables and query them directly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> duckdb</span><br><span class="line"></span><br><span class="line">mydf = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span> : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(duckdb.query(<span class="string">&quot;SELECT sum(a) FROM mydf;&quot;</span>).fetchall())</span><br></pre></td></tr></table></figure><h3 id="Retional-API"><a href="#Retional-API" class="headerlink" title="Retional API"></a>Retional API</h3><p>It also supports retional API for querying data, which allows for filtering, grouping, and aggregating data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> duckdb</span><br><span class="line">rel = duckdb.sql(<span class="string">&quot;SELECT * FROM range(1_000_000) tbl(id)&quot;</span>)</span><br><span class="line">duckdb.sql(<span class="string">&quot;SELECT sum(id) FROM rel&quot;</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># aggregate(expr, groups = &#123;&#125;)</span></span><br><span class="line">rel = duckdb.sql(<span class="string">&quot;SELECT * FROM range(1_000_000) tbl(id)&quot;</span>)</span><br><span class="line">rel.aggregate(<span class="string">&quot;id % 2 AS g, sum(id), min(id), max(id)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># except_(rel)</span></span><br><span class="line">r1 = duckdb.sql(<span class="string">&quot;SELECT * FROM range(10) tbl(id)&quot;</span>)</span><br><span class="line">r2 = duckdb.sql(<span class="string">&quot;SELECT * FROM range(5) tbl(id)&quot;</span>)</span><br><span class="line">r1.except_(r2).show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter(condition)</span></span><br><span class="line">rel = duckdb.sql(<span class="string">&quot;SELECT * FROM range(1_000_000) tbl(id)&quot;</span>)</span><br><span class="line">rel.<span class="built_in">filter</span>(<span class="string">&quot;id &gt; 5&quot;</span>).limit(<span class="number">3</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># there are more operations available, refer to the documentation for more details.</span></span><br></pre></td></tr></table></figure><h3 id="Result-Output"><a href="#Result-Output" class="headerlink" title="Result Output"></a>Result Output</h3><p><code>DuckDB</code> query result output can be saved on local file system by using below methods.</p><ul><li>write_csv</li><li>write_parquet</li></ul><h3 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h3><p>The data also can be persistent on disk as <code>*.db</code> file. The duckdb.connect(dbname) creates a connection to a persistent database. Any data written to that connection will be persisted, and can be reloaded by reconnecting to the same file, both from Python and from other DuckDB clients.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> duckdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a connection to a file called &#x27;file.db&#x27;</span></span><br><span class="line">con = duckdb.connect(<span class="string">&quot;file.db&quot;</span>)</span><br><span class="line"><span class="comment"># create a table and load data into it</span></span><br><span class="line">con.sql(<span class="string">&quot;CREATE TABLE test (i INTEGER)&quot;</span>)</span><br><span class="line">con.sql(<span class="string">&quot;INSERT INTO test VALUES (42)&quot;</span>)</span><br><span class="line"><span class="comment"># query the table</span></span><br><span class="line">con.table(<span class="string">&quot;test&quot;</span>).show()</span><br><span class="line"><span class="comment"># explicitly close the connection</span></span><br><span class="line">con.close()</span><br><span class="line"><span class="comment"># Note: connections also closed implicitly when they go out of scope</span></span><br></pre></td></tr></table></figure><p>Or using context manager to automatically close the connection.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> duckdb</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> duckdb.connect(<span class="string">&quot;file.db&quot;</span>) <span class="keyword">as</span> con:</span><br><span class="line">    con.sql(<span class="string">&quot;CREATE TABLE test (i INTEGER)&quot;</span>)</span><br><span class="line">    con.sql(<span class="string">&quot;INSERT INTO test VALUES (42)&quot;</span>)</span><br><span class="line">    con.table(<span class="string">&quot;test&quot;</span>).show()</span><br><span class="line">    <span class="comment"># the context manager closes the connection automatically</span></span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><code>DuckDB</code> is a great database for analytical workloads, with a rich SQL dialect, fast vectorized query execution, and support for various file formats. It’s also easy to use as a library in other applications, and can be used as a standalone database. Happy to try!</p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Parquet </tag>
            
            <tag> Python </tag>
            
            <tag> DataBase </tag>
            
            <tag> DuckDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据存储格式之 Parquet, ORC, Avro</title>
      <link href="/2023/10/21/data-storage-format-parquet-ocr-and-avro/"/>
      <url>/2023/10/21/data-storage-format-parquet-ocr-and-avro/</url>
      
        <content type="html"><![CDATA[<p>数据存储格式在大数据处理和分析中起着至关重要的作用。Avro、Parquet 和 ORC（优化行列式）是 Hadoop 生态系统中使用的三种流行格式。每种格式都有其优势和独特功能，使其适合特定用例。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/apache-parquet-orc-avro.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/apache-parquet-orc-avro.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div><h2 id="Apache-Parquet"><a href="#Apache-Parquet" class="headerlink" title="Apache Parquet"></a>Apache Parquet</h2><p><code>Apache Parquet</code> 是一种列式存储格式，旨在优化大型数据集的查询性能和分析处理。它将数据组织成列，从而实现高效的压缩和列级操作。Parquet 文件存储有关架构的元数据和有助于查询优化的统计信息。该格式与 Apache Hadoop 生态系统高度兼容，包括 Apache Hive、Apache Impala 和 Apache Spark 等工具。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p><strong>列式存储</strong>：数据按列进行存储，这使得对特定列的查询效率较高。<br><strong>支持压缩</strong>：内置支持多种压缩算法，如 <code>Snappy</code>、<code>Gzip</code> 和 <code>Brotli</code>。<br><strong>支持复杂数据类型</strong>：支持嵌套数据结构，如数组、映射等。<br><strong>兼容性</strong>：广泛支持多种大数据处理框架，如 <code>Apache Spark</code>、<code>Apache Hive</code> 和 <code>AWS Athena</code>。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h3><p><strong>高效查询</strong>：列式存储提高了对特定列的查询性能，尤其是需要读取大量数据但只涉及少数列的情况。<br><strong>压缩率高</strong>：由于相同列的数据在一起，能够更有效地压缩。<br><strong>适用于大数据处理</strong>：优化了读取和存储性能。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h3><p><strong>写入性能</strong>：相比于行式存储，写入性能可能较差，尤其是在数据写入时需要更多的编码和压缩操作。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h3><ul><li>适用于需要进行复杂分析和查询的大数据环境，如数据仓库和大数据分析系统。</li><li>适合需要高压缩比和快速读取的场景。</li></ul><h2 id="Apache-ORC-Optimized-Row-Columnar"><a href="#Apache-ORC-Optimized-Row-Columnar" class="headerlink" title="Apache ORC (Optimized Row Columnar)"></a>Apache ORC (Optimized Row Columnar)</h2><p><code>Apache ORC</code> 是另一种专为基于 Hadoop 的大数据处理而设计的列式存储格式。它由 Apache Hive 项目开发，与其他格式相比，它提供了更好的性能和压缩能力。ORC 文件以高度优化的列式格式存储数据，可实现高效压缩、谓词下推和列级操作。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点:"></a>特点:</h3><p><strong>列式存储</strong>：像 <code>Parquet</code> 一样，<code>ORC</code> 也是列式存储。<br><strong>高压缩率</strong>：ORC 提供高压缩率的支持，常用的压缩算法包括 <code>Zlib</code> 和 <code>LZ4</code>。<br><strong>内置索引</strong>：支持内置的索引和统计信息，使得读取数据时更快。<br><strong>快速读取</strong>：优化了读取性能，尤其是对于大数据量的查询。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点:"></a>优点:</h3><p><strong>高效存储和压缩</strong>：通常比 Parquet 提供更高的压缩比和更快的读取速度。<br><strong>内置索引</strong>：通过索引加速了数据读取和查询。<br><strong>支持 Hive 特性</strong>：与 <code>Apache Hive</code> 兼容性较好。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点:"></a>缺点:</h3><p><strong>写入性能</strong>：写入性能可能较低，尤其是在数据更新频繁的情况下。<br><strong>兼容性</strong>：虽然支持的框架多，但与某些工具和系统的兼容性可能不如 Parquet 广泛。</p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景:"></a>使用场景:</h3><ul><li>适用于需要高压缩率和高效读取的大数据分析任务，尤其是在使用 <code>Apache Hive</code> 的环境中。</li><li>适合进行大量的批处理和分析任务。</li></ul><h2 id="Apache-Avro"><a href="#Apache-Avro" class="headerlink" title="Apache Avro"></a>Apache Avro</h2><p><code>Apache Avro</code> 是一个基于行的数据序列化系统，专注于提供一种紧凑、高效且基于架构的数据序列化方法。它强调简单性并支持动态类型。Avro 以二进制格式存储数据，并在数据文件中包含架构。这种自描述功能允许轻松实现架构演变和跨不同编程语言的兼容性。</p><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点:"></a>特点:</h3><p><strong>行式存储</strong>：数据以行的形式存储，每一行都是一个完整的记录。<br><strong>支持 schema</strong>：使用 JSON 格式定义 schema，支持自描述数据。<br><strong>数据序列化</strong>：主要用于数据的序列化和反序列化，适合流数据和消息传递系统。<br><strong>支持压缩</strong>：支持多种压缩算法，如 Snappy。</p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点:"></a>优点:</h3><p><strong>高效序列化</strong>：优化了序列化和反序列化操作，适合流式处理。<br><strong>灵活的 schema 进化</strong>：允许 schema 的演进，适合需要频繁更新 schema 的场景。<br><strong>简单易用</strong>：自描述的 schema 使得数据交换变得简单。</p><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点:"></a>缺点:</h3><p><strong>查询性能</strong>：行式存储可能在读取特定列时性能较差。<br><strong>压缩率</strong>：通常不如 Parquet 和 ORC 高效。</p><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景:"></a>使用场景:</h3><ul><li>适用于需要高效序列化和反序列化的流数据和消息传递系统，如 <code>Kafka</code>、<code>日志系统</code>等。</li><li>适合需要频繁更新 <code>schema</code> 和支持 schema 演进的场景。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>Parquet</code> 和 <code>ORC</code> 主要用于大数据存储和分析，因其列式存储特性提供了高效的查询和压缩性能。</li><li><code>Parquet</code> 适合广泛的工具和框架，尤其是在 <code>AWS Athena</code>、<code>Apache Spark</code> 等环境中。</li><li><code>ORC</code> 在 <code>Hadoop</code> 和 <code>Hive</code> 环境中表现尤为出色，适合需要高压缩率和读取性能的场景。</li><li><code>Avro</code> 主要用于数据的序列化和流数据处理，适合消息传递系统和需要高效序列化的应用, 适用于 <code>Kafka</code> 等流数据平台和需要高效数据交换的场景。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache Parquet </tag>
            
            <tag> Apache ORC </tag>
            
            <tag> Apache Avro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Bixby Capsule？How to develop it?</title>
      <link href="/2023/09/10/what-is-bixby-capsule/"/>
      <url>/2023/09/10/what-is-bixby-capsule/</url>
      
        <content type="html"><![CDATA[<p><img src="/assets/images/bixby/bixby.webp" class="lazyload placeholder" data-srcset="/assets/images/bixby/bixby.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Bixby Capsule"></p><h2 class="bamboo-h " id="导言1ijwfx7ny2m">导言</h2><br/><p>在今天的数字时代，虚拟助手已经成为我们日常生活的一部分。Bixby，三星电子开发的人工智能助手，是其中一个备受欢迎的助手之一。<code>Bixby Capsule</code> 是扩展 Bixby 功能的关键组成部分，本文将介绍什么是 Bixby Capsule、它的工作原理以及如何开发自己的 Capsule。</p><h2 class="bamboo-h " id="什么是 Bixby Capsule？29k07q2k7tp">什么是 Bixby Capsule？</h2><br/><p>Bixby Capsule 是一个为 Bixby 助手创建自定义功能和技能的容器。它允许开发者创建、部署和共享特定领域的虚拟助手应用程序，使用户能够通过语音和文本与虚拟助手进行交互。Capsule 的核心目标是扩展 Bixby 的能力，使其能够执行特定领域的任务，如设定闹钟、预订餐厅、查询天气、播放音乐等。</p><h2 class="bamboo-h " id="Bixby Capsule 的工作原理1r5gekw3z04">Bixby Capsule 的工作原理</h2><br/><p>了解 Bixby Capsule 的工作原理对于开发者非常重要。下面是 Bixby Capsule 的工作原理的简要概述：</p><p><strong>语音输入或文本输入</strong>：<br>用户通过语音或文本与 Bixby 进行交互，提出请求或问题。</p><p><strong>语音识别和自然语言处理</strong>：<br>Bixby 使用语音识别技术将用户的语音转化为文本，然后使用自然语言处理（NLP）技术理解用户的意图和需求。</p><p><strong>Capsule 匹配</strong>：<br>Bixby 确定用户的请求与哪个 Capsule 最匹配，这是通过匹配用户的意图与 Capsule 的功能来实现的。</p><p><strong>Capsule 交互</strong>：<br>一旦确定了匹配的 Capsule，Bixby 与该 Capsule 进行交互，将用户的请求传递给 Capsule。</p><p><strong>Capsule 执行</strong>：<br>Capsule 接收用户的请求并执行相关操作，可能需要与外部数据源或服务进行交互以获取信息或执行任务。</p><p><strong>响应用户</strong>：<br>Capsule 返回结果给 Bixby，然后 Bixby 将结果呈现给用户，通常以语音或文本形式。</p><h2 class="bamboo-h " id="如何开发 Bixby Capsule？7jsr4fvbmr">如何开发 Bixby Capsule？</h2><br/><p>现在让我们来看看如何开发自己的 Bixby Capsule。以下是一个简要的步骤：</p><h3 id="步骤-1：准备开发环境"><a href="#步骤-1：准备开发环境" class="headerlink" title="步骤 1：准备开发环境"></a>步骤 1：准备开发环境</h3><p>在开始开发之前，您需要准备好开发环境。这包括以下步骤：</p><h4 id="1-1-安装-Bixby-开发工具"><a href="#1-1-安装-Bixby-开发工具" class="headerlink" title="1.1 安装 Bixby 开发工具"></a>1.1 安装 Bixby 开发工具</h4><p>Bixby 开发工具包括 Bixby IDE（集成开发环境）和 Bixby CLI（命令行工具）。可以从 Bixby Developer Center 的官方网站上下载和安装这些工具。确保您的开发环境设置正确。</p><h4 id="1-2-注册-Bixby-开发者账户"><a href="#1-2-注册-Bixby-开发者账户" class="headerlink" title="1.2 注册 Bixby 开发者账户"></a>1.2 注册 Bixby 开发者账户</h4><p>在开始之前，您需要在 Bixby Developer Center 上注册一个开发者账户。这个账户将用于创建、管理和部署 Capsules。</p><h3 id="步骤-2：创建-Capsule"><a href="#步骤-2：创建-Capsule" class="headerlink" title="步骤 2：创建 Capsule"></a>步骤 2：创建 Capsule</h3><p>现在，让我们创建一个新的 Capsule：</p><h4 id="2-1-使用-Bixby-IDE-创建-Capsule"><a href="#2-1-使用-Bixby-IDE-创建-Capsule" class="headerlink" title="2.1 使用 Bixby IDE 创建 Capsule"></a>2.1 使用 Bixby IDE 创建 Capsule</h4><ol><li>打开 Bixby IDE。</li><li>在 IDE 中选择 “File” &gt; “New” &gt; “Bixby Capsule”。</li><li>输入 Capsule 的名称和描述，并选择 Capsule 的类型（例如，”自定义” 或 “Smart Speaker”）。</li><li>点击 “Create” 按钮。</li></ol><h4 id="2-2-定义结构、概念和操作"><a href="#2-2-定义结构、概念和操作" class="headerlink" title="2.2 定义结构、概念和操作"></a>2.2 定义结构、概念和操作</h4><p>在 Capsule 中，您可以定义结构（Structures）、概念（Concepts）和操作（Actions）来表示您的数据和功能：</p><ol><li>在 IDE 中，导航到 models 目录，然后创建一个新的 .bxb 文件。</li><li>在文件中，您可以开始定义结构、概念和操作。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">integer (NumDiceConcept) &#123;</span><br><span class="line">  description (The number of dice to throw.)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">structure (RollResultConcept) &#123;</span><br><span class="line">  description (The result object produced by the RollDice action.)</span><br><span class="line">  property (sum) &#123;</span><br><span class="line">    type (SumConcept)</span><br><span class="line">    min (Required)</span><br><span class="line">    max (One)</span><br><span class="line">  &#125;</span><br><span class="line">  property (roll) &#123;</span><br><span class="line">    description (The list of results for each dice roll.)</span><br><span class="line">    type (RollConcept)</span><br><span class="line">    min (Required)</span><br><span class="line">    max (Many)</span><br><span class="line">  &#125;      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">action (RollDice) &#123;</span><br><span class="line">  collect&#123;</span><br><span class="line">    input (numDice) &#123;</span><br><span class="line">      type (NumDiceConcept)</span><br><span class="line">      min (Required)</span><br><span class="line">      max (One)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input (numSides) &#123;</span><br><span class="line">      type (NumSidesConcept)</span><br><span class="line">      min (Required)</span><br><span class="line">      max (One)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  output (RollResultConcept)</span><br><span class="line">  type (Calculation)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="步骤-3：设计对话"><a href="#步骤-3：设计对话" class="headerlink" title="步骤 3：设计对话"></a>步骤 3：设计对话</h3><p>使用 Bixby IDE 的对话工具，您可以设计用户与 Capsule 的对话：</p><h4 id="3-1-创建对话文件"><a href="#3-1-创建对话文件" class="headerlink" title="3.1 创建对话文件"></a>3.1 创建对话文件</h4><ol><li>在 IDE 中，导航到 resources&#x2F;dialogs 目录。</li><li>创建一个新的 .dialog 文件，为您的 Capsule 定义一个对话。</li></ol><h4 id="3-2-定义用户输入和回复"><a href="#3-2-定义用户输入和回复" class="headerlink" title="3.2 定义用户输入和回复"></a>3.2 定义用户输入和回复</h4><p>在对话文件中，定义用户输入示例和 Capsule 的回复示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dialog (Result) &#123;</span><br><span class="line">  match &#123;</span><br><span class="line">    BusinessCategory (this) &#123;</span><br><span class="line">      from-property: Business (business)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  template(&quot;#&#123;value(business.name)&#125; has #&#123;joinAs(&#x27;value&#x27;, this)&#125;.&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4：测试和调试-Capsule"><a href="#步骤-4：测试和调试-Capsule" class="headerlink" title="步骤 4：测试和调试 Capsule"></a>步骤 4：测试和调试 Capsule</h3><p>在部署之前，确保您对 Capsule 进行了测试和调试：</p><h4 id="4-1-使用模拟器测试"><a href="#4-1-使用模拟器测试" class="headerlink" title="4.1 使用模拟器测试"></a>4.1 使用模拟器测试</h4><p>在 Bixby IDE 中，使用模拟器来模拟用户与 Capsule 的对话，以确保一切正常工作。检查回复是否符合预期。</p><h4 id="4-2-调试"><a href="#4-2-调试" class="headerlink" title="4.2 调试"></a>4.2 调试</h4><p>使用 Bixby IDE 的调试工具来查找和修复潜在问题。您可以设置断点、查看变量的值，并进行单步调试以确保 Capsule 的行为正确。</p><h3 id="步骤-5：部署-Capsule"><a href="#步骤-5：部署-Capsule" class="headerlink" title="步骤 5：部署 Capsule"></a>步骤 5：部署 Capsule</h3><p>一旦您对 Capsule 满意并通过了测试，就可以开始部署它：</p><h4 id="5-1-创建开发版本"><a href="#5-1-创建开发版本" class="headerlink" title="5.1 创建开发版本"></a>5.1 创建开发版本</h4><p>在 Bixby IDE 中，您可以创建一个开发版本的 Capsule，这个版本可以在您的开发环境中使用：</p><ol><li>选择 “Build” &gt; “Create Development Version”。</li><li>确认创建版本并等待完成。</li></ol><h4 id="5-2-提交审核"><a href="#5-2-提交审核" class="headerlink" title="5.2 提交审核"></a>5.2 提交审核</h4><p>如果您计划将 Capsule 分享给其他人或发布到 Bixby Marketplace，您需要提交审核请求：</p><ol><li>在 Bixby Developer Center 上登录。</li><li>在开发者中心中，选择您的 Capsule 项目，然后提交审核请求。</li></ol><h3 id="步骤-6：发布和分享"><a href="#步骤-6：发布和分享" class="headerlink" title="步骤 6：发布和分享"></a>步骤 6：发布和分享</h3><p>一旦审核通过，您可以将 Capsule 发布并分享给其他用户：</p><h4 id="6-1-发布"><a href="#6-1-发布" class="headerlink" title="6.1 发布"></a>6.1 发布</h4><ol><li>在 Bixby Developer Center 上，选择 “发布” 选项。</li><li>输入有关 Capsule 的详细信息，包括名称、描述和图标。</li><li>发布您的 Capsule。</li></ol><h4 id="6-2-分享"><a href="#6-2-分享" class="headerlink" title="6.2 分享"></a>6.2 分享</h4><p>您可以分享您的 Capsule 的链接给其他用户，或者在 Bixby Marketplace 上找到它</p><h2 class="bamboo-h " id="结论20jlf38a56v">结论</h2><br/><p>Bixby Capsule 是一个强大的工具，可以帮助开发者创建自定义虚拟助手应用程序，提供各种功能和技能。了解其工作原理以及按照上述步骤进行开发，将使您能够构建出令人印象深刻的 Bixby Capsules，改善用户体验，扩展 Bixby 的功能。</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Bixby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Glue DataBrew - 简化数据准备的利器</title>
      <link href="/2023/09/05/aws-glue-databrew-data-preparation-tool/"/>
      <url>/2023/09/05/aws-glue-databrew-data-preparation-tool/</url>
      
        <content type="html"><![CDATA[<p>数据准备是数据分析和机器学习的关键步骤之一。<code>AWS Glue DataBrew</code> 是 Amazon Web Services（AWS）提供的一项强大工具，旨在帮助数据工程师、数据分析师和数据科学家轻松地准备数据以进行分析、报告和机器学习。本文将深入探讨 AWS Glue DataBrew 的特点、优势、使用场景和如何入门。<br><img src="/assets/images/aws/aws-glue-databrew.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-glue-databrew.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Glue DataBrew"></p><h2 class="bamboo-h " id="AWS Glue DataBrew 简介4y9axqwil1o">AWS Glue DataBrew 简介</h2><br/><p>AWS Glue DataBrew 是一项全托管的数据准备服务，它通过可视化界面和自动化工具简化了数据清理、转换和准备的过程。以下是 AWS Glue DataBrew 的一些关键特点：</p><h4 id="可视化数据准备"><a href="#可视化数据准备" class="headerlink" title="可视化数据准备"></a>可视化数据准备</h4><p>DataBrew 提供了直观的用户界面，使用户能够轻松地探索、清理和转换数据，而无需编写复杂的代码。</p><h4 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h4><p>您可以通过数据探索功能快速了解数据的结构、内容和质量，以便更好地理解数据。</p><h4 id="自动数据规范化"><a href="#自动数据规范化" class="headerlink" title="自动数据规范化"></a>自动数据规范化</h4><p>DataBrew 自动检测数据类型和结构，并提供数据规范化建议，以确保数据在分析过程中的一致性。</p><h4 id="多源数据支持"><a href="#多源数据支持" class="headerlink" title="多源数据支持"></a>多源数据支持</h4><p>DataBrew 可以连接到多种数据源，包括数据湖、数据仓库、数据库、云存储和 API。</p><h4 id="数据转换和清洗"><a href="#数据转换和清洗" class="headerlink" title="数据转换和清洗"></a>数据转换和清洗</h4><p>您可以使用 DataBrew 进行各种数据转换和清洗操作，如删除重复数据、填充缺失值、合并列等。</p><h4 id="工作流程自动化"><a href="#工作流程自动化" class="headerlink" title="工作流程自动化"></a>工作流程自动化</h4><p>DataBrew 支持创建数据准备工作流程，以自动执行多个数据准备任务，提高效率。</p><h4 id="数据监控和审计"><a href="#数据监控和审计" class="headerlink" title="数据监控和审计"></a>数据监控和审计</h4><p>DataBrew 提供数据监控和审计功能，以跟踪数据准备操作，确保数据质量和安全性。</p><h2 class="bamboo-h " id="AWS Glue DataBrew 的优势18d589zonry">AWS Glue DataBrew 的优势</h2><br/><p>为什么要选择 AWS Glue DataBrew 作为数据准备工具？以下是它的一些显著优势：</p><h4 id="降低技术门槛"><a href="#降低技术门槛" class="headerlink" title="降低技术门槛"></a>降低技术门槛</h4><p>DataBrew 的可视化界面使数据准备过程对于不擅长编程的用户也变得更加可行，降低了技术门槛。</p><h4 id="节省时间"><a href="#节省时间" class="headerlink" title="节省时间"></a>节省时间</h4><p>自动化功能和预建的数据转换操作可以大幅节省数据准备的时间，使用户能够更快地获得洞察。</p><h4 id="改进数据质量"><a href="#改进数据质量" class="headerlink" title="改进数据质量"></a>改进数据质量</h4><p>DataBrew 的数据探索和质量评估工具有助于发现和解决数据质量问题，提高数据分析的可靠性。</p><h4 id="与-AWS-生态系统集成"><a href="#与-AWS-生态系统集成" class="headerlink" title="与 AWS 生态系统集成"></a>与 AWS 生态系统集成</h4><p>DataBrew 与其他 AWS 服务集成，可无缝集成到您的数据工作流程中，如 AWS Glue、S3、Redshift 等。</p><h2 class="bamboo-h " id="AWS Glue DataBrew 的使用场景d5z34v3m640">AWS Glue DataBrew 的使用场景</h2><br/><p>AWS Glue DataBrew 适用于多种使用场景，包括但不限于：</p><h4 id="数据清理和规范化"><a href="#数据清理和规范化" class="headerlink" title="数据清理和规范化"></a>数据清理和规范化</h4><p>将原始数据清理并规范化，以便进行分析和报告。</p><h4 id="数据探索和可视化"><a href="#数据探索和可视化" class="headerlink" title="数据探索和可视化"></a>数据探索和可视化</h4><p>通过数据探索功能可视化数据，以便更好地了解数据的特点。</p><h4 id="缺失数据处理"><a href="#缺失数据处理" class="headerlink" title="缺失数据处理"></a>缺失数据处理</h4><p>填充缺失数据或识别缺失数据的模式。</p><h4 id="数据合并和分割"><a href="#数据合并和分割" class="headerlink" title="数据合并和分割"></a>数据合并和分割</h4><p>合并不同来源的数据或拆分包含多个值的列。</p><h4 id="数据质量监控"><a href="#数据质量监控" class="headerlink" title="数据质量监控"></a>数据质量监控</h4><p>持续监控数据质量，以及时发现问题并采取纠正措施。</p><h2 class="bamboo-h " id="入门 AWS Glue DataBrew2dvwwlvkl2x">入门 AWS Glue DataBrew</h2><br/><p>要开始使用 AWS Glue DataBrew，您可以按照以下步骤操作：</p><ol><li>登录 AWS 控制台：使用您的 AWS 帐户登录 AWS 管理控制台。</li><li>导航到 AWS Glue DataBrew：在 AWS 控制台中，导航到 DataBrew 服务页面。</li><li>创建项目：创建一个新项目或选择现有项目，以开始数据准备工作。</li><li>导入数据：将您要准备的数据导入项目。</li><li>使用 DataBrew：在 DataBrew 的可视化界面中探索、清理和转换数据。</li><li>保存和导出数据：完成数据准备后，您可以将数据保存并导出到其他 AWS 服务或应用程序中。</li></ol><h2 class="bamboo-h " id="总结53vip9ycjik">总结</h2><br/><p>AWS Glue DataBrew 是一项强大的数据准备工具，它通过可视化界面和自动化功能使数据准备变得更加容易和高效。无论您是数据工程师、数据分析师还是数据科学家，DataBrew 都可以帮助您加速数据分析的过程，从原始数据中提取有价值的信息。开始使用 DataBrew，并体验数据准备的全新方式！</p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to install additional msi components.</title>
      <link href="/2023/05/25/how-to-install-additional-msi-components/"/>
      <url>/2023/05/25/how-to-install-additional-msi-components/</url>
      
        <content type="html"><![CDATA[<p>Recently, I had the opportunity to work on a project that requires to build a Msi Installer which contains multiple components. The project was to install these components on a Windows machine. To build this Msi Installer, I used <code>WiX toolset</code>. It’s a powerful tool that allows you to create complex installers with a high degree of flexibility. But here I’m not going to go into the details of how to create a Msi Installer using WiX toolset. Instead, I’ll focus on how to use <code>msiexec</code> tool to install additional components of a Windows MSI package.</p><h2 id="Understanding-msiexec"><a href="#Understanding-msiexec" class="headerlink" title="Understanding msiexec"></a>Understanding <code>msiexec</code></h2><p><code>msiexec</code> is a command-line utility that allows you to install, modify, or uninstall software that comes in the form of an MSI package. MSI (Microsoft Installer) packages are commonly used for software distribution because they offer a standardized way to handle installations, including dependencies and custom actions.</p><h2 id="Windows-Installer-Properties"><a href="#Windows-Installer-Properties" class="headerlink" title="Windows Installer Properties"></a>Windows Installer Properties</h2><p>The Windows Installer contains several properties that can be set to customize the installation process. These properties is defined in list categories.</p><ul><li>Component Location Properties</li><li>Configuration Properties</li><li>Date, Time Properties</li><li>Feature Installation Options Properties</li><li>Hardware Properties</li><li>Installation Status Properties</li><li>Operating System Properties</li><li>Product Information Properties</li><li>Summary Information Update Properties</li><li>System Folder Properties</li><li>User Information Properties</li></ul><p>For more details, please refer to the official documentation of Windows Installer. <a href="https://learn.microsoft.com/en-us/windows/win32/msi/property-reference">https://learn.microsoft.com/en-us/windows/win32/msi/property-reference</a></p><h2 id="The-ADDLOCAL-Option"><a href="#The-ADDLOCAL-Option" class="headerlink" title="The ADDLOCAL Option"></a>The <code>ADDLOCAL</code> Option</h2><p>One of the most useful options when using msiexec is <code>ADDLOCAL</code>. This option allows you to specify which features or components of the MSI package you want to install. Here’s the basic syntax:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /i &lt;path_to_msi_file&gt; ADDLOCAL=&lt;component1&gt;[,&lt;component2&gt;,...]</span><br></pre></td></tr></table></figure><p>This works in a scenario, some feature components of msi package already installed, and you can use this property to install additional component.</p><h2 id="Example-Scenario"><a href="#Example-Scenario" class="headerlink" title="Example Scenario"></a>Example Scenario</h2><p>Let’s say you have an MSI package named example.msi that contains several components, including FeatureA, FeatureB, and FeatureC. If you only need FeatureA and FeatureB, you can use the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /i &quot;C:\path\to\example.msi&quot; ADDLOCAL=FeatureA,FeatureB</span><br></pre></td></tr></table></figure><p>This command will install only the specified components, saving you time and disk space.</p><h2 id="Combining-with-Other-Options"><a href="#Combining-with-Other-Options" class="headerlink" title="Combining with Other Options"></a>Combining with Other Options</h2><p>msiexec offers a variety of other options that you can combine with <code>ADDLOCAL</code> to customize your installation further. For instance, you can use the <code>/passive</code> option for a passive installation, which means the installation will run with minimal user interaction:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /i &quot;C:\path\to\example.msi&quot; ADDLOCAL=FeatureA /passive</span><br></pre></td></tr></table></figure><p>This is particularly useful for automated installations or when you want to avoid user prompts.</p><h3 id="Important-Considerations"><a href="#Important-Considerations" class="headerlink" title="Important Considerations"></a>Important Considerations</h3><ol><li><p><code>Component Names</code>: Ensure that the component names are exactly as specified in the MSI package. These names can usually be found in the documentation provided with the MSI package or by inspecting the package with a tool like <code>Orca</code>.</p></li><li><p><code>All Components</code>: If you need to install all components, you can omit the <code>ADDLOCAL=ALL</code> option to install everything:</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msiexec /i &quot;C:\path\to\example.msi&quot; ADDLOCAL=ALL</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Using <code>msiexec</code> with the <code>ADDLOCAL</code> option is a powerful way to manage MSI installations, allowing you to install only the components you need. This not only saves time but also ensures that your system remains clutter-free with unnecessary software. Whether you’re a system administrator, a developer, or simply someone who likes to keep their system lean, mastering msiexec is a valuable skill.</p><p>By following the examples and tips provided in this blog post, you’ll be well on your way to becoming an expert in MSI installations. Happy installing!</p><h2 id="Useful-Links"><a href="#Useful-Links" class="headerlink" title="Useful Links"></a>Useful Links</h2><ul><li>Windows Instalelr: <a href="https://learn.microsoft.com/en-us/windows/win32/msi/windows-installer-portal">https://learn.microsoft.com/en-us/windows/win32/msi/windows-installer-portal</a></li><li>Windows Installer Property Reference: <a href="https://docs.microsoft.com/en-us/windows/win32/msi/property-reference">https://docs.microsoft.com/en-us/windows/win32/msi/property-reference</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Msi </tag>
            
            <tag> Wix </tag>
            
            <tag> Installer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Sentiment Analysis - Load Model &amp; Predict</title>
      <link href="/2023/05/02/machine-learning-sentiment-analysis-load-model-predict/"/>
      <url>/2023/05/02/machine-learning-sentiment-analysis-load-model-predict/</url>
      
        <content type="html"><![CDATA[<p>In previous blog, we have saved the trained model in the local. In this post, we will load the saved model and predict the sentiment of a given text.</p><h2 id="Load-Model"><a href="#Load-Model" class="headerlink" title="Load Model"></a>Load Model</h2><p>To load the saved model, we will use the <code>load_model</code> function from the tensorflow keras library. It’s very simple to load the saved model. We just need to pass the path of the saved model as an argument to the <code>load_model</code> function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_model</span>(<span class="params">model_path</span>):</span><br><span class="line">    model = tf.keras.models.load_model(model_path)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>In above code, we have defined a function <code>load_model</code> which takes the path of the saved model as an argument. We then load the saved model using the <code>load_model</code> function and return the loaded model.  Next step we will use this model object to predict the sentiment of a given text.</p><h2 id="Predict-Sentiment"><a href="#Predict-Sentiment" class="headerlink" title="Predict Sentiment"></a>Predict Sentiment</h2><p>To predict the sentiment of a given text, we will use the <code>predict</code> function of the loaded model. It’s very simple to predict the sentiment of a given text using the loaded model. We defined below function to predict the sentiment of a given text. It can accepts a single text or a list of texts.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict_sentiment</span>(<span class="params">model_path, sentence</span>):</span><br><span class="line">    <span class="comment"># load the model from disk</span></span><br><span class="line">    loaded_model = train_model.load_model(model_path)</span><br><span class="line">    </span><br><span class="line">    predict_text = tf.constant([])</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isinstance</span>(sentence, <span class="built_in">list</span>)):</span><br><span class="line">        predict_text = tf.constant(sentence)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        predict_text = tf.constant([sentence])</span><br><span class="line"></span><br><span class="line">    prediction = loaded_model.predict(predict_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sentence:\n&quot;</span>, sentence)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Prediction: \n&quot;</span>, prediction)</span><br></pre></td></tr></table></figure><p>In above code, we have defined a function <code>predict_sentiment</code> which takes the path of the saved model and the sentence as an argument. We then load the saved model using the <code>load_model</code> function and predict the sentiment of the given sentence using the <code>predict</code> function of the loaded model. Finally, we print the sentence and the predicted sentiment.</p><h2 id="Trained-Model-Predict-Movie-Review"><a href="#Trained-Model-Predict-Movie-Review" class="headerlink" title="Trained Model Predict Movie Review"></a>Trained Model Predict Movie Review</h2><p>Here, I choosed sample sentences which are positive and negative from test data of IMDb movie review. Below is testing result.</p><h3 id="Positive-Sentiment"><a href="#Positive-Sentiment" class="headerlink" title="Positive Sentiment"></a>Positive Sentiment</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My boyfriend and I went to watch The Guardian.At first I didn&#x27;t want to watch it, but I loved the movie- It was definitely the best movie I have seen in sometime.They portrayed the USCG very well, it really showed me what they do and I think they should really be appreciated more.Not only did it teach but it was a really good movie. The movie shows what the really do and how hard the job is.I think being a USCG would be challenging and very scary. It was a great movie all around. I would suggest this movie for anyone to see.The ending broke my heart but I know why he did it. The storyline was great I give it 2 thumbs up. I cried it was very emotional, I would give it a 20 if I could!</span><br></pre></td></tr></table></figure><p>The positive movie review text prediction is: 0.9982441, which means the sentiment of the given text is positive.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/sentiment-analysis-predict-positive.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/sentiment-analysis-predict-positive.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Sentiment Analysis Predict Positive Movie Review"/></div><span class="image-caption">Sentiment Analysis Predict Positive Movie Review</span></div><h3 id="Negative-Sentiment"><a href="#Negative-Sentiment" class="headerlink" title="Negative Sentiment"></a>Negative Sentiment</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Once again Mr. Costner has dragged out a movie for far longer than necessary. Aside from the terrific sea rescue sequences, of which there are very few I just did not care about any of the characters. Most of us have ghosts in the closet, and Costner&#x27;s character are realized early on, and then forgotten until much later, by which time I did not care. The character we should really care about is a very cocky, overconfident Ashton Kutcher. The problem is he comes off as kid who thinks he&#x27;s better than anyone else around him and shows no signs of a cluttered closet. His only obstacle appears to be winning over Costner. Finally when we are well past the half way point of this stinker, Costner tells us all about Kutcher&#x27;s ghosts. We are told why Kutcher is driven to be the best with no prior inkling or foreshadowing. No magic here, it was all I could do to keep from turning it off an hour in.</span><br></pre></td></tr></table></figure><p>The negative movie review text prediction is: 0.1066813, which means the sentiment of the given text is negative.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/sentiment-analysis-predict-negative.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/sentiment-analysis-predict-negative.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Sentiment Analysis Predict Negative Movie Review"/></div><span class="image-caption">Sentiment Analysis Predict Negative Movie Review</span></div><p>Fro the movie review text, the model predicts the sentiment as positive and negative with high accuracy.</p><h2 id="AWS-Comprehend-Predict-Movie-Review"><a href="#AWS-Comprehend-Predict-Movie-Review" class="headerlink" title="AWS Comprehend Predict Movie Review"></a>AWS Comprehend Predict Movie Review</h2><p>Below screenshot result is from AWS Comprehend Sentiment Analysis by using the same text. The result is similar.</p><h3 id="Positive"><a href="#Positive" class="headerlink" title="Positive"></a>Positive</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/aws-comprehend-predict-positive.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/aws-comprehend-predict-positive.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Comprehend Predict Positive Movie Review" style="width:600px;"/></div><span class="image-caption">AWS Comprehend Predict Positive Movie Review</span></div><h3 id="Negative"><a href="#Negative" class="headerlink" title="Negative"></a>Negative</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/aws-comprehend-predict-negative.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/aws-comprehend-predict-negative.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Comprehend Predict Negative Movie Review" style="width:600px;"/></div><span class="image-caption">AWS Comprehend Predict Negative Movie Review</span></div><h2 id="Trained-Model-Predict-Short-Text"><a href="#Trained-Model-Predict-Short-Text" class="headerlink" title="Trained Model Predict Short Text"></a>Trained Model Predict Short Text</h2><p>Our trained model is trained by the more words and sentences of the movie review. It’s not trained on short text. So, let’s test our trained model on a short text. Below is a short negative text.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Overall, this movie fell short of expectations, failing to deliver on its promise and leaving viewers disappointed.</span><br></pre></td></tr></table></figure><p>The short negative text prediction is: 0.8730284, it is biger than 0.5, which means the sentiment of the given text prediction is wrong. The text is negative, but the model prediction is positive.</p><p>Let’s use more than 50 words movie review text to test our trained model. Below negative movie review text is generated by the <code>ChatGPT</code>, not from the IMDb movie review test dataset.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The film started with promising potential but quickly unraveled into a tedious and confusing mess. The plot was convoluted, jumping between disconnected storylines without coherence. Characters lacked depth, their motivations unclear and actions inexplicable. Despite a talented cast, performances felt uninspired, failing to salvage a script riddled with clichés and predictable twists. Overall, it was a disappointing experience, leaving viewers bewildered and dissatisfied.</span><br></pre></td></tr></table></figure><p>Above text prediction is: 0.02043398, which means the sentiment of the given text is very negative. The model prediction result as expected.</p><h2 id="Trained-Model-Predict-Other-Domain-Text"><a href="#Trained-Model-Predict-Other-Domain-Text" class="headerlink" title="Trained Model Predict Other Domain Text"></a>Trained Model Predict Other Domain Text</h2><p>In the last, let’s try to use the model to predict other domain instead of the movie review. Let’s use the <code>ChatGPT</code> to generate a more than 50 words about travel feedback.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My vacation experience was marred by a series of unfortunate events. From delayed flights and lost luggage to subpar accommodations and unhelpful staff, every aspect seemed plagued by mishaps. The tourist attractions were overcrowded, making it impossible to enjoy any peaceful moments. Despite meticulous planning, the trip turned into a stressful ordeal, leaving me wishing I had stayed home instead.</span><br></pre></td></tr></table></figure><p>The text prediction is: 0.3355006, the prediction is negative. It’s correct. However, compare to the movie review text, the model is not trained on the travel feedback text. It’s not a good result as we want.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this post, we have introduced the concept of sentiment analysis and trained a model using the movie review dataset. We have also tested the trained model on movie review and travel feedback text. Beside, we also compared the result with AWS Comprehend Sentiment Analysis. We have seen that our trained model is not good at predicting the sentiment of short text. We need to train the model on more data to improve the accuracy of the prediction. And for the other domain text, like travel feedback, since our model is not trained on this domain, it’s not a good result. The model also need to be trained on more data to improve the accuracy of the prediction.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> AWS </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> NLP </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Sentiment Analysis - Evaluate &amp; Save Model</title>
      <link href="/2023/04/18/machine-learning-sentiment-analysis-evaluate-save-model/"/>
      <url>/2023/04/18/machine-learning-sentiment-analysis-evaluate-save-model/</url>
      
        <content type="html"><![CDATA[<p>In previous post, we have trained a machine learning model to classify sentiments of movie reviews. In this post, we will evaluate the performance of the model and save the model for future use.</p><h2 id="Evaluate-Model"><a href="#Evaluate-Model" class="headerlink" title="Evaluate Model"></a>Evaluate Model</h2><p>To evaluate the performance of the model, we will use the test dataset. Using the <code>evaluate</code> method of the model to calculate the loss and accuracy of the model on the test dataset.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># evaluate model on test dataset</span></span><br><span class="line">loss, accuracy = trained_model.evaluate(test_dataset)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test accuracy:&quot;</span>, accuracy)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test loss:&quot;</span>, loss)</span><br></pre></td></tr></table></figure><p>The <code>evaluate</code> method returns two values, the loss and the accuracy of the model on the test dataset. We can use these values to evaluate the performance of the model. below is result of the evaluation on the test dataset:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test accuracy: 0.8694400191307068</span><br><span class="line">Test loss: 0.3562678098678589</span><br></pre></td></tr></table></figure><h2 id="Save-Model"><a href="#Save-Model" class="headerlink" title="Save Model"></a>Save Model</h2><p>To save the model for future use, we will use the <code>save</code> method of the model. The trained model will be saved in the local machine as a <code>.keras</code> file. The model file format extension can be <code>.h5</code>, <code>.tf</code> or <code>.keras</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">vectorize_layer, model, model_saved_path</span>):</span><br><span class="line">    export_model = tf.keras.Sequential([</span><br><span class="line">        vectorize_layer, <span class="comment"># text vectorization layer</span></span><br><span class="line">        model <span class="comment"># the model trained before</span></span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    export_model.<span class="built_in">compile</span>(</span><br><span class="line">        loss=losses.BinaryCrossentropy(from_logits=<span class="literal">False</span>), </span><br><span class="line">        optimizer=<span class="string">&quot;adam&quot;</span>, </span><br><span class="line">        metrics=[<span class="string">&#x27;accuracy&#x27;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save model</span></span><br><span class="line">    export_model.save(model_saved_path)</span><br><span class="line">    <span class="keyword">return</span> export_model</span><br></pre></td></tr></table></figure><p>In above code, we first create a new model by combining the <code>vectorize_layer</code> and the trained <code>model</code>. We then compile the model with the same loss function, optimizer and metrics used during training. Finally, we save the model using the <code>save</code> method and return the saved model. </p><p>Here is a thing need to be noticed, we need to put the <code>vectorize_layer</code> as the first layer of the model so that it can be used to preprocess the text data before passing it to the trained model.</p><p>In the next blog, we will introduce how to load the model and use it to make predictions on new data.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> NLP </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Sentiment Analysis - Train Model</title>
      <link href="/2023/04/02/machine-learning-sentiment-analysis-train-model/"/>
      <url>/2023/04/02/machine-learning-sentiment-analysis-train-model/</url>
      
        <content type="html"><![CDATA[<p>In previous blog, we have built a tensorflow model to classify sentiments of movie reviews base on tensorflow and keras high level API, and compile it. In this blog, we will train the model on the movie review dataset to improve the accuracy of the model.</p><h2 id="Train-Model"><a href="#Train-Model" class="headerlink" title="Train Model"></a>Train Model</h2><p>To train the model, we need to pass the training dataset<code>and validation dataset into the model. The</code>training dataset<code>is used to train the model and the</code>validation dataset&#96; is used to evaluate the model’s performance. Beside, we also need to specify the number of epochs to train the model.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train the model</span></span><br><span class="line">history = model.fit(</span><br><span class="line">    train_ds, <span class="comment"># training dataset  </span></span><br><span class="line">    validation_data=val_ds, <span class="comment"># validation dataset</span></span><br><span class="line">    epochs=config.epochs <span class="comment"># number of training rounds over the entire dataset</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>In above code, we are using <code>fit()</code> method to train the model. The <code>fit()</code> method takes two arguments, <code>train_ds</code> and <code>val_ds</code>. <code>train_ds</code> is the training dataset and <code>val_ds</code> is the validation dataset. The <code>epochs</code> argument specifies the number of training rounds over the entire dataset. The <code>fit()</code> method returns a <code>history</code> object which contains the training and validation metrics. </p><p>Below is the model training epochos, we defined the epochs as 11, so you can see the there is 11 steps to train the model. Each step is an epoch and displaying the training and validation loss and accuracy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the trainning times</span></span><br><span class="line">epochs = <span class="number">11</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/sentiment-analysis-model-train-epochs.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/sentiment-analysis-model-train-epochs.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Model Train Epochs" style="width:800px;"/></div><span class="image-caption">Model Train Epochs</span></div><h2 id="Plot-Training-Metrics"><a href="#Plot-Training-Metrics" class="headerlink" title="Plot Training Metrics"></a>Plot Training Metrics</h2><p>Base on history object, we can plot the training and validation metrics. We using <code>matplotlib</code> library to plot the metrics.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_training_loss_history</span>(<span class="params">trained_history</span>):</span><br><span class="line">    history_dict = trained_history.history</span><br><span class="line">    history_dict.keys()</span><br><span class="line">    loss = history_dict[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">    val_loss = history_dict[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line">    epochs = <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(history_dict[<span class="string">&#x27;binary_accuracy&#x27;</span>]) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    plt.plot(epochs, loss, <span class="string">&#x27;bo&#x27;</span>, label=<span class="string">&#x27;Training Loss&#x27;</span>) <span class="comment"># &quot;bo&quot; is for &quot;blue dot&quot;</span></span><br><span class="line">    plt.plot(epochs, val_loss, <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;Validation Loss&#x27;</span>) <span class="comment"># b is for &quot;solid blue line&quot;</span></span><br><span class="line">    plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_training_accuracy_history</span>(<span class="params">trained_history</span>):</span><br><span class="line">    history_dict = trained_history.history</span><br><span class="line">    history_dict.keys()</span><br><span class="line">    acc = history_dict[<span class="string">&#x27;binary_accuracy&#x27;</span>]</span><br><span class="line">    val_acc = history_dict[<span class="string">&#x27;val_binary_accuracy&#x27;</span>]</span><br><span class="line">    epochs = <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(acc) + <span class="number">1</span>)</span><br><span class="line">    plt.plot(epochs, acc, <span class="string">&#x27;bo&#x27;</span>, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">    plt.plot(epochs, val_acc, <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>Above code defines two functions to plot the training and validation loss and accuracy. We can call these functions after training the model to plot the metrics. Below is plot graphically of the training and validation loss and accuracy.</p><h3 id="Training-and-Validation-Accuracy"><a href="#Training-and-Validation-Accuracy" class="headerlink" title="Training and Validation Accuracy"></a>Training and Validation Accuracy</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/sentiment-analysis-model-train-accuracy.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/sentiment-analysis-model-train-accuracy.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Training and Validation Accuracy" style="width:800px;"/></div><span class="image-caption">Training and Validation Accuracy</span></div><p>In the above graph, we can see that the training accuracy and validation accuracy are close to each other, which means the model is not overfitting. The training and validation accuracy are increasing.</p><h3 id="Training-and-Validation-Loss"><a href="#Training-and-Validation-Loss" class="headerlink" title="Training and Validation Loss"></a>Training and Validation Loss</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/sentiment-analysis-model-train-loss.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/sentiment-analysis-model-train-loss.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Training and Validation Loss" style="width:800px;"/></div><span class="image-caption">Training and Validation Loss</span></div><p>In above graph, we can see that the training loss and validation loss are decreasing. This means the model is improving its performance on the training dataset.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this blog, we have trained the model on the movie review dataset to improve the accuracy of the model. We have also plotted the training and validation metrics to check the performance of the model. In the next blog, we will evaluate the model on the test dataset.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> NLP </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Sentiment Analysis - Compile Model</title>
      <link href="/2023/03/25/machine-learning-sentiment-analysis-compile-model/"/>
      <url>/2023/03/25/machine-learning-sentiment-analysis-compile-model/</url>
      
        <content type="html"><![CDATA[<p>In previous blog, we have built a machine learning model to classify the sentiment of a given text. In this blog, we will introduce how to compile the model.</p><h2 id="Compile-Model"><a href="#Compile-Model" class="headerlink" title="Compile Model"></a>Compile Model</h2><p>After building the model, we need to compile it. Compiling the model involves specifying the loss function, optimizer, and evaluation metric.</p><h3 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h3><p>The loss function is used to measure the difference between the predicted output and the actual output. It is used to minimize the difference between the predicted output and the actual output.</p><p>There are several loss functions available in <code>Keras</code>:</p><ul><li>Binary Crossentropy</li><li>Categorical Crossentropy</li></ul><p><code>损失函数（Loss Function）</code>是机器学习和深度学习中用于衡量模型预测值与真实值之间差异的函数。它的作用是评估模型的预测性能，并指导模型在训练过程中进行参数调整，以最小化预测误差。</p><ul><li><strong>度量误差</strong>：损失函数计算模型预测值与真实值之间的差异，从而度量模型的预测误差。</li><li><strong>优化目标</strong>：损失函数为模型的优化提供了一个明确的目标。在训练过程中，优化算法（如梯度下降）会调整模型的参数，以最小化损失函数的值。</li><li><strong>评估性能</strong>：损失函数的值可以用于评估模型的性能。通常，损失函数的值越小，模型的预测性能越好</li></ul><h3 id="Optimizer"><a href="#Optimizer" class="headerlink" title="Optimizer"></a>Optimizer</h3><p>The optimizer is used to update the weights of the model during training. It adjusts the weights to minimize the loss function. There are several optimizers available in <code>Keras</code>:</p><ul><li>SGD (Stochastic Gradient Descent)</li><li>Adam (Adaptive Moment Estimation)</li><li>Adagrad</li><li>Adadelta</li><li>RMSprop</li></ul><p><code>优化器（Optimizer）</code>是机器学习和深度学习中用于更新模型参数以最小化损失函数的算法。它的作用是通过调整模型的参数，使得损失函数的值尽可能小，从而提高模型的预测性能。</p><ul><li><strong>参数更新</strong>：优化器根据损失函数的梯度信息，计算出模型参数的更新方向和步长，从而更新模型的参数。</li><li><strong>加速收敛</strong>：优化器通过各种策略（如动量、自适应学习率等），加速模型的收敛过程，使得模型更快地达到最优解。</li><li><strong>防止过拟合</strong>：优化器可以通过正则化等技术，防止模型在训练数据上过拟合，提高模型的泛化能力。</li></ul><h3 id="Evaluation-Metric"><a href="#Evaluation-Metric" class="headerlink" title="Evaluation Metric"></a>Evaluation Metric</h3><p>The evaluation metric is used to measure the performance of the model.  There are several evaluation metrics available in <code>Keras</code>:</p><ul><li>Accuracy</li><li>Precision</li><li>Recall</li><li>F1 Score</li><li>AUC (Area Under the Curve)</li></ul><p><code>指标（Metrics）</code>是机器学习和深度学习中用于评估模型性能的量化标准。它们的作用是提供一种客观的方式来衡量模型的预测能力，并帮助用户了解模型在不同方面的表现。</p><ul><li><strong>性能评估</strong>：指标用于评估模型在训练、验证和测试数据上的性能。不同的指标可以衡量模型在不同方面的表现，如准确率、精确率、召回率、F1分数等。</li><li><strong>监控训练过程</strong>：指标可以用于监控模型的训练过程，帮助用户了解模型是否在正确地学习和改进。例如，通过观察训练和验证指标的变化，可以判断模型是否过拟合或欠拟合。</li><li><strong>模型选择</strong>：指标可以用于比较不同模型的性能，从而选择最优的模型。例如，在多个模型中，可以选择在验证数据上表现最好的模型进行进一步的测试和部署。</li></ul><p>Now, let’s compile our model with <code>Binary Crossentropy</code> loss function, <code>Adam</code> optimizer, and <code>Accuracy</code> evaluation metric. Below is code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># compile the model</span></span><br><span class="line">model.<span class="built_in">compile</span>(</span><br><span class="line">   <span class="comment"># Loss function (二分类交叉熵损失函数), aim to calculate the difference between the predicted and actual values</span></span><br><span class="line">    loss=losses.BinaryCrossentropy(), </span><br><span class="line">    <span class="comment"># A adam optimizer(自适应矩估计优化器)， a popular optimizer for neural networks, aim to minimize the loss function</span></span><br><span class="line">    optimizer=<span class="string">&#x27;adam&#x27;</span>, </span><br><span class="line">    <span class="comment"># Binary Accuracy metric(二分类准确率评估指标)，&gt;0.5 is positive，&lt;0.5 is negative</span></span><br><span class="line">    metrics=[tf.metrics.BinaryAccuracy(threshold=<span class="number">0.5</span>)]</span><br><span class="line">  ) </span><br></pre></td></tr></table></figure><p>In above code, we have used <code>BinaryCrossentropy</code> loss function, <code>adam</code> optimizer, and <code>BinaryAccuracy</code> metric. We have also set the threshold to 0.5, which means that if the predicted value is greater than 0.5, it is considered as positive, otherwise it is considered as negative. </p><p>Now, we have compiled our model. In next blog, we will introduce the process of training the model.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> NLP </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Sentiment Analysis - Build Model</title>
      <link href="/2023/03/12/machine-learning-sentiment-analysis-build-model/"/>
      <url>/2023/03/12/machine-learning-sentiment-analysis-build-model/</url>
      
        <content type="html"><![CDATA[<p>In previous post, we have talk about the <code>Text Vectorization</code> which is the process of converting text data into numerical data. In this post, we will build a <code>Sentiment Analysis</code> model using <code>Keras</code> and <code>Tensorflow</code> libraries.</p><h2 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h2><p>Before build the <code>tensorflow</code> model, let’s take a look the <code>Neuron Network</code>. The <code>Neuron Network</code> is a type of artificial neural network that is based on the structure of the human brain. It consists of layers of interconnected neurons, or nodes. Each neuron receives input from other neurons, processes it, and then passes the output to other neurons. The final output of the network is a prediction of the network’s input.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/neural-network.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/neural-network.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Neural Network Architecture" style="width:800px;"/></div><span class="image-caption">Neural Network Architecture</span></div><p>In the Neural Network, there are three layers, input, hidden, and output. The input layer receives the input data, the hidden layer processes the data, and the output layer produces the output. The hidden layer consists of multiple neurons, each with its own weights and biases. The weights and biases are adjusted during the training process to minimize the error between the predicted output and the actual output.</p><h2 id="Sentiment-Analysis-Model"><a href="#Sentiment-Analysis-Model" class="headerlink" title="Sentiment Analysis Model"></a>Sentiment Analysis Model</h2><p>In the <code>Sentiment Analysis</code> model, we will use the <code>Keras</code> library to build the <code>Tensorflow</code> model. The <code>Keras</code> library is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, Pytorch etc. It was developed with a focus on enabling fast experimentation.</p><p>Below is the code to build the <code>Sentiment Analysis</code> model using <code>Keras</code> and <code>Tensorflow</code> libraries. We using <code>Embedding</code>, <code>GlobalAveragePooling1D</code>, <code>Dense</code>, <code>Dropout</code> layers to build the model.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">  <span class="comment"># Embedding layer with 64 dimensions</span></span><br><span class="line">  layers.Embedding(config.max_features, config.embedding_dim),</span><br><span class="line">  layers.Dropout(<span class="number">0.3</span>),</span><br><span class="line">  <span class="comment"># average pooling layer to get the mean of all the word embeddings in a sentence</span></span><br><span class="line">  layers.GlobalAveragePooling1D(), </span><br><span class="line">  layers.Dropout(<span class="number">0.2</span>),</span><br><span class="line">  <span class="comment"># fully connected layer with 64 nerual units, relual activation function f(x)=max(0, x). Popular for deep neural networks</span></span><br><span class="line">  layers.Dense(config.embedding_dim, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  <span class="comment"># dropout layer to prevent overfitting, 0.2 means 20% of the neurons will be dropped out</span></span><br><span class="line">  layers.Dropout(<span class="number">0.2</span>), </span><br><span class="line">  layers.Dense(config.embedding_dim, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.Dropout(<span class="number">0.1</span>),</span><br><span class="line">  <span class="comment"># output layer with sigmoid activation function, output probabilities (0 - 1)</span></span><br><span class="line">  layers.Dense(<span class="number">1</span>, activation=<span class="string">&#x27;sigmoid&#x27;</span>)]) </span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><p>To better understand each layer’s purpose, let’s break it down into Chinese. </p><h3 id="Sequential-Model"><a href="#Sequential-Model" class="headerlink" title="Sequential Model"></a>Sequential Model</h3><p><code>Sequential</code>是Keras中的一种模型，它是一种线性堆叠模型，即将多个层连接在一起。它可以将多个层作为一个整体来看待，并将其输出作为下一个层的输入。</p><h3 id="Embedding-Layer"><a href="#Embedding-Layer" class="headerlink" title="Embedding Layer"></a>Embedding Layer</h3><p><code>Embedding</code>层是一种用于将整数序列（通常是词汇表中的单词索引）转换为密集向量表示的层。它的作用是将离散的、高维度的输入（如单词索引）映射到连续的、低维度的向量空间中。<br><strong>词嵌入</strong>：将词汇表中的每个单词映射到一个固定大小的向量。这些向量可以捕捉单词之间的语义关系，例如相似的单词在向量空间中会更接近。<br><strong>降维</strong>：将高维度的输入（如词汇表中的单词索引）转换为低维度的向量表示，从而减少模型的参数数量和计算复杂度。</p><h3 id="GlobalAveragePooling1D-Layer"><a href="#GlobalAveragePooling1D-Layer" class="headerlink" title="GlobalAveragePooling1D Layer"></a>GlobalAveragePooling1D Layer</h3><p><code>GlobalAveragePooling1D</code>是Keras中的一种池化层，用于一维数据（如时间序列或文本数据）。它的作用是将输入的每个特征维度进行全局平均池化，从而将每个特征维度压缩为一个单一的值。<br><strong>降维</strong>：通过计算每个特征维度的平均值，将输入的维度减少到一个单一的值。例如，如果输入是一个形状为(batch_size, steps, features)的张量，GlobalAveragePooling1D将输出一个形状为(batch_size, features)的张量。<br><strong>特征压缩</strong>：通过全局平均池化，可以有效地压缩输入的特征，减少模型的参数数量和计算复杂度。</p><h3 id="Dense-Layer"><a href="#Dense-Layer" class="headerlink" title="Dense Layer"></a>Dense Layer</h3><p><code>Dense</code>层是一种全连接层（fully connected layer），也称为密集层。它的作用是将输入的每个元素与该层的每个神经元进行连接，并应用线性变换和激活函数。<br><strong>线性变换</strong>：对输入数据进行线性组合，即通过权重矩阵和偏置向量对输入进行加权求和。<br><strong>激活函数</strong>：在完成线性变换后，应用激活函数（如ReLU、sigmoid、tanh等）以引入非线性特性，从而使神经网络能够学习和表示更复杂的函数。</p><h3 id="Dropout-Layer"><a href="#Dropout-Layer" class="headerlink" title="Dropout Layer"></a>Dropout Layer</h3><p><code>Dropout</code>层是一种正则化技术，用于防止神经网络过拟合。它的作用是在训练过程中随机地将一些神经元的输出设置为0，从而使得网络不会过度依赖于某些特定的神经元，增强了模型的泛化能力。<br><strong>随机失活</strong>：在每次训练迭代中，Dropout层会随机选择一定比例的神经元（由参数rate指定，例如0.1表示10%的神经元），并将它们的输出设置为0。<br><strong>减少过拟合</strong>：通过随机失活神经元，Dropout层可以减少神经网络对特定输入特征的依赖，从而防止模型在训练数据上过度拟合，提高模型在未见数据上的泛化能力。</p><h3 id="Sigmoid-Activation-Function"><a href="#Sigmoid-Activation-Function" class="headerlink" title="Sigmoid Activation Function"></a>Sigmoid Activation Function</h3><p><code>Sigmoid</code>激活函数是一种常用的激活函数，它将输入值压缩到0-1之间，并将输出解释为概率。</p><p>The <code>summary()</code> method is used to print the model architecture. It provides a summary of the layers in the model, including the number of parameters and the shape of the output.</p><p>So now, we have build the <code>Sentiment Analysis</code> model using <code>Keras</code> and <code>Tensorflow</code> libraries. In the next post, we will train the model and evaluate its performance.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> NLP </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Sentiment Analysis - Text Vectorization</title>
      <link href="/2023/02/21/machine-learning-sentiment-analysis-text-vectorization/"/>
      <url>/2023/02/21/machine-learning-sentiment-analysis-text-vectorization/</url>
      
        <content type="html"><![CDATA[<p>In previous blog, we discussed about the basics of Sentiment Analysis and load the raw dataset which is IMDb movie reviews. In this blog, we will discuss about text vectorization and how to use it in Sentiment Analysis.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/text-vectorization.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/text-vectorization.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Text Vectorization" style="width:800px;"/></div><span class="image-caption">Text Vectorization</span></div><h2 id="Text-Vectorization-Methods"><a href="#Text-Vectorization-Methods" class="headerlink" title="Text Vectorization Methods"></a>Text Vectorization Methods</h2><p>Before train the model, we need to convert the text data into numerical data. Text representation is the process of converting text data into a numerical form that can be used for machine learning tasks. There are several ways to represent text data, such as <code>Bag-of-Words</code>, <code>TF-IDF</code>, and <code>Word Embeddings</code>.</p><h3 id="Bag-of-Words-BoW"><a href="#Bag-of-Words-BoW" class="headerlink" title="Bag-of-Words (BoW)"></a>Bag-of-Words (BoW)</h3><p><code>Bag-of-Words (BoW)</code> is a method of text representation that converts text into a word frequency vector. In this representation, the text is treated as a “bag” containing all the words, without considering their order and grammatical structure. The number of times each word appears in the text is recorded, forming a vector. This method ignores the order and context of words but is simple and easy to implement.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/BoW-bag-of-words.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/BoW-bag-of-words.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="BoW Text Vectorization" style="width:800px;"/></div><span class="image-caption">BoW Text Vectorization</span></div><h3 id="TF-IDF-Term-Frequency-Inverse-Document-Frequency"><a href="#TF-IDF-Term-Frequency-Inverse-Document-Frequency" class="headerlink" title="TF-IDF (Term Frequency-Inverse Document Frequency)"></a>TF-IDF (Term Frequency-Inverse Document Frequency)</h3><p><code>TF-IDF</code> is a statistical method used to evaluate the importance of a word in a document collection or corpus. It consists of two parts:<br><strong>Term Frequency (TF):</strong> The frequency of a word in a document.<br><strong>Inverse Document Frequency (IDF):</strong> The inverse of the document frequency, which measures the general importance of a word across all documents. IDF is calculated by taking the logarithm of the total number of documents divided by the number of documents containing the word.</p><p>The TF-IDF value is the product of TF and IDF, used to measure the importance of a word in a document. The higher the TF-IDF value, the more important the word is in the document.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/TF-IDF.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/TF-IDF.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="TF-IDF Text Vectorization" style="width:800px;"/></div><span class="image-caption">TF-IDF Text Vectorization</span></div><h3 id="Word-Embeddings"><a href="#Word-Embeddings" class="headerlink" title="Word Embeddings"></a>Word Embeddings</h3><p><code>Word Embedding</code> is a technique that represents words as dense vectors. Unlike traditional <code>Bag-of-Words</code> and <code>TF-IDF</code> methods, Word Embedding captures semantic relationships between words. Through training, these vectors can represent words in a vector space, where words with similar meanings are closer to each other in the vector space. The main advantages of Word Embedding include:<br><strong>Semantic Capture:</strong> It can capture semantic relationships between words, for example, the distance between “king” and “queen” in the vector space will be closer than the distance between “king” and “apple”.<br><strong>Dimensionality Reduction:</strong> Compared to high-dimensional One-Hot encoding, Word Embedding typically uses lower-dimensional vectors to represent words.<br><strong>Context Awareness:</strong> Some advanced Word Embedding techniques (such as BERT and GPT) can capture the meaning of words in different contexts.<br>In deep learning models, Word Embedding is usually used as an input layer to convert text data into numerical vectors, making it easier for neural networks to process.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/word-embedding.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/word-embedding.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Word Embedding Text Vectorization" style="width:800px;"/></div><span class="image-caption">Word Embedding Text Vectorization</span></div><h2 id="Text-Vectorization"><a href="#Text-Vectorization" class="headerlink" title="Text Vectorization"></a>Text Vectorization</h2><p>In this section, we will discuss about different text vectorization techniques and how to use them in Sentiment Analysis. This method <code>TextVectorization</code> layer in TensorFlow is similar to Bag-of-Words because it converts text into sequences of integer encodings, without considering the order of words. Unlike traditional <code>Bag-of-Words</code> and <code>TF-IDF</code>, the TextVectorization layer is implemented directly in TensorFlow, making it easy to integrate with deep learning models.</p><h3 id="Create-TextVectorization-Layer"><a href="#Create-TextVectorization-Layer" class="headerlink" title="Create TextVectorization Layer"></a>Create TextVectorization Layer</h3><p>Below is the code to covert the text data into numerical data using TextVectorization layer in TensorFlow:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_text_vectorization_layer</span>(<span class="params">raw_train_ds</span>):</span><br><span class="line">  vectorize_layer = layers.TextVectorization(</span><br><span class="line">    standardize=<span class="string">&#x27;lower_and_strip_punctuation&#x27;</span>,</span><br><span class="line">    max_tokens=config.max_features,</span><br><span class="line">    output_mode=<span class="string">&#x27;int&#x27;</span>,</span><br><span class="line">    output_sequence_length=config.sequence_length <span class="comment"># output sequence length</span></span><br><span class="line">    )</span><br><span class="line">  <span class="comment"># adapt the vectorization layer to the training data</span></span><br><span class="line">  train_text = raw_train_ds.<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x)</span><br><span class="line">  vectorize_layer.adapt(train_text)</span><br><span class="line">  <span class="keyword">return</span> vectorize_layer</span><br></pre></td></tr></table></figure><p>In the above code, we first import the necessary libraries and load the configuration file. We then define a function <code>create_text_vectorization_layer</code> which takes the raw training dataset as input and returns the TextVectorization layer.</p><p>The <code>TextVectorization</code> layer is initialized with the <code>standardize</code> parameter set to <code>lower_and_strip_punctuation</code>, which converts all text to lowercase and removes any punctuation. The <code>max_tokens</code> parameter is set to <code>config.max_features</code>, which is the maximum number of unique words to keep in the vocabulary. The <code>output_mode</code> parameter is set to <code>int</code>, which means that the output will be integer indices representing the words in the vocabulary. The <code>output_sequence_length</code> parameter is set to <code>config.sequence_length</code>, which is the length of the output sequences.</p><p>We then adapt the vectorization layer to the training data using the <code>adapt</code> method. This method fits the vectorization layer to the vocabulary of the training data, which is used to encode the input text into integer sequences.</p><h3 id="Vectorize-Text-Data"><a href="#Vectorize-Text-Data" class="headerlink" title="Vectorize Text Data"></a>Vectorize Text Data</h3><p>After that, we can use the TextVectorization layer to vectorize the text data. Core code as below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vectorize_text</span>(<span class="params">text, label, vectorize_layer</span>):</span><br><span class="line">  text = tf.expand_dims(text, -<span class="number">1</span>) <span class="comment"># add a dimension for the text vectorization layer</span></span><br><span class="line">  <span class="keyword">return</span> vectorize_layer(text), label</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vectorize_dataset</span>(<span class="params">dataset, vectorize_layer</span>):</span><br><span class="line">  vectorized_dataset = dataset.<span class="built_in">map</span>(<span class="keyword">lambda</span> text, label: vectorize_text(text, label, vectorize_layer)) <span class="comment"># vectorize text data</span></span><br><span class="line">  vectorized_dataset = vectorized_dataset.cache().prefetch(buffer_size=tf.data.AUTOTUNE) <span class="comment"># performance optimization</span></span><br><span class="line">  <span class="keyword">return</span> vectorized_dataset</span><br></pre></td></tr></table></figure><p>The above code defines two functions: <code>vectorize_text</code> and <code>vectorize_dataset</code>. The <code>vectorize_text</code> function takes the text data and label, and applies the TextVectorization layer to the text data. The <code>vectorize_dataset</code> function takes the raw dataset and the TextVectorization layer, and applies the <code>vectorize_text</code> function to each element in the dataset. The <code>cache</code> and <code>prefetch</code> methods are used to optimize the performance of the dataset.</p><p>The function <code>vectorize_dataset</code> returns the vectorized dataset, which can be used to train the model.</p><p>In next blog, we will talk about build a Sentiment Analysis model using TensorFlow and Keras, and using this vectorized dataset to train the model.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> NLP </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Sentiment Analysis - Load Raw Dataset</title>
      <link href="/2023/02/14/machine-learning-sentiment-analysis-load-raw-dataset/"/>
      <url>/2023/02/14/machine-learning-sentiment-analysis-load-raw-dataset/</url>
      
        <content type="html"><![CDATA[<p>Recently, the <code>ChatGPT</code> is very hot in the NLP community. It is a transformer-based language model that can generate human-like conversations. It attracts me to learn about Machine Learning to build a AI model. In this blog, I will talk about how to build a Sentiment Analysis model, the topic will be separated into several blogs, including Load raw dataset,Text Vectorization, Model Training, and Model Evaluation, Model Testing.</p><h2 id="Sentiment-Analysis"><a href="#Sentiment-Analysis" class="headerlink" title="Sentiment Analysis"></a>Sentiment Analysis</h2><p>Sentiment Analysis is a natural language processing (NLP) task that involves classifying the sentiment of a given text into one of the predefined categories such as positive, negative, or neutral. The goal of sentiment analysis is to understand the attitude or opinion of the writer towards a particular topic or product.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/sentiment-analysis.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/sentiment-analysis.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Sentiment Analysis" style="width:600px;"/></div><span class="image-caption">Sentiment Analysis</span></div><h2 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h2><p>To build and train a sentiment analysis model, we need a dataset. The dataset used in this blog is the <code>IMDB movie review dataset</code>. You can find this dataset more information in previous blogs. It contains 50,000 movie reviews labeled as <code>positive</code> or <code>negative</code>. The dataset is split into 25,000 reviews for training and 25,000 reviews for testing.</p><p>After downloading the dataset, unzip the file and put it in a directory named <code>dataset</code>. The directory structure should look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataset</span><br><span class="line">├── test</span><br><span class="line">│   ├── neg</span><br><span class="line">│   └── pos</span><br><span class="line">└── train</span><br><span class="line">    ├── neg</span><br><span class="line">    └── pos</span><br></pre></td></tr></table></figure><h2 id="Loading-the-Raw-Data"><a href="#Loading-the-Raw-Data" class="headerlink" title="Loading the Raw Data"></a>Loading the Raw Data</h2><p>We will load the raw data using <code>tensorflow</code> and <code>keras</code> libraries. The <code>text_dataset_from_directory</code> function is used to load the dataset. The function takes the directory path, batch size, validation split, subset, and seed as input parameters. </p><p>The <code>validation_split</code> parameter is used to split the dataset into training and validation sets. For example, if the <code>validation_split</code> is set to 0.2, 20% of the data will be used for validation.</p><p>The <code>subset</code> parameter is used to specify which subset of the data to load. <code>training</code> value is used to load only the training data. <code>validation</code> value is used to load only the validation data. The <code>seed</code> parameter is used to ensure reproducibility.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_raw_train_dataset</span>():</span><br><span class="line">    <span class="keyword">return</span> tf.keras.utils.text_dataset_from_directory(</span><br><span class="line">        config.ds_train_dir,</span><br><span class="line">        batch_size=config.ds_batch_size, <span class="comment"># batch size</span></span><br><span class="line">        validation_split=config.validate_split, <span class="comment"># 10% of data will be used for validation</span></span><br><span class="line">        subset=<span class="string">&#x27;training&#x27;</span>, <span class="comment"># only training data will be used</span></span><br><span class="line">        seed=config.ds_batch_seed) <span class="comment"># to ensure reproducibility</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_raw_validation_dataset</span>():</span><br><span class="line">    <span class="keyword">return</span> tf.keras.utils.text_dataset_from_directory(</span><br><span class="line">        config.ds_train_dir,</span><br><span class="line">        batch_size=config.ds_batch_size,</span><br><span class="line">        validation_split=config.validate_split,</span><br><span class="line">        subset=<span class="string">&#x27;validation&#x27;</span>,</span><br><span class="line">        seed=config.ds_batch_seed)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_raw_test_dataset</span>():</span><br><span class="line">    <span class="keyword">return</span> tf.keras.utils.text_dataset_from_directory(</span><br><span class="line">        config.ds_test_dir,</span><br><span class="line">        batch_size=config.ds_batch_size)</span><br></pre></td></tr></table></figure><p>In above code, there are three functions defined to load the raw data. The <code>load_raw_train_dataset</code> function is used to load the training data, the <code>load_raw_validation_dataset</code> function is used to load the validation data, and the <code>load_raw_test_dataset</code> function is used to load the test data.</p><p>For the <code>config.py</code> file, we will define the following parameters for above raw data loading functions.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataset directory for training</span></span><br><span class="line">ds_train_dir = <span class="string">&quot;dataset/train&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dataset directory for testing</span></span><br><span class="line">ds_test_dir = <span class="string">&quot;dataset/test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># batch size for training and testing</span></span><br><span class="line">ds_batch_size = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random seed for shuffling the data</span></span><br><span class="line">ds_batch_seed = <span class="number">36</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 10% of data will be used for validation</span></span><br><span class="line">validate_split = <span class="number">0.1</span></span><br></pre></td></tr></table></figure><p>In above code, we are loading the raw data from the <code>dataset/train</code> and <code>dataset/test</code> directories. The <code>batch_size</code> parameter is set to 32, which means that the data will be loaded in batches of 32. The <code>validation_split</code> parameter is set to 0.1, which means that 10% of the data will be used for validation. The <code>subset</code> parameter is set to <code>training</code> to load only the training data, <code>validation</code> to load only the validation data. The <code>seed</code> parameter is set to 36 to ensure reproducibility.</p><p>So for now, we have loaded the raw data, in the next blog, we will talk about text vectorization which is the process of converting text into numerical form that can be used for training and testing the model.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> NLP </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Pile - A Comprehensive Dataset for Training NLP Models</title>
      <link href="/2023/02/01/the-pile-a-comprehensive-dataset-for-training-nlp-models/"/>
      <url>/2023/02/01/the-pile-a-comprehensive-dataset-for-training-nlp-models/</url>
      
        <content type="html"><![CDATA[<p>In the rapidly evolving field of natural language processing (NLP), the quality and diversity of training data are crucial for developing robust and capable models. One of the most significant contributions to this area is <code>The Pile</code>, an open-source, large-scale dataset curated by EleutherAI. This blog post will delve into what The Pile is, its components, and how you can use it to train your own NLP models.</p><h2 id="What-is-The-Pile"><a href="#What-is-The-Pile" class="headerlink" title="What is The Pile?"></a>What is The Pile?</h2><p>The Pile is a massive dataset designed specifically for training NLP models. It comprises approximately <code>825 gigabytes</code> of text data collected from a wide array of sources to ensure diversity and richness in language representation. Created by EleutherAI, The Pile aims to provide researchers and developers with a <code>high-quality</code>, <code>comprehensive</code> dataset that can support the development of state-of-the-art NLP models.</p><h2 id="Components-of-The-Pile"><a href="#Components-of-The-Pile" class="headerlink" title="Components of The Pile"></a>Components of The Pile</h2><p>The Pile is composed of a variety of sub-datasets, each contributing unique content to the overall collection. Here are some of the key components:</p><ul><li><code>Wikipedia</code>: A snapshot of English Wikipedia, providing a wealth of general knowledge across numerous domains. It contains approximately 1.5 billion words in plain text format.</li><li><code>Books3</code>: A collection of books from various genres and disciplines, offering rich and diverse narrative styles. It contains approximately 196,640 books in plain text format.</li><li><code>PubMed Central</code>: Biomedical literature providing specialized scientific text. PubMed Central® (PMC) is a free full-text archive of biomedical and life sciences journal literature at the U.S. National Institutes of Health’s National Library of Medicine (NIH&#x2F;NLM)</li><li><code>StackExchange</code>: Q&amp;A data from StackExchange sites, capturing technical discussions and community knowledge. StackExchange is a question-and-answer website for programmers, data scientists, and other professionals.</li><li><code>GitHub</code>: Code repositories from GitHub, including source code and associated documentation. GitHub is a popular platform for hosting software development projects.</li><li><code>ArXiv</code>: Scientific papers from the ArXiv preprint server, covering a broad range of academic research. ArXiv is a free distribution service and an open-access archive for nearly 2.4 million scholarly articles in the fields of physics, mathematics, computer science, quantitative biology, quantitative finance, statistics, electrical engineering and systems science, and economics</li></ul><p>The Pile not only contains above datasets, it also includes like <code>YoutubeSubtitles</code>, <code>Freelaw</code> and <code>HackerNews</code> etc. These components ensure that The Pile covers a broad spectrum of human knowledge and language use, making it an invaluable resource for training versatile NLP models.</p><p>You can access the full list of components and their sizes on the official EleutherAI github repo here: <a href="https://github.com/EleutherAI/the-pile?tab=readme-ov-file">https://github.com/EleutherAI/the-pile?tab=readme-ov-file</a></p><h2 id="Why-Use-The-Pile"><a href="#Why-Use-The-Pile" class="headerlink" title="Why Use The Pile?"></a>Why Use The Pile?</h2><ul><li><code>Diversity</code>: With text from multiple domains and styles, The Pile helps create models that generalize well across different contexts.</li><li><code>Size</code>: At 825 gigabytes, The Pile provides a substantial amount of data, which is vital for training large-scale NLP models.</li><li><code>Quality</code>: Curated with care, The Pile filters out low-quality content, ensuring that the data used for training is valuable and relevant.</li><li><code>Open Source</code>: The Pile is freely available, supporting open research and development in the NLP community.</li></ul><h2 id="How-to-Use-The-Pile"><a href="#How-to-Use-The-Pile" class="headerlink" title="How to Use The Pile"></a>How to Use The Pile</h2><p>Using The Pile for training NLP models involves several steps, from acquiring the dataset to preprocessing it for model training. Here’s a step-by-step guide:</p><h3 id="Acquire-the-Dataset"><a href="#Acquire-the-Dataset" class="headerlink" title="Acquire the Dataset"></a>Acquire the Dataset</h3><p>You can download The Pile from the official EleutherAI repository. Ensure you have sufficient storage and bandwidth to handle the dataset’s size.</p><h3 id="Set-Up-Your-Environment"><a href="#Set-Up-Your-Environment" class="headerlink" title="Set Up Your Environment"></a>Set Up Your Environment</h3><p>Ensure you have a robust computing environment set up, ideally with access to powerful GPUs if you’re training large models. Popular frameworks like PyTorch or TensorFlow are suitable for this task.</p><h3 id="Preprocess-the-Data"><a href="#Preprocess-the-Data" class="headerlink" title="Preprocess the Data"></a>Preprocess the Data</h3><p>Depending on your specific use case, you might need to preprocess the data. This could involve tokenization, normalization, or formatting the text to match the input requirements of your chosen model. Libraries like Hugging Face’s Tokenizers can be very helpful here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> GPT2Tokenizer</span><br><span class="line"></span><br><span class="line">tokenizer = GPT2Tokenizer.from_pretrained(<span class="string">&#x27;gpt2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> tokenizer.encode(text, return_tensors=<span class="string">&#x27;pt&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Load-the-Data"><a href="#Load-the-Data" class="headerlink" title="Load the Data"></a>Load the Data</h3><p>Use data loading utilities to efficiently feed the data into your training pipeline. If you’re using <code>PyTorch</code>, <code>DataLoader</code> can help manage batching and shuffling.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, texts</span>):</span><br><span class="line">        self.texts = texts</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.texts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="keyword">return</span> preprocess(self.texts[idx])</span><br><span class="line"></span><br><span class="line">texts = [...]  <span class="comment"># Load your text data here</span></span><br><span class="line">dataset = TextDataset(texts)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">8</span>, shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Train-Your-Model"><a href="#Train-Your-Model" class="headerlink" title="Train Your Model"></a>Train Your Model</h3><p>Set up your NLP model and start the training process. Ensure you monitor the training metrics to adjust hyperparameters as needed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> GPT2LMHeadModel, Trainer, TrainingArguments</span><br><span class="line"></span><br><span class="line">model = GPT2LMHeadModel.from_pretrained(<span class="string">&#x27;gpt2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">training_args = TrainingArguments(</span><br><span class="line">    output_dir=<span class="string">&#x27;./results&#x27;</span>,</span><br><span class="line">    num_train_epochs=<span class="number">1</span>,</span><br><span class="line">    per_device_train_batch_size=<span class="number">4</span>,</span><br><span class="line">    save_steps=<span class="number">10_000</span>,</span><br><span class="line">    save_total_limit=<span class="number">2</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trainer = Trainer(</span><br><span class="line">    model=model,</span><br><span class="line">    args=training_args,</span><br><span class="line">    train_dataset=dataset,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">trainer.train()</span><br></pre></td></tr></table></figure><h3 id="Evaluate-and-Fine-tune"><a href="#Evaluate-and-Fine-tune" class="headerlink" title="Evaluate and Fine-tune"></a>Evaluate and Fine-tune</h3><p>After initial training, evaluate your model on validation data and fine-tune as necessary. This could involve additional training on specific subsets of The Pile or other datasets to enhance performance on particular tasks.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The Pile represents a monumental step forward in the availability of high-quality, diverse datasets for NLP research. By leveraging The Pile, you can train more robust and generalizable language models, pushing the boundaries of what NLP systems can achieve. Whether you’re an academic researcher or an industry practitioner, The Pile offers a valuable resource to support your work in developing cutting-edge NLP technologies.</p><h2 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h2><ul><li><a href="https://pile.eleuther.ai/">https://pile.eleuther.ai/</a></li><li><a href="https://github.com/EleutherAI/the-pile?tab=readme-ov-file">https://github.com/EleutherAI/the-pile?tab=readme-ov-file</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Large Movie Review Dataset for Binary Sementic Analysis</title>
      <link href="/2023/01/11/a-large-movie-review-dataset-for-binary-sementic-analysis/"/>
      <url>/2023/01/11/a-large-movie-review-dataset-for-binary-sementic-analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In this article, we will discuss about a large movie review dataset for <code>binary semantic analysis</code>. It is extracted from IMDb(<a href="https://www.imdb.com/">https://www.imdb.com/</a>) movie sites and handled by <code>Stanford</code> university. The dataset contains 50,000 movie reviews labeled as positive or negative. It is divided into training and testing sets with 25,000 and 25,000 movie reviews respectively. It is labeled as positive or negative based on the sentiment of the review. It also include an additional 50,000 unlabeled documents for unsupervised learning. </p><h2 id="Dataset-Information"><a href="#Dataset-Information" class="headerlink" title="Dataset Information"></a>Dataset Information</h2><h4 id="Positive-Reviews"><a href="#Positive-Reviews" class="headerlink" title="Positive Reviews"></a>Positive Reviews</h4><p>The positive reviews contains 25000 movie reviews labeled as positive. A positive review has a score &gt;&#x3D; 7 out of 10. The positive reviews are mostly positive and entertaining. The reviews are mostly written in the positive tone. In the <code>aclImdb\train\pos</code> directory, the suffix number of files all <code>&gt;= 7</code>. Example file name like <code>10_8.txt</code> which means star rating <code>8/10</code> from IMDb.</p><h4 id="Negative-Reviews"><a href="#Negative-Reviews" class="headerlink" title="Negative Reviews"></a>Negative Reviews</h4><p>The negative reviews contains 25000 movie reviews labeled as negative. A negative review has a score <code>&lt;= 4</code> out of 10. The negative reviews are mostly negative and sad. The reviews are mostly written in the negative tone. In the <code>aclImdb\train\neg</code> directory, the suffix number of files all <code>&lt;= 4</code>. Example file name like <code>10_3.txt</code> which means star rating <code>3/10</code> from IMDb.</p><p>The reviews with more neutral ratings are not included in the train&#x2F;test sets.</p><h4 id="Unlabeled-Reviews"><a href="#Unlabeled-Reviews" class="headerlink" title="Unlabeled Reviews"></a>Unlabeled Reviews</h4><p>The unlabeled reviews contains 50000 movie reviews that are not labeled as positive or negative. These reviews are used for unsupervised learning. In the <code>aclImdb\train\unsup</code> directory, these reviews are not labeled as positive or negative, the suffix number of files all are <code>0</code> which means the score. Example file name like <code>10_0.txt</code>.</p><h4 id="Test-dataset-reviews"><a href="#Test-dataset-reviews" class="headerlink" title="Test dataset reviews"></a>Test dataset reviews</h4><p>The test reviews contains 25000 movie reviews. These reviews are used for evaluating the performance of the model. In the <code>aclImdb\test</code> directory, it contains <code>pos</code> and <code>neg</code> directories with the same structure as the <code>train</code> directory.</p><h4 id="Tokenized-BoW"><a href="#Tokenized-BoW" class="headerlink" title="Tokenized BoW"></a>Tokenized BoW</h4><p>In addition to the review text files, there is a already-tokenized bag of words (BoW) features that were used in <code>Standford</code> experiments. These are stored in .feat files in the train&#x2F;test directories. Each .feat file is in LIBSVM format, an ascii sparse-vector format for labeled data. The feature indices in these files start from 0, and the text tokens corresponding to a feature index is found in [imdb.vocab]. So a line with 0:7 in a .feat file means the first word in <a href="the">imdb.vocab</a> appears 7 times in that review.</p><h2 id="Download-the-Dataset"><a href="#Download-the-Dataset" class="headerlink" title="Download the Dataset"></a>Download the Dataset</h2><p>The complete dataset can be downloaded from the following link: <a href="https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz">https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz</a>. Once you download and unzip it, you can see the major dataset structure as shown below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">aclImdb</span><br><span class="line">├── README</span><br><span class="line">├── imdb.vocab </span><br><span class="line">├── test</span><br><span class="line">│   ├── neg</span><br><span class="line">│   │   ├── 2_1.txt</span><br><span class="line">│   └── pos</span><br><span class="line">│   │   ├── 3_8.txt</span><br><span class="line">├── train</span><br><span class="line">│   ├── neg</span><br><span class="line">│   │   ├── 12_1.txt</span><br><span class="line">│   ├── pos</span><br><span class="line">│   │   ├── 4_8.txt</span><br><span class="line">│   └── unsup</span><br><span class="line">│   │   ├── 10_0.txt</span><br></pre></td></tr></table></figure><p>In the <code>.txt</code> file, the text content is review of the movie.</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> Dataset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding Tensorflow for Machine Learning</title>
      <link href="/2023/01/02/understanding-tensorflow-for-machine-learning/"/>
      <url>/2023/01/02/understanding-tensorflow-for-machine-learning/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction-to-TensorFlow"><a href="#Introduction-to-TensorFlow" class="headerlink" title="Introduction to TensorFlow"></a>Introduction to TensorFlow</h2><p><code>TensorFlow</code> is an open-source machine learning framework developed by <code>Google</code>. It is designed to facilitate the creation and deployment of <code>machine learning</code> models, from simple linear regression to complex deep neural networks. TensorFlow provides a comprehensive ecosystem of tools, libraries, and community resources that allow researchers and developers to build and train ML models efficiently.</p><h2 id="Core-Concepts"><a href="#Core-Concepts" class="headerlink" title="Core Concepts"></a>Core Concepts</h2><h3 id="Tensors"><a href="#Tensors" class="headerlink" title="Tensors"></a>Tensors</h3><p>At the heart of TensorFlow is the concept of a <code>tensor(张量)</code>. A tensor is a generalization of vectors and matrices to potentially higher dimensions. In TensorFlow, tensors are multi-dimensional arrays with a uniform type (<code>dtype</code>). Tensors are the primary data structure used in TensorFlow operations.</p><h3 id="Graphs-and-Sessions"><a href="#Graphs-and-Sessions" class="headerlink" title="Graphs and Sessions"></a>Graphs and Sessions</h3><p>TensorFlow uses a <code>dataflow graph(数据流图)</code> to represent the computations required for a machine learning model. The <code>graph</code> consists of nodes <code>(operations)(操作)</code> and edges <code>(tensors)(张量)</code>. Each node in the graph represents an operation, and the edges represent the tensors that flow between these operations.</p><p>To execute the graph, TensorFlow uses sessions. A <code>session</code> encapsulates the environment in which the operations in the graph are executed to produce tensors.</p><h3 id="Variables-and-Placeholders"><a href="#Variables-and-Placeholders" class="headerlink" title="Variables and Placeholders"></a>Variables and Placeholders</h3><ul><li><strong>Variables</strong>: These are used to hold and update parameters during the training process. Variables are in-memory buffers containing tensors.</li><li><strong>Placeholders</strong>: These are used to feed data into the graph. They allow you to pass data into the graph at runtime without initializing them with a value.</li></ul><h2 id="Building-a-Model"><a href="#Building-a-Model" class="headerlink" title="Building a Model"></a>Building a Model</h2><h3 id="Defining-the-Graph"><a href="#Defining-the-Graph" class="headerlink" title="Defining the Graph"></a>Defining the Graph</h3><p>To build a model, you first define the <code>computational graph(计算图)</code>. This involves creating the necessary operations and connecting them with tensors. For example, to create a simple linear regression model, you might define the following operations:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Placeholders for input and output data</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, n_features], name=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y = tf.placeholder(tf.float32, shape=[<span class="literal">None</span>, <span class="number">1</span>], name=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Variables for weights and bias</span></span><br><span class="line">w = tf.Variable(tf.zeros([n_features, <span class="number">1</span>]), name=<span class="string">&#x27;weights&#x27;</span>)</span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">1</span>]), name=<span class="string">&#x27;bias&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model: y = Wx + b</span></span><br><span class="line">y_pred = tf.matmul(x, w) + b</span><br></pre></td></tr></table></figure><h3 id="Loss-Function-and-Optimizer"><a href="#Loss-Function-and-Optimizer" class="headerlink" title="Loss Function and Optimizer"></a>Loss Function and Optimizer</h3><p>Next, you need to define a <code>loss function(损失函数)</code> to measure how well the model’s predictions match the actual data. Common loss functions include <code>mean squared error(均方误差) for regression problems(回归问题)</code> and <code>cross-entropy(交叉熵) for classification problems(分类问题)</code>.</p><p>You also need to choose an <code>optimizer</code> to minimize the loss function. TensorFlow provides several optimizers, such as <code>GradientDescentOptimizer(梯度下降优化器)</code>, <code>AdamOptimizer(自适应矩阵估计优化器)</code>, <code>AdagradOptimizer</code>, and <code>RMSPropOptimizer</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mean squared error loss function</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(y_pred - y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gradient descent optimizer</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)</span><br></pre></td></tr></table></figure><h2 id="Training-the-Model"><a href="#Training-the-Model" class="headerlink" title="Training the Model"></a>Training the Model</h2><p>To train the model, you need to run the session and feed the data into the placeholders. The optimizer will adjust the variables to minimize the loss.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># Initialize variables</span></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Training loop</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        _, loss_value = sess.run([optimizer, loss], feed_dict=&#123;x: train_x, y: train_y&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Epoch <span class="subst">&#123;epoch&#125;</span>, Loss: <span class="subst">&#123;loss_value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>Once the model is trained, you can deploy it for inference. TensorFlow provides several tools for model deployment, including <code>TensorFlow Serving</code>, <code>TensorFlow Lite for mobile and embedded devices</code>, and <code>TensorFlow.js for web applications</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>TensorFlow is a powerful and flexible framework for building and deploying machine learning models. By understanding its core concepts and tools, you can efficiently develop and train models for a wide range of applications.</p><p>For more details, please refer to the official TensorFlow documentation: <a href="https://www.tensorflow.org/">https://www.tensorflow.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Keras </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Auto Scaling Group - 实现弹性自动扩展的技术指南</title>
      <link href="/2022/11/15/aws-auto-scaling-group/"/>
      <url>/2022/11/15/aws-auto-scaling-group/</url>
      
        <content type="html"><![CDATA[<p>在Cloud领域，弹性自动扩展是确保应用程序高可用性和性能的关键组成部分。<code>AWS Auto Scaling Group（ASG）</code>是Amazon Web Services（AWS）提供的一项强大服务，可帮助您自动扩展和管理应用程序的资源，以适应不断变化的工作负载需求。本文将深入探讨AWS Auto Scaling Group的技术细节，包括其核心概念、配置选项、最佳实践和实际应用场景。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-asg-capacity.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-asg-capacity.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Auto Scaling Group" style="width:600px;"/></div><span class="image-caption">AWS Auto Scaling Group</span></div><h3 id="理解-AWS-Auto-Scaling-Group（ASG）"><a href="#理解-AWS-Auto-Scaling-Group（ASG）" class="headerlink" title="理解 AWS Auto Scaling Group（ASG）"></a>理解 AWS Auto Scaling Group（ASG）</h3><ul><li><strong>什么是Auto Scaling Group？</strong></li></ul><p>AWS Auto Scaling Group（ASG）是一项AWS服务，允许您自动增加或减少应用程序实例的数量，以满足流量波动。ASG基于一组规则来动态调整实例的数量，确保应用程序具有所需的容量，并提供高可用性。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-asg-elb.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-asg-elb.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Auto Scaling Group in AWS with Load Balancer" style="width:600px;"/></div><span class="image-caption">Auto Scaling Group in AWS with Load Balancer</span></div><ul><li><strong>ASG的工作原理</strong></li></ul><p>ASG通过监控配置的指标，例如CPU利用率或请求率，来确定是否需要调整实例数量。它可以自动启动新实例以应对高负载，或者停止不再需要的实例以节省成本。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-asg-cloudwatch.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-asg-cloudwatch.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Auto Scaling in AWS with Cloud Watch Alarm" style="width:600px;"/></div><span class="image-caption">Auto Scaling in AWS with Cloud Watch Alarm</span></div><ul><li><strong>ASG的优势</strong></li></ul><p>ASG的优势包括自动化扩展、高可用性、成本效益以及应对不断变化的需求。它可以确保应用程序始终具备所需的性能，并且无需手动干预。</p><h3 id="Auto-Scaling-Group的关键组件"><a href="#Auto-Scaling-Group的关键组件" class="headerlink" title="Auto Scaling Group的关键组件"></a>Auto Scaling Group的关键组件</h3><ul><li><strong>启动配置（Launch Configuration）</strong></li></ul><p>启动配置定义了ASG启动新实例时使用的AMI、实例类型、安全组等参数。它充当了创建实例的蓝图。</p><ul><li><strong>自动扩展策略（Auto Scaling Policies）</strong></li></ul><p>自动扩展策略是ASG的核心。它们定义了何时以及如何扩展或缩减实例数量，基于监控指标和阈值的触发条件。</p><ul><li><strong>健康检查（Health Checks）</strong></li></ul><p>健康检查用于监控实例的健康状态。ASG可以自动替换失败或不健康的实例，确保应用程序的稳定性。</p><h3 id="Auto-Scaling-Group的配置选项"><a href="#Auto-Scaling-Group的配置选项" class="headerlink" title="Auto Scaling Group的配置选项"></a>Auto Scaling Group的配置选项</h3><ul><li><strong>期望容量与最小&#x2F;最大大小</strong></li></ul><p>期望容量是您希望ASG维护的实例数量，而最小和最大大小则定义了ASG可以自动扩展或缩减的范围。</p><ul><li><strong>使用负载均衡器</strong></li></ul><p>如果您使用负载均衡器（如AWS ELB），ASG可以与之集成，确保新实例被平衡地分配到负载均衡器后端。</p><ul><li><strong>实例类型与AMI选择</strong></li></ul><p>选择适当的实例类型和AMI对性能和成本至关重要。ASG允许您在启动配置中定义这些选项，以便根据需求选择。</p><ul><li><strong>自动扩展策略：手动、定时和动态</strong></li></ul><p>ASG支持多种自动扩展策略。您可以手动设置扩展策略，定时触发扩展，或根据动态触发条件自动调整容量。</p><h3 id="高级ASG功能"><a href="#高级ASG功能" class="headerlink" title="高级ASG功能"></a>高级ASG功能</h3><ul><li><strong>生命周期挂钩（Lifecycle Hooks）</strong></li></ul><p>生命周期挂钩允许您执行自定义操作，例如在实例启动或终止时发送通知或运行脚本。</p><ul><li><strong>实例终止策略（Instance Termination Policies）</strong></li></ul><p>终止策略定义了ASG在需要缩减容量时应如何选择要终止的实例。您可以自定义终止策略以满足特定需求。</p><ul><li><strong>预测性自动扩展（Predictive Scaling）</strong></li></ul><p>预测性自动扩展使用机器学习来预测将来的负载，并相应地调整实例数量，以减少资源浪费和成本。</p><ul><li><strong>混合实例策略（Mixed Instances Policy）</strong></li></ul><p>混合实例策略允许ASG使用多种实例类型，包括On-Demand和Spot实例，以提高成本效益。</p><ul><li><strong>在ASG中使用Spot实例</strong></li></ul><p>Spot实例是成本较低但可中断的实例类型。ASG可以使用Spot实例来降低成本，同时仍保持可用性。</p><h3 id="配置AWS-Auto-Scaling-Group"><a href="#配置AWS-Auto-Scaling-Group" class="headerlink" title="配置AWS Auto Scaling Group"></a>配置AWS Auto Scaling Group</h3><ul><li><strong>创建 Auto Scaling Group</strong></li></ul><p>在AWS控制台中创建Auto Scaling Group（ASG）是一项简单但重要的任务。首先，登录到AWS管理控制台，然后遵循以下步骤：</p><ol><li>导航到Auto Scaling控制台。</li><li>单击“创建Auto Scaling组”。</li><li>指定ASG的名称和描述。</li><li>选择要使用的启动配置。启动配置定义了新实例的配置，包括AMI、实例类型、安全组等。</li><li>设置期望容量。这是您希望ASG维护的实例数量。</li><li>选择最小和最大大小。最小大小是ASG可以缩减到的最小实例数，最大大小是ASG可以扩展到的最大实例数。</li><li>选择要使用的VPC。</li><li>配置负载均衡（如果需要）。您可以选择将ASG与负载均衡器相关联，以分配流量。</li><li>配置健康检查以确保实例的健康状态。</li><li>设置通知，以便在ASG执行自动扩展时接收通知。</li><li>审查和创建ASG。</li></ol><ul><li><strong>定义启动配置</strong></li></ul><p>启动配置是ASG创建新实例时使用的模板。您可以在创建ASG时选择现有的启动配置或创建新的。启动配置包括以下关键选项：</p><ol><li>AMI（Amazon Machine Image）：选择适合您应用程序的AMI。这是新实例的操作系统和应用程序基础。</li><li>实例类型：选择实例的规格，以满足性能和资源需求。</li><li>安全组：定义实例的网络访问策略，确保适当的安全性。</li><li>存储卷：定义实例的根卷和附加卷。</li><li>用户数据：可选项，允许您提供启动脚本或其他自定义配置。</li></ol><ul><li><strong>配置自动扩展策略</strong></li></ul><p>自动扩展策略定义了ASG何时以及如何调整实例数量。在ASG中，您可以配置以下类型的策略：</p><ol><li>目标跟踪策略：设置CPU利用率、网络流量等指标的目标值。ASG将自动增加或减少实例以维持目标。</li><li>简单缩放策略：基于CloudWatch指标（如CPU利用率）的阈值进行自动缩放。</li><li>定时扩展策略：按计划定期增加或减少实例数量。适用于按时间表的工作负载。</li></ol><ul><li><strong>关联负载均衡器</strong></li></ul><p>如果您的应用程序需要负载均衡，您可以将ASG与AWS Elastic Load Balancer（ELB）相关联。这样，ASG将自动将新实例注册到负载均衡器，确保流量平衡。</p><ul><li><strong>设置健康检查</strong></li></ul><p>健康检查是确保实例健康的关键。您可以定义HTTP、TCP或自定义健康检查来监控实例。如果实例标记为不健康，ASG将自动替换它们。</p><h3 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h3><p>AWS Auto Scaling Group（ASG）在各种应用场景中都具有广泛的用途，以下是一些常见的应用场景：</p><ul><li><strong>Web应用程序</strong></li></ul><p>Web应用程序通常会面临不断变化的流量。ASG可帮助您根据实际请求量自动扩展或缩减实例数量，以确保用户始终获得稳定的性能。在这种情况下，您可以根据请求率、CPU利用率或其他性能指标来配置自动扩展策略。</p><ul><li><strong>微服务架构</strong></li></ul><p>微服务架构将应用程序拆分成多个微小的服务，每个服务都可以独立扩展。ASG为每个微服务提供弹性，使您能够根据每个服务的负载需求来动态调整实例数量。这有助于确保整体系统的高可用性和性能。</p><ul><li><strong>批处理处理</strong></li></ul><p>对于需要处理大量数据或批量作业的场景，ASG可以帮助您实现自动化的扩展和缩减。您可以根据作业队列的长度、处理速度等指标来配置自动扩展策略，以确保作业能够及时完成。</p><ul><li><strong>数据分析</strong></li></ul><p>数据分析工作负载通常需要大量计算资源，但其负载可能在不同时间段内变化。ASG允许您根据数据分析工作负载的需求来动态调整实例数量。这意味着您可以在数据处理高峰期扩展实例数量，并在需求下降时自动缩减容量，以优化成本。</p><ul><li><strong>电子商务平台</strong></li></ul><p>电子商务平台在特定时间段内可能会面临季节性高峰，如假日购物季。使用ASG，您可以根据销售活动的预期来调整实例数量，以应对潜在的流量增加。这有助于确保用户在高峰期间获得无缝的购物体验。</p><ul><li><strong>游戏服务器</strong></li></ul><p>在线游戏通常会有大量玩家同时在线，因此需要具备高度可扩展性。ASG可以根据游戏服务器的负载情况来自动扩展或缩减实例数量，以满足玩家需求。这有助于确保游戏的稳定性和响应速度。</p><ul><li><strong>科学计算</strong></li></ul><p>科学计算工作负载需要大量计算资源来执行复杂的计算任务，例如模拟、数据分析和渲染。ASG可以帮助科学研究团队在需要时获得额外的计算能力，以加速研究进程。</p><p>这些是一些常见的实际应用场景，ASG的灵活性和自动化特性使其成为各种工作负载的理想选择。根据您的特定需求，您可以调整自动扩展策略和配置，以满足不同应用程序的要求。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>AWS Auto Scaling Group（ASG）是Cloud中实现弹性自动扩展的重要工具，它使您能够根据需求自动调整资源，同时优化资源使用和成本。通过深入了解ASG的核心概念、配置选项、最佳实践以及实际应用场景，您将能够构建可扩展和具有适应性的云基础架构，以应对不断变化的应用程序和服务需求。</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Load Balancer: CLB, ALB, NLB and GWLB</title>
      <link href="/2022/10/21/elastic-load-balancer-clb-alb-nlb-and-gwlb/"/>
      <url>/2022/10/21/elastic-load-balancer-clb-alb-nlb-and-gwlb/</url>
      
        <content type="html"><![CDATA[<h2 id="Classic-Load-Balancers-v1"><a href="#Classic-Load-Balancers-v1" class="headerlink" title="Classic Load Balancers (v1)"></a>Classic Load Balancers (v1)</h2><p><strong>Supports TCP (Layer 4), HTTP &amp; HTTPS (Layer 7)</strong></p><p><strong>Health checks are TCP or HTTP based</strong></p><p><strong>Fixed hostname XXX.region.elb.amazonaws.com</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-clb.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-clb.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Classic Load Balancer" style="width:600px;"/></div><span class="image-caption">AWS Classic Load Balancer</span></div><h2 id="Application-Load-Balancer-v2"><a href="#Application-Load-Balancer-v2" class="headerlink" title="Application Load Balancer (v2)"></a>Application Load Balancer (v2)</h2><p><strong>Application  load balancers is Layer 7 (HTTP)</strong></p><p><strong>Load balancing to multiple HTTP applications across machines (target groups)</strong></p><p><strong>Load balancing to multiple applications on the same machine (ex: containers)</strong></p><p><strong>Support for HTTP&#x2F;2 and WebSocket</strong></p><p><strong>Supports redirects (from HTTP to HTTPS for example)</strong></p><p><strong>Routing tables to different target groups:</strong></p><ol><li>Routing base on path in URL (example.com&#x2F;<strong>users</strong> &amp; example.com&#x2F;<strong>posts</strong>)</li><li>Routing base on hostname in URL (<strong>one</strong>.example.com &amp; <strong>other</strong>.example.com)</li><li>Routing base on Query String, Headers (example.com&#x2F;users?<strong>id&#x3D;123&amp;order&#x3D;false</strong>)</li></ol><span class='pbg danger'>ALB are a great fit for micro services & container-based application (example: Docker & Amazon ECS)</span><p>Has a port mapping feature to redirect to a dynamic port in ECS<br>In comparison, we’d need multiple Classic Load Balancer per application</p><h3 id="ALB-v2-HTTP-Based-Traffic"><a href="#ALB-v2-HTTP-Based-Traffic" class="headerlink" title="ALB (v2) HTTP Based Traffic"></a>ALB (v2) HTTP Based Traffic</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-alb-traffic.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-alb-traffic.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Application Load Balancer Traffic" style="width:600px;"/></div><span class="image-caption">AWS Application Load Balancer Traffic</span></div><h3 id="ALB-v2-Target-Groups"><a href="#ALB-v2-Target-Groups" class="headerlink" title="ALB (v2) Target Groups"></a>ALB (v2) Target Groups</h3><p><strong>EC2 instances (can be managed by an Auto Scaling Group) - HTTP</strong></p><p><strong>ECS tasks (managed by ECS itself) - HTTP</strong></p><p><strong>Lambda functions - HTTP request is translated into a JSON event</strong></p><p><strong>IP Addresses - must be private IPs</strong></p><p><strong>ALB can route to multiple target groups</strong></p><p><strong>Health checks are at the target group level</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-alb-targetgroup.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-alb-targetgroup.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS ALB Query Strings/Parameters Routing" style="width:600px;"/></div><span class="image-caption">AWS ALB Query Strings/Parameters Routing</span></div><h2 id="Network-Load-Balancer-v2"><a href="#Network-Load-Balancer-v2" class="headerlink" title="Network Load Balancer (v2)"></a>Network Load Balancer (v2)</h2><p><strong>Network load balancers (Layer 4) allow to:</strong></p><ol><li>Forward TCP &amp; UDP traffic to your instances</li><li>Handle millions of request per seconds</li><li>Less latency ~ 100ms (vs 400 ms for ALB)</li></ol><p><strong>NLB has one static IP per AZ, and supports assigning Elastic IP(helpful for whitelisting specific IP)</strong></p><p><strong>NLB are used for extreme performance, TCP or UDP traffic</strong></p><p><strong>Not included in the AWS free tier</strong></p><h3 id="Network-Load-Balancer-v2-TCP-Layer-4-Based-Traffic"><a href="#Network-Load-Balancer-v2-TCP-Layer-4-Based-Traffic" class="headerlink" title="Network Load Balancer (v2) TCP (Layer 4) Based Traffic"></a>Network Load Balancer (v2) TCP (Layer 4) Based Traffic</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-nlb-traffic.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-nlb-traffic.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS NLB TCP Based Traffic" style="width:600px;"/></div><span class="image-caption">AWS NLB TCP Based Traffic</span></div><h3 id="Network-Load-Balancer-Target-Groups"><a href="#Network-Load-Balancer-Target-Groups" class="headerlink" title="Network Load Balancer - Target Groups"></a>Network Load Balancer - Target Groups</h3><p><strong>EC2 instances</strong></p><p><strong>IP Addresses - must be private IPs</strong></p><p><strong>Application Load Balancer</strong></p><p><strong>Health Checks support the TCP, HTTP and HTTPS protocols</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-nlb-targetgroup.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-nlb-targetgroup.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Network Load Balancer Target Group" style="width:600px;"/></div><span class="image-caption">AWS Network Load Balancer Target Group</span></div><h2 id="Gateway-Load-Balancer"><a href="#Gateway-Load-Balancer" class="headerlink" title="Gateway Load Balancer"></a>Gateway Load Balancer</h2><p><strong>Deploy, scale, and manage a fleet of 3rd party network virtual applications in AWS Example: Firewalls, Intrusion Detection and Prevention Systems, Deep Packet Inspect Inspection Systems, payload manipulation, …</strong></p><p><strong>Operates at Layer 3 (Network Layer) - IP Packages</strong></p><p><strong>Combines the following fuctions:</strong></p><ol><li>Transparent Network Gateway - single entry&#x2F;exit for all traffic</li><li>Load Balancer - distributes traffic to your virtual applications</li><li>Uses the GENEVE protocol on port 6081</li></ol><h3 id="Gateway-Load-Balancer-Network-Layer-Layer-3-Based-Traffic"><a href="#Gateway-Load-Balancer-Network-Layer-Layer-3-Based-Traffic" class="headerlink" title="Gateway Load Balancer Network Layer (Layer 3) Based Traffic"></a>Gateway Load Balancer Network Layer (Layer 3) Based Traffic</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-gwlb.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-gwlb.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Gateway Load Balancer Traffic" style="height:500px;"/></div><span class="image-caption">AWS Gateway Load Balancer Traffic</span></div>  <h3 id="Gateway-Load-Balancer-Target-Group"><a href="#Gateway-Load-Balancer-Target-Group" class="headerlink" title="Gateway Load Balancer - Target Group"></a>Gateway Load Balancer - Target Group</h3><p><strong>EC2 instances</strong></p><p><strong>IP Addresses - must be private IPs</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-gwlb-targetgroup.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-gwlb-targetgroup.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS Gateway Load Balancer Target Group" style="width:600px;"/></div><span class="image-caption">AWS Gateway Load Balancer Target Group</span></div>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic Load Balancing (ELB) Overview</title>
      <link href="/2022/10/17/elastic-load-balancing-elb-overview/"/>
      <url>/2022/10/17/elastic-load-balancing-elb-overview/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="What is load balancing17tt62axrze">What is load balancing</h2><br/><p>Load Balances are servers that forward traffic to multiple servers (e.g., EC2 instances) downstream.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-1.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-1.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS ELB" style="width:600px;"/></div><span class="image-caption">AWS ELB</span></div><h2 class="bamboo-h " id="Why use a load balancingd11yivovrpk">Why use a load balancing</h2><br/><ul><li>Spread load across multiple downstream instances</li><li>Expose a single point of access (DNS) to your application</li><li>Seamlessly handle failures of downstream instances</li><li>Do regular health checks to your instances</li><li>Provide SSL termination (HTTPS) for your websites</li><li>Enforce stickiness with cookies</li><li>Hight availability across zones</li><li>Separate public traffic from private traffic</li></ul><h2 class="bamboo-h " id="Why use an Elastic Load Balancera8lrdcosqwc">Why use an Elastic Load Balancer</h2><br/><ul><li>An Elastic Load Balancer is a managed load balancer<ul><li>AWS guarantees that it will be working</li><li>AWS takes care of upgrades, maintenance, hight availability</li><li>AWS provides only a few configuration knobs</li></ul></li><li>It costs less to setup your own load balancer but it will be a lot more effort on your end</li><li>It is integrarted with many AWS offerings&#x2F;services<ul><li>EC2, EC2 Auto Scaling Groups, Amazon ECS</li><li>AWS Certificate Manager (ACM), CloudWatch</li><li>Route 53, AWS WAF, AWS Global Accelerator</li></ul></li></ul><h2 class="bamboo-h " id="Health Checks166hv17xphr">Health Checks</h2><br/><ul><li>Health Checks are crucial for Load Balancers</li><li>They enable the load balancer to know if instances it forwards traffic to are available to reply to requests</li><li>The health check is done on a port and a route (&#x2F;health is common)</li><li>If the response is not 200 (OK), then the instance is unhealthy</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-health.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-health.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS ELB Health Check" style="width:600px;"/></div><span class="image-caption">AWS ELB Health Check</span></div><h2 class="bamboo-h " id="Types of load balancer on AWS1b1jspwcu2p">Types of load balancer on AWS</h2><br/><ul><li>AWS has 4 kinds of managed Load Balancers</li><li>Classic Load Balancer (v1 - old generation) - 2009 - CLB<ul><li>HTTP, HTTPS, TCP, SSL (secure TCP)</li></ul></li><li>Application Load Balancer (v2 - new generation) - 2016 - ALB<ul><li>HTTP, HTTPS, WebSocker</li></ul></li><li>Network Load Balancer (v2 - new generation) - 2017 - NLB<ul><li>TCP, TLC (secure TCP), UDP</li></ul></li><li>Gateway Load Balancer - 2020 - GWLB<ul><li>Operates at layer 3 (Network layer) - IP Protocol</li></ul></li><li>Overall, it is recommended to use the new generation load balancers as they provides more features</li><li>Some load balancers can be setup as internal (private) or external (public) ELBs</li></ul><h2 class="bamboo-h " id="Load Balancer Security Groups1ddbrfjh2kg">Load Balancer Security Groups</h2><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-elb-security.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-elb-security.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS ELB Security Group" style="width:600px;"/></div><span class="image-caption">AWS ELB Security Group</span></div>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS EBS vs AWS EFS - Understanding the Key Differences</title>
      <link href="/2022/09/21/aws-ebs-vs-aws-efs/"/>
      <url>/2022/09/21/aws-ebs-vs-aws-efs/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="Introduction20zelq9rurp">Introduction</h2><br/><p>Amazon Web Services (AWS) offers a wide range of storage solutions to cater to the diverse needs of businesses and developers. Two popular options are <code>Amazon Elastic Block Store (EBS)</code> and <code>Amazon Elastic File System (EFS)</code>. While both provide storage capabilities within the AWS ecosystem, they serve different purposes and have distinct characteristics. In this blog post, we will explore the key differences between AWS EBS and AWS EFS to help you make an informed choice for your specific use case.</p><h2 class="bamboo-h " id="Amazon Elastic Block Store (EBS)1qm9po6rzm3">Amazon Elastic Block Store (EBS)</h2><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-ebs-efs-1.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ebs-efs-1.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS EBS" style="width:400px;"/></div><span class="image-caption">AWS EBS</span></div><span class='pbg warning'>Amazon Elastic Block Store (EBS) is a block-level storage service that provides durable and high-performance storage volumes that can be attached to Amazon Elastic Compute Cloud (EC2) instances.</span>.<p>Here are some of the main characteristics and use cases of AWS EBS.</p><h4 class="bamboo-h " id="Block Storagecv4d9lzjir">Block Storage</h4><br/><p>EBS provides block storage, which means it is best suited for scenarios where you need to store data at the block level, such as databases and applications that require direct access to disk devices.</p><h4 class="bamboo-h " id="Low-Latency Performance8qgnv1wiy3o">Low-Latency Performance</h4><br/><p> EBS volumes offer low-latency, high-throughput performance, making them ideal for I&#x2F;O-intensive workloads where rapid data access is crucial.</p><h4 class="bamboo-h " id="Data Persistence4ey1xbw727c">Data Persistence</h4><br/><p> EBS volumes are persistent, meaning the data stored on them remains intact even when the associated EC2 instance is stopped or terminated. This is useful for maintaining critical data.</p><h4 class="bamboo-h " id="Availability and Redundancy8drebltwd7w">Availability and Redundancy</h4><br/><p>EBS volumes can be replicated within a specific<br>Availability Zone (AZ) for redundancy, but they are not natively designed for cross-AZ or cross-region redundancy. For cross-AZ redundancy, you need to set up additional configurations.</p><h4 class="bamboo-h " id="Cost16o2x52etyr">Cost</h4><br/><p>You pay for the provisioned capacity of the EBS volume, regardless of whether it is in use or not. This can make it cost-effective for certain use cases but might require careful capacity planning.</p><h2 class="bamboo-h " id="Amazon Elastic File System (EFS)11fd74nzfy3">Amazon Elastic File System (EFS)</h2><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/aws/aws-ebs-efs-2.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ebs-efs-2.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS EFS" style="width:400px;"/></div><span class="image-caption">AWS EFS</span></div><span class='pbg warning'>Amazon Elastic File System (EFS) is a fully managed</span> <p>Here are the key attributes and use cases of AWS EFS:</p><h4 class="bamboo-h " id="File Storage1clq01o6nyf">File Storage</h4><br/><p>EFS offers file-level storage, making it suitable for scenarios where multiple instances need shared access to the same data, such as web applications, content management systems, and shared repositories.</p><h4 class="bamboo-h " id="Scalability2mihlycbqwy">Scalability</h4><br/><p>EFS is designed to scale automatically as your storage needs grow. It can handle a dynamic number of EC2 instances concurrently, making it a great choice for applications with varying workloads.</p><h4 class="bamboo-h " id="Cross-AZ and Cross-Region2noasb3nf4o">Cross-AZ and Cross-Region</h4><br/><p>EFS provides built-in redundancy and can be accessed across multiple Availability Zones and even across regions. This ensures high availability and disaster recovery capabilities.</p><h4 class="bamboo-h " id="Pay-as-You-Go1gpnu0yghg5">Pay-as-You-Go</h4><br/><p>With EFS, you pay for the storage capacity you use, making it a cost-effective option for applications with fluctuating storage requirements.</p><h4 class="bamboo-h " id="Simplified Management1hw71nzubwp">Simplified Management</h4><br/><p>EFS takes care of the underlying infrastructure and scaling, allowing you to focus on your applications without worrying about managing storage hardware.</p><h2 class="bamboo-h " id="Choosing Between EBS and EFSu24d7pnk45">Choosing Between EBS and EFS</h2><br/><p>To decide between AWS EBS and AWS EFS, consider the following factors:</p><h4 class="bamboo-h " id="Use Case4iljy8ndc6">Use Case</h4><br/><p>Determine whether your application requires block-level storage (EBS) or file-level storage (EFS).</p><h4 class="bamboo-h " id="Performance Requirementsb8s406s3z94">Performance Requirements</h4><br/> <p>Assess your performance needs. EBS is often preferred for high-performance workloads, while EFS offers good performance for a wide range of applications.</p><h4 class="bamboo-h " id="Scalability1vixbmu0rzl">Scalability</h4><br/><p>Consider whether your storage needs are likely to scale over time. EFS is designed for easy scalability.</p><h4 class="bamboo-h " id="Availability and Redundancy6sgaxsyi44">Availability and Redundancy</h4><br/> <p>If high availability and redundancy are crucial, EFS may be a better choice due to its built-in cross-AZ and cross-region capabilities.</p><h4 class="bamboo-h " id="Costpl1x6qwcy9">Cost</h4><br/> <p>Evaluate your budget and cost considerations. EBS charges are based on provisioned capacity, while EFS charges are based on actual usage.</p><h2 class="bamboo-h " id="Conclusion2hlzi4vy8n4">Conclusion</h2><br/><p>In summary, AWS EBS and AWS EFS are both valuable storage services within the AWS ecosystem, but they serve different purposes and have distinct characteristics. <span class='pbg danger'>EBS is ideal for block-level storage with high-performance requirements and provides data persistence within a single Availability Zone</span>. On the other hand, <span class='pbg danger'>EFS is designed for scalable file-level storage</span>. Your choice between the two should be based on your specific use case and requirements. Understanding these differences is crucial for optimizing your AWS storage strategy and ensuring the best performance and cost-efficiency for your applications.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Elastic File System (EFS)：云中的弹性文件存储</title>
      <link href="/2022/08/13/the-elastic-file-system/"/>
      <url>/2022/08/13/the-elastic-file-system/</url>
      
        <content type="html"><![CDATA[<p>在Cloud时代，数据的管理和共享至关重要。<code>AWS Elastic File System（EFS）</code>是 Amazon Web Services（AWS）提供的一项云存储服务，旨在满足企业和开发者对可扩展、高可用性文件存储的需求。本文将深入探讨 AWS EFS 的特点、优势、使用案例以及如何开始使用它。</p><p><img src="/assets/images/aws/aws-efs.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-efs.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS EFS"></p><h2 class="bamboo-h " id="AWS EFS 概览5iy6a0a7t6c">AWS EFS 概览</h2><br/><span class='pbg danger'>AWS EFS 是一种托管的网络文件存储服务，旨在提供可扩展、高可用性的文件系统，以满足各种应用程序和工作负载的存储需求。</span> 以下是 AWS EFS 的关键特点：<p><strong>共享文件存储</strong>：EFS 允许多个 Amazon EC2 实例同时访问相同的文件系统，支持多用户和多应用程序的共享文件访问。</p><p><strong>自动伸缩</strong>：EFS 自动扩展以适应容量和吞吐量的需求，无需手动干预。这使得它适用于不断变化的工作负载。</p><p><strong>高可用性</strong>：EFS 文件系统在多个可用区（Availability Zones）内复制数据，以提供高可用性和冗余性。这意味着如果一个可用区发生故障，文件系统仍然可用。</p><p><strong>数据一致性</strong>：EFS 提供强一致性的数据访问，确保多个实例并发访问时的数据一致性。</p><p><strong>多种访问协议</strong>：EFS 支持多种文件访问协议，包括 NFSv4、NFSv3 和 Amazon EFS 文件系统客户端。</p><p><strong>安全性</strong>：EFS 文件系统支持 Amazon VPC（Virtual Private Cloud）网络隔离，以确保数据的安全性和隐私性。</p><p><img src="/assets/images/aws/aws-efs-ia.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-efs-ia.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS EFS IA"></p><h2 class="bamboo-h " id="AWS EFS 的优势1rhdwpal0nu">AWS EFS 的优势</h2><br/><p>为什么选择 AWS EFS 作为文件存储解决方案? 以下是一些显著的优势：</p><p><strong>可扩展性</strong>：EFS 自动扩展，因此您不必担心文件系统的容量限制。它可以根据需要增加存储空间。</p><p><strong>高可用性</strong>：EFS 提供多可用区部署，使文件系统在单个可用区故障时保持可用，提高了应用程序的可用性。</p><p><strong>共享性</strong>：多个 EC2 实例可以同时访问同一文件系统，使其适用于需要多个实例之间共享文件的应用程序。</p><p><strong>强一致性</strong>：EFS 提供强一致性，确保多个实例并发写入或读取文件时的数据一致性。</p><p><strong>灵活性</strong>：您可以根据需求创建和管理多个文件系统，每个文件系统可以有不同的权限和访问策略。</p><h2 class="bamboo-h " id="AWS EFS 的使用场景1r90319li22">AWS EFS 的使用场景</h2><br/><p>AWS EFS 适用于许多不同的使用场景，包括但不限于：</p><p><strong>Web 服务器</strong>：EFS 可用于存储 Web 服务器的静态内容、日志文件和配置文件，以实现高可用性和可扩展性。</p><p><strong>容器化应用程序</strong>：将容器化应用程序的配置文件和数据存储在 EFS 中，以便多个容器实例之间共享。</p><p><strong>大数据分析</strong>：EFS 可用于存储大数据分析工作负载的输入数据和输出结果，支持多个分析节点的并发访问。</p><p><strong>应用程序共享</strong>：EFS 使不同应用程序之间可以轻松地共享文件，适用于微服务架构和多个应用程序共存的情况。</p><p><strong>开发和测试环境</strong>：开发人员可以使用 EFS 存储开发和测试环境的代码和资源，确保一致的开发和测试数据。</p><h2 class="bamboo-h " id="开始使用 AWS EFS21errcot55f">开始使用 AWS EFS</h2><br/><p>要开始使用 AWS EFS，您可以按照以下步骤操作：</p><ol><li>登录 AWS 控制台：使用您的 AWS 帐户登录 AWS 管理控制台。</li><li>创建 EFS 文件系统：在 AWS 控制台中导航到 EFS 服务，创建一个新的文件系统，并配置存储容量和权限。</li><li>设置访问权限：定义哪些 EC2 实例可以访问文件系统，并分配适当的权限。</li><li>将文件系统挂载到 EC2 实例：在您的 EC2 实例上挂载 EFS 文件系统，使实例能够访问共享文件。</li><li>开始使用：将您的应用程序或工作负载配置为使用挂载的 EFS 文件系统。</li></ol><h2 class="bamboo-h " id="总结dqfimuz3iq">总结</h2><br/><p>AWS Elastic File System（EFS）是一项强大的云文件存储服务，为各种应用程序和业务提供可扩展，高可能性的文件存储功能。</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Backup and Restore AWS EBS</title>
      <link href="/2022/07/19/how-to-backup-and-restore-aws-ebs/"/>
      <url>/2022/07/19/how-to-backup-and-restore-aws-ebs/</url>
      
        <content type="html"><![CDATA[<p>在Amazon Web Services（AWS）中，<code>Snapshot</code>是一种备份和恢复Amazon Elastic Block Store（EBS）卷数据的关键工具。<br><img src="/assets/images/aws/aws-ebs-snapshot.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ebs-snapshot.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS EBS Snapshot"></p><h2 class="bamboo-h " id="什么是Snapshot2s6km8qkpf8">什么是Snapshot</h2><br/><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Snapshot是EBS卷的点对点备份，它记录了卷的特定时刻的状态，包括数据、配置和元数据。快照是存储在Amazon S3中的，因此具有高可靠性和持久性。</p><h2 class="bamboo-h " id="特点和功能6t88h63c1d">特点和功能</h2><br/><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><p>Snapshot是持久性的，一旦创建，它们会一直存在，即使原始EBS卷被删除也是如此。</p><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><p>快照仅捕获自上一个快照以来发生的更改，这降低了备份的成本和时间。</p><h4 id="快速创建"><a href="#快速创建" class="headerlink" title="快速创建"></a>快速创建</h4><p>Snapshot创建通常非常快，因为它只会记录发生的更改。</p><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><p>可以创建多个快照，并根据需要还原到不同的版本，以便进行数据版本控制和历史记录。</p><h4 id="复制到其他区域"><a href="#复制到其他区域" class="headerlink" title="复制到其他区域"></a>复制到其他区域</h4><p>可以将Snapshot复制到其他AWS区域，以增加数据的可用性和灾难恢复选项。</p><h4 id="创建新EBS卷"><a href="#创建新EBS卷" class="headerlink" title="创建新EBS卷"></a>创建新EBS卷</h4><p>可以使用Snapshot创建新的EBS卷，这对于在不同EC2实例之间共享数据非常有用。</p><h4 id="自动快照策略"><a href="#自动快照策略" class="headerlink" title="自动快照策略"></a>自动快照策略</h4><p>可以设置自动快照策略，以定期创建快照，从而实现自动备份。</p><h2 class="bamboo-h " id="如何创建和使用Snapshot5s96hr7p2pk">如何创建和使用Snapshot</h2><br/><h4 id="创建Snapshot"><a href="#创建Snapshot" class="headerlink" title="创建Snapshot"></a>创建Snapshot</h4><p>在AWS管理控制台上，可以选择要备份的EBS卷，然后创建Snapshot。也可以使用AWS命令行工具或SDK来创建Snapshot。</p><h4 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h4><p>可以选择手动创建Snapshot，也可以设置自动快照策略来定期备份数据。</p><h4 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h4><p>如果需要，可以使用Snapshot还原数据。可以创建新的EBS卷，然后从快照还原数据，或者将快照直接附加到现有EBS卷上。</p><h4 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h4><p>Snapshot是数据保护的关键，它可以防止因数据丢失或损坏而引发的灾难情况。</p><h4 id="数据复制和迁移"><a href="#数据复制和迁移" class="headerlink" title="数据复制和迁移"></a>数据复制和迁移</h4><p>可以将Snapshot复制到其他AWS区域或AWS账户，以实现数据复制和迁移。</p><h2 class="bamboo-h " id="快照的应用场景3080rccprcc">快照的应用场景</h2><br/><h4 id="数据备份和恢复"><a href="#数据备份和恢复" class="headerlink" title="数据备份和恢复"></a>数据备份和恢复</h4><p>主要用于备份重要的数据，以便在数据丢失或损坏时能够迅速恢复。</p><h4 id="点对点复制和迁移"><a href="#点对点复制和迁移" class="headerlink" title="点对点复制和迁移"></a>点对点复制和迁移</h4><p>可以将快照复制到不同的 AWS 区域或 AWS 账户，以实现数据的复制和迁移。</p><h4 id="测试和开发"><a href="#测试和开发" class="headerlink" title="测试和开发"></a>测试和开发</h4><p>创建快照可以帮助在不影响生产环境的情况下为测试和开发环境提供实验数据。</p><h4 id="版本控制和数据恢复"><a href="#版本控制和数据恢复" class="headerlink" title="版本控制和数据恢复"></a>版本控制和数据恢复</h4><p>可以使用快照来实现数据版本控制，允许在不同时间点恢复到不同的数据状态。</p><h4 id="数据分析和报告"><a href="#数据分析和报告" class="headerlink" title="数据分析和报告"></a>数据分析和报告</h4><p>可以创建快照以便进行数据分析、生成报告或生成数据副本以供其他用途使用。</p><h2 class="bamboo-h " id="快照的定价4cnm3abjxfa">快照的定价</h2><br/><p>会被收费用于创建和保留快照的存储空间。快照的价格取决于存储的数据量。AWS 还提供了一些定价选项，如创建和保留快照的频率。具体查看 AWS 官方网站的定价详情获取最新信息。</p><h2 class="bamboo-h " id="最佳实践和注意事项71suljod72w">最佳实践和注意事项</h2><br/><h4 id="定期创建快照"><a href="#定期创建快照" class="headerlink" title="定期创建快照"></a>定期创建快照</h4><p>建议定期创建快照，以确保数据的定期备份和恢复能力。</p><h4 id="标记和命名"><a href="#标记和命名" class="headerlink" title="标记和命名"></a>标记和命名</h4><p>为快照提供有意义的标记和命名，以便轻松识别和管理。</p><h4 id="自动化备份策略"><a href="#自动化备份策略" class="headerlink" title="自动化备份策略"></a>自动化备份策略</h4><p>使用 AWS 的自动备份策略来定期创建快照，减少人工干预。</p><h4 id="根据需求调整快照"><a href="#根据需求调整快照" class="headerlink" title="根据需求调整快照"></a>根据需求调整快照</h4><p>根据数据的重要性和变化频率，调整快照的保留策略。</p><h4 id="监控和警报"><a href="#监控和警报" class="headerlink" title="监控和警报"></a>监控和警报</h4><p>设置监控和警报，以便在快照创建或数据丢失时及时获得通知。</p><h2 class="bamboo-h " id="总结3e5u0cbvna4">总结</h2><br/><p>总之，AWS Snapshot 用于EBS卷备份和数据保护的关键工具。它具有高度的持久性和可靠性，并支持数据版本控制、恢复、复制和迁移。通过定期创建Snapshot，可以确保数据的安全性和可用性</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding AWS EC2 Instance Store</title>
      <link href="/2022/06/13/understanding-aws-ec2-instance-store/"/>
      <url>/2022/06/13/understanding-aws-ec2-instance-store/</url>
      
        <content type="html"><![CDATA[<p>Amazon Web Services (AWS) 的弹性Cloud实例（EC2）为用户提供了多种存储选项，其中之一是实例存储(<code>Instance Store</code>)，也被称为本地实例存储或瞬态存储。本文将深入研究 AWS EC2 实例存储，包括其定义、特点、使用场景以及最佳实践。</p><h2 class="bamboo-h " id="什么是 EC2 实例存储？7thk098dxi">什么是 EC2 实例存储？</h2><br/><div class="note info"><p>EC2 实例存储是 EC2 实例上提供的临时、本地存储选项。这些存储卷是物理存储设备（如硬盘驱动器）的一部分，直接连接到宿主实例，而不是通过网络进行访问。实例存储通常提供了非常高的性能，适用于需要低延迟和高吞吐量的工作负载。</p></div><p><img src="/assets/images/aws/aws-ec2-instancestore-iops.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ec2-instancestore-iops.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS EC2 Instance Store IOPS"></p><h2 class="bamboo-h " id="实例存储的特点9ejl24qtu8c">实例存储的特点</h2><br/><p><strong>临时性</strong>：实例存储是临时的，与 EC2 实例的生命周期紧密相连。当 EC2 实例停止、终止或失败时，存储中的数据将不再可用。</p><p><strong>高性能</strong>：实例存储通常提供非常高的 I&#x2F;O 性能，适用于需要大量读写操作的应用程序，如数据库缓存或临时计算。</p><p><strong>低延迟</strong>：由于实例存储直接连接到宿主实例，因此具有非常低的访问延迟，适用于对速度要求极高的工作负载。</p><p><strong>不同于 Amazon EBS</strong>：<wavy>, 与 Amazon Elastic Block Store（EBS）不同，实例存储不需要预配，也没有额外的费用，但缺乏 EBS 提供的持久性和数据备份功能。</wavy></p><h2 class="bamboo-h " id="使用场景1kkfs2jsjys">使用场景</h2><br/><p><strong>缓存层</strong>：实例存储适用于临时数据，如缓存层。通过将缓存存储在实例存储上，可以提高读取速度和降低后端存储负担。</p><p><strong>临时计算</strong>：对于需要执行大规模数据处理的任务，实例存储可以用作临时工作空间，以加速计算过程。</p><p><strong>日志存储</strong>：对于需要快速记录大量日志数据的应用程序，实例存储可以提供高性能的日志存储解决方案。</p><h2 class="bamboo-h " id="最佳实践bamg92jcp7s">最佳实践</h2><br/><p><strong>备份重要数据</strong>：由于实例存储是临时性的，重要数据需要备份到持久性存储（如 Amazon EBS 或 Amazon S3）以防止数据丢失。</p><p><strong>了解生命周期</strong>：在使用实例存储时，了解 EC2 实例的生命周期非常重要。确保存储中的数据不会在实例终止时丢失。</p><p><strong>监控性能</strong>：实例存储通常提供高性能，但仍然需要监控其性能以确保正常运行。</p><h2 class="bamboo-h " id="总结1ipi2bmznfz">总结</h2><br/><span class='pbg danger'>AWS EC2 实例存储是一种适用于需要高性能和低延迟的临时数据存储的选择。尽管它不适用于持久性数据存储，但在特定场景下，如缓存、临时计算和日志存储，它可以提供卓越的性能和效率</span>。使用实例存储时，请谨记存储临时性质，并采取适当的备份和监控措施，以确保数据的可用性和完整性。]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is AWS EBS and how to use it</title>
      <link href="/2022/05/01/what-is-aws-ebs-and-how-to-use-it/"/>
      <url>/2022/05/01/what-is-aws-ebs-and-how-to-use-it/</url>
      
        <content type="html"><![CDATA[<p><code>Amazon Elastic Block Store (EBS)</code> 是 Amazon Web Services (AWS) 提供的一项块存储服务，它允许用户创建和管理持久性块存储卷，并将这些卷附加到 Amazon Elastic Compute Cloud (EC2) 实例上。以下是关于 AWS EBS 的详细信息，包括特征、原理和使用方法。<br><img src="/assets/images/aws/aws-ebs-1.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ebs-1.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AWS EBS"></p><h2 id="特征和功能"><a href="#特征和功能" class="headerlink" title="特征和功能"></a>特征和功能</h2><h4 id="持久性存储"><a href="#持久性存储" class="headerlink" title="持久性存储"></a>持久性存储</h4><p>EBS 卷是持久性的，这意味着数据在卷被附加到 EC2 实例上时保持不变。即使 EC2 实例停止或终止，数据仍然保留在卷上。</p><h4 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h4><p>EBS 卷会自动复制到同一可用性区域的多个设备上，以提高可用性和数据冗余。这确保了卷的数据可靠性。</p><h4 id="不断电的性能"><a href="#不断电的性能" class="headerlink" title="不断电的性能"></a>不断电的性能</h4><p>EBS 提供不断电的性能，可以提供一致的低延迟和高吞吐量，适用于各种工作负载，包括数据库、应用程序和文件系统。</p><h4 id="多种卷类型"><a href="#多种卷类型" class="headerlink" title="多种卷类型"></a>多种卷类型</h4><p>EBS 提供不同类型的卷，包括通用用途（gp2、gp3）、块存储（io1、io2）、冷 HDD 存储（sc1）和磁盘存储（st1）。每种类型都针对不同的性能和成本需求进行了优化。</p><h4 id="大小和性能的可扩展性"><a href="#大小和性能的可扩展性" class="headerlink" title="大小和性能的可扩展性"></a>大小和性能的可扩展性</h4><p>您可以根据需要调整 EBS 卷的大小和性能，而无需停机。这种可扩展性使您能够适应变化的工作负载需求。</p><h4 id="快照和备份"><a href="#快照和备份" class="headerlink" title="快照和备份"></a>快照和备份</h4><p>您可以创建 EBS 卷的快照，以备份数据，并可以使用这些快照创建新的卷。这对于数据恢复和备份非常有用。<br><img src="/assets/images/aws/aws-ebs-attach.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ebs-attach.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="EBS Attached to EC2"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>EBS 基于云上虚拟化技术实现，其主要原理如下</p><h4 id="块级别存储"><a href="#块级别存储" class="headerlink" title="块级别存储"></a>块级别存储</h4><p>EBS 存储是以块级别（通常为 512KB 或 1MB）来管理的。每个 EBS 卷由多个块组成，这些块可以独立读取和写入。</p><h4 id="分布式复制"><a href="#分布式复制" class="headerlink" title="分布式复制"></a>分布式复制</h4><p>EBS 卷的数据在同一可用性区域内的多个设备上进行分布式复制。这种复制提高了可用性和数据冗余。</p><h4 id="异步持久性"><a href="#异步持久性" class="headerlink" title="异步持久性"></a>异步持久性</h4><p>EBS 异步将数据写入持久性存储，以确保数据持久性。这意味着数据写入可能不会立即返回成功，但在后续读取时数据是可靠的。</p><h2 id="如何使用-EBS"><a href="#如何使用-EBS" class="headerlink" title="如何使用 EBS"></a>如何使用 EBS</h2><h4 id="创建-EBS-卷"><a href="#创建-EBS-卷" class="headerlink" title="创建 EBS 卷"></a>创建 EBS 卷</h4><p>在 AWS 控制台上，您可以创建新的 EBS 卷，选择卷类型、大小和其他配置选项。</p><h4 id="附加-EBS-卷"><a href="#附加-EBS-卷" class="headerlink" title="附加 EBS 卷"></a>附加 EBS 卷</h4><p>创建的 EBS 卷可以附加到 EC2 实例上。您可以选择在启动 EC2 实例时附加卷，或者在运行实例时添加卷。</p><h4 id="格式化和挂载"><a href="#格式化和挂载" class="headerlink" title="格式化和挂载"></a>格式化和挂载</h4><p>一旦附加到 EC2 实例，您需要在实例上格式化 EBS 卷，并将其挂载到文件系统上，以便在实例上使用。</p><h4 id="使用和管理"><a href="#使用和管理" class="headerlink" title="使用和管理"></a>使用和管理</h4><p>一旦 EBS 卷附加到实例上，您可以在其上创建、读取和写入数据。您还可以使用快照功能创建备份。</p><p><code>AWS EC2启动默认使用的根存储EBS在EC2终止的时候会一并删掉，而额外附加的EBS存储块则不会删除。EBS存储卷只能附加到同一个可用区的EC2实例上。</code><br><img src="/assets/images/aws/aws-ebs-root.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ebs-root.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="EBS for AMI Root Volume"></p><p>EBS 是 AWS 中的核心存储服务，用于持久性数据存储和扩展存储性能。它适用于各种应用程序和工作负载，从数据库到文件存储。通过了解 EBS 的特点和原理，您可以更好地配置和管理您的云存储需求。</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是AWS EC2 Hibernation</title>
      <link href="/2022/04/08/shen-me-shi-aws-ec2-hibernation/"/>
      <url>/2022/04/08/shen-me-shi-aws-ec2-hibernation/</url>
      
        <content type="html"><![CDATA[<p><code>EC2 Hibernation</code> 是 Amazon Elastic Compute Cloud (EC2) 服务的一个功能，它允许您将 EC2 实例从运行状态转换为休眠状态，然后再次唤醒它，而不会丢失实例的内存中的数据。这个功能非常适合那些需要保持应用程序状态或长时间运行进程的工作负载。<br><img src="/assets/images/aws/aws-ec2-hibernation-flow.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ec2-hibernation-flow.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>这里详细说明 EC2 Hibernation 的<strong>工作原理</strong></p><span id="more"></span><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><strong>1.启用 Hibernation：</strong> 要使用 EC2 Hibernation，首先需要在 EC2 实例上启用它。这可以通过使用支持 Hibernation 的实例类型，并在启动时启用 Hibernation 选项来完成。并且EBS卷必须要开启加密。<br><img src="/assets/images/aws/aws-ec2-hibernation-enable.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ec2-hibernation-enable.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>2.创建 Hibernation 快照：</strong> 在启用 Hibernation 后，EC2 实例的内存状态将被定期保存到 Amazon Elastic Block Store (EBS) 卷上的 Hibernation 快照中。这确保了在实例休眠时不会丢失内存中的数据。</p><p><strong>3.休眠实例：</strong> 一旦 Hibernation 启用并创建了快照，您可以通过执行 hibernate 命令或使用 AWS 管理控制台将实例转换为休眠状态。在休眠期间，实例的状态和数据将保存在 EBS 卷上。</p><p><strong>4.唤醒实例：</strong> 当您希望恢复实例的运行状态时，只需执行唤醒命令或使用控制台，EC2 实例将从 Hibernation 快照中还原内存状态，并继续运行。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>EC2 Hibernation 可以应用于多种使用场景，包括但不限于：</p><p><strong>长时间运行的进程：</strong> 如果您的 EC2 实例运行有状态的应用程序或长时间运行的进程，您可以使用 Hibernation 将实例休眠，以节省计算成本，而无需中断应用程序。</p><p><strong>工作负载保持状态：</strong> 某些工作负载需要保持状态，例如内存中的会话数据或数据库连接。通过 Hibernation，您可以在需要时恢复工作负载，而无需重新创建状态。</p><p><strong>成本优化：</strong> 对于不需要全天候运行的工作负载，您可以使用 Hibernation 在闲置时降低成本，然后在需要时快速恢复。</p><p><strong>实例维护：</strong> 在 EC2 实例需要进行操作系统更新或其他维护操作时，可以使用 Hibernation 将实例休眠，然后在完成维护后唤醒它，以减少维护期间的停机时间。</p><p>&#x3D;&#x3D;请注意&#x3D;&#x3D;，<u>不是所有的 EC2 实例类型都支持 Hibernation</u>，您需要选择支持该功能的实例类型并启用它。此外，<u>使用 Hibernation 可能会产生额外的 EBS 存储费用，因为需要存储 Hibernation 快照</u>。所以，在使用 Hibernation 时，需要权衡成本和性能需求。</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS EC2的主要特点和工作方式以及计费模式</title>
      <link href="/2022/03/02/aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi/"/>
      <url>/2022/03/02/aws-ec2de-xiang-xi-jie-shao-he-ji-fei-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>Amazon Elastic Compute Cloud（Amazon EC2）是Amazon Web Services（AWS）提供的一项基于云的可伸缩性、弹性、安全性和监控的计算服务，它允许用户租用虚拟服务器（称为EC2实例）来运行应用程序。我们从主要特点，工作方式以及计价模式来介绍下EC2<br><img src="/assets/images/aws/aws-ec2-intro.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-ec2-intro.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><span id="more"></span><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><p><strong>可伸缩性 (Scalability)</strong><br>EC2 允许用户根据需要快速扩展或缩减实例数量。这种可伸缩性使您能够适应不断变化的工作负载，确保您的应用程序始终具备所需的计算资源。</p><p><strong>多样性的实例类型 (Diverse Instance Types)</strong><br>AWS 提供多种不同类型的 EC2 实例，以满足各种计算需求。这些类型包括计算优化、内存优化、存储优化、GPU 实例等，每种类型都针对不同类型的工作负载进行了优化。</p><p><strong>弹性IP地址 (Elastic IP Addresses)</strong><br>您可以分配弹性 IP 地址给 EC2 实例，确保即使实例停止和重新启动，IP 地址也能保持不变。这有助于确保应用程序的连通性。</p><p><strong>安全组和网络 ACL (Security Groups and Network ACLs)</strong><br>EC2 允许您配置安全组和网络 ACL，以控制实例的入站和出站流量。这提供了一层网络安全性，以确保只有授权的流量可以访问实例。</p><p><strong>Amazon Machine Images (AMIs)</strong><br>AMIs 是虚拟机镜像，包含了操作系统、应用程序和配置信息。您可以使用标准 AMIs 或创建自定义 AMIs 来启动 EC2 实例，从而简化部署。</p><p><strong>多个操作系统支持 (Multiple OS Support)</strong><br>EC2 支持多种操作系统，包括各种 Linux 发行版、Windows Server 和其他操作系统。这使您可以选择适合您应用程序的操作系统。</p><p><strong>自动化和托管选项 (Automation and Managed Options)</strong><br>EC2 实例可以与其他 AWS 服务集成，如 AWS Auto Scaling、Elastic Load Balancing 和 AWS Elastic Beanstalk，以实现自动化部署和托管。</p><p><strong>监控和警报 (Monitoring and Alerts)</strong><br>EC2 实例集成了 Amazon CloudWatch，可监控实例的性能和状态，并配置警报以及自动响应性能问题。</p><p><strong>可靠性和容错性 (Reliability and Fault Tolerance)</strong><br>EC2 提供高可用性和容错性，实例可以在不同的可用性区域和可用性域中运行，以确保服务的连续性。</p><p><strong>身份和访问管理 (Identity and Access Management)</strong><br>EC2 实例可以与 AWS Identity and Access Management (IAM) 集成，以进行身份验证和授权，使您能够控制对实例和资源的访问权限。</p><p><strong>多种定价选项 (Pricing Options)</strong><br>EC2 提供多种不同的定价选项，包括按需实例、预留实例、定期实例、Spot 实例等，以满足不同的预算和使用需求。</p><h3 id="工作方式："><a href="#工作方式：" class="headerlink" title="工作方式："></a>工作方式：</h3><p><strong>选择实例类型</strong><br>在使用 EC2 之前，您首先需要选择适合您工作负载需求的 EC2 实例类型。不同类型的实例提供不同的计算、内存、存储和网络性能。您可以根据您的需求来选择。</p><p><strong>启动实例</strong><br>一旦选择了实例类型，您可以使用 Amazon Machine Image（AMI）启动 EC2 实例。AMI 是一个预配置的虚拟机镜像，它包含了操作系统、应用程序和配置信息。您可以选择 AWS 提供的标准 AMI，也可以创建自己的自定义 AMI。</p><p><strong>安全组和密钥对</strong><br>在启动实例时，您可以选择一个或多个安全组，这些安全组定义了实例的入站和出站流量规则，以确保安全性。您还可以选择密钥对，以便安全地访问您的 EC2 实例。</p><p><strong>运行实例</strong><br>一旦实例启动，它将在 AWS 的数据中心中的物理服务器上运行。您可以通过 SSH（对于 Linux 实例）或 RDP（对于 Windows 实例）等远程协议连接到实例。</p><p><strong>管理实例</strong><br>一旦运行，您可以随时管理 EC2 实例。这包括启动、停止、重启、终止实例，以及更改实例的配置，如调整实例大小、添加存储卷等。</p><p><strong>存储和快照</strong><br>EC2 实例通常附带 Elastic Block Store（EBS）卷，您可以使用这些卷来存储数据。您还可以创建 EBS 快照，以备份数据或复制数据到其他地方。</p><p><strong>监控和伸缩</strong><br>AWS 提供了 Amazon CloudWatch，它可以用于监视 EC2 实例的性能指标，如 CPU 使用率、网络流量等。您可以设置警报以响应性能问题，并根据需要配置自动伸缩策略，以自动调整实例数量。</p><p><strong>安全性和身份验证</strong><br>EC2 实例可以与 AWS Identity and Access Management（IAM）集成，以实现身份验证和授权。您可以为实例分配 IAM 角色，以便它们可以访问其他 AWS 服务或资源，而无需硬编码的凭据。</p><h3 id="计费模式"><a href="#计费模式" class="headerlink" title="计费模式"></a>计费模式</h3><p><strong>按需实例 (On-Demand Instances)</strong><br>按需实例是一种灵活的计费方式，您只需为您实际使用的计算资源付费，没有长期合同或预付费。这意味着您可以随时启动或停止实例，只支付实际的运行时间。</p><p>适用于需要灵活性的工作负载，如开发和测试、临时工作负载、突发性工作负载。</p><p><strong>预留实例 (Reserved Instances)</strong><br>预留实例是一种合同制度，您提前支付一定费用，获得对特定实例类型的一定时期内的折扣，通常为1年或3年。这通常比按需实例更经济。</p><p>适用于长期工作负载，可以预测的、稳定的使用情况，例如生产服务器。</p><p><strong>可用性区域保留实例 (Reserved Instances for Availability Zones)</strong><br>这是预留实例的一种变种，允许您为特定的可用性区域（AZ）购买预留容量。这对于需要在特定区域内保留容量的应用程序非常有用。</p><p>适用于需要确保在特定可用性区域内拥有计算资源的工作负载。</p><p><strong>可调整实例 (Convertible Reserved Instances)</strong><br>这是一种预留实例，允许在合同期内更改实例类型，以适应不同的工作负载需求。</p><p>适用于工作负载需求可能会变化的情况，但仍然希望获得折扣。</p><p><strong>定期实例 (Scheduled Instances)</strong><br>定期实例允许您按预定的时间启动 EC2 实例。您可以在每天的特定时间、每周某个时间或其他预定时间启动实例。</p><p>适用于周期性的、预定的工作负载，如每天备份、批处理处理等。</p><p><strong>批量实例 (Spot Instances)</strong><br>Spot 实例基于竞价定价模式，您可以设定愿意支付的价格，当市场价格低于您的出价时，您可以获得实例。但它们可能随时被终止。</p><p>适用于可以容忍实例随时中断的工作负载，如大规模数据分析和渲染任务。</p><p><strong>Dedicated Hosts（专用主机）</strong><br>专用主机允许您在 AWS 的物理服务器上运行 EC2 实例，这些服务器专门为您的账户保留。这提供了硬件级别的隔离，适用于具有特殊合规性要求的工作负载。</p><p>适用于需要硬件隔离的工作负载，例如合规性要求非常高的应用程序，或者需要将许多实例部署到同一物理服务器上的场景。</p><p><strong>Dedicated Instances（专用实例）</strong><br>专用实例是 EC2 实例，它们在共享的物理服务器上运行，但只与您的账户中的其他实例共享。这提供了实例级别的隔离。</p><p>适用于需要实例级别隔离的工作负载，但不需要物理主机级别的隔离的场景。</p><p><strong>Free Tier（免费层级）</strong><br>AWS 提供了一定程度的免费使用，即免费层级，对于新用户以及AWS账户中的某些服务和资源，提供有限的免费额度，通常为12个月。这是用于学习、试验和小型项目的好方法，以降低成本。</p><p>适用于学习 AWS、开发和测试小型应用程序，或者初期的小规模项目。</p><p>这些计费模式为不同的使用情况提供了各种选择。您可以根据您的需求和预算来选择适合您的模式。请注意，AWS定期更新其价格和计费模式，因此建议查看官方文档以获取最新的信息。</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS IAM原理以及如何使用</title>
      <link href="/2022/02/17/aws-iamyuan-li-yi-ji-ru-he-shi-yong/"/>
      <url>/2022/02/17/aws-iamyuan-li-yi-ji-ru-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>AWS Identity and Access Management（<code>IAM</code>）是Amazon Web Services（AWS）提供的身份和访问管理服务，用于安全地管理对AWS资源的访问权限。IAM使您能够精细控制用户、组、角色等实体对AWS服务和资源的访问权限，以确保安全性和合规性。</p><h3 id="IAM的原理"><a href="#IAM的原理" class="headerlink" title="IAM的原理"></a>IAM的原理</h3><p>IAM基于一些核心概念：</p><p><strong>用户（Users）：</strong> 代表实际的个人用户，可以分配安全凭证（如访问密钥、密码）来访问AWS资源。<br><img src="/assets/images/aws/aws-iam-users.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-iam-users.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><span id="more"></span><p><strong>组（Groups）：</strong> 用于将一组用户组合在一起，并将一组权限分配给该组，从而简化权限管理。<br><img src="/assets/images/aws/aws-iam-groups.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-iam-groups.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>角色（Roles）：</strong> 类似于用户，但不是直接分配给人，而是分配给AWS资源（例如EC2实例）。角色可以用于临时授权。<br><img src="/assets/images/aws/aws-iam-roles.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-iam-roles.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>权限策略（Permissions Policies）：</strong><br>定义了用户、组或角色可以执行的特定操作的权限。AWS提供了许多预定义的权限策略，同时也可以创建自定义策略。<br><img src="/assets/images/aws/aws-iam-policies.webp" class="lazyload placeholder" data-srcset="/assets/images/aws/aws-iam-policies.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h3 id="如何使用IAM"><a href="#如何使用IAM" class="headerlink" title="如何使用IAM"></a>如何使用IAM</h3><p><strong>创建用户和组：</strong> 在IAM中，您可以创建用户，并将用户组合成组。然后，为用户分配安全凭证和权限。</p><p><strong>定义和分配权限：</strong> 您可以使用AWS提供的预定义权限策略，也可以创建自定义策略，然后将这些策略附加到用户、组或角色上，以控制他们对资源的访问。</p><p><strong>使用角色：</strong> 如果您的应用程序需要访问AWS服务，可以创建角色，并将这些角色附加到您的应用程序或服务中。这样，您可以避免将敏感的凭证嵌入到应用程序代码中。</p><p><strong>多因素认证（MFA）：</strong> 您可以启用多因素认证来增加账户的安全性，要求用户在登录时提供额外的身份验证信息。</p><p><strong>访问审计：</strong> IAM提供了日志记录功能，可记录用户在AWS资源上执行的操作，以便进行审计和安全分析。</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>在使用IAM时，建议采用以下最佳实践，例如：</p><p><strong>最小权限原则：</strong> 为用户和角色提供所需的最小权限，以减少潜在的安全风险。</p><p><strong>使用身份提供商：</strong> 将身份提供商（如企业目录）与IAM集成，以便集中管理用户和权限。</p><p><strong>定期审查权限：</strong> 定期审查用户、组和角色的权限，确保权限保持最新且合规。</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈IaC工具Terraform vs Pulumi</title>
      <link href="/2021/07/13/iac-tools-terraform-vs-pulumi/"/>
      <url>/2021/07/13/iac-tools-terraform-vs-pulumi/</url>
      
        <content type="html"><![CDATA[<p><code>基础架构即代码（Infrastructure as Code, IaC）</code>是一种管理和提供计算基础架构的方式, 它使得基础架构的创建、修改和管理变得更加高效。<code>Terraform</code>和<code>Pulumi</code>是两个流行的IaC工具, 各自具有独特的工作原理和优势。</p><h2 id="Terraform"><a href="#Terraform" class="headerlink" title="Terraform"></a>Terraform</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>Terraform是由<code>HashiCorp</code>开发的开源IaC工具。它使用一种<code>声明性配置语言（HashiCorp Configuration Language, HCL）</code>来定义基础架构的状态。不是完全开源的。有以下特征:</p><p><strong>声明式配置</strong>: 用户通过HCL编写配置文件, 描述所需的基础架构状态。用户并不需要关心如何实现这些状态的细节。<br><strong>执行计划</strong>: 运行<code>terraform plan</code>命令时, Terraform会读取配置文件和当前的基础架构状态, 并生成一个执行计划, 指出将要执行的操作, 以使当前状态转变为期望状态。<br><strong>应用更改</strong>: 运行<code>terraform apply</code>命令后, Terraform将根据执行计划实际创建、更新或删除资源。<br><strong>状态管理</strong>: Terraform会维护一个状态文件（terraform.tfstate）, 用于记录当前基础架构的状态。此文件使Terraform能够识别哪些资源已经存在、哪些资源需要创建或更新。<br><strong>图形化依赖关系</strong>: Terraform会自动处理资源之间的依赖关系, 从而确保以正确的顺序创建和更新资源。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p><strong>平台无关性</strong>: 支持多种云服务提供商（<code>AWS</code>、<code>Azure</code>、<code>GCP</code>等）, 用户可以使用相同的工具管理不同平台的资源。<br><strong>模块化</strong>: Terraform支持模块化, 用户可以将常用的资源配置封装成模块, 提高重用性。<br><strong>社区支持</strong>: 拥有丰富的社区和大量的第三方模块, 方便用户快速上手。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>Terraform创建AWS S3 Bucket的示例代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">  region = &quot;us-east-1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_s3_bucket&quot; &quot;my_bucket&quot; &#123;</span><br><span class="line">  bucket = &quot;my-unique-bucket-name&quot;</span><br><span class="line">  acl    = &quot;private&quot;</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name        = &quot;My S3 Bucket&quot;</span><br><span class="line">    Environment = &quot;Dev&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initialize Terraform project. This sets up the backend, downloads necessary providers, etc.</span></span><br><span class="line">terraform init</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run a Terraform plan to preview the changes that will be made to the infrastructure.</span></span><br><span class="line"><span class="comment"># This step is a dry-run that shows what will happen when you actually apply the changes.</span></span><br><span class="line">terraform plan</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply the planned changes to the infrastructure.</span></span><br><span class="line"><span class="comment"># This step will actually create, update, or delete resources to match the configuration.</span></span><br><span class="line"><span class="comment"># It will show a preview of these actions and ask for confirmation before proceeding.</span></span><br><span class="line">terraform apply</span><br><span class="line"></span><br><span class="line"><span class="comment"># Destroy the infrastructure.</span></span><br><span class="line"><span class="comment"># This step will delete all resources that were created by Terraform.</span></span><br><span class="line">terraform destroy</span><br></pre></td></tr></table></figure><h2 id="Pulumi"><a href="#Pulumi" class="headerlink" title="Pulumi"></a>Pulumi</h2><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>Pulumi是一个现代化的IaC工具, 允许用户使用多种编程语言（如<code>JavaScript</code>、<code>Python</code>、<code>Go</code>和<code>C#</code>, <code>Java</code>）或者标记语言<code>YAML</code>来定义基础架构。是完全开源的，与Terraform的声明性方法不同, Pulumi采用了<code>命令式编程模型</code>。</p><p><strong>命令式编程</strong>: 用户使用编程语言编写代码, 通过构建逻辑和控制流来描述基础架构的创建过程。例如, 可以使用条件语句和循环来动态地生成资源。<br><strong>Pulumi CLI</strong>: 通过Pulumi CLI, 用户可以运行<code>pulumi up</code>命令来预览和应用更改。Pulumi会分析代码并生成执行计划。<br><strong>状态管理</strong>: Pulumi将状态存储在云中（如AWS S3）或本地, 以便跟踪基础架构的当前状态。<br><strong>实时更新</strong>: Pulumi支持实时更新, 当基础架构发生变化时, 用户可以立即看到影响, 并迅速响应。</p><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><p><strong>灵活性</strong>: pulumi支持多种编程语言, 允许用户使用熟悉的编程工具和库。<br><strong>可重用性</strong>: 可以通过函数和类等编程特性提高基础架构代码的可重用性和组织性。<br><strong>动态配置</strong>: 能够利用编程语言的特性, 动态生成和配置资源, 使得基础架构管理更加灵活。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>Pulumi创建AWS S3 Bucket的示例代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aws = <span class="built_in">require</span>(<span class="string">&quot;@pulumi/aws&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个S3 Bucket</span></span><br><span class="line"><span class="keyword">const</span> bucket = <span class="keyword">new</span> aws.<span class="property">s3</span>.<span class="title class_">Bucket</span>(<span class="string">&quot;my-bucket&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">acl</span>: <span class="string">&quot;private&quot;</span>,  <span class="comment">// 设置访问控制列表</span></span><br><span class="line">    <span class="attr">tags</span>: &#123;</span><br><span class="line">        <span class="title class_">Name</span>: <span class="string">&quot;My S3 Bucket&quot;</span>,</span><br><span class="line">        <span class="title class_">Environment</span>: <span class="string">&quot;Dev&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出Bucket的名字和URL</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bucketName</span> = bucket.<span class="property">id</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bucketUrl</span> = bucket.<span class="property">websiteEndpoint</span>;</span><br></pre></td></tr></table></figure><h3 id="Command-1"><a href="#Command-1" class="headerlink" title="Command"></a>Command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a new Pulumi project</span></span><br><span class="line">pulumi new</span><br><span class="line"></span><br><span class="line"><span class="comment"># preview the changes that will be made to the infrastructure</span></span><br><span class="line">pulumi preview</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply the changes to the infrastructure</span></span><br><span class="line">pulumi up</span><br><span class="line"></span><br><span class="line"><span class="comment"># destroy the infrastructure</span></span><br><span class="line">pulumi destroy</span><br></pre></td></tr></table></figure><h2 id="Terraform与Pulumi的比较"><a href="#Terraform与Pulumi的比较" class="headerlink" title="Terraform与Pulumi的比较"></a>Terraform与Pulumi的比较</h2><table><thead><tr><th>特性</th><th>Terraform</th><th>Pulumi</th></tr></thead><tbody><tr><td>配置语言</td><td>HCL（声明性）</td><td>多种编程语言（命令式）</td></tr><tr><td>学习曲线</td><td>相对较低, 易于上手</td><td>依赖于熟悉的编程语言, 学习曲线较高</td></tr><tr><td>状态管理</td><td>状态文件（terraform.tfstate）, 支持远程存储</td><td>状态存储在云中或本地, 支持更灵活的状态管理</td></tr><tr><td>社区与模块</td><td>拥有丰富的模块和社区支持</td><td>社区相对较小, 模块支持较少</td></tr><tr><td>资源依赖管理</td><td>自动处理资源之间的依赖关系</td><td>需要手动管理依赖关系</td></tr><tr><td>动态特性</td><td>受限于声明性配置, 动态配置较为困难</td><td>使用编程语言的特性, 支持动态生成和配置</td></tr><tr><td>可重用性</td><td>支持模块化</td><td>高度可重用性, 利用编程语言特性</td></tr></tbody></table><h3 id="选择Terraform"><a href="#选择Terraform" class="headerlink" title="选择Terraform:"></a>选择Terraform:</h3><ul><li>如果团队对声明性语言（如HCL）更熟悉, 并且希望快速上手。</li><li>需要丰富的社区支持和成熟的模块。</li><li>对基础架构的定义不需要复杂的逻辑。</li></ul><h3 id="选择Pulumi"><a href="#选择Pulumi" class="headerlink" title="选择Pulumi:"></a>选择Pulumi:</h3><ul><li>如果团队更熟悉编程语言, 并希望利用现有的编程技能。</li><li>需要动态生成基础架构配置, 或者希望实现复杂的逻辑。</li><li>希望在IaC中充分利用编程语言的特性（如函数、类、模块）。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Terraform</code>和<code>Pulumi</code>都是强大的<code>IaC工具</code>, 各有优劣。Terraform以其简单易用和广泛的社区支持而受到欢迎, 而Pulumi则因其灵活性和对多种编程语言的支持而逐渐崭露头角。选择哪种工具可以从团队的技能、项目需求和未来的维护策略方面来综合考虑。更多详细区别可以参见<code>pulumi</code>官网对比文章<a href="https://www.pulumi.com/docs/iac/concepts/vs/terraform/">https://www.pulumi.com/docs/iac/concepts/vs/terraform/</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pulumi </tag>
            
            <tag> Terraform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何维护正在运行的 Kubernetes 节点</title>
      <link href="/2021/06/28/how-to-maintan-the-running-node-in-kubernetes/"/>
      <url>/2021/06/28/how-to-maintan-the-running-node-in-kubernetes/</url>
      
        <content type="html"><![CDATA[<p><code>Kubernetes</code> 集群中的节点可以分为两种类型：</p><ul><li>主节点：主节点是 Kubernetes 集群的控制节点，负责管理集群的控制平面组件，如 API 服务器、调度器、控制器管理器等。</li><li>工作节点：工作节点是 Kubernetes 集群的工作节点，负责运行容器化的应用。</li></ul><p>当节点出现故障时，集群会自动将其从工作节点中移除，并将其上的容器调度到其他节点上。我们可以通过命令<code>kubectl get nodes</code>查看集群中所有节点的状态。</p><p>但是有些情况下，我们需要维护正在运行的节点，比如：升级节点的内核或操作系统， 修复节点上的软件包等等。这种情况下，为了不影响正在节点上运行的应用，在应用无感知的情况下，我们需要对节点进行维护。主要通过使用以下三个命令来实现：</p><ul><li><code>kubectl cordon &lt;node-name&gt;</code>：将节点标记为不可调度。</li><li><code>kubectl drain &lt;node-name&gt;</code>：将节点上的工作负载转移到其他节点上。</li><li><code>kubectl uncordon &lt;node-name&gt;</code>：将节点标记为可调度。</li></ul><p>我们这里用minikube来做示例，假设我们要维护正在运行的minikube节点。首先，查看节点的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-maintain-node.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-maintain-node.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes Get Nodes"/></div><span class="image-caption">Kubernetes Get Nodes</span></div><p>我们可以看到，minikube节点的状态是<code>Ready</code>，即节点处于正常状态。</p><h2 id="kubectl-cordon"><a href="#kubectl-cordon" class="headerlink" title="kubectl cordon"></a>kubectl cordon</h2><p><code>kubectl cordon</code>的作用是将节点标记为不可调度。这意味着不会在该节点上调度新的Pod，但现有的Pod将继续运行。当我们准备对节点进行维护或升级时，可以使用此命令，暂时不想驱逐任何现有的Pod。</p><p>此时，我们通过此命令将节点标记为不可调度：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cordon minikube</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-maintain-cordon.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-maintain-cordon.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes Cordon Node"/></div><span class="image-caption">Kubernetes Cordon Node</span></div><p>再次查看节点状态时，发现节点状态从<code>Ready</code>变成了<code>Ready,SchedulingDisabled</code>。这意味着节点已经被标记为不可调度，但是其中已调度的Pods仍然可以正常运行。</p><h2 id="kubectl-drain"><a href="#kubectl-drain" class="headerlink" title="kubectl drain"></a>kubectl drain</h2><p><code>kubectl drain</code>的作用是安全地从节点中驱逐所有<code>Pod</code>, 该命令将首先将节点标记为不可调度（cordon），然后尝试驱逐其上的所有Pod，确保它们被终止或重新调度到其他节点（如果它们是副本集、部署或其他控制器的一部分）, 特别适用于应用更新或进行硬件维护时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain minikube</span><br></pre></td></tr></table></figure><p>如何节点上有daemonset和local storage使用，直接执行上述的命令时会出现如下错误.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: unable to drain node &quot;minikube&quot; due to error:[cannot delete DaemonSet-managed Pods (use --ignore-daemonsets to ignore): kube-system/kube-proxy-jsdtq,</span><br><span class="line">cannot delete Pods with local storage (use --delete-emptydir-data to override): kube-system/metrics-server-c74bf77d6-9wpx5]</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-maintain-drain-failure.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-maintain-drain-failure.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes Drain Node Error"/></div><span class="image-caption">Kubernetes Drain Node Error</span></div><p>此时，我们需要使用<code>--ignore-daemonsets</code>参数来忽略daemonset，并使用<code>--delete-emptydir-data</code>参数来删除节点上的local storage。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain minikube --ignore-daemonsets --delete-emptydir-data</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-maintain-drain-success.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-maintain-drain-success.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes Drain Node Success"/></div><span class="image-caption">Kubernetes Drain Node Success</span></div><p>此时，节点上的所有Pod都已被驱逐，但节点仍然处于<code>Ready,SchedulingDisabled</code>状态。 查看Pods的运行状态，Pods的状态已经从Running变成了Pending状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-maintain-drain-status.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-maintain-drain-status.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes Drain Node Status"/></div><span class="image-caption">Kubernetes Drain Node Status</span></div><p>在这个步骤之后，我们就可以对节点进行维护，比如升级内核或操作系统，修复软件包等。当维护完成后，我们就可以通过命令<code>kubectl uncordon</code>将节点标记为可调度，允许新的Pod在其上进行调度。</p><h2 id="kubectl-uncordon"><a href="#kubectl-uncordon" class="headerlink" title="kubectl uncordon"></a>kubectl uncordon</h2><p><code>kubectl uncordon</code>的作用是将先前已被标记为不可调度的节点重新标记为可调度，允许新的Pod在其上进行调度。这意味着在该节点上可以调度新的Pod。当维护完成后，可以使用此命令将节点标记为可调度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl uncordon minikube</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-maintain-uncordon.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-maintain-uncordon.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes Uncordon Node"/></div><span class="image-caption">Kubernetes Uncordon Node</span></div><p>从上面可以看出，节点已经恢复成了<code>Ready</code>状态，可以正常调度Pod。并且Pod的状态也从<code>Pending</code>变成了<code>Running</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述三个命令，我们可以对正在运行的Kubernetes节点进行维护。首先，我们通过命令<code>kubectl cordon</code>将节点标记为不可调度，然后通过命令<code>kubectl drain</code>将节点上的工作负载转移到其他节点上。最后，我们通过命令<code>kubectl uncordon</code>将节点标记为可调度，允许新的Pod在其上进行调度。这样，我们就可以在不影响正在运行的应用的情况下，对节点进行维护。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 暴露 Service 给外部访问</title>
      <link href="/2021/06/09/kubernetes-expose-service/"/>
      <url>/2021/06/09/kubernetes-expose-service/</url>
      
        <content type="html"><![CDATA[<p>在现代的容器化应用部署中，<code>Kubernetes</code> 已经成为了一个不可或缺的工具。它提供了一种高效的方式来管理和编排容器化的应用。在 Kubernetes 中，<code>Service</code> 是一个核心概念，它定义了一种访问一组 <code>Pod</code> 的策略，通常被称为微服务。本文将详细介绍 Kubernetes 中的 Service 是什么，如何将其暴露出来，以及外部如何访问这些服务。</p><h2 id="什么是-Service？"><a href="#什么是-Service？" class="headerlink" title="什么是 Service？"></a>什么是 Service？</h2><p>在 Kubernetes 中，Service 是一种抽象，它定义了一组 Pod 的逻辑集合和一个访问它们的策略。Service 通过标签选择器（Label Selector）来确定它所服务的 Pod。<span class='pbg danger'>每个 Service 都有一个唯一的 IP 地址和端口，这使得即使 Pod 的 IP 地址发生变化，客户端也能通过 Service 稳定地访问到这些 Pod。</span></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-service.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-service.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes Service" style="width:800px;"/></div><span class="image-caption">Kubernetes Service</span></div><h2 id="Service-的作用"><a href="#Service-的作用" class="headerlink" title="Service 的作用"></a>Service 的作用</h2><p>Service 的作用主要有以下几点：</p><ol><li>负载均衡：Service 提供了一种负载均衡的策略，通过它可以将流量分发到多个 Pod。</li><li>服务发现：Service 提供了一种服务发现的机制，使得客户端应用能够通过名字来访问服务。</li><li>命名空间隔离：Service 使得 Pod 和 Service 能够被隔离到不同的命名空间中，从而实现更细粒度的权限控制。</li><li>跨集群服务：Service 提供了一种跨集群服务的能力，使得应用能够被部署到不同的 Kubernetes 集群中。</li></ol><h2 id="Service-的类型"><a href="#Service-的类型" class="headerlink" title="Service 的类型"></a>Service 的类型</h2><p>Kubernetes 提供了几种不同类型的 Service，以满足不同的需求：</p><h3 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h3><p>这是默认的 Service 类型，它为 Service 分配一个集群内的 IP 地址。这种类型的 Service 只能在集群内部访问。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-service-clusterip.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-service-clusterip.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes ClusterIP Service" style="width:600px;"/></div><span class="image-caption">Kubernetes ClusterIP Service</span></div><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><p>这种类型的 Service 会在每个节点的 IP 上打开一个特定的端口，并将该端口的流量转发到 Service。这样，外部客户端可以通过节点的 IP 和这个端口来访问 Service。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-service-nodeport.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-service-nodeport.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes NodePort Service" style="width:600px;"/></div><span class="image-caption">Kubernetes NodePort Service</span></div><h3 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h3><p>这种类型的 Service 会在云提供商（如 AWS、GCP 或 Azure）上创建一个负载均衡器，并将流量转发到 Service。负载均衡器会为 Service 分配一个外部 IP 地址，外部客户端可以通过这个 IP 地址访问 Service。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-service-loadbalancer.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-service-loadbalancer.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes LoadBalancer Service" style="width:600px;"/></div><span class="image-caption">Kubernetes LoadBalancer Service</span></div><h3 id="ExternalName-Ingress"><a href="#ExternalName-Ingress" class="headerlink" title="ExternalName - Ingress"></a>ExternalName - Ingress</h3><p>这种类型的 Service 通过返回一个 CNAME 记录，将 Service 映射到一个外部的 DNS 名称。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-service-external-name-ingress.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-service-external-name-ingress.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes ExternalName Ingress Service" style="width:800px;"/></div><span class="image-caption">Kubernetes ExternalName Ingress Service</span></div><h2 id="暴露-Service"><a href="#暴露-Service" class="headerlink" title="暴露 Service"></a>暴露 Service</h2><h3 id="yaml-文件方式1"><a href="#yaml-文件方式1" class="headerlink" title="yaml 文件方式1"></a>yaml 文件方式1</h3><p>要暴露一个 Service，首先需要创建一个 Service 的 YAML 文件。以下是一个简单的 NodePort Service 的示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-app</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30007</span></span><br></pre></td></tr></table></figure><p>在这个示例中，我们定义了一个名为 my-service 的 Service，它的类型是 NodePort。这个 Service 会选择所有带有标签 app&#x3D;my-app 的 Pod，并将端口 80 的流量转发到 Pod 的端口 8080。节点上的端口 30007 会被打开，外部客户端可以通过节点的 IP 和这个端口来访问 Service。</p><h3 id="kubectl-命令方式"><a href="#kubectl-命令方式" class="headerlink" title="kubectl 命令方式"></a>kubectl 命令方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment my-deployment --port=80 --target-port=8080 --<span class="built_in">type</span>=NodePort --name=my-service</span><br></pre></td></tr></table></figure><p>在上面的命令中，使用 <code>kubectl expose</code> 命令来暴露一个 Deployment 的 Service。我们指定了 Deployment 的名称 my-deployment，端口 80，目标端口 8080，Service 类型为 NodePort，Service 名称为 my-service。</p><h2 id="外部如何访问-Service"><a href="#外部如何访问-Service" class="headerlink" title="外部如何访问 Service"></a>外部如何访问 Service</h2><p>根据 Service 的类型，外部访问的方式也会有所不同：</p><p><strong>NodePort</strong>：外部客户端可以通过节点的 IP 地址和 NodePort 指定的端口来访问 Service。例如，如果节点的 IP 地址是 192.168.1.100，NodePort 是 30007，那么外部客户端可以通过 <a href="http://192.168.1.100:30007/">http://192.168.1.100:30007</a> 来访问 Service。</p><p><strong>LoadBalancer</strong>：外部客户端可以通过负载均衡器分配的外部 IP 地址来访问 Service。例如，如果负载均衡器分配的 IP 地址是 52.10.10.10，那么外部客户端可以通过 <a href="http://52.10.10.10/">http://52.10.10.10</a> 来访问 Service。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Kubernetes 中的 Service 提供了一种灵活且强大的方式来管理和访问一组 Pod。通过不同的 Service 类型，我们可以根据需求选择合适的方式来暴露和访问这些服务。无论是通过 NodePort 还是 LoadBalancer，Kubernetes 都能确保我们的应用能够被稳定且高效地访问。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Network Policy Pod之间的网络策略通信</title>
      <link href="/2021/05/17/how-to-set-up-network-policy-to-allow-access-pods-of-namespace-from-another-namespace-in-kubernetes/"/>
      <url>/2021/05/17/how-to-set-up-network-policy-to-allow-access-pods-of-namespace-from-another-namespace-in-kubernetes/</url>
      
        <content type="html"><![CDATA[<h2 id="Network-Policy-介绍"><a href="#Network-Policy-介绍" class="headerlink" title="Network Policy 介绍"></a>Network Policy 介绍</h2><p><code>Kubernetes</code>的<code>Network Policy</code>是用于定义和控制Pod之间通信的一种机制。它可以让您定义网络策略，指定哪些Pod可以与其他Pod通信，以及允许的通信方式。如下图，我们可以在MySQL Pod中创建一个Network Policy，仅允许来自HelloApp Pod的流量访问后端MySQL数据库，拒绝Rogue Pod的访问。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li><p><strong>网络隔离和安全性增强</strong>：<br>  允许实现微服务架构中的网络隔离，确保只有经过授权的Pod可以相互通信。<br>  减少了攻击面，提高了集群的安全性，防止未经授权的访问和信息泄漏。</p></li><li><p><strong>细粒度的网络流量控制</strong>：<br>  可以定义细致的规则，例如允许从一个标签选择器的Pod通信到另一个标签选择器的Pod，或者限制来自特定IP地址范围的流量。<br>  支持的规则包括允许&#x2F;拒绝特定协议（如TCP、UDP）、端口号或IP块之间的通信。</p></li><li><p><strong>遵循最小权限原则</strong>：<br>  可以根据应用程序的需求设置最小必要的访问权限，防止不必要的网络访问和流量。</p></li><li><p><strong>优化网络性能</strong>：<br>  通过减少不必要的网络流量，有助于提高网络性能和资源利用率。</p></li></ol><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li><strong>多租户环境</strong>：在多个团队或项目共享同一个Kubernetes集群时，可以使用Network Policy来确保彼此之间的隔离和安全。</li><li><strong>符合法规要求</strong>：有一些国家的法规要求针对特定的系统需要网络隔离和数据保护。</li><li><strong>微服务架构</strong>：在微服务架构中，不同服务之间的通信需要精细控制，只允许具有特定标签的服务之间进行HTTP通信，同时限制其他通信类型或服务，Network Policy提供了这种能力。</li><li><strong>数据保护</strong>：保护包含敏感信息的Pod，确保只有授权的服务可以访问这些Pod。也可以限制来自特定IP地址或IP地址范围的流量访问集群中的Pod。</li></ul><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="相同命名空间的Pod访问"><a href="#相同命名空间的Pod访问" class="headerlink" title="相同命名空间的Pod访问"></a>相同命名空间的Pod访问</h3><p>我们创建一个新的命名空间<code>my-app-ns</code>和两个Pod来演示Network Policy的使用. 首先创建两个Pod，分别是<code>app1 Pod</code>和<code>app2 Pod</code>。<code>image</code>这里都使用<code>nginx</code>镜像来演示，实际上可以是任何需要通信的容器。本地环境nginx镜像之前已经下载好了，可以直接使用。我们这里重点是Network Policy的创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建my-app-ns命名空间</span></span><br><span class="line">kubectl create namespace my-app-ns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建HelloApp Pod</span></span><br><span class="line">kubectl -n my-app-ns run app1 --image=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MySQL Pod</span></span><br><span class="line">kubectl -n my-app-ns run app2 --image=nginx</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy-app1-app2.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy-app1-app2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>创建Network Policy，允许<code>app1 Pod</code>访问<code>app2 Pod</code>，这里我们不使用命令创建时自动添加的<code>label</code>标签，我们可以为每个Pod创建一个新的标签。查看Pod的标签可以使用<code>kubectl get pod --show-labels</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n my-app-ns --show-labels</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy-pod-show-labels.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy-pod-show-labels.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>如下图，创建Pod时已经添加了标签<code>run=app1</code>和<code>run=app2</code>，我们可以为<code>app1 Pod</code>创建一个新的标签<code>app=app1-access</code>，并为<code>app2 Pod</code>创建一个新的标签<code>app=app2-access</code>。给已存在的Pod添加<code>label</code>标签使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl label pod app1 app=app1-access -n my-app-ns</span><br><span class="line">kubectl label pod app2 app=app2-access -n my-app-ns</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy-label-app1-app2.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy-label-app1-app2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>创建Network Policy，允许<code>app1-access</code>标签的Pod访问<code>app2-access</code>标签的Pod。创建一个名为<code>allow-app1-access-app2.yaml</code>的文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">allow-app1-access-app2</span> <span class="comment"># 网络策略名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">my-app-ns</span> <span class="comment"># 命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">app2-access</span> <span class="comment"># 选择器，匹配app2-access标签的Pod</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="comment"># 允许的入站流量</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">podSelector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">app1-access</span> <span class="comment"># 允许来自app1-access标签的Pod的流量</span></span><br></pre></td></tr></table></figure><p>执行 <code>kubectl apply -f &lt;yaml-file&gt;</code> 命令创建Network Policy。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f allow-app1-access-app2.yaml</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy-create.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy-create.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>上面显示的<code>allow-app1-access-app2.yaml</code>文件定义了一个名为<code>allow-app1-access-app2</code>的网络策略，它允许<code>app1-access</code>标签的Pod访问<code>app2-access</code>标签的Pod的任意端口号。现在我们更新下<code>Network Policy</code>仅允许app1访问app2的80端口，更新yaml文件<code>allow-app1-access-app2.yaml</code>的文件，在<code>ingress</code>下添加<code>port</code>字段，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">allow-app1-access-app2-port80</span> <span class="comment"># 网络策略名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">my-app-ns</span> <span class="comment"># 命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">app2-access</span> <span class="comment"># 选择器，匹配app2-access标签的Pod</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="comment"># 允许的入站流量</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">podSelector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">app1-access</span> <span class="comment"># 允许来自app1-access标签的Pod的流量</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span> <span class="comment"># 允许的端口号</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span> <span class="comment"># 允许的协议</span></span><br></pre></td></tr></table></figure><p>重新执行<code>kubectl apply -f &lt;yaml-file&gt;</code>命令更新Network Policy。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f allow-app1-access-app2.yaml</span><br></pre></td></tr></table></figure><p>使用<code>kubectl describe networkpolicy</code>命令查看Network Policy的详细信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe networkpolicy allow-app1-access-app2 -n my-app-ns</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy-port.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy-port.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>至此，我们就创建了一个在同一个命令空间<code>my-app-ns</code>中，允许<code>app1-access</code>标签的Pod访问<code>app2-access</code>标签的Pod的<code>80</code>端口的Network Policy。</p><h3 id="不同命名空间的Pod访问"><a href="#不同命名空间的Pod访问" class="headerlink" title="不同命名空间的Pod访问"></a>不同命名空间的Pod访问</h3><p>现在我们来演示不同命名空间的Pod访问。我们创建一个新的命名空间<code>my-app-ns2</code>和一个名为<code>app3</code>的<code>Pod</code>， <code>app3</code> Pod和<code>app1</code>，<code>app2</code> Pod在不同的命名空间中，我们需要允许命令空间<code>my-app-ns2</code>中的<code>app3</code> Pod访问命令空间<code>my-app-ns</code>中的任何pod。访问端口号为9000</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建my-app-ns2命名空间</span></span><br><span class="line">kubectl create namespace my-app-ns2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建app3 Pod</span></span><br><span class="line">kubectl -n my-app-ns2 run app3 --image=nginx</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy-app3.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy-app3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>我们为<code>app3</code> Pod创建一个新的标签<code>app=app3-access</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label pod app3 app=app3-access -n my-app-ns2</span><br></pre></td></tr></table></figure><p>创建Network Policy，允许<code>app3-access</code>标签的Pod访问<code>app2-access</code>标签的Pod。创建一个名为<code>allow-ns2-app3-access-ns-apps.yaml</code>的文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">allow-ns2-app3-access-ns-apps</span> <span class="comment"># 网络策略名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">my-app-ns</span> <span class="comment"># 被访问的命名空间</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span> &#123;&#125; <span class="comment"># 选择器，匹配被访问命令空间的所有Pod</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="comment"># 允许的入站流量</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">namespaceSelector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">my-app-ns2</span> <span class="comment"># 允许来自my-app-ns2命名空间的Pod的流量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">podSelector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">app:</span> <span class="string">app3-access</span> <span class="comment"># 允许来自app3-access标签的Pod的流量</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9000</span> <span class="comment"># 允许的端口号</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span> <span class="comment"># 允许的协议</span></span><br></pre></td></tr></table></figure><p>执行 <code>kubectl apply -f &lt;yaml-file&gt;</code> 命令创建Network Policy。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Network Policy</span></span><br><span class="line">kubectl apply -f allow-ns2-app3-access-ns-apps.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Network Policy</span></span><br><span class="line">kubectl describe networkpolicy allow-ns2-app3-access-ns-apps -n my-app-ns</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-network-policy-access-ns-pods.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-network-policy-access-ns-pods.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>上面，我们创建了一个允许<code>my-app-ns2</code>命名空间中的<code>app3-access</code>标签的Pod访问<code>my-app-ns</code>命名空间中所有的Pod，允许的端口号是<code>9000</code>的Network Policy。 至此，我们就创建了一个允许不同命名空间的Pod访问另一个命名空间的Pod的Network Policy。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Kubernetes的Network Policy提供了一种强大的方式来管理和保护您的容器化应用程序之间的网络通信。通过定义网络策略，可以实现微服务架构中的网络隔离，确保只有经过授权的Pod可以相互通信。同时，还可以限制来自特定IP地址范围的流量访问集群中的Pod，保护包含敏感信息的Pod，确保只有授权的服务可以访问这些Pod。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metrics API not available in Kubernetes minikube</title>
      <link href="/2021/05/03/metrics-api-not-available-in-kubernetes-minikube/"/>
      <url>/2021/05/03/metrics-api-not-available-in-kubernetes-minikube/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当完成安装<code>minikube</code>并启动集群后，如果我们直接使用<code>kubectl top</code>命令去查看node的资源信息，会提示<code>metrics-server</code>服务不可用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl top node</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-metrics-api-not-available.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-metrics-api-not-available.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>通常情况下，<code>minikube</code>是不自带<code>metrics-server</code>的，需要手动安装。 </p><h3 id="Step-1：-查看metrics-server的Pod是否存在"><a href="#Step-1：-查看metrics-server的Pod是否存在" class="headerlink" title="Step 1： 查看metrics-server的Pod是否存在"></a>Step 1： 查看metrics-server的Pod是否存在</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system </span><br></pre></td></tr></table></figure><p>执行完这个命令后发现没有<code>metrics-server</code>的Pod存在。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-metrics-server-not-exist.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-metrics-server-not-exist.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h3 id="Step-2：-安装metrics-server"><a href="#Step-2：-安装metrics-server" class="headerlink" title="Step 2： 安装metrics-server"></a>Step 2： 安装metrics-server</h3><p>执行下面命令安装<code>metrics-server</code>组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br></pre></td></tr></table></figure><p>安装完成后，执行<code>kubectl top node</code>命令，仍然提示<code>Metrics API not available</code>。 通过以下命令查看<code>metrics-server</code>的deployment状态:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get deployment metrics-server</span><br></pre></td></tr></table></figure><p><code>READY</code>状态为<code>0/1</code>，表示<code>metrics-server</code>组件未正常运行。 </p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-metrics-server-install.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-metrics-server-install.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>通过以下命令查看<code>metrics-server</code>的log日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system logs deployment/metrics-server</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-metrics-server-logs.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-metrics-server-logs.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>服务器日志中显示<code>metrics-server</code>组件启动失败，原因是<code>failed to verify certificate</code>。这种情况下，我们可以更改<code>metrics-server</code>组件的启动参数，添加<code>--kubelet-insecure-tls</code>参数，以跳过证书验证。将下面的<code>command</code>参数添加到<code>metrics-server</code>的<code>Deployment</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/metrics-server</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP</span></span><br></pre></td></tr></table></figure><p>运行以下命令将<code>metrics-server</code>的component.yaml文件下载下来然后添加上面的参数.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml -o components.yaml</span><br></pre></td></tr></table></figure><p>编辑<code>components.yaml</code>文件，找到<code>metrics-server</code>的<code>Deployment</code>部分，添加上面的参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">metrics-server</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--cert-dir=/tmp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--secure-port=10250</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-use-node-status-port</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--metric-resolution=15s</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.k8s.io/metrics-server/metrics-server:v0.7.1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/metrics-server</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">          <span class="attr">httpGet:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/livez</span></span><br><span class="line">            <span class="attr">port:</span> <span class="string">https</span></span><br><span class="line">            <span class="attr">scheme:</span> <span class="string">HTTPS</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">metrics-server</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">10250</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="string">.................</span></span><br></pre></td></tr></table></figure><p>保存文件，然后运行以下命令安装<code>metrics-server</code>组件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f components.yaml</span><br></pre></td></tr></table></figure><h3 id="Step-3-Stop-minikube"><a href="#Step-3-Stop-minikube" class="headerlink" title="Step 3: Stop minikube"></a>Step 3: Stop minikube</h3><p>安装完<code>metrics-server</code>组件后，需要停止<code>minikube</code>集群。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube stop</span><br></pre></td></tr></table></figure><h3 id="Step-4-Start-minikube"><a href="#Step-4-Start-minikube" class="headerlink" title="Step 4: Start minikube"></a>Step 4: Start minikube</h3><p>启动<code>minikube</code>集群。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start</span><br></pre></td></tr></table></figure><h3 id="Step-5-检查-metrics-server的状态"><a href="#Step-5-检查-metrics-server的状态" class="headerlink" title="Step 5: 检查 metrics-server的状态"></a>Step 5: 检查 metrics-server的状态</h3><p>执行<code>kubectl top node</code>命令，查看node的资源信息。可以看到这次就运行正常了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl top node</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-metrics-server-available.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-metrics-server-available.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>minikube</code>默认情况下是不自带<code>metrics-server</code>组件的，需要手动安装。安装完成后，需要停止<code>minikube</code>集群，然后启动集群，才能正常使用<code>kubectl top</code>命令查看node的资源信息。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Deployment 的伸缩性</title>
      <link href="/2021/04/12/kubernetes-scale-deployment/"/>
      <url>/2021/04/12/kubernetes-scale-deployment/</url>
      
        <content type="html"><![CDATA[<p><code>Kubernetes</code> 是一个强大的容器编排平台，广泛应用于各种规模的<code>云原生应用</code>。在 Kubernetes 中，<code>Deployment</code> 是一种用于管理应用实例的高级资源对象。通过调整 Deployment 的副本数量，可以轻松实现应用的伸缩性，以满足不同的负载需求。本文将介绍如何在 Kubernetes 中使用 kubectl scale 命令来伸缩 Deployment。</p><h2 id="什么是-Deployment？"><a href="#什么是-Deployment？" class="headerlink" title="什么是 Deployment？"></a>什么是 Deployment？</h2><p>在 Kubernetes 中，Deployment 是一种控制器，用于管理 Pod 的生命周期。它定义了应用的期望状态，并确保集群中的实际状态与期望状态保持一致。Deployment 的主要功能包括：</p><ul><li><strong>滚动更新</strong>：逐步替换旧版本的 Pod，以实现无缝的应用更新。</li><li><strong>回滚</strong>：在更新过程中出现问题时，可以快速回滚到之前的版本。</li><li><strong>副本管理</strong>：自动调整 Pod 的副本数量，以满足应用的负载需求。</li></ul><h2 id="如何伸缩-Deployment？"><a href="#如何伸缩-Deployment？" class="headerlink" title="如何伸缩 Deployment？"></a>如何伸缩 Deployment？</h2><p>伸缩 Deployment 的主要目的是根据应用的负载情况调整 Pod 的副本数量。在 Kubernetes 中，可以使用 <code>kubectl scale</code> 命令来实现这一目标。</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment &lt;deployment-name&gt; --replicas=&lt;number-of-replicas&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;deployment-name&gt;</code>：Deployment 名称。</li><li><code>&lt;number-of-replicas&gt;</code>：副本数量。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>首先我们先创建一个deployment，用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment my-deployment --image=kicbase/echo-server:1.0 </span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-create-deployment.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-create-deployment.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>从现在的截图中，看到的是目前只有1个副本。我们可以通过以下命令将其伸缩到 3 个副本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment my-deployment --replicas=3</span><br></pre></td></tr></table></figure><p>执行上述命令后，Kubernetes 将自动创建 2 个新的 Pod，使总副本数量达到 3 个。如下图</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-scale-deployment.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-scale-deployment.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>可以看到，Kubernetes 已经创建了 2 个新的 Pod，并将它们加入到 Deployment 的管理之下。 另外，我们也可以直接编辑 Deployment 的配置文件，修改其 <code>spec.replicas</code> 字段，比如我现在可以将 <code>my-deployment</code> 的副本数量修改为 5：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit deployment my-deployment</span><br></pre></td></tr></table></figure><p>通过上面个命令，我们可以直接编辑 <code>my-deployment</code> 的配置文件，修改其 <code>spec.replicas</code> 字段为 5。如下图</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-edit-deployment.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-edit-deployment.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>保存并退出编辑器，Kubernetes 就会根据新的副本数量，创建新的 Pod，并将它们加入到 Deployment 的管理之下。如下图</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-edit-deployment-2.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-edit-deployment-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="自动伸缩"><a href="#自动伸缩" class="headerlink" title="自动伸缩"></a>自动伸缩</h2><p>除了手动伸缩外，Kubernetes 还支持<code>自动伸缩（Horizontal Pod Autoscaler，HPA）</code>。<code>HPA</code> 可以根据 <code>CPU</code> 使用率等指标自动调整 <code>Deployment</code> 的副本数量。</p><p>以下是一个创建 HPA 的示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-deployment-hpa</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-deployment</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><p>将上述 YAML 文件保存为 hpa.yaml，然后使用 <code>kubectl apply</code> 命令创建 HPA：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f hpa.yaml</span><br></pre></td></tr></table></figure><p>创建 HPA 后，Kubernetes 将根据 CPU 使用率自动调整 my-deployoment Deployment 的副本数量，使其在 2 到 5 个副本之间动态变化。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-hpa-deployment.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-hpa-deployment.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 <code>kubectl scale</code> 命令和 <code>Horizontal Pod Autoscaler</code>，Kubernetes 提供了灵活且强大的伸缩机制，使应用能够根据负载情况自动调整资源分配。这不仅提高了应用的可用性和性能，还优化了资源利用率。无论是<code>手动伸缩</code>还是<code>自动伸缩</code>，Kubernetes 都能满足不同场景下的需求，为云原生应用的部署和管理提供了极大的便利。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes权限管理之ServiceAccount</title>
      <link href="/2021/03/22/kubernetes-cluster-role-for-service-account/"/>
      <url>/2021/03/22/kubernetes-cluster-role-for-service-account/</url>
      
        <content type="html"><![CDATA[<p>在<code>Kubernetes</code>中，<code>ServiceAccount</code> 是一种用于为<code>Pod</code>中的进程提供身份标识的对象。它的主要作用是允许这些进程与<code>Kubernetes API</code>进行交互，从而实现各种<code>自动化任务</code>。</p><h2 id="ServiceAccount"><a href="#ServiceAccount" class="headerlink" title="ServiceAccount"></a>ServiceAccount</h2><p>ServiceAccount的主要作用包括：</p><ul><li><p><strong>身份验证</strong>：当Pod中的进程需要与Kubernetes API服务器通信时，ServiceAccount提供了身份验证机制。每个ServiceAccount都有一个关联的Secret（包含一个Token），这个Token可以用来验证Pod的身份。</p></li><li><p><strong>授权</strong>：ServiceAccount可以与<code>Role</code>或<code>ClusterRole</code>绑定，通过RoleBinding或ClusterRoleBinding来定义权限。这样，Pod中的进程就可以根据其ServiceAccount的权限来执行特定的操作。</p></li><li><p><strong>自动化任务</strong>：通过ServiceAccount，Pod可以自动执行各种任务，例如获取集群状态、管理资源、部署应用等, 也可将其用于CI&#x2F;CD流程。</p></li></ul><p>在本文中，我们将介绍如何创建和使用<code>Kubernetes</code>中的<code>ServiceAccount</code>。</p><p>以下是一个创建ServiceAccount的yaml文件定义的示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-serviceaccount</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p>创建这个ServiceAccount后，你可以将其分配给Pod，以便Pod中的进程可以使用这个ServiceAccount来与Kubernetes API进行交互。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceAccountName:</span> <span class="string">my-serviceaccount</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>在上面这个例子中，example-pod 使用 example-serviceaccount 来进行身份验证和授权，进而可以与Kubernetes API服务器进行交互。通过这种方式，Kubernetes的ServiceAccount为Pod中的进程提供了一种安全且灵活的方式来与集群进行交互。</p><h2 id="Cluster-Role"><a href="#Cluster-Role" class="headerlink" title="Cluster Role"></a>Cluster Role</h2><p>在<code>Kubernetes</code>中，<code>ClusterRole（集群角色）</code>是一种资源，用于定义集群范围内的权限。它允许管理员定义哪些操作可以在整个集群中执行，例如管理节点、获取所有命名空间的资源等。</p><p><code>ClusterRole</code>可以通过Kubernetes的YAML定义文件来创建的。也可以通过命令来创建，以下是一个示例ClusterRole的定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-clusterrole</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;Pods&quot;</span>, <span class="string">&quot;Deployments&quot;</span>, <span class="string">&quot;Services&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br></pre></td></tr></table></figure><p>这个示例ClusterRole定义了一个名为 my-clusterrole 的角色，允许对集群中的”Pods”, “Deployments”和”Services”资源执行get、list、watch、create、update和delete操作。</p><p><code>ClusterRole</code>可以与<code>ServiceAccount</code>绑定，以便授予<code>ServiceAccount</code>特定的权限。<code>ClusterRoleBinding</code>定义了<code>ClusterRole</code>与<code>ServiceAccount</code>之间的绑定关系。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-clusterrolebinding</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-serviceaccount</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-clusterrole</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><p>这个示例ClusterRoleBinding将名为 my-serviceaccount 的ServiceAccount与名为 my-clusterrole 的ClusterRole绑定。通过这种方式，我们可以为<code>ServiceAccount</code>分配特定的<code>ClusterRole</code>，以便授予其特定的权限。这样，<code>ServiceAccount</code>就可以在整个集群中执行各种自动化任务，而无需为每个Pod都创建特定的权限。</p><h2 id="kubectl命令行创建示例"><a href="#kubectl命令行创建示例" class="headerlink" title="kubectl命令行创建示例"></a>kubectl命令行创建示例</h2><p>以下是使用命令行创建<code>ServiceAccount</code>、<code>ClusterRole</code>和<code>ClusterRoleBinding</code>的示例：</p><ol><li><p>首先，我们先创建一个名为my-namespace的namespace（命名空间）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace my-namespace</span><br></pre></td></tr></table></figure></li><li><p>接着我们在这个命名空间中创建一个名为my-serviceaccount的ServiceAccount：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n my-namespace create serviceaccount my-serviceaccount</span><br></pre></td></tr></table></figure></li><li><p>然后再创建一个名为my-clusterrole的ClusterRole：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrole my-clusterrole --verb=get,list,watch,create,update,delete --resource=pods,deployments,services</span><br></pre></td></tr></table></figure></li><li><p>最后创建一个名为my-clusterrolebinding的ClusterRoleBinding，将命名空间my-namespace中的my-serviceaccount与my-clusterrole绑定:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n my-namespace create clusterrolebinding my-clusterrolebinding --clusterrole=my-clusterrole --serviceaccount=my-namespace:my-serviceaccount</span><br></pre></td></tr></table></figure></li></ol><p>以下是执行命令的截图：</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-clusterrolebinding.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-clusterrolebinding.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><h2 id="kubectl命令行查看示例"><a href="#kubectl命令行查看示例" class="headerlink" title="kubectl命令行查看示例"></a>kubectl命令行查看示例</h2><ol><li><p>我们可以查看namespace的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespace my-namespace</span><br></pre></td></tr></table></figure><p>输出应该如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME           STATUS   AGE</span><br><span class="line">my-namespace   Active   1m</span><br></pre></td></tr></table></figure></li><li><p>我们可以查看一下这个<code>ServiceAccount</code>的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n my-namespace get serviceaccount my-serviceaccount</span><br></pre></td></tr></table></figure><p>输出应该如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                SECRETS   AGE</span><br><span class="line">my-serviceaccount   0         1m</span><br></pre></td></tr></table></figure></li><li><p>我们可以查看一下这个<code>ClusterRole</code>的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get clusterrole my-clusterrole</span><br></pre></td></tr></table></figure><p>输出应该如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME            AGE</span><br><span class="line">my-clusterrole   1m</span><br></pre></td></tr></table></figure></li><li><p>我们可以查看一下这个<code>ClusterRoleBinding</code>的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n my-namespace get clusterrolebinding my-clusterrolebinding</span><br></pre></td></tr></table></figure><p>输出应该如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                   ROLE                          AGE</span><br><span class="line">my-clusterrolebinding   ClusterRole/my-clusterrole   1m</span><br></pre></td></tr></table></figure></li></ol><p>下面就是整个过程的截图：</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-describe-clusterrolebinding.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-describe-clusterrolebinding.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>这样，我们就创建了一个名为my-serviceaccount的<code>ServiceAccount</code>，它与名为my-clusterrole的<code>ClusterRole</code>绑定，并授予了它在my-namespace命名空间中执行各种自动化任务的权限。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes之RBAC授权模型</title>
      <link href="/2021/03/02/kubernetes-rbac/"/>
      <url>/2021/03/02/kubernetes-rbac/</url>
      
        <content type="html"><![CDATA[<p><code>Kubernetes</code>中的<code>RBAC（Role-Based Access Control）</code>是一种强大的授权模型，用于管理对集群资源的访问权限。RBAC允许集群管理员定义谁可以执行哪些操作（例如创建、查看、修改或删除资源），并在资源级别进行精确的控制。以下是对Kubernetes RBAC授权模型的理解：</p><h2 id="RBAC-核心概念"><a href="#RBAC-核心概念" class="headerlink" title="RBAC 核心概念"></a>RBAC 核心概念</h2><p>在Kubernetes中，RBAC基于四个核心对象：<code>Role</code>、<code>ClusterRole</code>、<code>RoleBinding</code>和<code>ClusterRoleBinding</code>。下面将对这些对象进行详细介绍。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-rbac.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-rbac.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Kubernetes RBAC" style="width:600px;"/></div><span class="image-caption">Kubernetes RBAC</span></div><h3 id="Role和ClusterRole："><a href="#Role和ClusterRole：" class="headerlink" title="Role和ClusterRole："></a>Role和ClusterRole：</h3><ul><li><strong>Role</strong>：用于定义在<em>命名空间（Namespace）</em>级别的权限。它包含一组规则，规定了用户、用户组或服务账号在特定命名空间内可以访问的资源类型及其操作权限。</li><li><strong>ClusterRole</strong>：类似于Role，但是作用于整个<em>集群（Cluster）</em>。ClusterRole定义了集群范围内的权限，不受命名空间限制。</li></ul><h3 id="RoleBinding和ClusterRoleBinding："><a href="#RoleBinding和ClusterRoleBinding：" class="headerlink" title="RoleBinding和ClusterRoleBinding："></a>RoleBinding和ClusterRoleBinding：</h3><ul><li><strong>RoleBinding</strong>：用于将特定的Role绑定到用户、用户组或服务账号，从而赋予它们定义的权限。RoleBinding在命名空间内生效。</li><li><strong>ClusterRoleBinding</strong>：类似于RoleBinding，但是作用于整个集群，用于将ClusterRole绑定到用户、用户组或服务账号。</li></ul><h2 id="RBAC-工作流程"><a href="#RBAC-工作流程" class="headerlink" title="RBAC 工作流程"></a>RBAC 工作流程</h2><p>Kubernetes中的RBAC工作流程通常包括以下步骤：</p><ol><li><p>创建角色和集群角色：<br>首先，集群管理员需要定义所需的Role和ClusterRole。这些角色会列出允许的<code>API操作</code>（如get、list、watch、create、update、delete等）和<code>资源类型</code>（如pods、services、deployments等）。</p></li><li><p>绑定角色：<br>接下来，管理员需要创建RoleBinding或ClusterRoleBinding来将这些角色与实际的用户、用户组或服务账号进行绑定。绑定可以基于名称空间（对于RoleBinding）或整个集群（对于ClusterRoleBinding）。</p></li><li><p>验证权限：<br>当用户或服务账号尝试执行操作时，Kubernetes将根据其绑定的角色来验证其权限。如果权限不足，操作将被拒绝。</p></li></ol><h2 id="RBAC-的优势和最佳实践"><a href="#RBAC-的优势和最佳实践" class="headerlink" title="RBAC 的优势和最佳实践"></a>RBAC 的优势和最佳实践</h2><p>RBAC模型在Kubernetes中具有几个显著的优势和最佳实践：</p><ul><li><strong>最小权限原则</strong>：应该为每个用户、服务账号或应用程序分配最小必需的权限，以减少潜在的安全风险。</li><li><strong>命名空间隔离</strong>：通过使用Role和RoleBinding，可以在不同的命名空间内对相同的用户或服务账号分配不同的权限，实现资源的细粒度控制和隔离。</li><li><strong>集群范围控制</strong>：对于需要在整个集群内共享的权限，可以使用ClusterRole和ClusterRoleBinding，确保一致的授权管理。</li><li><strong>审计和监控</strong>：RBAC可以帮助管理员跟踪和审计用户及服务账号的<code>操作历史</code>，提高安全性和合规性。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Kubernetes中的RBAC是一个灵活且强大的授权模型，它通过Role、ClusterRole、RoleBinding和ClusterRoleBinding这四个核心对象，为管理员提供了精确和可扩展的权限管理功能。合理配置RBAC可以帮助保护集群免受未经授权的访问和潜在的安全威胁。因此，理解和正确配置RBAC是使用Kubernetes管理安全性的重要组成部分。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Kubernetes 中的常见资源类型</title>
      <link href="/2021/02/15/deep-understanding-the-resource-type-of-the-kubernetes/"/>
      <url>/2021/02/15/deep-understanding-the-resource-type-of-the-kubernetes/</url>
      
        <content type="html"><![CDATA[<p>在 <code>Kubernetes</code> 中，资源类型被称为 <code>kind</code>，每种 kind 对应着 Kubernetes API 中的一个特定对象。了解和正确使用这些资源类型对于有效管理和部署应用程序至关重要。本文将详细介绍几种常见的 Kubernetes 资源类型，包括它们的作用、示例和适用场景。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-kind.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-kind.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:800px;"/></div></div><h2 id="1-Pod"><a href="#1-Pod" class="headerlink" title="1. Pod"></a>1. Pod</h2><p><strong>作用：</strong><br><code>Pod</code> 是 Kubernetes 中<code>最基本的部署单元</code>，可以包含一个或多个容器。它们共享存储、网络和一个生命周期。<code>Pod</code> 是临时性的实例，可以随着节点的重新调度而消失。</p><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong></p><ul><li>单个容器的应用程序部署。</li><li>多个紧密耦合的容器需要共享资源和网络栈的情况。</li></ul><h2 id="2-Service"><a href="#2-Service" class="headerlink" title="2. Service"></a>2. Service</h2><p><strong>作用：</strong><br><code>Service</code> 定义了一组逻辑上相同的 Pod 的访问方式。它为这些 Pod 提供了稳定的网络地址和一个恒定的DNS名称，以及负载均衡访问这些 Pod 的能力。</p><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong></p><ul><li>在集群内部或集群外部暴露应用程序。</li><li>提供负载均衡和服务发现能力。</li><li>实现应用程序的高可用和弹性伸缩。</li></ul><h2 id="3-Deployment"><a href="#3-Deployment" class="headerlink" title="3. Deployment"></a>3. Deployment</h2><p><strong>作用：</strong><br><code>Deployment</code> 是 Kubernetes 中用来管理一个可扩展的 Pod 集合，它们共享配置。Deployment 控制 Pod 的创建、更新和删除策略，支持<code>滚动更新</code>和<code>版本回退</code>。</p><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong></p><ul><li>部署和管理多个相同的 Pod。</li><li>自动扩容和缩容。</li><li>管理应用程序的部署和扩展。</li><li>实现应用程序的无缝更新和回滚。</li></ul><h2 id="4-Namespace"><a href="#4-Namespace" class="headerlink" title="4. Namespace"></a>4. Namespace</h2><p><strong>作用：</strong><br><code>Namespace</code> 是 Kubernetes 中的一个逻辑隔离的概念，它可以用来将资源划分到不同的项目、团队或环境中。<code>Namespace</code> 提供了一种多租户的方式来将集群中的资源划分为多个虚拟分组。每个 Namespace 提供了对资源的独立隔离和命名范围。</p><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">development</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong></p><ul><li>实现资源的逻辑分组，使得不同团队或项目可以共享同一个集群。</li><li>实现资源的隔离, 将不同环境（如开发、测试、生产）的资源隔离开来。</li><li>实现多团队或多项目在同一个集群内部的资源管理和隔离。</li></ul><h2 id="5-ConfigMap"><a href="#5-ConfigMap" class="headerlink" title="5. ConfigMap"></a>5. ConfigMap</h2><p><strong>作用：</strong><br><code>ConfigMap</code> 用来将配置数据与应用程序分离。它可以存储文本数据，可以通过 <code>Volume</code> 或<code>环境变量</code>注入到 Pod 中。</p><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">nginx.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    server &#123;</span></span><br><span class="line"><span class="string">      listen 80;</span></span><br><span class="line"><span class="string">      server_name localhost;</span></span><br><span class="line"><span class="string">      location / &#123;</span></span><br><span class="line"><span class="string">        root /usr/share/nginx/html;</span></span><br><span class="line"><span class="string">        index index.html;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong></p><ul><li>存储应用程序的配置信息, 将应用程序的配置信息分离出来，支持动态配置。</li><li>实现应用程序的配置管理, 提供统一的配置中心, 降低配置管理的复杂度</li><li>与应用程序代码分离配置，使配置更易于管理和更新。</li></ul><h2 id="6-Secret"><a href="#6-Secret" class="headerlink" title="6. Secret"></a>6. Secret</h2><p><strong>作用：</strong><br><code>Secret</code> 用来存储敏感数据，如密码、API 密钥等。它以加密方式存储，并且可以以安全的方式被 Pod 使用. <code>Secret</code>可以被用来保存 Docker 镜像、私有镜像仓库的密码、TLS 证书等。</p><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong></p><ul><li>存储和管理敏感数据，如数据库密码、TLS 证书等。</li><li>将敏感数据以安全的方式注入到 Pod 中。</li></ul><h2 id="7-PersistentVolume"><a href="#7-PersistentVolume" class="headerlink" title="7. PersistentVolume"></a>7. PersistentVolume</h2><p><strong>作用：</strong><br><code>PersistentVolume (PV)</code> 是集群中由管理员静态配置的存储资源, 它可以用来持久化存储应用程序的数据, 供 Pod 使用。</p><p><strong>示例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">slow</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong></p><ul><li>持久化存储应用程序的数据，如数据库文件。</li><li>保证数据持久性和数据的跨 Pod 使用。</li></ul><h2 id="8-PersistentVolumeClaim"><a href="#8-PersistentVolumeClaim" class="headerlink" title="8. PersistentVolumeClaim"></a>8. PersistentVolumeClaim</h2><p><strong>作用：</strong><br><code>PersistentVolumeClaim (PVC)</code> 是 <code>Pod</code> 对 <code>PersistentVolume</code> 的请求, 用于获取持久化存储资源。它可以用来动态申请 PV 资源, 供 Pod 使用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过理解和有效使用这些 <code>Kubernetes</code> 资源类型，可以更好地管理和部署容器化应用程序。每种资源类型都有其独特的作用和使用场景，根据实际需求和部署策略选择合适的资源类型是非常重要的。Kubernetes 的灵活性和强大的管理能力使得它成为现代云原生应用部署和管理的首选平台之一。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes - 现代容器编排平台</title>
      <link href="/2021/01/03/kubernetes-a-modern-container-orchestration-platform/"/>
      <url>/2021/01/03/kubernetes-a-modern-container-orchestration-platform/</url>
      
        <content type="html"><![CDATA[<p><code>Kubernetes（简称为K8s）</code>是一个开源的<code>容器编排平台</code>，它以自动化容器部署、扩展和操作为目标，是现代<code>云原生</code>应用的重要基石。我们将探讨下Kubernetes的起源、整体架构、核心组件及其工作原理，全面理解这一强大工具的作用与运作方式。</p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>Kubernetes项目最初由<code>Google</code>在2014年发布，并且迅速开源化。其灵感来自于Google内部的Borg系统，Borg系统用于管理Google的大规模应用程序容器化，实现了高效的资源管理和任务调度。Kubernetes的目标是提供一个开放、灵活和可移植的容器编排解决方案，使得开发者能够更轻松地部署、扩展和管理容器化应用。</p><h2 id="Kubernetes的整体架构"><a href="#Kubernetes的整体架构" class="headerlink" title="Kubernetes的整体架构"></a>Kubernetes的整体架构</h2><p>Kubernetes的架构设计非常模块化和分布式，核心设计理念包括可扩展性、自动化、声明式配置和自愈能力。下图为Kubernetes的架构图：</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/k8s/k8s-architecture.png" class="lazyload placeholder" data-srcset="/assets/images/k8s/k8s-architecture.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="High Level Architecture of Kubernetes" style="width:800px;"/></div><span class="image-caption">High Level Architecture of Kubernetes</span></div><p>Kubernetes的主要组成部分，主要有<code>控制平面（Control Plane）</code>也就是Master节点和节点（Node）两大部分。</p><h3 id="Master节点"><a href="#Master节点" class="headerlink" title="Master节点"></a>Master节点</h3><ul><li><strong>kube-apiserver</strong>: Kubernetes的API服务器，作为所有操作的入口，负责接收和处理来自用户或其他组件的API请求。</li><li><strong>kube-controller-manager</strong>: 各种控制器的集合，负责管理集群状态、节点控制和工作负载的调度。</li><li><strong>kube-scheduler</strong>: 负责将新创建的Pod调度到集群内的节点上，根据资源需求和约束条件选择合适的节点。</li><li><strong>etcd</strong>: 分布式键值存储系统，用于保存集群的状态和配置信息，作为整个Kubernetes集群的后端数据库。</li></ul><h3 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h3><ul><li><strong>kubelet</strong>: 运行在每个节点上的代理服务，负责与Master节点通信，并管理节点上的Pod生命周期。</li><li><strong>kube-proxy</strong>: 负责为Service提供网络代理和负载均衡服务，实现集群内部服务的访问。</li></ul><p>除了上面的一些核心组件外，还有<code>kubectl</code>命令行工具、网络插件、容器运行时（如Docker、Containerd）等。<br>-<strong>kubectl</strong>: Kubernetes命令行工具，用于与集群进行交互。<br>-<strong>网络插件</strong>: 负责为Pod提供网络连接和服务发现，例如Flannel、Calico等。<br>-<strong>容器运行时</strong>: 负责运行和管理容器，例如Docker、Containerd等。</p><h2 id="Kubernetes的工作原理"><a href="#Kubernetes的工作原理" class="headerlink" title="Kubernetes的工作原理"></a>Kubernetes的工作原理</h2><p>Kubernetes通过一系列的控制循环（control loops）和声明式API来管理和调度容器化应用。其工作原理可以简述为以下几个步骤：</p><ol><li><p><strong>定义资源对象</strong>: 用户使用Kubernetes提供的API定义应用程序的所需状态，例如<code>Pod</code>、<code>Service</code>、<code>Deployment</code>等。</p></li><li><p><strong>API服务器处理请求</strong>: 所有的管理操作通过<code>kube-apiserver</code>处理，<code>kube-apiserver</code>接收到API请求后将操作存储到etcd中，并更新集群状态。</p></li><li><p><strong>控制器管理器监控状态</strong>: <code>kube-controller-manager</code>中的各种控制器（如ReplicaSet控制器、Deployment控制器）定期检查当前集群状态，确保实际状态与期望状态一致。</p></li><li><p><strong>调度器选择节点</strong>: 当有新的Pod需要调度时，<code>kube-scheduler</code>根据调度算法选择合适的节点，并将Pod分配到该节点上。</p></li><li><p><strong>节点上的kubelet管理Pod</strong>: 每个节点上的<code>kubelet</code>根据Master节点下发的<code>Pod</code>清单，通过容器运行时（如Docker、Containerd）运行和监控Pod中的容器。</p></li><li><p><strong>网络代理负责服务访问</strong>: <code>kube-proxy</code>在每个节点上维护着<code>Service</code>和<code>Pod</code> IP的映射关系，为Service提供集群内部负载均衡和访问。</p></li></ol><p>通过这种方式，Kubernetes提供了高度自动化的容器编排能力，使得开发者可以专注于应用程序的开发和业务逻辑，而无需关心底层基础设施的管理和维护。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们可以通过一个具体的例子来演示如何在Kubernetes集群上部署两个nginx容器，并且使其可以从外部访问。</p><h3 id="1-创建nginx-Deployment"><a href="#1-创建nginx-Deployment" class="headerlink" title="1. 创建nginx Deployment"></a>1. 创建nginx Deployment</h3><p>首先，我们需要定义一个Deployment资源，用来描述nginx容器的部署和运行规则。我们指定了一个Pod模板，其中包含一个nginx容器, 并设置副本数为2，表示我们希望运行两个nginx实例。 该容器使用nginx:latest镜像，并在容器内部打开了80端口用于HTTP服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span>  <span class="comment"># 指定副本数为2个</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span>  <span class="comment"># 选择带有标签&quot;app: nginx&quot;的Pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span>  <span class="comment"># 给Pod打上标签&quot;app: nginx&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:latest</span>  <span class="comment"># 使用nginx镜像</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span>  <span class="comment"># 容器内部监听端口80</span></span><br></pre></td></tr></table></figure><h3 id="2-暴露nginx服务"><a href="#2-暴露nginx服务" class="headerlink" title="2. 暴露nginx服务"></a>2. 暴露nginx服务</h3><p>接下来，我们需要创建一个Service资源来公开nginx容器，使其可以从集群外部访问。我们选择标签为”app: nginx”的Pod来提供服务。通过设置type: LoadBalancer，Kubernetes将根据云提供商的支持自动创建一个外部负载均衡器，并分配一个外部IP地址或DNS名来访问nginx服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span>  <span class="comment"># 匹配标签为&quot;app: nginx&quot;的Pod</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span>  <span class="comment"># Service端口，集群内部访问端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span>  <span class="comment"># Pod中nginx容器的端口</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span>  <span class="comment"># 指定Service类型为LoadBalancer，用于外部暴露</span></span><br></pre></td></tr></table></figure><h3 id="3-Kubernetes工作流程概述"><a href="#3-Kubernetes工作流程概述" class="headerlink" title="3. Kubernetes工作流程概述"></a>3. Kubernetes工作流程概述</h3><p>在部署nginx容器并暴露外部访问的过程中，Kubernetes的各个组件扮演了不同的角色：</p><ul><li>API服务器 (kube-apiserver)：接收到Deployment和Service的定义请求，并将它们存储到etcd中。</li><li>调度器 (kube-scheduler)：根据Pod的调度需求，选择合适的节点来运行nginx Pod。</li><li>控制器管理器 (kube-controller-manager)：监控Deployment资源，确保运行着指定数量的nginx Pod副本。</li><li>etcd：作为后端数据库存储整个集群的状态和配置信息。</li><li>kubelet：在每个节点上运行并监控nginx Pod。</li><li>kube-proxy：负责在集群内部实现Service的负载均衡和访问规则。</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>Kubernetes作为现代容器编排平台的核心技术，通过其模块化的架构和强大的自动化能力，为云原生应用的部署和运维带来了革命性的变化。深入理解Kubernetes的起源、架构和工作原理，非常有助于我们开发和运维人员更好地利用这一技术，构建可靠、可扩展和高效的云原生应用。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud Native </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析中的中位数绝对偏差（MAD）</title>
      <link href="/2020/11/03/data-analysis-mad/"/>
      <url>/2020/11/03/data-analysis-mad/</url>
      
        <content type="html"><![CDATA[<p><strong>Median Absolute Deviation (MAD)<strong>，即</strong>中位数绝对偏差</strong>，是一种用于衡量数据分散程度或数据集中的异常值的方法。它是一种稳健的统计量，尤其在面对噪声和异常值时，比标准差等方法更加稳健，能更好地反映数据的整体变动。</p><h2 id="MAD的计算步骤"><a href="#MAD的计算步骤" class="headerlink" title="MAD的计算步骤"></a>MAD的计算步骤</h2><ol><li><p><strong>计算数据的中位数（Median）</strong>：</p><ul><li>首先，计算数据集的中位数（即所有数据排序后中间的值）。</li><li>对于偶数个数据，中位数通常取中间两个数的平均值。</li></ul></li><li><p><strong>计算每个数据点的绝对偏差（Absolute Deviation）</strong>：</p><ul><li>对数据集中的每个数据点，计算它与中位数的差的绝对值：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="25.48ex" height="2.261ex" role="img" focusable="false" viewBox="0 -750 11262 999.5" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-4-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-4-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-4-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-4-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-4-TEX-N-4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"></path><path id="MJX-4-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-4-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-4-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-4-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-4-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绝</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">对</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">偏</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">差</text></g><g data-mml-node="mo" transform="translate(4277.8,0)"><use data-c="3D" xlink:href="#MJX-4-TEX-N-3D"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5333.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-4-TEX-N-7C"></use></g></g><g data-mml-node="msub" transform="translate(5611.6,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-4-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(6732.7,0)"><use data-c="2212" xlink:href="#MJX-4-TEX-N-2212"></use></g><g data-mml-node="mtext" transform="translate(7733,0)"><use data-c="4D" xlink:href="#MJX-4-TEX-N-4D"></use><use data-c="65" xlink:href="#MJX-4-TEX-N-65" transform="translate(917,0)"></use><use data-c="64" xlink:href="#MJX-4-TEX-N-64" transform="translate(1361,0)"></use><use data-c="69" xlink:href="#MJX-4-TEX-N-69" transform="translate(1917,0)"></use><use data-c="61" xlink:href="#MJX-4-TEX-N-61" transform="translate(2195,0)"></use><use data-c="6E" xlink:href="#MJX-4-TEX-N-6E" transform="translate(2695,0)"></use></g><g data-mml-node="mo" transform="translate(10984,0) translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-4-TEX-N-7C"></use></g></g></g></svg></mjx-container>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-3-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-3-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-3-TEX-I-1D456"></use></g></g></g></g></svg></mjx-container>是数据集中的每个数据点。</li></ul></li><li><p><strong>计算这些绝对偏差的中位数</strong>：</p><ul><li>然后，对这些绝对偏差值进行排序，找到它们的中位数，这个中位数即为<strong>中位数绝对偏差（MAD）</strong>。</li></ul><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.045ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13722 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"></path><path id="MJX-2-TEX-N-41" d="M255 0Q240 3 140 3Q48 3 39 0H32V46H47Q119 49 139 88Q140 91 192 245T295 553T348 708Q351 716 366 716H376Q396 715 400 709Q402 707 508 390L617 67Q624 54 636 51T687 46H717V0H708Q699 3 581 3Q458 3 437 0H427V46H440Q510 46 510 64Q510 66 486 138L462 209H229L209 150Q189 91 189 85Q189 72 209 59T259 46H264V0H255ZM447 255L345 557L244 256Q244 255 345 255H447Z"></path><path id="MJX-2-TEX-N-44" d="M130 622Q123 629 119 631T103 634T60 637H27V683H228Q399 682 419 682T461 676Q504 667 546 641T626 573T685 470T708 336Q708 210 634 116T442 3Q429 1 228 0H27V46H60Q102 47 111 49T130 61V622ZM593 338Q593 439 571 501T493 602Q439 637 355 637H322H294Q238 637 234 628Q231 624 231 344Q231 62 232 59Q233 49 248 48T339 46H350Q456 46 515 95Q561 133 577 191T593 338Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-2-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-2-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><use data-c="4D" xlink:href="#MJX-2-TEX-N-4D"></use><use data-c="41" xlink:href="#MJX-2-TEX-N-41" transform="translate(917,0)"></use><use data-c="44" xlink:href="#MJX-2-TEX-N-44" transform="translate(1667,0)"></use></g><g data-mml-node="mo" transform="translate(2708.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mtext" transform="translate(3764.6,0)"><use data-c="4D" xlink:href="#MJX-2-TEX-N-4D"></use><use data-c="65" xlink:href="#MJX-2-TEX-N-65" transform="translate(917,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1361,0)"></use><use data-c="69" xlink:href="#MJX-2-TEX-N-69" transform="translate(1917,0)"></use><use data-c="61" xlink:href="#MJX-2-TEX-N-61" transform="translate(2195,0)"></use><use data-c="6E" xlink:href="#MJX-2-TEX-N-6E" transform="translate(2695,0)"></use></g><g data-mml-node="mo" transform="translate(7015.6,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7404.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-2-TEX-N-7C"></use></g></g><g data-mml-node="msub" transform="translate(7682.6,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(8803.7,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mtext" transform="translate(9804,0)"><use data-c="4D" xlink:href="#MJX-2-TEX-N-4D"></use><use data-c="65" xlink:href="#MJX-2-TEX-N-65" transform="translate(917,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1361,0)"></use><use data-c="69" xlink:href="#MJX-2-TEX-N-69" transform="translate(1917,0)"></use><use data-c="61" xlink:href="#MJX-2-TEX-N-61" transform="translate(2195,0)"></use><use data-c="6E" xlink:href="#MJX-2-TEX-N-6E" transform="translate(2695,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13055,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-2-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(13333,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g></g></g></svg></mjx-container></li></ol><h2 id="为什么使用MAD？"><a href="#为什么使用MAD？" class="headerlink" title="为什么使用MAD？"></a>为什么使用MAD？</h2><ol><li><p><strong>稳健性</strong>：MAD是一个<strong>稳健统计量</strong>，意味着它对异常值（outliers）不敏感。在数据中存在异常值时，标准差和方差等统计量可能会受到极大影响，而MAD相对更加稳定。</p></li><li><p><strong>对异常值的敏感度低</strong>：如果数据中有极端值，标准差会被这些异常值拉大，从而影响分散度的度量；而MAD通过使用中位数来减少了这种影响，使其更加适用于不对称或有偏分布的数据。</p></li><li><p><strong>适用于非正态分布</strong>：标准差的假设是数据分布近似正态，而MAD不依赖于数据分布，因此它能够更好地处理非正态或偏态数据。</p></li></ol><h2 id="Python示例"><a href="#Python示例" class="headerlink" title="Python示例"></a>Python示例</h2><p>还是以学生的成绩来举例，假设有一组数据集如下，我们要计算MAD的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设有一组数据集</span></span><br><span class="line">data = [<span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">85</span>, <span class="number">200</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算中位数</span></span><br><span class="line">median = np.median(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Median:&quot;</span>, median)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个数据点的绝对偏差</span></span><br><span class="line">absolute_deviation = np.<span class="built_in">abs</span>(data - median)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Absolute Deviation:&quot;</span>, absolute_deviation)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算绝对偏差的中位数</span></span><br><span class="line">mad = np.median(absolute_deviation)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MAD:&quot;</span>, mad)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Median: 88.0</span><br><span class="line">Absolute Deviation: [8 3 2 4 3 0 13 10 4 7 12 3 4 0 3 112]</span><br><span class="line">MAD: 4.0</span><br></pre></td></tr></table></figure><h2 id="MAD的应用"><a href="#MAD的应用" class="headerlink" title="MAD的应用"></a>MAD的应用</h2><ol><li><p><strong>异常值检测</strong>：MAD通常用于异常值检测。当数据点的绝对偏差大于一定倍数的MAD时，通常可以认为该数据点是一个异常值。比如，如果某个数据点的绝对偏差大于3倍MAD，就可以认为它是异常值。</p></li><li><p><strong>稳健的标准差替代品</strong>：在数据分析中，如果担心数据中有异常值，使用MAD可以作为标准差的替代品来衡量数据的波动性和离散程度。</p></li><li><p><strong>数据预处理</strong>：在机器学习和统计建模中，使用MAD可以帮助发现并剔除异常数据，避免它们对模型训练产生负面影响。</p></li><li><p><strong>回归分析和健壮统计</strong>：MAD也常常应用于健壮回归分析中，用于处理数据中的异常点，尤其是在数据集含有极端值或噪声时。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>Median Absolute Deviation (MAD)</strong> 是一种通过中位数衡量数据离散程度的方法，它对异常值的抵抗力较强，适用于含有噪声和异常值的数据。相比于标准差，MAD能够提供更为稳健的分散度度量，广泛应用于异常值检测、稳健回归分析和数据预处理中。</p>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analysis </tag>
            
            <tag> Math </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解数据分析中的四分位数 (Quartile Method)</title>
      <link href="/2020/10/09/data-analysis-quartile/"/>
      <url>/2020/10/09/data-analysis-quartile/</url>
      
        <content type="html"><![CDATA[<p>在数据分析中，理解数据的分布特征至关重要。<code>四分位法（Quartile Method）</code>是分析数据分布的一种基础方法，它通过将数据集划分为四个相等的部分，帮助我们揭示数据的集中趋势和离散程度。四分位法特别适合处理异常值和非对称分布的数据集。</p><p>本文将深入介绍四分位法的核心概念：第一四分位数 (Q1)、第二四分位数 (Q2)、第三四分位数 (Q3)、四分位距 (IQR)，并通过 Python 代码示例说明如何计算这些统计量，同时展示如何通过箱型图可视化这些数据特征。</p><h2 id="四分位数-Quartile"><a href="#四分位数-Quartile" class="headerlink" title="四分位数 (Quartile)"></a>四分位数 (Quartile)</h2><p>四分位数是将排序后的数据集划分为四个相等的部。具体如下:</p><p><strong>第一四分位数</strong> (First Quartile, Q1)：数据集中的第 25% 位置，表示数据中有 25% 的数据小于 Q1。它是数据的第 25 百分位数。</p><p><strong>第二四分位数</strong> (Second Quartile, Q2)：数据集的中位数，表示 50% 的数据小于 Q2，50% 的数据大于 Q2，也叫数据的第 50 百分位数。</p><p><strong>第三四分位数</strong> (Third Quartile, Q3)：数据集中的第 75% 位置，表示数据中有 75% 的数据小于 Q3。</p><p><strong>四分位距</strong> (Interquartile Range, IQR)，它是 Q3 和 Q1 之间的差值，用来衡量数据的分散程度：</p><blockquote><p>IQR &#x3D; Q3 - Q1</p></blockquote><p>四分位距对于识别异常值非常有帮助，它可以帮助我们判断哪些数据点可能是极端值。</p><p>比如，我们有如下学生成绩分数的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">80, 85, 90, 92, 85, 88, 75, 78, 92, 95, 100, 85, 92, 88, 85, 200</span><br></pre></td></tr></table></figure><p>使用Python计算四分位数和四分位距， Python 中的<code>numpy</code>库提供了 <code>percentile</code> 函数来计算四分位数。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = [<span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">85</span>, <span class="number">200</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算第一四分位数</span></span><br><span class="line">Q1 = np.percentile(data, <span class="number">25</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Q1 = <span class="subst">&#123;Q1&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算第二四分位数,第二四分位数就是中位数,也可以使用 `np.median(data)`</span></span><br><span class="line">Q2 = np.percentile(data, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Q2 = <span class="subst">&#123;Q2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算第三四分位数</span></span><br><span class="line">Q3 = np.percentile(data, <span class="number">75</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Q3 = <span class="subst">&#123;Q3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算四分位距</span></span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;IQR = <span class="subst">&#123;IQR&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Q1 = 85.0</span><br><span class="line">Q2 = 88.0</span><br><span class="line">Q3 = 92.0</span><br><span class="line">IQR = 7.0</span><br></pre></td></tr></table></figure><h3 id="四分位数的应用"><a href="#四分位数的应用" class="headerlink" title="四分位数的应用"></a>四分位数的应用</h3><h4 id="数据分布分析"><a href="#数据分布分析" class="headerlink" title="数据分布分析"></a>数据分布分析</h4><p>四分位数能够帮助我们快速了解数据的分布情况。对于一些<strong>非正态分布</strong>的复杂数据集，四分位数比均值和标准差更能准确地反映数据的真实情况。</p><h4 id="识别异常值"><a href="#识别异常值" class="headerlink" title="识别异常值"></a>识别异常值</h4><p>通过计算 IQR，我们可以根据以下规则识别异常值：</p><blockquote><p>如果数据小于 <strong>Q1 − 1.5 x IQR</strong>，则视为低于正常范围的异常值。<br>如果数据大于 <strong>Q3 + 1.5 × IQR</strong>，则视为高于正常范围的异常值。</p></blockquote><p>下面使用这个方式来找出上面学生成绩中的异常值, <code>Python</code>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算异常值</span></span><br><span class="line">lower_bound = Q1 - <span class="number">1.5</span> * IQR</span><br><span class="line">upper_bound = Q3 + <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出异常值</span></span><br><span class="line">outliers = [x <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x &lt; lower_bound <span class="keyword">or</span> x &gt; upper_bound]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;异常值 (Outliers): <span class="subst">&#123;outliers&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异常值 (Outliers): [200]</span><br></pre></td></tr></table></figure><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p><code>箱型图（Boxplot）</code>是一种通过展示四分位数和数据分布的图形化工具。它能够帮助我们快速识别数据的集中趋势、分散程度以及潜在的异常值。</p><h2 id="箱型图-BoxPlot"><a href="#箱型图-BoxPlot" class="headerlink" title="箱型图 (BoxPlot)"></a>箱型图 (BoxPlot)</h2><p><code>箱型图</code>是一种常用的图表，它能够直观地呈现数据分布的形态，是基于四分位法的一种有效可视化方式。可视化四分位法需要使用Python的 <code>matplotlib</code> 库。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制箱型图</span></span><br><span class="line">plt.boxplot(data)</span><br><span class="line">plt.title(<span class="string">&#x27;Student Score Boxplot&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Score&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用<code>plt.boxplot()</code>函数绘制箱型图，它会自动计算并显示数据的四分位数、异常值以及数据的分布情况。</p><p>输出结果如下：</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/data-analysis/student-score-boxplot.png" class="lazyload placeholder" data-srcset="/assets/images/data-analysis/student-score-boxplot.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>上面的箱型图的内容包括如下：</p><p><strong>箱体</strong>：表示从 Q1 到 Q3 的范围，即数据中 50% 的值。<br><strong>中位线</strong>：箱体内的线表示 Q2（中位数），即数据的中间值。<br><strong>须</strong>：箱体外部的线表示数据的最小值和最大值，排除了异常值。<br><strong>异常值</strong>：任何超出 Q1−1.5×IQR 或 Q3+1.5×IQR 范围的数据点将显示为单独的点。</p><p>所以从上面的箱型图中，我们可以看出，学生的成绩分布非常集中，数据集中位数为 88，四分位数分别为 85 和 92，IQR 为 7。并且异常值是200分，它位于 Q3+1.5×IQR 之外，因此可以视为异常值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>概括下来就是：</p><ol><li>四分位法是分析数据分布的一种基础方法，它通过将数据集划分为四个相等的部分，帮助我们揭示数据的集中趋势和离散程度。</li><li>四分位数是将排序后的数据集划分为四个相等的部。</li><li>四分位数能够帮助我们快速了解数据的分布情况。对于一些非正态分布的复杂数据集，四分位数比均值和标准差更能准确地反映数据的真实情况。</li><li>箱型图是一种常用的图表，它能够直观地呈现数据分布的形态，是基于四分位法的一种有效可视化方式。</li><li>箱型图能够帮助我们快速识别数据的集中趋势、分散程度以及潜在的异常值。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analysis </tag>
            
            <tag> Math </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解数据分析中的Z-score（标准分数）</title>
      <link href="/2020/09/18/data-analysis-z-score-for-outliers/"/>
      <url>/2020/09/18/data-analysis-z-score-for-outliers/</url>
      
        <content type="html"><![CDATA[<h1 id="Z-score（标准分数）"><a href="#Z-score（标准分数）" class="headerlink" title="Z-score（标准分数）"></a>Z-score（标准分数）</h1><p><strong>Z-score</strong>（标准分数）是数据分析中常用的一个标准化指标，用于衡量某个数据点与其所在数据集的平均值之间的偏离程度。具体而言，它表示一个数据点距离数据集均值的标准差数值。Z-score 计算的基本原理是将数据点转化为标准化值，从而便于比较不同数据集中的数据点。</p><h2 id="Z-score的计算公式"><a href="#Z-score的计算公式" class="headerlink" title="Z-score的计算公式"></a>Z-score的计算公式</h2><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="9.221ex" height="3.006ex" role="img" focusable="false" viewBox="0 -975.7 4075.5 1328.5" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path><path id="MJX-3-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-3-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path><path id="MJX-3-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-3-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-3-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44D" xlink:href="#MJX-3-TEX-I-1D44D"></use></g><g data-mml-node="mo" transform="translate(1000.8,0)"><use data-c="3D" xlink:href="#MJX-3-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(2056.6,0)"><g data-mml-node="mrow" transform="translate(220,492.7) scale(0.707)"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-3-TEX-I-1D44B"></use></g><g data-mml-node="mo" transform="translate(852,0)"><use data-c="2212" xlink:href="#MJX-3-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(1630,0)"><use data-c="1D707" xlink:href="#MJX-3-TEX-I-1D707"></use></g></g><g data-mml-node="mi" transform="translate(807.6,-345) scale(0.707)"><use data-c="1D70E" xlink:href="#MJX-3-TEX-I-1D70E"></use></g><rect width="1779" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><p>其中：</p><blockquote> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-2-TEX-I-1D44B"></use></g></g></g></svg></mjx-container>：单个数据点的值。</blockquote><blockquote> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g></g></g></svg></mjx-container>：数据集的均值（平均值）。</blockquote><blockquote> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D70E" xlink:href="#MJX-1-TEX-I-1D70E"></use></g></g></g></svg></mjx-container>：数据集的标准差。</blockquote><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="6.058ex" height="2.034ex" role="img" focusable="false" viewBox="0 -683 2677.4 899" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-1-TEX-I-1D44B"></use></g><g data-mml-node="mo" transform="translate(1074.2,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2074.4,0)"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g></g></g></svg></mjx-container>：表示数据点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-1-TEX-I-1D44B"></use></g></g></g></svg></mjx-container> 与数据集均值 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g></g></g></svg></mjx-container> 的偏差，或称为该数据点与均值的差异。</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D70E" xlink:href="#MJX-1-TEX-I-1D70E"></use></g></g></g></svg></mjx-container>：标准差，衡量数据集的离散程度。标准差越大，说明数据点之间的差异越大；标准差越小，说明数据点之间的差异越小。</li></ul><h2 id="Z-score-的意义"><a href="#Z-score-的意义" class="headerlink" title="Z-score 的意义"></a>Z-score 的意义</h2><p>Z-score 的意义主要有以下几点：</p><ul><li><strong>Z-score &#x3D; 0</strong>：表示数据点与均值完全一致。</li><li><strong>Z-score &gt; 0</strong>：表示数据点大于均值，即位于均值右侧。</li><li><strong>Z-score &lt; 0</strong>：表示数据点小于均值，即位于均值左侧。</li><li><strong>Z-score 的绝对值较大</strong>：表示数据点距离均值较远，离群点的可能性较大；例如，<span class='pbg danger'>Z-score 大于 3 或小于 -3 的数据点通常被认为是异常值。</span></li></ul><h2 id="Z-score-的主要应用"><a href="#Z-score-的主要应用" class="headerlink" title="Z-score 的主要应用"></a>Z-score 的主要应用</h2><ol><li><p><strong>标准化数据</strong>：通过 Z-score 可以将数据标准化，使得不同量纲、不同范围的数据具有可比性。例如，在机器学习中，许多算法（如 KNN、SVM）对数据的尺度敏感，因此需要对数据进行标准化处理。</p></li><li><p><strong>异常值检测</strong>：Z-score 可以用来识别数据中的异常值。通常，当 Z-score 的绝对值大于 3 时，认为该数据点为异常值（离群点）。</p></li><li><p><strong>比较不同数据集</strong>：如果两个数据集具有不同的均值和标准差，可以使用 Z-score 对它们进行比较，便于判断哪个数据点在其各自数据集中的位置更加偏离均值。</p></li></ol><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>假设我们有一个包含学生成绩的数据集 [80, 85, 90, 92, 85, 88, 75, 78, 92, 95, 100, 85, 92, 88, 85, 200]。我们希望计算数据点 200 的 Z-score，并判断它是否为异常值。</p><h3 id="数学计算公式"><a href="#数学计算公式" class="headerlink" title="数学计算公式"></a>数学计算公式</h3><ol><li><p><strong>计算均值</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g></g></g></svg></mjx-container>：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="67.757ex" height="2.798ex" role="img" focusable="false" viewBox="0 -876 29948.6 1236.5" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-1-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-1-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g><g data-mml-node="mo" transform="translate(880.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(1936.6,0)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mn"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(1000,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(1778,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(2778,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(3556,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(4556,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(5334,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(6334,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(7112,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(8112,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(8890,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(9890,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(10668,0)"><use data-c="37" xlink:href="#MJX-1-TEX-N-37"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(11668,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(12446,0)"><use data-c="37" xlink:href="#MJX-1-TEX-N-37"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(13446,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(14224,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(15224,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(16002,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(17002,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(17780,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(1000,0)"></use></g><g data-mml-node="mo" transform="translate(19280,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(20058,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(21058,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(21836,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(22836,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(23614,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(24614,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(25392,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(26392,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(27170,0)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(1000,0)"></use></g></g><g data-mml-node="mn" transform="translate(10002.8,-345) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="36" xlink:href="#MJX-1-TEX-N-36" transform="translate(500,0)"></use></g><rect width="20472.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(22927.1,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(23982.9,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(1000,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(1500,0)"></use></g><g data-mml-node="mn" transform="translate(573.6,-345) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="36" xlink:href="#MJX-1-TEX-N-36" transform="translate(500,0)"></use></g><rect width="1614.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(26114.9,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(27170.6,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(1278,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1778,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2278,0)"></use></g></g></g></svg></mjx-container></li><li><p><strong>计算标准差</strong> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D70E" xlink:href="#MJX-1-TEX-I-1D70E"></use></g></g></g></svg></mjx-container>：<br>标准差的计算公式为：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.09ex;" xmlns="http://www.w3.org/2000/svg" width="31.86ex" height="4.208ex" role="img" focusable="false" viewBox="0 -1378.2 14082.2 1860" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-LO-221A" d="M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D70E" xlink:href="#MJX-1-TEX-I-1D70E"></use></g><g data-mml-node="mo" transform="translate(848.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msqrt" transform="translate(1904.6,0)"><g transform="translate(1020,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-1-TEX-I-1D44B"></use></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g><g data-mml-node="mo" transform="translate(1653.6,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(2431.6,0)"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g><g data-mml-node="msup" transform="translate(3034.6,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(3860.1,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(4638.1,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(5027.1,0)"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-1-TEX-I-1D44B"></use></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(6291.7,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(7069.7,0)"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g><g data-mml-node="msup" transform="translate(7672.7,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(8498.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(9276.2,0)"><use data-c="22EF" xlink:href="#MJX-1-TEX-N-22EF"></use></g><g data-mml-node="mo" transform="translate(10448.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(11226.2,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(11615.2,0)"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-1-TEX-I-1D44B"></use></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(12950.5,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(13728.5,0)"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g><g data-mml-node="msup" transform="translate(14331.5,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g><g data-mml-node="mi" transform="translate(5366.7,-345) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><rect width="10917.6" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(0,168.2)"><use data-c="221A" xlink:href="#MJX-1-TEX-LO-221A"></use></g><rect width="11157.6" height="60" x="1020" y="1258.2"></rect></g></g></g></svg></mjx-container><p>代入数据集计算：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.099ex;" xmlns="http://www.w3.org/2000/svg" width="75.933ex" height="4.208ex" role="img" focusable="false" viewBox="0 -1374.3 33562.5 1860" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-LO-221A" d="M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path id="MJX-1-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-1-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-1-TEX-N-2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D70E" xlink:href="#MJX-1-TEX-I-1D70E"></use></g><g data-mml-node="mo" transform="translate(848.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msqrt" transform="translate(1904.6,0)"><g transform="translate(1020,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(389,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(1389,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2167,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(1278,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1778,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2278,0)"></use></g><g data-mml-node="msup" transform="translate(4945,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(5770.6,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(6548.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(6937.6,0)"><use data-c="38" xlink:href="#MJX-1-TEX-N-38"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(7937.6,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(8715.6,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(1278,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1778,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2278,0)"></use></g><g data-mml-node="msup" transform="translate(11493.6,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(12319.1,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(13097.1,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(13486.1,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(14486.1,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(15264.1,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(1278,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1778,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2278,0)"></use></g><g data-mml-node="msup" transform="translate(18042.1,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(18867.7,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(19645.7,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(20034.7,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(500,0)"></use></g><g data-mml-node="mo" transform="translate(21034.7,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(21812.7,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(1278,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1778,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2278,0)"></use></g><g data-mml-node="msup" transform="translate(24590.7,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,289) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(25416.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(26194.2,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g><g data-mml-node="mo" transform="translate(26472.2,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g><g data-mml-node="mo" transform="translate(26750.2,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g><g data-mml-node="mo" transform="translate(27028.2,0)"><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E"></use></g></g><g data-mml-node="mn" transform="translate(9520.7,-345) scale(0.707)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="36" xlink:href="#MJX-1-TEX-N-36" transform="translate(500,0)"></use></g><rect width="19508.4" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(0,164.3)"><use data-c="221A" xlink:href="#MJX-1-TEX-LO-221A"></use></g><rect width="19748.4" height="60" x="1020" y="1254.3"></rect></g><g data-mml-node="mo" transform="translate(22950.7,0)"><g data-mml-node="text"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="text" transform="translate(778,0)"><use data-c="2248" xlink:href="#MJX-1-TEX-N-2248"></use></g></g><g data-mml-node="mn" transform="translate(24784.5,0)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="39" xlink:href="#MJX-1-TEX-N-39" transform="translate(1278,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(1778,0)"></use><use data-c="39" xlink:href="#MJX-1-TEX-N-39" transform="translate(2278,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2778,0)"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(3278,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(3778,0)"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(4278,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(4778,0)"></use><use data-c="39" xlink:href="#MJX-1-TEX-N-39" transform="translate(5278,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(5778,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(6278,0)"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(6778,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(7278,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(7778,0)"></use><use data-c="36" xlink:href="#MJX-1-TEX-N-36" transform="translate(8278,0)"></use></g></g></g></svg></mjx-container></li><li><p><strong>计算 Z-score</strong>：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="50.153ex" height="3.023ex" role="img" focusable="false" viewBox="0 -975.7 22167.6 1336.2" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-I-1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path id="MJX-1-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-1-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path id="MJX-1-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44D" xlink:href="#MJX-1-TEX-I-1D44D"></use></g><g data-mml-node="mo" transform="translate(1000.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(2056.6,0)"><g data-mml-node="mrow" transform="translate(220,492.7) scale(0.707)"><g data-mml-node="mi"><use data-c="1D44B" xlink:href="#MJX-1-TEX-I-1D44B"></use></g><g data-mml-node="mo" transform="translate(852,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(1630,0)"><use data-c="1D707" xlink:href="#MJX-1-TEX-I-1D707"></use></g></g><g data-mml-node="mi" transform="translate(807.6,-345) scale(0.707)"><use data-c="1D70E" xlink:href="#MJX-1-TEX-I-1D70E"></use></g><rect width="1779" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4353.3,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(5409.1,0)"><g data-mml-node="mrow" transform="translate(1535.9,398) scale(0.707)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(1000,0)"></use></g><g data-mml-node="mo" transform="translate(1500,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2278,0)"><use data-c="39" xlink:href="#MJX-1-TEX-N-39"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(1278,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1778,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2278,0)"></use></g></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(500,0)"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(1000,0)"></use><use data-c="39" xlink:href="#MJX-1-TEX-N-39" transform="translate(1278,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(1778,0)"></use><use data-c="39" xlink:href="#MJX-1-TEX-N-39" transform="translate(2278,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(2778,0)"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(3278,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(3778,0)"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(4278,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(4778,0)"></use><use data-c="39" xlink:href="#MJX-1-TEX-N-39" transform="translate(5278,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(5778,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(6278,0)"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(6778,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(7278,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(7778,0)"></use><use data-c="36" xlink:href="#MJX-1-TEX-N-36" transform="translate(8278,0)"></use></g><rect width="6407" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(12333.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(13389.6,0)"><use data-c="33" xlink:href="#MJX-1-TEX-N-33"></use><use data-c="2E" xlink:href="#MJX-1-TEX-N-2E" transform="translate(500,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(778,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1278,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(1778,0)"></use><use data-c="37" xlink:href="#MJX-1-TEX-N-37" transform="translate(2278,0)"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(2778,0)"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(3278,0)"></use><use data-c="39" xlink:href="#MJX-1-TEX-N-39" transform="translate(3778,0)"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(4278,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(4778,0)"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(5278,0)"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(5778,0)"></use><use data-c="36" xlink:href="#MJX-1-TEX-N-36" transform="translate(6278,0)"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(6778,0)"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(7278,0)"></use><use data-c="34" xlink:href="#MJX-1-TEX-N-34" transform="translate(7778,0)"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(8278,0)"></use></g></g></g></svg></mjx-container></li></ol><h3 id="Python-代码"><a href="#Python-代码" class="headerlink" title="Python 代码"></a>Python 代码</h3><p>在Python中，我们可以使用 <code>numpy</code> 和 <code>scipy</code> 库来计算 Z-score。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集：一组学生成绩，其中包括异常值200</span></span><br><span class="line">data = [<span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">85</span>, <span class="number">200</span>]</span><br></pre></td></tr></table></figure><p>计算数据集的均值和标准差和Z-score：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">mean = np.mean(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;均值 (Mean)：&quot;</span>, mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算标准差</span></span><br><span class="line">std = np.std(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;标准差 (Standard Deviation):&quot;</span>, std)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 Z-score</span></span><br><span class="line">z_scores = stats.zscore(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;200数值的Z-score:&quot;</span>, z_scores[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">均值 (Mean): 94.375</span><br><span class="line">标准差 (Standard Deviation): 27.959513139538036</span><br><span class="line">200数值的Z-score: 3.7777839504162842</span><br></pre></td></tr></table></figure><p>所以，数据点 200 的 Z-score 为 3.7777839504162842，按照 Z-score 的定义，它位于数据集的右侧，距离均值较远 <code>（ Z-score 大于3或者小于-3 ）</code>，因此被认为是异常值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Z-score</code> 是衡量数据点相对于数据集平均水平偏差程度的标准化指标，广泛应用于<code>数据预处理</code>、<code>异常值检测</code>以及<code>统计分析</code>等领域。通过 Z-score，我们可以将不同规模、不同单位的数据转换为相同的标准尺度，方便进行比较和进一步分析。</p>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analysis </tag>
            
            <tag> Math </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解数据分析中的方差，标准差和异常值的使用</title>
      <link href="/2020/09/03/data-analysis-standard-deviation-variance-outliers/"/>
      <url>/2020/09/03/data-analysis-standard-deviation-variance-outliers/</url>
      
        <content type="html"><![CDATA[<p>在数据分析中，<code>方差（Variance）</code>、<code>标准差（Standard Deviation）</code>和<code>异常值（Outliers）</code>是分析数据分布和变异性的重要统计工具。理解这些概念，并能够有效地应用它们，对于<code>数据清洗</code>、探索性数据分析（EDA）以及<code>构建准确的预测模型</code>至关重要。</p><h2 id="方差（Variance）"><a href="#方差（Variance）" class="headerlink" title="方差（Variance）"></a>方差（Variance）</h2><p>方差是反映数据集中各数据点与数据均值之间差异的一个重要指标。它的大小可以用来衡量数据的离散程度。具体来说，方差越大，数据的变动越大，反之则越小。</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="28.177ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 12454.1 1217.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-56" d="M114 620Q113 621 110 624T107 627T103 630T98 632T91 634T80 635T67 636T48 637H19V683H28Q46 680 152 680Q273 680 294 683H305V637H284Q223 634 223 620Q223 618 313 372T404 126L490 358Q575 588 575 597Q575 616 554 626T508 637H503V683H512Q527 680 627 680Q718 680 724 683H730V637H723Q648 637 627 596Q627 595 515 291T401 -14Q396 -22 382 -22H374H367Q353 -22 348 -14Q346 -12 231 303Q114 617 114 620Z"></path><path id="MJX-2-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-2-TEX-N-72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path id="MJX-2-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-2-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path id="MJX-2-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path><path id="MJX-2-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><use data-c="56" xlink:href="#MJX-2-TEX-N-56"></use><use data-c="61" xlink:href="#MJX-2-TEX-N-61" transform="translate(750,0)"></use><use data-c="72" xlink:href="#MJX-2-TEX-N-72" transform="translate(1250,0)"></use><use data-c="69" xlink:href="#MJX-2-TEX-N-69" transform="translate(1642,0)"></use><use data-c="61" xlink:href="#MJX-2-TEX-N-61" transform="translate(1920,0)"></use><use data-c="6E" xlink:href="#MJX-2-TEX-N-6E" transform="translate(2420,0)"></use><use data-c="63" xlink:href="#MJX-2-TEX-N-63" transform="translate(2976,0)"></use><use data-c="65" xlink:href="#MJX-2-TEX-N-65" transform="translate(3420,0)"></use></g><g data-mml-node="mo" transform="translate(4141.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(5197.6,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(6228.5,0)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-2-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1123,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(8515.1,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(8904.1,0)"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(10025.3,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(11025.5,0)"><use data-c="1D707" xlink:href="#MJX-2-TEX-I-1D707"></use></g><g data-mml-node="msup" transform="translate(11628.5,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-2-TEX-N-32"></use></g></g></g></g></svg></mjx-container><blockquote><p><code>x_i</code>为数据集中的每个数据点，<br><code>μ</code> 为数据集的均值，<br><code>n</code> 为数据的总个数。<br>方差就是所有数据点与均值的差值的平方的平均值。</p></blockquote><p>方差计算时，我们将每个数据点与均值的差值进行平方，然后求平均。方差的单位是原始数据单位的平方，因此有时它的解释意义不如标准差直观。</p><h2 id="标准差（Standard-Deviation）"><a href="#标准差（Standard-Deviation）" class="headerlink" title="标准差（Standard Deviation）"></a>标准差（Standard Deviation）</h2><p>标准差是方差的平方根。与方差不同，标准差的单位与原始数据相同，因此更易于理解。标准差越大，说明数据的波动性越大；标准差越小，则说明数据较为集中。</p><p>标准差的计算公式为：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.231ex;" xmlns="http://www.w3.org/2000/svg" width="32.902ex" height="2.398ex" role="img" focusable="false" viewBox="0 -958 14542.6 1060" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-53" d="M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z"></path><path id="MJX-1-TEX-N-74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path id="MJX-1-TEX-N-61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path id="MJX-1-TEX-N-6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-1-TEX-N-72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path id="MJX-1-TEX-N-20" d=""></path><path id="MJX-1-TEX-N-44" d="M130 622Q123 629 119 631T103 634T60 637H27V683H228Q399 682 419 682T461 676Q504 667 546 641T626 573T685 470T708 336Q708 210 634 116T442 3Q429 1 228 0H27V46H60Q102 47 111 49T130 61V622ZM593 338Q593 439 571 501T493 602Q439 637 355 637H322H294Q238 637 234 628Q231 624 231 344Q231 62 232 59Q233 49 248 48T339 46H350Q456 46 515 95Q561 133 577 191T593 338Z"></path><path id="MJX-1-TEX-N-65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z"></path><path id="MJX-1-TEX-N-76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z"></path><path id="MJX-1-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-1-TEX-N-56" d="M114 620Q113 621 110 624T107 627T103 630T98 632T91 634T80 635T67 636T48 637H19V683H28Q46 680 152 680Q273 680 294 683H305V637H284Q223 634 223 620Q223 618 313 372T404 126L490 358Q575 588 575 597Q575 616 554 626T508 637H503V683H512Q527 680 627 680Q718 680 724 683H730V637H723Q648 637 627 596Q627 595 515 291T401 -14Q396 -22 382 -22H374H367Q353 -22 348 -14Q346 -12 231 303Q114 617 114 620Z"></path><path id="MJX-1-TEX-N-63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><use data-c="53" xlink:href="#MJX-1-TEX-N-53"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(556,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(945,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(1445,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(2001,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(2557,0)"></use><use data-c="72" xlink:href="#MJX-1-TEX-N-72" transform="translate(3057,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(3449,0)"></use><use data-c="20" xlink:href="#MJX-1-TEX-N-20" transform="translate(4005,0)"></use><use data-c="44" xlink:href="#MJX-1-TEX-N-44" transform="translate(4255,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(5019,0)"></use><use data-c="76" xlink:href="#MJX-1-TEX-N-76" transform="translate(5463,0)"></use><use data-c="69" xlink:href="#MJX-1-TEX-N-69" transform="translate(5991,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(6269,0)"></use><use data-c="74" xlink:href="#MJX-1-TEX-N-74" transform="translate(6769,0)"></use><use data-c="69" xlink:href="#MJX-1-TEX-N-69" transform="translate(7158,0)"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(7436,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(7936,0)"></use></g><g data-mml-node="mo" transform="translate(8769.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="msqrt" transform="translate(9825.6,0)"><g transform="translate(853,0)"><g data-mml-node="mtext"><use data-c="56" xlink:href="#MJX-1-TEX-N-56"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(750,0)"></use><use data-c="72" xlink:href="#MJX-1-TEX-N-72" transform="translate(1250,0)"></use><use data-c="69" xlink:href="#MJX-1-TEX-N-69" transform="translate(1642,0)"></use><use data-c="61" xlink:href="#MJX-1-TEX-N-61" transform="translate(1920,0)"></use><use data-c="6E" xlink:href="#MJX-1-TEX-N-6E" transform="translate(2420,0)"></use><use data-c="63" xlink:href="#MJX-1-TEX-N-63" transform="translate(2976,0)"></use><use data-c="65" xlink:href="#MJX-1-TEX-N-65" transform="translate(3420,0)"></use></g></g><g data-mml-node="mo" transform="translate(0,98)"><use data-c="221A" xlink:href="#MJX-1-TEX-N-221A"></use></g><rect width="3864" height="60" x="853" y="838"></rect></g></g></g></svg></mjx-container><blockquote><p>方差的平方根即为标准差。</p></blockquote><h3 id="标准差与方差的关系"><a href="#标准差与方差的关系" class="headerlink" title="标准差与方差的关系"></a>标准差与方差的关系</h3><p>标准差和方差都用来描述数据的离散程度。标准差比方差更常用，因为它的单位与数据本身一致，解释起来更加直观。</p><h2 id="异常值（Outliers）"><a href="#异常值（Outliers）" class="headerlink" title="异常值（Outliers）"></a>异常值（Outliers）</h2><p>异常值是指在数据集中远离其他数据点的值。异常值的存在往往是由于数据录入错误、测量误差，或者数据本身存在极端波动。异常值会影响数据的分布，进而影响数据分析结果，尤其是均值、方差和标准差等统计量。</p><h3 id="如何识别异常值"><a href="#如何识别异常值" class="headerlink" title="如何识别异常值"></a>如何识别异常值</h3><p>常用的异常值检测方法有：</p><p><strong>箱线图法（Boxplot）</strong>：通过计算四分位数和四分位距（IQR）来识别异常值。通常，位于Q1 - 1.5 * IQR 或 Q3 + 1.5 * IQR之外的数据点被认为是异常值。<br><strong>Z-score法</strong>：通过计算数据点与均值的标准差倍数来判断数据点是否为异常值。<span class='pbg danger'>一般认为，Z-score超过3或小于-3的数据为异常值。</span></p><h3 id="异常值的处理"><a href="#异常值的处理" class="headerlink" title="异常值的处理"></a>异常值的处理</h3><p>在数据分析中，我们通常会在数据预处理阶段识别并处理异常值。常见的处理方法包括：</p><ul><li>删除异常值：直接从数据集中删除异常值。</li><li>替换异常值：用均值、中位数等替代异常值。</li><li>保留异常值：在某些情况下，异常值可能包含重要信息，因此也可以选择保留异常值。</li></ul><h2 id="举个列子"><a href="#举个列子" class="headerlink" title="举个列子"></a>举个列子</h2><p>假设我们有一个包含学生成绩的数据集，其中有一个异常值（200）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集：一组学生成绩，其中包括异常值200</span></span><br><span class="line">data = [<span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">85</span>, <span class="number">200</span>]</span><br></pre></td></tr></table></figure><h2 id="计算方差和标准差"><a href="#计算方差和标准差" class="headerlink" title="计算方差和标准差"></a>计算方差和标准差</h2><p>我们使用<code>NumPy</code>来计算数据的方差和标准差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算方差</span></span><br><span class="line">variance_value = np.var(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;方差 (Variance): <span class="subst">&#123;variance_value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算标准差</span></span><br><span class="line">std_dev_value = np.std(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;标准差 (Standard Deviation): <span class="subst">&#123;std_dev_value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方差 (Variance): 781.734375</span><br><span class="line">标准差 (Standard Deviation): 27.959513139538036</span><br></pre></td></tr></table></figure><p>从输出可以看到，这组数据的方差为781.73，标准差为27.95，这表明数据的离散程度相对较高。特别是最后的异常值（200）对标准差的影响很大。</p><h3 id="异常值检测与处理"><a href="#异常值检测与处理" class="headerlink" title="异常值检测与处理"></a>异常值检测与处理</h3><h4 id="使用Z-score检测异常值"><a href="#使用Z-score检测异常值" class="headerlink" title="使用Z-score检测异常值"></a>使用Z-score检测异常值</h4><p>我们使用Z-score来检测数据中的异常值。如果Z-score大于3或小于-3，则该数据点被认为是异常值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算Z-score</span></span><br><span class="line">z_scores = stats.zscore(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Z-scores: <span class="subst">&#123;z_scores&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测异常值</span></span><br><span class="line">outliers = [data[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)) <span class="keyword">if</span> np.<span class="built_in">abs</span>(z_scores[i]) &gt; <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;检测到的异常值: <span class="subst">&#123;outliers&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用<code>scipy</code>的<code>stats</code>模块可以计算Z-score。输出结果中，Z-score大于3的异常值是200。</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Z-scores: [-0.51413628 -0.33530627 -0.15647626 -0.08494425 -0.33530627 -0.22800826</span><br><span class="line"> -0.69296629 -0.58566828 -0.08494425  0.02235375  0.20118376 -0.33530627</span><br><span class="line"> -0.08494425 -0.22800826 -0.33530627  3.77778395]</span><br><span class="line">检测到的异常值: [200]</span><br></pre></td></tr></table></figure><p>从输出结果中可以看出，Z-score大于3的异常值是200。这是由于200与其他数据点的差异过大，Z-score值为9.39，远远超过了3。</p><h4 id="使用箱线图检测异常值"><a href="#使用箱线图检测异常值" class="headerlink" title="使用箱线图检测异常值"></a>使用箱线图检测异常值</h4><p>我们可以绘制箱线图来可视化数据并检测异常值。可以使用<code>matplotlib</code>库绘制箱线图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制箱线图</span></span><br><span class="line">plt.boxplot(data)</span><br><span class="line">plt.title(<span class="string">&quot;Boxplot Chart&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/data-analysis/outlier-boxplot.png" class="lazyload placeholder" data-srcset="/assets/images/data-analysis/outlier-boxplot.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="箱线图" style="width:500px;"/></div><span class="image-caption">箱线图</span></div><p>从箱线图中，200的值处于箱体外，因此被视为异常值。</p><h3 id="处理异常值"><a href="#处理异常值" class="headerlink" title="处理异常值"></a>处理异常值</h3><p>在实际分析中，我们可以选择处理异常值。以下是几种常见的方法：</p><h4 id="删除异常值"><a href="#删除异常值" class="headerlink" title="删除异常值"></a>删除异常值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除异常值（Z-score大于3的点）</span></span><br><span class="line">cleaned_data = [data[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)) <span class="keyword">if</span> np.<span class="built_in">abs</span>(z_scores[i]) &lt;= <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;删除异常值后的数据: <span class="subst">&#123;cleaned_data&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除异常值后的数据: [80, 85, 90, 92, 85, 88, 75, 78, 92, 95, 100, 85, 92, 88, 85]</span><br></pre></td></tr></table></figure><h4 id="替换异常值"><a href="#替换异常值" class="headerlink" title="替换异常值"></a>替换异常值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换异常值为中位数</span></span><br><span class="line">median_value = np.median(data)</span><br><span class="line">cleaned_data_with_median = [median_value <span class="keyword">if</span> np.<span class="built_in">abs</span>(z_scores[i]) &gt; <span class="number">3</span> <span class="keyword">else</span> data[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;替换异常值后的数据: <span class="subst">&#123;cleaned_data_with_median&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">替换异常值后的数据: [80, 85, 90, 92, 85, 88, 75, 78, 92, 95, 100, 85, 92, 88, 85, 88.0]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>方差和标准差是用于衡量数据离散程度的基本统计量。方差的单位为原始数据单位的平方，而标准差则直接以原始单位表示，更容易解释。</li><li>异常值是指那些在数据中与其他数据点差异较大的值，它们可能影响统计分析的结果。在数据清洗阶段，识别和处理异常值是至关重要的一步。</li></ul><p>在Python中，我们可以利用<code>NumPy</code>、<code>SciPy</code>和<code>Matplotlib</code>等库来计算方差、标准差，识别异常值，并根据需要处理异常值。通过掌握这些基本概念和技术，我们数据分析师可以更有效地理解数据的分布特征，发现数据中的潜在问题，做出更加精准的数据分析。</p>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analysis </tag>
            
            <tag> Math </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析中的均值、中央値与众数</title>
      <link href="/2020/08/14/data-analysis-mean-median-mode/"/>
      <url>/2020/08/14/data-analysis-mean-median-mode/</url>
      
        <content type="html"><![CDATA[<p>在数据分析中，我们常常会用到<strong>均值</strong>（<code>Mean</code>）、<strong>中央値</strong>（<code>Median</code>）和<strong>众数</strong>（<code>Mode</code>）这三个基本的统计量。这些统计量能够帮助我们更好地理解数据集的分布情况，发现数据中的趋势以及进行数据清洗和处理。</p><h2 id="均值（Mean）"><a href="#均值（Mean）" class="headerlink" title="均值（Mean）"></a>均值（Mean）</h2><p><strong>均值</strong>是最常见的集中趋势指标，通常被称为“<code>平均数</code>”。它是所有数据点加总之后除以数据点的个数。计算公式如下：</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="15.293ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 6759.4 1399.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">均</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mo" transform="translate(2277.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3333.6,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mo"><use data-c="2211" xlink:href="#MJX-1-TEX-SO-2211"></use></g><g data-mml-node="mtext" transform="translate(1222.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">据</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">值</text></g></g><g data-mml-node="mi" transform="translate(1500.8,-345) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><rect width="3185.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><p>直白一点就是：</p><blockquote><p>均值 &#x3D; (数据值1 + 数据值2 +… + 数据值n) &#x2F; n</p></blockquote><p>值得注意的是：</p><blockquote><p>均值对异常值（即极端值）非常敏感。如果数据集中存在非常大的或非常小的值（如噪声数据），均值可能无法准确反映数据的真实分布。</p></blockquote><h2 id="中央値（Median）"><a href="#中央値（Median）" class="headerlink" title="中央値（Median）"></a>中央値（Median）</h2><p><strong>中央値</strong>是指将数据从小到大排列后，处于中间位置的数据值。如果数据集中的数据点个数是奇数，中央値就是中间那个数；如果数据集的个数是偶数，中央値是中间两个数的平均值。</p><ul><li>如果数据点个数是奇数，取中间的值。</li><li>如果数据点个数是偶数，取中间两个值的平均值。</li></ul><blockquote><p><strong>优点</strong>：中央値对异常值不敏感。如果数据集包含一些极端值，中央値能更好地反映数据的中心位置。<br><strong>局限</strong>：相比于均值，中央値缺少直观性，且对数据的具体数值关系不敏感。</p></blockquote><h2 id="众数（Mode）"><a href="#众数（Mode）" class="headerlink" title="众数（Mode）"></a>众数（Mode）</h2><p><strong>众数</strong>是数据集中出现频率最高的数值。如果一个数据集中有多个值的频率相同且是最大频率，那么该数据集有多个众数（称为<strong>多众数</strong>）。</p><ul><li>统计每个数据点出现的频率，找到出现频率最高的值。</li><li>如果有多个频率相同的数值，都可以被视为多众数。</li></ul><blockquote><p><strong>优点</strong>：众数适用于名义尺度的数据（例如类别数据），可以反映出数据中最常见的类别。<br><strong>局限</strong>：有些数据集可能没有众数，或者众数不唯一。</p></blockquote><h2 id="Python代码举例"><a href="#Python代码举例" class="headerlink" title="Python代码举例"></a>Python代码举例</h2><p>下面我们用Python代码来演示如何计算均值、中央値和众数。</p><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>假设我们有一个包含学生成绩的简单数据集，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集：一组学生的成绩</span></span><br><span class="line">data = [<span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">85</span>]</span><br></pre></td></tr></table></figure><h3 id="计算均值（Mean）"><a href="#计算均值（Mean）" class="headerlink" title="计算均值（Mean）"></a>计算均值（Mean）</h3><p>我们可以使用Python的<code>NumPy</code>库来计算均值， <code>NumPy</code>是一个用于科学计算的基础库，提供了大量的<code>数学函数</code>和<code>矩阵运算</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mean_value = np.mean(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;均值 (Mean): <span class="subst">&#123;mean_value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">均值 (Mean): 87.33333333333333</span><br></pre></td></tr></table></figure><h3 id="计算中央値（Median）"><a href="#计算中央値（Median）" class="headerlink" title="计算中央値（Median）"></a>计算中央値（Median）</h3><p>Python中的<code>NumPy</code>也提供了计算中央値的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">median_value = np.median(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;中央値 (Median): <span class="subst">&#123;median_value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中央値 (Median): 85.0</span><br></pre></td></tr></table></figure><h3 id="计算众数（Mode）"><a href="#计算众数（Mode）" class="headerlink" title="计算众数（Mode）"></a>计算众数（Mode）</h3><p>计算众数可以使用<code>SciPy</code>库中的stats.mode函数, <code>SciPy</code>库是一个基于Python的科学计算包，包含了许多<code>数学</code>、<code>统计</code>、<code>优化</code>、<code>线性代数</code>等函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mode_value = stats.mode(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;众数 (Mode): <span class="subst">&#123;mode_value.mode[<span class="number">0</span>]&#125;</span>, 出现次数: <span class="subst">&#123;mode_value.count[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">众数 (Mode): 85, 出现次数: 4</span><br></pre></td></tr></table></figure><p>在这个例子中，众数是85，它在数据集中出现了4次。</p><h3 id="综合代码示例"><a href="#综合代码示例" class="headerlink" title="综合代码示例"></a>综合代码示例</h3><p>结合以上代码，我们可以写一个综合示例，计算一个数据集的均值、中央値和众数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集：一组学生的成绩</span></span><br><span class="line">data = [<span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">75</span>, <span class="number">78</span>, <span class="number">92</span>, <span class="number">95</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">85</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均值</span></span><br><span class="line">mean_value = np.mean(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算中央値</span></span><br><span class="line">median_value = np.median(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算众数</span></span><br><span class="line">mode_value = stats.mode(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;均值 (Mean): <span class="subst">&#123;mean_value&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;中央値 (Median): <span class="subst">&#123;median_value&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;众数 (Mode): <span class="subst">&#123;mode_value.mode[<span class="number">0</span>]&#125;</span>, 出现次数: <span class="subst">&#123;mode_value.count[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">均值 (Mean): 87.33333333333333</span><br><span class="line">中央値 (Median): 85.0</span><br><span class="line">众数 (Mode): 85, 出现次数: 4</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在数据分析中，均值、中央値和众数是最常用的三种集中趋势的统计量。它们各自有不同的特点和适用场景：</p><blockquote><p>均值：适用于数据分布较为均匀的情况，但对异常值敏感。<br>中央値：适用于数据有极端值或异常值的情况，能较好地反映数据的中心位置。<br>众数：适用于分类数据或描述数据中最常见的值。</p></blockquote><p>通过Python的<code>NumPy</code>和<code>SciPy</code>库，我们可以轻松地计算这些统计量，为数据分析提供有力的支持。在实际应用中，根据数据的性质选择合适的统计量非常重要。</p>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Analysis </tag>
            
            <tag> Math </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊人工智能、机器学习与深度学习</title>
      <link href="/2020/07/05/ai-ml-dl/"/>
      <url>/2020/07/05/ai-ml-dl/</url>
      
        <content type="html"><![CDATA[<p>随着科技的快速发展，人工智能（<code>Artificial Intelligence, AI</code>）、机器学习（<code>Machine Learning, ML</code>）和深度学习（<code>Deep Learning, DL</code>）成为了现代科技的重要话题。从语音助手到自动驾驶汽车，AI 正在改变我们的生活方式。但很多人可能会问， 人工智能、机器学习和深度学习到底是什么，它们之间又有什么关系。虽然这三个概念经常被混淆，但它们之间存在着明确的关系和层级结构。下面将我们来详细解释它们的定义、特点及相互关系。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/ai-ml/ai-ml-dl-relationship.png" class="lazyload placeholder" data-srcset="/assets/images/ai-ml/ai-ml-dl-relationship.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="AI、ML、DL关系图" style="width:800px;"/></div><span class="image-caption">AI、ML、DL关系图</span></div><h2 id="1-人工智能（AI）"><a href="#1-人工智能（AI）" class="headerlink" title="1. 人工智能（AI）"></a>1. 人工智能（AI）</h2><p>人工智能是指使计算机和机器具有人类智能的能力。这包括理解自然语言、识别图像、解决问题和做出决策等。让机器模仿人类的智能行为，能够像人类一样进行思考、学习和解决问题。比如，当你用智能音箱询问天气时，它不仅能理解你的问题，还能给你准确的答案。这就是人工智能在发挥作用。简单来说，人工智能的目标是让机器能够“像人一样思考”。</p><p>人工智能有以下几个特点， 其应用实例有：智能助手（如Siri、Alexa）、自动驾驶汽车、推荐系统等。<br><strong>自主性</strong>：能够自主进行决策和学习。<br><strong>适应性</strong>：能够根据环境变化调整自身行为。<br><strong>问题解决能力</strong>：能够在复杂的情况下找到解决方案。</p><h2 id="2-机器学习（ML）"><a href="#2-机器学习（ML）" class="headerlink" title="2. 机器学习（ML）"></a>2. 机器学习（ML）</h2><p>机器学习是人工智能的一个子集，专注于通过数据让机器自动学习并改进其性能，而不是依赖于明确的编程指令。机器学习的核心在于算法，它们可以从数据中发现模式，并根据这些模式进行预测或分类。想象一下，如果我们想训练一个机器来识别水果的种类，我们可以给它成千上万张不同水果的图片，并告诉它每张图片上是什么水果。机器学习通过不断分析这些数据，逐渐找出水果的特征，从而能够在看到新图片时准确判断出水果的种类。</p><p>机器学习的特点有以下几点：</p><p><strong>数据驱动</strong>：依赖于大量的数据进行训练。<br><strong>模型训练</strong>：通过训练数据创建模型，然后用新的数据进行测试和验证。<br><strong>不断改进</strong>：随着新数据的输入，模型可以不断更新和改进。</p><p>机器学习有如下类型：</p><p><strong>监督学习</strong>：利用标注数据进行训练，目标是预测结果（例如分类、回归）。分类问题中最常见的就是正负样本的二分类问题。<br><strong>无监督学习</strong>：使用未标注的数据寻找隐藏的模式（例如聚类、关联规则）。<br><strong>强化学习</strong>：通过与环境的交互，学习最优决策策略（例如游戏AI）。<br>应用实例主要包括：图像识别、语音识别、垃圾邮件过滤等。</p><h2 id="3-深度学习（DL）"><a href="#3-深度学习（DL）" class="headerlink" title="3. 深度学习（DL）"></a>3. 深度学习（DL）</h2><p>深度学习是机器学习的一个高级分支，基于人工神经网络的结构。它通过多层神经网络（深层神经网络）对数据进行复杂的特征提取和表示学习。比如，在人脸识别中，深度学习可以识别出照片中的人脸，不仅能够判断出是谁，还能分析出他们的表情和情绪。深度学习的强大之处在于，它能够处理大量的数据，并从中发现更深层次的规律。深度学习特别适用于处理大规模数据集。</p><p>深度学习的特点：</p><p><strong>多层结构</strong>：通过多层网络提取数据的高阶特征，使得模型能够理解更复杂的模式。<br><strong>自动特征提取</strong>：不同于传统机器学习，深度学习可以自动识别重要特征，减少了手动特征工程的需要。<br><strong>强大的性能</strong>：在图像、语音等任务上，深度学习通常能达到更高的准确率。<br>应用实例主要包括：人脸识别、自动翻译、语音合成、视频分析等。</p><h2 id="4-三者之间的关系"><a href="#4-三者之间的关系" class="headerlink" title="4. 三者之间的关系"></a>4. 三者之间的关系</h2><p>为了更清晰地理解这三者的关系，可以将它们看作一个层级结构：</p><p><strong>人工智能（AI）</strong>是广泛的概念，涵盖了所有模仿或模拟人类智能的技术。<br><strong>机器学习（ML）</strong>是人工智能的一个重要分支，专注于让机器通过数据学习。<br><strong>深度学习（DL）</strong>则是机器学习中的一个具体实现，使用深层神经网络来处理和理解数据。</p><p>可以用以下比喻来理解：</p><p>人工智能是一个大盒子，里面有许多玩具。<br>机器学习是其中一种玩具，专注于通过数据学习和改进。<br>深度学习是机器学习中更高级的玩具，能够处理更复杂的数据和任务。</p><p>希望这篇文章能帮助你更好地理解人工智能、机器学习和深度学习。</p>]]></content>
      
      
      <categories>
          
          <category> AI/ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据湖（Data Lake）vs 数据仓库（Data Warehouse）</title>
      <link href="/2020/06/13/data-lake-vs-data-warehouse/"/>
      <url>/2020/06/13/data-lake-vs-data-warehouse/</url>
      
        <content type="html"><![CDATA[<p><code>数据湖（Data Lake）</code>和<code>数据仓库（Data Warehouse）</code>都是用于存储和管理数据的系统，但它们在设计理念、结构和使用场景上有一些显著的区别和共同点。</p><h2 id="数据湖（Data-Lake）"><a href="#数据湖（Data-Lake）" class="headerlink" title="数据湖（Data Lake）"></a>数据湖（Data Lake）</h2><p>数据湖是一个集中式存储库，它以原始形式摄取和存储大量数据。然后，可以对数据进行处理，并将其用作各种分析需求的基础。由于其开放、可扩展的架构，数据湖可以容纳来自任何来源的所有类型的数据，从结构化（数据库表、Excel 表格）到半结构化（XML 文件、网页）再到非结构化（图像、音频文件、推文），所有这些都不会牺牲保真度。数据文件通常存储在暂存区域（原始区域、清理区域和特选区域）中，以便不同类型的用户可以使用各种形式的数据来满足他们的需求。数据湖为各种应用程序提供核心数据一致性，为大数据分析、机器学习、预测分析和其他形式的智能操作提供支持。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/data-lake.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/data-lake.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Data Lake" style="width:700px;"/></div><span class="image-caption">Data Lake</span></div><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p><strong>数据存储方式</strong>： 数据湖通常使用原始数据存储方式，可以处理结构化、半结构化和非结构化数据（例如文本、图像、视频等）。</p><p><strong>灵活性</strong>： 可以存储多种类型的数据，数据在存储时不需要预先定义模式（schema-on-write），而是在读取时进行模式定义（schema-on-read）。</p><p><strong>扩展性</strong>： 数据湖通常建立在大数据技术之上，如Hadoop、Amazon S3等，具有高度的可扩展性。</p><p><strong>数据处理</strong>： 支持大规模的数据处理和分析，如数据挖掘和机器学习。</p><p><strong>成本</strong>： 存储成本通常较低，但处理和分析数据的成本可能较高。</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li>需要处理和存储各种类型的数据，如社交媒体内容、传感器数据、日志文件等。</li><li>需要进行大规模的数据分析和数据科学任务。</li></ul><h2 id="数据仓库（Data-Warehouse）"><a href="#数据仓库（Data-Warehouse）" class="headerlink" title="数据仓库（Data Warehouse）"></a>数据仓库（Data Warehouse）</h2><p>数据仓库是一个集中式存储库，用于存储和管理企业级数据。数据仓库通常包含来自多个源的结构化和非结构化数据，包括来自关系数据库、文件系统、应用程序、Web 服务器、移动设备等。数据仓库通常按照事实表、维度表和事实和维度的多对多关系进行组织，以便支持复杂的分析查询。数据仓库通常使用数据集市（Data Mart）的形式，将数据集中存储，并提供数据集市的分析功能。数据仓库通常使用多种数据仓库工具进行数据建模、数据转换、数据加载、数据质量和数据挖掘。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/data-warehouse.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/data-warehouse.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Data Warehouse" style="width:700px;"/></div><span class="image-caption">Data Warehouse</span></div><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><p><strong>数据存储方式</strong>： 数据仓库通常存储经过处理和整合的数据，数据是结构化的，并且在存储之前已经定义了模式（schema-on-write）。</p><p><strong>数据整合</strong>： 数据仓库用于整合来自不同数据源的数据，进行清洗、转换和加载（ETL）。</p><p><strong>性能优化</strong>： 数据仓库通常优化了查询性能，支持复杂的SQL查询和报表生成。</p><p><strong>扩展性</strong>： 虽然现代数据仓库也支持大规模数据存储，但扩展性通常不如数据湖。</p><p><strong>成本</strong>： 存储和处理成本较高，但性能优化的查询处理可以减少计算成本。</p><h3 id="使用场景：-1"><a href="#使用场景：-1" class="headerlink" title="使用场景："></a>使用场景：</h3><ul><li>需要存储和分析结构化数据，通常用于商业智能、报表和分析。</li><li>需要从多个数据源中整合数据并进行高效查询和分析。</li></ul><h2 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h2><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><p><strong>数据存储</strong>： 都用于存储大量的数据，以支持数据分析和决策。</p><p><strong>数据访问</strong>： 都允许用户和应用程序访问存储的数据，用于报告、分析和决策支持。</p><h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><p><strong>数据类型</strong>： 数据湖可以存储结构化、半结构化和非结构化数据，而数据仓库主要处理结构化数据。</p><p><strong>数据处理模式</strong>： 数据湖通常采用按需模式（schema-on-read），数据仓库采用预定义模式（schema-on-write）。</p><p><strong>性能和成本</strong>： 数据仓库通常在查询性能上进行优化，成本较高；数据湖在存储成本上更具优势，但处理和分析可能更复杂且成本较高。 </p><p><strong>扩展性</strong>： 数据湖通常具有高度的可扩展性，但数据仓库通常不具备这种能力。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/data-lake-vs-data-warehouse.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/data-lake-vs-data-warehouse.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Data Lake vs Data Warehouse" style="width:800px;"/></div><span class="image-caption">Data Lake vs Data Warehouse</span></div><p>总的来说，数据湖和数据仓库各有优劣，选择哪个系统取决于具体的业务需求和数据处理要求。在实际应用中，很多组织会结合使用数据湖和数据仓库，以充分利用它们各自的优势。</p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Lake </tag>
            
            <tag> Data Warehouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Iceberg 分析介绍以及使用场景</title>
      <link href="/2020/05/23/what-is-apache-iceberg/"/>
      <url>/2020/05/23/what-is-apache-iceberg/</url>
      
        <content type="html"><![CDATA[<p>在大数据和分析不断发展的领域中，高效管理大型数据集是一个关键挑战。<code>Apache Iceberg</code> 作为一个强大的解决方案，彻底改变了我们处理数据湖的方式。它是<code>一种用于大型分析表的高性能开源的表格式</code>，旨在解决数据湖中的数据管理问题。它提供了一种新的表格式，支持高效的查询和数据管理，同时保持了数据的一致性和可靠性。Iceberg 由 Netflix 开发，后来捐赠给 Apache 软件基金会，旨在解决传统表格格式（如 Apache Hive）的一些限制。它针对现代云存储和计算环境进行了优化，提供了一系列高级特性，使得管理大规模数据集更加便捷。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/apache-iceberg.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/apache-iceberg.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Iceberg" style="width:600px;"/></div><span class="image-caption">Apache Iceberg</span></div><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><code>Apache Iceberg</code> 的核心是一个<code>表格式</code>，它将数据组织成一系列的文件，每个文件包含一组数据记录。这些文件通过<code>元数据文件</code>进行管理，元数据文件记录了文件的位置、大小、统计信息等。主要分为两层：<code>元数据层</code>和<code>数据存储层</code>。Iceberg 使用一种称为“<code>快照</code>”的机制来管理数据的版本，每个快照代表表在某个时间点的状态。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/apache-iceberg-structure.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/apache-iceberg-structure.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Iceberg Architecture" style="width:600px;"/></div><span class="image-caption">Apache Iceberg Architecture</span></div><h3 id="数据组织"><a href="#数据组织" class="headerlink" title="数据组织"></a>数据组织</h3><p>Iceberg 将数据组织成多个层级：</p><p><strong>文件层</strong>：数据存储在多个文件中，每个文件包含一组记录。<br><strong>清单层</strong>：清单文件即元数据文件，它记录了文件的位置和统计信息。<br><strong>快照层</strong>：快照记录了表在某个时间点的状态，包括所有文件和清单文件的引用。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/apache-iceberg-architecture.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/apache-iceberg-architecture.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="width:600px;"/></div></div><h3 id="查询执行"><a href="#查询执行" class="headerlink" title="查询执行"></a>查询执行</h3><p>当查询执行时，Iceberg 使用元数据来优化查询计划。它可以根据文件的统计信息跳过不需要的文件，从而提高查询性能。此外，<span class='pbg '>green</span>。</p><h2 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h2><ol><li><p>模式演化：<br>Iceberg 支持模式演化，允许添加、删除或重命名列，而无需重写整个数据集。这种灵活性对于适应数据需求和分析需求的变化至关重要。</p></li><li><p>分区：<br>与传统分区不同，Iceberg 使用更高效的逻辑分区方案。这意味着可以优化查询性能而无需管理多个物理分区的开销。</p></li><li><p>ACID 事务：<br>Iceberg 通过完全支持 <code>ACID</code>（原子性、一致性、隔离性、持久性）事务来确保数据一致性。这一特性对并发数据读写至关重要，确保所有操作都可靠一致。</p></li><li><p>时间旅行：<br>Iceberg 提供内置的<code>时间旅行</code>支持，允许用户查询数据在特定时间点的状态。此功能对审计、数据恢复和历史分析非常有用。</p></li><li><p>元数据处理：<br>Iceberg 使用高效的元数据格式，随数据集规模的增长而扩展。这种元数据管理改善了性能，减少了管理大型表格的开销。</p></li><li><p>插入和删除操作：<br>使用 Iceberg，可以直接对表格执行插入（更新或插入）和删除操作，使得管理和更新数据变得更加简单，无需复杂的 ETL（提取、转换、加载）流程。</p></li><li><p>与多种引擎的集成：<br>Iceberg 设计上与多种数据处理引擎（如 Apache Spark、Apache Flink 和 Trino）无缝集成。这种集成提供了选择适合分析需求的工具的灵活性。</p></li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>大规模数据分析：<br>当处理大型数据集时，Iceberg 的高效元数据处理和 ACID 事务确保了可靠和快速的性能。它非常适合需要对大量数据运行复杂查询和分析的用例。</p></li><li><p>数据湖管理：<br>Iceberg 特别适合数据湖环境，其中存储着大量多样化的数据。其对模式演化和高效分区的支持使得在数据湖环境中管理和分析数据变得更加容易。</p></li><li><p>实时分析：<br>Iceberg 能处理实时数据流，使其非常适合需要以高性能和可靠性处理、分析流数据的场景。</p></li><li><p>历史数据分析：<br>借助内置的时间旅行功能，Iceberg 非常适合需要进行历史数据分析、审计或合规的场景。</p></li><li><p>数据转换和 ETL 过程：<br>Iceberg 通过允许直接在表格上进行更新和删除操作，简化了数据转换和 ETL 过程，减少了复杂的数据处理工作流的需求。</p></li></ol><h2 id="如何使用-Apache-Iceberg"><a href="#如何使用-Apache-Iceberg" class="headerlink" title="如何使用 Apache Iceberg"></a>如何使用 Apache Iceberg</h2><p>要开始使用 Apache Iceberg，请按照以下步骤操作：</p><p>设置环境：<br>确保安装了兼容的大数据处理引擎，如 Apache Spark 或 Apache Flink。Iceberg 与这些引擎集成，提供无缝体验。根据处理引擎，可能需要将 Iceberg 作为依赖项添加。例如，如果您使用 Apache Spark，可以将 Iceberg 依赖项添加到 Spark 配置中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spark.conf.set(&quot;spark.sql.extensions&quot;, &quot;org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions&quot;)</span><br><span class="line">spark.conf.set(&quot;spark.sql.catalog.spark_catalog&quot;, &quot;org.apache.iceberg.spark.SparkCatalog&quot;)</span><br><span class="line">spark.conf.set(&quot;spark.sql.catalog.spark_catalog.type&quot;, &quot;hive&quot;)</span><br></pre></td></tr></table></figure><p>创建 Iceberg 表格：<br>可以通过 SQL 命令或数据处理引擎提供的 API 创建 Iceberg 表格。定义表格模式、分区和其他配置。如: <code>spark.sql(&quot;sql statement&quot;)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE spark_catalog.default.iceberg_table (</span><br><span class="line">  id INT,</span><br><span class="line">  name STRING,</span><br><span class="line">  timestamp TIMESTAMP</span><br><span class="line">) USING iceberg;</span><br></pre></td></tr></table></figure><p>加载数据：<br>使用数据处理引擎将数据加载到 Iceberg 表格中。Iceberg 支持多种数据格式，包括 Parquet 和 ORC。例如，将数据从 CSV 文件加载到 Iceberg 表格中.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> df = spark.read.format(<span class="string">&quot;csv&quot;</span>).option(<span class="string">&quot;header&quot;</span>, <span class="string">&quot;true&quot;</span>).load(<span class="string">&quot;my_data.csv&quot;</span>)</span><br><span class="line">df.write.format(<span class="string">&quot;iceberg&quot;</span>).mode(<span class="string">&quot;append&quot;</span>).save(<span class="string">&quot;spark_catalog.default.iceberg_table&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行操作：<br>一旦设置了表格并加载了数据，可以执行各种操作，如查询、更新、删除和时间旅行。</p><p>查询数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> spark_catalog.default.iceberg_table <span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>更新字段名:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.iceberg.spark.<span class="type">Spark3Util</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> table = <span class="type">Spark3Util</span>.loadTable(spark, <span class="string">&quot;spark_catalog.default.iceberg_table&quot;</span>)</span><br><span class="line">table.update().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Updated Name&quot;</span>).where(<span class="string">&quot;id = 10&quot;</span>).commit()</span><br></pre></td></tr></table></figure><p>时间旅行查询，查询历史时间点的数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> spark_catalog.default.iceberg_table <span class="type">TIMESTAMP</span> <span class="keyword">AS</span> <span class="keyword">OF</span> <span class="string">&#x27;2024-08-01 12:00:00&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Apache Iceberg 是一种强大的表格式，适用于管理大规模数据集和复杂的数据分析。它提供了许多高级特性，如 ACID 事务、模式演化、分区演化和时间旅行查询，使其成为数据湖和数据仓库的理想选择。通过与 Spark、Flink 和 Trino 等查询引擎的集成，Iceberg 可以提供高效的查询性能和灵活的数据管理能力。</p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> Iceberg </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Parquet 高效的数据存储格式</title>
      <link href="/2020/05/11/apache-parquet-efficient-storage-format/"/>
      <url>/2020/05/11/apache-parquet-efficient-storage-format/</url>
      
        <content type="html"><![CDATA[<p><code>Apache Parquet</code>是一种面向列的存储格式，广泛应用于大数据处理框架中，如<code>Apache Hadoop</code>、<code>Apache Spark</code>等。它最初由Twitter和Cloudera公司合作开发，并于2013年贡献给Apache软件基金会，成为Apache顶级项目之一。<span class='pbg green'>Parquet的设计初衷是为了提高大数据处理的效率和性能，特别是在需要处理大量结构化数据的场景中</span>。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/apache-parquet.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/apache-parquet.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Parquet Format" style="width:800px;"/></div><span class="image-caption">Apache Parquet Format</span></div><h2 id="存储原理"><a href="#存储原理" class="headerlink" title="存储原理"></a>存储原理</h2><p>Parquet的存储原理基于<code>列式存储（Columnar Storage）</code>技术。与传统的行式存储不同，列式存储将同一列的数据连续存储在磁盘上，这样可以带来以下几个优势：</p><p><strong>压缩效率高</strong>：由于同一列的数据类型相同，可以采用更高效的压缩算法，减少存储空间占用。<br><strong>查询性能优</strong>：在执行只涉及部分列的查询时，列式存储可以减少I&#x2F;O操作，提高查询速度。<br><strong>支持复杂数据类型</strong>：Parquet支持嵌套数据结构，可以方便地存储和查询复杂的数据类型。</p><p><code>Parquet</code>文件由多个<code>行组（Row Group）</code>组成，每个行组包含一定数量的行。每个行组内的数据按<code>列存储</code>，每列数据又被分成多个<code>数据块（Data Chunk）</code>。此外，Parquet还使用<code>元数据（Metadata）</code>来描述文件的结构和数据类型，便于快速解析和查询。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/big-data-parquet.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/big-data-parquet.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Parquet Storage Example" style="width:800px;"/></div><span class="image-caption">Apache Parquet Storage Example</span></div><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>Parquet格式特别适用于以下场景：</p><p><strong>大数据处理</strong>：在Hadoop、Spark等大数据处理框架中，Parquet可以显著提高数据读取和处理的效率。<br><strong>数据仓库</strong>：在数据仓库中，经常需要对大量数据进行复杂的查询和分析，Parquet的列式存储特性可以有效提升查询性能。<br><strong>数据湖</strong>：在数据湖架构中，Parquet可以作为数据存储格式，支持高效的数据存储和查询。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假设我们有一个包含用户行为日志的数据集，每天产生数十亿条记录。这些日志数据包括用户ID、时间戳、操作类型、操作详情等字段。如果我们使用传统的行式存储格式（如CSV），在执行只涉及部分列的查询时，会导致大量的I&#x2F;O操作，查询性能低下。</p><p>而使用Parquet格式存储这些数据，可以将同一列的数据连续存储，减少I&#x2F;O操作，提高查询性能。例如，如果我们只需要查询某一天所有用户的操作类型，Parquet格式可以只读取“时间戳”和“操作类型”两列的数据，而不需要读取其他列的数据，从而显著提升查询速度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例代码：使用PySpark读取Parquet文件并执行查询</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SparkSession</span></span><br><span class="line">spark = SparkSession.builder.appName(<span class="string">&quot;ParquetExample&quot;</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Parquet文件</span></span><br><span class="line">df = spark.read.parquet(<span class="string">&quot;user_logs.parquet&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行查询</span></span><br><span class="line">result = df.<span class="built_in">filter</span>(df.timestamp &gt;= <span class="string">&quot;2023-01-01&quot;</span>)\</span><br><span class="line">           .select(<span class="string">&quot;user_id&quot;</span>, <span class="string">&quot;action_type&quot;</span>)\</span><br><span class="line">           .distinct()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line">result.show()</span><br></pre></td></tr></table></figure><p>通过上述示例代码，我们可以看到使用Parquet格式存储数据后，可以高效地执行复杂查询，提升数据处理的效率和性能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Apache Parquet作为一种高效的列式存储格式，在大数据处理领域具有广泛的应用前景。其列式存储特性可以显著提高数据压缩效率和查询性能，特别适用于大数据处理、数据仓库和数据湖等场景。通过合理使用Parquet格式，可以有效提升数据处理的效率和性能，满足日益增长的数据处理需求。</p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Big Data </tag>
            
            <tag> Parquet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding CSS Units: px, rem, em, vh, vw, %, ch</title>
      <link href="/2020/04/05/understanding-css-units-px-rem-em-vh-vw-ch/"/>
      <url>/2020/04/05/understanding-css-units-px-rem-em-vh-vw-ch/</url>
      
        <content type="html"><![CDATA[<p>In the web development, understanding CSS units is crucial for creating responsive and visually appealing designs. Each <code>CSS unit</code> serves a specific purpose, catering to different aspects of layout and design responsiveness. We will introduce the differences between <code>px</code>, <code>rem</code>, <code>em</code>, <code>vh</code>, <code>vw</code>, <code>%</code>, and <code>ch</code>, and discuss how and when to use each unit effectively.</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/css/css-units.png" class="lazyload placeholder" data-srcset="/assets/images/css/css-units.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="CSS Units" style="width:800px;"/></div><span class="image-caption">CSS Units</span></div><h2 id="px-Pixels"><a href="#px-Pixels" class="headerlink" title="px (Pixels)"></a>px (Pixels)</h2><p><code>px</code> stands for pixels and is the most commonly used unit in web design. It represents a single dot on a screen, and its size is fixed and does not change with the browser’s zoom settings.</p><p><strong>Usage</strong>: Ideal for defining precise sizes, such as borders, margins, and fixed-width elements.<br><strong>When to Use</strong>: Use px when we need elements to maintain a consistent size regardless of the screen size or zoom level.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rem-Root-em"><a href="#rem-Root-em" class="headerlink" title="rem (Root em)"></a>rem (Root em)</h2><p><code>rem</code> stands for root em, which is relative to the <code>font-size of the root element (html)</code>. Unlike em, which is relative to its parent element, rem is consistent across the entire document. <span class='pbg danger'>1 rem is equal to the font-size of the root element.</span></p><p><strong>Usage</strong>: Useful for defining global sizes, especially for typography and spacing that should scale with the root font size.<br><strong>When to Use</strong>: Use <code>rem</code> for overall layout and sizing that should be consistent across different sections of our website.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* Set a base font size for the entire document */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>; <span class="comment">/* Equivalent to 16px */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>; <span class="comment">/* Padding will be 16px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="em-Relative-to-Parent-Font-Size"><a href="#em-Relative-to-Parent-Font-Size" class="headerlink" title="em (Relative to Parent Font Size)"></a>em (Relative to Parent Font Size)</h2><p><code>em</code> is a relative unit that is based on the font-size of its <code>parent element</code>. If used within nested elements, em can compound and result in unexpected sizes.</p><p><strong>Usage</strong>: Suitable for defining sizes that need to be relative to the font-size of the parent element.<br><strong>When to Use</strong>: Use em for typography and spacing within elements where responsiveness to parent font size changes is desired.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>; <span class="comment">/* 1.2 * 16px = 19.2px */</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.5em</span>; <span class="comment">/* 0.5 * 16px = 8px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vh-Viewport-Height-and-vw-Viewport-Width"><a href="#vh-Viewport-Height-and-vw-Viewport-Width" class="headerlink" title="vh (Viewport Height) and vw (Viewport Width)"></a>vh (Viewport Height) and vw (Viewport Width)</h2><p><code>vh</code> and <code>vw</code> are browser viewport-based units that represent a percentage of the viewport’s height and width, respectively. These units are useful for creating layouts that adjust dynamically based on the browser’s <code>viewport size</code>.</p><p><strong>Usage</strong>: Perfect for creating elements that should fill a specific percentage of the browser viewport’s height or width.<br><strong>When to Use</strong>: Use vh and vw for responsive designs where elements should scale based on the viewport dimensions.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50vh</span>; <span class="comment">/* 50% of viewport height */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">75vw</span>; <span class="comment">/* 75% of viewport width */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Percentage"><a href="#Percentage" class="headerlink" title="% (Percentage)"></a>% (Percentage)</h2><p><code>%</code> is a relative unit that is calculated based on the size of the parent element. It is widely used for creating fluid layouts and scaling elements proportionally. </p><p><strong>Usage</strong>: Effective for creating responsive designs where elements should scale relative to their parent container.<br><strong>When to Use</strong>: Use % for widths, heights, padding, and margins that need to adapt to the size of the parent element.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>; <span class="comment">/* 80% of the parent container&#x27;s width */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>; <span class="comment">/* 50% of the parent container&#x27;s width */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5%</span>; <span class="comment">/* 5% of the parent container&#x27;s width */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ch-Character-Width"><a href="#ch-Character-Width" class="headerlink" title="ch (Character Width)"></a>ch (Character Width)</h2><p><code>ch</code> represents <span class='pbg danger'>the width of the zero (0) character in the current font</span>. It is useful for creating layouts based on the width of text characters.</p><p><strong>Usage</strong>: Suitable for layouts that need to be based on the width of characters, such as <span class='pbg green'>creating fixed-width elements based on text content.</span><br><strong>When to Use</strong>: Use ch when we need elements to be sized based on the number of characters they contain.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20ch</span>; <span class="comment">/* Width based on the width of 20 characters in the current font */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Understanding and using CSS units effectively is essential for creating modern, <code>responsive web designs</code>. Each unit — <code>px</code>, <code>rem</code>, <code>em</code>, <code>vh</code>, <code>vw</code>, <code>%</code>, and <code>ch</code> — serves a unique purpose in defining sizes and layouts. By leveraging these units appropriately, we can ensure that our web pages look great across various devices and screen sizes.</p><p>Happy coding!</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Docker permission denied while trying to connect to the Docker daemon socket</title>
      <link href="/2020/03/19/error-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket/"/>
      <url>/2020/03/19/error-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当我们在本地运行 Docker 容器，直接使用以下命令非root方式执行时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>如果遇到以下错误：</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/docker/docker-permission-denied.png" class="lazyload placeholder" data-srcset="/assets/images/docker/docker-permission-denied.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Head &quot;http://%2Fvar%2Frun%2Fdocker.sock/_ping&quot;: dial unix /var/run/docker.sock: connect: permission denied.</span><br></pre></td></tr></table></figure><p>这种”permission denied while trying to connect to the Docker daemon socket”（尝试连接Docker守护程序套接字时权限被拒绝）的错误通常是因为运行Docker命令的用户没有足够的权限来访问Docker守护程序造成的。</p><p>解决这个问题其实很简单，只需给当前用户给予权限即可。Docker守护程序套接字通常在&#x2F;var&#x2F;run&#x2F;docker.sock，我们需要给予当前用户读写权限。docker组是docker命令的运行用户组，它包含了运行docker命令所需的所有权限。Docker守护程序默认运行在root权限下，所以我们需要将当前用户加入docker组，并修改docker.sock的权限。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>Step 1. 创建docker组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure><p>Step 2. 使用以下命令将当前用户加入docker组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>Step 3. 修改docker.sock的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 666 /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>Step 4. 重启Docker服务，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/docker/docker-permission-denied-fixed.png" class="lazyload placeholder" data-srcset="/assets/images/docker/docker-permission-denied-fixed.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"/></div></div><p>执行完以上步骤后，再次运行<code>docker ps</code>命令，就能正常运行了。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Container </tag>
            
            <tag> Cloud Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从同步详解与应用场景</title>
      <link href="/2020/01/31/mysql-master-slave/"/>
      <url>/2020/01/31/mysql-master-slave/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在大型数据库应用中，数据同步和备份是至关重要的。MySQL主从同步是一种常用的数据同步机制，它能够确保多个数据库服务器之间的数据保持一致。本文将详细介绍MySQL主从同步的运行原理以及常见的应用场景。</p><h3 id="主从同步的运行原理"><a href="#主从同步的运行原理" class="headerlink" title="主从同步的运行原理"></a>主从同步的运行原理</h3><h4 id="1-主从架构"><a href="#1-主从架构" class="headerlink" title="1. 主从架构"></a>1. 主从架构</h4><p>MySQL主从同步是基于主从架构实现的。在主从架构中，一个数据库服务器（主服务器）负责处理写操作和读操作，而其他服务器（从服务器）则复制主服务器上的数据。主从服务器之间通过二进制日志（Binary Log）进行数据同步。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/mysql/mysql-master-slave.webp" class="lazyload placeholder" data-srcset="/assets/images/mysql/mysql-master-slave.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Mysql Master Slave" style="width:800px;"/></div><span class="image-caption">Mysql Master Slave</span></div><h4 id="2-运行步骤"><a href="#2-运行步骤" class="headerlink" title="2. 运行步骤"></a>2. 运行步骤</h4><p>这个过程主要涉及到3个线程，主服务器Master中的<strong>Dump Thread</strong>, 从服务器Slave上的<strong>IO Thread</strong>和<strong>SQL Thread</strong>。</p><h5 id="2-1-主服务器记录二进制日志"><a href="#2-1-主服务器记录二进制日志" class="headerlink" title="2.1 主服务器记录二进制日志"></a>2.1 主服务器记录二进制日志</h5><p>当主服务器接收到写操作时，主服务器上的<strong>Dump Thread</strong>线程会将这些操作以二进制格式记录在<strong>Binary Log</strong>二进制日志中。这个二进制日志包含了对数据进行更改的所有信息，包括插入、更新和删除操作。</p><h5 id="2-2-从服务器连接到主服务器"><a href="#2-2-从服务器连接到主服务器" class="headerlink" title="2.2 从服务器连接到主服务器"></a>2.2 从服务器连接到主服务器</h5><p>从服务器通过<strong>IO Thread</strong>线程连接到主服务器，并请求复制主服务器上的<strong>Binary Log</strong>二进制日志。这个连接可以是同步的（实时同步）或异步的（延迟一段时间同步）。 </p><h5 id="2-3-从服务器复制二进制日志"><a href="#2-3-从服务器复制二进制日志" class="headerlink" title="2.3 从服务器复制二进制日志"></a>2.3 从服务器复制二进制日志</h5><p>主服务器将二进制日志传输给从服务器，从服务器通过<strong>IO Thread</strong>将这些日志保存在<strong>Relay Log</strong>中继日志中，从服务器上的<strong>SQL Thread</strong>线程然然后读取<strong>Relay Log</strong>中继日志中的内容，然后解析成具体的操作应用到本地数据库上，从而保持与主服务器上数据的一致性。</p><h5 id="2-4-从服务器处理读操作"><a href="#2-4-从服务器处理读操作" class="headerlink" title="2.4 从服务器处理读操作"></a>2.4 从服务器处理读操作</h5><p>从服务器负责处理读操作，而写操作仍然由主服务器处理。这样，主从服务器之间实现了读写分离，提高了整个系统的性能。</p><h3 id="主从同步的应用场景"><a href="#主从同步的应用场景" class="headerlink" title="主从同步的应用场景"></a>主从同步的应用场景</h3><h4 id="1-提高读性能"><a href="#1-提高读性能" class="headerlink" title="1. 提高读性能"></a>1. 提高读性能</h4><p>通过将读操作分担到从服务器上，主服务器的负载将大大减轻，提高了整个系统的读性能。在高并发的应用场景中，读写分离是提升系统性能的有效手段。</p><h4 id="2-数据备份"><a href="#2-数据备份" class="headerlink" title="2. 数据备份"></a>2. 数据备份</h4><p>从服务器不仅可以用于处理读操作，同时也可以作为主服务器的备份。在主服务器发生故障时，可以迅速切换到从服务器，确保系统的可用性和稳定性。</p><h4 id="3-数据分布"><a href="#3-数据分布" class="headerlink" title="3. 数据分布"></a>3. 数据分布</h4><p>主从同步也常用于数据分布，将不同地区的数据分布到不同的从服务器上，从而降低跨地区访问的延迟，并提高用户体验。</p><h4 id="4-数据分析"><a href="#4-数据分析" class="headerlink" title="4. 数据分析"></a>4. 数据分析</h4><p>通过将从服务器配置为只读，可以在从服务器上进行数据分析和报表生成，而不会影响主服务器的性能。这对于需要进行大量复杂查询的场景非常有用。</p><h3 id="配置主从同步"><a href="#配置主从同步" class="headerlink" title="配置主从同步"></a>配置主从同步</h3><h4 id="1-主服务器配置"><a href="#1-主服务器配置" class="headerlink" title="1. 主服务器配置"></a>1. 主服务器配置</h4><p>在主服务器的my.cnf配置文件中开启二进制日志：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-binlog</span><br><span class="line"><span class="attr">binlog-format</span>=ROW</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-从服务器配置"><a href="#2-从服务器配置" class="headerlink" title="2. 从服务器配置"></a>2. 从服务器配置</h4><p>在从服务器的my.cnf配置文件中配置主服务器的信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在MySQL命令行中执行以下语句连接到主服务器，并启动复制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST<span class="operator">=</span><span class="string">&#x27;主服务器IP&#x27;</span>,</span><br><span class="line">  MASTER_PORT<span class="operator">=</span><span class="string">&#x27;主服务器PORT&#x27;</span>,</span><br><span class="line">  MASTER_USER<span class="operator">=</span><span class="string">&#x27;复制用户&#x27;</span>,</span><br><span class="line">  MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;复制用户密码&#x27;</span>,</span><br><span class="line">  MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;主服务器二进制日志文件&#x27;</span>,</span><br><span class="line">  MASTER_LOG_POS<span class="operator">=</span>主服务器二进制日志位置;</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> SLAVE;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注意事项与优化"><a href="#注意事项与优化" class="headerlink" title="注意事项与优化"></a>注意事项与优化</h3><h4 id="1-主从延迟"><a href="#1-主从延迟" class="headerlink" title="1. 主从延迟"></a>1. 主从延迟</h4><p>在异步复制的情况下，从服务器上的数据可能会有一定的延迟。可以通过适当调整同步的频率、优化网络和硬件等手段来减少延迟。</p><h4 id="2-主从一致性"><a href="#2-主从一致性" class="headerlink" title="2. 主从一致性"></a>2. 主从一致性</h4><p>在主从同步过程中，如果主服务器上的数据发生了不一致的情况，可能会影响从服务器上的数据一致性。因此，在配置主从同步时，需要谨慎处理主从一致性的问题。</p><h4 id="3-监控与报警"><a href="#3-监控与报警" class="headerlink" title="3. 监控与报警"></a>3. 监控与报警</h4><p>建议使用监控工具对主从同步进行实时监控，并设置报警机制，及时发现并解决潜在的问题，确保主从同步的可靠性。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL主从同步是一种强大的数据同步机制，通过合理配置和使用，可以在提高系统性能的同时保证数据的一致性和可用性。在设计数据库架构时，考虑到读写分离、数据备份和分布等需求，主从同步是一个值得考虑的解决方案。通过深入了解主从同步的原理和配置方法，开发人员可以更好地应用这一技术，提升数据库系统的整体性能和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务与服务网格 - 现代应用架构的进化</title>
      <link href="/2019/07/02/microservice-and-service-mesh-for-modern-application/"/>
      <url>/2019/07/02/microservice-and-service-mesh-for-modern-application/</url>
      
        <content type="html"><![CDATA[<p>在当今快速发展的软件开发领域，<code>微服务架构</code>和<code>服务网格</code>成为了构建可扩展、灵活和高效应用的核心技术。本文将探讨微服务架构和服务网格的概念、优势以及它们如何共同推动现代应用架构的进化。</p><h2 id="1-微服务架构概述"><a href="#1-微服务架构概述" class="headerlink" title="1. 微服务架构概述"></a>1. 微服务架构概述</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/microservice/microservice-architecture.png" class="lazyload placeholder" data-srcset="/assets/images/microservice/microservice-architecture.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Microservice Architecture"/></div><span class="image-caption">Microservice Architecture</span></div><p>微服务架构是一种以服务为中心的软件设计方法，将大型应用拆分为一组<code>小型</code>、<code>自治</code>的服务。每个服务都专注于执行特定的业务功能，并通过轻量级通信机制（通常是<code>HTTP</code>或<code>RPC</code>）进行相互通信。微服务架构的核心原则包括：</p><p><strong>服务自治性</strong>：每个微服务都是独立部署、独立扩展和独立管理的。<br><strong>松耦合</strong>：服务之间通过明确定义的接口进行通信，降低了耦合度。<br><strong>技术多样性</strong>：不同的服务可以使用不同的技术栈，选择最适合其需求的技术。</p><p>微服务架构通过将大型系统拆分为小的、可独立部署的服务单元，带来了以下优势：</p><p><strong>灵活性和可扩展性</strong>：每个服务都可以独立部署和扩展，无需影响整个应用。<br><strong>容错性</strong>：一个服务的故障不会影响其他服务的正常运行。<br><strong>团队自治</strong>：不同团队可以独立开发和部署自己的服务，加快了交付速度。</p><h2 id="2-服务网格的崛起"><a href="#2-服务网格的崛起" class="headerlink" title="2. 服务网格的崛起"></a>2. 服务网格的崛起</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/microservice/service-mesh.png" class="lazyload placeholder" data-srcset="/assets/images/microservice/service-mesh.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Service Mesh Architecture"/></div><span class="image-caption">Service Mesh Architecture</span></div><p>随着微服务架构的广泛采用，<code>服务网格</code>作为其演进的自然延伸，提供了对微服务通信、监控和安全性的增强支持。<span class='pbg danger'>服务网格是一种基础设施层，位于应用程序内部，负责管理服务间的所有通信</span>。其主要特征包括：</p><p><strong>透明的服务间通信</strong>：服务网格通过<code>代理模式</code>处理服务间的所有通信，使服务之间的交互对开发者透明。<br><strong>流量管理和负载均衡</strong>：网格可以<code>智能地路由流量</code>、实施负载均衡，以确保高可用性和性能。<br><strong>安全性和策略执行</strong>：网格提供了对通信进行安全加密和执行策略的能力，如<code>访问控制</code>和<code>流量控制</code>。</p><p>服务网格的出现弥补了微服务架构在通信、可观察性和安全性方面的一些挑战，并使得运维团队能够更好地管理大规模微服务应用。</p><h2 id="3-微服务与服务网格的结合"><a href="#3-微服务与服务网格的结合" class="headerlink" title="3. 微服务与服务网格的结合"></a>3. 微服务与服务网格的结合</h2><p>微服务架构和服务网格的结合，为现代应用架构带来了多重好处：</p><p><strong>运维简化</strong>：服务网格通过集中管理和控制服务间的通信，简化了运维工作，降低了运维成本。<br><strong>增强的安全性</strong>：网格提供了安全的服务间通信和访问控制，有助于保护应用程序免受各种网络攻击。<br><strong>流量管理和控制</strong>：通过服务网格，开发团队可以实现复杂的流量管理策略，如A&#x2F;B测试、金丝雀发布等，而无需修改应用代码。</p><p>微服务架构和服务网格共同推动了现代应用架构的演进。它们通过解耦服务、增强通信和安全性，提升了应用的灵活性、可扩展性和可观察性，使得开发团队能够更快速地响应市场需求，提供更好的用户体验。随着技术的进步和应用场景的不断演化，微服务架构和服务网格将继续发挥重要作用，并不断演化和改进，以满足企业在构建和管理复杂应用时的需求和挑战。</p>]]></content>
      
      
      <categories>
          
          <category> Microservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Microservice </tag>
            
            <tag> Service Mesh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Flink 的架构原理、关键特性与应用场景深度解析</title>
      <link href="/2019/04/26/what-is-apache-flink/"/>
      <url>/2019/04/26/what-is-apache-flink/</url>
      
        <content type="html"><![CDATA[<p><code>Apache Flink</code> 是一个开源的分布式流处理框架，以其高效、可扩展和准确的计算能力在实时数据处理领域中占据重要地位。<span class='pbg green'>Flink 不仅支持批处理，还特别强调对流数据处理的优化，具有高吞吐量、低延迟、精确一次性处理语义等特点，适用于大规模数据流处理和实时分析场景</span>。本文将深入探讨 Flink 的架构原理、关键特性以及广泛的应用场景。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/big-data-flink-component-layer.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/big-data-flink-component-layer.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Flink Component Layer" style="width:600px;"/></div><span class="image-caption">Apache Flink Component Layer</span></div><h2 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h2><ol><li>流处理与批处理统一<br>Flink 的核心思想是将流处理（Streaming）和批处理（Batch）统一为一个引擎处理，即流与批在Flink中都是数据流（DataStream）。这种设计使得批处理可以看作是有界流处理，而流处理则可以处理无界数据流。</li><li>分布式数据流执行引擎<br>Flink 架构中的关键组件是任务管理器（TaskManager）和作业管理器（JobManager）。任务管理器负责执行并行的数据流任务，作业管理器负责接收程序、生成执行图，并协调任务执行。</li><li>事件驱动的流处理模型<br>Flink 基于事件驱动的处理模型，支持按时间和事件进行状态管理和窗口计算，保证了处理的精确一次性（Exactly-Once）语义。</li><li>高可用性和容错<br>Flink 支持作业的自动故障恢复和状态的可持久化，通过检查点（Checkpoint）和保存点（Savepoint）来实现恢复。</li><li>内存管理和性能优化<br>Flink 使用堆外内存（Off-heap memory）管理和内存分配算法来优化性能，尽量减少垃圾回收对性能的影响。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/big-data-flink.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/big-data-flink.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Flink" style="width:800px;"/></div><span class="image-caption">Apache Flink</span></div><h4 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h4><p>Flink 的核心架构由多个关键组件构成，这些组件协同工作以实现高效的数据处理和任务执行：<br><strong>JobManager</strong>: 作为 Flink 集群的控制中心，JobManager 负责协调分布式执行。其主要职责包括任务调度、检查点（<code>Checkpoint</code>）管理、故障恢复以及元数据管理。JobManager 确保整个应用的顺利运行，并在发生故障时迅速恢复状态。<br><strong>TaskManager</strong>: TaskManager 是实际执行数据流任务的工作节点。每个 TaskManager 包含一个或多个任务槽（<code>Task Slot</code>），每个任务槽可以执行一个具体的任务。TaskManager 之间通过数据交换网络进行通信，实现数据的并行处理。<br><strong>Dispatcher</strong>: Dispatcher 提供 REST 接口来提交应用，并为每个提交的应用启动一个新的 JobManager。Dispatcher 还负责维护作业的执行状态，并向客户端提供作业执行的详细信息。<br><strong>ResourceManager</strong>: ResourceManager 负责管理任务槽，确保资源的高效利用。它与 JobManager 和 TaskManager 协同工作，动态分配和回收资源，以适应不断变化的工作负载。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/big-data-flink-cluster.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/big-data-flink-cluster.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Flink Cluster" style="width:800px;"/></div><span class="image-caption">Apache Flink Cluster</span></div><h4 id="数据流编程模型"><a href="#数据流编程模型" class="headerlink" title="数据流编程模型"></a>数据流编程模型</h4><p>Flink 提供了两种主要的编程模型：数据流（<code>DataStream</code>）API 和数据集（<code>DataSet</code>）API。<br><strong>DataStream API</strong>: 用于处理<em>无界数据流</em>，支持各种<strong>流处理操作</strong>，如 <code>map</code>、<code>filter</code>、<code>reduce</code>、<code>join</code> 等。DataStream API 允许开发者定义复杂的数据处理逻辑，并支持事件时间（Event Time）和处理时间（Processing Time）的处理。<br><strong>DataSet API</strong>: 用于处理<em>有界数据集</em>，适用于<strong>批处理任务</strong>。DataSet API 提供了丰富的批处理操作，如 map、reduce、join、groupBy 等。DataSet API 通过优化算法和并行执行，实现高效的数据处理。</p><h4 id="分布式执行"><a href="#分布式执行" class="headerlink" title="分布式执行"></a>分布式执行</h4><p>Flink 的分布式执行模型基于流式数据流图（Streaming Dataflow Graph），其中每个操作符（Operator）在不同的 TaskManager 上并行执行。这种设计使得 Flink 能够高效地处理大规模数据，并实现高吞吐和低延迟的数据处理能力。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/big-data/big-data-flink-job.png" class="lazyload placeholder" data-srcset="/assets/images/big-data/big-data-flink-job.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Apache Flink Job Execution" style="width:800px;"/></div><span class="image-caption">Apache Flink Job Execution</span></div><h2 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h2><h4 id="高吞吐与低延迟"><a href="#高吞吐与低延迟" class="headerlink" title="高吞吐与低延迟"></a>高吞吐与低延迟</h4><p>Flink 通过优化内存管理和数据交换机制，实现了<code>高吞吐</code>和<code>低延迟</code>的数据处理能力。Flink 采用<code>流水线数据传输模式</code>，减少数据传输的延迟，并通过内存管理技术，确保数据在内存中的高效利用。</p><h4 id="精确一次（Exactly-Once）语义"><a href="#精确一次（Exactly-Once）语义" class="headerlink" title="精确一次（Exactly-Once）语义"></a>精确一次（Exactly-Once）语义</h4><p>Flink 提供了精确一次的语义保证，通过分布式快照（<code>Checkpoint</code>）和状态管理机制 (<code>State Management</code>)，确保即使在发生故障时，数据处理也能保持一致性和准确性。Flink 的 Checkpoint 机制定期对系统状态进行快照，并在故障恢复时使用这些快照恢复系统状态。状态管理机制，包括基于内存和基于外部存储的状态管理。</p><h4 id="事件时间处理"><a href="#事件时间处理" class="headerlink" title="事件时间处理"></a>事件时间处理</h4><p>Flink 支持事件时间（<code>Event Time</code>）处理，允许用户根据事件发生的时间而不是数据到达的时间来处理数据。这对于处理乱序数据和延迟数据尤为重要。Flink 通过水位线（Watermark）机制，有效地处理事件时间的乱序和延迟问题。</p><h4 id="丰富的连接器"><a href="#丰富的连接器" class="headerlink" title="丰富的连接器"></a>丰富的连接器</h4><p>Flink 提供了丰富的连接器，支持与各种数据源和数据存储系统的集成，如 <code>Kafka</code>、<code>HDFS</code>、<code>Elasticsearch</code>、<code>Cassandra</code> 等。这些连接器使得 Flink 能够轻松地与现有的数据基础设施集成，实现数据的输入和输出。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h4 id="实时数据分析"><a href="#实时数据分析" class="headerlink" title="实时数据分析"></a>实时数据分析</h4><p>Flink 广泛应用于实时数据分析场景，如<code>实时报表</code>、<code>实时监控</code>、<code>实时推荐系统</code>、<code>实时风控</code>等。通过 Flink 的高吞吐和低延迟特性，企业可以快速获取和分析实时数据，从而做出及时的业务决策。</p><h4 id="复杂事件处理（CEP）"><a href="#复杂事件处理（CEP）" class="headerlink" title="复杂事件处理（CEP）"></a>复杂事件处理（CEP）</h4><p>Flink 的复杂事件处理能力使其成为构建实时规则引擎和事件处理系统的理想选择。通过定义复杂的事件模式，Flink 可以实时检测和响应特定的事件序列，如<code>欺诈检测</code>、<code>异常检测</code>等。</p><h4 id="实时流处理"><a href="#实时流处理" class="headerlink" title="实时流处理"></a>实时流处理</h4><p>Flink 在实时流处理领域表现出色，能够处理高并发、高吞吐的流数据。无论是日志处理、实时数据集成还是实时数据清洗，Flink 都能提供高效可靠的解决方案。</p><h4 id="机器学习与迭代计算"><a href="#机器学习与迭代计算" class="headerlink" title="机器学习与迭代计算"></a>机器学习与迭代计算</h4><p>Flink 的<code>迭代计算能力</code>使其适合用于机器学习和图计算等需要大量迭代计算的场景。通过 Flink 的<code>批处理</code>和<code>流处理</code>能力，可以高效地进行模型训练和预测，如实时推荐系统、实时分类器等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Apache Flink 作为一个强大的流处理框架，凭借其<code>高吞吐</code>、<code>低延迟</code>、<code>精确一次语义</code>等关键特性，在实时数据处理领域展现出巨大的潜力。无论是实时数据分析、复杂事件处理还是实时流处理，Flink 都能提供高效可靠的解决方案，满足企业对实时数据处理的需求。随着数据量的不断增长和实时数据处理需求的提升，Flink 将在未来的数据处理领域中发挥越来越重要的作用。</p>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> Big Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka为什么具有高吞吐量和低延迟的特性</title>
      <link href="/2019/02/16/kafka-high-throughput-low-latency/"/>
      <url>/2019/02/16/kafka-high-throughput-low-latency/</url>
      
        <content type="html"><![CDATA[<p>Apache Kafka 是一种分布式流处理平台，具有高吞吐量和低延迟的特征，这些特点使其成为处理大规模实时数据流的理想选择。以下是一些导致 Kafka 具有高吞吐量和低延迟的关键因素：</p><p><strong>分布式架构</strong>：Kafka 是一个分布式系统，允许数据被分割成多个分区，并在多个服务器上进行并行处理。这种分布式架构有助于提高吞吐量，因为数据可以同时在多个节点上进行处理，而不会成为性能瓶颈。</p><p><strong>消息队列模型</strong>：Kafka 使用消息队列模型，它将数据按顺序存储在分区中，每个消息都有一个唯一的偏移量。这使得 Kafka 能够支持顺序读取和写入，而且读写操作的效率非常高。</p><p><strong>持久性存储</strong>：Kafka 具有持久性存储能力，它将消息持久化到磁盘上，即使消费者未及时处理消息，数据也不会丢失。这意味着 Kafka 可以在高吞吐量的情况下保持数据的可靠性，因为数据不会因为故障而丢失。</p><p><strong>批量处理</strong>：Kafka 支持批量处理，生产者和消费者可以一次处理多个消息，从而减少了处理消息的开销，提高了吞吐量。</p><p><strong>水平扩展性</strong>：Kafka 可以轻松地进行水平扩展，通过添加更多的节点来处理更多的负载。这种能力使其能够适应不断增长的数据流量，同时保持低延迟。</p><p><strong>副本机制</strong>：Kafka 使用副本机制来提高可用性和容错性。每个分区可以配置多个副本，如果某个节点出现故障，其他副本仍然可以提供数据，从而降低了数据丢失的风险。</p><p><strong>零拷贝技术</strong>：Kafka 使用零拷贝技术来提高性能。零拷贝允许数据在不涉及额外数据复制的情况下从生产者传输到 Kafka 服务器，以及从 Kafka 服务器传输到消费者，减少了数据传输的开销。</p><p>总的来说，Kafka 的高吞吐量和低延迟特征得益于其分布式架构、消息队列模型、持久性存储、批量处理、水平扩展性、副本机制和零拷贝技术等多种因素的结合。这使得 Kafka 成为处理大规模实时数据流的可靠平台。</p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BI </tag>
            
            <tag> Kafka </tag>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8 的一些新特性</title>
      <link href="/2018/03/13/java8-new-features/"/>
      <url>/2018/03/13/java8-new-features/</url>
      
        <content type="html"><![CDATA[<p><code>Java 8</code> 引入了很多重要的新特性，极大增强了语言的表达力和可读性。下面是一些常用的 Java 8 新特性：</p><h2 id="1-Lambda-表达式"><a href="#1-Lambda-表达式" class="headerlink" title="1. Lambda 表达式"></a>1. Lambda 表达式</h2><p>Lambda 表达式允许你将行为传递给方法，它使得代码更简洁、可读性更强。<span class='pbg danger'>Lambda 表达式是函数式编程的核心。</span></p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br></pre></td></tr></table></figure><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Lambda 表达式简化代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 未使用 Lambda 表达式创建一个线程</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;This thread r1 is not created by Lambda expression&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r1).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式创建一个线程</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;This thread r2 is created by Lambda expression&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出，使用 Lambda 表达式可以简化代码，使得代码更加易读、易写。 </p><h2 id="2-函数式接口-Functional-Interface"><a href="#2-函数式接口-Functional-Interface" class="headerlink" title="2. 函数式接口 (Functional Interface)"></a>2. 函数式接口 (Functional Interface)</h2><p>Java 8 引入了函数式接口的概念。<span class='pbg danger'>函数式接口是指仅有一个抽象方法的接口，可以用 Lambda 表达式来表示。</span>。使用注解<code>@FunctionalInterface</code>来修饰一个接口，函数式接口的定义如下：</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数式接口，只能包含一个抽象方法</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionalInterfaceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 函数式接口可以用Lambda来表示，简化代码</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">addCalculator</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        System.out.println(addCalculator.calc(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出 3</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">minusCalculator</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line">        System.out.println(minusCalculator.calc(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出 -1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>@FunctionalInterface</code> 注解用于明确标示该接口是一个函数式接口，它只能包含一个抽象方法。</p><h2 id="3-Streams-API"><a href="#3-Streams-API" class="headerlink" title="3. Streams API"></a>3. Streams API</h2><p>Java 8 引入了 <code>Streams API</code>，使得集合的操作变得更加简洁、声明式。Streams 允许你以声明性方式处理集合，支持串行和并行的聚合操作。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stream.filter(predicate)</span><br><span class="line">stream.map(function)</span><br><span class="line">stream.reduce(accumulator, combiner)</span><br><span class="line">stream.collect(collector)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C#&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Go&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将List转为stream，使用stream api操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">                .filter(s -&gt; s.length() &gt; <span class="number">2</span>)</span><br><span class="line">                .map(s -&gt; s.toUpperCase())</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(result); <span class="comment">// 输出： JAVA, PYTHON, JAVASCRIPT</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过流操作，可以像 SQL 查询一样进行集合的过滤、排序、映射等操作, 极大的简化了代码的编写。</p><h2 id="4-默认方法-Default-Methods"><a href="#4-默认方法-Default-Methods" class="headerlink" title="4. 默认方法 (Default Methods)"></a>4. 默认方法 (Default Methods)</h2><span class='pbg danger'>Java 8 允许接口有默认方法，实现了接口的类可以不再必须提供该方法的实现，这为接口的演化提供了更好的向后兼容性。</span>。默认方法允许接口新增方法，不强制要求所有实现类修改代码。<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">return</span>-type method-name(parameters) &#123;</span><br><span class="line">    <span class="comment">// method body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="comment">// 定义默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;something flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="comment">// Bird可以不需要提供fly()的实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultMethodExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        bird.fly(); <span class="comment">// 输出： something flying</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过默认方法，接口的新增功能不再强制要求所有实现类修改代码。为接口的演化提供了更好的向后兼容性。</p><h2 id="5-方法引用-Method-References"><a href="#5-方法引用-Method-References" class="headerlink" title="5. 方法引用 (Method References)"></a>5. 方法引用 (Method References)</h2><span class='pbg danger'>方法引用是一种更简洁的 Lambda 表达式写法，可以直接引用已有方法来代替 Lambda 表达式。</span>。<h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class::staticMethod</span><br><span class="line">object::instanceMethod</span><br><span class="line">Class::instanceMethod</span><br></pre></td></tr></table></figure><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C#&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Lambda表达式</span></span><br><span class="line">        list.forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用方法引用来替代 Lambda 表达式</span></span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中的 <code>System.out::println</code> 是对 <code>System.out.println</code> 的方法引用。它等价于 <code>(s) -&gt; System.out.println(s)</code>。</p><h2 id="6-Optional-类"><a href="#6-Optional-类" class="headerlink" title="6. Optional 类"></a>6. Optional 类</h2><span class='pbg danger'>`Optional` 类是 Java 8 引入的新类，用于避免空指针异常（NullPointerException）。</span> 。它提供了一个容器，可能包含值，也可能为空，避免直接操作 null 值。<h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional.of(value)</span><br><span class="line">Optional.empty()</span><br><span class="line">Optional.ofNullable(value)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个Optional对象</span></span><br><span class="line">        Optional&lt;String&gt; optional = Optional.of(<span class="string">&quot;Java 8&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果值存在，则打印，如果值不存在，则打印默认值</span></span><br><span class="line">        System.out.println(optional.orElse(<span class="string">&quot;Java&quot;</span>)); <span class="comment">// 输出 Java 8</span></span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; nullOptional = Optional.ofNullable(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(nullOptional.orElse(<span class="string">&quot;Java&quot;</span>)); <span class="comment">// 输出 Java</span></span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; emptyOptional = Optional.empty();</span><br><span class="line">        System.out.println(emptyOptional.orElse(<span class="string">&quot;Java&quot;</span>)); <span class="comment">// 输出 Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span class='pbg info'>Optional 强烈推荐用于方法的返回值，用来明确表达某个值可能为空。</span><h2 id="7-新的日期时间-API-java-time"><a href="#7-新的日期时间-API-java-time" class="headerlink" title="7. 新的日期时间 API (java.time)"></a>7. 新的日期时间 API (java.time)</h2><span class='pbg danger'>Java 8 引入了全新的日期时间 API，解决了老的 java.util.Date 和 java.util.Calendar 的一些缺陷。</span> 新 API 更加灵活、清晰和不可变。<h4 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前的日期和时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;Current date and time: &quot;</span> + now);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式化日期</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">03</span>, <span class="number">13</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formatted date: &quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间加法</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">nextWeek</span> <span class="operator">=</span> now.plusWeeks(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;One week later: &quot;</span> + nextWeek);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span class='pbg success'>`java.time` 包中的类是不可变的（immutable），因此它们天生是线程安全的。</span><h2 id="8-新的-java-util-function-包"><a href="#8-新的-java-util-function-包" class="headerlink" title="8. 新的 java.util.function 包"></a>8. 新的 java.util.function 包</h2><p><code>java.util.function</code> 包提供了大量的常用函数式接口，如 <code>Predicate</code>, <code>Function</code>, <code>Consumer</code>, <code>Supplier</code> 等，可以简化很多操作。</p><h4 id="示例：-6"><a href="#示例：-6" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 Function 接口进行映射操作, Function 接口是一个接受一个参数并返回一个结果的函数。</span></span><br><span class="line">        Function&lt;String, Integer&gt; stringLength = s -&gt; s.length();</span><br><span class="line">        System.out.println(stringLength.apply(<span class="string">&quot;Hello&quot;</span>));  <span class="comment">// 输出 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Predicate 接口进行过滤操作, Predicate 接口是一个接受一个参数并返回一个布尔值的函数。</span></span><br><span class="line">        Predicate&lt;String&gt; isNotEmpty = s -&gt; !s.isEmpty();</span><br><span class="line">        System.out.println(isNotEmpty.test(<span class="string">&quot;Hello&quot;</span>));  <span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Consumer 接口进行输出操作, Consumer 接口是一个接受一个参数但不返回值的函数。</span></span><br><span class="line">        Consumer&lt;String&gt; printString = s -&gt; System.out.println(s);</span><br><span class="line">        printString.accept(<span class="string">&quot;Hello&quot;</span>);  <span class="comment">// 输出 Hello</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Supplier 接口进行生成操作, Supplier 接口是一个不接受参数并返回一个值的函数。</span></span><br><span class="line">        Supplier&lt;String&gt; helloSupplier = () -&gt; <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(helloSupplier.get());  <span class="comment">// 输出 Hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-重复注解-Repeating-Annotations"><a href="#9-重复注解-Repeating-Annotations" class="headerlink" title="9. 重复注解 (Repeating Annotations)"></a>9. 重复注解 (Repeating Annotations)</h2><p>Java 8 支持<code>重复注解</code>的定义，允许同一个注解在同一个元素上出现多次。使用 <code>@Repeatable</code> 注解来标记。</p><h4 id="示例：-7"><a href="#示例：-7" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="meta">@interface</span> Schedule &#123;</span><br><span class="line">    String <span class="title function_">month</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;January&quot;</span>;</span><br><span class="line">    String <span class="title function_">day</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;First&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">hour</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Schedules &#123;</span><br><span class="line">    Schedule[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Schedule(day = &quot;Monday&quot;, hour=12)</span></span><br><span class="line"><span class="meta">@Schedule(month = &quot;March&quot;, day = &quot;Friday&quot;, hour=1)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySchedule</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RepeatingAnnotationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Schedule[] annos = MySchedule.class.getAnnotationsByType(Schedule.class);</span><br><span class="line">        <span class="keyword">for</span> (Schedule s: annos) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Month: %s, Day: %s, Hour: %d\n&quot;</span>, s.month(), s.day(), s.hour());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过重复注解，可以在同一个类或方法上应用多个相同的注解。</p><h2 id="10-Nashorn-JavaScript-引擎"><a href="#10-Nashorn-JavaScript-引擎" class="headerlink" title="10. Nashorn JavaScript 引擎"></a>10. Nashorn JavaScript 引擎</h2><p>Java 8 引入了新的 JavaScript 引擎 <code>Nashorn</code>，它比之前的 Rhino 引擎性能更高，并且可以更容易地与 Java 代码进行交互。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NashornExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ScriptException &#123;</span><br><span class="line">        <span class="type">ScriptEngine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>().getEngineByName(<span class="string">&quot;nashorn&quot;</span>);</span><br><span class="line">        engine.eval(<span class="string">&quot;print(&#x27;Hello from JavaScript!&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Nashorn，可以直接在 Java 中运行 JavaScript 代码，增强了 Java 与其他语言的集成能力。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java 8 引入了许多新特性，提升了语言的表达力，增加了函数式编程的支持，简化了代码的编写和可维护性。通过使用 <code>Lambda 表达式</code>、<code>函数式接口</code>、<code>方法引用</code>、<code>Streams API</code>、<code>默认方法</code>、<code>Optional 类</code>、<code>java.time</code> 等特性，Java 开发者可以编写更简洁、高效、易于理解的代码。这些特性不仅提升了代码的可读性，还增强了代码的性能和可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈Docker与虚拟机</title>
      <link href="/2018/02/17/docker-vs-virtual-machine/"/>
      <url>/2018/02/17/docker-vs-virtual-machine/</url>
      
        <content type="html"><![CDATA[<p>在当今的计算机科技迅速发展的时代，<code>Docker</code> 和<code>虚拟机（Virtual Machine, VM）</code>作为两种重要的技术，各自发挥着不可或缺的作用。它们在软件开发、测试以及生产环境中都得到了广泛应用。我们将详细探讨 Docker 和虚拟机的工作原理，并比较它们之间的区别。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/docker/docker-vs-vm.png" class="lazyload placeholder" data-srcset="/assets/images/docker/docker-vs-vm.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Docker vs VM"/></div><span class="image-caption">Docker vs VM</span></div><h2 id="虚拟机的原理"><a href="#虚拟机的原理" class="headerlink" title="虚拟机的原理"></a>虚拟机的原理</h2><p><code>虚拟机</code>是一种模拟计算机系统的技术，可以在物理计算机（宿主机）上创建多个虚拟计算机（虚拟机）。每个虚拟机都有自己的操作系统、应用程序和独立的硬件资源。虚拟机的实现依赖于<code>虚拟化技术</code>，这种技术通过在宿主机上安装一个叫做“虚拟机监控器”（<code>Hypervisor</code>）的软件来实现。</p><h3 id="虚拟机的工作过程"><a href="#虚拟机的工作过程" class="headerlink" title="虚拟机的工作过程"></a>虚拟机的工作过程</h3><p><strong>宿主机</strong>：运行虚拟机监控器的物理服务器，提供 CPU、内存和存储等资源。<br><strong>虚拟机监控器</strong>：在宿主机上运行的管理软件，负责创建、管理和分配虚拟机资源。<br><strong>虚拟机</strong>：在虚拟机监控器上运行的操作系统，虚拟机就像一台真实的计算机，具有自己的操作系统和应用程序。</p><span class='pbg danger'>在虚拟机中，`每个虚拟机都拥有自己的操作系统实例`，这使得它们可以独立运行各种软件和服务</span>。由于虚拟机提供了完整的隔离环境，因此可以在同一台宿主机上运行不同版本的操作系统。<h2 id="Docker的原理"><a href="#Docker的原理" class="headerlink" title="Docker的原理"></a>Docker的原理</h2><p><code>Docker</code> 是一种<code>容器化技术(Containery)</code>，它通过将应用程序及其所有依赖项打包在一个可移植的容器中，使得应用程序可以在任何环境中一致地运行。<span class='pbg danger'>与虚拟机不同，Docker 不需要在每个容器中安装完整的操作系统，而是共享宿主机的操作系统内核。</span></p><h3 id="Docker的工作过程"><a href="#Docker的工作过程" class="headerlink" title="Docker的工作过程"></a>Docker的工作过程</h3><p><strong>宿主机</strong>：运行 <code>Docker 引擎（Docker Engine）</code>的物理服务器，提供 CPU、内存和存储等资源。<br><strong>Docker 引擎</strong>：管理 Docker 容器的核心组件，包括容器的创建、运行、停止和删除。<br><strong>Docker 容器</strong>：轻量级的独立运行环境，包含应用程序及其所有依赖项，但共享宿主机的操作系统内核。</p><p>由于 Docker 容器的轻量级特性，多个容器可以快速启动和停止，且相互之间几乎不占用额外的资源。这使得 Docker 特别适合于微服务架构和持续集成&#x2F;持续部署（CI&#x2F;CD）环境。</p><h2 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h2><p>虽然 Docker 和虚拟机都可以用于隔离应用程序，但它们在原理、性能和使用场景等方面存在显著区别。</p><table><thead><tr><th>特点</th><th>Docker（容器）</th><th>虚拟机 (VM)</th></tr></thead><tbody><tr><td>架构</td><td>共享宿主机的操作系统内核</td><td>每个虚拟机有独立的操作系统</td></tr><tr><td>启动速度</td><td>启动速度快，通常在几秒内</td><td>启动速度慢，可能需要几分钟</td></tr><tr><td>资源开销</td><td>占用较少的资源，适合高密度部署</td><td>占用较多的资源，较适合低密度部署</td></tr><tr><td>隔离程度</td><td>轻度隔离，适合同一操作系统中的应用</td><td>完全隔离，适合不同操作系统的应用</td></tr><tr><td>镜像管理</td><td>使用分层文件系统，节省存储空间</td><td>每个虚拟机镜像比较大，资源利用率较低</td></tr><tr><td>使用场景</td><td>适合快速开发、测试和微服务架构</td><td>适合需要完整操作系统和应用的场景</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Docker 和虚拟机各有其优势与适用场景。<span class='pbg info'>虚拟机提供了更强的隔离性和兼容性，适合在需要不同操作系统的环境中使用；而 Docker 由于其轻量和快速启动的特点，更适合于现代应用的开发和部署</span>。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Virtual Machine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的双亲委派机制是什么？有哪些方式可以打破双亲委派机制</title>
      <link href="/2018/01/05/java-shuang-qin-weipai-jizi/"/>
      <url>/2018/01/05/java-shuang-qin-weipai-jizi/</url>
      
        <content type="html"><![CDATA[<h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p><code>双亲委派机制</code>（Parent-Delegation Model）是Java类加载机制中的一个重要概念。它是一种类加载的层次结构和机制，用于确保类的安全性和一致性。根据这一机制，类加载器在加载类时首先尝试委托给其父类加载器，只有当父类加载器无法加载该类时，才会由当前类加载器来尝试加载。这一机制的目的是保护Java运行时环境的稳定性和安全性，防止用户自定义的类破坏Java核心库。</p><p>双亲委派机制通常分为以下三层：</p><p><strong>启动类加载器（Bootstrap ClassLoader）</strong>：它是JVM的一部分，负责加载Java的核心类库，如java.lang和java.util等。这是类加载层次结构的根，是最顶层的类加载器，通常由Java虚拟机的本地实现提供，它不是Java代码实现的类加载器。</p><p><strong>扩展类加载器（Extension ClassLoader）</strong>：它用于加载Java的扩展类，通常位于jre&#x2F;lib&#x2F;ext目录下。扩展类加载器负责加载javax包中的类等。它是由启动类加载器加载的。</p><p><strong>应用程序类加载器（Application ClassLoader）</strong>：也称为系统类加载器，这是应用程序开发者最常接触的类加载器，它负责加载应用程序的类，通常从类路径（Classpath）中加载。它是由扩展类加载器加载的。</p><p>一旦一个类需要被加载，类加载器会首先尝试委派给父类加载器加载。如果父类加载器无法加载该类，那么子类加载器才会尝试加载。这种级联的加载机制确保了类的一致性和安全性。</p><p>如果您尝试编写一个与Java核心类（如java.lang包中的类）具有相同名称和完全相同的类，并将其放在类路径中，双亲委派加载机制将尝试加载这个自定义类。但由于Java核心类已经由启动类加载器加载，双亲委派加载机制会优先加载核心类。这意味着您的自定义类不会替代Java核心类，而会被忽略。</p><p>这种机制确保了Java核心类的唯一性和安全性，防止应用程序或开发者无意中替代或修改核心类，从而维护了Java平台的稳定性。如果要扩展或修改Java核心类的行为，通常需要通过其他手段，例如继承或实现接口，而不是直接替换核心类。</p><h3 id="打破双亲委派机制"><a href="#打破双亲委派机制" class="headerlink" title="打破双亲委派机制"></a>打破双亲委派机制</h3><p>虽然双亲委派机制有利于确保Java核心库的稳定性，但有时候用户可能需要打破这一机制。有一些情况下可以考虑打破双亲委派机制：</p><p><strong>自定义类加载器</strong>：如果需要实现自定义的类加载器，需要继承ClassLoader类并重写其loadClass方法，以实现自定义的类加载逻辑。</p><p><strong>动态代理类</strong>：某些动态代理类或字节码生成框架可能需要在运行时生成和加载类，这可能需要打破双亲委派机制以实现特定的加载逻辑。</p><p><strong>模块化系统</strong>：在Java 9及以后版本中，引入了模块化系统，该系统提供了更灵活的类加载和模块定义机制，使得可以更精细地控制类加载过程。</p><p>打破双亲委派机制需要谨慎处理，因为它可能会引入类加载冲突和安全问题。在自定义类加载器或使用动态代理等情况下，需要仔细考虑潜在的问题，确保不会破坏Java运行时环境的稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式详解与应用</title>
      <link href="/2017/05/19/design-pattern-singleton/"/>
      <url>/2017/05/19/design-pattern-singleton/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在软件开发中，设计模式是一种解决常见问题的经验总结，它提供了一套可复用的解决方案，帮助开发人员更高效地编写可维护和可扩展的代码。单例模式是设计模式中的一种，它确保一个类只有一个实例，并提供一个全局访问点。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/design-pattern/singleton-pattern.webp" class="lazyload placeholder" data-srcset="/assets/images/design-pattern/singleton-pattern.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Singleton Pattern" style="width:800px;"/></div><span class="image-caption">Singleton Pattern</span></div><h3 id="单例模式的应用场景"><a href="#单例模式的应用场景" class="headerlink" title="单例模式的应用场景"></a>单例模式的应用场景</h3><p>单例模式适用于以下情况：</p><p><strong>资源共享的场景</strong>： 在整个系统中，需要共享某个资源，例如配置信息、数据库连接池等。<br><strong>控制资源的访问</strong>： 在多线程的情况下，避免多个线程同时访问某个资源，引起数据不一致。<br><strong>实例控制</strong>： 某些类创建实例需要消耗较多资源，通过单例模式可以减少实例的创建，提高性能。</p><h3 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h3><p>废话不多说，直接Show代码吧，这里演示下三种创建单例模式的代码</p><h5 id="1-饿汉式单例模式"><a href="#1-饿汉式单例模式" class="headerlink" title="1. 饿汉式单例模式"></a>1. 饿汉式单例模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 在类加载时就创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法，防止外部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供全局访问点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-懒汉式单例模式（双重检查锁）"><a href="#2-懒汉式单例模式（双重检查锁）" class="headerlink" title="2. 懒汉式单例模式（双重检查锁）"></a>2. 懒汉式单例模式（双重检查锁）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 首次判断是否已经初始化过</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123; <span class="comment">// 加锁，一次只允许一个线程进入</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123; <span class="comment">// 再次检查是否为空，因为 instance = new Singleton() 并非原子性操作</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-静态内部类单例模式"><a href="#3-静态内部类单例模式" class="headerlink" title="3. 静态内部类单例模式"></a>3. 静态内部类单例模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 私有静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单例模式的应用示例"><a href="#单例模式的应用示例" class="headerlink" title="单例模式的应用示例"></a>单例模式的应用示例</h3><p>假设我们有一个日志记录器，我们希望在整个应用程序中只有一个实例记录日志，可以使用单例模式来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Logger</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Logger.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Logger</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Log: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在应用中，我们可以通过以下方式获取日志记录器的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getInstance();</span><br><span class="line">logger.log(<span class="string">&quot;This is a log message.&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过单例模式，确保了整个应用程序只有一个日志记录器实例，避免了资源浪费和数据不一致的问题。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>单例模式是一种简单而强大的设计模式，可以有效地解决特定问题，例如资源共享、实例控制等。在使用单例模式时，需要注意线程安全性，选择适合场景的实现方式。通过合理应用设计模式，我们能够编写出更加健壮和可维护的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SOLID原则：构建稳健软件的五大支柱</title>
      <link href="/2017/04/30/solid-principle/"/>
      <url>/2017/04/30/solid-principle/</url>
      
        <content type="html"><![CDATA[<p>在软件开发领域，<code>SOLID原则</code>是一组设计原则，旨在提高代码的可维护性、可读性和可扩展性。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="/assets/images/design-pattern/solid-principles.webp" class="lazyload placeholder" data-srcset="/assets/images/design-pattern/solid-principles.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="SOLID Principles" style="width:800px;"/></div><span class="image-caption">SOLID Principles</span></div><p>这五个原则分别是<br><strong>单一职责原则</strong>（Single Responsibility Principle，简称SRP）<br><strong>开放封闭原则</strong>（Open&#x2F;Closed Principle，简称OCP）<br><strong>里氏替换原则</strong>（Liskov Substitution Principle，简称LSP）<br><strong>接口隔离原则</strong>（Interface Segregation Principle，简称ISP）<br><strong>依赖反转原则</strong>（Dependency Inversion Principle，简称DIP）<br>本文将详细解释每个原则，并通过实际例子说明它们的应用。</p><h3 id="1-单一职责原则（SRP）"><a href="#1-单一职责原则（SRP）" class="headerlink" title="1. 单一职责原则（SRP）"></a>1. 单一职责原则（SRP）</h3><p>单一职责原则指一个类应该只有一个引起变化的原因。换句话说，一个类应该只负责一个功能领域。这有助于降低类的复杂性，使其更容易理解和维护。</p><p>例子： 假设有一个负责处理用户信息的类，包括验证用户、存储用户信息、发送邮件等功能。如果将这些功能拆分成独立的类，比如一个负责验证，一个负责存储，一个负责邮件发送，就能更好地遵循单一职责原则。</p><h5 id="不遵循单一职责原则的设计"><a href="#不遵循单一职责原则的设计" class="headerlink" title="不遵循单一职责原则的设计"></a>不遵循单一职责原则的设计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不遵循单一职责原则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">authenticateUser</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 验证用户</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存用户信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">(User user, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送邮件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="遵循单一职责原则的改进"><a href="#遵循单一职责原则的改进" class="headerlink" title="遵循单一职责原则的改进"></a>遵循单一职责原则的改进</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遵循单一职责原则的改进</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Authenticator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">authenticateUser</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 验证用户</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 保存用户信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmailSender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">(User user, String message)</span> &#123;</span><br><span class="line">        <span class="comment">// 发送邮件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-开放封闭原则（OCP）"><a href="#2-开放封闭原则（OCP）" class="headerlink" title="2. 开放封闭原则（OCP）"></a>2. 开放封闭原则（OCP）</h3><p>开放封闭原则要求软件实体（类、模块、函数等）应该对扩展是开放的，对修改是封闭的。这意味着我们应该通过添加新代码而不是修改现有代码来引入新功能。</p><p>例子： 考虑一个负责绘制图形的类，最初只支持矩形的绘制。遵循开放封闭原则，我们可以通过创建新的子类（例如，圆形绘制类）来扩展功能，而不是修改原有的绘制类。</p><h5 id="不遵循开放封闭原则的设计"><a href="#不遵循开放封闭原则的设计" class="headerlink" title="不遵循开放封闭原则的设计"></a>不遵循开放封闭原则的设计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不遵循开放封闭原则的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeDrawer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shape.getType().equals(<span class="string">&quot;rectangle&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 绘制矩形</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape.getType().equals(<span class="string">&quot;circle&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 绘制圆形</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="遵循开放封闭原则的改进"><a href="#遵循开放封闭原则的改进" class="headerlink" title="遵循开放封闭原则的改进"></a>遵循开放封闭原则的改进</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遵循开放封闭原则的改进</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 绘制矩形</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 绘制圆形</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeDrawer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Shape shape)</span> &#123;</span><br><span class="line">        shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-里氏替换原则（LSP）"><a href="#3-里氏替换原则（LSP）" class="headerlink" title="3. 里氏替换原则（LSP）"></a>3. 里氏替换原则（LSP）</h3><p>里氏替换原则规定，子类应该能够替换其基类而不改变程序的正确性。如果一个软件实体使用基类，那么替换为其子类也不应该导致程序出错。</p><p>例子： 假设有一个处理图形面积的类，可以接受任何继承自图形基类的对象。如果一个子类（如矩形）的面积计算不正确，那么它违反了里氏替换原则。</p><h5 id="违反里氏替换原则的设计"><a href="#违反里氏替换原则的设计" class="headerlink" title="违反里氏替换原则的设计"></a>违反里氏替换原则的设计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 违反里氏替换原则的设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 默认实现，可以在子类中覆盖</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> width, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里故意错误地将宽度和高度相加而不是相乘</span></span><br><span class="line">        <span class="keyword">return</span> width + height; <span class="comment">// 错误的面积计算</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="遵循里氏替换原则的改进"><a href="#遵循里氏替换原则的改进" class="headerlink" title="遵循里氏替换原则的改进"></a>遵循里氏替换原则的改进</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 基类，所有图形都应该继承自它</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 默认实现，可以在子类中覆盖</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> width, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height; <span class="comment">// 矩形的面积计算</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> side;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Square</span><span class="params">(<span class="type">double</span> side)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.side = side;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> side * side; <span class="comment">// 正方形的面积计算</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius; <span class="comment">// 圆形的面积计算</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-接口隔离原则（ISP）"><a href="#4-接口隔离原则（ISP）" class="headerlink" title="4. 接口隔离原则（ISP）"></a>4. 接口隔离原则（ISP）</h3><p>接口隔离原则要求一个类不应该被强迫实现它用不到的接口。换句话说，一个类应该只依赖于它需要的接口。</p><p>例子： 假设有一个处理飞行器的类，如果将飞机和潜艇的功能都放在同一个接口中，那么某些类可能会被迫实现它们用不到的方法。通过拆分接口，每个类只需实现其需要的接口，从而遵循接口隔离原则。</p><h5 id="不遵循接口隔离原则的设计"><a href="#不遵循接口隔离原则的设计" class="headerlink" title="不遵循接口隔离原则的设计"></a>不遵循接口隔离原则的设计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 违反接口隔离原则的设计</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Aircraft</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dive</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Airplane</span> <span class="keyword">implements</span> <span class="title class_">Aircraft</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Airplane is flying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Airplane doesn&#x27;t dive, so this method is not meaningful.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Submarine</span> <span class="keyword">implements</span> <span class="title class_">Aircraft</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Submarine can&#x27;t fly, so this method is not meaningful.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dive</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Submarine is diving.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="遵循接口隔离原则的改进"><a href="#遵循接口隔离原则的改进" class="headerlink" title="遵循接口隔离原则的改进"></a>遵循接口隔离原则的改进</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口隔离原则改进后的设计</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FlyingAircraft</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DivingAircraft</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dive</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Airplane</span> <span class="keyword">implements</span> <span class="title class_">FlyingAircraft</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Airplane is flying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Submarine</span> <span class="keyword">implements</span> <span class="title class_">DivingAircraft</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dive</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Submarine is diving.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-依赖反转原则（DIP）"><a href="#5-依赖反转原则（DIP）" class="headerlink" title="5. 依赖反转原则（DIP）"></a>5. 依赖反转原则（DIP）</h3><p>依赖反转原则要求高层模块不应该依赖于底层模块，而是应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><p>例子： 考虑一个购物车类，最初可能直接依赖于具体的支付方式，如信用卡支付类。通过引入一个支付接口并让具体支付类实现它，购物车类就可以依赖于抽象而不是具体的实现，符合依赖反转原则。</p><h5 id="不遵循依赖反转原则的设计"><a href="#不遵循依赖反转原则的设计" class="headerlink" title="不遵循依赖反转原则的设计"></a>不遵循依赖反转原则的设计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不符合依赖反转原则的设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCardPayment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing payment using Credit Card.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CreditCardPayment paymentMethod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShoppingCart</span><span class="params">(CreditCardPayment paymentMethod)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paymentMethod = paymentMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Checkout process initiated.&quot;</span>);</span><br><span class="line">        paymentMethod.processPayment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="遵循依赖反转原则的改进"><a href="#遵循依赖反转原则的改进" class="headerlink" title="遵循依赖反转原则的改进"></a>遵循依赖反转原则的改进</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 符合依赖反转原则的设计</span></span><br><span class="line"><span class="comment">// 支付接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体的信用卡支付类实现了支付接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCardPayment</span> <span class="keyword">implements</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processPayment</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing payment using Credit Card.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 购物车类依赖于支付接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Payment paymentMethod;  <span class="comment">// 依赖抽象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShoppingCart</span><span class="params">(Payment paymentMethod)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paymentMethod = paymentMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Checkout process initiated.&quot;</span>);</span><br><span class="line">        paymentMethod.processPayment();  <span class="comment">// 通过接口调用支付方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在软件开发中，SOLID原则提供了一种设计良好且易于维护的架构。遵循这些原则有助于降低代码的复杂性，提高可读性，并使代码更容易扩展和维护。通过深入理解和实践这些原则，开发人员可以构建出更为健壮、可维护的软件系统。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SOLID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊前端优化手段防抖</title>
      <link href="/2017/03/16/liao-liao-qian-duan-you-hua-shou-duan-fang-dou/"/>
      <url>/2017/03/16/liao-liao-qian-duan-you-hua-shou-duan-fang-dou/</url>
      
        <content type="html"><![CDATA[<p>在前端开发中，<strong>防抖（Debouncing）</strong> 是一种常用的优化技术，用于处理频繁触发的事件，如浏览器窗口的resize、input输入等。<strong>防抖的目标是在事件被触发后，等待一段时间，只执行一次事件处理函数，以避免频繁的重复操作</strong>。</p><p><strong>防抖的原理</strong>很简单：当一个事件被触发时，立即设置一个定时器，在规定的时间内没有再次触发该事件时，执行事件处理函数。如果在定时器规定的时间内再次触发了事件，那么就清除前一个定时器，并重新设置新的定时器。这样，只有在事件停止触发一段时间后，才会执行事件处理函数。</p><p>以下是一个防抖的基本实现示例（使用 JavaScript）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer); <span class="comment">// 每次执行时，清除之前的定时器</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//设置新的定时器</span></span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debounceFunction = <span class="title function_">debounce</span>(<span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Debounce function called&quot;</span>, args);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, debounceFunction);</span><br></pre></td></tr></table></figure><span id="more"></span><p>在上面的示例中，debounce 函数接受两个参数：<strong>要执行的事件处理函数</strong>和<strong>延迟时间</strong>（规定的等待时间）。在事件被触发时，debounce 返回一个新的函数，该函数会设置一个定时器来等待延迟时间，然后执行事件处理函数。</p><p>防抖的实现可以根据需要进行适当的调整，例如增加立即执行选项，即在事件触发时立即执行一次事件处理函数，然后再进入防抖模式。这样可以在事件触发的瞬间即时响应，同时仍然保留了后续的防抖效果。</p><p>现在在上面防抖的基础上多增加一个参数，<strong>immediate</strong>， 参数值为true时，函数立即执行，为false时延时执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;    <span class="comment">// immediate为true，立即执行</span></span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args); <span class="comment">// 立即执行一次事件处理函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            timer = <span class="literal">null</span>; <span class="comment">// delay时间到后，将计时器设置null，下一次立即执行</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//immediate为false，延时执行</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args); <span class="comment">// 在延迟时间后执行事件处理函数</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用防抖处理事件，第一次触发立即执行，之后每次触发等待300毫秒后执行</span></span><br><span class="line"><span class="keyword">const</span> debouncedFunction = <span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Debounce function called.&quot;</span>);</span><br><span class="line">&#125;, <span class="number">500</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, debouncedFunction);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总的来说，防抖是一种有效的优化手段，可以帮助减少频繁触发的事件造成的重复操作，提升前端应用的性能和用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个免费高质量的图片分享平台</title>
      <link href="/2017/02/23/yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai/"/>
      <url>/2017/02/23/yi-ge-mian-fei-gao-zhi-liang-de-tu-pian-fen-xiang-ping-tai/</url>
      
        <content type="html"><![CDATA[<p>很多时候在写文章或者制作PPT时需要用到一些图片资源，最近刚好发现了一个实用的高分辨率的免费资源平台Unspash, 跟大家分享一下。<br><img src="/assets/images/ziyuan/laptop-1.png" class="lazyload placeholder" data-srcset="/assets/images/ziyuan/laptop-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><a href="https://unsplash.com/" title="免费高质量的图片分享平台">Unsplash.com</a> 是一个知名的免费高质量图片分享平台，提供各种类型的高分辨率摄影图片供用户免费下载和使用。这些图片可以用于个人、商业、创意和学术项目，包括网站、博客、社交媒体、演示文稿等。</p><span id="more"></span><p>这个平台的特点包括：</p><p><strong>高质量图片：</strong> Unsplash 上的图片质量往往很高，包括风景、人物、食物、建筑等多种主题。这些图片通常由专业摄影师拍摄，因此在设计和内容创作中具有很大的价值。<br><img src="/assets/images/ziyuan/fengjing-1.png" class="lazyload placeholder" data-srcset="/assets/images/ziyuan/fengjing-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>免费使用：</strong> Unsplash 的图片都是免费提供的，无需付费或订阅。用户可以自由下载、编辑和使用这些图片，而不需要担心版权问题。<br><img src="/assets/images/ziyuan/coding-1.png" class="lazyload placeholder" data-srcset="/assets/images/ziyuan/coding-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>简单的许可：</strong> Unsplash 使用的是创作共用许可（Creative Commons Zero License），这意味着用户可以自由使用这些图片，甚至可以用于商业目的，无需给予作者署名。<br><img src="/assets/images/ziyuan/license-1.png" class="lazyload placeholder" data-srcset="/assets/images/ziyuan/license-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>搜索和浏览功能：</strong> Unsplash 网站提供搜索功能和浏览不同主题的图片集合，帮助用户快速找到符合自己需求的图片。<br><img src="/assets/images/ziyuan/search-1.png" class="lazyload placeholder" data-srcset="/assets/images/ziyuan/search-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>社区和创作者：</strong> Unsplash 构建了一个活跃的摄影师社区，用户可以查看摄影师的个人主页，了解他们的作品，并选择关注自己喜欢的创作者。<br><img src="/assets/images/ziyuan/community-1.png" class="lazyload placeholder" data-srcset="/assets/images/ziyuan/community-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>总的来说，Unsplash.com 是一个受欢迎的图片资源平台，适用于需要高质量图片的个人和商业项目。真的是一个很棒的资源平台！</p>]]></content>
      
      
      <categories>
          
          <category> Resources </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高清图片 </tag>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短子数组之和</title>
      <link href="/2016/03/01/minimum-size-subarray-sum/"/>
      <url>/2016/03/01/minimum-size-subarray-sum/</url>
      
        <content type="html"><![CDATA[<p>一个常见的最短子数组算法题是 “Minimum Size Subarray Sum”。在这个问题中，给定一个正整数数组和一个目标值，要找到数组中一个连续子数组，使得子数组的元素和大于等于目标值，并且子数组的长度最小。</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入： </span><br><span class="line">数组: [5, 3, 4, 2, 8, 5];  目标值: 10</span><br><span class="line">输出：</span><br><span class="line">[2, 8]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入： </span><br><span class="line">数组: [5, 3, 4, 2, 8, 5];  目标值: 28</span><br><span class="line">输出：</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入： </span><br><span class="line">数组: [5, 3, 4, 2, 8, 5];  目标值: 4</span><br><span class="line">输出：</span><br><span class="line">[5]</span><br></pre></td></tr></table></figure><p>这个问题可以使用双指针来解决窗口的滑动问题，核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] minSizeSubArray(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="number">0</span>, p2 = <span class="number">0</span>; <span class="comment">//定义两个指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minLeft</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最小子数组的左边界</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">minLen</span> <span class="operator">=</span> Integer.MAX_VALUE; <span class="comment">// 最小子数组的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">//子数组元素和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (p2 = <span class="number">0</span>; p2 &lt; numbers.length; p2++) &#123;</span><br><span class="line">        sum += numbers[p2]; <span class="comment">// 将右指针的元素加入子数组</span></span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= target) &#123; <span class="comment">// 如果子数组的和大于等于目标值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">curLen</span> <span class="operator">=</span> p2 - p1 + <span class="number">1</span>; <span class="comment">// 获取当前子数组长度</span></span><br><span class="line">            <span class="keyword">if</span> (minLen &gt; curLen) &#123; <span class="comment">// 如果子数组长度比上次还更小</span></span><br><span class="line">                minLen = curLen; <span class="comment">// 更新子数组最小长度</span></span><br><span class="line">                minLeft = p1;   <span class="comment">// 更新子数组的左边界</span></span><br><span class="line">            &#125;</span><br><span class="line">            sum -= numbers[p1]; <span class="comment">// 将左指针的元素从子数组中移除</span></span><br><span class="line">            p1++;   <span class="comment">//移动左指针，缩小子数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minLen == Integer.MAX_VALUE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];  <span class="comment">// 没有找到匹配的子数组</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//根据子数组的左边界以及长度，返回子数组</span></span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[minLen];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; minLen; i++) &#123;</span><br><span class="line">            result[i] = numbers[i + minLeft];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们使用了两个指针 p1 和 p2，分别表示子数组的左右边界。我们在数组上使用滑动窗口来寻找满足条件的最短子数组。当子数组的和大于等于目标值时，我们移动左指针，并更新最小长度。如果发现有更小的数组长度，则更新最小数组长度以及数组的左边界值，当子数组的和不足以满足条件时，我们移动右指针，并继续扩展子数组。</p><p>测试结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    printArray(minSizeSubArray(numbers, <span class="number">10</span>)); <span class="comment">// [2, 8]</span></span><br><span class="line">    printArray(minSizeSubArray(numbers, <span class="number">28</span>)); <span class="comment">// []</span></span><br><span class="line">    printArray(minSizeSubArray(numbers, <span class="number">4</span>)); <span class="comment">// [5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">        sb.append(numbers[i]).append(i == numbers.length - <span class="number">1</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针算法之两数之和</title>
      <link href="/2016/02/05/shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he/"/>
      <url>/2016/02/05/shuang-zhi-zhen-suan-fa-zhi-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<p>在上一篇中，我们讲到了双指针算法的几种使用场景，这里具体举例，以经典的两数之和为例。</p><p>给定一个有序数字的数组和一个目标值，在有序数组中找到两个数字之和等于该目标值，返回包含两个数字的数组，如果没有找到返回包含两个-1值的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">找到的情况</span><br><span class="line">输入： </span><br><span class="line">有序数组: [2, 4, 5, 6, 12];  目标值: 10</span><br><span class="line">输出：</span><br><span class="line">[4, 6]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">找不到的情况</span><br><span class="line">输入： </span><br><span class="line">有序数组: [2, 4, 5, 6, 12];  目标值: 3</span><br><span class="line">输出：</span><br><span class="line">[-1, -1]</span><br></pre></td></tr></table></figure><span id="more"></span><p>直接代码走起，下面以Java代码为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] findNumbers(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pLeft</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 左指针初始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pRight</span> <span class="operator">=</span> numbers.length - <span class="number">1</span>; <span class="comment">// 右指针初始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pLeft &lt; pRight) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers[pLeft] + numbers[pRight];</span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;numbers[pLeft], numbers[pRight]&#125;; <span class="comment">// 返回匹配的元素</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                pLeft++; <span class="comment">// 和小于目标值，左指针右移</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pRight--; <span class="comment">// 和大于目标值，右指针左移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] results = findNumbers(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">12</span>&#125;, <span class="number">10</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%d, %d]%n&quot;</span>, results[<span class="number">0</span>], results[<span class="number">1</span>]); <span class="comment">// 输出 [4, 6]</span></span><br><span class="line"></span><br><span class="line">        results = findNumbers(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">12</span>&#125;, <span class="number">3</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;[%d, %d]%n&quot;</span>, results[<span class="number">0</span>], results[<span class="number">1</span>]); <span class="comment">// 输出 [-1, -1]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们使用了两个指针 pLeft 和 pRight 分别指向有序数组的两端。然后，我们计算 numbers[pLeft] 和 numbers[pRight] 的和，并与目标值进行比较。根据和与目标值的大小关系，我们移动左指针或右指针，直到找到符合条件的元素对，或者指针重合没有找到。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针算法</title>
      <link href="/2016/01/25/shuang-zhi-zhen-suan-fa/"/>
      <url>/2016/01/25/shuang-zhi-zhen-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>双指针算法（Two Pointer Algorithm）是一种常见的算法技巧，通常用于数组、链表等数据结构中解决一些问题。双指针算法的核心思想是使用两个指针在不同的位置上移动，以达到解决问题的目的。这两个指针可以朝着相同的方向移动，也可以朝着相反的方向移动，视问题而定。</p><p>双指针算法的常见应用场景和实现方法：</p><p><strong>对撞指针（Two Sum、Three Sum）：</strong> 在有序数组中查找满足特定条件的元素对或元素组合。使用两个指针分别从数组的两端开始，向中间逼近，根据元素之间的大小关系，调整指针的位置。</p><p><strong>快慢指针（环形链表判断、链表中间节点）：</strong> 在链表中判断是否存在环或找到链表的中间节点。使用两个指针，一个快指针每次移动两步，一个慢指针每次移动一步，根据指针的移动速度判断链表的性质。</p><span id="more"></span><p><strong>滑动窗口（子数组问题、字符串问题）：</strong> 用于解决一些窗口内的问题，例如找到最短子数组、找到最长连续子数组等。使用两个指针表示窗口的左右边界，移动窗口进行计算。</p><p><strong>夹逼法（容器装水问题、三数最接近问题）：</strong> 在一维数组中寻找满足特定条件的元素对。使用两个指针从两端开始，逐渐向中间夹逼，根据元素之间的大小关系，调整指针的位置。</p><p><strong>多指针法（四数之和问题、删除排序数组中的重复项）：</strong> 在一维或二维数组中寻找满足特定条件的元素组合。使用多个指针在数组中移动，根据问题需要，进行相应的指针调整。</p><p>双指针算法的优势在于它可以在O(N)的时间复杂度内解决一些复杂的问题，而不需要使用额外的空间。它在数组和链表等数据结构上都有广泛的应用，常用于解决数组遍历、查找、排序和操作等问题。这种算法可以帮助简化问题的解决过程，提高代码效率。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix Gem FilePermissionError</title>
      <link href="/2016/01/12/how-to-fix-gem-filepermissionerror/"/>
      <url>/2016/01/12/how-to-fix-gem-filepermissionerror/</url>
      
        <content type="html"><![CDATA[<p>Sometimes we face the erorr “Gem::FilePermissionError: You don’t have write permissions for the &#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;x.x.x directory”. This error message indicates that the user doesn’t have the necessary permissions to install Ruby gems system-wide. This is because the system Ruby installation requires administrative privileges to modify its gem directory.</p><p>To resolve this issue, there is a few options:</p><h3 id="1-Use-a-Ruby-Version-Manager-Recommended"><a href="#1-Use-a-Ruby-Version-Manager-Recommended" class="headerlink" title="1. Use a Ruby Version Manager (Recommended)"></a>1. Use a Ruby Version Manager (Recommended)</h3><p>Instead of installing gems globally, consider using a Ruby version manager like <code>rbenv</code> or <code>RVM</code>. These tools allow you to manage multiple Ruby versions and gems without requiring administrative permissions.</p><h4 id="Using-rbenv"><a href="#Using-rbenv" class="headerlink" title="Using rbenv"></a>Using rbenv</h4><pre><code>1. Install rbenv if you haven&#39;t already.2. Install the desired version of Ruby using rbenv.3. Install gems without needing elevated permissions.</code></pre><h4 id="Using-RVM"><a href="#Using-RVM" class="headerlink" title="Using RVM"></a>Using RVM</h4><pre><code>1. Install RVM if you haven&#39;t already.2. Install the desired version of Ruby using RVM.3. Use the installed Ruby version without needing elevated permissions to install gems.</code></pre><span id="more"></span><h3 id="2-Install-Gems-Locally"><a href="#2-Install-Gems-Locally" class="headerlink" title="2. Install Gems Locally"></a>2. Install Gems Locally</h3><p>If you want to install gems for the system Ruby without using a version manager, you’ll need administrative privileges. You can use the sudo command to install gems as the superuser:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install gem_name</span><br></pre></td></tr></table></figure><p>However, keep in mind that modifying the system Ruby environment might affect other applications, and it’s generally recommended to use a version manager to manage Ruby environments.</p><h3 id="3-Use-–user-install-Option"><a href="#3-Use-–user-install-Option" class="headerlink" title="3. Use –user-install Option"></a>3. Use –user-install Option</h3><p>If you want to install gems locally without administrative privileges, you can use the <strong>–user-install</strong> option:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install gem_name --user-install</span><br></pre></td></tr></table></figure><p>This installs the gem in your user’s home directory, avoiding the need for system-wide modifications.</p><h3 id="4-Install-to-Custom-Directory"><a href="#4-Install-to-Custom-Directory" class="headerlink" title="4. Install to Custom Directory"></a>4. Install to Custom Directory</h3><p>You can configure gems to be installed in a specific directory where you have write permissions. This involves configuring the <strong>GEM_HOME</strong> and <strong>GEM_PATH</strong> environment variables:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GEM_HOME=<span class="variable">$HOME</span>/gems</span><br><span class="line"><span class="built_in">export</span> GEM_PATH=<span class="variable">$GEM_HOME</span>:/path/to/system/gems</span><br><span class="line">gem install gem_name</span><br></pre></td></tr></table></figure><p>Make sure to adjust the paths according to your preferences.</p><p>In general, using a Ruby version manager like <strong>rbenv</strong> or <strong>RVM</strong> is recommended, as it provides a more flexible and isolated way to manage Ruby versions and gems without affecting system-wide configurations or requiring administrative permissions.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(18)</title>
      <link href="/2015/12/28/ruby-practice-18/"/>
      <url>/2015/12/28/ruby-practice-18/</url>
      
        <content type="html"><![CDATA[<h4 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h4><p>Ruby程序在启动后会预先分配3个<strong>IO</strong>对象:<br>标准输入 - 预定义常量(<strong>STDIN</strong>), 全局变量(<strong>$stdin</strong>)<br>标准输出 - 预定义常量(<strong>STDOUT</strong>), 全局变量(<strong>$stdout</strong>)<br>标准错误输出 - 预定义常量(<strong>STDERR</strong>), 全局变量(<strong>$stderr</strong>)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stdout</span>.print <span class="string">&quot;output something from $stdout\n&quot;</span></span><br><span class="line"><span class="variable constant_">STDERR</span>.print <span class="string">&quot;output something from $stderr\n&quot;</span></span><br></pre></td></tr></table></figure><p>IO对象是否与控制台关联，我们可以通过**tty?**方法来判断。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="variable">$stdin</span>.tty?</span><br><span class="line">  print <span class="string">&quot;stdin is a tty&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  print <span class="string">&quot;stdin is not a tty&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><p>通过File.open方法或open方法打开文件并获取新的IO对象，</p><pre><code>io = File.open(file, mode)io = open(file, mode)</code></pre><p>mode为文件的读写方法，缺省情况下为只读模式(r).</p><p>r  - 只读模式<br>r+ - 读写模式<br>w  - 只写模式，如果文件不存在则创建新文件，如果文件存在，则清空文件<br>w+ - 读写模式，其余同w<br>a  - 追加模式，文件不存在则创建新文件<br>a+ - 读取、追加模式，文件不存在则创建新文件    </p><p>io.<strong>close</strong><br>使用<strong>close</strong>方法关闭已打开的文件。File.open方法使用块，则文件会在使用完毕后自动关闭，io变量会被作为块变量传递给块。并且使用io.closed?方法可以检查是否关闭。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;tty.rb&quot;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  <span class="keyword">while</span> line = io.gets</span><br><span class="line">    print line</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<strong>File.read</strong>可以一次性读取文件的内容。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="title class_">File</span>.read(<span class="string">&quot;tty.rb&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="基本输入"><a href="#基本输入" class="headerlink" title="基本输入"></a>基本输入</h5><p>io.<strong>gets</strong>(rs)<br>io.<strong>each</strong>(rs)<br>io.<strong>each_line</strong>(rs)<br>io.<strong>readlines</strong>(rs)<br>从IO类的对象中读取一行数据，用参数<strong>rs</strong>的字符串分行，缺省模式下为换行符。</p><p>使用**eof?**可以检查输入是否已经完毕。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">io = <span class="title class_">File</span>.open(<span class="string">&quot;tty.rb&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> line = io.gets</span><br><span class="line">  line.chomp!</span><br><span class="line">  print line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p io.eof?     <span class="comment">#=&gt; true</span></span><br><span class="line">io.close      <span class="comment">#=&gt; close file</span></span><br><span class="line">p io.closed?   <span class="comment">#=&gt; true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用<strong>readlines</strong>方法可以一次性读取所有数据，并返回将每行数据作为元素封装的数组.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">io = <span class="title class_">File</span>.open(<span class="string">&quot;tty.rb&quot;</span>)</span><br><span class="line">ary = io.readlines</span><br><span class="line">io.close</span><br><span class="line">ary.each <span class="keyword">do</span> |<span class="params">line</span>|</span><br><span class="line">  line.chomp!</span><br><span class="line">  print line</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>io.<strong>lineno</strong><br>使用gets方法，each_line方法逐行读取文件时，io会自动记录读取的行数，可以通过<strong>io.lineno</strong>来获取当前行数。   </p><p>io.<strong>each_char</strong><br>逐个字符读取io对象中的数据,并启动块。   </p><p>io.<strong>each_byte</strong><br>逐个字节读取io对象中的数据，并启动块。    </p><p>io.<strong>getc</strong><br>只读取io对象中的一个字符。<br>io.<strong>ungetc(ch)</strong><br>将参数ch指定的字符退回到io得缓冲流中   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  io.write(<span class="string">&quot;Hello Ruby&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;hello.txt&quot;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  p io.getc       <span class="comment">#=&gt; H</span></span><br><span class="line">  io.ungetc(<span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">  p io.gets       <span class="comment">#=&gt; Hello Ruby</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">File</span>.delete(<span class="string">&quot;hello.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p>io.<strong>getbyte</strong>, io.<strong>ungetbyte</strong>的使用方法同上，不同之处在于此处是字节。    </p><p>io.<strong>read</strong>(size)<br>读取参数size指定大小的数据，如果没指定，则一次性读取所有数据。    </p><h5 id="输出操作"><a href="#输出操作" class="headerlink" title="输出操作"></a>输出操作</h5><p>io.<strong>puts</strong>(str0, str1, …)<br>指定多个字符串时，会在每个字符串后面添加换行符。   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stdout</span>.puts <span class="string">&quot;hi&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hey&quot;</span><span class="comment">#=&gt; hi\nhello\nhey\n</span></span><br></pre></td></tr></table></figure><p>io.<strong>putc</strong>(ch)<br>输出指定参数ch字符，如果参数为字符串，则输出首个字符    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stdout</span>.putc(<span class="string">&#x27;H&#x27;</span>)       <span class="comment">#=&gt; H</span></span><br><span class="line"><span class="variable">$stdout</span>.putc(<span class="string">&#x27;Hello&#x27;</span>)   <span class="comment">#=&gt; H</span></span><br><span class="line"><span class="variable">$stdout</span>.putc(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>io.<strong>print</strong>(str0, str1, …)<br>输出参数指定的字符串，不会在每个字符串后面追加换行符    </p><p>io.<strong>printf</strong>(fmt, arg0, arg1, …)<br>按照指定格式输出字符串。    </p><p>io.<strong>write</strong>(str)<br>输出参数str指定的字符串，方法返回值为输出的字节数    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="variable">$stdout</span>.write(<span class="string">&quot;Hello&quot;</span>)<span class="comment">#=&gt; Hello</span></span><br><span class="line">p size<span class="comment">#=&gt; 5</span></span><br></pre></td></tr></table></figure><h5 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h5><p>用文件指针或者当前文件偏移量来表示IO对象指向文件的位置。    </p><p>io.<strong>pos</strong><br>io.<strong>pos</strong>&#x3D;position<br>通过<strong>pos</strong>方法获取文件指针位置，改变文件指针使用**pos&#x3D;**方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  io.write(<span class="string">&quot;Hello Ruby&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;hello.txt&quot;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  p io.read(<span class="number">5</span>)      <span class="comment">#=&gt; Hello</span></span><br><span class="line">  io.pos = <span class="number">0</span></span><br><span class="line">  p io.gets         <span class="comment">#=&gt; Hello Ruby</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>io.<strong>seek</strong>(offset, whence)<br>offset为指定位置的整数，whence为指定offset如何移动， 以下为whence的值:<br>IO::SEEK_SET - 将文件指针移动到指定offset指定的位置<br>IO::SEEK_CUR - 将offset视为相对于当前位置的偏移位置来移动文件指针<br>IO::SEEK_END - 将offset视为相对于文件末尾的偏移位置  </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  io.write(<span class="string">&quot;Hello Ruby&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;hello.txt&quot;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  p io.read(<span class="number">5</span>)      <span class="comment">#=&gt; Hello</span></span><br><span class="line">  io.seek(-<span class="number">5</span>, <span class="variable constant_">IO</span><span class="symbol">:</span><span class="symbol">:SEEK_CUR</span>)</span><br><span class="line">  p io.gets         <span class="comment">#=&gt; Hello Ruby</span></span><br><span class="line">  io.seek(<span class="number">0</span>, <span class="variable constant_">IO</span><span class="symbol">:</span><span class="symbol">:SEEK_SET</span>)</span><br><span class="line">  p io.gets         <span class="comment">#=&gt; Hello Ruby</span></span><br><span class="line">  io.seek(-<span class="number">4</span>, <span class="variable constant_">IO</span><span class="symbol">:</span><span class="symbol">:SEEK_END</span>)</span><br><span class="line">  p io.gets         <span class="comment">#=&gt; Ruby</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>io.<strong>rewind</strong><br>将文件指针重置到文件开始处，结果同以下两个操作:    </p><pre><code>io.pos = 0   io.seek(0, IO::SEEK_SET)</code></pre><p>io.<strong>truncate</strong>(size)<br>按照参数size指定的大小截断文件。</p><p>*注，新的IO对象默认为文本模式，可以通过io.<strong>binmode</strong>将其转为二进制模式*   </p><h5 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h5><p>IO对象在输出数据时，结果并不一定会马上输出出来，程序会在内部开辟一个缓冲空间来缓存输出，当空间满的时候再输出来。但是标准错误输出不会使用缓冲，如果有错误信息，则立刻输出。所以标准错误输出一般用于输出警告、错误之类的信息，能够立刻输出数据    </p><p>io.<strong>flush</strong><br>强制输出缓冲中的数据。</p><p>io.<strong>sync</strong><br>io.<strong>sync</strong>&#x3D;state<br>通过io.sync &#x3D; true, 程序写入缓冲时flush方法会被自动调用。    </p><h5 id="与命令行交互"><a href="#与命令行交互" class="headerlink" title="与命令行交互"></a>与命令行交互</h5><p>IO.<strong>popen</strong>(command, mode)<br>command为相关的命令    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pattern = <span class="title class_">Regexp</span>.new(<span class="variable constant_">ARGV</span>[<span class="number">0</span>])</span><br><span class="line">filename = <span class="variable constant_">ARGV</span>[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> /.gz<span class="variable">$/</span> =~ filename</span><br><span class="line">  file = <span class="variable constant_">IO</span>.popen(<span class="string">&quot;gunzip -c <span class="subst">#&#123;filename&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  file = <span class="title class_">File</span>.open(filename)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">file.close</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**open**(&quot;|command&quot;, mode)   </span></span><br><span class="line"><span class="string">将带有管道符号的命令传递给open方法的效果与使用IO.popen方法是一样的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> ruby</span><br><span class="line">filename = <span class="variable constant_">ARGV</span>[<span class="number">0</span>]</span><br><span class="line">open(<span class="string">&quot;|gunzip -c <span class="subst">#&#123;filename&#125;</span>&quot;</span>) <span class="keyword">do</span> |<span class="params">io</span>|</span><br><span class="line">  io.each_line <span class="keyword">do</span> |<span class="params">line</span>|</span><br><span class="line">    print line</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(17)</title>
      <link href="/2015/12/17/ruby-practice-17/"/>
      <url>/2015/12/17/ruby-practice-17/</url>
      
        <content type="html"><![CDATA[<h4 id="正则表达式-Regexp"><a href="#正则表达式-Regexp" class="headerlink" title="正则表达式(Regexp)"></a>正则表达式(Regexp)</h4><p>Ruby中的正则表达式用<strong>Regexp</strong>类来表示，正则表达式描述的是一种模式，该模式用于匹配字符串。</p><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p>其创建方式有多种：<br>1.使用**&#x2F; &#x2F;** 把字符串括起来，可以简单地创建出正则表达式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg1 = <span class="regexp">/Ruby/</span></span><br><span class="line">puts reg1.<span class="keyword">class</span>       <span class="comment">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.使用**Regexp.new(“字符串”)**创建正则表达式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="title class_">Regexp</span>.new(<span class="string">&quot;Ruby&quot;</span>)</span><br><span class="line">puts reg.<span class="keyword">class</span>       <span class="comment">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure><p>3.使用**%r**创建正则表达式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">%r(Ruby)</span></span><br><span class="line">puts reg.<span class="keyword">class</span>       <span class="comment">#=&gt; Regexp</span></span><br><span class="line"></span><br><span class="line">reg = %r&lt;<span class="title class_">Ruby</span>&gt;</span><br><span class="line">puts reg.<span class="keyword">class</span>       <span class="comment">#=&gt; Regexp</span></span><br><span class="line"></span><br><span class="line">reg = %r|<span class="params">Ruby</span>|</span><br><span class="line">puts reg.<span class="keyword">class</span>       <span class="comment">#=&gt; Regexp</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">%r!Ruby!</span></span><br><span class="line">puts reg.<span class="keyword">class</span>       <span class="comment">#=&gt; Regexp</span></span><br></pre></td></tr></table></figure><h5 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h5><p>Ruby的正则表达式匹配使用**&#x3D;~**符号，如果匹配成功返回匹配字符串的位置，否则返回nil。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/R..y/</span></span><br><span class="line">str = <span class="string">&quot;regexp of Ruby&quot;</span></span><br><span class="line"></span><br><span class="line">matched = reg =~ str</span><br><span class="line">puts matched        <span class="comment">#=&gt; 10</span></span><br><span class="line"></span><br><span class="line">unmatched = reg =~ <span class="string">&quot;test&quot;</span></span><br><span class="line">p unmatched         <span class="comment">#=&gt; nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> matched</span><br><span class="line">  puts <span class="string">&quot;matched&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;unmatched&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>此处并不过多的介绍正则表达式的语法规则，具体详细语法请参见<a href="http://regexlib.com/CheatSheet.aspx">http://regexlib.com/CheatSheet.aspx</a></p><h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><p>对特殊字符的转义方式有两种，使用<strong>\</strong>字符和使用<strong>Regexp#quote</strong>方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#using \ symbol</span></span><br><span class="line">reg = <span class="regexp">/ruby\*regexp/</span></span><br><span class="line">puts reg =~ <span class="string">&quot;ruby*regexp&quot;</span>     <span class="comment">#=&gt; 0</span></span><br><span class="line">p reg =~ <span class="string">&quot;rubyregexp&quot;</span>          <span class="comment">#=&gt; nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#using Regexp#quote method</span></span><br><span class="line">reg1 = <span class="regexp">%r(ruby*regexp)</span></span><br><span class="line">reg2 = <span class="title class_">Regexp</span>.new(<span class="title class_">Regexp</span>.quote(<span class="string">&quot;ruby*regexp&quot;</span>))</span><br><span class="line">str = <span class="string">&quot;ruby*regexp&quot;</span></span><br><span class="line"></span><br><span class="line">p reg1 =~ str         <span class="comment">#=&gt; nil</span></span><br><span class="line">p reg2 =~ str         <span class="comment">#=&gt; 0</span></span><br></pre></td></tr></table></figure><h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><p>在正则表达式的后面添加特定的字符如<strong>i</strong>, <strong>x</strong>, <strong>m</strong>等时，匹配后的规则会有点变化</p><p><strong>i</strong> Regexp::IGNORECASE  忽略字符串大小写<br><strong>x</strong>Regexp::EXTENDED忽略字符串中的空白字符<br><strong>m</strong>Regexp::MULTILINE匹配多行字符串    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#using i optional symbol to ignore the cap</span></span><br><span class="line">reg1 = <span class="regexp">/test String/i</span></span><br><span class="line">reg2 = <span class="title class_">Regexp</span>.new(<span class="string">&quot;test string&quot;</span>, <span class="title class_">Regexp</span><span class="symbol">:</span><span class="symbol">:IGNORECASE</span>)</span><br><span class="line">puts reg1 =~ <span class="string">&quot;test string&quot;</span>     <span class="comment">#=&gt; 0</span></span><br><span class="line">puts reg1 =~ <span class="string">&quot;test string&quot;</span>     <span class="comment">#=&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#using x optional symbol to ignore the white space symbol</span></span><br><span class="line">reg1 = <span class="regexp">/test string/x</span></span><br><span class="line">reg2 = <span class="title class_">Regexp</span>.new(<span class="string">&quot;test string&quot;</span>, <span class="title class_">Regexp</span><span class="symbol">:</span><span class="symbol">:EXTENDED</span>)</span><br><span class="line">puts reg1 =~ <span class="string">&quot;teststring&quot;</span>      <span class="comment">#=&gt; 0</span></span><br><span class="line">puts reg1 =~ <span class="string">&quot;teststring&quot;</span>      <span class="comment">#=&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#using m optional symbol to match multiline</span></span><br><span class="line">reg1 = <span class="regexp">/test\nstring/m</span></span><br><span class="line">reg2 = <span class="title class_">Regexp</span>.new(<span class="string">&quot;test\nstring&quot;</span>, <span class="title class_">Regexp</span><span class="symbol">:</span><span class="symbol">:MULTILINE</span>)</span><br><span class="line">puts reg1 =~ <span class="string">&quot;test\nstring&quot;</span></span><br><span class="line">puts reg1 =~ <span class="string">&quot;test\nstring&quot;</span>      <span class="comment">#=&gt; 0</span></span><br></pre></td></tr></table></figure><h5 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h5><p>捕获，就是从正则表达式的匹配部分中提取某部分字符，通过”<strong>$数字</strong>“这种形式的变量获取匹配了正则表达式中的用**()**括住的字符。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/(.)(C.)(.)/</span></span><br><span class="line">str = <span class="string">&quot;ABCDE&quot;</span></span><br><span class="line">reg =~ str</span><br><span class="line"></span><br><span class="line">puts <span class="variable">$1</span>   <span class="comment">#=&gt; B</span></span><br><span class="line">puts <span class="variable">$2</span>   <span class="comment">#=&gt; CD</span></span><br><span class="line">puts <span class="variable">$3</span>   <span class="comment">#=&gt; E</span></span><br></pre></td></tr></table></figure><p>使用”<strong>(?: )</strong>“可以过滤掉不需要捕获的模式.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/(.)(?:C.)(.)/</span></span><br><span class="line">str = <span class="string">&quot;ABCDE&quot;</span></span><br><span class="line">reg =~ str</span><br><span class="line"></span><br><span class="line">puts <span class="variable">$1</span>   <span class="comment">#=&gt; B</span></span><br><span class="line">puts <span class="variable">$2</span>   <span class="comment">#=&gt; E</span></span><br></pre></td></tr></table></figure><p>Ruby中也可以使用**$&#96;**, <strong>$&amp;</strong>, **$’**分别代表匹配部分前的字符串、匹配部分的字符串、匹配部分后的字符串。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/(C.)/</span></span><br><span class="line">str = <span class="string">&quot;ABCDE&quot;</span></span><br><span class="line">reg =~ str</span><br><span class="line"></span><br><span class="line">puts <span class="variable">$`</span>     <span class="comment">#=&gt; AB</span></span><br><span class="line">puts <span class="variable">$&amp;</span>     <span class="comment">#=&gt; CD</span></span><br><span class="line">puts <span class="variable">$&#x27;</span>     <span class="comment">#=&gt; E</span></span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p><strong>sub</strong>和<strong>gsub</strong>方法的作用是用指定的字符置换字符串中的某部分字符。<strong>sub</strong>方法只置换首次匹配的部分，而<strong>gsub</strong>则会置换所有匹配的部分.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/\s+/</span></span><br><span class="line">str = <span class="string">&quot;This is test string&quot;</span></span><br><span class="line"></span><br><span class="line">puts str.sub(reg, <span class="string">&#x27;-&#x27;</span>)   <span class="comment">#=&gt; &quot;This-is test string&quot;</span></span><br><span class="line">puts str.gsub(reg, <span class="string">&#x27;-&#x27;</span>)   <span class="comment">#=&gt; &quot;This-is-test-string&quot;</span></span><br></pre></td></tr></table></figure><p>sub和gsub方法同样支持block块模式，针对匹配到的字符做处理</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">reg =<span class="regexp">/i/</span></span><br><span class="line">str = <span class="string">&quot;This is test string&quot;</span></span><br><span class="line"></span><br><span class="line">result = str.sub(reg) <span class="keyword">do</span> |<span class="params">matched</span>|</span><br><span class="line">  matched.upcase</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts result     <span class="comment">#=&gt; ThIs is test string</span></span><br><span class="line"></span><br><span class="line">result = str.gsub(reg) <span class="keyword">do</span> |<span class="params">matched</span>|</span><br><span class="line">  matched.upcase</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts result     <span class="comment">#=&gt; ThIs Is test strIng</span></span><br></pre></td></tr></table></figure><p><strong>scan</strong>方法和<strong>gsub</strong>方法类似，都可以获取到所有匹配到的字符，但是不能置换。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/(r)(.)/</span></span><br><span class="line">str = <span class="string">&quot;racrtrhrdra&quot;</span></span><br><span class="line">str.scan(reg) <span class="keyword">do</span> |<span class="params">matched</span>|</span><br><span class="line">  p matched</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[&quot;r&quot;, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">#[&quot;r&quot;, &quot;t&quot;]</span></span><br><span class="line"><span class="comment">#[&quot;r&quot;, &quot;h&quot;]</span></span><br><span class="line"><span class="comment">#[&quot;r&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="comment">#[&quot;r&quot;, &quot;a&quot;]</span></span><br><span class="line"></span><br><span class="line">str.scan(reg) <span class="keyword">do</span> |<span class="params">val1, val2</span>|</span><br><span class="line">  p val1 + <span class="string">&quot;-&quot;</span> + val2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&quot;r-a&quot;</span></span><br><span class="line"><span class="comment">#&quot;r-t&quot;</span></span><br><span class="line"><span class="comment">#&quot;r-h&quot;</span></span><br><span class="line"><span class="comment">#&quot;r-d&quot;</span></span><br><span class="line"><span class="comment">#&quot;r-a&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Nginx in Mac OS X</title>
      <link href="/2015/12/05/using-nginx-in-mac-os-x/"/>
      <url>/2015/12/05/using-nginx-in-mac-os-x/</url>
      
        <content type="html"><![CDATA[<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p><strong>Nginx</strong> is a open source quite lightweight HTTP server which is written by Russian <em>Igor Sysoev</em>, the pronunciation is “engine X”. It’s a high performance HTTP and reverse proxy server, and also it is a IMAP&#x2F;POP3&#x2F;SMTP proxy server。</p><p>There are lots of website using Nginx in China, like Sina, Tencent, 163, Discuz and so on. The Nginx has a very high performance due to event driven way, and also it is a high performance reverse proxy, load balancing.</p><span id="more"></span><p>The features of Nginx Http server are below:</p><p>1.dealing with static file, indexing file and also automatically indexing.</p><p>2.accelerating reverse proxy server,load balancing</p><p>3.FastCGI, Caching, Security</p><p>4.Support SSL and TLS</p><p>From investigation, the Nginx can support about 50,000 concurrence request connection, and also support hot deploy, even running 7*24 hours uninterrupted.   </p><h4 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h4><p>So, how to install it on Mac OS X. Let’s assume you have installed the <em>Home brew</em>, using brew to install the nginx with command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><h4 id="Starting-And-Runing"><a href="#Starting-And-Runing" class="headerlink" title="Starting And Runing"></a>Starting And Runing</h4><p>After install, we can use below command to run it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>If you get the failed message which is “[emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)”. You have to kill the progress which is running with that address, it usually is Apache. And also there is another way, changing the port number, we will introduce later.</p><p>The nginx running success, you will get the below page when you access the <a href="http://localhost:8080/">http://localhost:8080</a></p><p><img src="/assets/images/legacy/nginx-welcome.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/nginx-welcome.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="nginx, devops"></p><p>There are several commands to start, stop nginx and reload configuration.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop #=&gt; fast shutdown</span><br><span class="line"></span><br><span class="line">nginx -s quit#=&gt; graceful shutdown</span><br><span class="line"></span><br><span class="line">nginx -s reload#=&gt; reloading the configuration file</span><br><span class="line"></span><br><span class="line">nginx -s reopen#=&gt; reopening the log files</span><br></pre></td></tr></table></figure><h4 id="Simple-Configuration"><a href="#Simple-Configuration" class="headerlink" title="Simple Configuration"></a>Simple Configuration</h4><p>The default place of nginx.conf on Mac after installing with brew is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>Let’s change the port number in this file. First, we need to stop the nginx.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s stop</span><br></pre></td></tr></table></figure><p>And then open that file, you will see the below server configuration section. It includes the listen, server_name, location&#x2F;root, location&#x2F;index. location&#x2F;root is your website root folder, and index is your website first page file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       8080;</span><br><span class="line">server_name  localhost;</span><br><span class="line"></span><br><span class="line">#access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>okay, let’s change the port number from 8080 to 80, and then run it again</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><p>Access it with <a href="http://localhost/">http://localhost</a>, the 80 port number is http default port number, so we don’t need to append it into url.</p><p>Now, let’s put our blog website in the nginx, to do so, we need to reference the location&#x2F;root to our blog website folder.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">server_name  localhost;</span><br><span class="line"></span><br><span class="line">#access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    root   /Users/yushi/Codes/Blog/stonefishy.github.io/public;;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>let’s running it again with clicking <a href="http://localhost/">http://localhost</a>. Woow, cool, very nice, we can access our blog with nignx.</p><p>This is a just simple usage of nginx, we will talk about more later.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审查之Pull Request</title>
      <link href="/2015/11/22/code-review-with-pull-request/"/>
      <url>/2015/11/22/code-review-with-pull-request/</url>
      
        <content type="html"><![CDATA[<p>代码审查(Code Review)一直是一个高效团队里面必备的流程，团队成员可以通过它达到技术交流，相互学习以及提升自身编码水平的目的。当然它的目的并不止于此，我们在做某一件事的过程中，所用的技能和工具不外乎都是为了能使结果更符合我们的期望，就拿建筑工程来说，质量控制就是其把控最严的一关，有专门的质量管理领导小组、质量组织管理体系制度来贯穿这个过程，其最终目的就是为了使这栋建筑坚固牢稳，避免随时有可能崩塌的危险。</p><span id="more"></span><p>软件开发也一样，代码审查的另外一个目的就是为了保证软件的质量，避免系统中存在较多的Bug（软件中Bug是无法避免的，此处意思是尽量减少Bug出现的几率）。在我们以往的代码审查过程中，采用的主要形式是开发人员围在一起查看今天是否有哪些代码提交，然后针对提交的代码过一遍，发现有好的实践就相互学习，针对待提升的代码讨论后由Owner自己下去修改。这个过程看似很正常，其实里面存在较多的问题：</p><ul><li>其一，好的实践并没有在代码中标明，以及为什么是个好的实践，而且当想回顾查找的时候很困难；  </li><li>其二，每个开发人员对同一个提交的想法和见解可能不一样，但是这些想法和见解却并没有被记录下来；    </li><li>其三，也是最重要的一个，没有载体去记录哪些代码须改进，那么在下次Review的过程中，并不是所有人都记得上次有哪些代码是否已经改进了，这就会导致代码的质量没有受到监管。</li></ul><p>任何一种工作方法，如果有工具的辅助，就可以大大提高其效率。Pull Request就是代码审查的一种工作流工具，它并不是DVCS(Distributed Version Control System)比如git的一个特性，通过它可以使代码审查更有效率。而我们大多项目现在都是用Stash（现在已更名为Bitbucket）或Github作为代码仓库，两者均提供了这种方式来确保代码质量。</p><p>那么如何通过Pull Request来体现我们的代码质量管理过程呢？首先代码质量管理小组需要由项目中比较资深的研发人员构成，他们是Pull Request的Reviewer不可缺少的成员，用于把控提交的代码是否可以通过，当然，最好是全体研发人员一起加入。而代码质量管理体系制度其实也就是我们常说的一些规范和实践，包括项目统一的编码风格、代码的可读性、可维护性、合理的单元测试以及提倡的一些最佳实践等等。Reviewer可以通过此类体系来鉴别所提交的代码质量是否可以过关。</p><p>在此处我们并不阐述如何创建一个Pull Request，我们的焦点在于用它来解决之前遇到的问题。以我们现在项目中用的Stash为例，当Pull Request已创建并通知Reviewer后，Reviewer可以查看其提交代码，做出以下Action:</p><ul><li>针对好的实践代码或设计可以在其位置标注上注释，以备后续回顾查找时容易找到。</li><li>建议被添加为Reviewer的开发人员均要在此次的Pull Request中留下自己的意见，这样在后续的集体Code Review中可以查看到相互的见解。</li><li>如果发现代码存在问题的，可以及时在代码中留下注释。如果代码提交者对这个注释也赞同，可当即修改并更新Pull Request，这样可以保证代码是已经修正过的。</li></ul><p><img src="/assets/images/legacy/stash-pull-request.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/stash-pull-request.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="stash-pull-request.png"></p><p>当一个Pull Request相关问题都已修改后或不存在任何问题时，就可以直接Approve并Merge到CodeBase中去，这样能够很好的确保CodeBase中的代码是经过监管控制过的。而且在Stash的Pull Request中，还可以设置当须不少于指定个数的Reviewer同意代码提交通过后，提交者才有权限Merge到CodeBase中。这样也能极大的确保项目的代码质量规范是整体开发人员认同的。</p><p>总之，Pull Request工作流程的方式可以很大的提高代码审查的质量以及效率，有工具，为何不加以合理使用呢？</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Collaboration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(16)</title>
      <link href="/2015/11/18/ruby-practice-16/"/>
      <url>/2015/11/18/ruby-practice-16/</url>
      
        <content type="html"><![CDATA[<h4 id="散列类"><a href="#散列类" class="headerlink" title="散列类"></a>散列类</h4><p>散列(<strong>Hash</strong>)和数组一样，都是表示对象集合的对象，不同之处在于，数组使用索引来取得元素，而散列则是用键key，key可以是任何对象，而索引则不能，只能是整数。</p><h5 id="散列的创建"><a href="#散列的创建" class="headerlink" title="散列的创建"></a>散列的创建</h5><p>1.使用 <strong>{}</strong></p><pre><code>    &#123;key=&gt;value&#125;    或    &#123;key:value&#125;</code></pre><span id="more"></span><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hash1 = &#123;<span class="string">&quot;key1&quot;</span>=&gt;<span class="string">&quot;value1&quot;</span>, <span class="string">&quot;key2&quot;</span>=&gt;<span class="string">&quot;value2&quot;</span>&#125;</span><br><span class="line">p hash1[<span class="string">&quot;key1&quot;</span>]<span class="comment">#=&gt; &quot;value1&quot;</span></span><br><span class="line"></span><br><span class="line">hash2 = &#123;<span class="symbol">key1:</span><span class="string">&quot;value1&quot;</span>, <span class="symbol">key2:</span><span class="string">&quot;value2&quot;</span>&#125;</span><br><span class="line">p hash2[<span class="symbol">:key1</span>]<span class="comment">#=&gt; &quot;value1&quot;</span></span><br></pre></td></tr></table></figure><p>2.使用<strong>Hash.new</strong></p><p>Hash.new()可带参数，当带参数的时候表示该参数为默认值，即当键不存在时，所得的值为该默认值；不带参数情况下，其默认值为nil</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hash1 = <span class="title class_">Hash</span>.new</span><br><span class="line">hash2 = <span class="title class_">Hash</span>.new(<span class="string">&quot;ruby&quot;</span>)</span><br><span class="line"></span><br><span class="line">p hash1[<span class="string">&quot;key&quot;</span>]<span class="comment">#=&gt; nil</span></span><br><span class="line">p hash2[<span class="string">&quot;key&quot;</span>]<span class="comment">#=&gt; &quot;ruby&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>散列的键可以是任意对象，一般推荐使用下列类型的对象来作为键：字符串(String), 数值(Numberic), 符号(Symbol), 日期(Date).</p><h5 id="散列值的设置和获取"><a href="#散列值的设置和获取" class="headerlink" title="散列值的设置和获取"></a>散列值的设置和获取</h5><p>一般情况下，我们大多使用最普通的方法来给散列赋值或取值, 如果键不存在，则返回nil</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#common set and get</span></span><br><span class="line">hash = <span class="title class_">Hash</span>.new</span><br><span class="line">hash[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;first&quot;</span></span><br><span class="line"></span><br><span class="line">p hash[<span class="string">&quot;a&quot;</span>]<span class="comment">#=&gt; &quot;first&quot;</span></span><br><span class="line">p hash[<span class="string">&quot;abc&quot;</span>]<span class="comment">#=&gt; nil</span></span><br></pre></td></tr></table></figure><p>Ruby还提供了<strong>store</strong>方法来存储值，使用<strong>fetch</strong>方法来获取值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#store and fetch</span></span><br><span class="line">hash = <span class="title class_">Hash</span>.new</span><br><span class="line"></span><br><span class="line">hash.store(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;ruby&quot;</span>)</span><br><span class="line"></span><br><span class="line">p hash.fetch(<span class="string">&quot;key&quot;</span>)<span class="comment">#=&gt; &quot;ruby&quot;</span></span><br></pre></td></tr></table></figure><p>但<strong>fetch</strong>方法与[]不同之处在于，如果hash对象中不存在键时，使用此方法将会出错</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hash = <span class="title class_">Hash</span>.new</span><br><span class="line"></span><br><span class="line">hash.store(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;ruby&quot;</span>)</span><br><span class="line"></span><br><span class="line">hash.fetch(<span class="string">&quot;abc&quot;</span>)<span class="comment">#=&gt; KeyError</span></span><br></pre></td></tr></table></figure><p><strong>fetch</strong>方法同样可以返回一个默认值，当它指定第2个参数时或者带块时</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hash = <span class="title class_">Hash</span>.new</span><br><span class="line"></span><br><span class="line">p hash.fetch(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;default value&quot;</span>)<span class="comment">#=&gt; &quot;default value&quot;</span></span><br><span class="line"></span><br><span class="line">p hash.fetch(<span class="string">&quot;abc&quot;</span>) &#123;<span class="string">&quot;a_&quot;</span>+ <span class="title class_">String</span>.new(<span class="string">&quot;bc&quot;</span>)&#125;<span class="comment">#=&gt;&quot;a_bc&quot;</span></span><br></pre></td></tr></table></figure><p>通过<strong>keys</strong>和<strong>values</strong>方法可以得到所有的键和值，而且<strong>to_a</strong>方法可以键值组合的数组。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">get all keys <span class="keyword">and</span> values</span><br><span class="line">hash = &#123;<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">p hash.keys<span class="comment">#=&gt; [&quot;a&quot;, &quot;c&quot;]</span></span><br><span class="line">p hash.values<span class="comment">#=&gt; [&quot;b&quot;, &quot;d&quot;]</span></span><br><span class="line">p hash.to_a<span class="comment">#=&gt; [[&quot;a&quot;, &quot;b&quot;], [&quot;c&quot;, &quot;d&quot;]]</span></span><br></pre></td></tr></table></figure><p>Ruby也支持了Hash对象的迭代遍历</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">hash.each_key <span class="keyword">do</span> |<span class="params">key</span>|</span><br><span class="line">puts key</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hash.each_value <span class="keyword">do</span> |<span class="params">value</span>|</span><br><span class="line">puts value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hash.each <span class="keyword">do</span> |<span class="params">key, value</span>|</span><br><span class="line">puts <span class="string">&quot;<span class="subst">#&#123;key&#125;</span>=&gt;<span class="subst">#&#123;value&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="散列的默认值"><a href="#散列的默认值" class="headerlink" title="散列的默认值"></a>散列的默认值</h5><p>散列的默认值设置有三种方式<br>1.使用Hash.new带参数作为默认值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash = <span class="title class_">Hash</span>.new(<span class="string">&quot;ruby&quot;</span>)</span><br><span class="line">p hash[<span class="string">&quot;a&quot;</span>] <span class="comment">#=&gt; &quot;ruby&quot;</span></span><br></pre></td></tr></table></figure><p>2.使用块指定默认值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hash = <span class="title class_">Hash</span>.new <span class="keyword">do</span> |<span class="params">hash, key</span>|</span><br><span class="line">hash[key] = key.upcase</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p hash[<span class="string">&quot;a&quot;</span>]<span class="comment">#=&gt; &quot;A&quot;</span></span><br><span class="line">p hash[<span class="string">&quot;B&quot;</span>]<span class="comment">#=&gt; &quot;B&quot;</span></span><br></pre></td></tr></table></figure><p>3.使用fetch方法指定默认值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hash = <span class="title class_">Hash</span>.new <span class="keyword">do</span> |<span class="params">hash, key</span>|</span><br><span class="line">hash[key] = key.upcase</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p hash.fetch(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;abc&quot;</span>)<span class="comment">#=&gt; &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p><em>注：当Hash.new方法指定了默认值或块时，fetch方法的第二个参数指定的默认值的优先级是最高的，且看上例</em></p><h5 id="散列其他方法"><a href="#散列其他方法" class="headerlink" title="散列其他方法"></a>散列其他方法</h5><p>1.查看指定对象是否为散列的键<br>h.<strong>key?</strong>(key)<br>h.<strong>has_key?</strong>(key)<br>h.<strong>include?</strong>(key)<br>h.<strong>member?</strong>(key)   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>=&gt; <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">p hash.key?(<span class="string">&quot;a&quot;</span>)    <span class="comment">#=&gt; true</span></span><br><span class="line">p hash.key?(<span class="string">&quot;x&quot;</span>)    <span class="comment">#=&gt; false</span></span><br><span class="line">p hash.has_key?(<span class="string">&quot;c&quot;</span>)  <span class="comment">#=&gt; true</span></span><br><span class="line">p hash.<span class="keyword">include</span>?(<span class="string">&quot;a&quot;</span>)  <span class="comment">#=&gt; true</span></span><br><span class="line">p hash.member?(<span class="string">&quot;x&quot;</span>)   <span class="comment">#=&gt; false</span></span><br></pre></td></tr></table></figure><p>2.查看指定对象是否为散列的值<br>h.<strong>value?</strong>(val)<br>h.<strong>has_value?</strong>(val)    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>=&gt;<span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">p hash.value?(<span class="string">&quot;a&quot;</span>)        <span class="comment">#=&gt; true</span></span><br><span class="line">p hash.has_value?(<span class="string">&quot;x&quot;</span>)    <span class="comment">#=&gt; false</span></span><br></pre></td></tr></table></figure><p>3.获取散列的大小<br>hash.<strong>length</strong><br>hash.<strong>size</strong>    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="symbol">:a</span> =&gt; <span class="string">&quot;b&quot;</span>, <span class="symbol">:c</span> =&gt; <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">p hash.length   <span class="comment">#=&gt; 2</span></span><br><span class="line">p hash.size   <span class="comment">#=&gt; 2</span></span><br></pre></td></tr></table></figure><p>4.判断散列是否为空<br>hash.<strong>empty?</strong>    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="symbol">:a=&gt;<span class="string">&quot;b&quot;</span></span>&#125;</span><br><span class="line">p hash.empty?     <span class="comment">#=&gt; false</span></span><br><span class="line"></span><br><span class="line">hash = <span class="title class_">Hash</span>.new</span><br><span class="line">p hash.empty?     <span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><p>6.删除键值<br>h.<strong>delete</strong>(key)<br>h.<strong>delete_if</strong>{|key,val| …}<br>h.<strong>reject!</strong>{|key, val| …}    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="symbol">:a</span> =&gt; <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">p hash[<span class="symbol">:a</span>]    <span class="comment">#=&gt; &quot;b&quot;</span></span><br><span class="line"></span><br><span class="line">hash.delete(<span class="symbol">:a</span>)</span><br><span class="line">p hash[<span class="symbol">:a</span>]    <span class="comment">#=&gt; nil</span></span><br><span class="line"></span><br><span class="line">hash = &#123;<span class="symbol">:a</span> =&gt; <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">p hash.delete(<span class="symbol">:x</span>) &#123; |<span class="params">key</span>| <span class="string">&quot;no <span class="subst">#&#123;key&#125;</span> in this hash object&quot;</span>&#125;   <span class="comment">#=&gt;&quot;no x in this hash object&quot;</span></span><br><span class="line"></span><br><span class="line">hash = &#123;<span class="symbol">:a</span> =&gt; <span class="string">&quot;b&quot;</span>, <span class="symbol">:c</span> =&gt; <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">p hash.delete_if &#123;|<span class="params">key, val</span>| key == <span class="symbol">:a</span> &#125;     <span class="comment">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class="line">p hash.delete_if &#123;|<span class="params">key, val</span>| key == <span class="symbol">:b</span> &#125;     <span class="comment">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">hash = &#123;<span class="symbol">:a</span> =&gt; <span class="string">&quot;b&quot;</span>, <span class="symbol">:c</span> =&gt; <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">p hash.reject! &#123;|<span class="params">key, val</span>| key == <span class="symbol">:a</span>&#125;       <span class="comment">#=&gt; &#123;:c=&gt;&quot;d&quot;&#125;</span></span><br><span class="line">p hash.reject! &#123;|<span class="params">key, val</span>| key == <span class="symbol">:b</span>&#125;       <span class="comment">#=&gt; nil</span></span><br></pre></td></tr></table></figure><p>delete方法带块时，如果不存在指定的键, 则返回块中的结果。<strong>delete_if</strong>方法和**reject!**功能一样，区别在于如果不满足条件是，delete_if返回的是散列对象本身，而reject！则返回nil。</p><p>7.初始化散列<br>h.<strong>clear</strong><br>用<strong>clear</strong>方法清空使用过的散列</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="symbol">a:</span><span class="string">&quot;b&quot;</span>, <span class="symbol">c:</span><span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">p hash.size     <span class="comment">#=&gt; 2</span></span><br><span class="line"></span><br><span class="line">hash.clear</span><br><span class="line">p hash.size     <span class="comment">#=&gt; 0</span></span><br></pre></td></tr></table></figure><h5 id="关于散列的键"><a href="#关于散列的键" class="headerlink" title="关于散列的键"></a>关于散列的键</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hash = <span class="title class_">Hash</span>.new</span><br><span class="line">key1 = <span class="number">1</span></span><br><span class="line">key2 = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">p key1 == key2      <span class="comment">#=&gt; true</span></span><br><span class="line"></span><br><span class="line">hash[key1] = <span class="string">&quot;ruby&quot;</span></span><br><span class="line">p hash.key?(key1)     <span class="comment">#=&gt; true</span></span><br><span class="line">p hash.has_key?(key2)   <span class="comment">#=&gt; false</span></span><br></pre></td></tr></table></figure><p>注：在散列内部，程序会将散列获取值时指定的键，与将值保存到散列时指定的键做比较，判断两者是否一致。具体来说就是，如果两个键key1，key2，当key1.hash与key2.hash得到的整数值相同，并且key1.eql?(key2)为true时，就会认为这两个键是一致的。</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(15)</title>
      <link href="/2015/11/17/ruby-practice-15/"/>
      <url>/2015/11/17/ruby-practice-15/</url>
      
        <content type="html"><![CDATA[<h5 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h5><p>Ruby中比较字符串是否相同也是用**&#x3D;&#x3D;<strong>和</strong>!&#x3D;**等运算符</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#whether two strings are equal</span></span><br><span class="line">puts <span class="string">&quot;aaa&quot;</span> == <span class="string">&quot;aab&quot;</span> <span class="comment">#=&gt; false</span></span><br><span class="line">puts <span class="string">&quot;aaa&quot;</span> != <span class="string">&quot;aab&quot;</span><span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><p>如果是判断两字符串是否相似，采用正则表达式匹配更加简单。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#whether two strings are similar</span></span><br><span class="line">reg = <span class="title class_">Regexp</span>.new(<span class="string">&quot;^a+b$&quot;</span>)</span><br><span class="line">p <span class="string">&quot;aaa&quot;</span> =~ reg <span class="comment">#=&gt; nil (not similar)</span></span><br><span class="line">p <span class="string">&quot;ab&quot;</span> =~ reg <span class="comment">#=&gt; 0 (similar)</span></span><br><span class="line">p <span class="string">&quot;aab&quot;</span> =~ reg <span class="comment">#=&gt; 0 (similar)</span></span><br><span class="line">p <span class="string">&quot;acb&quot;</span> =~ reg <span class="comment">#=&gt; nil (not similar)</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>字符串大小由字符编码的顺序决定，可以通过调用<strong>String#ord</strong>方法获取字符编码的码位。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#compare two strings, which is bigger</span></span><br><span class="line">puts <span class="string">&quot;aaa&quot;</span> &gt; <span class="string">&quot;aab&quot;</span><span class="comment">#=&gt; false</span></span><br><span class="line">puts <span class="string">&quot;aaa&quot;</span> &lt;= <span class="string">&quot;aab&quot;</span><span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><p><em>注：Windows平台下的中文字符使用GBK编码，但非Windows平台下的中文字符使用UTF-8编码</em></p><h5 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h5><p>用特定字符分割字符串时可以使用<strong>split</strong>方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#split string with a special character</span></span><br><span class="line">str = <span class="string">&quot;This is a string&quot;</span></span><br><span class="line">p str.split(<span class="string">&quot; &quot;</span>) <span class="comment">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string&quot;]</span></span><br></pre></td></tr></table></figure><h5 id="字符串的换行符"><a href="#字符串的换行符" class="headerlink" title="字符串的换行符"></a>字符串的换行符</h5><p>用<strong>each_line</strong>方法从标准输入读取字符串时，字符串后面肯定有换行符。在操作字符串时，我们可能不需要换行符。此时可以使用<strong>chomp</strong>和**chomp!**方法来删除字符串行末的换行符。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#delete the line break character from a string</span></span><br><span class="line">str = <span class="string">&quot;hello ruby\n&quot;</span></span><br><span class="line">p str  <span class="comment">#=&gt; &quot;hello ruby\n&quot;</span></span><br><span class="line">p str.chomp <span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br><span class="line">p str.chomp!<span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br><span class="line">p str <span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure><p>如果说只想移除字符串行末的最后一个任意字符，可以通过是用<strong>chop</strong>和**chop!**方法来实现</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#delete the last character from a string</span></span><br><span class="line">str = <span class="string">&quot;hello ruby&quot;</span></span><br><span class="line">puts str.chop<span class="comment">#=&gt; hello rub</span></span><br><span class="line">puts str <span class="comment">#=&gt; hello ruby</span></span><br><span class="line">puts str.chop!<span class="comment">#=&gt; hello rub</span></span><br><span class="line">puts str<span class="comment">#=&gt; hello rub</span></span><br></pre></td></tr></table></figure><h5 id="字符串的索引"><a href="#字符串的索引" class="headerlink" title="字符串的索引"></a>字符串的索引</h5><p>使用<strong>index</strong>和<strong>rindex</strong>方法可以获取某个字符串在另一个字符串中得索引位置，如果不在，则返回nil。<strong>index</strong>方法从左向右检索，<strong>rindex</strong>从右向左检索。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#get the index which a string in another string</span></span><br><span class="line">str1 = <span class="string">&quot;aaabbbbbb&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;bb&quot;</span></span><br><span class="line"></span><br><span class="line">puts str1.index(str2)   <span class="comment">#=&gt; 3</span></span><br><span class="line">puts str1.rindex(str2)  <span class="comment">#=&gt; 7</span></span><br></pre></td></tr></table></figure><p>如果只想判断某个字符串中是否包含另一个字符串时，使用**include?**方法更佳。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#a string whether contains another string</span></span><br><span class="line">str1 = <span class="string">&quot;abc&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;ab&quot;</span></span><br><span class="line">puts str1.<span class="keyword">include</span>?(str2) <span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><h5 id="字符串的置换"><a href="#字符串的置换" class="headerlink" title="字符串的置换"></a>字符串的置换</h5><p>字符串的置换可以通过调用<strong>sub</strong>和<strong>gsub</strong>来实现。<strong>sub</strong>方法仅替换第一个出现的匹配字符，而<strong>gsub</strong>则会替换所有的匹配字符。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#the replacing of string</span></span><br><span class="line">puts <span class="string">&quot;hello&quot;</span>.sub(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)<span class="comment">#=&gt; he*lo</span></span><br><span class="line">puts <span class="string">&quot;hello&quot;</span>.gsub(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)<span class="comment">#=&gt; he**o</span></span><br></pre></td></tr></table></figure><p>字符串的置换还可以通过像替换数组中元素的方式来实现，即索引</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">str[<span class="number">2</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">puts str <span class="comment">#=&gt; he*lo</span></span><br><span class="line"></span><br><span class="line">str[<span class="number">2</span>..<span class="number">3</span>] = <span class="string">&#x27;**&#x27;</span>       </span><br><span class="line">puts str      <span class="comment">#=&gt; he**o</span></span><br><span class="line"></span><br><span class="line">str[<span class="number">1</span>, <span class="number">3</span>]= <span class="string">&#x27;***&#x27;</span>  </span><br><span class="line">puts str <span class="comment">#=&gt; h***o</span></span><br></pre></td></tr></table></figure><h5 id="字符串与数组相同的方法"><a href="#字符串与数组相同的方法" class="headerlink" title="字符串与数组相同的方法"></a>字符串与数组相同的方法</h5><p>字符串的很多方法都与数组相同，主要分为以下三大类：    </p><ul><li>与索引操作相关的方法   </li><li>与<strong>Enumerable</strong>模块相关的方法    </li><li>与连接、反转相关的方法</li></ul><p>删除字符串中的一部分字符并返回，可使用<strong>slice</strong>方法    </p><p><strong>slice(n)</strong><br><strong>slice(n..m)</strong><br><strong>slice(n, m)</strong><br><strong>slice!(n)</strong><br><strong>slice!(n..m)</strong><br><strong>slice!(n, m)</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#the slice of string</span></span><br><span class="line">str = <span class="string">&quot;hello ruby&quot;</span></span><br><span class="line">puts str.slice(<span class="number">1</span>)<span class="comment">#=&gt; e</span></span><br><span class="line">puts str.slice(<span class="number">1</span>..<span class="number">3</span>)<span class="comment">#=&gt; ell</span></span><br><span class="line">puts str.slice(<span class="number">2</span>, <span class="number">3</span>)<span class="comment">#=&gt; llo</span></span><br></pre></td></tr></table></figure><p>不带块的情况下，大部分原生的迭代器在调用时都会返回<strong>Enumberable</strong>对象。因此我们可以对<strong>each_line</strong>, <strong>each_byte</strong>， <strong>each_char</strong>等方法的返回值继续使用像<strong>map</strong>， <strong>collect</strong>等方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#the enumerable of string</span></span><br><span class="line">str = <span class="string">&lt;&lt;EOB</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">ruby</span></span><br><span class="line"><span class="string">EOB</span></span><br><span class="line"></span><br><span class="line">p str <span class="comment">#=&gt; &quot;hello\nruby\n&quot;</span></span><br><span class="line"><span class="comment">#return enumerable</span></span><br><span class="line">p str.each_line <span class="comment">#=&gt; #&lt;Enumerator: &quot;hello\nruby\n&quot;:each_line&gt;</span></span><br><span class="line"></span><br><span class="line">p str.each_line.map &#123; |<span class="params">e</span>| e.chomp  &#125;   <span class="comment">#=&gt; [&quot;hello&quot;, &quot;ruby&quot;]</span></span><br><span class="line"></span><br><span class="line">p str.each_line.collect &#123; |<span class="params">e</span>| e.chomp.upcase&#125; <span class="comment">#=&gt; [&quot;HELLO&quot;, &quot;RUBY&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>delete(str)</strong><br><strong>delete!(str)</strong><br>删除字符串中指定的字符串，并返回删除后的字符</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#delete the specific string from another string</span></span><br><span class="line">str = <span class="string">&quot;hello\n ruby\n&quot;</span></span><br><span class="line">p str.delete(<span class="string">&quot;\n&quot;</span>)      <span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br><span class="line">p str <span class="comment">#=&gt; &quot;hello\n ruby\n&quot;</span></span><br><span class="line"></span><br><span class="line">p str.delete!(<span class="string">&quot;\n&quot;</span>)<span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br><span class="line">p str <span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure><p><strong>reverse(str)</strong><br><strong>reverse!(str)</strong><br>反转字符串，包括破坏方法与非破坏方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reverse a string</span></span><br><span class="line">str = <span class="string">&quot;hello ruby&quot;</span></span><br><span class="line">p str.reverse <span class="comment">#=&gt; &quot;ybur olleh&quot;</span></span><br></pre></td></tr></table></figure><p><strong>str.strip</strong><br><strong>str.strip!</strong><br>删除字符串str中行首和行尾的空白字符    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remove the white space at the begin and end of string</span></span><br><span class="line">str = <span class="string">&quot; hello ruby &quot;</span></span><br><span class="line">p str <span class="comment">#=&gt; &quot; hello ruby&quot;</span></span><br><span class="line">p str.strip     <span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br></pre></td></tr></table></figure><p><strong>str.upcase&#x2F;str.upcase!</strong><br><strong>str.downcase&#x2F;str.downcase!</strong><br><strong>str.swapcase&#x2F;str.swapcase!</strong><br><strong>str.capitalize&#x2F;str.capitalize!</strong><br>字符串大小写的转换系列方法, <strong>swapcase</strong>方法是将字符串中的大小写相互转换。而<strong>capitalize</strong>方法则是将字符串的首个字符大写，其余的均改为小写    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#text transform</span></span><br><span class="line">str = <span class="string">&quot;Hello RUBY&quot;</span></span><br><span class="line">p str.upcase <span class="comment">#=&gt; &quot;HELLO RUBY&quot;</span></span><br><span class="line">p str.downcase<span class="comment">#=&gt; &quot;hello ruby&quot;</span></span><br><span class="line">p str.swapcase          <span class="comment">#=&gt; &quot;hELLO ruby&quot;</span></span><br><span class="line">p str.capitalize<span class="comment">#=&gt; &quot;Hello ruby&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(14)</title>
      <link href="/2015/11/12/ruby-practice-14/"/>
      <url>/2015/11/12/ruby-practice-14/</url>
      
        <content type="html"><![CDATA[<h4 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h4><h5 id="普通创建"><a href="#普通创建" class="headerlink" title="普通创建"></a>普通创建</h5><p>Ruby中使用**” “<strong>或</strong>‘ ‘<strong>符号来创建字符串，在字符串中也可以包含表达式</strong>#{}**，这个表达式被称之为内嵌表达式。如果字符串中需要包含””或者’’等字符时，则可以通过转义字符\来实现。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;this is a string&quot;</span></span><br><span class="line">puts str</span><br><span class="line"></span><br><span class="line">str = <span class="string">&#x27;this is also a string&#x27;</span></span><br><span class="line">puts str</span><br><span class="line"></span><br><span class="line">args = <span class="string">&quot;string with argument&quot;</span></span><br><span class="line">puts <span class="string">&quot;this is a <span class="subst">#&#123;args&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;Hello &#x27;string&#x27;&quot;</span></span><br><span class="line">puts str</span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;Hello \&quot;string\&quot;&quot;</span></span><br><span class="line">puts str</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="Q或-q创建"><a href="#Q或-q创建" class="headerlink" title="%Q或%q创建"></a>%Q或%q创建</h5><p>针对字符串中包含””或’’等字符的，建议采用**%Q<strong>或者</strong>%q<strong>来创建字符串，这样更加清晰明了。使用</strong>%Q<strong>相当于</strong>“ “<strong>创建字符串，</strong>%q<strong>相当于</strong>‘ ‘**创建字符.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">%Q(this string created by %Q)</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">%q(this string created by %q)</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">%Q(contains &#x27;special&#x27; &quot;character&quot; directly)</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">%q(contains &#x27;special&#x27; &quot;character&quot; directly)</span></span><br></pre></td></tr></table></figure><h5 id="Here-Document创建，"><a href="#Here-Document创建，" class="headerlink" title="Here Document创建，"></a>Here Document创建，</h5><p>对于字符串中包含换行符的字符串，使用Here Document语法来创建极为方便。Here Document是Unix中使用Shell的一种语法，通常用**&lt;&lt;**来创建字符串。其语法结构如下：</p><pre><code>&lt;&lt;&quot;结束标识符&quot;字符串内容结束标识符</code></pre><p><em>注意：结束标识符可以使用” “或’ ‘来定义，使用” “时，字符串内可以使用转义字符和内嵌表达式，而’ ‘则不会，只会原封不动的显示所有字符。</em>   </p><p>一般使用*EOF(End of File)<em>或</em>EOB(End of Block)*等作为结束标识符。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&lt;&lt;EOB</span></span><br><span class="line"><span class="string">the first string</span></span><br><span class="line"><span class="string">the second string in a new line</span></span><br><span class="line"><span class="string">ok, I also get the third string</span></span><br><span class="line"><span class="string">EOB</span></span><br><span class="line"></span><br><span class="line">print str<span class="comment">#=&gt;the string has three lines, just like defined.</span></span><br></pre></td></tr></table></figure><p>如果字符串中存在缩进，可以使用**&lt;&lt;-<strong>来替代</strong>&lt;&lt;**，这样将会保持字符串定义中的缩进。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用 "></a>使用<code> </code></h5><p>通过使用<strong>`命令`</strong>, 可以创建命令的标准输出并将其转换为字符串对象。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">`ls -l`</span></span><br><span class="line"></span><br><span class="line">puts str </span><br><span class="line"><span class="comment">#=&gt; </span></span><br><span class="line">total <span class="number">8</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> yushi  staff  <span class="number">634</span> <span class="title class_">Nov</span> <span class="number">16</span> <span class="number">17</span><span class="symbol">:</span><span class="number">12</span> string_create.rb</span><br></pre></td></tr></table></figure><h5 id="使用printf和sprintf"><a href="#使用printf和sprintf" class="headerlink" title="使用printf和sprintf"></a>使用printf和sprintf</h5><p><strong>printf</strong>与<strong>sprintf</strong>均是可以输出指定格式的字符串，不同之处在于printf会将字符串直接输出在控制台上，而sprintf则会将字符串转为为字符串对象。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">123</span></span><br><span class="line">printf(<span class="string">&quot;%d\n&quot;</span>, number)<span class="comment">#=&gt; 123</span></span><br><span class="line">printf(<span class="string">&quot;%4d\n&quot;</span>, number)<span class="comment">#=&gt;  123</span></span><br><span class="line">printf(<span class="string">&quot;%04d\n&quot;</span>, number)    <span class="comment">#=&gt; 0123</span></span><br><span class="line">printf(<span class="string">&quot;%+d\n&quot;</span>, number)<span class="comment">#=&gt; +123</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;Ruby&quot;</span></span><br><span class="line">p sprintf(<span class="string">&quot;Hello,%s&quot;</span>, name)<span class="comment">#=&gt; &quot;Hello,Ruby&quot;</span></span><br><span class="line">p sprintf(<span class="string">&quot;Hello,%8s&quot;</span>, name)<span class="comment">#=&gt; &quot;Hello,    Ruby&quot;</span></span><br><span class="line">p sprintf(<span class="string">&quot;Hello,%-8s&quot;</span>, name)<span class="comment">#=&gt; &quot;Hello,Ruby    &quot;</span></span><br></pre></td></tr></table></figure><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><p>用<strong>length</strong>方法和<strong>size</strong>方法获取字符串长度。<strong>bytesize</strong>方法可以获取字节长度。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;This is a string&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;字符串&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get the length of a string object</span></span><br><span class="line">puts str.length<span class="comment">#=&gt; 16</span></span><br><span class="line">puts str.size<span class="comment">#=&gt; 16</span></span><br><span class="line">puts str2.length<span class="comment">#=&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get the bytesize of a string </span></span><br><span class="line">puts str.bytesize<span class="comment">#=&gt; 16</span></span><br><span class="line">puts str2.bytesize<span class="comment">#=&gt; 9</span></span><br></pre></td></tr></table></figure><p>判断字符串是否为空，可用**empty?**方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#judge the string if is empty</span></span><br><span class="line">puts <span class="string">&quot;&quot;</span>.empty?<span class="comment">#=&gt; true</span></span><br><span class="line">puts <span class="string">&quot;string&quot;</span>.empty?<span class="comment">#=&gt; false</span></span><br></pre></td></tr></table></figure><p><em>字符串的索引与数组的索引用法一样，可参照使用</em></p><h5 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h5><p>字符串的连接有以下两种情况：   </p><ul><li>将字符串合并为一个新的字符串   </li><li>扩展原有字符串</li></ul><p>使用**+**可以合并两个字符串时，会创建一个新的字符串。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#using &#x27;+&#x27;, will create a new string object</span></span><br><span class="line">str1 = <span class="string">&quot;hello &quot;</span></span><br><span class="line">str2 = <span class="string">&quot;world&quot;</span></span><br><span class="line">str3 = str1</span><br><span class="line"></span><br><span class="line">puts str1 + str2 <span class="comment">#=&gt; hello world</span></span><br><span class="line">puts str1<span class="comment">#=&gt; hello</span></span><br><span class="line"></span><br><span class="line">puts str1 = str1 + str2 <span class="comment">#=&gt; hello world</span></span><br><span class="line">puts str1<span class="comment">#=&gt; hello world</span></span><br><span class="line">puts str3<span class="comment">#=&gt; hello</span></span><br></pre></td></tr></table></figure><p>如果只想扩展原有字符串，可以使用**&lt;&lt;<strong>或</strong>concat**方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#using &#x27;&lt;&lt;&#x27;, will change the original string object</span></span><br><span class="line">str1 = <span class="string">&quot;hello &quot;</span></span><br><span class="line">str2 = <span class="string">&quot;world&quot;</span></span><br><span class="line">str3 = str1</span><br><span class="line"></span><br><span class="line">puts str1<span class="string">&lt;&lt;str2#=&gt; hello world</span></span><br><span class="line"><span class="string">puts str1#=&gt; hello world</span></span><br><span class="line"><span class="string">puts str3#=&gt; hello world</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#using &#x27;concat&#x27; method, also will change the original string object</span></span><br><span class="line"><span class="string">str1 = &quot;hello &quot;</span></span><br><span class="line"><span class="string">str2</span> = <span class="string">&quot;world&quot;</span></span><br><span class="line">str3 = str1</span><br><span class="line"></span><br><span class="line">puts str1.concat str2<span class="comment">#=&gt; hello world</span></span><br><span class="line">puts str1<span class="comment">#=&gt; hello world</span></span><br><span class="line">puts str3<span class="comment">#=&gt; hello world</span></span><br></pre></td></tr></table></figure><p><em>注意：一般情况下使用</em>*&lt;&lt;<strong>和</strong>concat*<em>方法更有效率，但是也可以根据情况而定</em></p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make the octopress adapt OS X EI Capitan</title>
      <link href="/2015/11/11/how-to-make-the-octopress-adapt-os-x-ei-capitan/"/>
      <url>/2015/11/11/how-to-make-the-octopress-adapt-os-x-ei-capitan/</url>
      
        <content type="html"><![CDATA[<p>Octopress was broken after I upgraded Mac to OS X EI Capitan 10.11.1 in these days. The details of the problem is below.</p><p>Octopress is work well in Mac10.10. but when I upgraded to Mac10.11.1(OS X EI Capitan). And put <em>rake preview</em> in terminal to see the blog what looks like, got following error.</p><pre><code>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000rake aborted!Errno::ENOENT: No such file or directory - compass/Users/user/git/octopress/Rakefile:85:in spawn/Users/user/git/octopress/Rakefile:85:in block in &lt;top (required)&gt;Tasks: TOP =&gt; preview(See full trace by running task with --trace)</code></pre><span id="more"></span><p>Why we get this error, this error caused by rake command, so that means maybe it is ruby version problem. let’s take a look it.</p><pre><code>~-&gt; $ ruby -v~-&gt; ruby 2.0.0p645 (2015-04-13 revision 50299) [universal.x86_64-darwin15]</code></pre><p>The ruby newest version is 2.2.3. Ok, let’s upgrade it. There are two ways to do it.</p><h4 id="Using-rbenv"><a href="#Using-rbenv" class="headerlink" title="Using rbenv"></a>Using rbenv</h4><p>If you don’t have rbenv in your local machine. You need to install it firstly.<br>1.Go to <a href="https://github.com/sstephenson/rbenv">https://github.com/sstephenson/rbenv</a> to get it.<br>2.install ruby-2.2.3</p><pre><code>rbenv install 2.2.3</code></pre><p>3.In the root of your octopress blog, put below commands</p><pre><code>rbenv local 2.2.3gem install bundlerbundle install</code></pre><h4 id="Using-RVM"><a href="#Using-RVM" class="headerlink" title="Using RVM"></a>Using RVM</h4><p>1.Clear git cache</p><pre><code>rm -rf /usr/local/.git</code></pre><p>2.Install RVM</p><pre><code>curl -L https://get.rvm.io | bash -s stable --ruby</code></pre><p>3.Install Ruby 2.2.3</p><pre><code>rvm install ruby-2.2.3rvm use 2.2.3rvm rubygems latest</code></pre><p>After these steps, make sure you’re using Ruby 2.2.3<br>4.Go to the root of the your octopress blog</p><pre><code>gem install bundlerbundle install</code></pre><p>Both ways can bring octopress back.</p><p><em>Reference: <a href="https://github.com/imathis/octopress/issues/1749">https://github.com/imathis/octopress/issues/1749</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> Ruby </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(13)</title>
      <link href="/2015/10/26/ruby-practice-13/"/>
      <url>/2015/10/26/ruby-practice-13/</url>
      
        <content type="html"><![CDATA[<h4 id="替换数组内的元素"><a href="#替换数组内的元素" class="headerlink" title="替换数组内的元素"></a>替换数组内的元素</h4><p>根据指定规则替换数组中的元素，Ruby也提供了以下方法:</p><p>ary.<strong>collect</strong> { |item| …}<br>ary.<strong>collect!</strong> { |item| …}<br>ary.<strong>map</strong> { |item| …}<br>ary.<strong>map!</strong> { |item| …}   </p><p>将数组ary中的各元素item传递给块做处理。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary1 = ary.collect <span class="keyword">do</span> |<span class="params">item</span>|</span><br><span class="line">    item*<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p ary1<span class="comment">#=&gt; [ 2, 4, 6]</span></span><br><span class="line"></span><br><span class="line">ary2 = ary.map <span class="keyword">do</span> |<span class="params">item</span>|</span><br><span class="line">    <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p ary2<span class="comment">#=&gt; [1, 0, 1]</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>ary.<strong>fill</strong>(value)<br>ary.<strong>fill</strong>(value, begin)<br>ary.<strong>fill</strong>(value, begin, len)<br>ary.<strong>fill</strong>(vlaue, n..m)<br>将数组ary的元素替换为value。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">0</span>)<span class="comment">#=&gt; [0, 0, 0]</span></span><br><span class="line">p [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">0</span>, <span class="number">1</span>)<span class="comment">#=&gt; [1, 0, 0]</span></span><br><span class="line">p [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>)<span class="comment">#=&gt; [0, 0 ,3]</span></span><br><span class="line">p [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">0</span>, <span class="number">1</span>..<span class="number">2</span>)<span class="comment">#=&gt; [1, 0, 0]</span></span><br><span class="line"></span><br><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary.fill(<span class="number">0</span>)</span><br><span class="line">p ary<span class="comment">#=&gt; [0, 0, 0]</span></span><br></pre></td></tr></table></figure><p>*注意，此方法会修改原对象的值。即为破坏方法。</p><p>ary.<strong>flatten</strong><br>ary.<strong>flatten</strong><br>平坦化数组ary，所谓平坦化是指展开嵌套数组变为一个大数组。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line">p ary.flatten  <span class="comment">#=&gt; [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>ary.<strong>reverse</strong><br>ary.<strong>reverse!</strong><br>反转数组ary的元素顺序</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">p ary.reverse<span class="comment">#=&gt; [3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>ary.<strong>sort</strong><br>ary.<strong>sort!</strong><br>ary.<strong>sort</strong>{|i, j| … }<br>ary.<strong>sort!</strong>{|i, j| …}<br>ary.<strong>sort_by</strong> {|i| …}   </p><p>对数组ary中进行排序，排序方法可以由块指定。没有块时，使用*&lt;&#x3D;&gt;*运算符比较。其中<strong>sort_by</strong>方法中排序是根据块的运行结果来对数组的所有元素进行排序。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line">p ary.sort<span class="comment">#=&gt; [4, 5, 9]</span></span><br><span class="line">ary.sort! &#123; |<span class="params">i, j</span>|</span><br><span class="line">i % <span class="number">3</span> &lt;=&gt; j % <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">p ary <span class="comment">#=&gt; [9, 4, 5]</span></span><br><span class="line"></span><br><span class="line">p [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>].sort_by &#123; |<span class="params">i</span>| -i &#125;  <span class="comment">#=&gt; [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h4 id="数组的迭代"><a href="#数组的迭代" class="headerlink" title="数组的迭代"></a>数组的迭代</h4><p><strong>each</strong>方法并不知道元素的索引值。当需要指定索引值时，可以使用<strong>each_with_index</strong>方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">23</span>, <span class="number">54</span>, <span class="number">14</span>]</span><br><span class="line">ary.each &#123; |<span class="params">item</span>| print <span class="string">&quot;<span class="subst">#&#123;item&#125;</span> &quot;</span> &#125;<span class="comment">#=&gt; 23 54 14</span></span><br><span class="line"></span><br><span class="line">ary.each_with_index <span class="keyword">do</span> |<span class="params">item, index</span>|</span><br><span class="line">print <span class="string">&quot;The &quot;</span>, index+<span class="number">1</span>, <span class="string">&quot; element is :&quot;</span>, item, <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果数组内各元素全部处理完毕后该数组就不需要了，此时可以通过逐个删除数组元素使数组变空这样的手段来实现循环。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> item = ary.pop</span><br><span class="line"><span class="comment">## the handle of the item</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>数组中的各个元素也可以是数组，也就是数组的数组。可以用它来表示矩阵。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ary = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">p ary[<span class="number">1</span>][<span class="number">1</span>]<span class="comment">#=&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3个元素引用的是同一个数组对象</span></span><br><span class="line">ary = <span class="title class_">Array</span>.new(<span class="number">3</span>, [<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">ary[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">p ary  <span class="comment">#=&gt; [[0, 1], [0, 1], [0, 1]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#避免引用同一个数组对象，在块中，重复创建新的对象</span></span><br><span class="line">ary = <span class="title class_">Array</span>.new(<span class="number">3</span>) <span class="keyword">do</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ary[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">p ary  <span class="comment">#=&gt; [[0, 1], [0, 0], [0, 0]]</span></span><br></pre></td></tr></table></figure><p>使用*Array.new(length, array)*创建二维数组。创建的所有元素引用的都是同一个对象array，修改其中一个元素的值，其他元素也会变化。如上示例代码。如何避免？可在创建数组的块中重复创建新对象。</p><p>ary.<strong>zip</strong>(ary1, ary2, …)<br><strong>zip</strong>方法会将接收器和参数传来的数组元素逐一取出，而且每次都会启动块。参数可以是一个或多个。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">ary3 = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line">ary1.zip(ary2, ary3) <span class="keyword">do</span> |<span class="params">a, b, c</span>|</span><br><span class="line">result &lt;&lt; a + b + c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p result<span class="comment">#=&gt; [111, 222, 333]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(12)</title>
      <link href="/2015/10/13/ruby-practice-12/"/>
      <url>/2015/10/13/ruby-practice-12/</url>
      
        <content type="html"><![CDATA[<p>数组(<strong>Array</strong>)也是Ruby中表现一组数据的对象</p><h4 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h4><p>创建方式有一下几种：<br>1.使用<strong>Array.new</strong><br>Array#new方法可带两个可选参数，第1个参数表示数组中得个数，第2个参数表示每个元素初始值。如果没有指定第2个参数，其元素的初始值为<strong>nil</strong>。如果不带参数则会创建一个空数组。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不带参数c</span></span><br><span class="line">ary = <span class="title class_">Array</span>.new</span><br><span class="line">p ary<span class="comment">#=&gt; []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#带1个参数</span></span><br><span class="line">ary = <span class="title class_">Array</span>.new(<span class="number">3</span>)</span><br><span class="line">p ary<span class="comment">#=&gt; [nil, nil, nil]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#带2个参数</span></span><br><span class="line">ary = <span class="title class_">Array</span>.new(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">p ary<span class="comment">#=&gt; [5, 5, 5]</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.使用**%w<strong>与</strong>%i**<br><strong>%w</strong>用于创建不包含空白的字符串数组, 使用此方法创建字符串数组更加简洁。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%w(This is ruby)</span><span class="comment">#=&gt; [&quot;This&quot;, &quot;is&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>%i</strong>用于创建符号(Symbol)数组。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%i(<span class="title class_">This</span> is ruby) <span class="comment">#=&gt; [:This, :is, :ruby]</span></span><br></pre></td></tr></table></figure><p>使用**%w<strong>和</strong>%i<strong>创建数组时用到了(). 其实还可以用很多字符来替代，不过建议使用</strong>()<strong>,</strong>&lt;&gt;<strong>,</strong>||**.</p><p>3.使用<strong>to_a</strong>方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash=&#123;<span class="symbol">name:</span> <span class="string">&quot;yu&quot;</span>, <span class="symbol">gender:</span> <span class="string">&quot;male&quot;</span>&#125;<span class="comment">#=&gt; &#123;:name=&gt;&quot;yu&quot;, :gender=&gt;&quot;male&quot;&#125;</span></span><br><span class="line">hash.to_a<span class="comment">#=&gt; [[:name, &quot;yu&quot;], [:gender, &quot;male&quot;]]</span></span><br></pre></td></tr></table></figure><p>4.使用<strong>split</strong>方法<br>对逗号或空白字符间隔的字符串可以使用split方法来创建数组</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;this is ruby&quot;</span>.split()<span class="comment">#=&gt; [&quot;this&quot;, &quot;is&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><p>获取元素的方法有以下几种：   </p><p>1.使用**[]**<br>(a) <strong>ary[n]</strong>, 获取索引值为n的元素，当索引值为负数时，从数组的末尾开始获取元素。如果指定的索引值大于元素个数则返回nil。 </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary[<span class="number">1</span>]<span class="comment">#=&gt; 2</span></span><br><span class="line">ary[-<span class="number">1</span>]<span class="comment">#=&gt; 5</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(b) **ary[n..m]**, 获取从a[n]到a[m]的元素，并返回新的数组。如果m大于数组的长度，返回的结果与指定数组最后一个元素是一样的。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> ruby</span><br><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary[<span class="number">1</span>..<span class="number">3</span>]<span class="comment">#=&gt; [2, 3, 4]</span></span><br><span class="line">ary[<span class="number">1</span>..<span class="number">7</span>]<span class="comment">#=&gt; [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>(c) <strong>ary[n…m]</strong>, 获取从a[n]到a[m-1]的元素，并返回新数组    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary[<span class="number">1</span>...<span class="number">3</span>]<span class="comment">#=&gt; [2, 3]</span></span><br><span class="line">ary[<span class="number">1</span>...<span class="number">7</span>]<span class="comment">#=&gt; [2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>(d) <strong>ary[n, len]</strong>, 获取从a[n]开始之后的len个元素，并返回新数组. 如果len的长度大于从n开始后数组的剩余长度，则返回的结果与指定数组最后一个元素是一样的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary[<span class="number">1</span>, <span class="number">3</span>]<span class="comment">#=&gt; [2, 3, 4]</span></span><br><span class="line">ary[<span class="number">2</span>, <span class="number">7</span>]<span class="comment">#=&gt; [3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>2.使用<strong>at</strong>方法<br>ary.at(n)与ary[n]等价    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary.at(<span class="number">1</span>)<span class="comment">#=&gt; 2</span></span><br><span class="line">ary[<span class="number">1</span>]<span class="comment">#=&gt; 2</span></span><br></pre></td></tr></table></figure><p>3.使用<strong>slice</strong>方法<br>ary.slice(n..m)与ary[n..m]等价，ary.slice(n…m)与ary[n…m]等价，ary.slice(n, len)与ary[n, len]等价   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary.slice(<span class="number">1</span>..<span class="number">3</span>)<span class="comment">#=&gt; [2, 3, 4]</span></span><br><span class="line">ary.slice(<span class="number">1</span>...<span class="number">3</span>)<span class="comment">#=&gt; [2, 3]</span></span><br><span class="line">ary.slice(<span class="number">1</span>, <span class="number">3</span>)<span class="comment">#=&gt; [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>4.使用<strong>values_at</strong>方法<br>可以通过此方法来获取多个索引的元素, 其用法如下</p><pre><code>ary.values_at(n1, n2, ...)</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary.values_at(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>)<span class="comment">#=&gt; [1, 3, 5]</span></span><br><span class="line">ary.values_at(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)<span class="comment">#=&gt; [2, 4, nil]</span></span><br></pre></td></tr></table></figure><h4 id="元素赋值"><a href="#元素赋值" class="headerlink" title="元素赋值"></a>元素赋值</h4><p>使用[],at,slice方法还可以给元素赋值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span><span class="comment">#=&gt; [&quot;a&quot;, 2, 3, 4, 5]</span></span><br><span class="line">ary[<span class="number">1</span>...<span class="number">3</span>] = [<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]<span class="comment">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 4, 5]</span></span><br><span class="line">ary[<span class="number">3</span>..<span class="number">3</span>] = <span class="string">&quot;d&quot;</span><span class="comment">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, 5]</span></span><br><span class="line">ary[<span class="number">4</span>, <span class="number">1</span>] = <span class="string">&quot;e&quot;</span><span class="comment">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="元素插入"><a href="#元素插入" class="headerlink" title="元素插入"></a>元素插入</h4><p>插入元素其实就是对0个元素进行赋值，因此指定[n, 0]后，就会在索引值为n的元素前插入新元素。   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ary[<span class="number">2</span>, <span class="number">0</span>] = <span class="number">10</span><span class="comment">#=&gt; [1, 2, 10, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="数组作为集合使用"><a href="#数组作为集合使用" class="headerlink" title="数组作为集合使用"></a>数组作为集合使用</h4><p>交集：取出同时属于两个集合的元素，并创建新的集合</p><pre><code>ary = ary1 &amp; ary2</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">ary = ary1 &amp; ary2<span class="comment">#=&gt; [1, 3]</span></span><br></pre></td></tr></table></figure><p>并集：取出两个集合中的所有元素，并创建新的集合</p><pre><code>ary = ary1 | ary2</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">ary = ary1 |<span class="params"> ary2#=&gt; [1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><p>集合的差：把某个集合中属于另外一个集合的元素删除，并创建新的集合</p><pre><code>ary = ary1 - ary2</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">ary = ary1 - ary2<span class="comment">#=&gt; [2]</span></span><br></pre></td></tr></table></figure><p><em>注意：连接数组除了可以使用</em>*|<strong>外还可以使用</strong>+*<em>。但是这两种方法返回的结果是不一样的。即使用|相同的元素只有一个，使用+相同的元素会重复存在</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">ary = ary1 |<span class="params"> ary2#=&gt; [1, 2, 3, 5]</span></span><br><span class="line"><span class="params">ary = ary1 + ary2#=&gt; [1, 2, 3, 1, 3, 5]</span></span><br></pre></td></tr></table></figure><h4 id="数组作为队列和栈"><a href="#数组作为队列和栈" class="headerlink" title="数组作为队列和栈"></a>数组作为队列和栈</h4><table><thead><tr><th></th><th align="right">对数组开始元素的操作</th><th>对数组末尾元素的操作</th></tr></thead><tbody><tr><td>追加元素</td><td align="right">unshift</td><td>push</td></tr><tr><td>删除元素</td><td align="right">shift</td><td>pop</td></tr><tr><td>引用元素</td><td align="right">first</td><td>last</td></tr></tbody></table><p>使用<strong>push</strong>方法和<strong>shift</strong>方法可以实现队列。使用<strong>push</strong>方法和<strong>pop</strong>方法可以实现栈。</p><p><strong>shift</strong>方法和<strong>pop</strong>方法不只是获取数组元素，还会把该元素从数组中删除。如果只是想单纯地引用元素，应该是用<br><strong>first</strong>和<strong>last</strong>方法。</p><p>1.ary.<strong>unshift</strong>(item)<br>将item元素添加到数组的开头   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary.unshift(<span class="number">0</span>)<span class="comment">#=&gt; [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>2.ary.<strong>push</strong>(item), ary <strong>&lt;&lt;</strong> item<br><strong>&lt;&lt;<strong>与</strong>push</strong>是等价的方法，在数组的末尾添加新元素item   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary.push(<span class="number">4</span>)<span class="comment">#=&gt; [1, 2, 3, 4]</span></span><br><span class="line">ary &lt;&lt; <span class="number">5</span><span class="comment">#=&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>3.ary1.<strong>concat</strong>(ary2)<br>连接数组ary1和数组ary2. concat是具有破坏性的方法。会将ary2的元素直接插入到ary1数组的后面。**+**也是连接两个数组的方法，但是不具破坏性，会生成新的数组。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">ary1.concat(ary2)</span><br><span class="line">p ary1<span class="comment">#=&gt; [1, 2, 3, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p><em>注：能够改变对象值的方法称为具有破坏性的方法，比如pop方法、shift方法等。有些方法后面加上</em>*!*<em>的也是破坏性方法</em></p><p>4.ary.<strong>compact</strong> 与ary.<strong>compact!</strong><br>从数组ary中删除所有nil元素     </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="literal">nil</span>, <span class="number">1</span>, <span class="literal">nil</span>, <span class="number">2</span>]</span><br><span class="line">ary.compact<span class="comment">#=&gt; [1, 2]</span></span><br></pre></td></tr></table></figure><p>5.ary.<strong>delete</strong>(item)和ary.<strong>delete_at</strong>(n)<br>从数组a中删除item元素。 第2个方法删除ary[n]元素。   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary.delete(<span class="number">2</span>)</span><br><span class="line">p ary<span class="comment">#=&gt; [1, 3]</span></span><br><span class="line">ary.delete_at(<span class="number">0</span>)</span><br><span class="line">p ary<span class="comment">#=&gt; [3]</span></span><br></pre></td></tr></table></figure><p>6.ary.<strong>delete_if</strong>{ |item| …}<br>ary.<strong>reject</strong>{ |item| …}<br>ary.<strong>reject!</strong>{ |item| ..}    </p><p>判断数组ary中的各元素item，如果块的执行结果为真，则从数组ary中删除item。<strong>delete_if</strong>和**reject!**方法都是具有破坏性的方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary.delete_if &#123; |<span class="params">item</span>| item &gt; <span class="number">2</span>&#125;</span><br><span class="line">p ary<span class="comment">#=&gt; [1, 2]</span></span><br><span class="line">ary.reject! &#123; |<span class="params">item</span>| item &lt; <span class="number">2</span>&#125;</span><br><span class="line">p ary<span class="comment">#=&gt; [2]</span></span><br></pre></td></tr></table></figure><p>7.ary.<strong>slice</strong>(n)<br>ary.<strong>slice</strong>(n..m)<br>ary.<strong>slice!</strong>(n, len)<br>删除数组ary中指定的部分，并返回删除部分的值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">p ary.slice!(<span class="number">4</span>)<span class="comment">#=&gt; 5</span></span><br><span class="line">p ary.slice!(<span class="number">2</span>..<span class="number">3</span>)<span class="comment">#=&gt; [3, 4]</span></span><br><span class="line">p ary.slice(<span class="number">1</span>, <span class="number">1</span>)<span class="comment">#=&gt; [2]</span></span><br></pre></td></tr></table></figure><p>8.ary.<strong>uniq</strong>, ary.**uniq!**删除数组ary中重复的元素。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">ary.uniq<span class="comment">#=&gt; [1, 2,3]</span></span><br></pre></td></tr></table></figure><p>9.ary.<strong>shift</strong>. 删除数组ary开头的元素，并返回删除的值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]j</span><br><span class="line">ary.shift<span class="comment">#=&gt; 1</span></span><br><span class="line">p ary<span class="comment">#=&gt; [2, 3]</span></span><br></pre></td></tr></table></figure><p>10.ary.<strong>pop</strong>. 删除数组ary末尾的元素，并返回删除的值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ary.pop<span class="comment">#=&gt; 3</span></span><br><span class="line">p ary<span class="comment">#=&gt; [1, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(11)</title>
      <link href="/2015/09/28/ruby-practice-11/"/>
      <url>/2015/09/28/ruby-practice-11/</url>
      
        <content type="html"><![CDATA[<p>Ruby中所有表现数据的类型都称为数值类，他们都是<strong>Numeric</strong>的子类。起详尽的类继承结构如下：</p><p><img src="/assets/images/legacy/numeric-inheritance.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/numeric-inheritance.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="assets/images/legacy/numberic-inheritance.png"></p><span id="more"></span><p>Ruby中一般用到得整数都是在<strong>Fixnum</strong>类范围内的，如果超过了Fixnum的范围，Ruby会自动将其转换为<strong>Bignum</strong>类。</p><p>正如上图所示，Ruby可以处理有理数和复数，有理数用<strong>Rational</strong>类表示，复数用<strong>Complex</strong>类表示。其定义形式如下：</p><p>1.Rational对象</p><pre><code>Rational(分子，分母)</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="title class_">Rational</span>(<span class="number">1</span>, <span class="number">3</span>)<span class="comment">#=&gt; (1/3)</span></span><br><span class="line">a.to_f<span class="comment">#=&gt; 0.3333333</span></span><br></pre></td></tr></table></figure><p>通过<em>Rational#to_f</em>方法可将有理数转为Float对象</p><p>2.Complex对象</p><pre><code>Complex(实数，虚数)</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="title class_">Complex</span>(<span class="number">1</span>, <span class="number">2</span>)<span class="comment">#=&gt; (1+2i)</span></span><br></pre></td></tr></table></figure><p>单纯的数字罗列表示10进制整数。以0b开头的数值表示2进制数，以0或者0o开头的数值表示8进制数，以0d开头的数值表示10进制数，以0x开头的数值表示16进制数。字面量中的_会被自动忽略。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">123</span><span class="comment">#=&gt; 123</span></span><br><span class="line">p <span class="number">1_23</span><span class="comment">#=&gt; 123</span></span><br><span class="line">p <span class="number">0123</span> <span class="comment">#=&gt; 83</span></span><br><span class="line">p <span class="number">0o123</span><span class="comment">#=&gt; 83</span></span><br><span class="line">p <span class="number">0d123</span><span class="comment">#=&gt; 123</span></span><br><span class="line">p <span class="number">0x123</span><span class="comment">#=&gt; 291</span></span><br></pre></td></tr></table></figure><p>Integer对象与Float对象的计算结果为Float对象。</p><p>x.<strong>div</strong>(y)<br>返回x除以y后的商的整数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">5</span>.div(<span class="number">2</span>)<span class="comment">#=&gt; 2</span></span><br><span class="line">p <span class="number">5</span>.div(<span class="number">2.2</span>)<span class="comment">#=&gt; 2</span></span><br></pre></td></tr></table></figure><p>x.<strong>quo</strong>(y)<br>返回x除以y后的商，如果x、y都是整数则返回Rational对象</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">5</span>.quo(<span class="number">2</span>)<span class="comment">#=&gt; (5/2)</span></span><br><span class="line">p <span class="number">5</span>.quo(<span class="number">2.2</span>)<span class="comment">#=&gt; 2.27272727</span></span><br></pre></td></tr></table></figure><p>x.<strong>modulo</strong>(y)<br>返回x除以y后的余数，与<em>x % y</em>等价</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">5</span>.modulo(<span class="number">2</span>)<span class="comment">#=&gt; 1</span></span><br><span class="line">p <span class="number">5</span> % <span class="number">2</span><span class="comment">#=&gt; 1</span></span><br></pre></td></tr></table></figure><p>x.<strong>divmod</strong>(y)<br>将x除以y后的商和余数作为数组返回,余数的符号与y的符号一致。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">5</span>.divmod(<span class="number">2</span>)<span class="comment">#=&gt; [2, 1]</span></span><br><span class="line">p -<span class="number">5</span>.divmod(<span class="number">2</span>)<span class="comment">#=&gt; [-3, 1]</span></span><br><span class="line">p <span class="number">5</span>.divmod(-<span class="number">2</span>)<span class="comment">#=&gt; [-3, -1]</span></span><br></pre></td></tr></table></figure><p>x.<strong>remainder</strong>(y)<br>返回x除以y的余数，结果的符号与x的符号一致</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">5</span>.remainder(<span class="number">2</span>)<span class="comment">#=&gt; 1</span></span><br><span class="line">p <span class="number">5</span>.remainder(-<span class="number">2</span>)<span class="comment">#=&gt; 1</span></span><br><span class="line">p -<span class="number">5</span>.remainder(<span class="number">2</span>)<span class="comment">#=&gt; -1</span></span><br></pre></td></tr></table></figure><p><em>注：当除数为0时，Integer类会返回错误，而Float类则会返回Infinity（无限大）或者NaN（Not a Number）。</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">1</span> / <span class="number">0</span><span class="comment">#=&gt; ZeroDivisionError</span></span><br><span class="line">p <span class="number">1.0</span> / <span class="number">0</span> <span class="comment">#=&gt; Infinity</span></span><br><span class="line">p <span class="number">0</span> / <span class="number">0.0</span><span class="comment">#=&gt; NaN</span></span><br></pre></td></tr></table></figure><p>针对数值类型，Ruby提供<strong>Math</strong>模块增强数据的处理功能，包括三角函数，对数函数等常用的函数运算方法。通过调用如下方法可得到<strong>Math</strong>模块提供的方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.methods</span><br></pre></td></tr></table></figure><p><strong>to_f</strong>方法可将Integer对象转换为Float对象，<strong>to_i</strong>方法可将Float对象转换为Integer对象，to_i方法会将小数点以后的值去掉。通过使用<strong>round</strong>方法可对小数进行四舍五入的处理.<strong>ceil</strong>方法返回比比原数值大得最小整数，<strong>floor</strong>方法返回比原数值小的最大整数。通过<strong>to_r</strong>和<strong>to_c</strong>方法可将数值转换为Rational对象和Complex对象。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">1</span>.to_f<span class="comment">#=&gt; 1.0</span></span><br><span class="line">p <span class="number">1.23</span>.to_i<span class="comment">#=&gt; 1</span></span><br><span class="line">p <span class="number">1.23</span>.round<span class="comment">#=&gt; 1</span></span><br><span class="line">p <span class="number">1.50</span>.round<span class="comment">#=&gt; 2</span></span><br><span class="line">p <span class="number">1.23</span>.ceil<span class="comment">#=&gt; 2</span></span><br><span class="line">p <span class="number">1.23</span>.floor<span class="comment">#=&gt; 1</span></span><br><span class="line">p <span class="number">1.5</span>.to_r<span class="comment">#=&gt; (3/2)</span></span><br><span class="line">p <span class="number">1.5</span>.to_c<span class="comment">#=&gt; (1.5+0i)</span></span><br></pre></td></tr></table></figure><p>Integer类按照指定次数循环处理逻辑</p><p>执行指定的n次逻辑</p><pre><code>n.times do |i|    逻辑end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = []</span><br><span class="line"><span class="number">5</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">ary &lt;&lt; i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p ary<span class="comment">#=&gt; [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>从<em>from</em>开始循环加对<em>i</em>进行加1处理，直到<em>i</em>等于<em>to</em></p><pre><code>from.upto(to) do |i|    逻辑end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = []</span><br><span class="line"><span class="number">1</span>.upto(<span class="number">5</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">ary &lt;&lt; i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p ary<span class="comment">#=&gt; [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>从<em>from</em>开始循环对<em>i</em>进行减1处理，直到<em>i</em>等于<em>to</em></p><pre><code>from.downto(to) do |i|    逻辑end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = []</span><br><span class="line"><span class="number">5</span>.downto(<span class="number">1</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">ary &lt;&lt; i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p ary<span class="comment">#=&gt; [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>从<em>from</em>开始循环对<em>i</em>进行加<em>step</em>处理，直到<em>i</em>等于<em>to</em></p><pre><code>from.step(to, step) do |i|    逻辑end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ary = []</span><br><span class="line"><span class="number">1</span>.step(<span class="number">5</span>, <span class="number">2</span>) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">ary &lt;&lt; i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">p ary<span class="comment">#=&gt; [1, 3, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The initialization of the angular ngModel</title>
      <link href="/2015/09/23/the-initialization-of-the-angular-ngmodel/"/>
      <url>/2015/09/23/the-initialization-of-the-angular-ngmodel/</url>
      
        <content type="html"><![CDATA[<p>Recently, I’ve encoutered a weird problem in the project, it’s about the value of the ngModel. Let me explain the problem. see the code</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../bower_components/bootstrap/dist/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../bower_components/angular/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../js/ngModel.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;ModelApp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>ng-model initialize example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span> <span class="attr">ng-controller</span>=<span class="string">&quot;ModelController1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span>the angular model without initialize:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInput1&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;myModel1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span> -&gt; This input tag bundles the ngModel which name is &#x27;myModel1&#x27;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;displayModelValue1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;myModel1&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span> -&gt; This input tag displays the value of the above ngModel<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>In the code, there is a input which id is ‘myInput1’ has bundled a ngModel which name is ‘myModel1’. The value of the input we give it ‘A’. And we put this input tag into the ModelController1 angular controller. Also, there is another input tag which id is ‘displayModelValue1’, the purpose of it is to display the value of the ‘myModel1’.</p><p>Let’s see the controller code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ModelApp</span> = angular.<span class="title function_">module</span>(<span class="string">&quot;ModelApp&quot;</span>, []);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ModelApp</span>.<span class="title function_">controller</span>(<span class="string">&#x27;ModelController1&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>You will notice that there is nothing in the ModelController1. Now, running this page. let’s see the result.</p><p><img src="/assets/images/legacy/angular-ngModel-1.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/angular-ngModel-1.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>From the result, the value of the myInput1 is empty, but we have set the default value ‘A’ to it. So we guess maybe the value has changed. But when we inspect the element, we found the value has been set to ‘A’ in the html source. so far, I’m so confused. To find the reason, I open the console of the browser, put below javascript code to see the value. It still empty.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myInput1&#x27;</span>).<span class="property">value</span></span><br></pre></td></tr></table></figure><p><img src="/assets/images/legacy/angular-ngModel-2.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/angular-ngModel-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>So I guess that maybe it is ngModel affect it, the value has been changed by ngModel, but the html source didn’t changed. So let’s remove the ngModel from that input tag.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInput1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>And now，the value has displayed. it proves our suppose is correct.</p><p>Ok, Let’s get started to find the reason use a new example.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../bower_components/bootstrap/dist/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../bower_components/angular/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../js/ngModel.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;ModelApp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>ng-model initialize example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-success&quot;</span> <span class="attr">ng-controller</span>=<span class="string">&quot;ModelController2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span>the angular model with initialize:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInput2&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;myModel2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span> -&gt; This input tag bundles the ngModel which name is &#x27;myModel2&#x27;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">id</span>=<span class="string">&quot;displayModelValue2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;myModel2&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span> -&gt; This input tag displays the value of the above ngModel<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The above html source code is same with before, just the id and ngModel name are different. And there is another different is that we initialize the ngModel in the controller.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ModelApp</span>.<span class="title function_">controller</span>(<span class="string">&#x27;ModelController2&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope</span>) &#123;</span><br><span class="line">$scope.<span class="property">myModel2</span> = <span class="string">&quot;B&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>We have set the myModel2 value to ‘B’ in the ModelController2. But in the html source code, we set the default value to ‘A’ and bundle it to ngModel. So let’s see the result:</p><p><img src="/assets/images/legacy/angular-ngModel-3.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/angular-ngModel-3.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>The result is ‘B’ not ‘A’. That means the ngModel is initialized in the controller. And then render it to the browser. So this can explain the weird problem. </p><p>The finial reason is that the ngModel is initialized in the controller. If it is not initialize, the value will be empty, like the first example. So if we initialize it in the controller, the ngModel value will be changed with initialzed value.</p><p>And also, you can use the <code>ng-init</code> directive to initialize the ngModel value which you want.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myInput2&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;myModel2&quot;</span> <span class="attr">ng-init</span>=<span class="string">&quot;myModel2 = &#x27;A&#x27;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AngularJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(10)</title>
      <link href="/2015/09/15/ruby-practice-10/"/>
      <url>/2015/09/15/ruby-practice-10/</url>
      
        <content type="html"><![CDATA[<h3 id="块"><a href="#块" class="headerlink" title="块"></a>块</h3><p>*<em>块(block)*<em>，有时也称代码块，能与参数一起传递的多个处理的集合。像之前的</em>each*，</em>time*就是带块的方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">5</span>).each <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">puts i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面代码中do和end之间的部分就是所谓的块。这样的方法称为“带块的方法”或“调用块”，其调用方式如下：</p><pre><code>对象.方法名(参数列表) do |变量|    希望的处理end或者对象.方法名(参数列表) &#123; |变量|    希望的处理&#125;</code></pre><span id="more"></span><p>each方法可以将数组的元素一个一个取出来然后处理，散列也可以，但与数组不同的是，散列会将*[key,value]的组合作为数组来提取元素。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">outcome = &#123;<span class="string">&quot;breakfast&quot;</span>=&gt;<span class="number">10.00</span>, <span class="string">&quot;lunch&quot;</span>=&gt;<span class="number">20.00</span>, <span class="string">&quot;dinner&quot;</span>=&gt;<span class="number">15.00</span> &#125;</span><br><span class="line">sum_outcome = <span class="number">0</span></span><br><span class="line">outcome.each <span class="keyword">do</span> |<span class="params">pair</span>|<span class="comment">#pair是key，value组成的数组，pair[0]为key，pair[1]为value</span></span><br><span class="line">sum_outcome += pair[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts sum_outcome<span class="comment">#=&gt; 45.0</span></span><br></pre></td></tr></table></figure><p>在接收块变量时，多重赋值规则也同样适用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">outcome.each &#123; |<span class="params">key, value</span>|</span><br><span class="line">puts <span class="string">&quot;<span class="subst">#&#123;key&#125;</span> : <span class="subst">#&#123;value&#125;</span>&quot;</span><span class="comment">#=&gt; 打印对应的outcome信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块除了应用于迭代器以外，还被广泛用于其他地方，其中一个就是确保后处理被执行。看代码</p><ul><li>(1)未使用块做后处理<figure class="highlight ruby"><figcaption><span>file_open.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="title class_">File</span>.open(<span class="string">&quot;each_hash_data.rb&quot;</span>)</span><br><span class="line">file.each_line <span class="keyword">do</span> |<span class="params">line</span>|</span><br><span class="line">puts line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">file.close</span><br></pre></td></tr></table></figure></li><li>(2)使用块做后处理<figure class="highlight ruby"><figcaption><span>block_file_open.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">File</span>.open(<span class="string">&quot;each_hash_data.rb&quot;</span>) <span class="keyword">do</span> |<span class="params">file</span>|</span><br><span class="line">file.each_line <span class="keyword">do</span> |<span class="params">line</span>|</span><br><span class="line">puts line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>仔细观察代码，你会发现在第种方式中，File#open方法接收了块，然后将file对象作为块变量，并且执行完毕后，并没有调用close方法去关闭文件。用这种方式会使程序出问题吗？答案是不会，因为块内部其实执行了如下代码的处理。</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="title class_">File</span>.open(<span class="string">&quot;each_hash_data.rb&quot;</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">file.each_line <span class="keyword">do</span> |<span class="params">line</span>|</span><br><span class="line">puts line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">ensure</span></span><br><span class="line">file.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>块还有一种常见的用法，用于替换部分算法，以Array类的sort方法为例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ary = [<span class="string">&quot;ruby&quot;</span>, <span class="string">&quot;pathon&quot;</span>, <span class="string">&quot;c#&quot;</span>, <span class="string">&quot;javascript&quot;</span>]</span><br><span class="line"></span><br><span class="line">sorted_ary = ary.sort</span><br><span class="line">print sorted_ary<span class="comment">#=&gt; [&quot;c#&quot;, &quot;javascript&quot;, &quot;pathon&quot;, &quot;ruby&quot;]</span></span><br><span class="line"></span><br><span class="line">sorted_ary = ary.sort &#123; |<span class="params">a, b</span>| a.length &lt;=&gt; b.length &#125;</span><br><span class="line">print sorted_ary<span class="comment">#=&gt; [&quot;c#&quot;, &quot;ruby&quot;, &quot;pathon&quot;, &quot;javascript&quot;]</span></span><br><span class="line"></span><br><span class="line">sorted_ary = ary.sort &#123; |<span class="params">a, b</span>| a.reverse &lt;=&gt; b.reverse&#125;</span><br><span class="line">print sorted_ary<span class="comment">#=&gt; [&quot;c#&quot;, &quot;pathon&quot;, &quot;javascript&quot;, &quot;ruby&quot;]</span></span><br></pre></td></tr></table></figure><p>将排序算法作为块传递给sort方法，然后返回按指定排序方式排序后的数组。</p><p><em>注意：块中最后一个表达式的值就是块的执行结果</em></p><h4 id="定义带块的方法"><a href="#定义带块的方法" class="headerlink" title="定义带块的方法"></a>定义带块的方法</h4><p>使用<strong>yield</strong>关键字代替块，如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_block</span></span><br><span class="line"><span class="keyword">yield</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">my_block <span class="keyword">do</span> </span><br><span class="line">puts <span class="string">&quot;this is execution in my block&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="传递块参数，获取块的值"><a href="#传递块参数，获取块的值" class="headerlink" title="传递块参数，获取块的值"></a>传递块参数，获取块的值</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">total</span>(<span class="params">from, to</span>)</span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">from.upto(to) <span class="keyword">do</span> |<span class="params">num</span>|</span><br><span class="line"><span class="keyword">if</span> block_given?<span class="comment"># 如果有快的话</span></span><br><span class="line">result += <span class="keyword">yield</span>(num)<span class="comment"># 将经过块处理后的值累加</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">result += num</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">print total(<span class="number">1</span>, <span class="number">10</span>)<span class="comment">#=&gt; 55</span></span><br><span class="line">print total(<span class="number">1</span>, <span class="number">10</span>) &#123; |<span class="params">num</span>| num * <span class="number">2</span>&#125;<span class="comment">#=&gt; 110</span></span><br></pre></td></tr></table></figure><p>**block_given?**方法被用于判断当调用方法时是否有块被传递，有则返回true，否则false</p><p><em>yield</em>参数的个数可以与块变量的个数不一样，当块变量的个数多时，多出的参数会被赋值为nil，当块变量不足时，则不能接受多余的参数值。</p><p>*注：<strong>break</strong>和<strong>next</strong>方法可指定参数，如果没有指定任何参数，则返回nil，如果指定了参数则返回参数，如：break 0 和next 0 都会返回0。</p><h5 id="将块封装为对象"><a href="#将块封装为对象" class="headerlink" title="将块封装为对象"></a>将块封装为对象</h5><p>Ruby还可以将块当作对象处理。把块当作对象处理后，就可以在接收块的方法之外的其他地方执行块，或者把块交给其他方法执行。如果要实现这样的功能，就需要<strong>Proc</strong>对象，<strong>Proc</strong>对象是能让块作为对象在程序中使用的类。</p><p>通过调用<strong>Proc.new</strong>这个带块的方法，可以定义Proc对象，然后再调用Proc对象的<strong>call</strong>方法执行块。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hello = <span class="title class_">Proc</span>.new <span class="keyword">do</span> |<span class="params">name</span>|<span class="comment"># 使用Proc.new方法定义块对象hello</span></span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hello.call(<span class="string">&quot;world&quot;</span>)<span class="comment"># 使用Proc.call方法调用块对象</span></span><br><span class="line">hello.call(<span class="string">&quot;ruby&quot;</span>)</span><br></pre></td></tr></table></figure><p>在方法定义时，如果末尾的参数使用**&amp;参数名**的形式，Ruby就会自动把调用方法时传进来的块封装为Proc对象。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">total</span>(<span class="params">from, to, &amp;block</span>)</span><br><span class="line">result = <span class="number">0</span></span><br><span class="line">from.upto(to) <span class="keyword">do</span> |<span class="params">num</span>|</span><br><span class="line"><span class="keyword">if</span> block<span class="comment">#如果有块对象</span></span><br><span class="line">result += block.call(num)<span class="comment">#执行快对象</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">result += num</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts total(<span class="number">1</span>, <span class="number">10</span>)<span class="comment">#=&gt; 55</span></span><br><span class="line">puts total(<span class="number">1</span>, <span class="number">10</span>) &#123; |<span class="params">num</span>| num * <span class="number">2</span>&#125;<span class="comment">#=&gt; 110</span></span><br></pre></td></tr></table></figure><p>在变量名前添加**&amp;<strong>的参数被成为</strong>Proc参数**. 而且Proc参数一定要在所有参数之后，也就是方法的最后一个参数。</p><p>将Proc对象作为块传递给其他方法处理，在调用方法时，用**&amp;Proc对象**的形式定义参数就可以了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_each</span>(<span class="params">ary, &amp;block</span>)</span><br><span class="line">ary.each(&amp;block)<span class="comment">#将proc对象以块的形式传递给数组的each方法</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">my_each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">print <span class="string">&quot;<span class="subst">#&#123;i&#125;</span> &quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(9)</title>
      <link href="/2015/09/09/ruby-practice-9/"/>
      <url>/2015/09/09/ruby-practice-9/</url>
      
        <content type="html"><![CDATA[<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在Ruby中，抛出异常的信息格式如下：</p><pre><code>文件名：行号：in 方法名：错误信息 (异常类名)        from 文件名：行号：in 方法名</code></pre><p>以from开头的行表示发生错位的位置。<br>在Ruby中,使用<strong>begin ~ rescue ~ end</strong>语句来做异常处理，其语法如下：</p><pre><code>begin    可能会发生异常的处理rescue    发生异常时的处理end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">rescue</span></span><br><span class="line">puts <span class="string">&quot;has a exception&quot;</span><span class="comment">#=&gt; has a exception</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>通过在<strong>rescue</strong>后指定变量名，可以获得异常对象。异常对象有两个方法，方法名为<strong>class</strong>、<strong>message</strong>、<strong>backtrace</strong>。</p><ul><li><p><strong>class</strong>方法可以获取到异常的种类</p></li><li><p><strong>message</strong>方法获取异常信息。</p></li><li><p><strong>backtrace</strong>方法获取异常发生的位置信息</p><p>  begin<br>  可能会发生的异常的处理<br>  rescue &#x3D;&gt;引用异常对象的变量<br>  发生异常时的处理<br>  end</p></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">rescue</span> =&gt; ex<span class="comment">#=&gt; 将异常对象引用到ex对象</span></span><br><span class="line">puts ex.<span class="keyword">class</span><span class="comment">#=&gt; ZeroDivisionError</span></span><br><span class="line">puts ex.message<span class="comment">#=&gt; divided by 0</span></span><br><span class="line">puts ex.backtrace<span class="comment">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><em>Note：此处是将代码直接写在ruby文件里，然后直接运行的，没有写在方法里面。所以看到的信息是文件名和发生错误的行号</em></p><p>如果不指定变量名，Ruby将会把异常对象赋值给**$!<strong>、</strong>$2**变量</p><ul><li><strong>$!</strong> 引用到最后发生的异常对象</li><li><strong>$@</strong> 引用到发生的异常的位置信息</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">rescue</span></span><br><span class="line">puts <span class="variable">$!</span>.<span class="keyword">class</span><span class="comment">#=&gt; ZeroDivisionError</span></span><br><span class="line">puts <span class="variable">$!</span>.message<span class="comment">#=&gt; divided by 0</span></span><br><span class="line">puts <span class="variable">$!</span>.backtrace<span class="comment">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class="line">puts <span class="variable">$@</span><span class="comment">#=&gt; exception.rb:2:in `/&#x27;exception.rb:2:in `&lt;main&gt;&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>从上面的运行示例可以看出，其实**$!.backtrace<strong>与</strong>$@**是等价的，都表示异常发生的位置。</p><p>在Ruby中可以通过<strong>ensure</strong>来确保无论是否引发异常都将执行处理，类似于Java和C#中得finally。</p><pre><code>begin    可能发生的异常rescue =&gt; 变量    发生异常时的处理ensure    无论是否有异常，都会处理end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">from to</span>)</span><br><span class="line">src = <span class="title class_">File</span>.open(from)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">dst = <span class="title class_">File</span>.open(to, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">data = src.read</span><br><span class="line">dst.write(data)</span><br><span class="line">dst.close</span><br><span class="line"><span class="keyword">rescue</span> =&gt; ex</span><br><span class="line">print ex.message</span><br><span class="line"><span class="keyword">ensure</span></span><br><span class="line">src.close</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在<strong>rescue</strong>中使用<strong>retry</strong>后，<strong>begin</strong>以下的处理会再重做一遍。所以需要注意陷入死循环的情况。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="number">1</span> / num<span class="comment">#=&gt; 如果发生异常，则执行rescue中的语句</span></span><br><span class="line"><span class="keyword">rescue</span></span><br><span class="line"><span class="keyword">if</span> count &gt;= <span class="number">5</span></span><br><span class="line">num += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">retry</span><span class="comment">#=&gt; 重复执行begin后的语句</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts count<span class="comment">#=&gt; 6</span></span><br></pre></td></tr></table></figure><h4 id="使用rescue做为修饰符"><a href="#使用rescue做为修饰符" class="headerlink" title="使用rescue做为修饰符"></a>使用rescue做为修饰符</h4><p>使用rescue作为修饰符可以简化很多代码</p><pre><code>表达式1 rescue 表达式2</code></pre><p>与下面的写法等价</p><pre><code>begin    表达式1rescue    表达式2end</code></pre><p>其意义为如果表达式1中发生异常，表达式2的值就会成为整体表达式的值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parseInt</span>(<span class="params">param</span>)</span><br><span class="line"><span class="title class_">Integer</span>(param) <span class="keyword">rescue</span> <span class="number">0</span><span class="comment">#=&gt; 如果Integer(param)语句无异常，直接返回该值，否者返回0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts parseInt(<span class="string">&quot;123&quot;</span>)<span class="comment">#=&gt; 123</span></span><br><span class="line">puts parseInt(<span class="string">&quot;abc&quot;</span>)<span class="comment">#=&gt; 0</span></span><br></pre></td></tr></table></figure><p>在判断字符串是否为数值形式时，可以使用这种方法。</p><h4 id="异常处理的其他语法"><a href="#异常处理的其他语法" class="headerlink" title="异常处理的其他语法"></a>异常处理的其他语法</h4><p><em>方法内</em><br>如果异常处理的范围是整个方法体，这时可以省略begin以及end关键字，直接使用rescue和ensure。</p><pre><code>def 方法名    方法体rescue =&gt; 异常对象    异常处理ensure    后处理end</code></pre><p><em>类定义中</em><br>在类定义中也可以使用rescue以及ensure。但是，如果类定义途中发生异常，那么异常发生部分后的方法定义就不会再执行了。所以一般很少在类定义中使用。</p><pre><code>class 类名    类定义rescue =&gt; 异常对象    异常处理ensure    后处理end</code></pre><h4 id="指定需要捕捉的异常"><a href="#指定需要捕捉的异常" class="headerlink" title="指定需要捕捉的异常"></a>指定需要捕捉的异常</h4><p>当然，Ruby也提供了针对特定异常的捕捉处理，可以使用多个rescue来分开处理</p><pre><code>begin    可能发生异常的地方rescue Exception1, Exception2 =&gt;变量    对Exception1或Exception2的处理rescue Exception3 =&gt; 变量    对Exception3的处理rescue    对上述异常以外的异常的处理end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multi_rescue</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">yield</span><span class="comment">#块参数在此处，如有异常，将执行后续指定的异常处理</span></span><br><span class="line"><span class="keyword">rescue</span> <span class="title class_">NameError</span>, <span class="title class_">NoMethodError</span> =&gt; ex</span><br><span class="line">puts ex.<span class="keyword">class</span></span><br><span class="line"><span class="keyword">rescue</span> <span class="title class_">ZeroDivisionError</span></span><br><span class="line">puts <span class="variable">$!</span>.<span class="keyword">class</span></span><br><span class="line"><span class="keyword">rescue</span> </span><br><span class="line">puts <span class="variable">$!</span>.<span class="keyword">class</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">multi_rescue <span class="keyword">do</span> </span><br><span class="line"><span class="number">1</span> / <span class="number">0</span><span class="comment">#触发ZeroDivisionError异常</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">multi_rescue <span class="keyword">do</span></span><br><span class="line">val.size<span class="comment">#触发NameError异常</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">multi_rescue <span class="keyword">do</span> </span><br><span class="line">val = <span class="number">4</span></span><br><span class="line">sqrt(val)<span class="comment">#触发NoMethodError异常</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>以上代码定义了一个带块的方法，通过此方法可以插入任何你想要得代码执行块。</p><h4 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h4><p><em>注意：ruby中所有异常都是</em>Exception<em>类的子类。</em><br>当rescue中不指定异常类时，程序会默认捕捉<em>StandardError</em>类及其子类的异常. 所以在定义自己的异常时，可以先定义继承StandardError类的新类，然后再继承这个新类。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyError</span> = <span class="title class_">Class</span>.new(<span class="title class_">StandardError</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyError</span> &lt; <span class="title class_ inherited__">StandardError</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面两种写法是等效的，都是表示定义一个继承StandardError类的新类。第一种方式是一种简洁的写法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyError</span> = <span class="title class_">Class</span>.new(<span class="title class_">StandardError</span>)<span class="comment">#自定义MyError异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义MyError1异常继承自MyError，并重写message方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyError1</span> &lt; <span class="title class_ inherited__">MyError</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span></span><br><span class="line"><span class="string">&quot;the exception message is from MyError1&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义MyError2异常继承自MyError，并重写message方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyError2</span> &lt; <span class="title class_ inherited__">MyError</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span></span><br><span class="line"><span class="string">&quot;the exception message is from MyError2&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义带块的处理异常的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">raiseException</span></span><br><span class="line"><span class="keyword">yield</span></span><br><span class="line"><span class="keyword">rescue</span> <span class="title class_">MyError1</span> =&gt; ex</span><br><span class="line">puts ex.message</span><br><span class="line"><span class="keyword">rescue</span> <span class="title class_">MyError2</span> =&gt; ex</span><br><span class="line">puts ex.message</span><br><span class="line"><span class="keyword">rescue</span></span><br><span class="line">puts <span class="variable">$!</span>.message</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#抛出异常MyError1</span></span><br><span class="line">raiseException <span class="keyword">do</span></span><br><span class="line"><span class="keyword">raise</span> <span class="title class_">MyError1</span><span class="comment">#=&gt; the exception message is from MyError1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#抛出异常MyError2</span></span><br><span class="line">raiseException <span class="keyword">do</span></span><br><span class="line"><span class="keyword">raise</span> <span class="title class_">MyError2</span><span class="comment">#=&gt; the exception message is from MyError2</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>使用<strong>raise</strong>方法，可以使程序主动抛出异常。</p><p>raise方法有一下4中调用方式：</p><ul><li><p>raise message<br>抛出<em>RuntimeError</em>异常，并把字符串作为message设置给新生成的异常对象</p></li><li><p>raise 异常类<br>抛出指定的异常</p></li><li><p>raise 异常类，message<br>抛出指定的异常，并把message信息设置给新生成的异常对象</p></li><li><p>raise<br>在rescue外抛出RuntimeError。 在rescue中调用时，会再次抛出最后一次发生的异常。</p></li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义MyError3异常</span></span><br><span class="line"><span class="title class_">MyError3</span> = <span class="title class_">Class</span>.new(<span class="title class_">MyError</span></span><br><span class="line"></span><br><span class="line">raiseException <span class="keyword">do</span></span><br><span class="line"><span class="keyword">raise</span> <span class="title class_">MyError3</span>, <span class="string">&quot;customized message for MyError3&quot;</span><span class="comment">#=&gt;抛出指定message</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(8)</title>
      <link href="/2015/09/06/ruby-practice-8/"/>
      <url>/2015/09/06/ruby-practice-8/</url>
      
        <content type="html"><![CDATA[<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>以下两种运算符是等价的, op即代表操作运算符</p><pre><code>value1 op= value2value1 = value1 op value2</code></pre><p>利用运算符**||**的特性，可以简化相关的赋值代码，如下是等价的</p><figure class="highlight ruby"><figcaption><span>赋值方式1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Ruby&quot;</span></span><br><span class="line"><span class="keyword">if</span> var<span class="comment">#当var不是nil或false时</span></span><br><span class="line">name = var</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><figcaption><span>赋值方式2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = var |<span class="params"></span>| <span class="string">&quot;Ruby&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>而利用**&amp;&amp;**运算符，可以避免不必要要得程序错误</p><figure class="highlight ruby"><figcaption><span>隐藏的错误</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = ary[<span class="number">0</span>]          <span class="comment">#如果ary为nil，则此时将引发程序错误</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><figcaption><span>使用&&避免错误</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = ary &amp;&amp; ary[<span class="number">0</span>]<span class="comment">#避免当ary为nil时，读取ary[0]时的错误</span></span><br></pre></td></tr></table></figure><p>使用**&amp;&amp;**可以在确定对象存在后再调用方法。而且代码更加简洁。</p><h4 id="范围运算符"><a href="#范围运算符" class="headerlink" title="范围运算符"></a>范围运算符</h4><p>相比其他的语言如Java等，范围运算符算是一个比较特殊的运算符，范围运算符有**..<strong>和</strong>…**两种，其区别在于如下</p><ul><li><strong>x..y</strong>的范围是从x到y</li><li><strong>x…y</strong>的范围是从x到y得前一个元素</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">5</span>).to_a<span class="comment">#=&gt; [1, 2, 3, 4, 5]</span></span><br><span class="line">(<span class="string">&quot;a&quot;</span>..<span class="string">&quot;d&quot;</span>).to_a<span class="comment">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>...<span class="number">5</span>).to_a<span class="comment">#=&gt; [1, 2, 3, 4]</span></span><br><span class="line">(<span class="string">&quot;a&quot;</span>...<span class="string">&quot;d&quot;</span>).to_a<span class="comment">#=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure><p>Ruby中有范围对象(Range)来表示范围对象，以下两个写法是等价的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ary = <span class="title class_">Range</span>.new(<span class="number">1</span>, <span class="number">5</span>)<span class="comment">#=&gt; 1..5</span></span><br><span class="line">ary.<span class="keyword">class</span><span class="comment">#=&gt; Range</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ary = <span class="number">1</span>..<span class="number">5</span><span class="comment">#=&gt; 1..5</span></span><br><span class="line">ary.<span class="keyword">class</span><span class="comment">#=&gt; Range</span></span><br></pre></td></tr></table></figure><p>在Range对象内部，可以使用<strong>succ</strong>方法根据起点值逐个生成下一值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = a.succ<span class="comment">#=&gt; 2</span></span><br><span class="line">a = a.succ<span class="comment">#=&gt; 3</span></span><br><span class="line">a.succ.succ<span class="comment">#=&gt; 5</span></span><br></pre></td></tr></table></figure><h4 id="运算符重定义"><a href="#运算符重定义" class="headerlink" title="运算符重定义"></a>运算符重定义</h4><p>在Ruby中有以下运算符不能重定义<br>::, &amp;&amp;, ||, .., …, ?:, not, &#x3D;, and</p><p><em>二元运算符重定义</em>,如加号+、减号-</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line"><span class="built_in">attr_reader</span> <span class="symbol">:x</span>, <span class="symbol">:y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">x, y</span>)</span><br><span class="line"><span class="variable">@x</span>, <span class="variable">@y</span> = x, y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">+</span>(<span class="params">other</span>)</span><br><span class="line"><span class="variable language_">self</span>.<span class="keyword">class</span>.new(x + other.x, y + other.y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">-</span>(<span class="params">other</span>)</span><br><span class="line"><span class="variable language_">self</span>.<span class="keyword">class</span>.new(x - other.x, y - other.y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span></span><br><span class="line"><span class="string">&quot;(<span class="subst">#&#123;x&#125;</span>, <span class="subst">#&#123;y&#125;</span>)&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="title class_">Point</span>.new(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">p2 = <span class="title class_">Point</span>.new(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">p = p1 + p2</span><br><span class="line">puts p.display<span class="comment">#=&gt; (4, 6)</span></span><br><span class="line"></span><br><span class="line">p = p2 - p1</span><br><span class="line">puts p.display<span class="comment">#=&gt; (2, 2)</span></span><br></pre></td></tr></table></figure><p><em>一元运算符</em>，如正号+，负号-等，其重定义与二元运算符不同。可定义的一元运算符有**+**, <strong>-</strong>, <strong>~</strong>, **!**4个。分别以+@， -@， ~@， !@为方法名进行方法定义。而且一元运算符都是没有参数的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line"><span class="built_in">attr_reader</span> <span class="symbol">:x</span>, <span class="symbol">:y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">x, y</span>)</span><br><span class="line"><span class="variable">@x</span>, <span class="variable">@y</span> = x, y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">+@</span></span><br><span class="line">dup</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">-@</span></span><br><span class="line"><span class="variable language_">self</span>.<span class="keyword">class</span>.new(-x ,-y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">~@</span></span><br><span class="line"><span class="variable language_">self</span>.<span class="keyword">class</span>.new(-y, x)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span></span><br><span class="line"><span class="string">&quot;(<span class="subst">#&#123;x&#125;</span>, <span class="subst">#&#123;y&#125;</span>)&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="title class_">Point</span>.new(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">puts (-p1).display<span class="comment">#=&gt; (-1, -2)</span></span><br><span class="line">puts (+p1).display<span class="comment">#=&gt; (1, 2)</span></span><br></pre></td></tr></table></figure><h4 id="下标方法"><a href="#下标方法" class="headerlink" title="下标方法"></a>下标方法</h4><p>数组、散列中的<em>obj[i]<em>以及</em>obj[i]&#x3D;x</em>这样的方法，称为下标方法。定义下标方法时的方法名分别为**[]<strong>和</strong>[]&#x3D;**.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line"><span class="built_in">attr_reader</span> <span class="symbol">:x</span>, <span class="symbol">:y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">x, y</span>)</span><br><span class="line"><span class="variable">@x</span>, <span class="variable">@y</span> = x, y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">[]</span>(<span class="params">index</span>)</span><br><span class="line"><span class="keyword">case</span> index</span><br><span class="line"><span class="keyword">when</span> <span class="number">0</span></span><br><span class="line">x</span><br><span class="line"><span class="keyword">when</span> <span class="number">1</span></span><br><span class="line">y</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">raise</span> <span class="title class_">ArgumentError</span>, <span class="string">&quot;out of range (<span class="subst">#&#123;index&#125;</span>)&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">[]=</span>(<span class="params">index, val</span>)</span><br><span class="line"><span class="keyword">case</span> index</span><br><span class="line"><span class="keyword">when</span> <span class="number">0</span></span><br><span class="line"><span class="variable language_">self</span>.x = val</span><br><span class="line"><span class="keyword">when</span> <span class="number">1</span></span><br><span class="line"><span class="variable language_">self</span>.y = val</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">raise</span> <span class="title class_">ArgumentError</span>, <span class="string">&quot;out of range (<span class="subst">#&#123;index&#125;</span>)&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span></span><br><span class="line"><span class="string">&quot;(<span class="subst">#&#123;x&#125;</span>, <span class="subst">#&#123;y&#125;</span>)&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(7)</title>
      <link href="/2015/09/01/ruby-practice-7/"/>
      <url>/2015/09/01/ruby-practice-7/</url>
      
        <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>Ruby中的类是表现事物的属性和行为，那么模块呢？，在Ruby中<em>模块</em>表现的只是事物的行为。</p><p>模块与类的区别于下：</p><ul><li>模块不能拥有实例</li><li>模块不能被继承</li></ul><p>如何访问模块内的方法？有两种方式可以访问</p><p>1.使用<strong>模块名.方法名</strong>的形式来直接调用模块中定义的方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.sqrt(<span class="number">4</span>)<span class="comment">#=&gt; 2.0</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.通过<strong>include 模块名</strong>的形式预先将模块引入到当前的命名空间，然后就可直接访问模块内的方法和常量。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="title class_">Math</span></span><br><span class="line">sqrt(<span class="number">4</span>)<span class="comment">#=&gt; 2.0</span></span><br></pre></td></tr></table></figure><p>第二种方式也就是<strong>Mix-in</strong>扩展类的功能，将模块混合到类中。在定义类时使用<strong>include</strong>引入指定的模块后，此时该类就可以使用模块里的所有方法和常量，从而增加了该类的功能。</p><p><strong>Mix-in</strong>可以灵活地解决以下问题：</p><ul><li>虽然两个类拥有相似的功能，但是不希望把他们作为相同的种类（Class）来考虑的时候，此时可将相似功能封装为模块供这两个类使用</li><li>Ruby不支持父类的多重继承，因此无法对已经继承的类添加共同的功能的时候</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span></span><br><span class="line"><span class="keyword">include</span> <span class="title class_">Math</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_sqrt</span>(<span class="params">a, b</span>)</span><br><span class="line">sqrt(a) + sqrt(b)<span class="comment">#=&gt; 调用Math模块中得sqrt方法</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@@PI</span> = <span class="variable constant_">PI</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">cal = <span class="title class_">Calculator</span>.new</span><br><span class="line">cal.my_sqrt(<span class="number">1</span>, <span class="number">4</span>)<span class="comment">#=&gt; 3.0</span></span><br><span class="line"><span class="title class_">Calculator</span><span class="symbol">:</span><span class="symbol">:PI</span><span class="comment">#=&gt; 3.141592653589793</span></span><br></pre></td></tr></table></figure><h4 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h4><p>使用<strong>module</strong>关键来创建模块，模块名的首字母必须大写</p><pre><code>module 模块名    模块定义end</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">HelloModule</span></span><br><span class="line"><span class="title class_">Version</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">name</span>)</span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module_function</span> <span class="symbol">:say_hello</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p <span class="title class_">HelloModule</span><span class="symbol">:</span><span class="symbol">:Version</span><span class="comment">#=&gt; &quot;1.0&quot;</span></span><br><span class="line"><span class="title class_">HelloModule</span>.say_hello(<span class="string">&quot;Ruby&quot;</span>)<span class="comment">#=&gt; Hello Ruby</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="title class_">HelloModule</span><span class="comment">#=&gt; 包含模块</span></span><br><span class="line"><span class="title class_">Version</span><span class="comment">#=&gt; &quot;1.0&quot;</span></span><br><span class="line">say_hello(<span class="string">&quot;Ruby&quot;</span>)<span class="comment">#=&gt; Hello Ruby</span></span><br></pre></td></tr></table></figure><p>在上面代码中，我们可以看到<strong>module_function</strong>方法，此方法主要用于将需要把模块函数公开给外部使用，其参数是表示方法方法名的符号，可以跟多个参数。</p><p><em>注：不建议在定义为模块函数的方法中使用self</em></p><h4 id="Mix-in"><a href="#Mix-in" class="headerlink" title="Mix-in"></a>Mix-in</h4><p>前面提到的，在类中使用<em>include</em>引入模块，此时类的功能将得到增强。</p><p>如果想知道类是否包含某个模块，可以使用<strong>include？</strong>方法，如之前的Calculator类中。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Calculator</span>.<span class="keyword">include</span>?(<span class="title class_">Math</span>)<span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><p>Ruby中类的实例在调用方法时的顺序为，该类&gt;包含的模块&gt;该类的父类等这个顺序查找该方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">HelloModule</span></span><br><span class="line"><span class="title class_">Version</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">name</span>)</span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloClass</span></span><br><span class="line"><span class="keyword">include</span> <span class="title class_">HelloModule</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hello = <span class="title class_">HelloClass</span>.new</span><br><span class="line">hello.say_hello(<span class="string">&quot;Ruby&quot;</span>)<span class="comment">#=&gt; Hello Ruby</span></span><br></pre></td></tr></table></figure><p>以上代码中调用的是module中的方法。</p><p>用<em>ancestors</em>方法和<em>superclass</em>方法调查类的继承关系。<em>superclass</em>方法可直接返回类的父类</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="title class_">HelloClass</span>.ancestors<span class="comment">#=&gt; [HelloClass, HelloModule, Object, Kernel, BasicObject]</span></span><br><span class="line">p <span class="title class_">HelloClass</span>.superclass<span class="comment">#=&gt; Object</span></span><br></pre></td></tr></table></figure><p><em>Kenerl</em>是Ruby内部的一个核心模块，Ruby程序运行时所需的共通函数都封装在此模块中。</p><p>单一继承的优点就是简单，不会因为过多的继承而导致类之间的关系变得复杂。所以我们需要灵活使用单一继承和Mix-in。</p><h4 id="Mix-in查找方法的规则"><a href="#Mix-in查找方法的规则" class="headerlink" title="Mix-in查找方法的规则"></a>Mix-in查找方法的规则</h4><ul><li>优先使用原来中定义的同名方法。</li><li>在同一个类中包含多个模块时，优先使用最后一个包含的模块。</li><li>嵌套include时，查找顺序也是线性的。</li><li>相同的模块被包含两次也上的，第2次以后的会被省略。</li></ul><h4 id="Object-extend方法"><a href="#Object-extend方法" class="headerlink" title="Object#extend方法"></a>Object#extend方法</h4><p>利用Object#extend方法可以使单例类包含模块，并把模块的功能扩展到对象中。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">Welcome</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">welcome</span>(<span class="params">name</span>)</span><br><span class="line"><span class="string">&quot;<span class="subst">#&#123;<span class="variable language_">self</span>&#125;</span> Welcome <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;World&quot;</span></span><br><span class="line">str.<span class="keyword">extend</span>(<span class="title class_">Welcome</span>)<span class="comment">#=&gt; 将Welcome模块扩展到str对象上</span></span><br><span class="line">puts str.welcome(<span class="string">&quot;Ruby&quot;</span>)<span class="comment">#=&gt; World Welcome Ruby</span></span><br></pre></td></tr></table></figure><p><strong>include</strong>可以帮助我们突破继承的限制，通过模块扩展类的功能；而<strong>extend</strong>则可以帮助我们跨过类，直接通过模块扩展对象的功能.</p><p>所有类本身都是Class类的对象，类方法就是类对象的实例方法。可以把类方法理解为下:</p><ul><li><strong>Class</strong>类的实例方法</li><li>类对象的单例方法</li></ul><p>使用<strong>extend</strong>方法为类对象追加类方法，使用<strong>include</strong>方法追加实例方法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">ClassMethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">class_method</span></span><br><span class="line"><span class="string">&quot;class method&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> <span class="title class_">InstanceMethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">instance_method</span></span><br><span class="line"><span class="string">&quot;instance method&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line"><span class="keyword">extend</span> <span class="title class_">ClassMethod</span> <span class="comment">#使用extend方法定义类方法</span></span><br><span class="line"><span class="keyword">include</span> <span class="title class_">InstanceMethod</span> <span class="comment">#使用include定义实例方法</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p <span class="title class_">MyClass</span>.class_method<span class="comment">#=&gt; &quot;class method&quot;</span></span><br><span class="line">p <span class="title class_">MyClass</span>.new.instance_method<span class="comment">#=&gt; &quot;instance method&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(6)</title>
      <link href="/2015/08/25/ruby-practice-6/"/>
      <url>/2015/08/25/ruby-practice-6/</url>
      
        <content type="html"><![CDATA[<h3 id="Ruby的类"><a href="#Ruby的类" class="headerlink" title="Ruby的类"></a>Ruby的类</h3><p>和其他面向对象语言一样，Ruby的类也表示对象的种类。通过<strong>class</strong>方法可以知道某个对象属于哪个类。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="keyword">class</span><span class="comment">#=&gt; String</span></span><br><span class="line"><span class="number">1</span>.<span class="keyword">class</span><span class="comment">#=&gt; Fixnum</span></span><br></pre></td></tr></table></figure><p>判断某个对象时候属于某个类时，可以使用**instance_of?**方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hello&quot;</span>.instance_of?(<span class="title class_">String</span>)<span class="comment">#=&gt; true</span></span><br><span class="line"><span class="number">1</span>.instance_of? <span class="title class_">Fixnum</span><span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>通过扩展已定义的类来创建新类成为<em>继承</em>，通过继承，我们可以实现以下事情：</p><ul><li>在不影响原有功能的前提下追加新功能</li><li>重定义原有功能，使名称相同的方法产生不同的效果</li><li>在已有功能的基础上追加处理，扩展已有共更能</li></ul><p><strong>BasicObject</strong>类是Ruby中所有类的父类，它定义了Ruby对象的最基本功能。普通对象所需要的类一般都被定义为<strong>Object</strong>类。字符串、数组等都是Object类的子类。</p><p>子类与父类的关系称为”is-a”关系。我们可以通过类的继承关系使用**is_a?**方法反向追查对象是否属于某个类</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hello&quot;</span>.is_a?(<span class="title class_">String</span>)<span class="comment">#=&gt; true</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.is_a?(<span class="title class_">Object</span>)<span class="comment">#=&gt; true</span></span><br></pre></td></tr></table></figure><p>*注：**instance_of?<strong>方法与</strong>is_a?**方法已经在Object类中定义过，因此普通的对象可以直接使用者两个方法。</p><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><p>使用<strong>class</strong>关键字定义类，类名的首字母必须大写</p><pre><code>class 类名    类的定义end</code></pre><p>类定义中有个特别的方法名为<strong>initialize</strong>方法，当我们使用<strong>new</strong>方法生成新的对象时，initialize方法会被调用，同时new方法的参数也会被原封不动的传递给initialize方法。</p><p>定义一个Greeter类，当对象被创建时，会将new方法中得参数传递给initialize方法中得实例变量@name，如果不传参数，则使用默认的值Ruby传给实例变量，在say_hello实例方法中，将其打印出来。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name = <span class="string">&quot;Ruby&quot;</span></span>)</span><br><span class="line"><span class="variable">@name</span> = name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>利用Greeter类的对象来问候，其执行结果如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">default_greeter = <span class="title class_">Greeter</span>.new</span><br><span class="line">default_greeter.say_hello<span class="comment">#=&gt; Hello Ruby</span></span><br><span class="line"></span><br><span class="line">world_greeter = <span class="title class_">Greeter</span>.new(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">world_greeter.say_hello<span class="comment">#=&gt; Hello World</span></span><br></pre></td></tr></table></figure><p><em>注：引用未初始化的实例变量时的返回值为nil</em></p><p>在上面的Greeter类中，@name实例变量是不能被外部直接访问或赋值的，需要通过方法来访问对象的内部。我们可以在Greeter类内部定义两个方法来解决这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Greeter</span><br><span class="line">#other codes in here</span><br><span class="line"></span><br><span class="line">def name#获取@name</span><br><span class="line">@name</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def name=(value)#修改@name</span><br><span class="line">@name = value</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>有了这这两个方法，现在我们可以访问@name实例变量了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default_greeter.name<span class="comment">#=&gt; Ruby</span></span><br><span class="line">default_greeter.name = <span class="string">&quot;Python&quot;</span></span><br><span class="line">default_greeter.say_hello<span class="comment">#=&gt; Hello Python</span></span><br></pre></td></tr></table></figure><p>但是，如果一个类里面有多个实例变量需要被访问时，定义这么多得方法会使得代码量过多，有没有像C#中的属性访问器get&#x2F;set之类的呢。其实Ruby也为我们提供了这个，称为存取器。使用<strong>attr_reader</strong>, <strong>attr_writer</strong>, <strong>attr_accessor</strong>，只要指定实例变量名的符号（symbol）,注意，此处是实例变量的符号，Ruby就会自动定义相应的存取器。</p><pre><code>attr_reader :name只读 (定义name方法)attr_writer :name只写 (定义name=方法)attr_accessor :name读写 (定义以上两个方法)</code></pre><p>通过使用他们，我们的Greeter类可以简化为如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="built_in">attr_accessor</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name = <span class="string">&quot;Ruby&quot;</span></span>)</span><br><span class="line"><span class="variable">@name</span> = name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Ruby中还提供了特殊变量<strong>self</strong>.使用<strong>self</strong>这个特殊变量可以引用方法的接受者。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="built_in">attr_accessor</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name = <span class="string">&quot;Ruby&quot;</span></span>)</span><br><span class="line"><span class="variable">@name</span> = name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_bye</span></span><br><span class="line">puts <span class="string">&quot;Bye <span class="subst">#&#123;<span class="variable language_">self</span>.name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>使用在实例方法内部使用@name和使用self.name是一样的意思，只不过self调用的是name方法。<strong>self</strong>即使对像的本身，相当于C#、Java中的<strong>this</strong>对象。所以上面的self.name可以省略self，直接调用name方法。</p><p>但是，在调用像<em>name&#x3D;<em>方法这样的以</em>&#x3D;<em>结束的方法时，有一点我们需要注意。因为在Ruby中，定义局部变量也是用</em>&#x3D;</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_name</span></span><br><span class="line">name = <span class="string">&quot;Ruby&quot;</span><span class="comment">#定义局部变量name并赋值</span></span><br><span class="line"><span class="variable language_">self</span>.name = <span class="string">&quot;ruby&quot;</span><span class="comment">#调用Greeter类的name=方法</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>所以此时省略self后，含义是不一样的。</p><h4 id="类方法的定义"><a href="#类方法的定义" class="headerlink" title="类方法的定义"></a>类方法的定义</h4><p>如果方法的接受者是类本身（类对象）的方法成为类方法。其定义方式主要有以下两种</p><ol><li><p>在<strong>class &lt;&lt; 类名 ~ end</strong>这个特殊的类中定义实例方法的形式</p><pre><code> class &lt;&lt; 类名     方法的定义 end</code></pre></li></ol><p>为Greeter类定义类方法<em>good_morning</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;&lt; <span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">good_morning</span>(<span class="params">name</span>)</span><br><span class="line">puts <span class="string">&quot;Good morning <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用<strong>def 类名.方法名 ~ end</strong>这样的形式来定义类方法。</p><pre><code> def 类名.方法名     方法的定义 end</code></pre></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Greeter</span>.good_morning(name)</span><br><span class="line">puts <span class="string">&quot;Good morning <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>注意以上两种定义形式都在类的外部定义，如果在类的内部定义，可以将类名用<strong>self</strong>，这时self引用的对象是该类本身。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">class</span> &lt;&lt; <span class="variable language_">self</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">good_morning</span>(<span class="params">name</span>)</span><br><span class="line">puts <span class="string">&quot;Good morning <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">self</span>.good_morning(name)</span><br><span class="line">puts <span class="string">&quot;Good morning <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><em>注：*<em>class &lt;&lt; 类名 ~ end</em></em> 这种写法的类定义称为单例类定义，单例类定义中定义的方法称为单例方法*</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>在class中定义常量，通过使用<strong>类名::常量名</strong>形式来实现外部访问.常量是不可修改的。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="title class_">Hello</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p <span class="title class_">Greeter</span><span class="symbol">:</span><span class="symbol">:Hello</span><span class="comment">#=&gt; &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><p>以**@@*<em>开头的变量成为类变量，类变量是该类中所有实例的共享变量，这点和常量类似，不同的是这个类变量可以被修改。当然，从类的外部访问类变量时也需要存取器，但是不能使用</em>attr_accessor*,它使属于实例变量的，所以我们需要自己定义，使用类方法来获取类变量是个好的形式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="variable">@@greeter_count</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">attr_accessor</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name = <span class="string">&quot;Ruby&quot;</span></span>)</span><br><span class="line"><span class="variable">@name</span> = name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="variable">@@greeter_count</span> += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Greeter</span>.greeter_count</span><br><span class="line"><span class="variable">@@greeter_count</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Greeter</span>.greeter_count<span class="comment">#=&gt; 0</span></span><br><span class="line">greeter = <span class="title class_">Greeter</span>.new(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">greeter.say_hello</span><br><span class="line">greeter = <span class="title class_">Greeter</span>.new</span><br><span class="line">greeter.say_hello</span><br><span class="line"><span class="title class_">Greeter</span>.greeter_count<span class="comment">#=&gt; 2</span></span><br></pre></td></tr></table></figure><h4 id="限制方法的调用"><a href="#限制方法的调用" class="headerlink" title="限制方法的调用"></a>限制方法的调用</h4><p>和其他面向对象语言一样，Ruby也有方法的访问修饰符，分别为<strong>public</strong>，<strong>protected</strong>，<strong>private</strong>。其表达的含义也一样。</p><ul><li>public 以实例的方法的形式向外部公开</li><li>protect 仅向同一个类或子类公开</li><li>private 仅内部类可调用</li></ul><p>定义方式，有两种，一种是访问修饰符后面带方法符号</p><pre><code>public :方法1, :方法2</code></pre><p>另外一种是后面不带参数，那么下面所有定义的方法均在这个访问修饰符下，直到有新的访问修饰符。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="built_in">attr_accessor</span> <span class="symbol">:name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">name = <span class="string">&quot;Ruby&quot;</span></span>)</span><br><span class="line"><span class="variable">@name</span> = name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_bye</span></span><br><span class="line">puts <span class="string">&quot;Bye <span class="subst">#&#123;<span class="variable language_">self</span>.name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_haha</span></span><br><span class="line">puts <span class="string">&quot;Haha <span class="subst">#&#123;<span class="variable">@name</span>&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="symbol">:say_haha</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如以上方法的定义，public修饰符下定义了3个方法，这个3个方法都可以在外部访问，但是最后我们又将最后一个方法标记为private。所以如果在外部企图访问这个方法，将跑出如下错误信息</p><pre><code>class_definition.rb:47:in `&lt;main&gt;&#39;: private method `say_haha&#39; called for #&lt;Greeter:0x007fb57c101510 @name=&quot;Ruby&quot;&gt; (NoMethodError)</code></pre><p>如果没有指定访问级别的方法默认为public，但是<strong>initialize</strong>方法是个例外，它通常被定义为private</p><h3 id="扩展类"><a href="#扩展类" class="headerlink" title="扩展类"></a>扩展类</h3><p>Ruby允许我们在已经定义好的类中添加方法。即为扩展方法。如在String类中定义一个计算字符串单词数的方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_word</span></span><br><span class="line">ary = <span class="variable language_">self</span>.split(<span class="regexp">/\s+/</span>)<span class="comment">#用空格分割接收者</span></span><br><span class="line">ary.size</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">&quot;Hello Ruby&quot;</span></span><br><span class="line">p str.count_word<span class="comment">#=&gt; 2</span></span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>使用class关键字指定类名的同时指定父类名</p><pre><code>class 类名 &lt; 父类名    类定义end</code></pre><p>定义类时没有指定父类的情况下，Ruby会默认该类为<strong>Object</strong>类的子类。通过类对象调用**instance_methods方法，可以得到以符号形式返回的该类的实例方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Greeter</span>.instance_methods</span><br></pre></td></tr></table></figure><p>如果想定义<strong>BasicObject</strong>的子类，我们需要明确指定BasicObject类为父类；而Object类为父类时不需要。</p><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><p><strong>alias</strong>即别名，在Ruby中我们可以给方法设置别名，设置别名也两种方式，一种alias后面带方法名参数，第二种后面带方法符号名参数</p><pre><code>alias 别名原名#使用方法名alias :别名 :原名#使用符号名</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RubyGreeter</span> &lt; <span class="title class_ inherited__">Greeter</span></span><br><span class="line"><span class="keyword">alias</span> old_say_hello say_hello  <span class="comment">#将继承的say_hello方法设置别名为old_say_hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello Ruby&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rubyGreeter = <span class="title class_">RubyGreeter</span>.new</span><br><span class="line">p rubyGreeter.old_say_hello<span class="comment">#=&gt; &quot;Hello&quot;</span></span><br><span class="line">p rubyGreeter.say_hello<span class="comment">#=&gt; &quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure><h4 id="undef"><a href="#undef" class="headerlink" title="undef"></a>undef</h4><p><strong>undef</strong>用于删除已有方法的定义。与alias一样，参数可以指定方法名或者符号名。</p><pre><code>undef 方法名#使用方法名undef :方法名#使用符号名</code></pre><p>在子类中希望删除父类的方法时可以直接使用undef。试图访问已删除的方法将会引发<em>NoMethodError</em>错误。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span></span><br><span class="line">puts <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RubyGreeter</span> &lt; <span class="title class_ inherited__">Greeter</span></span><br><span class="line">un<span class="keyword">def</span> <span class="title function_">say_hello</span>  <span class="comment">#删除继承的say_hello</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">rubyGreeter = <span class="title class_">RubyGreeter</span>.new</span><br><span class="line">p rubyGreeter.say_hello<span class="comment">#=&gt;抛出异常，undefined method `say_hello&#x27; for #&lt;RubyGreeter:0x007fbff4167220&gt; (NoMethodError)</span></span><br></pre></td></tr></table></figure><h4 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h4><p>利用单例类定义，可以给对象添加方法（单例方法）。单列类定义被用于定义对象的专属实例方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;Ruby&quot;</span><br><span class="line">str2 = &quot;Ruby&quot;</span><br><span class="line"></span><br><span class="line">class &lt;&lt; str1</span><br><span class="line">def hello</span><br><span class="line">puts &quot;Hello #&#123;self&#125;&quot;</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">p str1.hello #=&gt; &quot;Hello Ruby&quot;</span><br><span class="line">p str2.hello#=&gt;引发NoMethodError错误</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(5)</title>
      <link href="/2015/08/24/ruby-practice-5/"/>
      <url>/2015/08/24/ruby-practice-5/</url>
      
        <content type="html"><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在Ruby中，调用方法时是可以省略()的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> print(<span class="string">&quot;Hello world&quot;</span>)<span class="comment">#=&gt;Hello world</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;Hello world&quot;</span><span class="comment">#=&gt;Hello world</span></span><br></pre></td></tr></table></figure><p><em>带块的方法</em><br>带块的方法如time,each方法，其语法如下：</p><pre><code>对象.方法名(参数，...) do |变量1，...|    块内容end</code></pre><p>Ruby中方法可归为3类：</p><span id="more"></span><p><em>实例方法</em><br>即由对象来调用，以下数组的size方法为实例方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> [<span class="number">1</span>, <span class="number">2</span>].size<span class="comment">#=&gt;size方法即为实例方法</span></span><br></pre></td></tr></table></figure><p><em>类方法</em><br>由类本身来调用，和C#、Java中得静态方法类似，类方法不属于任何一个对象</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="title class_">Array</span>.new</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="title class_">File</span>.open(<span class="string">&quot;some_file&quot;</span>)</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="title class_">Time</span>.now</span><br></pre></td></tr></table></figure><p>调用类方法时，可以使用**::<strong>代替</strong>.**</p><p><em>函数式方法</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>在Ruby的帮助文档中，一般使用<strong>类名#方法名</strong>来标记实例方法，用<strong>类名.方法名</strong>或者<strong>类名::方法名</strong>来标记类方法</p><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>定义方法的语句如下:</p><pre><code>def 方法名(参数1，参数2,...)    希望执行的处理end</code></pre><p>可以指定默认参数给方法，当方法有多个参数时，从参数列表的右边开始依次指定默认值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b = <span class="number">1</span>, c = <span class="number">2</span></span>)</span><br><span class="line"><span class="comment">#some codes</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><em>注，只省略左边的参数或中间的某个参数是不行的</em></p><p>方法的返回值使用<strong>return</strong>关键字，当这个关键字省略时，方法的最后一个表达式的结果就会成为方法的返回值。</p><p><em>定义带块的方法</em><br>在定义带块的方法时，需要使用<strong>yield</strong>关键字来定义块所在的位置。如下代码所示</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span></span><br><span class="line"><span class="keyword">yield</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">func <span class="keyword">do</span></span><br><span class="line">print <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果<strong>yield</strong>部分有参数，程序就会将其当作块变量传到块里。快里面最后的表达式的值即为快得执行结果，同时也可以作为<strong>yield</strong>的返回值在块的外部使用。</p><p><em>参数个数不确定的方法</em><br>通过使用<strong>*变量名</strong>的形式来定义参数个数不确定的方法。Ruby会把所有的参数封装为数组，提供方法内部使用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>)</span><br><span class="line">args</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)<span class="comment">#=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>当方法需要指定特定的参数，而其他参数又不确定的情况下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">arg1, arg2, *args</span>)</span><br><span class="line">result = arg1 + arg2</span><br><span class="line">args.each <span class="keyword">do</span> |<span class="params"> arg </span>|</span><br><span class="line">result += arg</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)<span class="comment">#=&gt; 10</span></span><br></pre></td></tr></table></figure><p>所有不确定的参数都被作为数组赋值给变量args, <strong>*变量名</strong>这种形式的参数，只能在方法定义的参数列表中出现一次。</p><p><em>关键字参数</em><br>使用关键字参数，可以将参数名与参数值成对地传给方法内部使用，这时，调用方法的参数个数以及调用顺序就可以打乱。</p><pre><code>def 方法名(参数1：值1, 参数2：值2, ...)    逻辑处理end</code></pre><p>而且还可以在方法定义时指定参数默认值</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params"><span class="symbol">a:</span> <span class="number">0</span>, <span class="symbol">b:</span> <span class="number">0</span></span>)</span><br><span class="line">a + b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">p sum(<span class="symbol">a:</span> <span class="number">10</span>, <span class="symbol">b:</span> <span class="number">20</span>)<span class="comment">#=&gt; 30</span></span><br><span class="line">p sum(<span class="symbol">b:</span> <span class="number">20</span>, <span class="symbol">a:</span> <span class="number">10</span>)<span class="comment">#=&gt; 30改变参数的调用顺序</span></span><br><span class="line">p sum(<span class="symbol">b:</span> <span class="number">20</span>)<span class="comment">#=&gt; 20 省略了参数a，a默认值为0</span></span><br></pre></td></tr></table></figure><p>使用关键字参数定义方法，如果我们传入了未定义的参数，那么程序将会报错。如何避免呢，在Ruby中可以使用<strong>**变量名</strong>的形式来接收未定义的参数。此时，Ruby会把参数列表以外的其他关键字参数以散列对象的形式保存。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span><span class="title function_">sum</span>(<span class="params"><span class="symbol">a:</span> <span class="number">0</span>, <span class="symbol">b:</span> <span class="number">0</span>, **args</span>)</span><br><span class="line">result = a + b</span><br><span class="line">args.each <span class="keyword">do</span> |<span class="params">key, value</span>|<span class="comment">#=&gt; 遍历散列</span></span><br><span class="line">result += value</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">sum(<span class="symbol">a:</span> <span class="number">1</span>, <span class="symbol">b:</span> <span class="number">2</span>, <span class="symbol">c:</span> <span class="number">3</span>, <span class="symbol">d:</span> <span class="number">4</span>)<span class="comment">#=&gt; 10</span></span><br></pre></td></tr></table></figure><p>当然，关键字参数也可以与普通参数一起搭配使用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">a, <span class="symbol">b:</span> <span class="number">1</span>, <span class="symbol">c:</span> <span class="number">2</span></span>)</span><br><span class="line">sum = a + b + c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>, <span class="symbol">b:</span> <span class="number">20</span>, <span class="symbol">c:</span> <span class="number">30</span>)<span class="comment">#=&gt; 60</span></span><br></pre></td></tr></table></figure><p>以关键字参数定义的方法，Ruby会自动将其封装为散列然后传递给方法内部，所以基于此，我们当然也可以利用散列的键值来将散列传递给方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params"><span class="symbol">a:</span> <span class="number">0</span>, <span class="symbol">b:</span> <span class="number">0</span>, <span class="symbol">c:</span> <span class="number">0</span></span>)</span><br><span class="line">sum = a + b + c</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">args = &#123;<span class="symbol">a:</span> <span class="number">1</span>, <span class="symbol">b:</span> <span class="number">2</span>, <span class="symbol">c:</span> <span class="number">3</span>&#125;<span class="comment">#=&gt; 定义散列args</span></span><br><span class="line">sum(args)<span class="comment">#=&gt; 6 将散列args传递给sum方法</span></span><br><span class="line">sum(&#123;<span class="string">&quot;a&quot;</span>=&gt;<span class="number">1</span>, <span class="string">&quot;b&quot;</span>=&gt;<span class="number">2</span>, <span class="string">&quot;c&quot;</span>=&gt;<span class="number">3</span>&#125;）<span class="comment">#=&gt; 6 将散列直接传给方法</span></span><br><span class="line">sum(<span class="symbol">c:</span> <span class="number">3</span>, <span class="symbol">a:</span> <span class="number">1</span>, <span class="symbol">b:</span> <span class="number">2</span>)<span class="comment">#=&gt; 6 可省略&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><em>使用关键字参数定义方法，既可以对键进行限制，又可以定义参数的默认值，建议在实际编程中多尝试使用关键字参数</em></p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(4)</title>
      <link href="/2015/08/17/ruby-practice-4/"/>
      <url>/2015/08/17/ruby-practice-4/</url>
      
        <content type="html"><![CDATA[<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>对于任何一种程序设计语言，都有循环处理的方法，Ruby也一样，但是在Ruby中有两种实现循环的方法。</p><ul><li>使用循环语句，即利用Ruby提供的现有循环语句</li><li>使用方法实现循环，其具体做法为，将块传给方法，然后在块里面写上需要循环的处理。</li></ul><p>在Ruby中，有6种循环语句或方法：</p><span id="more"></span><ul><li>times方法</li><li>while语句</li><li>each方法</li><li>for语句</li><li>until语句</li><li>loop方法</li></ul><p><em>times方法</em><br>用于已知道执行的次数，具体用法如下:</p><pre><code>循环次数.times do    逻辑处理end#do ~ end部分可以用 &#123; ~ &#125;代替.循环次数.times &#123;    逻辑处理&#125;</code></pre><figure class="highlight ruby"><figcaption><span>times方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="number">3</span>.times <span class="keyword">do</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;hello &quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line">hello hello hello =&gt; <span class="number">3</span><span class="comment">#=&gt; 打印3个hello，并返回循环次数</span></span><br></pre></td></tr></table></figure><p>如果想知道当前的循环次数，则需要添加一个当前的循环次数变量:</p><pre><code>循环次数.times do |i|    逻辑处理end</code></pre><figure class="highlight ruby"><figcaption><span>带循环次数的times方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="number">3</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;hello<span class="subst">#&#123;i&#125;</span> &quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line">hello0 hello1 hello2 =&gt; <span class="number">3</span><span class="comment">#=&gt; 打印3个带有当前第几次循环的hello,并返回循环次数</span></span><br></pre></td></tr></table></figure><p><em>注：<strong>times</strong>方法会返回循环次数</em></p><p><em>for语句</em><br>与<strong>times</strong>方法不同，<strong>for</strong>并不是方法，而是循环控制语句。</p><pre><code>for 变量 in 开始时的数值..结束时的数值 do    循环处理end#遍历对象的for语句for 变量 in 对象 do    循环处理end</code></pre><p><strong>for</strong>语句的循环开始值和结束值可以任意指定。</p><figure class="highlight ruby"><figcaption><span>for语句</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;hello &quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line">hello hello hello =&gt; <span class="number">1</span>..<span class="number">3</span><span class="comment">#=&gt; 打印3个hello，返回1..3的range</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> language = [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Ruby&quot;</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">for</span> lan <span class="keyword">in</span> language</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;<span class="subst">#&#123;lan&#125;</span> &quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line"><span class="title class_">Python</span> <span class="title class_">JavaScript</span> <span class="title class_">Ruby</span> =&gt; [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Ruby&quot;</span>]<span class="comment">#=&gt; 一次打印数组中的元素，并返回数组</span></span><br></pre></td></tr></table></figure><p><em>注：..或者…都是创建范围对象时所需的符号</em></p><p><em>while语句</em><br>之前了解到，语法如下，十分简单</p><pre><code>while 条件 do    循环处理end</code></pre><figure class="highlight ruby"><figcaption><span>while语句</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> i, sum = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">while</span> sum &lt; <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> sum += i</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> i += <span class="number">1</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> puts sum<span class="comment">#=&gt; 55</span></span><br></pre></td></tr></table></figure><p><em>until语句</em><br>和<strong>while</strong>语句刚刚相反，<strong>until</strong>语句不满足条件时才执行循环处理，知道条件满足终止。</p><pre><code>until 条件 do    循环处理end</code></pre><figure class="highlight ruby"><figcaption><span>until语句</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> i, sum = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">until</span> sum &gt;=<span class="number">50</span> <span class="keyword">do</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> sum += i</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> i += <span class="number">1</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span>  puts sum<span class="comment">#=&gt; 55</span></span><br></pre></td></tr></table></figure><p><em>each方法</em><br><strong>each</strong>方法将对象集合里的对象逐个取出，这与<strong>for</strong>语句循环取出数组元素非常相似。</p><pre><code>对象.each do |变量|    循环处理end#与下面的for语句处理一样for 变量 in 对象    循环处理end    </code></pre><figure class="highlight ruby"><figcaption><span>each方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> language = [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Ruby&quot;</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> language.each <span class="keyword">do</span> |<span class="params">lan</span>|</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;<span class="subst">#&#123;lan&#125;</span> &quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line"><span class="title class_">Python</span> <span class="title class_">JavaScript</span> <span class="title class_">Ruby</span> =&gt; [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;Ruby&quot;</span>]<span class="comment">#=&gt; 返回对象</span></span><br></pre></td></tr></table></figure><p><em>注：在Ruby内部，<strong>for</strong>语句是用<strong>each</strong>方法来实现的。可以使用<strong>each</strong>方法的对象，也可以用<strong>for</strong>语句</em></p><p><em>loop方法</em><br>此循环方法没用终止循环条件，需要用得循环控制语句来控制此循环</p><pre><code>loop do    循环处理end</code></pre><h3 id="循环控制命令"><a href="#循环控制命令" class="headerlink" title="循环控制命令"></a>循环控制命令</h3><ul><li>break 终止程序，跳出循环</li><li>next 跳到下一次循环，和其他类似Java，C#的continue一样</li><li>redo 在相同的条件下重复刚才的处理</li></ul><p><strong>redo</strong>与<strong>next</strong>非常像，与<strong>next</strong>的不同之处是，<strong>redo</strong>会再执行一次相同的循环。所以要注意<strong>redo</strong>的使用方法，很容易陷入死循环中。</p><p><em>注： <strong>do ~ end</strong> 和 <strong>{ ~ }</strong> 是等价的语句块。 只不过从编码规范上来说，如果程序是跨行写的时候使用<strong>do ~ end</strong>，程序写在1行的时候用*</em>{ ~ }**.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="number">3</span>.times <span class="keyword">do</span> |<span class="params">i</span>|</span><br><span class="line">&gt;&gt;puts i</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="number">3</span>.times &#123; |<span class="params">i</span>| puts i &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(3)</title>
      <link href="/2015/08/14/ruby-practice-3/"/>
      <url>/2015/08/14/ruby-practice-3/</url>
      
        <content type="html"><![CDATA[<p>在Ruby中任何表现数据的基本单位都称为对象(object), 而Ruby的类(class)表示的就是这些对象的种类。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>和其他面向对象语言一样，Ruby也有多种类型的变量，但是在Ruby中，变量的类型是由变量的命名方式决定的。</p><p><em>局部变量(local variable)</em><br>以英文字母或者_开头</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">words = <span class="string">&quot;Hello Ruby&quot;</span></span><br><span class="line">_words = <span class="string">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><em>全局变量(global variable)</em><br>以$开头</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$words</span>=<span class="string">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure><p><em>实例变量(instance variable)</em><br>以@开头</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@words</span>=<span class="string">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure><p><em>类变量(class variable)</em></p><p>以@@开头</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@@words</span> = <span class="string">&quot;Hello Ruby&quot;</span></span><br></pre></td></tr></table></figure><p><em>伪变量(pseudo variable)</em><br>伪变量是Ruby预先定义好的代表某个特定值的特殊变量，因此这个值是无法改变的。如，nil、true、false、self等。</p><p><em>注：Ruby不需要在意变量名的长度，对于多个单词组合的变量名，使用_隔开各个单词，或者单词以大写字母开头，如：my_words,或者myWords。但是在Ruby中的变量名和方法名一般使用前者，而后者主要用于类名和模块名。</em></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>顾名思义，即不可修改，对已经赋值的常量再进行赋值时，Ruby会做出警告。常量均以大写字母来命名。如Ruby中预先定义好的RUBY_VERSION(运行版本)、RUBTY_PLATFORM(运行平台)、ARGV(命令行参数数组).</p><h3 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h3><p>多重赋值是Ruby中的简化代码的一种方式，通过多重赋值可以将多个变量同时赋值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span><span class="comment">##同时赋值a, b, c</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p [a, b, c]<span class="comment">##=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>这样a, b, c均被赋值了1, 2, 3。<br><em>注：在使用多重赋值时，建议对彼此相关变量进行多重赋值，避免程序难读懂。</em></p><p>即使等号(&#x3D;)左右两边列表的数量不相等，Ruby也不会报错。<br><em>左边变量部分数量多时</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b, c, d = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p [a, b, c, d]<span class="comment">##=&gt; [1, 2, nil, nil]</span></span><br></pre></td></tr></table></figure><p>当左边变量部分数量多时，Ruby会自动将<strong>nil</strong>赋值给未被分配值的变量。如上的c, d变量。</p><p><em>左边变量部分数量少时</em></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p [a, b, c]<span class="comment">##=&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>当变量部分比较少时，Ruby会忽略掉该值，不会分配多余的值，如上的值4。</p><p><em>将未被分配的值赋给指定的变量</em><br>当给一个变量前加上*，表示Ruby会将未分配的值封装为数组赋值给该变量。通过这种方式，Ruby会将变量与右边的值一一匹配。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b, *c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p [a, b, c]<span class="comment">##=&gt; [1, 2, [3, 4]]</span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, *b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p [a, b, c]<span class="comment">##=&gt; [1, [2, 3, 4], 5]</span></span><br></pre></td></tr></table></figure><p>使用多重赋值简化变量值交换：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b = b, a<span class="comment">##置换变量a、b的值</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p [a, b]<span class="comment">##=&gt; [1, 0]</span></span><br></pre></td></tr></table></figure><p>使用多重赋值获取数组的元素:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b = arr</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p a<span class="comment">##=&gt; 1</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p b<span class="comment">##=&gt; 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, b, c = arr</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p a<span class="comment">##=&gt; 1</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p b<span class="comment">##=&gt; [2, 3]</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p c<span class="comment">##=&gt; 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> a, (b, c), d = arr</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p a<span class="comment">##=&gt; 1</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p b<span class="comment">##=&gt; 2</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p c<span class="comment">##=&gt; 3</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p d<span class="comment">##=&gt; 4</span></span><br></pre></td></tr></table></figure><p>只要等号左边的变量结构与数组的结构一致，即使再复杂的结构，多重赋值以可以轻松对应。</p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>Ruby中条件判断有三种，if语句，unless语句，case语句。If语句我们之前讲过，这里主要涉及剩余两种。</p><p><em>unless语句</em><br>这个判断语句刚好与if语句相反，当条件为假时才执行</p><pre><code>unless 条件为假 then    逻辑处理endunless 条件为假    逻辑处理1else    逻辑处理2end</code></pre><p><em>then</em>关键字可以省略。</p><p><em>case语句</em><br>如果需要比较的对象只有一个，根据这个对象值的不同，执行不同的逻辑处理。</p><pre><code>case 比较对象when 值1 then    逻辑处理1when 值2 then    逻辑处理2when 值3 then    逻辑处理3else    逻辑处理4end</code></pre><p>当然，<em>then</em>关键字也可以省略。<br><em>when</em>关键字也可以一次指定多个值。</p><pre><code>case 比较对象when 值1，值2，值3 then    逻辑处理1else    逻辑处理2end</code></pre><p>在<em>case</em>语句中，<em>when</em>判断值是否相等时，实际是使用**&#x3D;&#x3D;&#x3D;<strong>运算符来判断的。当左边是数值或者字符串时，</strong>&#x3D;&#x3D;&#x3D;<strong>与</strong>&#x3D;&#x3D;**的意义是一样的。</p><p><em>注:Ruby中只有<strong>nil</strong>和<strong>false</strong>为假，除此之外的值全为真.</em></p><p>在Ruby中，所有的对象都是唯一的，可以通过<strong>object_id</strong>（或者**<strong>id</strong>**)方法获取对象的标识。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr1 = []</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr2 = []</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p arr1.object_id<span class="comment">##=&gt; 70115564029000</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> p arr2.__id__<span class="comment">##=&gt; 70115559585120</span></span><br></pre></td></tr></table></figure><p>如果判断两个对象是否是同一个对象，即是否引用的是同一个ID的对象。Ruby提供了**equal?**方法来判断。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr1 = []</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr2 = []</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr1.equal? arr2<span class="comment">##=&gt; false</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr3 = arr1</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> arr1.equal? arr3<span class="comment">##=&gt; true</span></span><br></pre></td></tr></table></figure><p>除了**&#x3D;&#x3D;<strong>以外，Ruby还提供了</strong>eql?**方法用来判断对象的值是否相等。大部分情况下 **&#x3D;&#x3D;<strong>与</strong>eql?<strong>执行结果都是一样的。但针对数值类，</strong>eql?**方法会被重定义。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="number">1.0</span> == <span class="number">1</span><span class="comment">##=&gt; true</span></span><br><span class="line">p <span class="number">1.0</span>.eql? <span class="number">1</span><span class="comment">##=&gt; false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(2)</title>
      <link href="/2015/08/13/ruby-practice-2/"/>
      <url>/2015/08/13/ruby-practice-2/</url>
      
        <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Ruby中数组的大小是按实际情况自动调整的，即所谓的<strong>动态数组</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> rubyArray = [<span class="string">&quot;data1&quot;</span>, <span class="string">&quot;data2&quot;</span>]   <span class="comment">##定义两个数据的数组</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> rubyArray[<span class="number">2</span>] = <span class="string">&quot;data3&quot;</span>           <span class="comment">##新增第三个数据</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print rubyArray                  <span class="comment">##打印[&quot;data1&quot;, &quot;data2&quot;, &quot;data3&quot;]</span></span><br></pre></td></tr></table></figure><p>Ruby数组还支持多种不同对象的混合保存, 通过<strong>数组.size</strong>可获取数组的大小</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> mixedArray = [<span class="number">1</span>, <span class="string">&quot;data&quot;</span>, <span class="number">2</span>, <span class="string">&quot;time&quot;</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> mixedArray.size     <span class="comment">#=&gt; 5</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>遍历数组也很方便，利用each方法，ruby提供了两种书写方式。<em>each方法会返回原数组的值</em></p><figure class="highlight ruby"><figcaption><span>do/end代码块方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> mixedArray = [<span class="number">1</span>, <span class="string">&quot;data&quot;</span>, <span class="number">2</span>, <span class="string">&quot;time&quot;</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> mixedArray.each <span class="keyword">do</span> |<span class="params">value</span>|</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;<span class="subst">#&#123;value&#125;</span> &quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##将会打印出:1 data 2 time 3,并且返回mixedArray。</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><figcaption><span>&#123;&#125;代码块方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> mixedArray.each &#123;</span><br><span class="line">&gt;&gt; |<span class="params">value</span>|</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> print <span class="string">&quot;<span class="subst">#&#123;value&#125;</span> &quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> &#125;</span><br></pre></td></tr></table></figure><p>上面两种方式的输出结果和返回值都一样。建议采用第一种，更加符合Ruby的风格。</p><p><em>注:通过在终端输入<strong>irb –simple-promot</strong>，可以简化ruby交互式的提示输入，如上面的Ruby的提示输入符’&gt;&gt;’</em></p><h3 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h3><p>Ruby中的键值(key-value pair)数据结构是用散列(hash)来表示，一般以字符串或者符号(Symbol)来作为键，值来保存对应的对象。</p><p>*符号(symbol)*与字符串对象很相似，符号也是对象，一般都作为名称标签来使用。我们可以将符号简单理解为轻量级的字符串。</p><p>符号的定义只需在标识符的开头加上’:’即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> sym1 = <span class="symbol">:text</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> sym2 = <span class="symbol">:<span class="string">&quot;text&quot;</span></span></span><br></pre></td></tr></table></figure><p>以上两行代码都是表示符号”:foo”.</p><p>使用符号比使用字符串更有效率，而且符号与字符串可以互相任意转换, 用<strong>to_s</strong>和<strong>to_sym</strong>方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> sym = <span class="symbol">:text</span></span><br><span class="line">=&gt; <span class="symbol">:text</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> sym.to_s<span class="comment">##将符号转为话字符串</span></span><br><span class="line">=&gt; <span class="string">&quot;text&quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="string">&quot;text&quot;</span>.to_sym    <span class="comment">##将字符串转为符号</span></span><br><span class="line">=&gt; <span class="symbol">:text</span></span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><p>如何定义一个散列，定义一个散列有下列两种写法:</p><figure class="highlight ruby"><figcaption><span>散列定义方式一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> details = &#123;<span class="symbol">:name</span> =&gt; <span class="string">&quot;yu&quot;</span>, <span class="symbol">:gender</span> =&gt; <span class="string">&quot;male&quot;</span>, <span class="symbol">:alias</span> =&gt; <span class="string">&quot;stonefishy&quot;</span>&#125;</span><br><span class="line">=&gt; &#123;<span class="symbol">:name=&gt;<span class="string">&quot;yu&quot;</span></span>, <span class="symbol">:gender=&gt;<span class="string">&quot;male&quot;</span></span>, <span class="symbol">:alias=&gt;<span class="string">&quot;stonefishy&quot;</span></span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><figcaption><span>散列定义方式二</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> details = &#123;<span class="symbol">name:</span> <span class="string">&quot;yu&quot;</span>, <span class="symbol">gender:</span> <span class="string">&quot;male&quot;</span>, <span class="symbol">alias:</span> <span class="string">&quot;stonefishy&quot;</span>&#125;</span><br><span class="line">=&gt; &#123;<span class="symbol">:name=&gt;<span class="string">&quot;yu&quot;</span></span>, <span class="symbol">:gender=&gt;<span class="string">&quot;male&quot;</span></span>, <span class="symbol">:alias=&gt;<span class="string">&quot;stonefishy&quot;</span></span>&#125;</span><br></pre></td></tr></table></figure><p>第二种方式和<em>json</em>数据的格式相似。</p><p>操作散列也很简单，直接看下面执行示例</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> details[<span class="symbol">:age</span>] = <span class="number">18</span><span class="comment">##新增一个age值</span></span><br><span class="line">=&gt; <span class="number">18</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> details</span><br><span class="line">=&gt; &#123;<span class="symbol">:name=&gt;<span class="string">&quot;yu&quot;</span></span>, <span class="symbol">:gender=&gt;<span class="string">&quot;male&quot;</span></span>, <span class="symbol">:alias=&gt;<span class="string">&quot;stonefishy&quot;</span></span>, <span class="symbol">:age=&gt;</span><span class="number">18</span>&#125;</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> details[<span class="symbol">:name</span>] <span class="comment">##获取指定键的值</span></span><br><span class="line">=&gt; <span class="string">&quot;yu&quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> details[<span class="symbol">:age</span>] = <span class="number">20</span><span class="comment">##修改指定键的值</span></span><br><span class="line">=&gt; <span class="number">20</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> details</span><br><span class="line">=&gt; &#123;<span class="symbol">:name=&gt;<span class="string">&quot;yu&quot;</span></span>, <span class="symbol">:gender=&gt;<span class="string">&quot;male&quot;</span></span>, <span class="symbol">:alias=&gt;<span class="string">&quot;stonefishy&quot;</span></span>, <span class="symbol">:age=&gt;</span><span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><p><em>注: &#x3D;&gt;符号表示ruby交互式模式的输出命令</em></p><p>使用each方法遍历散列：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> details.each <span class="keyword">do</span> |<span class="params">key, value</span>|</span><br><span class="line"><span class="meta prompt_">?&gt;</span> puts <span class="string">&quot;<span class="subst">#&#123;key&#125;</span> - <span class="subst">#&#123;value&#125;</span>&quot;</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> <span class="keyword">end</span></span><br><span class="line">name - yu</span><br><span class="line">gender - male</span><br><span class="line"><span class="keyword">alias</span> - stonefishy</span><br><span class="line">age - <span class="number">20</span></span><br><span class="line">=&gt; &#123;<span class="symbol">:name=&gt;<span class="string">&quot;yu&quot;</span></span>, <span class="symbol">:gender=&gt;<span class="string">&quot;male&quot;</span></span>, <span class="symbol">:alias=&gt;<span class="string">&quot;stonefishy&quot;</span></span>, <span class="symbol">:age=&gt;</span><span class="number">20</span>&#125;   <span class="comment">##each方法同样会返回散列</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式(Regular Expression)的语法如下，</p><pre><code>/模式/</code></pre><p>使用运算符&#x3D;~来匹配正则表达式和字符串, 若匹配成功返回匹配部分的位置，匹配失败返回nil值。</p><pre><code>/模式/ =~ 希望匹配的字符串</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> /ruby/ =~ <span class="string">&quot;hello, ruby&quot;</span><span class="comment">##包含‘ruby’字符串</span></span><br><span class="line">=&gt; <span class="number">7</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> /^ruby<span class="variable">$/</span> =~ <span class="string">&quot;hello, ruby&quot;</span><span class="comment">##完全匹配‘ruby’字符串</span></span><br><span class="line">=&gt; nil</span><br><span class="line"><span class="meta prompt_">&gt;&gt;</span> /ruby<span class="variable">$/</span> =~ <span class="string">&quot;hello, ruby&quot;</span><span class="comment">##以‘ruby’字符串结尾</span></span><br><span class="line">=&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure><p>正则表达式右边的&#x2F;后面添加i表示不区分大小写匹配:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;&gt;</span> /<span class="title class_">RUby</span>/i =~ <span class="string">&quot;hello, ruby&quot;</span></span><br><span class="line">=&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure><p>定义正则表达式还有另外一种方式，直接用<strong>Regexp</strong>类来创建:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pattern = <span class="title class_">Regexp</span>.new(<span class="string">&quot;ruby&quot;</span>)<span class="comment">##定义一个正则表达式</span></span><br><span class="line">=&gt; /ruby/</span><br><span class="line">&gt;&gt; pattern =~ <span class="string">&quot;hello, ruby&quot;</span></span><br><span class="line">=&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure><p><em>注: 如果想更加详细的了解正则表达式的语法，可以查看使用<a href="http://rubular.com/">Rubular</a></em></p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>Ruby中使用<strong>ARGV</strong>这个Ruby预定义好的数组来获取从命令行传递过来的数据。在命令行指定多个脚本参数时，各个参数之间用空格隔开。</p><p>使用<strong>each_with_index</strong>方法可以获取遍历的index，</p><figure class="highlight ruby"><figcaption><span>argv.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">ARGV</span>.each_with_index <span class="keyword">do</span> |<span class="params">arg, index</span>|</span><br><span class="line">puts <span class="string">&quot;第<span class="subst">#&#123;index + <span class="number">1</span>&#125;</span>个参数: <span class="subst">#&#123;arg&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>执行和输出结果如下:</p><pre><code>&gt; ruby argv.rb hello world and ruby##命令行输入参数=&gt; 第1个参数: hello=&gt; 第2个参数: world=&gt; 第3个参数: and=&gt; 第4个参数: ruby</code></pre><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>Ruby中通过File类来读取文件，两种读取方式，一次性读取和逐行读取，示例如下,</p><figure class="highlight ruby"><figcaption><span>read_all_text.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="title class_">File</span>.open(<span class="variable constant_">ARGV</span>[<span class="number">0</span>])<span class="comment">##打开文件</span></span><br><span class="line">text = file.read<span class="comment">##读取文件中得所有文本数据</span></span><br><span class="line">print text</span><br><span class="line">file.close<span class="comment">##关闭文件句柄</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><figcaption><span>read_each_line_text.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="title class_">File</span>.open(<span class="variable constant_">ARGV</span>[<span class="number">0</span>])</span><br><span class="line">file.each_line <span class="keyword">do</span> |<span class="params">line</span>| <span class="comment">##逐行读取文件</span></span><br><span class="line">print line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">file.close</span><br></pre></td></tr></table></figure><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><p>Ruby方法的定义和Python一样简答，</p><pre><code>def 方法名    希望处理的逻辑end</code></pre><p>我们现在将上面读取文件的代码定义在一个方法中，</p><figure class="highlight ruby"><figcaption><span>read_file.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">file_name</span>)</span><br><span class="line">file = <span class="title class_">File</span>.open(file_name)</span><br><span class="line">file.each_line <span class="keyword">do</span> |<span class="params">line</span>|</span><br><span class="line">print line</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>现在我们想在其他文件里面使用上面定义的文件读取方法，那么该如何引用了，且看下，</p><h3 id="引用文件"><a href="#引用文件" class="headerlink" title="引用文件"></a>引用文件</h3><p>Ruby使用<strong>require</strong>方法来引用库或文件</p><pre><code>require 希望使用的库名</code></pre><p><em>库名可以省略后缀.rb</em></p><figure class="highlight ruby"><figcaption><span>invoke_read_file.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;./read_file&quot;</span><span class="comment">##引入读取文件的库</span></span><br><span class="line">read_file(<span class="string">&quot;argv.rb&quot;</span>);<span class="comment">##直接调用库中的方法</span></span><br></pre></td></tr></table></figure><p>执行示例：</p><pre><code>&gt; ruby invoke_read_file.rb=&gt; ARGV.each_with_index do |arg, index|=&gt; puts &quot;第#&#123;index + 1&#125;个参数: #&#123;arg&#125;&quot;=&gt; end</code></pre><h3 id="p与pp方法"><a href="#p与pp方法" class="headerlink" title="p与pp方法"></a>p与pp方法</h3><p>如前我们所介绍的打印数据到终端的有<strong>p</strong>, <strong>puts</strong>, <strong>print</strong>等方法，现在再介绍一种按数据排版打印的方法<strong>pp</strong>, 其全名为 pretty print。但是如果想使用该方法，需要使用require方法引入<strong>pp</strong>库。直接看示例</p><figure class="highlight ruby"><figcaption><span>p_and_pp.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;pp&quot;</span></span><br><span class="line"></span><br><span class="line">details = [&#123;<span class="symbol">content1:</span> <span class="string">&quot;This is content1&quot;</span>, </span><br><span class="line"><span class="symbol">content2:</span> <span class="string">&quot;This is content2&quot;</span>, </span><br><span class="line"><span class="symbol">content3:</span> <span class="string">&quot;This is content3&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;p的输出格式如下:&quot;</span></span><br><span class="line">p details</span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;pp的输出格式如下:&quot;</span></span><br><span class="line">pp details</span><br></pre></td></tr></table></figure><p>执行示例:</p><pre><code>p的输出格式如下:[&#123;:content1=&gt;&quot;This is content1&quot;, :content2=&gt;&quot;This is content2&quot;, :content3=&gt;&quot;This is content3&quot;&#125;]pp的输出格式如下:[&#123;:content1=&gt;&quot;This is content1&quot;,    :content2=&gt;&quot;This is content2&quot;,    :content3=&gt;&quot;This is content3&quot;&#125;]    </code></pre><p>与<strong>p</strong>方法的不同之处在于，<strong>pp</strong>方法在输出对象的结果时，为了更容易看懂，会适当的换行以调整输出结果。如上所示。</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby修炼之道(1)</title>
      <link href="/2015/08/12/ruby-practice-1/"/>
      <url>/2015/08/12/ruby-practice-1/</url>
      
        <content type="html"><![CDATA[<img src="/assets/images/legacy/ruby-logo.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/ruby-logo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="50" height="50">**Ruby**是一门脚本语言，由日本人松本行弘发明，旨在让开发人员用更简洁的方式快乐的编程。他的语法类似Python脚本语言，比较优雅，而且还提供了一些丰富强大的类库。Ruby的意思是**红宝石**.<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><em>脚本语言</em><br>即动态语言，和其他脚本语言一样，无需编译即可直接运行，而C#、C++和Java等需要通过编译然后才能运行。Ruby减少了开发者的开发流程。</p><span id="more"></span><p><em>完全的面向对象</em><br>对Ruby来说，纯数字都属于对象，可以直接调用其方法。比如下面代码：   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1.abs   #return 1</span><br></pre></td></tr></table></figure><p>这是其他面向对象编程语言如C#、Java不具备的。同时Ruby也具备有其他面向对象编程语言的特性，如：继承、Mixin等。</p><p><em>跨平台</em><br>能在类Unix操作系统如：Mac OS X、Linux和windows操作系统上运行。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Ruby的安装很简单，以在Mac OS X电脑的安装为例。使用Homebrew包管理器可以得到ruby的最新版本:   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ruby</span><br></pre></td></tr></table></figure><p>安装完后，在输入如下命令查看ruby版本:   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure><p>进入<a href="https://www.ruby-lang.org/en/documentation/installation/">Ruby Installation</a>链接可以查看Ruby在其他操作系统上的安装</p><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>用ruby编写第一个Hello world程序，只需一行代码，比其他的面向对象语言简单多了。   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;Hello world\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>直接将这行代码写入helloworld.rb文件，然后输入如下指令运行即可看到内容输出在终端控制器上。   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby helloworld.rb</span><br></pre></td></tr></table></figure><p>当然如果你想直接和ruby交互的话，也有办法，Ruby提供了和Python类似的交互式操作。在命令行输入<strong>irb</strong>进入交互模式。</p><p>ruby也提供了字符的转义功能，比如换行(\n), 制表符(\t)等等。如上面的打印Hello world。</p><p><em>注:上面代码中调用print方法的括号可以省略。ruby尽量的简化了开发人员的工作量</em></p><h3 id="puts、print和p的区别"><a href="#puts、print和p的区别" class="headerlink" title="puts、print和p的区别"></a>puts、print和p的区别</h3><p><strong>puts</strong>方法会在每次输出后输出换行符，而<strong>print</strong>则不会。例如以下的输出内容是一致的:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&quot;Helle world&quot;</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&quot;Hello world\n&quot;</span></span><br></pre></td></tr></table></figure><p>使用<strong>p</strong>方法可以将数据按照原始类型输出来，这是<strong>puts</strong>和<strong>print</strong>所不具备的，直接用代码来解释:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&quot;1&quot;</span>   <span class="comment">#=&gt; 1</span></span><br><span class="line">puts <span class="number">1</span>     <span class="comment">#=&gt; 1</span></span><br><span class="line">print <span class="number">1</span>    <span class="comment">#=&gt; 1</span></span><br><span class="line">print <span class="string">&quot;1&quot;</span>  <span class="comment">#=&gt; 1</span></span><br><span class="line">p <span class="string">&quot;1&quot;</span>      <span class="comment">#=&gt; &quot;1&quot;</span></span><br><span class="line">p <span class="number">1</span>        <span class="comment">#=&gt; 1</span></span><br></pre></td></tr></table></figure><p>所以基于<strong>p</strong>方法的特性，转义字符在其内是不工作的，将会被直接打印出来,如以下代码将会输出”Hello world\n”。还有<strong>p</strong>方法也会输出换行符，并且还会将打印的内容按数据类型返回，而其他两种方法只返回<strong>nil</strong>空值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p <span class="string">&quot;Hello world\n&quot;</span>  </span><br></pre></td></tr></table></figure><p><em>注:在Ruby中，任何函数均有返回值。<strong>nil</strong>空值就是其中一种常见的返回。</em></p><p><strong>print</strong>, <strong>puts</strong>和<strong>p</strong>方法均可传入多个参数，调用方式和返回结果如下，可以体会下用法:<br><em>print方法</em>    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot; Ruby“</span></span><br></pre></td></tr></table></figure><pre><code>Hello Ruby</code></pre><p><em>puts方法</em>   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot; Ruby&quot;</span></span><br></pre></td></tr></table></figure><pre><code>HelloRuby</code></pre><p><em>p方法</em>   </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot; Ruby&quot;</span></span><br></pre></td></tr></table></figure><pre><code>”Hello&quot;&quot;Ruby&quot;</code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在ruby中声明变量也很简单，不需要任何如javascript的<em>var</em>等关键字，直接定义赋值。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greet = <span class="string">&quot;Hello world&quot;</span></span><br></pre></td></tr></table></figure><p>访问变量也简单:   </p><pre><code class="ruby">puts greetputs &quot;#&#123;greet&#125;&quot;</code></pre><p>以上两种写法均会直接输出Hello world.</p><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p><em>if 语句</em>   </p><pre><code>if 条件 then      逻辑处理end</code></pre><p><em>if else 语句</em></p><pre><code>if 条件 then    逻辑处理else    逻辑处理end</code></pre><p><em>if elsif 语句</em></p><pre><code>if 条件 then    逻辑处理elsif 条件 then    逻辑处理else    逻辑处理end</code></pre><p><em>注:在上面的if各种控制语句中，<strong>then</strong>关键字是可以省略的.</em></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p><em>while 语句</em></p><pre><code>while 条件 do    逻辑处理end</code></pre><p><em>times迭代器</em></p><p>当循环的次数已经确定时，可直接使用times方法来循环处理我们需要的逻辑<br>    I<br>    循环次数.times do<br>        逻辑处理<br>    end</p><p>*注:<strong>times</strong>方法被成为迭代器，除了times方法迭代器，ruby还提供了其他的迭代器，比如<strong>each</strong>方法.*</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to get or post data via HttpClient with proxy</title>
      <link href="/2015/08/06/how-to-get-or-post-data-via-httpclient-with-proxy/"/>
      <url>/2015/08/06/how-to-get-or-post-data-via-httpclient-with-proxy/</url>
      
        <content type="html"><![CDATA[<p>The <strong>HttpClient</strong> is library which is support by apache. It can post or get data from specific  webservice and represents only the most basic contract for HTTP request execution.</p><p>We explain how to use this library with a example. In this example, we are going to use it to access the google tranlated API. Translating some text from specific language to other language. And this example using the Spring framework and Maven tool to build.</p><span id="more"></span><p>First, let us create our properties file which configures the google api url and some httpclient related stuff. Put it in our resource directory.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">google.translation.api=https:<span class="comment">//www.googleapis.com/language/translate/v2</span></span><br><span class="line">proxy.host=</span><br><span class="line">proxy.port=</span><br><span class="line">proxy.user=</span><br><span class="line">proxy.password=</span><br></pre></td></tr></table></figure><p>And then we create the util class which access the properties file.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.httpclient.tutorial.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 8/7/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ConstantUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROXY_HOST</span> <span class="operator">=</span> <span class="string">&quot;proxy.host&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROXY_PORT</span> <span class="operator">=</span> <span class="string">&quot;proxy.port&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROXY_USER</span> <span class="operator">=</span> <span class="string">&quot;proxy.user&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROXY_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;proxy.password&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GOOGLE_TRANSLATION_API</span> <span class="operator">=</span><span class="string">&quot;google.translation.api&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties configurationProperties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConstantUtil</span><span class="params">(Properties configurationProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configurationProperties = configurationProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProxyHost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.configurationProperties.getProperty(PROXY_HOST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getProxyPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(<span class="built_in">this</span>.configurationProperties.getProperty(PROXY_PORT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProxyUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.configurationProperties.getProperty(PROXY_USER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProxyPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.configurationProperties.getProperty(PROXY_PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGoogleTranslationApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">this</span>.configurationProperties.getProperty(GOOGLE_TRANSLATION_API);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So our configuration is completed. We also will create the HttpClient which can be used to access the webservice.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.httpclient.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.AuthScope;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.Credentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.CredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.httpclient.tutorial.utils.ConstantUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 8/7/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HttpClientFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConstantUtil constantUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HttpClientFactory</span><span class="params">(ConstantUtil constantUtil)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.constantUtil = constantUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CloseableHttpClient <span class="title function_">createHttpClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> HttpClients.createDefault();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HttpClientBuilder <span class="title function_">createHttpClientWithProxy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpHost</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>(constantUtil.getProxyHost(), constantUtil.getProxyPort());</span><br><span class="line">        <span class="type">Credentials</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordCredentials</span>(constantUtil.getProxyUser(), constantUtil.getProxyPassword());</span><br><span class="line">        <span class="type">AuthScope</span> <span class="variable">authScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthScope</span>(constantUtil.getProxyHost(), constantUtil.getProxyPort());</span><br><span class="line">        <span class="type">CredentialsProvider</span> <span class="variable">credentialsProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicCredentialsProvider</span>();</span><br><span class="line">        credentialsProvider.setCredentials(authScope, credentials);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpClients.custom().setDefaultCredentialsProvider(credentialsProvider).setProxy(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above codes, there are two methods, one is for default httpclient which is not need the proxy, another is httpclient with proxy.</p><p>So far, we have our own httpclient. let’s create our own translation component with httpclient.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.httpclient.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.httpclient.tutorial.utils.ConstantUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 8/7/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TranslateCore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;AIzaSyAFaWbO3r-9FNeHU6Obj5tm6wWSnIAlBkg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpClientFactory httpClientFactory;</span><br><span class="line">    <span class="keyword">private</span> ConstantUtil constantUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TranslateCore</span><span class="params">(HttpClientFactory httpClientFactory, ConstantUtil constantUtil)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.httpClientFactory = httpClientFactory;</span><br><span class="line">        <span class="built_in">this</span>.constantUtil = constantUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">translateContext</span><span class="params">(String sourceLanguage, String targetLanguage, String context)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s?key=%s&amp;source=%s&amp;target=%s&amp;q=%s&amp;&quot;</span>, constantUtil.getGoogleTranslationApi(),</span><br><span class="line">                KEY, sourceLanguage, targetLanguage, context);</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> httpClientFactory.createHttpClient();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CloseableHttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(httpResponse.getEntity());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You will notice that KEY constant variable, which is support by google developer, you need to register google developer and then get you developer key.</p><p>Take your feet to <a href="https://cloud.google.com/translate/v2/using_rest?hl=en">here</a>to see the google translate API usage.</p><p>Okay, then creating translation interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.httpclient.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 8/7/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITranslation</span> &#123;</span><br><span class="line">    String <span class="title function_">translateToJapanese</span><span class="params">(String context)</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">translateToChinese</span><span class="params">(String context)</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">translate</span><span class="params">(String language, String context)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s implement our translation interfer, in this class, we just translat english to other language.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.httpclient.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 8/7/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Translation</span> <span class="keyword">implements</span> <span class="title class_">ITranslation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ZH</span> <span class="operator">=</span> <span class="string">&quot;zh-CN&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EN</span> <span class="operator">=</span> <span class="string">&quot;en&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JA</span> <span class="operator">=</span> <span class="string">&quot;ja&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TranslateCore translateCore;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Translation</span><span class="params">(TranslateCore translateCore)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.translateCore = translateCore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">translateToJapanese</span><span class="params">(String context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> translateCore.translateContext(EN, JA, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">translateToChinese</span><span class="params">(String context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> translateCore.translateContext(EN, ZH, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">translate</span><span class="params">(String language, String context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> translateCore.translateContext(EN, language, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To run our application.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.httpclient.tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 8/7/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application-context.xml&quot;</span>);</span><br><span class="line">        <span class="type">ITranslation</span> <span class="variable">translation</span> <span class="operator">=</span> (ITranslation)context.getBean(<span class="string">&quot;translation&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(translation.translateToChinese(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">        System.out.println(translation.translateToJapanese(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We using the spring framework to create bean and run it. The spring configuration xml file is below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:util=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;util:properties id=<span class="string">&quot;configurationProperties&quot;</span> location=<span class="string">&quot;classpath:configuration.properties&quot;</span>/&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;org.httpclient.tutorial&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;translation&quot;</span> class=<span class="string">&quot;org.httpclient.tutorial.Translation&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg ref=<span class="string">&quot;translateCore&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>The output is below:</p><pre><code>&#123;     &quot;error&quot;: &#123;      &quot;errors&quot;: [       &#123;        &quot;domain&quot;: &quot;usageLimits&quot;,        &quot;reason&quot;: &quot;dailyLimitExceeded&quot;,        &quot;message&quot;: &quot;Daily Limit Exceeded&quot;       &#125;      ],      &quot;code&quot;: 403,      &quot;message&quot;: &quot;Daily Limit Exceeded&quot;     &#125;    &#125;</code></pre><p>This indicate our access the google translate API with httpclient is successful. But why response these text. Because you need to price to google and then are able to use this api.<br>To see the pricing of google translate API, visit <a href="https://cloud.google.com/translate/v2/pricing">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using TSD to improve javascript intellisense of IDE</title>
      <link href="/2015/07/30/using-tsd-to-improve-javascript-intellisense-of-ide/"/>
      <url>/2015/07/30/using-tsd-to-improve-javascript-intellisense-of-ide/</url>
      
        <content type="html"><![CDATA[<p>As we know, it’s very difficult to make the IDE to recognise the function of JavaScript, we called code intellisense, because JavaScript is weak language. So how to solve this problem. There is a way.</p><p><code>TSD</code> is TypeScript Definition manager for DefinitelyTyped. It can search and install <code>TypeScript</code> definition files directly from repository. The <code>TypeScript</code> definition file actually is TypeScript file, and TypeScript is strong type language. So IDE can intellisense the code, like Java and C#.</p><p><code>TypeScipt</code> is also like <code>CoffeeScript</code>, it can be compiled to <code>JavaScript</code>. It is developed by Microsoft company. To See the TypeScript, go to this official <a href="http://www.typescriptlang.org/">website</a>.</p><span id="more"></span><p>If you used the <code>NPM</code> before, I believe you also can use <code>TSD</code> quickly. The <code>TSD</code> usage is very similar with <code>NPM</code>. And also it has <code>tsd.json</code> file to contains javascript libraries type definitions which you want to make them intellisense, just like <code>package.json</code> file of <code>NPM</code>.</p><p>To install it, we can using <code>NPM</code> command.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install tsd -g</span><br></pre></td></tr></table></figure><p>Use below command to search the DefinitelyTyped file of JavaScript library.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsd query &lt;javascript library name&gt; -i -r</span><br></pre></td></tr></table></figure><p>for example, we search the definitelyTyped file of angular:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsd query angular -i -r</span><br></pre></td></tr></table></figure><p>this will print below information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- angularjs / angular</span><br><span class="line">   -&gt; jquery &gt; jquery</span><br><span class="line">    v latest</span><br><span class="line">    v 1.0.0</span><br><span class="line">    v 1.2.0</span><br><span class="line">   &gt;&gt; Angular JS 1.4            : angularjs.org</span><br><span class="line">    @ Diego Vilar               : github.com/diegovilar</span><br><span class="line">    &lt; angular (external module)</span><br></pre></td></tr></table></figure><p>To install the definitelyTyped file into your project. Just follow below commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsd install angular --save</span><br></pre></td></tr></table></figure><p>also like using NPM to install the package. For tsd, this will create <code>tsd.json</code> file firstly, and then create <code>typing</code> directory, put the related definitelytyped file which is the <code>.d.ts</code> extension TypeScript file. </p><p>The example of <code>tsd.json</code> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;borisyankov/DefinitelyTyped&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;master&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typings&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bundle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typings/tsd.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;installed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;angularjs/angular.d.ts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;383a3bc8e654a77eb8bd07d9feb7208735dcb6fa&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jquery/jquery.d.ts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;383a3bc8e654a77eb8bd07d9feb7208735dcb6fa&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The example of <code>tsd.d.ts</code> file, this file is reference the definitelytyped file. and it under the <code>typings</code> directory.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;angularjs/angular.d.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;jquery/jquery.d.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p>See below screenshots of files or directories:</p><img src="/assets/images/legacy/tsd-file-tree.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/tsd-file-tree.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="300"><p>Go to <a href="https://github.com/DefinitelyTyped/tsd">https://github.com/DefinitelyTyped/tsd</a> to see the tsd command details.</p><p>And TSD has supports many javascript libraries, you can search them which you want in <a href="http://definitelytyped.org/tsd/">definitelytyped repositorty</a>.</p><p>Currently, I found this is only work on <a href="https://code.visualstudio.com/">Visual Studio Code</a>, The <code>VSCode</code> is cross platform web develop tools, include Linux, Windows and Mac OS.</p><p>To make the VSCode intellisense for javascript. you need to add tsd.d.ts file reference codes to your javascript file, like below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;../../typings/tsd.d.ts&quot;/&gt;</span></span><br></pre></td></tr></table></figure><p>Okay, lets test the <code>underscore</code> javascript library, first install definitely typed file with TSD, and then put the reference code to the js file which is you are working.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 30/07/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;../../typings/tsd.d.ts&quot;/&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So when you invoke the undercore functions, the IDE will intellisense the method.</p><p><img src="/assets/images/legacy/tsd-intellisense.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/tsd-intellisense.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="intellisense"></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Tool </tag>
            
            <tag> TypeScript </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Implicit submission of form when pressing enter key</title>
      <link href="/2015/06/30/implicit-submission-of-form-when-pressing-enter-key/"/>
      <url>/2015/06/30/implicit-submission-of-form-when-pressing-enter-key/</url>
      
        <content type="html"><![CDATA[<p>As we know, if we want to submit data in the form, we just need to create a <em>input</em> or <em>button</em> element in the form and give them the <em>submit</em> value to the type attribute. Or using javascript to call <code>form.submit()</code>.</p><p>But there is third way to submit form. That’s the implicit submission of form when pressing the enter key under some situations. The form implicit subbmission supported by all browsers, and html spec strongly recommand do this.</p><span id="more"></span><h4 id="Implicit-submission-situation-1"><a href="#Implicit-submission-situation-1" class="headerlink" title="Implicit submission situation 1"></a>Implicit submission situation 1</h4><p>The form will be submitted automatically when there is only one input element in the form and pressing the enter key in the input element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The form will be submitted and get the data from <em>abc.txt</em> file when we press the enter key in the input element.</p><p>But if the form has multiple input elements, the form can not be submitted automatically. like below codes.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>Age:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Implicit-submission-situation-2"><a href="#Implicit-submission-situation-2" class="headerlink" title="Implicit submission situation 2"></a>Implicit submission situation 2</h4><p>For multiple input elements in the form situation, the form can not be submitted automatically. So how to make it implicit submission. This is second situation we are introducing.</p><p>If the form has <em>submit</em> type element(input, button), the form will be submitted when pressing the enter key in the input element regardless of how many input elements in this form.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>Age:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>If you need to run some JavaScript before the form is submitted (validation, data manipulation, etc), do it in a <code>submit</code> event handler on the form, not a <code>click</code> handler on a button.</p><h4 id="How-to-suppress-it"><a href="#How-to-suppress-it" class="headerlink" title="How to suppress it"></a>How to suppress it</h4><p>The solution is very simple, just prevent the event trigger when pressing the enter key. So we can deal with it in the <code>keypress</code> event handler.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/abc.txt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>Age:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> age = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;age&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">age.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>,<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(event.<span class="property">keyCode</span> == <span class="number">13</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;());</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Note, the code of enter key is 13. Using <code>event.preventDefault()</code> to stop the form submission when the keycode is 13. And for above codes, we only suppress the age input element, so when pressing enter key in the name input element, the form still is submitted.</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - @AspectJ Annotation</title>
      <link href="/2015/06/16/spring-aop-at-aspectj-annotation/"/>
      <url>/2015/06/16/spring-aop-at-aspectj-annotation/</url>
      
        <content type="html"><![CDATA[<p>In this article, we introduce how to use <code>AOP</code> with the <code>@AspectJ</code> Annotation. If we want to use this Annotation. we should include below code in the XML schema-based configuration file.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>And also you need to add these libraries to your project, <em>aspectjrt.jar</em>, <em>aspectjweaver.jar</em>, <em>aspectj.jar</em> and <em>aopalliance.jar</em>.</p><span id="more"></span><h4 id="Declare-Aspect"><a href="#Declare-Aspect" class="headerlink" title="Declare Aspect"></a>Declare Aspect</h4><p>Using <code>@Aspect</code> annotation to the class which you want to appoint it as an <code>Aspect</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogging</span> &#123;</span><br><span class="line"><span class="comment">// some codes in here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Declare-Pointcut"><a href="#Declare-Pointcut" class="headerlink" title="Declare Pointcut"></a>Declare Pointcut</h4><p>Declaring pointcut in your aspect module with <code>@Pointcut</code> annotation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogging</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveDataPointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above codes, the pointcut is only work for <em>saveData</em> method of <em>MyData</em> class in the <em>spring.test.aop</em> package. To see the regular expression, go to <a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html#aop-pointcuts-examples">here</a></p><h4 id="Delcare-Advice"><a href="#Delcare-Advice" class="headerlink" title="Delcare Advice"></a>Delcare Advice</h4><p>We can declare more types of advice using specific annotation in the aspect module, like <code>@Before</code>, <code>@After</code>, <code>@AfterReturning</code>, <code>@AfterThrowing</code>, <code>@Around</code>. Let’s see the codes directly.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogging</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveDataPointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;saveDataPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSaveData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The Data is going to be saved&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;saveDataPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSaveData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The Data has been saved&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;execution(* spring.test.aop.MyData.getData())&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeGetData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Ready to get the data&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;execution(* spring.test.aop.*.getData())&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterGetData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The data has been got&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(pointcut = &quot;execution(* spring.test.aop.MyData.getData())&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">(Object returnValue)</span> &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The return value is: %s &quot;</span>,</span><br><span class="line">returnValue.toString()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = &quot;execution(* spring.test.aop.*.concatData(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">throwingAdvice</span><span class="params">(NullPointerException ex)</span> &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;Throw exception is: %s&quot;</span>,</span><br><span class="line">ex.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around(&quot;saveDataPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Saving Data....&quot;</span>);</span><br><span class="line"></span><br><span class="line">point.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Saved Data!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can specify the pointcut name or pointcut expression to advice. whatever you want. One important thing is you must let the advice know which pointcut works for.</p><h4 id="Simple-Instance"><a href="#Simple-Instance" class="headerlink" title="Simple Instance"></a>Simple Instance</h4><figure class="highlight java"><figcaption><span>MyData.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyData</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Saving the data: &quot;</span> + data);</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Get the data: &quot;</span> + <span class="built_in">this</span>.data);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">concatData</span><span class="params">(String data)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.data.concat(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>MyLogging.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogging</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* spring.test.aop.MyData.saveData(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveDataPointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;saveDataPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSaveData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The Data is going to be saved&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;saveDataPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSaveData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The Data has been saved&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;execution(* spring.test.aop.MyData.getData())&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeGetData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Ready to get the data&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;execution(* spring.test.aop.*.getData())&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterGetData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The data has been got&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(pointcut = &quot;execution(* spring.test.aop.MyData.getData())&quot;, returning = &quot;returnValue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">(Object returnValue)</span> &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The return value is: %s &quot;</span>,</span><br><span class="line">returnValue.toString()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = &quot;execution(* spring.test.aop.*.concatData(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">throwingAdvice</span><span class="params">(NullPointerException ex)</span> &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;Throw exception is: %s&quot;</span>,</span><br><span class="line">ex.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around(&quot;saveDataPointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Saving Data....&quot;</span>);</span><br><span class="line"></span><br><span class="line">point.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Saved Data!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogging&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myData&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">context = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">MyData</span> <span class="variable">myData</span> <span class="operator">=</span> (MyData) context.getBean(<span class="string">&quot;myData&quot;</span>);</span><br><span class="line"></span><br><span class="line">myData.saveData(<span class="string">&quot;35&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">myData.getData();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">myData.concatData(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Okay, run above simple instance. the output is below:</p><pre><code>Saving Data....The Data is going to be savedSaving the data: 35Saved Data!The Data has been saved-----------------Ready to get the dataGet the data: 35The data has been gotThe return value is: 35 -----------------Throw exception is: nullException in thread &quot;main&quot; java.lang.NullPointerException...</code></pre>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - XML Schema</title>
      <link href="/2015/06/14/spring-aop-xml-schema/"/>
      <url>/2015/06/14/spring-aop-xml-schema/</url>
      
        <content type="html"><![CDATA[<p>Previously, we created AOP with Spring framework via implementing interface of spring AOP. And now we can use XML Schema to achieve it. We need to add below <strong>AspectJ</strong> libraries to our project. So downloading and adding them to the <em>CLASSPATH</em> of application,  and also we can use the maven to build our application.    </p><ul><li><em>aspectjrt.jar</em>   </li><li><em>aspectjweaver.jar</em>   </li><li><em>aopalliance.jar</em>   <span id="more"></span>Let’s see our pom.xml<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>Spring-AOP-XML-Schema<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring-AOP-XML-Schema<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>Okay, so we start to config the AOP with xml schema. </p><ol><li>Declaring Aspect:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logging&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogging&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogging&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Create our service bean called <em>myLogging</em>. this service should be injected before or after in the logic method. And use <code>&lt;aop:aspect&gt;</code> to reference it.</p><ol start="2"><li>Declaring Pointcut:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logging&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogging&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;saveDataPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;getDataPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogging&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myData&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">Create logic class bean and pointcut with `<span class="tag">&lt;<span class="name">aop:pointcut</span>&gt;</span>` , define the expression matcher to match the methods which will be executed with AOP. To see the expression of pointcut, go to [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop.html).</span><br><span class="line"></span><br><span class="line">3. Declaring Advice:</span><br><span class="line"></span><br><span class="line">``` xml</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logging&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogging&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;saveDataPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;getDataPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeSaveData&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterSaveData&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeGetData&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* spring.test.aop.MyData.getData())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterGetData&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* spring.test.aop.*.get*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningAdvice&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pointcut-ref</span>=<span class="string">&quot;getDataPointcut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;returnValue&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;throwingAdvice&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pointcut</span>=<span class="string">&quot;execution(* spring.test.aop.MyData.concatData(String))&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogging&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myData&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Use <code>&lt;aop:before&gt;</code>, <code>&lt;aop:after&gt;</code>, <code>&lt;aop:after-returning&gt;</code> and <code>&lt;aop:after-throwing&gt;</code> to create each advices. Reference to pointcut bean and appoint which method of service can be injected. Note, for <em>after-returning</em> and <em>after-throwing</em>, we should add attributes <em>returning</em> and <em>throwing</em> to access their variables.   </p><p>The full configration file is: </p><figure class="highlight xml"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logging&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogging&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;saveDataPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* spring.test.aop.*.saveData(..))&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;getDataPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* spring.test.aop.*.getData())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeSaveData&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterSaveData&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;saveDataPointcut&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeGetData&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* spring.test.aop.MyData.getData())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterGetData&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* spring.test.aop.*.get*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningAdvice&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pointcut-ref</span>=<span class="string">&quot;getDataPointcut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;returnValue&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;throwingAdvice&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">pointcut</span>=<span class="string">&quot;execution(* spring.test.aop.MyData.concatData(String))&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogging&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogging&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myData&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyData&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>From now, the AOP configration completed. Let’s see our Logging service and Logic class.</p><figure class="highlight java"><figcaption><span>MyLogging.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogging</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSaveData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The Data is going to be saved&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSaveData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The Data has been saved&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeGetData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Ready to get the data&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterGetData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The data has been got&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">(Object returnValue)</span> &#123;</span><br><span class="line">System.out.println(String.format(</span><br><span class="line"><span class="string">&quot;The return value is: %s &quot;</span>, returnValue.toString()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">throwingAdvice</span><span class="params">(NullPointerException ex)</span> &#123;</span><br><span class="line">System.out.println(String.format(</span><br><span class="line"><span class="string">&quot;Throw exception is: %s&quot;</span>, ex.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our Logging service, the <em>afterReturningAdvice</em> and <em>throwingAdvice</em> methods should take <em>returnValue</em> which is Object type and Exception type <em>ex</em> paramters.  </p><figure class="highlight java"><figcaption><span>MyData.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyData</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Saving the data: &quot;</span> + data);</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Get the data: &quot;</span> + <span class="built_in">this</span>.data);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">concatData</span><span class="params">(String data)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.data.concat(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We use the different pointcut to decide which service method can be injected which logic method.   </p><p>Finally, let’s get our main class:</p><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">context = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">MyData</span> <span class="variable">myData</span> <span class="operator">=</span> (MyData) context.getBean(<span class="string">&quot;myData&quot;</span>);</span><br><span class="line"></span><br><span class="line">myData.saveData(<span class="string">&quot;This is my data&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">myData.getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See the output of application:</p><pre><code>he Data is going to be savedSaving the data: This is my dataThe Data has been saved-----------------Ready to get the dataGet the data: This is my dataThe return value is: This is my data The data has been got-----------------Throw exception is: nullException in thread &quot;main&quot; java.lang.NullPointerExceptionat java.lang.String.concat(String.java:1970)at spring.test.aop.MyData.concatData(MyData.java:17)at spring.test.aop.MyData$$FastClassBySpringCGLIB$$731fbdfd.invoke(&lt;generated&gt;)at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)at org.springframework.aop.aspectj.AspectJAfterThrowingAdvice.invoke(AspectJAfterThrowingAdvice.java:58)at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)at spring.test.aop.MyData$$EnhancerBySpringCGLIB$$5a76fbda.concatData(&lt;generated&gt;)at spring.test.aop.App.main(App.java:21)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Dynamic Pointcut</title>
      <link href="/2015/06/12/spring-aop-dynamic-pointcut/"/>
      <url>/2015/06/12/spring-aop-dynamic-pointcut/</url>
      
        <content type="html"><![CDATA[<p>If we want to intercept methods with dynamic pointcut, we need to override <em>matches</em> and <em>getClassFilter</em> methods of <strong>DynamicMethodMatcher</strong> abstract class. The dynamic pointcut can verify the arguments of the method at runtime. This is a difference with static pointcut.</p><span id="more"></span><figure class="highlight java"><figcaption><span>MyDynamicPointcut.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.ClassFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DynamicMethodMatcherPointcut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDynamicPointcut</span> <span class="keyword">extends</span> <span class="title class_">DynamicMethodMatcherPointcut</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass, Object[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Dynamic check for &quot;</span> + method.getName());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (args.length &gt; <span class="number">0</span> &amp;&amp; (<span class="type">int</span>) args[<span class="number">0</span>] &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ClassFilter <span class="title function_">getClassFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClassFilter</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> clazz.equals(MyLogicClass.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In above dynamic pointcut class, we verify the class name must be <em>MyLogicClass</em> and the value of the first argument in method must larger than 10, otherwise the method will not be intercepted.</p><figure class="highlight java"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAroundAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Invoking method &quot;</span></span><br><span class="line">+ invocation.getMethod().getName());</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Invoked Done&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We print some message before and after the invocation of method.</p><figure class="highlight java"><figcaption><span>MyLogicClass</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodOne</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;MethodOne is Running&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">System.out.println(String.format(</span><br><span class="line"><span class="string">&quot;MethodTwo is running with argument %s&quot;</span>, x));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, in our logic class, there are two methods, one without argument, another with int type argument. Both method print message in console.</p><figure class="highlight xml"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">beans</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAroundAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyAroundAdvice&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogicClass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogicClass&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDynamicPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyDynamicPointcut&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;advisor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDynamicPointcut&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myAroundAdvice&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>advisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Create our <em>MyDynamicPointcut</em> bean and <em>MyAroundAdvice</em> bean and put them into <strong>DefaultPointcutAdvisor</strong> bean. Finally put the advisor and target class to the <strong>ProxyFactoryBean</strong>.</p><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">context = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">MyLogicClass</span> <span class="variable">proxy</span> <span class="operator">=</span> (MyLogicClass) context.getBean(<span class="string">&quot;proxyFactoryBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">proxy.methodOne();</span><br><span class="line">System.out.println(<span class="string">&quot;\n--------------------\n&quot;</span>);</span><br><span class="line">proxy.methodTwo(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;\n--------------------\n&quot;</span>);</span><br><span class="line">proxy.methodTwo(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We call the <em>methodTwo</em> twice with different arguments. Let’s see the output.</p><pre><code>Dynamic check for methodOneMethodOne is Running--------------------Dynamic check for methodTwoMethodTwo is running with argument 1--------------------Dynamic check for methodTwo&gt;&gt;&gt;&gt;&gt;&gt; Invoking method methodTwoMethodTwo is running with argument 11&gt;&gt;&gt;&gt;&gt;&gt; Invoked Done</code></pre><p>You see, only <em>methodTwo</em> with argument 11 (larger than 10) is intercepted.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Static Pointcut</title>
      <link href="/2015/06/11/spring-aop-static-pointcut/"/>
      <url>/2015/06/11/spring-aop-static-pointcut/</url>
      
        <content type="html"><![CDATA[<p>Let’s first to see the three very technical terms as below.</p><ul><li>Adivce - Indicate the action to take either before or after the method execution.</li><li>Pointcut - Indicate which method should be intercept, by method name or regular expression pattern.</li><li>Advisor - Group ‘Advice’ and ‘Pointcut’ into a single unit, and pass it to a proxy factory object<span id="more"></span></li></ul><h3 id="No-pointcut-example"><a href="#No-pointcut-example" class="headerlink" title="No pointcut example"></a>No pointcut example</h3><figure class="highlight java"><figcaption><span>MyLogicClass</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicMethodOne</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;This is from logicMethodOne&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicMethodTwo</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;This is from logicMethodTwo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLogic</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;This is from testLogic&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAroundAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Before method execuation&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;After method execuation&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">applicationContext = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">MyLogicClass</span> <span class="variable">logicClass</span> <span class="operator">=</span> (MyLogicClass)applicationContext.getBean(<span class="string">&quot;proxyFactoryBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n--------------------\n&quot;</span>);</span><br><span class="line">logicClass.logicMethodOne();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n--------------------\n&quot;</span>);</span><br><span class="line">logicClass.logicMethodTwo();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\n--------------------\n&quot;</span>);</span><br><span class="line">logicClass.testLogic();</span><br><span class="line">System.out.println(<span class="string">&quot;\n--------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">beans</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAroundAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogicClass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>myAroundAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">Before method execuation</span><br><span class="line">This is from logicMethodOne</span><br><span class="line">After method execuation</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">Before method execuation</span><br><span class="line">This is from logicMethodTwo</span><br><span class="line">After method execuation</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">Before method execuation</span><br><span class="line">This is from testLogic</span><br><span class="line">After method execuation</span><br><span class="line"></span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure><p>In above example, all logic methods of the class has been intercepted due to the application doesn’t use the pointcut to specific.</p><h3 id="Name-match-example"><a href="#Name-match-example" class="headerlink" title="Name match example"></a>Name match example</h3><p>And now, we just want to intercept the method <em>testLogic</em>, so we need to create <strong>NameMatchMethodPointcut</strong> bean in spring config xml. and put the method name you want to intercept to the <strong>mappedName</strong> property value.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;nameMatchPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappedName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;testLogic&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And also you can mapped multiple methods with <strong>mappedNames</strong>, like below.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;nameMatchPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappedNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>logicMethodOne<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>logicMethodTwo<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then create <strong>DefaultPointcutAdvisor</strong> bean to group and associate the pointcut and advice.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myPointcutAdvisor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;nameMatchPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Replace the <strong>interceptorNames</strong> of <strong>ProxyFactoryBean</strong> with the new Advisor.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>myPointcutAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It’s done, let’s see the full spring config file and output.</p><figure class="highlight xml"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">beans</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAroundAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogicClass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;nameMatchPointcut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.NameMatchMethodPointcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappedName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;testLogic&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name=&quot;mappedNames&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;list&gt;</span></span><br><span class="line"><span class="comment">&lt;value&gt;logicMethodOne&lt;/value&gt;</span></span><br><span class="line"><span class="comment">&lt;value&gt;logicMethodTwo&lt;/value&gt;</span></span><br><span class="line"><span class="comment">&lt;/list&gt;</span></span><br><span class="line"><span class="comment">&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myPointcutAdvisor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;nameMatchPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>myPointcutAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">This is from logicMethodOne</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">This is from logicMethodTwo</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">Before method execuation</span><br><span class="line">This is from testLogic</span><br><span class="line">After method execuation</span><br><span class="line"></span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure><h3 id="Regular-expression-example"><a href="#Regular-expression-example" class="headerlink" title="Regular expression example"></a>Regular expression example</h3><p>Also we can use regular expression to match methods which should be intercepted. Create <strong>RegexpMethodPointcutAdvisor</strong> bean and set the <em>pattern</em> property value with regular expression and combine with advice.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;regexPointcutAdvisor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.*Method.*&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And you can specific multiple patterns with <em>patterns</em> property.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;regexPointcutAdvisor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.support.RegexpMethodPointcutAdvisor&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patterns&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>.*Method.*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myAroundAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Finally pass the advisor to the <strong>ProxyFactoryBean</strong>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>regexPointcutAdvisor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><figcaption><span>output</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">Before method execuation</span><br><span class="line">This is from logicMethodOne</span><br><span class="line">After method execuation</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">Before method execuation</span><br><span class="line">This is from logicMethodTwo</span><br><span class="line">After method execuation</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">This is from testLogic</span><br><span class="line"></span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure><p>In practice, you can use it to manage DAO layer, where you can declare “.*DAO.*” to intercept all your DAO classes to support transaction.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Pointcut</title>
      <link href="/2015/06/10/spring-aop-pointcut/"/>
      <url>/2015/06/10/spring-aop-pointcut/</url>
      
        <content type="html"><![CDATA[<p>What is <code>Pointcut</code> of Spring AOP? let’s describe it. A <code>Pointcut</code> defines what <code>Advice</code>s are required at what <code>Join Point</code>s. In fact all business logic methods of the class are not required all services, that means each business logic method might require different service even some methods don’t require. So Pointcut can informs IOC container that what business methods of a class needs what type of services.    </p><span id="more"></span><p>There are two types of AOP:</p><ul><li>StaticMethodMatcherPointcut</li><li>DynamicMethodMatcherPointcut</li></ul><p>Pointcut verifys whether a particular method of particular class is eligible for getting the advice or not. Spring AOP has two static pointcut class.</p><ul><li>NameMatchMethodPointcut</li><li>RegexpMethodPointcutAdvisor</li></ul><p>In above two static pointcut class, they given by spring AOP framework. And they only verify whether the method name is matching with given condition or not, but they doesn’t check whether the class names are matching or not. If you want to verify the class name, you can implement <code>StaticMethodMatcherPointcut</code> abstract class and override the <code>getClassFilter()</code>, <code>matches()</code> methods.</p><p>The dynamic pointcut is almost same with static pointcut, the only difference is that the dynamic pointcut can verify the arguments of the method at runtime, but static pointcut couldn’t.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Join Point</title>
      <link href="/2015/06/09/spring-aop-joint-point/"/>
      <url>/2015/06/09/spring-aop-joint-point/</url>
      
        <content type="html"><![CDATA[<p>In Spring AOP, while we create business logic of the method we usually need to inject the services at different places or points. So we call these places or points as <code>JoinPoint</code>.   </p><p>At a join point place services will be injected at run time. And while executing business logic of method, the services can be injected in following 3 join points.</p><ul><li>Before business logic of method starts</li><li>After business logic of method complete</li><li>If business logic of method throws exception at run time.</li></ul><p>In a <code>join point</code>, many <code>Aspect</code>s(just name, not implementation) can be injected. Actually the <code>Advice</code>(the implementation of Aspect) is injected.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Throws Advice</title>
      <link href="/2015/06/08/spring-aop-throws-advice/"/>
      <url>/2015/06/08/spring-aop-throws-advice/</url>
      
        <content type="html"><![CDATA[<p>In this type of Advice. This service executed when the logic method throws exceptions. To create Throws Advice, we should implement the interface called <code>ThrowsAdvice</code>.    </p><p><code>ThrowsAdvice</code> is provided by <em>org.springframework.aop.*</em> package. But it has not any method we need to override.  </p><span id="more"></span> <p>While creating a ThrowsAdvice class in spring AOP, we should implement our services in a method called <code>afterThrowing()</code> with 1 or 4 parameter(s). In fact, this method not given in <code>ThrowsAdvice</code> interface, but we should implement our services in afterThrowing() method only because when ever an Exception is occurred in the business logic then the IOC container internally calls afterThrowing() method to apply the services.   </p><p>Let’s see the <code>afterThrowing()</code> method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThrowsAdvice</span> <span class="keyword">implements</span> <span class="title class_">ThrowsAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// just exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// specific null pointer exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(NullPointerException e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// with 4 parameters</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Method method, Object[] args, Object target, Exception e)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we write multiple afterThrowing methods in a class, then the <code>IOC</code> container will give the preference as below:</p><p>Specific exception &gt; 4 parameters &gt; just exception.   </p><p>Let’s take a practice.</p><figure class="highlight java"><figcaption><span>MyLogicInterface.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>MyLogicClass.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span> <span class="keyword">implements</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%s divide %s is %s\n&quot;</span>, a, b, a / b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our logic class. We print the message about one param divided by another one.</p><figure class="highlight java"><figcaption><span>MyThrowsAdvice.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.ThrowsAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThrowsAdvice</span> <span class="keyword">implements</span> <span class="title class_">ThrowsAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// just exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Exception: &quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// specific exception</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(ArithmeticException e)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Specific ArithmeticException: &quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// with 4 parameters</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Method method, Object[] args, Object target, Exception e)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;With 4 parameters exception: &quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There have three implementations of afterThrowing method. And also we can add our handle exception logic in them.   </p><figure class="highlight xml"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">beans</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myThrowsAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyThrowsAdvice&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogicClass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyInterfaces&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>myThrowsAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">applicationContext = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"><span class="type">MyLogicInterface</span> <span class="variable">myLogicInterface</span> <span class="operator">=</span> (MyLogicInterface)applicationContext.getBean(<span class="string">&quot;proxyFactoryBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">myLogicInterface.divide(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">myLogicInterface.divide(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our client, we can see the divide method is called twice. The First one will not throw exception, but second will throw ArithmeticException.    </p><p>Let’s see the result of execution:</p><pre><code>10 divide 5 is 2Exception in thread &quot;main&quot; Specific ArithmeticException: / by zero    </code></pre><p>We can see the specific ArithmeticException is executed. Okay, let us remove the specific exception method and run it again.</p><pre><code>10 divide 5 is 2With 4 parameters exception: / by zero</code></pre><p>The afterThrowing method with 4 parameters has been executed. Keep remove this method and run it.</p><pre><code>10 divide 5 is 2Exception: / by zero</code></pre><p>So there is only one afterThrowing method is executed when there have multiple implementation.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Around Advice</title>
      <link href="/2015/06/08/spring-aop-around-advice/"/>
      <url>/2015/06/08/spring-aop-around-advice/</url>
      
        <content type="html"><![CDATA[<p>In this blog, let us talk about <code>Around Advice</code>. There are some few points about it.   </p><ul><li><code>Around Advice</code> is combination of <code>Before Advice</code> and <code>After Advice</code>.</li><li>In a single <code>Around Advice</code> we can implement both <em>before</em> and <em>after</em> services.</li><li><strong>Note</strong>, <code>Around Advice</code> is not given by <em>spring framework</em>, it is from <em>Open Source</em> implementation called <code>AOP</code> alliance.</li><li><code>Around Advice</code> can be used by any framework which supports <code>AOP</code>.    </li><li><code>Around Advice</code> can access the return value of business method and it can modify the value and it can return a different value back to the client, as return type is Object, but in the <code>After Advice</code> its not possible right, as its return type is void.<span id="more"></span></li></ul><p>In order to create <code>Around Advice</code>, we should implement an interface called <code>MethodInterceptor</code> and override the method called <code>invoke</code> which has a prarameter <code>MethodInvocation</code> type. We can use this parameter to invoke our business logic method like <code>methodInvoation.proceed()</code>. And we can add our before services before this code execution and put after services after this code.   </p><p>Let’s see an instance.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAroundAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">// Adding before service in here.</span></span><br><span class="line"></span><br><span class="line">invocation.proceed();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adding after service in here.</span></span><br><span class="line"><span class="comment">// we can change the return value we want via below return codes.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above codes, we can see that we put the before services before the <code>proceed()</code> method and put the after services after it. and we can change the return value of the logic method.   </p><p>So now let us to see a full expample.</p><figure class="highlight java"><figcaption><span>MyLogicInterface.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>MyLogicClass.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span> <span class="keyword">implements</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;The internal result of %s + %s is: %s&quot;</span>, a, b, a + b));</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In our logic class, we print the result value before the return of method.</p><figure class="highlight java"><figcaption><span>MyAroundAdvice.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAroundAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">// Adding before service</span></span><br><span class="line">methodDescription(invocation);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">currentResult</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Adding after service.</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">changedResult</span> <span class="operator">=</span> changedReturnValue(invocation);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> changedResult == <span class="literal">null</span> ? currentResult : changedResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">methodDescription</span><span class="params">(MethodInvocation invocation)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> invocation.getMethod().getName();</span><br><span class="line">Object[] args = invocation.getArguments();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> String.format(<span class="string">&quot;Before Services : %s(%s, %s)&quot;</span>,</span><br><span class="line">methodName, args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">System.out.println(description);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">changedReturnValue</span><span class="params">(MethodInvocation invocation)</span> &#123;</span><br><span class="line">Object[] args = invocation.getArguments();</span><br><span class="line"><span class="type">int</span> <span class="variable">secondParam</span> <span class="operator">=</span> (<span class="type">int</span>) args[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// changed the return value to 0 when the second parameter is less than 0.</span></span><br><span class="line"><span class="keyword">if</span> (secondParam &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this our around advice. we print the method description in our before service and changed the return value to 0 when the second parameter is less than 0 in after service.   </p><figure class="highlight xml"><figcaption><span>springConfig.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">beans</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAroundAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyAroundAdvice&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogicClass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyInterfaces&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>myAroundAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The spring config xml is same with before except the interceptorNames.</p><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">applicationContext = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"><span class="type">MyLogicInterface</span> <span class="variable">logicInterface</span> <span class="operator">=</span> (MyLogicInterface)applicationContext.getBean(<span class="string">&quot;proxyFactoryBean&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> logicInterface.add(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;After Advice - The result is: %s \n&quot;</span>, result1));</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> logicInterface.add(<span class="number">1</span>, -<span class="number">10</span>);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;After Advice - The result is: %s&quot;</span>, result2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You will notice that we pass -10 to second parameter in second times method called. Let’s see the result:    </p><pre><code>Before Services : add(1, 10)The internal result of 1 + 10 is: 11After Advice - The result is: 11 Before Services : add(1, -10)The internal result of 1 + -10 is: -9After Advice - The result is: 0</code></pre><p>You see, the internal result is -9, but after service, the result is changed to 0. So the return value is changed by our <code>Around Advice</code>.</p><p><em><strong>Note again:</strong> The <code>Around Advice</code> can change the return value of business logic method, but <code>After Advice</code> cannot.</em></p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - After Advice</title>
      <link href="/2015/06/06/spring-aop-after-advice/"/>
      <url>/2015/06/06/spring-aop-after-advice/</url>
      
        <content type="html"><![CDATA[<p><code>Advice</code> is the implementation of the <code>cross-cutting</code> functionality. An <code>Adivce</code> provides the code for implementation of the service.</p><p>There are four types of Advice:    </p><ul><li>Before Advice</li><li><strong>After Advice</strong></li><li>Around Advice</li><li>Throws Advice<span id="more"></span><code>After Advice</code> is same as <code>Before Advice</code>. But in order to create our after advice in spring, our class should implement an interface called <code>AfterReturningAdvice</code>, this interface is given in <em>org.springframework.aop.*</em> package. And we need to override a method given by this interface called <code>afterReturning()</code>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAfterAdvice</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method,</span></span><br><span class="line"><span class="params">Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <em>returnValuef</em> is the return value of the logic method, we can use it to access the return of the logic function. The <em>method</em> parameter is the logic method, we can use <em>getName()</em> to access the name of method. And the <em>args</em> parameter is arguments of logic method.   </p><p>Let’s see full example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this interface, we changed the method’s signature, we have return value for both two method.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span> <span class="keyword">implements</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In <em>MyLogicClass</em>, we implemented the two methods <em>add</em> and <em>subtract</em>, and return the value.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAfterAdvice</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method,</span></span><br><span class="line"><span class="params">Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> String.format(</span><br><span class="line"><span class="string">&quot;The result from method %s(%s, %s) is: %s&quot;</span>, method.getName(),</span><br><span class="line">args[<span class="number">0</span>], args[<span class="number">1</span>], returnValue);</span><br><span class="line"></span><br><span class="line">System.out.println(message);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We print all the messages of the logic method in our <code>After Advice</code>, include method name, the return value of method, the arguments etc.   </p><p>Okay, let’s see our spring config file.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE beans PUBLIC <span class="string">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span><br><span class="line"><span class="string">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;myAfterAdvice&quot;</span> class=<span class="string">&quot;spring.test.aop.MyAfterAdvice&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;myLogicClass&quot;</span> class=<span class="string">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">&quot;proxyFactoryBean&quot;</span> class=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;proxyInterfaces&quot;</span> value=<span class="string">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;myAfterAdvice&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;target&quot;</span> ref=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>It is same with last spring config file of <code>Before After</code>. We just use <em>MyAfterAdvice</em> to instead of <em>MyBeforeAdvice</em>.   </p><p>To make this application run, we should read spring config file.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">applicationContext = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"><span class="type">MyLogicInterface</span> <span class="variable">myLogicInterface</span> <span class="operator">=</span> (MyLogicInterface)applicationContext.getBean(<span class="string">&quot;proxyFactoryBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">myLogicInterface.add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">myLogicInterface.subtract(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The result of the application executioin.</p><pre><code>The result from method add(10, 20) is: 30The result from method subtract(10, 5) is: 5</code></pre>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Before Advice</title>
      <link href="/2015/06/05/spring-aop-before-advice/"/>
      <url>/2015/06/05/spring-aop-before-advice/</url>
      
        <content type="html"><![CDATA[<p>As we know the <code>Aspect</code> is just the name of the <code>cross-cutting</code> functionality, not the implementation. So what’s the implementation of the <code>cross-cutting</code> functionality? It’s called <code>Advice</code>. An <code>Advice</code> provides the code for implementation of the service. It is like <em>Logging</em> service, <em>Logging</em> is a <code>Aspect</code> and <code>Advice</code> denotes the implementation of <em>Log4j</em>.   </p><span id="more"></span><p>There are four types of <code>Adivce</code>:</p><ul><li><strong>Before Advice</strong></li><li>After Advice</li><li>Around Advice</li><li>Throws Advice</li></ul><p>In this article, we only explain <code>Before Advice</code>. The other advices we will talk about it in later blogs.   </p><p>The <code>Before Advice</code> is the implementation of the service. It will be applied before the business logic of method is going to execute. So this means this advice will execute before the business logic. we can use it to do something like authentication before the business logic execution.    </p><p>It will be applied in the runtime of application, not the compilation of the code. And also it will generate a new <em>proxy</em> class which is combined by this advice and business logic class in the runtime automatically.   </p><p>When we create a <code>Before Advice</code>, we should implement the <code>MethodBeforeAdvice</code> interface, this interface is given by <em>org.springframework.aop.*</em> package. And then we need to override the <code>before</code> method of it.    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span></span><br><span class="line"><span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are 3 parameters in the <em>before</em> method.   </p><p>The first parameter <em><code>Method</code> method</em> is used to access the method name of the business logic via <code>getName()</code>.    </p><p>The second parameter <em>Object[] args</em> is Object array, it is used to access the arguments of the logic method.    </p><p>The last parameter <em>Object target</em> is an object to whom this service will be going to apply, usually this will taken care by <em>container</em>, actually we no need to care it.     </p><p>Okay, let’s see a full example.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In the pom.xml file, we add above dependencies to our project. (this project use maven to manage)   </p><p>Okay, let us create our logic class, firstly we need to create interface for it.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We created two method in this interface, this interface is very important for our <code>AOP</code> project.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span> <span class="keyword">implements</span> <span class="title class_">MyLogicInterface</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s + %s = %s&quot;</span>, a, b, a + b);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s - %s = %s&quot;</span>, a, b, a - b);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our class implements the interface, just print the result of the add or subtract.</p><p>For now, we have our logic class. but now we want to do something before the method logic is going to execute. So the <code>Before Advice</code> is comming.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;This will be executed before the %s method&quot;</span>, method.getName()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We print some messages in our <code>Before Advice</code>, this will be printed before the logic method result.</p><p>Finally, we need to make the logic class and our <code>Before Advice</code> are combined together. so we need to config them in the xml file.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">beans</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeforeAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyBeforeAdvice&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myLogicClass&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.test.aop.MyLogicClass&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;proxyFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyInterfaces&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring.test.aop.MyLogicInterface&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>myBeforeAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myLogicClass&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In <code>AOP</code> always we need to create a spring bean in the form of interface and implementation class only, because the IOC container internally creates proxy class by implementing that interface with the help of <code>ProxyFactoryBean</code>.<br>To run this application, we need a class which with <em>main</em> method. See below codes.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.test.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">applicationContext = <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springConfig.xml&quot;</span>);</span><br><span class="line"><span class="type">MyLogicInterface</span> <span class="variable">myLogicInterface</span> <span class="operator">=</span> (MyLogicInterface)applicationContext.getBean(<span class="string">&quot;proxyFactoryBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">myLogicInterface.add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">myLogicInterface.subtract(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In the client application, we are passing id of <code>ProxyFactoryBean</code> (proxyFactoryBean) to get the object, because we need proxyed object to invoke our logic method.</p><p>The result of the execution is below:   </p><pre><code>This will be executed before the add method10 + 20 = 30This will be executed before the subtract method10 - 5 = 5</code></pre><p>So, it is simple to use it. and we separated the logic and the services completely, only need to config the xml file when the services changed.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - Aspect</title>
      <link href="/2015/06/05/spring-aop-aspect/"/>
      <url>/2015/06/05/spring-aop-aspect/</url>
      
        <content type="html"><![CDATA[<p>An <code>Aspect</code> represent the <strong>name</strong> of a <code>cross-cutting</code> functionality, it’s only name not implementation.</p><p>Let us see the example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//This is my logic for one.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Call Authentication Service </span></span><br><span class="line"><span class="comment">//Call Logging Service</span></span><br><span class="line"><span class="comment">//Call Transcation Service</span></span><br><span class="line"><span class="comment">//Call Email Service</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicTwo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//This is my logic for two.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Call Authentication Service </span></span><br><span class="line"><span class="comment">//Call Logging Service</span></span><br><span class="line"><span class="comment">//Call Transcation Service</span></span><br><span class="line"><span class="comment">//Call Email Service</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>From above codes, we have four <code>cross-cutting</code> functionalities for <em>logicOne</em> and <em>logicTwo</em> method, So this means we have four <code>Aspect</code>s which are <em>Authentication</em>, <em>Logging</em>, <em>Transaction</em>, <em>Email</em>.  </p><p><em>Note: <code>Aspect</code> is only denote the name of the <code>cross-cutting</code> functionality, not the implementation</em></p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP - What is AOP?</title>
      <link href="/2015/06/04/spring-aop-what-is-aop/"/>
      <url>/2015/06/04/spring-aop-what-is-aop/</url>
      
        <content type="html"><![CDATA[<p>What is <code>AOP</code>?, <code>AOP</code> stand for <code>Aspect Oriented Programming</code>. It’s very important module for <code>Spring</code> framework. In the enterprise level application programming we used to add different types of services to our application at runtime automatically, like logging, email, transaction, authentication services. These actions we called <code>cross-cutting</code> functionalities. <code>AOP</code> do this job.    </p><span id="more"></span><p>Let’s see a normal instance:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//There is my logic for one.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Call Authentication Service </span></span><br><span class="line"><span class="comment">//Call Logging Service</span></span><br><span class="line"><span class="comment">//Call Transcation Service</span></span><br><span class="line"><span class="comment">//Call Email Service</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicTwo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//There is my logic for two.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Call Authentication Service </span></span><br><span class="line"><span class="comment">//Call Logging Service</span></span><br><span class="line"><span class="comment">//Call Transcation Service</span></span><br><span class="line"><span class="comment">//Call Email Service</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above codes, we have a class called MyLogicClass, in this class there are two logic methods, and both them call authentication, logging, transaction, email services. We called these service are <code>cross-cutting</code> functionalities. So there are some problems, one is these <code>cross-cutting</code> functionalities increase the class size. Second is we need changed this class and recompile, re-deploy it again when we changed the services.    </p><p>So how to overcome these problems, can we separate the services and our logic client? Yep, we can do this in Spring <code>AOP</code>, adding these <code>cross-cutting</code> functionalities at runtime don’t need to write them in the logic codes. </p><p>So if we use <code>AOP</code>, our logic class will be like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogicClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicOne</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//There is my logic for one.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicTwo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//There is my logic for two.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In above codes, we separate the business logic and the services, we call this process of separation as <code>AOP</code>. So Using <code>AOP</code> business logic and <code>cross-cutting</code> functionalities are implemented separately and executed at runtime as combine automatically.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Cobalt2 theme for iTerm2 and ZSH</title>
      <link href="/2015/06/04/the-cobalt2-theme-for-iterm2-and-zsh/"/>
      <url>/2015/06/04/the-cobalt2-theme-for-iterm2-and-zsh/</url>
      
        <content type="html"><![CDATA[<p>From last blog, maybe you already love the <code>Cobalt2</code> theme, like me. We usually use the terminal to do something we need. So can changed the theme for our terminal?<br>The answer is yes, we can. Let me show you screenshots firstly.<br><img src="/assets/images/legacy/iterm-cobalt2.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/iterm-cobalt2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="item-cobalt2"></p><span id="more"></span><p>But for Mac OS X, we should use <code>iTerm2</code> instead of system default terminal. The <code>iTerm2</code> is power than the system default. It is a terminal  emulator for Mac OS X that does amazing things. And it has many feature you never knew you always wanted. just like me. So don’t hesitate to go to offical website <a href="https://www.iterm2.com/f">iTerm2</a> and download it.    </p><p>For <code>ZSH</code>, it’s open source and very cool thing to decorate your terminal. If you don’t have yet. I strongly recommand you install it for your terminal. Go to <a href="http://ohmyz.sh/">Oh My Zsh</a> offical website to see how to install.    </p><p>Okay, after you already prepare these tools, go to <a href="https://github.com/wesbos/Cobalt2-iterm">Cobalt2-item</a> and follow step to install it.   </p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A cool theme for Sublime Text</title>
      <link href="/2015/06/04/a-cool-theme-for-sublime-text/"/>
      <url>/2015/06/04/a-cool-theme-for-sublime-text/</url>
      
        <content type="html"><![CDATA[<p>There is a sublime text theme I want to introduce to you guys. It’s called <code>Cobalt2</code>, it not only colour scheme for editor window, but also it includes all sublime theme(e.g. sidebar, search, tabs, etc…). You can get it from github <a href="https://github.com/wesbos/cobalt2">cobalt2</a>.   </p><span id="more"></span><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><ol><li>Open package control via pressing <code>Command + Shift + P</code> (mac os) or <code>Ctrl + Shift + P</code> (windows) to open the command window, and then type <code>Install Package</code>.</li><li>Search for <code>Cobalt2</code> and hit <code>enter</code> key.</li><li>Once you installed finish, open <code>Preference</code> -&gt; <code>Settings - User</code> and add the below lines:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;color_scheme&quot;: &quot;Packages/Theme - Cobalt2/cobalt2.tmTheme&quot;,</span><br><span class="line">&quot;theme&quot;: &quot;Cobalt2.sublime-theme&quot;,</span><br></pre></td></tr></table></figure><p><code>color_scheme</code> defines how the code looks and <code>theme</code> defines how the sidebar, tabs, search, command palette work.</p><p><em>Note: the sidebar icons only supports  the latest version of sublime text3.</em></p><h4 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h4><p>There have some screenshots of Cobalt2 theme from <a href="https://github.com/wesbos/cobalt2">cobalt2</a>.    </p><p><img src="/assets/images/legacy/sublime-cobalt2-theme.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/sublime-cobalt2-theme.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="cobalt2-theme"></p><p>So, it’s really cool. Hope you like it.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Analyze call function of javascript</title>
      <link href="/2015/05/20/analyze-call-function-of-javascript/"/>
      <url>/2015/05/20/analyze-call-function-of-javascript/</url>
      
        <content type="html"><![CDATA[<p>The <code>call()</code> function is a fantastic method in javascript. It makes some people confusion some times, like me. Here let us to make it clear.    </p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p><code>call([thisObj[,arg1[, arg2[, [,.argN]]]]])</code>   </p><ul><li><strong>thisObj</strong> (optional): it’s object which can be act as currently <code>this</code> object.   </li><li><strong>arg1, arg2, argN</strong> (optional) : the parameters which can be passed to the method.</li></ul><p>The <em>call</em> method can be used to instead of another object to invoke a method. It can change the object context of a function to a new object which <em>thisObj</em> referenced.    </p><span id="more"></span> <p><strong>Note</strong>: <em>The thisObj is a optional parameter, it will reference to Global object if it is not provided. And the <code>call</code> method is only used by <code>Function</code> object.</em>  </p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Let’s use fake code to explain it firstly. see below code:     </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj1.<span class="property">method1</span>.<span class="title function_">call</span>(obj2, arg1, arg2);</span><br></pre></td></tr></table></figure><p>The functionality of <em>call</em> method is that <em>obj2</em> is able to invoke the <em>method1</em> of <em>obj1</em> with <em>arg1</em>, <em>arg2</em> parameters.      </p><p>Let’s see a simple example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = add.<span class="title function_">call</span>(sub, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The value of <em>result</em> variable is 3, not -1. Because the <em>sub</em> function object has been insteaded by <em>add</em> function object. So the <code>add.call(sub, 1, 2)</code> actually is <code>add(1, 2)</code>.  </p><p><strong>Note</strong>: *The <em>function</em> actually is a <em>object</em> in javascript, and the function name is a reference of <code>Fuction</code> object.   </p><p>Okay, so let’s see a little complex example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ClassOne</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;class one&quot;</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">showMessage</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ClassTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;class two&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> classOne = <span class="keyword">new</span> <span class="title class_">ClassOne</span>();</span><br><span class="line"><span class="keyword">var</span> classTwo = <span class="keyword">new</span> <span class="title class_">ClassTwo</span>();</span><br><span class="line">classOne.<span class="property">showMessage</span>.<span class="title function_">call</span>(classTwo);</span><br></pre></td></tr></table></figure><p>This will print the ‘class two’ message in the console window of browser. You can execute above code fragment to check it.<br>In this example, the <em>classTwo</em> object doesn’t have <em>showMesage</em> function, but he want to display his message, so he can invoke <em>classOne</em>‘s with <code>call</code> method.   </p><p>So far, maybe you will think we can use the <code>call</code> function to simulate the <code>Inheritance</code> of <code>OOP</code>. You are right, let’s get the example.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">BaseClass</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;base class&quot;</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">showMessage</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">BaseClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myClass = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">myClass.<span class="title function_">showMessage</span>();</span><br></pre></td></tr></table></figure><p>So the <em>MyClass</em> inherites the <em>BaseClass</em>. The <code>BaseClass.call(this)</code> that means using the object of <em>BaseClass</em> to instead of <em>this</em> object. So the <em>MyClass</em> can access the property and function of <em>BaseClass</em>.   </p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Destroy your website</title>
      <link href="/2015/05/19/destroy-your-website/"/>
      <url>/2015/05/19/destroy-your-website/</url>
      
        <content type="html"><![CDATA[<p>Ha, Confusion? Don’t, it’s true. Let me introduce to you how to destroy the website you want.<br>Click the below button:<br><button type="button" onclick="javascript:var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='/javascripts/libs/asteroids.min.js';void(0);">Destroy this website</button><br>Use the <strong>Arrow</strong> key to move the rocket, and press the <strong>Space</strong> key to fire. And also Press and hold <strong>B</strong> to find targets which can be destroy.  </p><span id="more"></span><p>Visit <a href="http://erkie.github.com/">http://erkie.github.com/</a> and drag the graphic onto your bookmarks bar to use this on whatever webpage you want to destory.</p><p>Actually, it’s very easy to do this with javascript.   </p><ol><li>Download this javascript library from <a href="">here</a>, and put it in your project directory.   </li><li>Adding below code snippet to your element target you want to triggle</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="keyword">var</span> jst = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">jst.<span class="property">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(jst);</span><br><span class="line">jst.<span class="property">src</span>=<span class="string">&#x27;/javascripts/libs/asteroids.min.js&#x27;</span>;<span class="title function_">void</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>Note: you need to change the src of the variable <strong>jst</strong> to your javascript library’s location, like below:   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jst.<span class="property">src</span> = <span class="string">&#x27;YOUR LIBRARY LOCATION&#x27;</span>;</span><br></pre></td></tr></table></figure><p>So, it’s quite simple.</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text - Keyboard Shortcuts For Mac</title>
      <link href="/2015/05/16/sublime-text-keyboard-shortcuts-for-mac/"/>
      <url>/2015/05/16/sublime-text-keyboard-shortcuts-for-mac/</url>
      
        <content type="html"><![CDATA[<h3 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + X</td><td>Cut line</td></tr><tr><td>⌘ + ↩</td><td>Insert line after</td></tr><tr><td>⌘ + ⇧ + ↩</td><td>Insert line before</td></tr><tr><td>⌘ + ⌃ + ↑</td><td>Move line&#x2F;selection up</td></tr><tr><td>⌘ + ⌃ + ↓</td><td>Move line&#x2F;selection down</td></tr><tr><td>⌘ + L</td><td>Select line - Repeat to select next lines</td></tr><tr><td>⌘ + D</td><td>Select word - Repeat to select next occurrence</td></tr><tr><td>⌃ + ⌘ + G</td><td>Select all occurrences of current selection</td></tr><tr><td>⌃ + ⇧ + ↑</td><td>Extra cursor on the line above</td></tr><tr><td>⌃ + ⇧ + ↓</td><td>Extra cursor on the line below</td></tr><tr><td>⌃ + M</td><td>Jump to closing parentheses Repeat to jump to opening parentheses</td></tr><tr><td>⌃ + ⇧ + M</td><td>Select all contents of the current parentheses</td></tr><tr><td>⌃ + A</td><td>Move to beginning of line</td></tr><tr><td>⌃ + E</td><td>Move to end of line</td></tr><tr><td>⌘ + K, ⌘ + K</td><td>Delete from cursor to end of line</td></tr><tr><td>⌘ + K + ⌫</td><td>Delete from cursor to start of line</td></tr><tr><td>⌘ + ]</td><td>Indent current line(s)</td></tr><tr><td>⌘ + [</td><td>Un-indent current line(s)</td></tr><tr><td>⌘ + ⇧ + D</td><td>Duplicate line(s)</td></tr><tr><td>⌘ + J</td><td>Join line below to the end of the current line</td></tr><tr><td>⌘ + &#x2F;</td><td>Comment&#x2F;un-comment current line</td></tr><tr><td>⌘ + ⌥ + &#x2F;</td><td>Block comment current selection</td></tr><tr><td>⌘ + Y</td><td>Redo, or repeat last keyboard shortcut command</td></tr><tr><td>⌘ + ⇧ + V</td><td>Paste and indent correctly</td></tr><tr><td>⌃ + Space</td><td>Select next auto-complete suggestion</td></tr><tr><td>⌃ + U</td><td>Soft undo; jumps to your last change before undoing change when repeated</td></tr><tr><td>⌃ + ⇧ + Up</td><td>Column selection up</td></tr><tr><td>⌃ + ⇧ + Down</td><td>Column selection down</td></tr><tr><td>⌃ + ⇧ + W</td><td>Wrap Selection in html tag</td></tr><tr><td>⌃ + ⇧ + K</td><td>Delete current line of cursor</td></tr></tbody></table><span id="more"></span><hr><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + P or ⌘ + T</td><td>Quick-open files by name</td></tr><tr><td>⌘ + R</td><td>Goto symbol</td></tr><tr><td>⌃ + G</td><td>Goto line in current file</td></tr></tbody></table><hr><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + ⇧ + P</td><td>Command Palette</td></tr><tr><td>⌃ + &#96;</td><td>Python Console</td></tr><tr><td>⌃ + ⌘ + F</td><td>Toggle fullscreen mode</td></tr><tr><td>⌃ + ⇧ + ⌘ + F</td><td>Toggle distraction-free mode</td></tr><tr><td>⌘ + K, ⌘ + B</td><td>Toggle side bar</td></tr><tr><td>⌃ + ⇧ + P</td><td>Show scope in status bar</td></tr></tbody></table><hr><h3 id="Find-Replace"><a href="#Find-Replace" class="headerlink" title="Find&#x2F;Replace"></a>Find&#x2F;Replace</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + F</td><td>Find</td></tr><tr><td>⌘ + ⌥ + F</td><td>Replace</td></tr><tr><td>⌘ + ⇧ + F</td><td>Find in files</td></tr></tbody></table><hr><h3 id="Scrolling"><a href="#Scrolling" class="headerlink" title="Scrolling"></a>Scrolling</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌃ + V</td><td>Scroll down one page</td></tr><tr><td>⌃ + L</td><td>Center current line vertically in page</td></tr><tr><td>⌘ + Down</td><td>Scroll to end of file</td></tr><tr><td>⌘ + Up</td><td>Scroll to start of file</td></tr></tbody></table><hr><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + ⇧ + t</td><td>Open last closed tab</td></tr><tr><td>⌘ + [NUM]</td><td>Jump to tab in current group where num is 1-9</td></tr><tr><td>⌘ + 0</td><td>Jump to 10th tab in current group</td></tr><tr><td>⌘ + ⇧ + [</td><td>Cycle left through tabs</td></tr><tr><td>⌘ + ⇧ + ]</td><td>Cycle right through tabs</td></tr><tr><td>^ + Tab</td><td>Cycle up through recent tabs</td></tr><tr><td>⇧ + ^ + Tab</td><td>Cycle down through recent tabs</td></tr></tbody></table><hr><h3 id="Split-window"><a href="#Split-window" class="headerlink" title="Split window"></a>Split window</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + ⌥ + 1</td><td>Revert view to single column</td></tr><tr><td>⌘ + ⌥ + 2</td><td>Split view into two columns</td></tr><tr><td>⌘ + ⌥ + 3</td><td>Split view into three columns</td></tr><tr><td>⌘ + ⌥ + 4</td><td>Split view into four columns</td></tr><tr><td>⌘ + ⌥ + 5</td><td>Set view to grid (4 groups)</td></tr><tr><td>⌃ + [NUM]</td><td>Jump to group where num is 1-4</td></tr><tr><td>⌃ + ⇧ + [NUM]</td><td>Move file to specified group where num is 1-4</td></tr></tbody></table><hr><h3 id="BookMark"><a href="#BookMark" class="headerlink" title="BookMark"></a>BookMark</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + F2</td><td>Toggle bookmark</td></tr><tr><td>F2</td><td>Next bookmark</td></tr><tr><td>⇧ + F2</td><td>Previous bookmark</td></tr><tr><td>⇧ + ⌘ + F2</td><td>Clear bookmarks</td></tr></tbody></table><hr><h3 id="Text-manipulation"><a href="#Text-manipulation" class="headerlink" title="Text manipulation"></a>Text manipulation</h3><table><thead><tr><th>Keypress</th><th>Command</th></tr></thead><tbody><tr><td>⌘ + K, ⌘ + U</td><td>Transform to Uppercase</td></tr><tr><td>⌘ + K, ⌘ + L</td><td>Transform to Lowercase</td></tr><tr><td>⌘ + ⌃ + up, ⌘ + ⌃ + down</td><td>Clip text upwards &#x2F; downwards</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJs - angular.extend()</title>
      <link href="/2015/05/16/angularjs-angular-dot-extend/"/>
      <url>/2015/05/16/angularjs-angular-dot-extend/</url>
      
        <content type="html"><![CDATA[<p>The <code>angular.extend()</code> function has very powerful to copy object to another object, including all of properties from the source object(s).</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><blockquote><p><code>angular.extend(dst, src);</code></p><p>dst:        <strong>destination object</strong><br>src:        <strong>source object(s)</strong>   </p><p>return:     <strong>refercen to dst object</strong></p></blockquote><span id="more"></span><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Let’s understand how to use it with example instance. Create a normal controller which contains user’s name, gender and age. And create a method to get the full description of the user.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">angular.<span class="title class_">Module</span>(<span class="string">&#x27;app&#x27;</span>,[])</span><br><span class="line"></span><br><span class="line">.<span class="property">app</span>.<span class="title function_">controller</span>(<span class="string">&#x27;UserController&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="keyword">function</span> (<span class="params">$scope</span>) &#123;</span><br><span class="line">$scope.<span class="property">name</span> = <span class="string">&#x27;angular&#x27;</span>;</span><br><span class="line">  $scope.<span class="property">gender</span> = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">  $scope.<span class="property">age</span> = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  $scope.<span class="property">getDescription</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;My name is &quot;</span> + $scope.<span class="property">name</span> + <span class="string">&quot; and I am &quot;</span> + $scope.<span class="property">gender</span> + <span class="string">&quot; &quot;</span> + $scope.<span class="property">age</span> + <span class="string">&quot; years old&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>We can use angular.extend function to do like above functionality, see below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">controller</span>(<span class="string">&#x27;UserController&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope</span>) &#123;</span><br><span class="line">  angular.<span class="title function_">extend</span>($scope, &#123;</span><br><span class="line">    name : <span class="string">&#x27;angular&#x27;</span>,</span><br><span class="line">    gender : <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    age : <span class="string">&#x27;2&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  angular.<span class="title function_">extend</span>($scope, &#123;</span><br><span class="line">    getDescription : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;My name is &quot;</span> + $scope.<span class="property">name</span> + <span class="string">&quot; and I am &quot;</span> + $scope.<span class="property">gender</span> + <span class="string">&quot; &quot;</span> + $scope.<span class="property">age</span> + <span class="string">&quot; years old&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p>And also we can use angular.extend() function to implement mixins. Let’s consider the below contrived Logging class.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Logger</span> = &#123;</span><br><span class="line">  <span class="attr">log</span>: <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(debug ? msg : <span class="string">&#x27;&#x27;</span>);      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>If we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.</p><p>Okay, now we create a controler called LoggerController, and “mixin” Logger class to it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">controller</span>(<span class="string">&#x27;LoggerController&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="keyword">function</span>(<span class="params">$scope</span>) &#123;</span><br><span class="line">  angular.<span class="title function_">extend</span>($scope, <span class="title class_">Logger</span>);</span><br><span class="line"></span><br><span class="line">  $scope.<span class="property">print</span> = <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In LoggerController, we “mixin” the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AngularJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to use jdbc in spring</title>
      <link href="/2015/05/05/how-to-use-jdbc-in-spring/"/>
      <url>/2015/05/05/how-to-use-jdbc-in-spring/</url>
      
        <content type="html"><![CDATA[<p>As we know, we can use <code>jdbc</code> to access database in java programming. And now let us use <code>jdbc</code> in spring. The <code>spring framework</code> reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are <code>org.springframework.jdbc.datasource.DriverManagerDataSource</code> and <code>org.springframework.jdbc.core.JdbcTemplate</code>.   </p><p>And here we use the <code>hsqldb</code> to act as our memory database. You can go to <a href="http://hsqldb.org/">here</a> to look at it. we use the <code>Maven</code> tools to management our project. the dependencies is:    </p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.hsqldb&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hsqldb&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.8.0.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>The spring configure file:    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN 2.0//EN&quot;</span><br><span class="line">&quot;http://www.springframework.org/dtd/spring-beans-2.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans&gt;</span><br><span class="line"></span><br><span class="line"> &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;org.hsqldb.jdbcDriver&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:hsqldb:mem:MyDB&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;sa&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line"> &lt;constructor-arg&gt;</span><br><span class="line">   &lt;ref bean=&quot;dataSource&quot;/&gt;</span><br><span class="line"> &lt;/constructor-arg&gt;    </span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;bean id=&quot;createTable&quot; class=&quot;java4s.SpringJdbcCreateTable&quot;&gt;</span><br><span class="line">   &lt;property name=&quot;jt&quot;&gt;</span><br><span class="line">      &lt;ref bean=&quot;jdbcTemplate&quot;/&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">we have a SpringJdbcCreateTable class to accesss database, this class has `JdbcTemplate` property,    </span><br><span class="line">    </span><br><span class="line">``` java</span><br><span class="line">JdbcTemplate jt;</span><br><span class="line"></span><br><span class="line">public void setJt(JdbcTemplate jt) &#123;</span><br><span class="line">this.jt = jt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we use spring bean to inject value to this property. And you will see it in above spring configure file.</p><p>create table, the <code>execute</code> method doesn’t return value.      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTable</span><span class="params">()</span> &#123;</span><br><span class="line">jt.execute(<span class="string">&quot;CREATE TABLE user(id int, name varchar(10), age int)&quot;</span>);</span><br><span class="line"><span class="comment">// execute() returns void</span></span><br><span class="line">System.out.println(<span class="string">&quot;table created&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>insert data, using the <code>update</code> method to insert data, this method will return how many rows have been inserted. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertData</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> jt.update(<span class="string">&quot;INSERT INTO user VALUES (99, &#x27;user_99&#x27;, 49)&quot;</span>);</span><br><span class="line">showDatas();</span><br><span class="line"></span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%s row inserted&quot;</span>, k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>update data, using the <code>update</code> method to update data, it will return how many rows are affected.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateData</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> jt.update(<span class="string">&quot;UPDATE user set name=&#x27;user_new&#x27; where name=&#x27;user_99&#x27;&quot;</span>);</span><br><span class="line">showDatas();</span><br><span class="line"></span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%s row updated&quot;</span>, k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete data, also using the <code>update</code> method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteData</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> jt.update(<span class="string">&quot;DELETE from user where name=&#x27;user_new&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">showDatas();</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;%s row deleted&quot;</span>, k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query data, the jdbctemplate has many query interfaces. Here we use <code>queryForRowSet</code> method to get the data by condition.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showDatas</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;|  ID |  NAME    |  AGE  |&quot;</span>);</span><br><span class="line"><span class="type">SqlRowSet</span> <span class="variable">rowSet</span> <span class="operator">=</span> jt.queryForRowSet(<span class="string">&quot;SELECT * FROM user&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (rowSet.next()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rowSet.getInt(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rowSet.getString(<span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rowSet.getInt(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> String</span><br><span class="line">.format(<span class="string">&quot;|  %s  |  %s  |  %s   |&quot;</span>, id, name, age);</span><br><span class="line"></span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>okay, to so far, let us call them in main entrance.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spconfig.xml&quot;</span>);</span><br><span class="line"><span class="type">SpringJdbcCreateTable</span> <span class="variable">st</span> <span class="operator">=</span>(SpringJdbcCreateTable)applicationContext.getBean(<span class="string">&quot;createTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">st.createTable();</span><br><span class="line">st.initSomeDatas();</span><br><span class="line">st.insertData();</span><br><span class="line">st.updateData();</span><br><span class="line">st.deleteData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Look, it’s very easy to access database with spring framework.</p>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Give me a cup of coffeescript</title>
      <link href="/2015/03/19/give-me-a-cup-of-coffeescript/"/>
      <url>/2015/03/19/give-me-a-cup-of-coffeescript/</url>
      
        <content type="html"><![CDATA[<img src="/assets/images/legacy/coffee-script-logo.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/coffee-script-logo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="200" height="100"> is programming language, which is built on top of `JavaScript`. CoffeeScript compiles into JavaScript that is efficient and consistent with many best practices. And it offers a clean syntax that should appeal to anyone who likes `Python` or `Ruby`.    <p>Actually, The <code>CoffeeScript</code> is just a JavaScript. So you can use any exsiting JavaScript library seamlessly from CoffeeScript. And both <code>client-side</code> and <code>server-side</code> can be written by <code>CoffeeScript</code>. So CoffeeScript can write entire web application completely, not like JavaScript only write client-side.  </p><span id="more"></span>  <p>The CoffeeScript is a <code>Node.js</code> package, so you need to install it with <code>Node Package Manager</code>. There assume you have installed node.js. You can watch <a href="https://nodejs.org/">here</a> to see how to install node.js if you dont’ know it. Putting below commands to install CoffeeScript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g coffee-script</span><br></pre></td></tr></table></figure><p>CoffeeScript supports many commands to let you build your application. You just need to input below command line: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coffee -help</span><br></pre></td></tr></table></figure><p>It will print awesome useful content: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Usage</span>: coffee [options] path/to/script.<span class="property">coffee</span> -- [args]</span><br><span class="line"></span><br><span class="line"><span class="title class_">If</span> called without options, <span class="string">`coffee`</span> will run your script.</span><br><span class="line"></span><br><span class="line">  -b, --bare         compile without a top-level <span class="keyword">function</span> wrapper</span><br><span class="line">  -c, --compile      compile to <span class="title class_">JavaScript</span> and save <span class="keyword">as</span> .<span class="property">js</span> files</span><br><span class="line">  -e, --<span class="built_in">eval</span>         pass a string <span class="keyword">from</span> the command line <span class="keyword">as</span> input</span><br><span class="line">  -h, --help         display <span class="variable language_">this</span> help message</span><br><span class="line">  -i, --interactive  run an interactive <span class="title class_">CoffeeScript</span> <span class="variable constant_">REPL</span></span><br><span class="line">  -j, --join         concatenate the source <span class="title class_">CoffeeScript</span> before compiling</span><br><span class="line">  -m, --map          generate source map and save <span class="keyword">as</span> .<span class="property">js</span>.<span class="property">map</span> files</span><br><span class="line">  -n, --nodes        print out the parse tree that the parser produces</span><br><span class="line">      --nodejs       pass options directly to the <span class="string">&quot;node&quot;</span> binary</span><br><span class="line">      --no-header    suppress the <span class="string">&quot;Generated by&quot;</span> header</span><br><span class="line">  -o, --output       set the output directory <span class="keyword">for</span> compiled <span class="title class_">JavaScript</span></span><br><span class="line">  -p, --print        print out the compiled <span class="title class_">JavaScript</span></span><br><span class="line">  -s, --stdio        listen <span class="keyword">for</span> and compile scripts over stdio</span><br><span class="line">  -l, --literate     treat stdio <span class="keyword">as</span> literate style coffee-script</span><br><span class="line">  -t, --tokens       print out the tokens that the lexer/rewriter produce</span><br><span class="line">  -v, --version      display the version number</span><br><span class="line">  -w, --watch        watch scripts <span class="keyword">for</span> changes and rerun commands</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Let&#x27;s give a example, how to use CoffeeScript to solve a mathematics problem. Here we will solve the first mathematical problem of `</span><span class="title class_">Project</span> <span class="title class_">Eluar</span><span class="string">`. The problem is below:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</span></span><br><span class="line"><span class="string">&gt; Find the sum of all the multiples of 3 or 5 below 1000.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">And now we solve this problem with CoffeeScript elegantly:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> coffeescript</span><br><span class="line">([<span class="number">1.</span><span class="number">.999</span>].<span class="property">filter</span> (x) -&gt; x % <span class="number">3</span> is <span class="number">0</span> or x % <span class="number">5</span> is <span class="number">0</span>).<span class="property">reduce</span> (x, y) -&gt; x + y</span><br></pre></td></tr></table></figure><p>You see, just one code line. It’s very concise and elegant. Not like JavaScript need to defined many variables and functions to solve it.    </p><p>Cheers,  I think you will love it.</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CoffeeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 - New Common Elements</title>
      <link href="/2015/03/03/html5-new-common-elements/"/>
      <url>/2015/03/03/html5-new-common-elements/</url>
      
        <content type="html"><![CDATA[<p>In <code>HTML5</code>, It adds a mount of elements, these elements are more easier to present the document in browser.</p><p>###Structure element<br>Before <code>HTML5</code>, we just use <code>div</code> tag to act as the <code>Document Structure Element</code>, but now the <code>HTML5</code> supports more elements like <code>section</code>, <code>article</code>, <code>nav</code>, <code>aside</code>, <code>header</code>, <code>footer</code> and so on.  </p><span id="more"></span> <h5 id="article"><a href="#article" class="headerlink" title="article"></a>article</h5><p><code>article</code> use to present an entire, independent article. We should use it when we need to present a entire, independent document content.<br>It can contain <code>header</code> tag to define the header of the article.<br>It can contain <code>footer</code> tag to define the footer of the article.<br>It can contain <code>section</code> tag to split content to multiple paragraphs.<br>Also, it can be nested by itself.   </p><h5 id="section"><a href="#section" class="headerlink" title="section"></a>section</h5><p><code>section</code> splits the page content to multiple blocks, and it usually contains title and content. And here the title stand for <code>h1</code>….<code>h6</code> tag. <code>section</code> can contains <code>article</code> and <code>section</code> tag.</p><h5 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h5><p><code>nav</code> tag use to define the navigation bar, include the top of page, the left or right side, and the bottom and so on.</p><h5 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h5><p>It’s recommend to use it to present the side of page with <code>CSS</code>.</p><h5 id="header"><a href="#header" class="headerlink" title="header"></a>header</h5><p>The <code>header</code> tag use to define the header of the <code>article</code>, and it can contain multiple title tags (<code>h1</code>….<code>h6</code>) with <code>hgroup</code> tag. And also the common tags like <code>p</code>, <code>span</code> can be nested in it.   </p><h5 id="hgroup"><a href="#hgroup" class="headerlink" title="hgroup"></a>hgroup</h5><p>It’s mainaly use for including multiple title tag.</p><h5 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h5><p>The footer of page, use to contains foot information, copy right and author related stuff.</p><h5 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h5><p><code>figure</code> tag express an independant image area, it may contain one or more images， in addition to this tag can contain a new tag <code>figcaption</code> to express the title of images.</p><h3 id="Semantic-related-elemnent"><a href="#Semantic-related-elemnent" class="headerlink" title="Semantic related elemnent"></a>Semantic related elemnent</h3><h5 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h5><p>It is mark some information need to be noticed.</p><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>It presents some content want to be time, date. Setting the <code>datetime</code> attribute’s value to present which date formatter you want.</p><h4 id="Special-function-element"><a href="#Special-function-element" class="headerlink" title="Special function element"></a>Special function element</h4><h4 id="meter"><a href="#meter" class="headerlink" title="meter"></a>meter</h4><p><code>meter</code> tag express an as known maxium and minimum counter. It has many attributes to set. <code>value</code>, <code>min</code>, <code>max</code>, <code>low</code>, <code>high</code>, <code>optimum</code>.   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  current speed of car: <span class="tag">&lt;<span class="name">meter</span> <span class="attr">id</span>=<span class="string">&quot;meter&quot;</span> <span class="attr">max</span>=<span class="string">&quot;200&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">low</span>=<span class="string">&quot;0&quot;</span> <span class="attr">high</span>=<span class="string">&quot;180&quot;</span> <span class="attr">value</span>=<span class="string">&quot;150&quot;</span>&gt;</span>kilometre/hour</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/assets/images/legacy/meter-tag.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/meter-tag.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="300" height="80"><h4 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h4><p><code>progress</code> tag use to express an progress bar. It has two attributes, one is <code>max</code>, another is <code>value</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   the progress of un-finished task: <span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">max</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.4&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/assets/images/legacy/progress-tag.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/progress-tag.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="350" height="100">]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 - New Common Attributes</title>
      <link href="/2015/03/02/html5-new-common-attributes/"/>
      <url>/2015/03/02/html5-new-common-attributes/</url>
      
        <content type="html"><![CDATA[<p><code>HTML5</code> adds new common attributes for original <code>HTML</code> Tag, and these attributes enhances the <code>HTML</code> elements’s function.   </p><h3 id="contentEditable"><a href="#contentEditable" class="headerlink" title="contentEditable"></a>contentEditable</h3><p>The <code>contentEditable</code> attribute supports most tags. The browser allows user edits the content of element if this attribute is set to true. These elements is not like input or textarea tags. They are not support editable content like table, div, span and so on these tags.   </p><span id="more"></span><p><code>contentEditable</code> attribute can be inherited by children tags. If the contentEditable is true, all children tags’s contentEditable will be true except we define it to false.   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>contentEditable<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:inherit;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &gt; <span class="selector-tag">tr</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.myDiv</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:inherit;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> turnOnContentEditable = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> target = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;target&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            target.<span class="property">contentEditable</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">contentEditable</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>CSharp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span></span><br><span class="line">           This is Div Tag</span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;turnOnContentEditable();&quot;</span><span class="attr">value</span>=<span class="string">&quot;Turn On Edit Mode&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The root div is can’t be edited by default. when we click button to turn on contentEditable attribute. all children tags of this tag can be edited.   </p><p><code>contentEditable</code> attribute is false:   </p><img src="/assets/images/legacy/contentEditable-before.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/contentEditable-before.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="300" height="350">  <p><code>contentEditable</code> attribute is true:   </p><img src="/assets/images/legacy/contentEditable-after.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/contentEditable-after.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="300" height="350">  <h3 id="designMode"><a href="#designMode" class="headerlink" title="designMode"></a>designMode</h3><p><code>designMode</code> attribute is actually entire document’s <code>contentEditable</code>. If we turn on the <code>designMode</code> attribute of the entire page, all the elements which supports <code>contentEditable</code> attributes can be edited. It is false by default.    </p><p>We can just use javascript to turn on the document’s <code>designMode</code>.   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">designMode</span> = <span class="string">&quot;on&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3><p><code>HTML5</code> supports <code>hidden</code> attribute for all elements. The <code>hidden</code> attribute can be set to ‘false’ and ‘true’ both values. The browser doesn’t display the element when <code>hidden = &#39;true&#39;</code>.   </p><p>The <code>hidden = &#39;true&#39;</code> actually like we write <code>display:none</code> is <code>CSS</code> file. And also we can get its value by <code>hidden</code>.</p><h3 id="spellcheck"><a href="#spellcheck" class="headerlink" title="spellcheck"></a>spellcheck</h3><p><code>HTML5</code> add new attributes <code>spellcheck</code> for editable elements like <code>input</code>,<code>textarea</code>, … The <code>spellcheck</code> can be set to ‘true’, ‘false’ both values. The browser will check the content user input and prompt error message for spell error words when it is set to ‘true’. </p><pre><code class="html">&lt;input type=&quot;text&quot; spellcheck=&quot;true&quot;/&gt;</code></pre><img src="/assets/images/legacy/spellcheck.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/spellcheck.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="300" height="80"><blockquote><p><em>Note: Supports <code>spellcheck</code> attribute’s browsers include <code>Chrome</code>, <code>Opera</code>, <code>Safari</code>, the <code>IE</code>, <code>FireFox</code> doesn’t support it for now.</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A nice web design tool - Bracket</title>
      <link href="/2015/03/02/a-nice-web-design-tool-bracket/"/>
      <url>/2015/03/02/a-nice-web-design-tool-bracket/</url>
      
        <content type="html"><![CDATA[<p><code>Bracket</code> is open source web design text editor, it focus with visual tools and preprocesssor support. It is easy to design web page in the browser, we can get the page layout in time when we change the html, css, javascript. We don’t need to save the file and refresh the browser. That’s so convenience.   </p><span id="more"></span><p><code>Bracket</code> supports the element highlight on the page in time when you put your mouse cursor on the specific html tag.</p><p>Absolutly, I recommend you to design you website with it. You can download it from <a href="https://github.com/adobe/brackets/releases/download/release-1.1%2Beb4/Brackets.1.1.Extract.dmg">here</a> for Mac OS. Also you can download it for other platform from <a href="https://github.com/adobe/brackets/releases">this</a>.    </p><p>The Extract for <code>Brackets</code> (Preview) extension lets you pull out design information from a PSD including colors, fonts, gradients, and measurement information as clean, minimal CSS via contextual code hints. You can also extract layers as images, use information from the PSD to define preprocessor variables, and easily get dimensions between objects. This is very benefit for web designer which want to design web page with PSD source file.   </p><p>The <code>Bracket</code> has three big features, they are below:</p><ul><li><p><strong>Inline Editor</strong><br>We don’t need to jump between file tabs when we want to change the style of the specific ID.<br>Just put the mouse cursor on that ID and press <code>Command</code>&#x2F;<code>Ctrl + E</code>, <code>Bracket</code> will show you all the CSS selectors with that ID in an inline window so you can work on your code side-by-side without any popups.</p></li><li><p><strong>Live Preview</strong><br>Get a real-time connection to your browser. Make changes to CSS and HTML and you’ll instantly see those changes on the page.</p></li><li><p><strong>Preprocessor Support</strong><br>  With Brackets you can use <code>Quick Edit</code> and <code>Live Highlight</code> with your <code>LESS</code> and <code>SCSS</code> files which will make working with them easier than ever.</p></li></ul><p>With <code>Bracket</code>, you can improve your working efficiency and save your time. This web design tool is so power, and the offical website is <a href="http://brackets.io/">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bracket </tag>
            
            <tag> Web Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guave - Immutable Collection</title>
      <link href="/2015/02/13/guave-immutable-collection/"/>
      <url>/2015/02/13/guave-immutable-collection/</url>
      
        <content type="html"><![CDATA[<p><code>Immutable</code> that means it can not be changed. Let’s get example to see what’s different with <code>mutable</code> objects.</p><p>Normal mutable collections:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//define a mutable list</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; mutableList = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//modify the first item in the mutable list</span></span><br><span class="line"><span class="comment">//will print [aa, b, c]</span></span><br><span class="line">mutableList.set(<span class="number">0</span>, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">System.out.println(mutableList);</span><br><span class="line">```    </span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">Immutable collections:</span><br><span class="line">``` Java</span><br><span class="line"><span class="comment">//define a immutable list</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImmutableList&lt;String&gt; immutableList = ImmutableList.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//can not modify the first item in the immutable list, any change item operation is unsuppproted.</span></span><br><span class="line"><span class="comment">//it will throw UnsupportedOperationException</span></span><br><span class="line">immutableList.set(<span class="number">0</span>, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">System.out.println(immutableList);</span><br><span class="line">```    </span><br><span class="line">From above example, we can get the conclusion is that immutable collections doesn<span class="string">&#x27;t support any changing content API. So it will throw `UnsupportedOperationException` when you try to modify it.    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### What&#x27;</span>s advantage of Immutable Objects</span><br><span class="line">According to Guava Offical explain about `Immutable Objects`, there have four and more advantages of Immutable Objects:</span><br><span class="line"></span><br><span class="line"> - Safe <span class="keyword">for</span> use by untrusted libraries.</span><br><span class="line"> - `Thread-Safe`: can be used by many threads with no risk of race conditions.</span><br><span class="line"> - Doesn<span class="string">&#x27;t need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.</span></span><br><span class="line"><span class="string"> - Can be used as a constant, with the expectation that it will remain fixed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Making immutable copies of objects is a good defensive programming technique, and `Guava`provides it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; *Note:* Each of the `Guava` immutable collection implementations reject *null* values.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### How create it</span></span><br><span class="line"><span class="string">An ImmutableXXX collection can be created in several ways:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- Using the `copyOf` method, like `ImmutableList.copyOf(collection)`:  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">``` Java</span></span><br><span class="line"><span class="string">ImmutableList&lt;String&gt; result = ImmutableList.copyOf(mutableList);</span></span><br></pre></td></tr></table></figure><ul><li>Using the <code>of</code> method, like <code>ImmutableList.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> or <code>ImmutableMap.of(&quot;a&quot;, 1, &quot;b&quot;, 2)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutableList&lt;String&gt; result = ImmutableList.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>Using a <code>Builder</code>, for example:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImmutableList&lt;String&gt; result = ImmutableList.&lt;String&gt;builder()</span><br><span class="line">                .addAll(mutableList)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><p>All immutable collections provide an ImmutableList view via <code>asList()</code>, so – for example – even if you have data stored as an ImmutableSortedSet, you can get the kth smallest element with <code>sortedSet.asList().get(k)</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get second item. print b</span></span><br><span class="line">System.out.println(immutableList.asList().get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understading MVC, MVP and MVVM Design Patterns</title>
      <link href="/2015/02/06/understading-mvc-mvp-and-mvvm-design-patterns/"/>
      <url>/2015/02/06/understading-mvc-mvp-and-mvvm-design-patterns/</url>
      
        <content type="html"><![CDATA[<p><code>MVC</code>, <code>MVP</code> and <code>MVVM</code> design patterns are most popular technologies in our web application. Many people don’t understand what’s difference among them, so do I. But I found a blog which explains the difference of three design patterns, and its’ really good.    </p><p>To read original article, see <a href="http://www.dotnet-tricks.com/Tutorial/designpatterns/2FMM060314-Understanding-MVC,-MVP-and-MVVM-Design-Patterns.html">here</a>    </p><p>There are three most popular MV-* design patterns: <code>MVC</code>, <code>MVP</code> and <code>MVVM</code>. These are widely used by the various technologies.   </p><span id="more"></span><h3 id="MVC-Pattern"><a href="#MVC-Pattern" class="headerlink" title="MVC Pattern"></a>MVC Pattern</h3><p><code>MVC</code> stands for <code>Model-View-Controller</code>. It is a software design pattern which was introduced in 1970s. Also, <code>MVC</code> pattern forces a separation of concerns, it means domain model and controller logic are decoupled from user interface (view). As a result maintenance and testing of the application become simpler and easier.   </p><p><code>MVC</code> design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Controller</code></p><p><img src="/assets/images/legacy/mvc-pattern.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/mvc-pattern.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="mvc-pattern"></p><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>The Model represents a set of classes that describe the business logic i.e. business model as well as data access operations i.e. data model. It also defines business rules for data means how the data can be changed and manipulated.</p><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>The Controller is responsible to process incoming requests. It receives input from users via the View, then process the user’s data with the help of Model and passing the results back to the View. Typically, it acts as the coordinator between the View and the Model.    </p><p>Today, this pattern is used by many popular framework like as <code>Ruby on Rails</code>, <code>Spring Framework</code>, <code>Apple iOS</code> Development and <code>ASP.NET MVC</code>.</p><h3 id="MVP-Pattern"><a href="#MVP-Pattern" class="headerlink" title="MVP Pattern"></a>MVP Pattern</h3><p>This pattern is similar to MVC pattern in which controller has been replaced by the presenter. This design pattern splits an application into three main aspects: <code>Model</code>, <code>View</code> and <code>Presenter</code>.   </p><p><img src="/assets/images/legacy/mvp-pattern.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/mvp-pattern.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="mvp-pattern"></p><h4 id="Model-1"><a href="#Model-1" class="headerlink" title="Model"></a>Model</h4><p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p><h4 id="View-1"><a href="#View-1" class="headerlink" title="View"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the presenter as the result. This also transforms the model(s) into UI.</p><h3 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h3><p>The Presenter is responsible for handling all UI events on behalf of the view. This receive input from users via the View, then process the user’s data with the help of Model and passing the results back to the View. Unlike view and controller, view and presenter are completely decoupled from each other’s and communicate to each other’s by an interface.   </p><p>Also, presenter does not manage the incoming request traffic as controller.   </p><p>This pattern is commonly used with <code>ASP.NET Web Forms</code> applications which require to create automated unit tests for their code-behind pages. This is also used with <code>windows forms</code>.   </p><h5 id="Key-Points-about-MVP-Pattern"><a href="#Key-Points-about-MVP-Pattern" class="headerlink" title="Key Points about MVP Pattern:"></a>Key Points about MVP Pattern:</h5><ul><li>User interacts with the View.</li><li>There is one-to-one relationship between View and Presenter means one View is mapped to only one Presenter.</li><li>View has a reference to Presenter but View has not reference to Model.</li><li>Provides two way communication between View and Presenter.</li></ul><h3 id="MVVM-Pattern"><a href="#MVVM-Pattern" class="headerlink" title="MVVM Pattern"></a>MVVM Pattern</h3><p><code>MVVM</code> stands for <code>Model-View-View Model</code>. This pattern supports two-way data binding between view and View model. This enables automatic propagation of changes, within the state of view model to the View. Typically, the view model uses the observer pattern to notify changes in the view model to model.</p><p><img src="/assets/images/legacy/mvvm-pattern.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/mvvm-pattern.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="mvvm-pattern"></p><h4 id="Model-2"><a href="#Model-2" class="headerlink" title="Model"></a>Model</h4><p>The Model represents a set of classes that describes the business logic and data. It also defines business rules for data means how the data can be changed and manipulated.</p><h4 id="View-2"><a href="#View-2" class="headerlink" title="View"></a>View</h4><p>The View represents the UI components like CSS, jQuery, html etc. It is only responsible for displaying the data that is received from the controller as the result. This also transforms the model(s) into UI.</p><h4 id="View-Model"><a href="#View-Model" class="headerlink" title="View Model"></a>View Model</h4><p>The View Model is responsible for exposing methods, commands, and other properties that helps to maintain the state of the view, manipulate the model as the result of actions on the view, and trigger events in the view itself.    </p><p>This pattern is commonly used by the <code>WPF</code>, <code>Silverlight</code>, <code>Caliburn</code>, <code>nRoute</code> etc.</p><h5 id="Key-Points-about-MVVM-Pattern"><a href="#Key-Points-about-MVVM-Pattern" class="headerlink" title="Key Points about MVVM Pattern:"></a>Key Points about MVVM Pattern:</h5><ul><li>User interacts with the View.</li><li>There is many-to-one relationship between View and ViewModel means many View can be mapped to one ViewModel.</li><li>View has a reference to ViewModel but View Model has no information about the View.</li><li>Supports two-way data binding between View and ViewModel.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conditional Stylesheets for IE version</title>
      <link href="/2015/01/28/conditinal-stylesheets-for-ie-version/"/>
      <url>/2015/01/28/conditinal-stylesheets-for-ie-version/</url>
      
        <content type="html"><![CDATA[<p>The tool of choice for fighting IE problems is the <code>conditional stylesheet</code>. IE provides comment tags, supported all the way up to the current IE 8 to target specific versions, as well as greater-than&#x2F;less-than stuff for targeting multiple versions at once.</p><h3 id="Why-use-conditional-stylesheets"><a href="#Why-use-conditional-stylesheets" class="headerlink" title="Why use conditional stylesheets?"></a>Why use conditional stylesheets?</h3><ul><li>You got problems, they need fixin’</li><li>Keeps your code hack-free and valid</li><li>Keeps your main stylesheet clean</li><li>Perfectly acceptable technique, sanctioned by Microsoft</li></ul><span id="more"></span><p>And remember, these conditional tags don’t have to be used only for CSS. You could load JavaScript, or even use them down in the content of your site to display special IE-specific messages.</p><h3 id="The-Code"><a href="#The-Code" class="headerlink" title="The Code"></a>The Code</h3><p>This would go in your <head> with all the other regular CSS &lt;link&gt;ed CSS files. The opening and closing tags should be familiar, that’s just regular ol’ HTML comments. Then between the brackets, “IF” and “IE” should be fairly obvious. The syntax to note is “!” stand for “not”, so !IE means “not IE”. gt means “greater than”, gte means “greater than or equal”, lt means “less than”, lte means “less than or equal.”</p><blockquote><p><strong>Note that IE 10 and up DO NOT support conditional comments at all.</strong></p></blockquote><p>Target ALL VERSIONS of IE</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;all-ie-only.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target everything EXCEPT IE</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if !IE]&gt;&lt;!--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;not-ie.css&quot;</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 7 ONLY</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 7]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7.css&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 6 ONLY</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 5 ONLY</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 5]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie5.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 5.5 ONLY</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 5.5000]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie55.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 6 and LOWER</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 7]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lte IE 6]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-down.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 7 and LOWER</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 8]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lte IE 7]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-down.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 8 and LOWER</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-down.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 6 and HIGHER</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if gt IE 5.5]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 6]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie6-and-up.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 7 and HIGHER</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if gt IE 6]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 7]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie7-and-up.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>Target IE 8 and HIGHER</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if gt IE 7]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gte IE 8]&gt;</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;ie8-and-up.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p><em>Note: The original artical you can see <a href="http://css-tricks.com/how-to-create-an-ie-only-stylesheet/">here</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IE </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS tricks for IE6,IE7,IE8,IE9</title>
      <link href="/2015/01/28/css-tricks-for-ie6-ie7-ie8-ie9/"/>
      <url>/2015/01/28/css-tricks-for-ie6-ie7-ie8-ie9/</url>
      
        <content type="html"><![CDATA[<p>As web developer, we usually to fix the style for special version of IE. Here are the newest CSS tricks for <code>IE6</code>, <code>IE7</code>, <code>IE8</code>, <code>IE9</code>. This is very helpful for you.   </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#ie-tricks</span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* All browsers */</span></span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* All browsers but IE6 */</span></span><br><span class="line"><span class="attribute">color</span>:red <span class="meta">!important</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only works in IE6 */</span></span><br><span class="line">_color:red;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE6, IE7 */</span> </span><br><span class="line">*<span class="attribute">color</span>:red; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only works in IE7*/</span></span><br><span class="line">+<span class="attribute">color</span>:red;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only works in IE7 */</span></span><br><span class="line">*+<span class="attribute">color</span>:red;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE6, IE7, IE8, IE9 */</span> </span><br><span class="line"><span class="attribute">color</span>:red\<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE8, IE9 */</span> </span><br><span class="line"><span class="attribute">color</span>:red\<span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*Only works in IE9*/</span></span><br><span class="line"><span class="attribute">color</span>:red\<span class="number">9</span>\<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IE </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A New Way For Developing Web Application Front-End</title>
      <link href="/2015/01/13/a-new-way-for-developing-web-application-front-end/"/>
      <url>/2015/01/13/a-new-way-for-developing-web-application-front-end/</url>
      
        <content type="html"><![CDATA[<p>When we develop web application, if we write or modify the HTML structure, CSS style and javascript, we need to compile the code and deploy it, and then refresh page, finally we can see our changes. There are so many steps. So could we skip these steps and just see our changes on page directly when we save the codes. Yes, I can answer you now.    </p><p>In order to achieve this goal, we need to install <code>Guard</code>, <code>LiveReload</code> and related stuff, configure it in our web application project.  </p><span id="more"></span>  <h3 id="Guard"><a href="#Guard" class="headerlink" title="Guard"></a>Guard</h3><p><code>Guard</code> is a command line tool to easily handle events on file system modifications. The offical website in <a href="http://guardgem.org/">here</a>.</p><ul><li>File system changes handled by awesome Listen gem.</li><li>Support for visual system notifications.</li><li>Huge eco-system with more than 220 guard plugins, go to this <a href="https://rubygems.org/search?query=guard-">website</a> to get plugins what you want.</li></ul><p>The simplest way to install guard is to use <code>Bundler</code>. Go to the guard offical website to see how to install it.    </p><h3 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h3><p><code>LiveReload</code> monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed.<br>Even cooler, when you change a CSS file or an image, the browser is updated instantly without reloading the page.</p><p>And here, we use <code>guard-livereload</code> plugin to notificate the browser to reload page. this plugin base on <code>Guard</code> and <code>LiveReload</code>, you have to install Guard firstly. Visit this <a href="https://github.com/guard/guard-livereload/">website</a> to see how to install it.</p><p>###LiveReload Safari&#x2F;Chrome extension###<br>Finally, you need to install <code>LiveReload Safari Or Chrome Extension</code>, and here, we just use chrome to load web application. So go to Chrome Web Store and find livereload extension to install it on your chrome browser. And also you can use Safari browser.</p><p>And now the tools we need have been installed. So let’s getting started.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ guard init livereload</span><br></pre></td></tr></table></figure><p>By runing above command line, it will add guard definition to your <code>Guardfile</code>. You can adapt your ‘view’ files like you want. And the default content of Guardfile by livereload initialize is below:    </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">guard <span class="string">&#x27;livereload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  watch(<span class="regexp">%r&#123;app/views/.+\.(erb|haml|slim)&#125;</span>)</span><br><span class="line">  watch(<span class="regexp">%r&#123;app/helpers/.+\.rb&#125;</span>)</span><br><span class="line">  watch(<span class="regexp">%r&#123;public/.+\.(css|js|html)&#125;</span>)</span><br><span class="line">  watch(<span class="regexp">%r&#123;config/locales/.+\.yml&#125;</span>)</span><br><span class="line">  <span class="comment"># Rails Assets Pipeline</span></span><br><span class="line">  watch(<span class="regexp">%r&#123;(app|vendor)(/assets/\w+/(.+\.(css|js|html))).*&#125;</span>) &#123; |<span class="params">m</span>| <span class="string">&quot;/assets/<span class="subst">#&#123;m[<span class="number">3</span>]&#125;</span>&quot;</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>And you can see that there has some watch command in the Guardfile. Changing it by your situation.</p><p>Now I will use a login page to test the guard and livereload how to work. This project contains script file, less file and html file. When we change the less file it will generate css file automatically, and here we use Sublime Text plugin to finished it, and also you can use <code>guard-less</code> plugin which is guard plugin.<br><img src="/assets/images/legacy/project-structure.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/project-structure.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>In test project directory, we can find the Gemfile and Guardfile.</p><figure class="highlight ruby"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A sample Gemfile</span></span><br><span class="line">source <span class="string">&quot;https://rubygems.org&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gem &quot;rails&quot;</span></span><br><span class="line">group <span class="symbol">:development</span> <span class="keyword">do</span> </span><br><span class="line">gem <span class="string">&#x27;guard&#x27;</span></span><br><span class="line">gem <span class="string">&#x27;guard-livereload&#x27;</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>And here we just only use <code>guard-livereload plugin</code>, we also can use <code>guard-less</code> to configure the less to auto generate css file. But here we use the <code>Sublime Text</code> development tools to develop this project, it supports plugin to generate less to css.    </p><p>Let’s see the guard how to watch our project files. the content of Guardfile is below:</p><figure class="highlight ruby"><figcaption><span>Guardfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A sample Guardfile</span></span><br><span class="line"><span class="comment"># More info at https://github.com/guard/guard#readme</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Uncomment and set this to only include directories you want to watch</span></span><br><span class="line"><span class="comment"># directories %w(app lib config test spec feature)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Uncomment to clear the screen before every task</span></span><br><span class="line"><span class="comment"># clearing :on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Guard internally checks for changes in the Guardfile and exits.</span></span><br><span class="line"><span class="comment">## If you want Guard to automatically start up again, run guard in a</span></span><br><span class="line"><span class="comment">## shell loop, e.g.:</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##  $ while bundle exec guard; do echo &quot;Restarting Guard...&quot;; done</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Note: if you are using the `directories` clause above and you are not</span></span><br><span class="line"><span class="comment">## watching the project directory (&#x27;.&#x27;), the you will want to move the Guardfile</span></span><br><span class="line"><span class="comment">## to a watched dir and symlink it back, e.g.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  $ mkdir config</span></span><br><span class="line"><span class="comment">#  $ mv Guardfile config/</span></span><br><span class="line"><span class="comment">#  $ ln -s config/Guardfile .</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># and, you&#x27;ll have to watch &quot;config/Guardfile&quot; instead of &quot;Guardfile&quot;</span></span><br><span class="line"></span><br><span class="line">guard <span class="string">&#x27;livereload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">watch /.*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">end</span></span><br></pre></td></tr></table></figure><p>In there, you will see that the all file in this project directory has been watched by guard-livereload. </p><p>Type below commands in your terminal.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ guard</span><br></pre></td></tr></table></figure><p>It will prompt you that LiveReload is waiting for a browser to connect. And the Guard is now watching at your specific files.</p><p>Open the web application on your chrome browser, and click LiveReload extension. And now you will see the terminal has a message said Browser connected.    </p><p>So far, you have prepared all configurations. And now you can modify the source file and save it, then you will see the web application automatically refresh.<br><img src="/assets/images/legacy/auto-refresh-page.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/auto-refresh-page.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> Guard </tag>
            
            <tag> LiveReload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to run multiple IE version on same computer</title>
      <link href="/2015/01/07/how-to-run-multiple-ie-version-on-same-cotim/"/>
      <url>/2015/01/07/how-to-run-multiple-ie-version-on-same-cotim/</url>
      
        <content type="html"><![CDATA[<p>As web developer, we usually need to face the challenge of making cross-browser compatible. Especially IE browser’s multiple version. Because its quirks of rendering websites differently across its versions of <code>IE6</code>, <code>IE7</code>, <code>IE8</code> and possibly <code>IE9</code> and <code>IE10</code>.   </p><p>Most of us have only one version of IE browser on our computer, and the compatible mode of IE is not really specific version which you want to simulate.   </p><span id="more"></span><p>So how to run multiple version of IE on same time. Many developers install virtual machine to use the different versions. But this is not the best way.   </p><p>In there, I will tell you there has a free tool called <code>IETester</code> can solve your problem. Use this tool can quick and easy way to run IE6, IE7, IE8 and IE9 on the same computer at the same time. And this tool just only support windows operation system. It also supports develope tool which can help developer to check web application on different version of IE.   </p><p>This is a screen shot of <code>IETester</code>:<br><img src="/assets/images/legacy/ie-tester.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/ie-tester.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>You can download it from this address <a href="http://www.my-debugbar.com/ietester/install-ietester-v0.5.4.exe">IETester</a>   </p><p>There has another online tools called <code>Browser Sandbox</code> can solve this problem, but it is not free, if you have money, this tool will be better for you. It support any versions of <code>Firefox</code>, <code>Opera</code>, <code>Safari</code>, <code>Chrome</code> and also <code>IE</code>. You can go to this <a href="http://spoon.net/browsers/">website</a> to visit.</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tool </tag>
            
            <tag> IETester </tag>
            
            <tag> IE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to install packages in sublime text 3</title>
      <link href="/2014/12/26/how-to-install-sublime-text-plugin/"/>
      <url>/2014/12/26/how-to-install-sublime-text-plugin/</url>
      
        <content type="html"><![CDATA[<p><code>Sublime Text</code> is a sophisticated text editor for code, markup and prose. You can go to offical <strong><a href="http://www.sublimetext.com/">website</a></strong> to download and see how to use it. It’s a very powerful weapon for developer. And also it has so many packages to expand its functional.   </p><p>If you want to install packages in your sublime text. First of all, you need to install <code>Package Control</code> that is <code>Sublime Text</code> package manager that makes it exceedingly simple to find, install and keep packages up-to-date.  </p><p>Open Sublime Text 3 and choose <code>View &gt; Show Console</code> menu. Paste below codes into console.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">&#x27;2deb499853c4371624f5a07e27c334aa&#x27;</span> + <span class="string">&#x27;bf8c4e67d14fb0525ba4f89698a6d7e1&#x27;</span>; pf = <span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%20&#x27;</span>)).read(); dh = hashlib.sha256(by).hexdigest(); <span class="built_in">print</span>(<span class="string">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="built_in">open</span>(os.path.join( ipp, pf), <span class="string">&#x27;wb&#x27;</span> ).write(by)</span><br></pre></td></tr></table></figure><span id="more"></span><p>This code creates the Installed Packages folder for you (if necessary), and then downloads the <code>Package Control.sublime-package</code> into it.   </p><p>Since the <code>Package Control</code> install successfull, you can intall any packages which you want, such as less,less2css package. Press <code>Command+Shift+P</code> open the <code>Command palette</code> and find the <code>Package Control: Install Package</code>, like this:<br><img src="/assets/images/legacy/command-palette.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/command-palette.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="command palette"></p><p>Choose <code>Package Control: Install Package</code> menu, and wait a seconds it will prompt package installer, and then you can search packages what you want and install it.<br><img src="/assets/images/legacy/package-installer.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/package-installer.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="package installer"> </p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> Tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is cucumber</title>
      <link href="/2014/12/22/what-is-cucumber/"/>
      <url>/2014/12/22/what-is-cucumber/</url>
      
        <content type="html"><![CDATA[<p><code>Cucumber</code> is a tool that can execute <code>plain-text</code> functional descriptions. And also it’s  <code>BDD(Behaviour Driven Development)</code> <code>automated tests</code>. It is written by <code>Ruby</code>, and now it supports more than 40 languages, such as <code>Java</code>, <code>C#</code> and <code>Scala</code> etc.</p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>Firstly, we need to install <code>Ruby</code> and <code>RubyGems</code>, to check whether the installation of Ruby and RubyGems is successful. You can inputx the commands to terminal, just like as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~  ruby --version</span><br><span class="line">ruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]</span><br><span class="line">~  gem --version</span><br><span class="line">2.0.14  </span><br></pre></td></tr></table></figure><p>And then we can run the command below to install <code>Cucumber</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~  gem install cucumber</span><br></pre></td></tr></table></figure><p>After this, put below command to see how to use it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~  cucumber --help</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="Gherkin"><a href="#Gherkin" class="headerlink" title="Gherkin"></a>Gherkin</h3><p><code>Gherkin</code> is a language that can be understand by <code>Cucumber</code>. It’s a <code>Business Readable</code>, <code>Domain Specific Language</code>. Very easy to understand what the functional want to do.    </p><p>The <code>Gherkin</code> has two purpose, documention and automated test. The structure is Treetop grammer than is part of Cucumber codebase and use indentation to format it.   </p><p> The <code>Gherkin</code> has two conventions:</p><ul><li>Single <code>Gherkin</code> source file contains a description of single feature.</li><li>The source file is feature extention file(<code>*.feature</code>).</li></ul><p>Like <code>YAML(Yet Another Markup Language)</code>, Gherkin is a line-oriented language that uses indentation to define structure. Most lines start with keyword. And you can start with a hash sign(#) to comment the text.</p><p>A Gherkin source file usually looks like this</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 1: <span class="keyword">Feature</span>: Some terse yet descriptive text of what is desired</span><br><span class="line"> 2:   Textual description of the business value of this feature</span><br><span class="line"> 3:   <span class="keyword">Business</span> rules that govern the scope of the feature</span><br><span class="line"> 4:   Any additional information that will make the feature easier to understand</span><br><span class="line"> 5: </span><br><span class="line"> 6:   <span class="keyword">Scenario</span>: Some determinable business situation</span><br><span class="line"> 7:     <span class="keyword">Given</span> some precondition</span><br><span class="line"> 8:       <span class="keyword">And</span> some other precondition</span><br><span class="line"> 9:      <span class="keyword">When</span> some action by the actor</span><br><span class="line">10:       <span class="keyword">And</span> some other action</span><br><span class="line">11:       <span class="keyword">And</span> yet another action</span><br><span class="line">12:      <span class="keyword">Then</span> some testable outcome is achieved</span><br><span class="line">13:       <span class="keyword">And</span> something else we can check happens too</span><br><span class="line">14: </span><br><span class="line">15:   <span class="keyword">Scenario</span>: A different situation</span><br></pre></td></tr></table></figure><p>Above the codes, It’s very similar with <code>Given-When-Then</code> the <code>Feature</code>, <code>Scenario</code>, <code>Given</code>, <code>And</code>, <code>When</code>, <code>Then</code> all are keywords of <code>Gherkin</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cucumber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Ractive.js</title>
      <link href="/2014/12/19/what-is-ractive-dot-js/"/>
      <url>/2014/12/19/what-is-ractive-dot-js/</url>
      
        <content type="html"><![CDATA[<p><code>Ractive.js</code> is a <code>template-driven</code> UI library, it transforms your templates into blueprints for application that are interative by default. <code>Ractive.js</code> is very similar with <code>AngularJS</code>, and it supports <code>Two-way binding</code>, <code>animations</code> as well. Another powerfull feature is <code>SVG</code> support.   </p><h3 id="Template-Data-UI"><a href="#Template-Data-UI" class="headerlink" title="Template + Data &#x3D; UI"></a>Template + Data &#x3D; UI</h3><p>You just need to prepare your html template and datas, and the <code>Ractive.js</code> will automatically to combine them then give you what you want. Whe you change your datas, it intelligently updates the real DOM.   </p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>First, you need to include <code>Ractive.js</code> to your application. Just like include other javascript librarys easily. You can download it to local and then include it. And if you want include latest version, you just put below codes to your project.   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;http://cdn.ractivejs.org/latest/ractive.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><p>Second, we define a container that we want to render. Let’s give it id container.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And third, just need to define a template. Load template in many ways, for example we can use ajax call to get the template string. and here, we use script tag to include the template.  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;template&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/ractive&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">&quot;lightblue&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;25%&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">r</span>=<span class="string">&quot;\&#123;\&#123;10+temperature&#125;&#125;&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;gold&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;yellow&quot;</span> </span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-handlebars">           <span class="attr">opacity</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">0.4</span>+temperature/100&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;65%&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;80&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span>&gt;</span>\&#123;\&#123;temperature&#125;&#125;℃<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Note:</em> don’t mind reverse slash symbol. we just use it to transfer meaning. And when you data binding you don’t need to add it. remember that!   </p><p>As above. We define a svg tag and it contains rectangle,circle shape and text. The circle’s radius bind the data NaN，so the radius will update with ß10 plus temperature when the temperature changed. As we can see the temperature has binded the data as well.   </p><p>And last step, Let’s combine the template and data with <code>Ractive.js</code>. the code as below:   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> ractive = <span class="keyword">new</span> <span class="title class_">Ractive</span>(&#123;</span><br><span class="line"> <span class="comment">// The el option can be a node, an ID, or a CSS selector.</span></span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">    <span class="comment">// We could pass in a string, but for the sake of convenience</span></span><br><span class="line">    <span class="comment">// we&#x27;re passing the ID of the &lt;script&gt; tag above.</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;#template&#x27;</span>,</span><br><span class="line">    <span class="comment">// Here, we&#x27;re passing in some initial data</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">temperature</span>:<span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">So the style as we can see below:   </span></span><br><span class="line"><span class="string">&#123;% img /assets/images/legacy/ractive-svg-test.png 400 200 %&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now, we can change the temperature data and let `</span><span class="title class_">Ractive</span>.<span class="property">js</span><span class="string">` to update the DOM automatically. So there we increase the temperature by 1 per 100 millisecond, and when the temperature larger than 60 then reset it to 0.   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"> <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = ractive.<span class="title function_">get</span>(<span class="string">&#x27;temperature&#x27;</span>);</span><br><span class="line">    temp = temp &gt;= <span class="number">60</span> ? <span class="number">0</span> : ++temp; </span><br><span class="line">    ractive.<span class="title function_">set</span>(<span class="string">&#x27;temperature&#x27;</span>,temp);</span><br><span class="line"> &#125;,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>So the radius of circle and the text will automatically changed. This is <code>Ractive.js</code> simple usage. Hopeful you like it. </p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to learn any language in six months</title>
      <link href="/2014/12/18/how-to-learn-any-language-in-six-months/"/>
      <url>/2014/12/18/how-to-learn-any-language-in-six-months/</url>
      
        <content type="html"><![CDATA[<p>Just see a video that teachs you how to learn any language in six months on youtube. It’s created by Chris Lonsdale. I think it’s very interesting and I believe those ways will be useful for us. So that’s why I note it.</p><h3 id="The-Big-Question"><a href="#The-Big-Question" class="headerlink" title="The Big Question"></a>The Big Question</h3><ul><li>How can normal adults learn a <code>NEW LANGUAGE</code> <strong>Quickly</strong>, <strong>Easily</strong>, <strong>Effectively</strong>?</li></ul><h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><ul><li>There have <strong><code>5 Principles</code></strong> and <strong><code>7 Actions</code></strong>.    </li><li>The two things that really don’t matter:<ul><li><del>Talent</del></li><li><del>Immersion per se</del><span id="more"></span></li></ul></li></ul><h3 id="5-Principles-of-Rapid-Language-Acquisition"><a href="#5-Principles-of-Rapid-Language-Acquisition" class="headerlink" title="5 Principles of Rapid Language Acquisition"></a>5 Principles of Rapid Language Acquisition</h3><p>There have four words you need to keep in your mind: <strong>Meaning</strong>, <strong>Relevance</strong>, <strong>Attention</strong>, <strong>Memory</strong>   </p><img src="/assets/images/legacy/learning-language-4-words.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/learning-language-4-words.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="300" height="200"><h4 id="Principle-1"><a href="#Principle-1" class="headerlink" title="Principle #1:"></a>Principle #1:</h4><p><strong><code>Focus</code> on language content that is <code>relevant</code> to you.</strong></p><h4 id="Principle-2"><a href="#Principle-2" class="headerlink" title="Principle #2:"></a>Principle #2:</h4><p><strong>User your <code>New Language</code> as a <code>Tool</code> to <code>Communicate</code> … from Day 1</strong></p><h4 id="Principle-3"><a href="#Principle-3" class="headerlink" title="Principle #3:"></a>Principle #3:</h4><p><strong>When you first <code>UNDERSTAND</code> the <code>MESSAGE</code>, you will unconsciously <code>ACQUIRE</code> the Language</strong></p><img src="/assets/images/legacy/comprehension-is-key.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/comprehension-is-key.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="400" height="300"><p><em>Note:</em> <strong>Language learning is NOT ABOUT KNOWLEGE…, It’s about <code>Physiological Training</code></strong></p><h4 id="Principle-4"><a href="#Principle-4" class="headerlink" title="Principle #4:"></a>Principle #4:</h4><p><strong>Language learning is about <code>Physiological Training</code></strong>   </p><ul><li><em>Talking takes muscle… when your <code>FACE HURTS</code>, you are doing it <code>RIGHT</code></em></li></ul><h4 id="Principle-5"><a href="#Principle-5" class="headerlink" title="Principle #5:"></a>Principle #5:</h4><p><strong>Psycho-Physiological <code>STATE Matters</code></strong>   </p><ul><li><em>Very important idea… You Must Learn to Tolerate Ambiguity</em></li></ul><h3 id="7-Actions-for-Rapid-Language-Acquisition"><a href="#7-Actions-for-Rapid-Language-Acquisition" class="headerlink" title="7 Actions for Rapid Language Acquisition"></a>7 Actions for Rapid Language Acquisition</h3><h4 id="Action-1"><a href="#Action-1" class="headerlink" title="Action #1:"></a>Action #1:</h4><p><strong><code>Listen A LOT!</code></strong>   </p><ul><li><em>Brain Soaking with New Language</em></li></ul><h4 id="Action-2"><a href="#Action-2" class="headerlink" title="Action #2:"></a>Action #2:</h4><p><strong>Focus on getting the meaning <code>FIRST</code> (before the words)</strong>   </p><ul><li><em>Use Body Language</em>   </li><li><em>Use Patterns You Already Know</em></li></ul><h4 id="Action-3"><a href="#Action-3" class="headerlink" title="Action #3:"></a>Action #3:</h4><p><strong>Start Mixing!</strong>   </p><ul><li><em>So… get creative… start mixing!</em></li></ul><img src="/assets/images/legacy/words-mixing.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/words-mixing.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="400" height="300"><h4 id="Action-4"><a href="#Action-4" class="headerlink" title="Action #4:"></a>Action #4:</h4><p>*<em>Focus on the <code>Core</code></em>    </p><img src="/assets/images/legacy/high-frequency-language.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/high-frequency-language.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="400" height="300"><h5 id="Week-1-The-Tool-Box"><a href="#Week-1-The-Tool-Box" class="headerlink" title="Week 1 (The Tool Box)"></a>Week 1 (The Tool Box)</h5><p>-What is this?<br>-How do you say?<br>-I don’t understand…<br><em>All in the TARGET LANGUAGE</em></p><h5 id="Week-2-3-Pronouns-Common-Verbs-Adjectives"><a href="#Week-2-3-Pronouns-Common-Verbs-Adjectives" class="headerlink" title="Week 2-3 (Pronouns, Common Verbs, Adjectives)"></a>Week 2-3 (Pronouns, Common Verbs, Adjectives)</h5><p>-you<br>-that<br>-me<br>-give<br>-hot<br>-…</p><h5 id="Week-4-Glue-Words"><a href="#Week-4-Glue-Words" class="headerlink" title="Week 4 (Glue Words)"></a>Week 4 (Glue Words)</h5><p>-But<br>-And<br>-Even though<br>-…   </p><h4 id="Action-5"><a href="#Action-5" class="headerlink" title="Action #5"></a>Action #5</h4><p><strong>Get a Language Parent</strong><br>Language Parent “Rules”:        </p><ul><li>Works to understand what you are saying   </li><li>Does not correct mistake   </li><li>Confirms understanding by using correct language   </li><li>Uses words the learner knows</li></ul><h4 id="Action-6"><a href="#Action-6" class="headerlink" title="Action #6"></a>Action #6</h4><p><strong>Copy the <code>Face</code></strong></p><h4 id="Action-7"><a href="#Action-7" class="headerlink" title="Action #7"></a>Action #7</h4><p><strong><code>Direct Connect</code> to Mental Images</strong>      </p><img src="/assets/images/legacy/direct-connect-mental-image.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/direct-connect-mental-image.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class=" lazyload placeholder" width="300" height="200"><p><em>Note: The original video address is <a href="https://www.youtube.com/watch?v=d0yGdNEWdn0">https://www.youtube.com/watch?v=d0yGdNEWdn0</a></em>   </p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoftSkill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guava - Ordering</title>
      <link href="/2014/12/12/guava-ordering/"/>
      <url>/2014/12/12/guava-ordering/</url>
      
        <content type="html"><![CDATA[<p><code>Ordering</code> is Guava’s fluent Comparator class and implements Comparator interface. It can be used to build complex comparators and apply them to collections of objects. </p><p>Okay, so let’s getting started. Firstly, we declared a <code>String</code> type List:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;String&gt; locations = Lists.newArrayList(</span><br><span class="line">        <span class="string">&quot;Guang zhou&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cheng du&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Shang hai&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>We will use this locations variable later.</p><span id="more"></span><p><code>natural()</code><br>Use natural ordering for comparatable types. such as number from small to large. date from start to end. It is static method.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use natural comparator, such as a -&gt; z</span></span><br><span class="line"><span class="comment">// so the result is: [, Cheng du, Guang zhou, Shang hai]</span></span><br><span class="line">System.out.println(Ordering.natural().sortedCopy(locations));</span><br></pre></td></tr></table></figure><p><code>sortedCopy(Iterable)</code><br>Return a sorted copy of the specified elements as a List.<br>We create a customized <code>Ordering</code> that sorted by the length of element from small to large. Let’s get the code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Ordering&lt;String&gt; <span class="title function_">getCustomzieStringOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Ordering</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String first, String second)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Ints.compare(first.length(), second.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Order the locations list with our new customize <code>Ordering</code>:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ordering&lt;String&gt; byLengthOrdering = getCustomzieStringOrder();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// use natural comparator, such as a -&gt; z</span></span><br><span class="line">   <span class="comment">// so the result is: [, Cheng du, Shang hai, Guang zhou]</span></span><br><span class="line">   System.out.println(byLengthOrdering.sortedCopy(locations));</span><br></pre></td></tr></table></figure><p><code>isOrdered(Iterable)</code><br>Return a Boolean variable that can describe the Iterable if sorted.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// will return false. because the locations array is not sorted.</span></span><br><span class="line">   System.out.println(byLengthOrdering.isOrdered(locations));</span><br></pre></td></tr></table></figure><p><code>reverse()</code><br>Return the reverse <code>Ordering</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reverse customize comparator.</span></span><br><span class="line"><span class="comment">// so the result is: [Guang zhou, Shang hai, Cheng du, ]</span></span><br><span class="line">System.out.println(byLengthOrdering.reverse().sortedCopy(locations));</span><br></pre></td></tr></table></figure><p><code>nullsFirst()</code><br>Return an <code>Ordering</code> that will put the null object at the first.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add null object to the locations array.</span></span><br><span class="line">locations.add(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// null obejct will at first.</span></span><br><span class="line"><span class="comment">// so the result is : [null, , Cheng du, Shang hai, Guang zhou]</span></span><br><span class="line">System.out.println(byLengthOrdering.nullsFirst().sortedCopy(locations));</span><br></pre></td></tr></table></figure><p><code>nullsLast()</code><br>Return an <code>Ordering</code> that will put the null object at the last.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null object will at last.</span></span><br><span class="line">   <span class="comment">// the result is : [, Cheng du, Shang hai, Guang zhou, null]</span></span><br><span class="line">   System.out.println(byLengthOrdering.nullsLast().sortedCopy(locations));</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// will throw NullPointerException, because the location contains null object.</span></span><br><span class="line">   <span class="comment">// and here doesn&#x27;t have nullsFirst() or nullsLast() to deal with null object.</span></span><br><span class="line">   byLengthOrdering.sortedCopy(locations);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// remove the null object.</span></span><br><span class="line">   locations.remove(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><code>compound()</code><br>Returns an <code>Ordering</code> which uses the specified Comparator to “break ties.”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the &quot;AAAAAAAA&quot; length is equal to &quot;Cheng du&quot; length. (8 characters)</span></span><br><span class="line"><span class="comment">// and it will be appended at last.</span></span><br><span class="line">locations.add(<span class="string">&quot;AAAAAAAA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// use natrual ordering with second comparator to deal with equal situation.</span></span><br><span class="line">Ordering&lt;String&gt; compoundOrdering = byLengthOrdering.compound(Ordering.natural());</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result will be : [, AAAAAAAA, Cheng du, Shang hai, Guang zhou]</span></span><br><span class="line">System.out.println(compoundOrdering.sortedCopy(locations));</span><br></pre></td></tr></table></figure><p><code>onResultOf(Fuction)</code><br>Returns an Ordering which orders values by applying the function to them and then comparing the results using the original Ordering.<br>Declaring a Foo class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">      <span class="meta">@Nullable</span></span><br><span class="line">      <span class="keyword">private</span> Integer sortedBy;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> String nonSortedBy;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Foo</span><span class="params">(Integer sortedBy, String nonSortedBy)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.sortedBy = sortedBy;</span><br><span class="line">          <span class="built_in">this</span>.nonSortedBy = nonSortedBy;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getNonSortedBy</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> nonSortedBy;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonSortedBy</span><span class="params">(String nonSortedBy)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.nonSortedBy = nonSortedBy;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">getSortedBy</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> sortedBy;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSortedBy</span><span class="params">(<span class="type">int</span> sortedBy)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.sortedBy = sortedBy;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> String.format(<span class="string">&quot;%s+%s&quot;</span>, <span class="built_in">this</span>.sortedBy, <span class="built_in">this</span>.nonSortedBy);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Declaring a new List with Foo class type:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Foo&gt; fooList = Lists.newArrayList(</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="literal">null</span>, <span class="string">&quot;abc&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="number">23</span>, <span class="string">&quot;abc&quot;</span>),</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="number">10</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p>Define a new function that will return an customized <code>Ordering</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Ordering&lt;Foo&gt; <span class="title function_">getNaturalFooOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Ordering.natural().nullsFirst().onResultOf(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Foo, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(<span class="meta">@Nullable</span> Foo foo)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> foo.getSortedBy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ordering&lt;Foo&gt; fooOrdering = getNaturalFooOrder();</span><br><span class="line"><span class="comment">// the result will be [null+abc, 10+abc, 23+abc]</span></span><br><span class="line">System.out.println(fooOrdering.sortedCopy(fooList));</span><br></pre></td></tr></table></figure><p><code>greatestOf(Iterable iterable, int k)</code><br>Returns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the result will be [23+abc]</span></span><br><span class="line">System.out.println(fooOrdering.greatestOf(fooList, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// the result will be [23+abc, 10+abc]</span></span><br><span class="line">System.out.println(fooOrdering.greatestOf(fooList, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><code>leastOf(Iterable iterable, int k)</code><br>Returns the k least elements of the specified iterable, according to this ordering, in order from least to greatest. Not necessarily stable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the result will be [null+abc, 10+abc]</span></span><br><span class="line">System.out.println(fooOrdering.leastOf(fooList, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><code>min(Iterable)</code><br>Returns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the result will be null+abc</span></span><br><span class="line">System.out.println(fooOrdering.min(fooList));</span><br></pre></td></tr></table></figure><p><code>max(Iterable)</code><br>Returns the maximum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the result will be 23+abc</span></span><br><span class="line">System.out.println(fooOrdering.max(fooList));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP - Custom Tag</title>
      <link href="/2014/12/01/jsp-custom-tag/"/>
      <url>/2014/12/01/jsp-custom-tag/</url>
      
        <content type="html"><![CDATA[<p>Custom Tag is a user-defined JSP language element. When it is contained in JSP page and it will translate into a servlet, the custom tag is converted to opertions on an object called a tag handler. The web container then invokes those operations when the JSP page’s servlet is executed.   </p><p>If we want to create a custom tag, what we need to do is simply extend <code>SimpleTagSupport</code> class and override the <code>doTag()</code> method, where you can place your code to generate content for the tag.   </p><p>Let’s getting started to create a custom tag now.<br>As you can see below, consider we want to create two tag, one is user tag with name and isMale attribute, another is system tag with size attribute.</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom:user name=<span class="string">&quot;user1&quot;</span> isMale=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">&lt;custom:system size=<span class="string">&quot;1024&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><p>So firstly what we need to do is create two java classes that act as a tag handler for each other tag. and them must extends <code>SimpleTagSupport</code> class.   </p><figure class="highlight java"><figcaption><span>UserTag.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jsp.custom.tag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 12/1/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTag</span> <span class="keyword">extends</span> <span class="title class_">SimpleTagSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean isMale;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">JspWriter</span> <span class="variable">out</span> <span class="operator">=</span> getJspContext().getOut();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print name info with name attribute</span></span><br><span class="line">        out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print gender info via isMale attribute</span></span><br><span class="line">        out.println(isMale ? <span class="string">&quot;I&#x27;m male!&quot;</span> : <span class="string">&quot;I&#x27;m female!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (birthday != <span class="literal">null</span>) &#123;</span><br><span class="line">            out.println(String.format(<span class="string">&quot;My birthday is %s&quot;</span>, birthday.toString()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print body text with body content</span></span><br><span class="line">        getJspBody().invoke(sw);</span><br><span class="line">        getJspContext().getOut().println(sw.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsMale</span><span class="params">(Boolean isMale)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isMale = isMale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SystemTag.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jsp.custom.tag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yushi on 12/2/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemTag</span> <span class="keyword">extends</span> <span class="title class_">SimpleTagSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTag</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        getJspContext().getOut().println(String.valueOf(String.format(<span class="string">&quot;The system&#x27;s size is: %s&quot;</span>, String.valueOf(size))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Above two class just override the <code>doTag()</code> method and take the current <code>JspContext</code> object using <code>getJspContext()</code> method, and then send message content to the current <code>JspWriter</code> object.   </p><p>Secondly we need to create tld extention file. It’s a tag library file. let us see the codes.    </p><figure class="highlight xml"><figcaption><span>customTag.tld</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>custom tld<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.jsp.custom.tag.UserTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>tagdependent<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>user name<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- the type default is String if it is not specified --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;type&gt;java.lang.String&lt;/type&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>isMale<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">required</span>&gt;</span>false<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>the use is male or not male<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>java.lang.Boolean<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>birthday<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>java.util.Date<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>system<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.jsp.custom.tag.SystemTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">required</span>&gt;</span>false<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>&gt;</span>the size of system<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Finally, we can use these both tags in our JSP page.</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;custom&quot;</span> uri=<span class="string">&quot;WEB-INF/customTag.tld&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;custom tag training&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;custom:user name=<span class="string">&quot;user1&quot;</span> isMale=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;custom:system size=<span class="string">&quot;1024&quot;</span>/&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guava -- Common Object Methods</title>
      <link href="/2014/11/27/guava-common-object-method/"/>
      <url>/2014/11/27/guava-common-object-method/</url>
      
        <content type="html"><![CDATA[<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>Objects.equal(Object, Object)</code><br>Invoking this method then it will avoid the risking of NullPointerException when we need to compare two object whether they equal.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Objects.equal(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>); <span class="comment">// return true;</span></span><br><span class="line">Objects.equal(<span class="literal">null</span>, <span class="string">&quot;a&quot;</span>); <span class="comment">// return false;</span></span><br><span class="line">Objects.equal(<span class="literal">null</span>, <span class="literal">null</span>); <span class="comment">// return true;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><code>Objects.hashCode(Object, ....)</code><br>Generating hash code with multiple object will be simple. And it also can hash all fields of an Object to get more sensible code value.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generate hash code with multi object</span></span><br><span class="line">Objects.hashCode(<span class="built_in">this</span>.intField, <span class="built_in">this</span>.charField, <span class="built_in">this</span>.stringField, <span class="built_in">this</span>.dateField); </span><br></pre></td></tr></table></figure><p><code>ComparisonChain</code><br>ComparisonChain is a fluent idiom and much more readable. less prone to accidental typos, and smart enough not to do more work than it must.<br>It only performs comparisons until it finds a non-zero result, after which it ignores further input.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectsTraining</span> <span class="variable">objectsTraining</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectsTraining</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> ComparisonChain.start()</span><br><span class="line">   .compare(<span class="built_in">this</span>.intField, objectsTraining.intField)</span><br><span class="line">             .compare(<span class="built_in">this</span>.stringField, objectsTraining.stringField)</span><br><span class="line">             .compare(<span class="built_in">this</span>.charField, objectsTraining.charField)</span><br><span class="line">             .compare(<span class="built_in">this</span>.dateField, objectsTraining.dateField)</span><br><span class="line">             .result();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guava -- Preconditions</title>
      <link href="/2014/11/26/guava-preconditions/"/>
      <url>/2014/11/26/guava-preconditions/</url>
      
        <content type="html"><![CDATA[<p>Guava provides a number of precondition checking utilities. It’s <code>Preconditions</code> class. You can use it into your project.</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>checkArgument(boolean)</code><br>Checks that the boolean is true. Use for validating arguments to methods.   </p><p><code>checkNotNull(T)</code><br>Checks that the value is not null. Returns the value directly, so you can use checkNotNull(value) inline. </p><span id="more"></span>  <p><code>checkElementIndex(int index, int size)</code><br>Checks that index is a valid element index into a list, string, or array with the specified size. An element index may range from 0 inclusive to size exclusive. You don’t pass the list, string, or array directly; you just pass its size.<br>Returns index.   </p><p><code>checkPositionIndex(int index, int size)</code><br>Checks that index is a valid position index into a list, string, or array with the specified size. A position index may range from 0 inclusive to size inclusive. You don’t pass the list, string, or array directly; you just pass its size.<br>Returns index.   </p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">Preconditions.checkArgument(i &gt; <span class="number">5</span>, <span class="string">&quot;Argument %s is not larger than 5&quot;</span>, i);</span><br><span class="line"><span class="comment">// will throw IllegalArgumentException with &quot;Argument 3 is not larger than 5&quot;</span></span><br><span class="line"></span><br><span class="line">Preconditions.checkNotNull(i); <span class="comment">// return 3;</span></span><br><span class="line">Preconditions.checkNotNull(<span class="literal">null</span>); <span class="comment">// throw NullPointerException;</span></span><br><span class="line"></span><br><span class="line">Preconditions.checkElementIndex(i,<span class="number">4</span>); <span class="comment">// return 3</span></span><br><span class="line">Preconditions.checkElementIndex(i,<span class="number">3</span>); <span class="comment">// throw IndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">Preconditions.checkPositionIndex(i,<span class="number">3</span>); <span class="comment">// return 3</span></span><br><span class="line">Preconditions.checkPositionIndex(i,<span class="number">2</span>); <span class="comment">// throw IndexOutOfBoundsException</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guava -- Optional</title>
      <link href="/2014/11/21/guava-optional/"/>
      <url>/2014/11/21/guava-optional/</url>
      
        <content type="html"><![CDATA[<p><code>Optional&lt;T&gt;</code> is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is “present”), or it may contain nothing (in which case we say the reference is “absent”). It is never said to “contain null.”</p><span id="more"></span><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p><code>Optional.of(T)</code><br>Make an Optional containing the given non-null value, or fail fast on null.    </p><p><code>Optional.absent()</code><br>Return an absent Optional of some type.</p><p><code>Optional.fromNullable(T)</code><br>Turn the given possibly-null reference into an Optional, treating non-null as present and null as absent.   </p><p><code>boolean isPresent()</code><br>Returns true if this Optional contains a non-null instance.</p><p><code>T get()</code><br>Returns the contained T instance, which must be present; otherwise, throws an IllegalStateException.</p><p><code>T or()</code><br>Returns the present value in this Optional, or if there is none, returns the specified default.</p><p><code>T orNull()</code><br>Returns the present value in this Optional, or if there is none, returns null. The inverse operation of fromNullable.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><pre><code class="java">Optional&lt;Integer&gt; numberOptional = Optional.of(100);numberOptional.isPresent(); //return truenumberOptional.get(); //return 100numberOptional = Optional.absent();numberOptional.isPresent(); // return falsenumberOptional.or(0); //return 0;numberOptional.orNull(); //return null;numberOptional = Optional.fromNullable(1);numberOptional.get(); //return 1;numberOptional = Optional.fromNullable(null);numberOptional.isPresent(); //return false;numberOptional.orNull(); //return null;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The lifecycle of Android Activity</title>
      <link href="/2014/11/17/the-lifecycle-of-android-activity/"/>
      <url>/2014/11/17/the-lifecycle-of-android-activity/</url>
      
        <content type="html"><![CDATA[<p><img src="/assets/images/legacy/android-lifecycle.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/android-lifecycle.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="lifecycle of activity"></p>]]></content>
      
      
      <categories>
          
          <category> Mobile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building blocks of Android Application</title>
      <link href="/2014/11/13/building-blocks-of-android-application/"/>
      <url>/2014/11/13/building-blocks-of-android-application/</url>
      
        <content type="html"><![CDATA[<p>There are four builidng blocks for Android Application:   </p><ul><li><strong><code>Activity</code></strong></li><li><strong><code>Intent Receiver</code></strong></li><li><strong><code>Service</code></strong></li><li><strong><code>Content Provider</code></strong></li></ul><p>But Not every application needs have all them.   </p><p><code>AndroidManifest.xml</code> is XML file, it contains some information that where you declare the components of your application and what their capabilities and requirements are. </p><span id="more"></span>  <h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>Activities are the most common of the four Android building blocks. An activity is usually a single screen in your application. Each activity is implemented as single class that extends the Activity base class.    </p><p>When a new screen is opened, the previous screen is paused and put onto a history stack. The user can navigate backward through previously opened screens in the history.</p><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>Android uses a special class called <code>Intent</code> to move from screen to screen. Intent describe what an application wants done. The two most important parts of the intent data structure are the action and the data to act upon.    </p><p>Typical values for actioin are <code>MAIN</code> (the front door of the application), VIEW, PICK, EDIT, etc. The data is expressed as a Uniform Resource Indicator (URI).    </p><blockquote><p>new Intent(android.content.Intent.VIEW_ACTION, ContentURI.create(“<a href="http://anddev.org/">http://anddev.org</a>“);</p></blockquote><h3 id="Intent-Filter"><a href="#Intent-Filter" class="headerlink" title="Intent Filter"></a>Intent Filter</h3><p>Navigating from screen to screen is accomplished by resolving intents. An activity calls <code>startActivity(myIntent)</code> to navigation. The system then looks at the intent filters for all installed applications and picks activity whose intent filters best matches <code>myIntent</code>. And the new activity is informed by the intent which cause it to be launched.   </p><h3 id="Intent-Receiver"><a href="#Intent-Receiver" class="headerlink" title="Intent Receiver"></a>Intent Receiver</h3><p>You can use an IntentReceiver when you want code in your application to execute in reaction to an external event, for example, when the phone rings, or when the data network is available, or when it’s midnight. Intent receivers do not display UI.   </p><p>Intent receivers can be registered in the <code>AndroidManifest.xml</code> file, and also you can register it in your code with <code>Context.registerReceiver()</code>.    </p><p>Applications can also send their own intent broadcasts to others with <code>Context.broadcastIntent()</code>.   </p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>A <code>Service</code> is long-lived and runs without a UI, such as media player.   </p><p>You can start a service with <code>Context.startService()</code> to run in the background. And you can connect to a service with the <code>Context.bindService()</code> method. When you connected to a service. you can communicate with it through an interface exposed by the service. For the music service you can pause and rewind it etc.   </p><h3 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h3><p>Applications can store their data in files, a SQLite database, preferences or any other mechanism that makes sense.   </p><p>A content provider is useful if you want your application’s data to be shared with other applications.    </p><p>A content provider is a class that implements a standard set of methods to let other applications store and retrieve the type of data that is handled by that content provider.</p>]]></content>
      
      
      <categories>
          
          <category> Mobile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (technical notes)</title>
      <link href="/2014/08/07/visual-git-guide-technical-notes/"/>
      <url>/2014/08/07/visual-git-guide-technical-notes/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Technical-notes"><a href="#Technical-notes" class="headerlink" title="Technical notes"></a>Technical notes</h3><p>The contents of files are not actually stored in the index (.git&#x2F;index) or in commit objects. Rather, each file is stored in the object database (.git&#x2F;objects) as a blob, identified by its SHA-1 hash. The index file lists the filenames along with the identifier of the associated blob, as well as some other data. For commits, there is an additional data type, a tree, also identified by its hash. Trees correspond to directories in the working directory, and contain a list of trees and blobs corresponding to each filename within that directory. Each commit stores the identifier of its top-level tree, which in turn contains all of the blobs and other trees associated with that commit.   </p><span id="more"></span><p>If you make a commit using a detached HEAD, the last commit really is referenced by something: the reflog for HEAD. However, this will expire after a while, so the commit will eventually be garbage collected, similar to commits discarded with <code>git commit --amend</code> or <code>git rebase</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (reset command)</title>
      <link href="/2014/07/07/visual-git-guide-reset-command/"/>
      <url>/2014/07/07/visual-git-guide-reset-command/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Reset-command"><a href="#Reset-command" class="headerlink" title="Reset command"></a>Reset command</h3><p><strong>The reset command moves the current branch to another position</strong>, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory.   </p><p>If a commit is given with no filenames, the current branch is moved to that commit, and then the stage is updated to match this commit. If –hard is given, the working directory is also updated. If –soft is given, neither is updated.</p><span id="more"></span>   <p><img src="/assets/images/legacy/reset-commit.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/reset-commit.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="reset-commit"></p><p>If a commit is not given, it defaults to HEAD. In this case, the branch is not moved, but the stage (and optionally the working directory, if –hard is given) are reset to the contents of the last commit.   </p><p><img src="/assets/images/legacy/reset.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/reset.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="reset"></p><p>If a filename (and&#x2F;or -p) is given, then the command works similarly to checkout with a filename, except only the stage (and not the working directory) is updated. (You may also specify the commit from which to take files, rather than HEAD.)</p><p><img src="/assets/images/legacy/reset-files.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/reset-files.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="reset-files"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (rebase command)</title>
      <link href="/2014/06/13/visual-git-guide-rebase-command/"/>
      <url>/2014/06/13/visual-git-guide-rebase-command/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Rebase-command"><a href="#Rebase-command" class="headerlink" title="Rebase command"></a>Rebase command</h3><p>A rebase is an alternative to a merge for combining multiple branches. Whereas a merge creates a single commit with two parents, leaving a non-linear history, a rebase replays the commits from the current branch onto another, leaving a linear history. <em>In essence, this is an automated way of performing several cherry-picks in a row</em>.</p><span id="more"></span><p><img src="/assets/images/legacy/rebase.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/rebase.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="rebase"></p><p>The above command takes all the commits that exist in topic but not in master (namely 169a6 and 2c33a), replays them onto master, and then moves the branch head to the new tip. Note that the old commits will be garbage collected if they are no longer referenced.    </p><p>To limit how far back to go, use the –onto option. The following command replays onto master the most recent commits on the current branch since 169a6 (exclusive), namely 2c33a.   </p><p><img src="/assets/images/legacy/rebase-onto.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/rebase-onto.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="rebase-onto"></p><p>There is also <code>git rebase --interactive</code>, which allows one to do more complicated things than simply replaying commits, namely dropping, reordering, modifying, and squashing commits. There is no obvious picture to draw for this; see git-rebase(1) for more details.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (merge command)</title>
      <link href="/2014/06/11/visual-git-guide-merge-command/"/>
      <url>/2014/06/11/visual-git-guide-merge-command/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Merge-command"><a href="#Merge-command" class="headerlink" title="Merge command"></a>Merge command</h3><p>A merge creates a new commit that incorporates changes from other commits. Before merging, the stage must match the current commit. The trivial case is if the other commit is an ancestor of the current commit, in which case nothing is done. The next most simple is if the current commit is an ancestor of the other commit. This results in a fast-forward merge. The reference is simply moved, and then the new commit is checked out.  </p><span id="more"></span> <p><img src="/assets/images/legacy/merge-ff.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/merge-ff.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="merge-ff"></p><p>Otherwise, a “real” merge must occur. You can choose other strategies, but the default is to perform a “recursive” merge, which basically takes the current commit (ed489 below), the other commit (33104), and their common ancestor (b325c), and performs a three-way merge. The result is saved to the working directory and the stage, and then a commit occurs, with an extra parent (33104) for the new commit.   </p><p><img src="/assets/images/legacy/merge.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/merge.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="merge"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (diff command)</title>
      <link href="/2014/05/20/visual-git-guide-diff-command/"/>
      <url>/2014/05/20/visual-git-guide-diff-command/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address is <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Diff-Command"><a href="#Diff-Command" class="headerlink" title="Diff Command"></a>Diff Command</h3><p>There are various ways to look at differences between commits. Below are some common examples. Any of these commands can optionally take extra filename arguments that limit the differences to the named files.</p><span id="more"></span>   <p><img src="/assets/images/legacy/diff.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/diff.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="diff">   </p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (commit command)</title>
      <link href="/2014/05/03/visual-git-guide-commit-command/"/>
      <url>/2014/05/03/visual-git-guide-commit-command/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Commit-command"><a href="#Commit-command" class="headerlink" title="Commit command"></a>Commit command</h3><p>When you commit, git creates a new commit object using the files from the stage and sets the parent to the current commit. It then points the current branch to this new commit. In the image below, the current branch is <em>master</em>. Before the command was run, <em>master</em> pointed to ed489. Afterward, a new commit, f0cec, was created, with parent ed489, and then <em>master</em> was moved to the new commit.</p><span id="more"></span>   <p><img src="/assets/images/legacy/commit-master.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/commit-master.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="commit-master"></p><p>This same process happens even when the current branch is an ancestor of another. Below, a commit occurs on branch <em>maint</em>, which was an ancestor of <em>master</em>, resulting in 1800b. Afterward, <em>maint</em> is no longer an ancestor of <em>master</em>. To join the two histories, a <strong>merge</strong> (or <strong>rebase</strong>) will be necessary.   </p><p><img src="/assets/images/legacy/commit-maint.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/commit-maint.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="commit-maint"></p><p>Sometimes a mistake is made in a commit, but this is easy to correct with <code>git commit --amend</code>. When you use this command, git creates a new commit with the same parent as the current commit. (<em>The old commit will be discarded if nothing else references it.</em>)   </p><p><img src="/assets/images/legacy/commit-amend.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/commit-amend.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="commit-amend"></p><p>When <strong>HEAD</strong> is detached, commits work like normal, except no named branch gets updated. (<em>You can think of this as an anonymous branch.</em>)   </p><p><img src="/assets/images/legacy/commit-detached.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/commit-detached.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="commit-detached"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (cherry pick command)</title>
      <link href="/2014/05/01/visual-git-guide-cherry-pick-command/"/>
      <url>/2014/05/01/visual-git-guide-cherry-pick-command/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Cherry-pick-command"><a href="#Cherry-pick-command" class="headerlink" title="Cherry-pick command"></a>Cherry-pick command</h3><p>The cherry-pick command “copies” a commit, creating a new commit on the current branch with the same message and patch as another commit.   </p><p><img src="/assets/images/legacy/cherry-pick.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/cherry-pick.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="cherry-pick"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>visual git guide (checkout command)</title>
      <link href="/2014/04/21/visual-git-guide-checkout-command/"/>
      <url>/2014/04/21/visual-git-guide-checkout-command/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Checkout"><a href="#Checkout" class="headerlink" title="Checkout"></a>Checkout</h3><p>The checkout command is used to copy files from the history (or stage) to the working directory, and to optionally switch branches.   </p><p>When a filename (and&#x2F;or -p) is given, git copies those files from the given commit to the stage and the working directory. For example, git checkout HEAD~ foo.c copies the file foo.c from the commit called HEAD~ (the parent of the current commit) to the working directory, and also stages it. (<em>If no commit name is given, files are copied from the stage.</em>) <strong>Note that the current branch is not changed.</strong>   </p><p><img src="/assets/images/legacy/checkout-files.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/checkout-files.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="checkout-files"></p><span id="more"></span><p>When a filename is not given but the reference is a (local) branch, HEAD is moved to that branch (that is, we “switch to” that branch), and then the stage and working directory are set to match the contents of that commit. Any file that exists in the new commit (a47c3 below) is copied; any file that exists in the old commit (ed489) but not in the new one is deleted; and any file that exists in neither is ignored.   </p><p><img src="/assets/images/legacy/checkout-branch.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/checkout-branch.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="checkout-branch"></p><p>When a filename is not given and the reference is not a (local) branch — say, it is a tag, a remote branch, a SHA-1 ID, or something like master~3 — we get an anonymous branch, called a detached HEAD. This is useful for jumping around the history. Say you want to compile version 1.6.6.1 of git. You can git checkout v1.6.6.1 (which is a tag, not a branch), compile, install, and then switch back to another branch, say git checkout master. However, committing works slightly differently with a detached HEAD; this is covered below.   </p><p><img src="/assets/images/legacy/checkout-detached.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/checkout-detached.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="checkout-detached"></p><p>Once you check out something else, say master, the commit is (presumably) no longer referenced by anything else, and gets lost. Note that after the command, there is nothing referencing 2eecb.       </p><p><img src="/assets/images/legacy/checkout-after-detached.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/checkout-after-detached.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="checkout-after-detached">   </p><p>If, on the other hand, you want to save this state, you can create a new named branch using <code>git checkout -b name</code>.   </p><p><img src="/assets/images/legacy/checkout-b-detached.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/checkout-b-detached.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="checkout-b-detached"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (conventions)</title>
      <link href="/2014/04/13/visual-git-guide-conventions/"/>
      <url>/2014/04/13/visual-git-guide-conventions/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address is <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Conventions"><a href="#Conventions" class="headerlink" title="Conventions"></a>Conventions</h3><p><img src="/assets/images/legacy/conventions.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/conventions.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="conventions">   </p><span id="more"></span><p>Commits are shown in green as 5-character IDs, and they point to their parents. Branches are shown in orange, and they point to particular commits.The current branch is identified by the special reference HEAD, which is “attached” to that branch. In this image, the five latest commits are shown, with ed489 being the most recent. master (the current branch) points to this commit, while maint (another branch) points to an ancestor of master’s commit.</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual git guide (basic usage)</title>
      <link href="/2014/03/03/visual-git-guide-basic-usage/"/>
      <url>/2014/03/03/visual-git-guide-basic-usage/</url>
      
        <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address is <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p><h3 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><p><img src="/assets/images/legacy/basic-usage.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/basic-usage.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="basic-usage"></p><p>The four commands above copy files between the working directory, the stage (also called the index), and the history (in the form of commits).</p><span id="more"></span><ul><li><p><code>git add [files]</code> copies files (at their current state) to the stage.</p></li><li><p><code>git commit</code> saves a snapshot of the stage as a commit.</p></li><li><p><code>git reset -- [files]</code> unstages files; that is, it copies files from the latest commit to the stage. Use this command to “undo” a <em>git add files</em>. You can also <em>git reset</em> to unstage everything.</p></li><li><p><code>git checkout -- [files]</code> copies files from the stage to the working directory. Use this to throw away local changes.</p></li></ul><p>You can use <code>git reset -p</code>, <code>git checkout -p</code>, or <code>git add -p</code> instead of (or in addition to) specifying particular files to interactively choose which hunks copy.   </p><p>It is also possible to jump over the stage and check out files directly from the history or commit files without staging first.   </p><p><img src="/assets/images/legacy/basic-usage-2.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/basic-usage-2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="basic-usage-2"></p><ul><li><p><code>git commit -a</code> is equivalent to running git add on all filenames that existed in the latest commit, and then running git commit.   </p></li><li><p><code>git commit [files]</code> creates a new commit containing the contents of the latest commit, plus a snapshot of files taken from the working directory. Additionally, files are copied to the stage.   </p></li><li><p><code>git checkout HEAD -- [files]</code> copies files from the latest commit to both the stage and the working directory.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commands (3)</title>
      <link href="/2014/02/21/git-commands-3/"/>
      <url>/2014/02/21/git-commands-3/</url>
      
        <content type="html"><![CDATA[<h3 id="Redo-Commits"><a href="#Redo-Commits" class="headerlink" title="Redo Commits"></a>Redo Commits</h3><ul><li><p>Undo all commits after [commit], and preserve changes locally:<br><code>$ git reset [commit]</code>   </p></li><li><p>Discard all history and changes back to the specified commit:<br><code>$ git reset --hard [commit]</code></p></li></ul><span id="more"></span><h3 id="Save-Fragments"><a href="#Save-Fragments" class="headerlink" title="Save Fragments"></a>Save Fragments</h3><ul><li><p>Temporarily stores all modified <strong>tracked</strong> files:<br><code>$ git stash</code></p></li><li><p>Retore the most recently stashed files:<br><code>$ git stash pop</code></p></li><li><p>List all stashed changesets:<br><code>$ git stash list</code></p></li><li><p>Discard the most recently stashed changeset:<br><code>$ git stash drop</code></p></li></ul><h3 id="Synchronize-Changes"><a href="#Synchronize-Changes" class="headerlink" title="Synchronize Changes"></a>Synchronize Changes</h3><ul><li><p>Download all history from the repostory bookmark:<br><code>$ git fetch [bookmark]</code></p></li><li><p>Combine bookmark’s branch into current branch:<br><code>$ git merge [bookmark]/[branch]</code></p></li><li><p>Upload all local branch commits to Github:<br><code>$ git push [alias] [branch]</code></p></li><li><p>Downloads bookmark history and incorporates changes:<br><code>$ git pull</code></p></li><li><p>Copy a commit and create a new commit on the current branch with the same message and patch as another commit:<br><code>$ git cherry-pick [commit]</code></p></li><li><p>merge the version history of current branch onto another specified branch:<br><code>$ git rebase [branch]</code></p></li><li><p>merge the version history after specified commit of current branch onto another specified branch:<br><code>$ git rebase --onto [branch] [commit]</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commands (2)</title>
      <link href="/2014/02/09/git-commands-2/"/>
      <url>/2014/02/09/git-commands-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Group-Changes"><a href="#Group-Changes" class="headerlink" title="Group Changes"></a>Group Changes</h3><ul><li><p>List all local branches in the current repository:<br><code>$ git branch</code>   </p></li><li><p>Create a new branch with specified name:<br><code>$ git branch [branch-new]</code>   </p></li><li><p>Switch to the specified branch and updates the working directory:<br><code>$ git checkout [branch-name]</code></p></li><li><p>Combine the specified branch to the current branch:<br><code>$ git merge [branch-name]</code></p></li><li><p>Delete the specified branch:<br><code>$ git branch -d [branch-name]</code></p></li></ul><span id="more"></span><h3 id="Suppress-Tracking"><a href="#Suppress-Tracking" class="headerlink" title="Suppress Tracking"></a>Suppress Tracking</h3><ul><li><p>A text file named <code>.gitigore</code> suppresses accidental versioning of files and paths matching the specified patterns, for example:<br><code>*.log temp-* dir/*</code><br>will ignore log file and started with temp- files and all files in dir directory.   </p></li><li><p>List all ignore files in this project:<br><code>$ git ls-files --other --ignored --exclude-standard</code></p></li></ul><h3 id="Review-History"><a href="#Review-History" class="headerlink" title="Review History"></a>Review History</h3><ul><li><p>List all version history for the current branch:<br><code>$ git log</code></p></li><li><p>List viewsion history for a single file, including rename:<br><code>$ git log --follow [file]</code></p></li><li><p>Show content differences between two branchs:<br><code>$ git diff [first-branch] [second-branch]</code></p></li><li><p>Output metadata and content changes of the specified name:<br><code>$ git show [commit]</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commands (1)</title>
      <link href="/2014/01/16/git-commands-1/"/>
      <url>/2014/01/16/git-commands-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h3><ul><li><p>Sets the name you want attached to your commit transactions:<br><code>$ git config --global user.name &quot;[name]&quot;</code>   </p></li><li><p>Sets the email you want attached to your commit transactions:<br><code>$ git config --global user.email &quot;[email]&quot;</code>   </p></li><li><p>Enable git color for command line output:<br><code>$ git config --global color.ui true</code></p></li></ul><span id="more"></span><h3 id="Create-Repositories"><a href="#Create-Repositories" class="headerlink" title="Create Repositories"></a>Create Repositories</h3><ul><li><p>Create a new repository with the specifical name, it will create a specified name directory with git:<br><code>$ git init [project-name]</code>   </p></li><li><p>Init current directory to git repository:<br><code>$ git init</code>   </p></li><li><p>Downloads a project by repository url:<br><code>$ git clone [url]</code>   </p></li><li><p>add local repository to remote repository:<br><code>$ git remote add [remote-name] [remote-repository-url]</code></p></li></ul><h3 id="Make-Changes"><a href="#Make-Changes" class="headerlink" title="Make Changes"></a>Make Changes</h3><ul><li><p>List all currently new or modified or deleted files:<br><code>$ git status</code>   </p></li><li><p>Show all differences of each modified file before staged:<br><code>$ git diff</code>   </p></li><li><p>Show differences of specified file before staged:<br><code>$ git diff [file]</code></p></li><li><p>Show differences of file between staging and the last file version:<br><code>$ git diff --staged</code>   </p></li><li><p>Add all new or modified files to snapshot for commit:<br><code>$ git add .</code> or <code>$ git add --all</code>   </p></li><li><p>Add specified file to stage for commit:<br><code>$ git add [file]</code>   </p></li><li><p>Discard the changes of specified file in working directory:<br><code>$ git checkout [file]</code>   </p></li><li><p>remove the file which has been deleted from local from stage:<br><code>$ git rm [file]</code>   </p></li><li><p>Removes the file from version control but preserves the file locally:<br><code>$ git rm --cached [file]</code></p></li><li><p>Change the file name and prepare it for commit:<br><code>$ git mv [file-original] [file-renamed]</code>   </p></li><li><p>Unstage the file, but preserve its content:<br><code>$ git reset [file]</code>   </p></li><li><p>Commit files which was newed or modified or deleted:<br><code>$ git commit -m&quot;[descriptive message]&quot;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Git</title>
      <link href="/2014/01/03/what-is-git/"/>
      <url>/2014/01/03/what-is-git/</url>
      
        <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><img src="/assets/images/legacy/git-logo.png" class="lazyload placeholder" data-srcset="/assets/images/legacy/git-logo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Git"> is <code>open source distributed version control system</code> that allows a team of people to work together, all using the same files. And it helps the team cope with the confusion that tends to happen when multiple people are editing the same files.</p><span id="more"></span>   <p>And also <code>git</code> supplies the GUI client mode and command line mode. You can choose which you prefer to.   </p><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ul><li><p>GitHub for windows<br>You can go to offical website and download windows version as below address:<br><a href="https://windows.github.com/">https://windows.github.com</a></p></li><li><p>GitHub for Mac<br>Go to offical website and download mac version as below address:<br><a href="https://mac.github.com/">https://mac.github.com</a></p></li><li><p>Git for all platforms<br><code>Git</code> distributions for Linux and POSIX systems are available on the offical Git SCM web sit:<br><a href="http://git-scm.com/">http://git-scm.com</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Andriod</title>
      <link href="/2013/10/03/what-is-andriod/"/>
      <url>/2013/10/03/what-is-andriod/</url>
      
        <content type="html"><![CDATA[<p><img src="/assets/images/legacy/android.jpg" class="lazyload placeholder" data-srcset="/assets/images/legacy/android.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="Andriod"><br><code>Andriod</code> is built on the open linux kernel. Furthermore, it utilizes a custom virtual machine that has been designed to optimize memory and hardware resource in a mobile environment.</p><span id="more"></span>   <p>And this virtual machine is called <code>Dalvik</code> virtual machine(<code>DalvikVM</code>), which is  a register based on virtual machine, designed and written by <em>Dan Bornstein</em> and some other Google engineers, it’s an important part of the <code>Andriod</code> platform. And it differece to normal Java virtual machines(<code>JVM</code>) which are stack based.   </p><p>Developers can 100% customize their <code>Andriod-Device</code>. The <code>Andriod</code> System Communication is based on called <code>Intents</code>, which are more or less just a String(with some data attached) which defines an anction that needs to be handled.For example:   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span><br></pre></td></tr></table></figure><p>If you want to develope <code>Andriod</code> applications, firstly you need to install the development tools just like <code>ADT</code>(Andriod Development Tools), you can download it  for mac from <a href="https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip">here</a>, or go to this <a href="http://developer.android.com/sdk/index.html">website</a> download it for other os.   </p><p>And you can visit the offical website of <code>Andriod</code> from <a href="http://developer.android.com/index.html">here</a>. There have some steps which can teach how to get started and how to develop an Andriod application, even supplies lots of application examples.   </p><p>So just enjoy it. Have your fun!</p>]]></content>
      
      
      <categories>
          
          <category> Mobile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backslash escapes in Markdown</title>
      <link href="/2013/07/03/backslash-escapes-in-markdown/"/>
      <url>/2013/07/03/backslash-escapes-in-markdown/</url>
      
        <content type="html"><![CDATA[<p><code>Markdown</code> allows you to use backslash to generate literal characters that possesses<br>special meaning in <code>Markdown</code> syntax.  </p><p><code>Markdown</code> provides backslash escapes for the following characters:  </p><blockquote><ul><li>\ blackslash</li><li>&#96; backtick</li><li>* asterisk</li><li>_ underscore</li><li>{} curly braces</li><li>[] square brackets</li><li>() parentheses</li><li># hash mark</li><li>+ push sign</li><li>- minus sign (hyphen)</li><li>. dot</li><li>! exclamation mark</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown syntax for span elements</title>
      <link href="/2013/06/24/markdown-syntax-for-span-elements/"/>
      <url>/2013/06/24/markdown-syntax-for-span-elements/</url>
      
        <content type="html"><![CDATA[<h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p><code>Markdown</code> supports two styles for Links:  </p><ul><li><em>inline</em> <blockquote><p><em><strong>Syntax:</strong></em><br><code>[inline link text](www.inlinelink.com &quot;optional title&quot;)</code></p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><a href="www.inlinelink.com" title="optional title">inline link text</a></p></blockquote></li></ul><span id="more"></span><ul><li><em>reference</em><blockquote><p><em><strong>Syntax:</strong></em><br><code>[reference link text][id]</code><br><code>[id]: www.referencelink.com &quot;optional title&quot;</code></p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><a href="www.referencelink.com" title="optional title">reference link text</a></p></blockquote></li></ul><blockquote><p><em><strong>Note:</strong></em><br>The <code>optional title</code> is not necessary.  You can input it for your demand.<br>Link definitions can be placed anywhere in your <code>Markdown</code> document.</p></blockquote><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p><code>Markdown</code> uses asterisk(*) and underscore(_) symbol to wraps the text that you want to emphasis.  </p><ul><li><p>Use one symbol asterisk<code>*</code> or underscore<code>_</code> to wrap text, it will produce the <code>&lt; em&gt;</code> tag of HTML Tags.  </p><blockquote><p><em><strong>Syntax:</strong></em><br><code>*Sample Text*</code>  or <code>_Sample Text_</code></p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><em>Sample Text</em> or <em>Sample Text</em></p></blockquote></li><li><p>Use double symbols asterisk<code>*</code> or underscore<code>_</code>, it will produce the <code>&lt; strong&gt;</code> tag of HTML Tags.  </p><blockquote><p><em><strong>Syntax:</strong></em><br><code>**Sample Text**</code> or <code>__Sample Text__</code></p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><strong>Sample Text</strong> or <strong>Sample Text</strong></p></blockquote></li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><code>Markdown</code> uses backtick quotes<code>`</code> to wrap the code text. It will produce the <code>&lt; code&gt;</code> tag of HTML tags.</p><blockquote><p><em><strong>Syntax:</strong></em><br><code>`Code statement`</code></p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><code>Code statement</code></p></blockquote><p>And if you want to wrap the backtick quote<code>`</code> symbol. you can use double backticks as the opening and closing delimiter.  </p><blockquote><p><em><strong>Syntax:</strong></em><br>` ` There is a literal backtick(`) here ` `</p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><code> There is a literal backtick(`) here</code></p></blockquote><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p><code>Markdown</code> uses an image syntax that is intended to resemble the syntax for links, allowing <em>inline</em> and <em>reference</em>  </p><ul><li><p><em>inline</em></p><blockquote><p><em><strong>Syntax:</strong></em><br><code>![alt text](http://daringfireball.net/graphics/logos/ &quot;optional title&quot;)</code>  </p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><img src="http://daringfireball.net/graphics/logos/" class="lazyload placeholder" data-srcset="http://daringfireball.net/graphics/logos/" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="alt text" title="optional title"></p></blockquote></li><li><p><em>reference</em></p><blockquote><p><em><strong>Syntax:</strong></em><br><code>![alt text][id]</code><br><code>[id]:http://daringfireball.net/graphics/logos/ &quot;optional title&quot;</code>  </p></blockquote><blockquote><p><em><strong>Effect:</strong></em><br><img src="http://daringfireball.net/graphics/logos/" class="lazyload placeholder" data-srcset="http://daringfireball.net/graphics/logos/" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="alt text" title="optional title"></p></blockquote></li></ul><blockquote><p><em><strong>Note:</strong></em><br><code>Markdown</code> has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML <code>&lt; img&gt;</code> tags.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What editor tools used for Markdown</title>
      <link href="/2013/05/21/what-editor-tools-used-for-markdown/"/>
      <url>/2013/05/21/what-editor-tools-used-for-markdown/</url>
      
        <content type="html"><![CDATA[<p>There have many editor tools for Markdown now, but we just recommend a few of popular tools for you. You can choose it which you like. Hope it will be helpful for you.</p><h3 id="Online-tools"><a href="#Online-tools" class="headerlink" title="Online tools"></a>Online tools</h3><ul><li><p><a href="https://stackedit.io/">StackEdit</a></p><p>   In browser Markdown editor, it supplies many commands to create Markdown syntax instead of type it manually. And also it have supported many other functions, for example import, export and manage Markdown files.</p></li></ul><span id="more"></span><ul><li><p><a href="http://dillinger.io/">Dillinger</a></p><p>  It’s online Markdown editor too,  but it supports functions less than <code>StackEdit</code> supports. Oh, one interesting things, you can change the theme whatever you like.</p></li></ul><blockquote><p><em><strong>Tip:</strong></em></p></blockquote><blockquote><p>Strongly recommend use <code>StackEdit</code> online editor. It supports almost all very useful functions for you. Trust me, you will like it. Just try it out. And one more thing, this blog is written with <code>StackEdit</code>.</p></blockquote><h3 id="Local-tools"><a href="#Local-tools" class="headerlink" title="Local tools"></a>Local tools</h3><ul><li><p><a href="http://markdownpad.com/">MarkdownPad</a></p><p>  It supplies many keyboard shortcuts and menu tools. </p></li><li><p><a href="http://sourceforge.net/p/retext/home/ReText/">ReText</a></p><p>  It can export the edited content to <code>PDF</code>, <code>OCD</code>, <code>HTML</code> and plain text file.</p></li><li><p><a href="http://mouapp.com/">Mou</a></p><p>  Mou is a epic Markdown editor on Mac. It supports almost all useful functions.</p></li><li><p><a href="http://cloose.github.io/CuteMarkEd">CuteMarkEd</a></p><p>  It supplies real time view content and math expression</p></li><li><p><a href="http://code52.org/DownmarkerWPF/">MarkPad</a></p><p>  It’s a open source Markdown editor. And it use windows 8 metro style.</p></li><li><p><a href="http://pad.haroopress.com/user.html">Haroopad</a></p><p>  It cover three popular system, Windows, Mac OS X, Linux. Strongly recommend use it under Linux system.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdonw syntax for block elements</title>
      <link href="/2013/05/11/markdonw-syntax-for-block-elements/"/>
      <url>/2013/05/11/markdonw-syntax-for-block-elements/</url>
      
        <content type="html"><![CDATA[<h3 id="Line-breaks"><a href="#Line-breaks" class="headerlink" title="Line breaks"></a>Line breaks</h3><p>Markdown can’t break line automatically in paragraph. The break line is a break tag <code>&lt; br /&gt;</code> in HTML. If you want to break line in paragraph, you need to <code>end a line with two or more spaces</code>, then type return.  </p><span id="more"></span><h3 id="Heads"><a href="#Heads" class="headerlink" title="Heads"></a>Heads</h3><p>Markdown supports two styles for heads, one style is Setext, another is atx.  </p><ul><li>Setext style headers are “underlined” using equal signs <code>=</code> (for <code>first-level-headers</code>) and using dashed signs <code>-</code> (for <code>second-level-headers</code>).</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">====</span><br><span class="line">This is an H2</span><br><span class="line">----</span><br></pre></td></tr></table></figure><ul><li>Atx style headers use 1 to 6 hash characters <code>#</code> at the start of the line, corresponding to header levels 1-6.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># This is an H1</span><br><span class="line">## This is an H2</span><br><span class="line">###### This is an H6</span><br></pre></td></tr></table></figure><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>Just put a <code>&gt;</code> symbol before each line, like this:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote line </span><br></pre></td></tr></table></figure><p>You can put the symbol <code>&gt;</code> before the first line of a hard-wrapped paragraph.<br>And also blockquotes can be nested (i.e. a blackquote-in-a-blackquote) by adding additional levels of the symbol <code>&gt;</code>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is first level blockquote</span><br><span class="line">&gt; &gt; This is nested blockquote </span><br></pre></td></tr></table></figure><p>Blockquotes can contains other Markdown elements, including header, list, and codeblocks.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; # This is an H1</span><br><span class="line">&gt; - This is first list item</span><br><span class="line">&gt; - This is second list item</span><br></pre></td></tr></table></figure><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Markdown supports ordered (numbered) and unordered (bulleted) lists.  </p><ul><li>Unordered lists use asterisks <code>*</code>, pluses <code>+</code>, hyphens <code>-</code> before each list line.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* item1</span><br><span class="line">* item2</span><br><span class="line">+ item3</span><br><span class="line">- item4</span><br></pre></td></tr></table></figure><ul><li>Ordered list user numbers followed by each line:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. item1</span><br><span class="line">2. item2</span><br><span class="line">3. item3</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>Note:</strong></em><br>If you want a ordered list, you need use ordinal numbers in you ordered Markdown lists, and start 1 at first item.  </p></blockquote><h3 id="Code-blocks"><a href="#Code-blocks" class="headerlink" title="Code blocks"></a>Code blocks</h3><p>Pre-formatted code blocks are used fro programming or other markup source code, rather than forming normal paragraph.  </p><p>Its’ very simple to produce code blocks, just indent every line of block at least 4 spaces or 1 tab.  </p><pre><code>This codeblock use 1 tab to generate</code></pre><h3 id="Horizontal-rules"><a href="#Horizontal-rules" class="headerlink" title="Horizontal rules"></a>Horizontal rules</h3><p>The horizontal rule tag &lt; hr &#x2F;&gt; is used to divide up and down content.  and you can place at least three asterisks <code>*</code>, hyphens <code>-</code>, or underscores <code>_</code> on a line by themselves.  </p><pre><code>-----*****_____</code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Markdown</title>
      <link href="/2013/04/14/what-is-markdown/"/>
      <url>/2013/04/14/what-is-markdown/</url>
      
        <content type="html"><![CDATA[<p>Markdown is a <strong>text-to-HTML</strong> conversion tool for web writer. It can convert plain text format to  valid <code>XHTML</code>(or <code>HTML</code>) structure that can be represented by browser.</p><span id="more"></span><p>Markdown is very easy to read, very easy to write plain text format. Even though for these people who don’t know web technique. </p><p>Thus, Markdown is two things:</p><blockquote><ul><li>A  plain text formatting syntax.</li></ul></blockquote><blockquote><ul><li>A software tool, written by Perl, and converts plain text format to HTML.</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
