<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jsp | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/jsp/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-03-03T23:04:38+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu SHI]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSP - Custom Tag]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/01/jsp-custom-tag/"/>
    <updated>2014-12-01T21:30:41+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/01/jsp-custom-tag</id>
    <content type="html"><![CDATA[<p>Custom Tag is a user-defined JSP language element. When it is contained in JSP page and it will translate into a servlet, the custom tag is converted to opertions on an object called a tag handler. The web container then invokes those operations when the JSP page&rsquo;s servlet is executed.</p>

<p>If we want to create a custom tag, what we need to do is simply extend <code>SimpleTagSupport</code> class and override the <code>doTag()</code> method, where you can place your code to generate content for the tag.</p>

<p>Let&rsquo;s getting started to create a custom tag now. <br/>
As you can see below, consider we want to create two tag, one is user tag with name and isMale attribute, another is system tag with size attribute.</p>

<pre><code class="jsp">&lt;custom:user name="user1" isMale="true"/&gt;
&lt;custom:system size="1024"/&gt;
</code></pre>

<!-- more -->


<p>So firstly what we need to do is create two java classes that act as a tag handler for each other tag. and them must extends <code>SimpleTagSupport</code> class. <br/>
&#8220;` java UserTag.java
package com.jsp.custom.tag;</p>

<p>import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Date;</p>

<p>/<em>*
 * Created by yushi on 12/1/14.
 </em>/
public class UserTag extends SimpleTagSupport {
    private String name;
    private Boolean isMale;
    private Date birthday;</p>

<pre><code>private StringWriter sw = new StringWriter();

public void doTag() throws JspException, IOException
{
    JspWriter out = getJspContext().getOut();

    // print name info with name attribute
    out.println(name);

    // print gender info via isMale attribute
    out.println(isMale ? "I'm male!" : "I'm female!");

    if (birthday != null) {
        out.println(String.format("My birthday is %s", birthday.toString()));
    }

    // print body text with body content
    getJspBody().invoke(sw);
    getJspContext().getOut().println(sw.toString());
}

public void setName(String name) {
    this.name = name;
}

public void setIsMale(Boolean isMale) {
    this.isMale = isMale;
}

public void setBirthday(Date birthday) {
    this.birthday = birthday;
}
</code></pre>

<p>}
&#8220;`</p>

<pre><code class="java SystemTag.java">package com.jsp.custom.tag;

import javax.servlet.jsp.tagext.SimpleTagSupport;
import java.io.IOException;

/**
 * Created by yushi on 12/2/14.
 */
public class SystemTag extends SimpleTagSupport {
    private int size;

    public void doTag() throws IOException {
        getJspContext().getOut().println(String.valueOf(String.format("The system's size is: %s", String.valueOf(size))));
    }

    public void setSize(int size) {
        this.size = size;
    }
}
</code></pre>

<p>Above two class just override the <code>doTag()</code> method and take the current <code>JspContext</code> object using <code>getJspContext()</code> method, and then send message content to the current <code>JspWriter</code> object.</p>

<p>Secondly we need to create tld extention file. It&rsquo;s a tag library file. let us see the codes.  <br/>
<code>xml customTag.tld
&lt;taglib&gt;
    &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;
    &lt;jsp-version&gt;2.0&lt;/jsp-version&gt;
    &lt;short-name&gt;custom tld&lt;/short-name&gt;
    &lt;tag&gt;
        &lt;name&gt;user&lt;/name&gt;
        &lt;tag-class&gt;com.jsp.custom.tag.UserTag&lt;/tag-class&gt;
        &lt;body-content&gt;tagdependent&lt;/body-content&gt;
        &lt;attribute&gt;
            &lt;name&gt;name&lt;/name&gt;
            &lt;required&gt;true&lt;/required&gt;
            &lt;description&gt;user name&lt;/description&gt;
            &lt;!-- the type default is String if it is not specified --&gt;
            &lt;!--&lt;type&gt;java.lang.String&lt;/type&gt;--&gt;
        &lt;/attribute&gt;
        &lt;attribute&gt;
            &lt;name&gt;isMale&lt;/name&gt;
            &lt;required&gt;false&lt;/required&gt;
            &lt;description&gt;the use is male or not male&lt;/description&gt;
            &lt;type&gt;java.lang.Boolean&lt;/type&gt;
        &lt;/attribute&gt;
        &lt;attribute&gt;
            &lt;name&gt;birthday&lt;/name&gt;
            &lt;type&gt;java.util.Date&lt;/type&gt;
        &lt;/attribute&gt;
    &lt;/tag&gt;
    &lt;tag&gt;
        &lt;name&gt;system&lt;/name&gt;
        &lt;tag-class&gt;com.jsp.custom.tag.SystemTag&lt;/tag-class&gt;
        &lt;body-content&gt;empty&lt;/body-content&gt;
        &lt;attribute&gt;
            &lt;name&gt;size&lt;/name&gt;
            &lt;required&gt;false&lt;/required&gt;
            &lt;description&gt;the size of system&lt;/description&gt;
        &lt;/attribute&gt;
    &lt;/tag&gt;
&lt;/taglib&gt;
</code></p>

<p>Finally, we can use these both tags in our JSP page.
<code>jsp
&lt;%@ taglib prefix="custom" uri="WEB-INF/customTag.tld" %&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;custom tag training&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;custom:user name="user1" isMale="true"/&gt;
        &lt;custom:system size="1024"/&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></p>
]]></content>
  </entry>
  
</feed>
