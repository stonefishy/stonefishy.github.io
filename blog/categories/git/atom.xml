<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Stonefishy Blog]]></title>
  <link href="https://stonefishy.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://stonefishy.github.io/"/>
  <updated>2023-08-30T23:36:26+08:00</updated>
  <id>https://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Andrew Shi]]></name>
    <email><![CDATA[andrewsy@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[代码审查之Pull Request]]></title>
    <link href="https://stonefishy.github.io/blog/2015/11/22/code-review-with-pull-request/"/>
    <updated>2015-11-22T13:54:34+08:00</updated>
    <id>https://stonefishy.github.io/blog/2015/11/22/code-review-with-pull-request</id>
    <content type="html"><![CDATA[<p>代码审查(Code Review)一直是一个高效团队里面必备的流程，团队成员可以通过它达到技术交流，相互学习以及提升自身编码水平的目的。当然它的目的并不止于此，我们在做某一件事的过程中，所用的技能和工具不外乎都是为了能使结果更符合我们的期望，就拿建筑工程来说，质量控制就是其把控最严的一关，有专门的质量管理领导小组、质量组织管理体系制度来贯穿这个过程，其最终目的就是为了使这栋建筑坚固牢稳，避免随时有可能崩塌的危险。</p>

<!-- more -->


<p>软件开发也一样，代码审查的另外一个目的就是为了保证软件的质量，避免系统中存在较多的Bug（软件中Bug是无法避免的，此处意思是尽量减少Bug出现的几率）。在我们以往的代码审查过程中，采用的主要形式是开发人员围在一起查看今天是否有哪些代码提交，然后针对提交的代码过一遍，发现有好的实践就相互学习，针对待提升的代码讨论后由Owner自己下去修改。这个过程看似很正常，其实里面存在较多的问题：</p>

<ul>
<li>其一，好的实践并没有在代码中标明，以及为什么是个好的实践，而且当想回顾查找的时候很困难；</li>
<li>其二，每个开发人员对同一个提交的想法和见解可能不一样，但是这些想法和见解却并没有被记录下来；</li>
<li>其三，也是最重要的一个，没有载体去记录哪些代码须改进，那么在下次Review的过程中，并不是所有人都记得上次有哪些代码是否已经改进了，这就会导致代码的质量没有受到监管。</li>
</ul>


<p>任何一种工作方法，如果有工具的辅助，就可以大大提高其效率。Pull Request就是代码审查的一种工作流工具，它并不是DVCS(Distributed Version Control System)比如git的一个特性，通过它可以使代码审查更有效率。而我们大多项目现在都是用Stash（现在已更名为Bitbucket）或Github作为代码仓库，两者均提供了这种方式来确保代码质量。</p>

<p>那么如何通过Pull Request来体现我们的代码质量管理过程呢？首先代码质量管理小组需要由项目中比较资深的研发人员构成，他们是Pull Request的Reviewer不可缺少的成员，用于把控提交的代码是否可以通过，当然，最好是全体研发人员一起加入。而代码质量管理体系制度其实也就是我们常说的一些规范和实践，包括项目统一的编码风格、代码的可读性、可维护性、合理的单元测试以及提倡的一些最佳实践等等。Reviewer可以通过此类体系来鉴别所提交的代码质量是否可以过关。</p>

<p>在此处我们并不阐述如何创建一个Pull Request，我们的焦点在于用它来解决之前遇到的问题。以我们现在项目中用的Stash为例，当Pull Request已创建并通知Reviewer后，Reviewer可以查看其提交代码，做出以下Action:</p>

<ul>
<li>针对好的实践代码或设计可以在其位置标注上注释，以备后续回顾查找时容易找到。</li>
<li>建议被添加为Reviewer的开发人员均要在此次的Pull Request中留下自己的意见，这样在后续的集体Code Review中可以查看到相互的见解。</li>
<li>如果发现代码存在问题的，可以及时在代码中留下注释。如果代码提交者对这个注释也赞同，可当即修改并更新Pull Request，这样可以保证代码是已经修正过的。</li>
</ul>


<p><img src="/assets/images/stash-pull-request.png" alt="stash-pull-request.png" /></p>

<p>当一个Pull Request相关问题都已修改后或不存在任何问题时，就可以直接Approve并Merge到CodeBase中去，这样能够很好的确保CodeBase中的代码是经过监管控制过的。而且在Stash的Pull Request中，还可以设置当须不少于指定个数的Reviewer同意代码提交通过后，提交者才有权限Merge到CodeBase中。这样也能极大的确保项目的代码质量规范是整体开发人员认同的。</p>

<p>总之，Pull Request工作流程的方式可以很大的提高代码审查的质量以及效率，有工具，为何不加以合理使用呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Git Guide (Technical Notes)]]></title>
    <link href="https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-technical-notes/"/>
    <updated>2014-11-07T00:00:00+08:00</updated>
    <id>https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-technical-notes</id>
    <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p>

<h3>Technical notes</h3>

<p>The contents of files are not actually stored in the index (.git/index) or in commit objects. Rather, each file is stored in the object database (.git/objects) as a blob, identified by its SHA-1 hash. The index file lists the filenames along with the identifier of the associated blob, as well as some other data. For commits, there is an additional data type, a tree, also identified by its hash. Trees correspond to directories in the working directory, and contain a list of trees and blobs corresponding to each filename within that directory. Each commit stores the identifier of its top-level tree, which in turn contains all of the blobs and other trees associated with that commit.</p>

<!--more-->


<p>If you make a commit using a detached HEAD, the last commit really is referenced by something: the reflog for HEAD. However, this will expire after a while, so the commit will eventually be garbage collected, similar to commits discarded with <code>git commit --amend</code> or <code>git rebase</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Git Guide (Reset Command)]]></title>
    <link href="https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-reset-command/"/>
    <updated>2014-11-07T00:00:00+08:00</updated>
    <id>https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-reset-command</id>
    <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p>

<h3>Reset command</h3>

<p><strong>The reset command moves the current branch to another position</strong>, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory.</p>

<p>If a commit is given with no filenames, the current branch is moved to that commit, and then the stage is updated to match this commit. If &ndash;hard is given, the working directory is also updated. If &ndash;soft is given, neither is updated.</p>

<!--more-->   


<p><img src="/assets/images/reset-commit.png" alt="reset-commit" /></p>

<p>If a commit is not given, it defaults to HEAD. In this case, the branch is not moved, but the stage (and optionally the working directory, if &ndash;hard is given) are reset to the contents of the last commit.</p>

<p><img src="/assets/images/reset.png" alt="reset" /></p>

<p>If a filename (and/or -p) is given, then the command works similarly to checkout with a filename, except only the stage (and not the working directory) is updated. (You may also specify the commit from which to take files, rather than HEAD.)</p>

<p><img src="/assets/images/reset-files.png" alt="reset-files" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Git Guide (Rebase Command)]]></title>
    <link href="https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-rebase-command/"/>
    <updated>2014-11-07T00:00:00+08:00</updated>
    <id>https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-rebase-command</id>
    <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p>

<h3>Rebase command</h3>

<p>A rebase is an alternative to a merge for combining multiple branches. Whereas a merge creates a single commit with two parents, leaving a non-linear history, a rebase replays the commits from the current branch onto another, leaving a linear history. <em>In essence, this is an automated way of performing several cherry-picks in a row</em>.</p>

<!--more-->


<p><img src="/assets/images/rebase.png" alt="rebase" /></p>

<p>The above command takes all the commits that exist in topic but not in master (namely 169a6 and 2c33a), replays them onto master, and then moves the branch head to the new tip. Note that the old commits will be garbage collected if they are no longer referenced.</p>

<p>To limit how far back to go, use the &ndash;onto option. The following command replays onto master the most recent commits on the current branch since 169a6 (exclusive), namely 2c33a.</p>

<p><img src="/assets/images/rebase-onto.png" alt="rebase-onto" /></p>

<p>There is also <code>git rebase --interactive</code>, which allows one to do more complicated things than simply replaying commits, namely dropping, reordering, modifying, and squashing commits. There is no obvious picture to draw for this; see git-rebase(1) for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Git Guide (Merge Command)]]></title>
    <link href="https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-merge-command/"/>
    <updated>2014-11-07T00:00:00+08:00</updated>
    <id>https://stonefishy.github.io/blog/2014/11/07/visual-git-guide-merge-command</id>
    <content type="html"><![CDATA[<p><strong>Note:</strong> the original website address in <a href="http://marklodato.github.io/visual-git-guide/index-en.html?no-svg">here</a></p>

<h3>Merge command</h3>

<p>A merge creates a new commit that incorporates changes from other commits. Before merging, the stage must match the current commit. The trivial case is if the other commit is an ancestor of the current commit, in which case nothing is done. The next most simple is if the current commit is an ancestor of the other commit. This results in a fast-forward merge. The reference is simply moved, and then the new commit is checked out.</p>

<!--more--> 


<p><img src="/assets/images/merge-ff.png" alt="merge-ff" /></p>

<p>Otherwise, a &ldquo;real&rdquo; merge must occur. You can choose other strategies, but the default is to perform a &ldquo;recursive&rdquo; merge, which basically takes the current commit (ed489 below), the other commit (33104), and their common ancestor (b325c), and performs a three-way merge. The result is saved to the working directory and the stage, and then a commit occurs, with an extra parent (33104) for the new commit.</p>

<p><img src="/assets/images/merge.png" alt="merge" /></p>
]]></content>
  </entry>
  
</feed>
