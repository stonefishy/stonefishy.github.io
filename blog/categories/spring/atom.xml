<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-06-05T14:49:57+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring AOP - Aspect]]></title>
    <link href="http://stonefishy.github.io/blog/2015/06/05/spring-aop-aspect/"/>
    <updated>2015-06-05T09:25:53+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/06/05/spring-aop-aspect</id>
    <content type="html"><![CDATA[<p>An <code>Aspect</code> represent the <strong>name</strong> of a <code>cross-cutting</code> functionality, it&rsquo;s only name not implementation.</p>

<p>Let us see the example.</p>

<pre><code class="java">public class MyLogicClass
{
    public void logicOne() {
        //This is my logic for one.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }

    public void logicTwo() {
        //This is my logic for two.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }
}
</code></pre>

<!-- more -->


<p>From above codes, we have four <code>cross-cutting</code> functionalities for <em>logicOne</em> and <em>logicTwo</em> method, So this means we have four <code>Aspect</code>s which are <em>Authentication</em>, <em>Logging</em>, <em>Transaction</em>, <em>Email</em>.</p>

<p><em>Note: <code>Aspect</code> is only denote the name of the <code>cross-cutting</code> functionality, not the implementation</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring AOP - What Is AOP?]]></title>
    <link href="http://stonefishy.github.io/blog/2015/06/04/spring-aop-what-is-aop/"/>
    <updated>2015-06-04T20:43:03+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/06/04/spring-aop-what-is-aop</id>
    <content type="html"><![CDATA[<p>What is <code>AOP</code>?, <code>AOP</code> stand for <code>Aspect Oriented Programming</code>. It&rsquo;s very important module for <code>Spring</code> framework. In the enterprise level application programming we used to add different types of services to our application at runtime automatically, like logging, email, transaction, authentication services. These actions we called <code>cross-cutting</code> functionalities. <code>AOP</code> do this job.</p>

<!-- more -->


<p>Let&rsquo;s see a normal instance:</p>

<pre><code class="java">public class MyLogicClass
{
    public void logicOne() {
        //There is my logic for one.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }

    public void logicTwo() {
        //There is my logic for two.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }
}
</code></pre>

<p>In above codes, we have a class called MyLogicClass, in this class there are two logic methods, and both them call authentication, logging, transaction, email services. We called these service are <code>cross-cutting</code> functionalities. So there are some problems, one is these <code>cross-cutting</code> functionalities increase the class size. Second is we need changed this class and recompile, re-deploy it again when we changed the services.</p>

<p>So how to overcome these problems, can we separate the services and our logic client? Yep, we can do this in Spring <code>AOP</code>, adding these <code>cross-cutting</code> functionalities at runtime don&rsquo;t need to write them in the logic codes.</p>

<p>So if we use <code>AOP</code>, our logic class will be like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyLogicClass</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">logicOne</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//There is my logic for one.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c1">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">logicTwo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//There is my logic for two.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In above codes, we separate the business logic and the services, we call this process of separation as <code>AOP</code>. So Using <code>AOP</code> business logic and <code>cross-cutting</code> functionalities are implemented separately and executed at runtime as combine automatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Jdbc in Spring]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/05/how-to-use-jdbc-in-spring/"/>
    <updated>2015-05-05T16:31:53+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/05/how-to-use-jdbc-in-spring</id>
    <content type="html"><![CDATA[<p>As we know, we can use <code>jdbc</code> to access database in java programming. And now let us use <code>jdbc</code> in spring. The <code>spring framework</code> reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are <code>org.springframework.jdbc.datasource.DriverManagerDataSource</code> and <code>org.springframework.jdbc.core.JdbcTemplate</code>.</p>

<p>And here we use the <code>hsqldb</code> to act as our memory database. You can go to <a href="http://hsqldb.org/">here</a> to look at it. we use the <code>Maven</code> tools to management our project. the dependencies is:</p>

<!-- more -->


<pre><code class="">&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;
            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
            &lt;version&gt;1.8.0.10&lt;/version&gt;
        &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p>The spring configure file:</p>

<pre><code>&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
            "http://www.springframework.org/dtd/spring-beans-2.0.dtd"&gt;

&lt;beans&gt;

    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
        &lt;property name="driverClassName" value="org.hsqldb.jdbcDriver"/&gt;
        &lt;property name="url" value="jdbc:hsqldb:mem:MyDB"/&gt;
        &lt;property name="username" value="sa"/&gt;
        &lt;property name="password" value=""/&gt;
    &lt;/bean&gt;

    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
         &lt;constructor-arg&gt;
            &lt;ref bean="dataSource"/&gt;
         &lt;/constructor-arg&gt;    
    &lt;/bean&gt;

    &lt;bean id="createTable" class="java4s.SpringJdbcCreateTable"&gt;
        &lt;property name="jt"&gt;
            &lt;ref bean="jdbcTemplate"/&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

&lt;/beans&gt;  
</code></pre>

<p>we have a SpringJdbcCreateTable class to accesss database, this class has <code>JdbcTemplate</code> property,</p>

<pre><code class="java">JdbcTemplate jt;

public void setJt(JdbcTemplate jt) {
    this.jt = jt;
}
</code></pre>

<p>we use spring bean to inject value to this property. And you will see it in above spring configure file.</p>

<p>create table, the <code>execute</code> method doesn&rsquo;t return value.</p>

<pre><code class="java ">public void createTable() {
    jt.execute("CREATE TABLE user(id int, name varchar(10), age int)");
    // execute() returns void
    System.out.println("table created");
}
</code></pre>

<p>insert data, using the <code>update</code> method to insert data, this method will return how many rows have been inserted.</p>

<pre><code class="java">public void insertData() {
    int k = jt.update("INSERT INTO user VALUES (99, 'user_99', 49)");
    showDatas();

    System.out.println(String.format("%s row inserted", k));
}
</code></pre>

<p>update data, using the <code>update</code> method to update data, it will return how many rows are affected.</p>

<pre><code class="java">public void updateData() {
    int k = jt.update("UPDATE user set name='user_new' where name='user_99'");
    showDatas();

    System.out.println(String.format("%s row updated", k));
}
</code></pre>

<p>delete data, also using the <code>update</code> method.</p>

<pre><code class="java">public void deleteData() {
    int k = jt.update("DELETE from user where name='user_new'");

    showDatas();
    System.out.println(String.format("%s row deleted", k));
}
</code></pre>

<p>query data, the jdbctemplate has many query interfaces. Here we use <code>queryForRowSet</code> method to get the data by condition.</p>

<pre><code class="java">
private void showDatas() {
    System.out.println("|  ID |  NAME    |  AGE  |");
    SqlRowSet rowSet = jt.queryForRowSet("SELECT * FROM user");

    while (rowSet.next()) {
        int id = rowSet.getInt(1);
        String name = rowSet.getString(2);
        int age = rowSet.getInt(3);

        String msg = String
                .format("|  %s  |  %s  |  %s   |", id, name, age);

        System.out.println(msg);
    }       
}
</code></pre>

<p>okay, to so far, let us call them in main entrance.</p>

<pre><code class="java">public static void main(String args[])
{
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext("spconfig.xml");
    SpringJdbcCreateTable st =(SpringJdbcCreateTable)applicationContext.getBean("createTable");

    st.createTable();
    st.initSomeDatas();
    st.insertData();
    st.updateData();
    st.deleteData();
}
</code></pre>

<p>Look, it&rsquo;s very easy to access database with spring framework.</p>
]]></content>
  </entry>
  
</feed>
