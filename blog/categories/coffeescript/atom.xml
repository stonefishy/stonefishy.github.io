<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coffeescript | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-06-04T17:24:20+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Give Me a Cup of Coffeescript]]></title>
    <link href="http://stonefishy.github.io/blog/2015/03/19/give-me-a-cup-of-coffeescript/"/>
    <updated>2015-03-19T15:47:18+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/03/19/give-me-a-cup-of-coffeescript</id>
    <content type="html"><![CDATA[<p><img src="/assets/images/coffee-script-logo.png" width="200" height="100"> is programming language, which is built on top of <code>JavaScript</code>. CoffeeScript compiles into JavaScript that is efficient and consistent with many best practices. And it offers a clean syntax that should appeal to anyone who likes <code>Python</code> or <code>Ruby</code>.</p>

<p>Actually, The <code>CoffeeScript</code> is just a JavaScript. So you can use any exsiting JavaScript library seamlessly from CoffeeScript. And both <code>client-side</code> and <code>server-side</code> can be written by <code>CoffeeScript</code>. So CoffeeScript can write entire web application completely, not like JavaScript only write client-side.</p>

<!-- more -->


<p></p>

<p>The CoffeeScript is a <code>Node.js</code> package, so you need to install it with <code>Node Package Manager</code>. There assume you have installed node.js. You can watch <a href="https://nodejs.org/">here</a> to see how to install node.js if you dont&#8217; know it. Putting below commands to install CoffeeScript:</p>

<pre><code class="js">npm install -g coffee-script
</code></pre>

<p>CoffeeScript supports many commands to let you build your application. You just need to input below command line:</p>

<pre><code class="js">coffee -help
</code></pre>

<p>It will print awesome useful content:</p>

<pre><code class="js  ">Usage: coffee [options] path/to/script.coffee -- [args]

If called without options, `coffee` will run your script.

  -b, --bare         compile without a top-level function wrapper
  -c, --compile      compile to JavaScript and save as .js files
  -e, --eval         pass a string from the command line as input
  -h, --help         display this help message
  -i, --interactive  run an interactive CoffeeScript REPL
  -j, --join         concatenate the source CoffeeScript before compiling
  -m, --map          generate source map and save as .js.map files
  -n, --nodes        print out the parse tree that the parser produces
      --nodejs       pass options directly to the "node" binary
      --no-header    suppress the "Generated by" header
  -o, --output       set the output directory for compiled JavaScript
  -p, --print        print out the compiled JavaScript
  -s, --stdio        listen for and compile scripts over stdio
  -l, --literate     treat stdio as literate style coffee-script
  -t, --tokens       print out the tokens that the lexer/rewriter produce
  -v, --version      display the version number
  -w, --watch        watch scripts for changes and rerun commands
</code></pre>

<p>Let&rsquo;s give a example, how to use CoffeeScript to solve a mathematics problem. Here we will solve the first mathematical problem of <code>Project Eluar</code>. The problem is below:</p>

<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.</p></blockquote>

<p>And now we solve this problem with CoffeeScript elegantly:</p>

<pre><code class="coffeescript">([1..999].filter (x) -&gt; x % 3 is 0 or x % 5 is 0).reduce (x, y) -&gt; x + y
</code></pre>

<p>You see, just one code line. It&rsquo;s very concise and elegant. Not like JavaScript need to defined many variables and functions to solve it.</p>

<p>Cheers,  I think you will love it.</p>
]]></content>
  </entry>
  
</feed>
