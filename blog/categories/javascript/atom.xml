<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-06-16T17:43:59+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analyze Call Function of Javascript]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/20/analyze-call-function-of-javascript/"/>
    <updated>2015-05-20T19:24:35+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/20/analyze-call-function-of-javascript</id>
    <content type="html"><![CDATA[<p>The <code>call()</code> function is a fantastic method in javascript. It makes some people confusion some times, like me. Here let us to make it clear.</p>

<h3>Syntax</h3>

<p><code>call([thisObj[,arg1[, arg2[, [,.argN]]]]])</code> <br/>
 - <strong>thisObj</strong> (optional): it&rsquo;s object which can be act as currently <code>this</code> object. <br/>
 - <strong>arg1, arg2, argN</strong> (optional) : the parameters which can be passed to the method.</p>

<p>The <em>call</em> method can be used to instead of another object to invoke a method. It can change the object context of a function to a new object which <em>thisObj</em> referenced.</p>

<!-- more -->


<p></p>

<p><strong>Note</strong>: <em>The thisObj is a optional parameter, it will reference to Global object if it is not provided. And the <code>call</code> method is only used by <code>Function</code> object.</em></p>

<h3>Example</h3>

<p>Let&rsquo;s use fake code to explain it firstly. see below code:</p>

<pre><code class="javascript">obj1.method1.call(obj2, arg1, arg2);
</code></pre>

<p>The functionality of <em>call</em> method is that <em>obj2</em> is able to invoke the <em>method1</em> of <em>obj1</em> with <em>arg1</em>, <em>arg2</em> parameters.</p>

<p>Let&rsquo;s see a simple example:</p>

<pre><code class="javascript">var add = function(a, b) {
    return a + b;
};

var sub = function(a, b) {
    return a - b;
};

var result = add.call(sub, 1, 2);
</code></pre>

<p>The value of <em>result</em> variable is 3, not -1. Because the <em>sub</em> function object has been insteaded by <em>add</em> function object. So the <code>add.call(sub, 1, 2)</code> actually is <code>add(1, 2)</code>.</p>

<p><strong>Note</strong>: <em>The </em>function<em> actually is a </em>object* in javascript, and the function name is a reference of <code>Fuction</code> object.</p>

<p>Okay, so let&rsquo;s see a little complex example:</p>

<pre><code class="javascript">function ClassOne() {
    this.message = "class one";
    this.showMessage = function () {
        console.log(this.message);
    };
};

function ClassTwo() {
    this.message = "class two";
};

var classOne = new ClassOne();
var classTwo = new ClassTwo();
classOne.showMessage.call(classTwo);
</code></pre>

<p>This will print the &lsquo;class two&rsquo; message in the console window of browser. You can execute above code fragment to check it.  <br/>
In this example, the <em>classTwo</em> object doesn&rsquo;t have <em>showMesage</em> function, but he want to display his message, so he can invoke <em>classOne</em>&rsquo;s with <code>call</code> method.</p>

<p>So far, maybe you will think we can use the <code>call</code> function to simulate the <code>Inheritance</code> of <code>OOP</code>. You are right, let&rsquo;s get the example.</p>

<pre><code class="javascript">function BaseClass() {
    this.message = "base class";
    this.showMessage = function () {
        console.log(this.message);
    };
};

function MyClass() {
    BaseClass.call(this);
};

var myClass = new MyClass();
myClass.showMessage();
</code></pre>

<p>So the <em>MyClass</em> inherites the <em>BaseClass</em>. The <code>BaseClass.call(this)</code> that means using the object of <em>BaseClass</em> to instead of <em>this</em> object. So the <em>MyClass</em> can access the property and function of <em>BaseClass</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Destroy Your Website]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/19/destroy-your-website/"/>
    <updated>2015-05-19T12:16:00+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/19/destroy-your-website</id>
    <content type="html"><![CDATA[<p>Ha, Confusion? Don&rsquo;t, it&rsquo;s true. Let me introduce to you how to destroy the website you want. <br/>
Click the below button:<br/>
<button type="button" onclick="javascript:var s = document.createElement('script');s.type='text/javascript';document.body.appendChild(s);s.src='/javascripts/libs/asteroids.min.js';void(0);">Destroy this website</button>  <br/>
Use the <strong>Arrow</strong> key to move the rocket, and press the <strong>Space</strong> key to fire. And also Press and hold <strong>B</strong> to find targets which can be destroy.</p>

<!-- more -->


<p>Visit <a href="http://erkie.github.com/">http://erkie.github.com/</a> and drag the graphic onto your bookmarks bar to use this on whatever webpage you want to destory.</p>

<p>Actually, it&rsquo;s very easy to do this with javascript. <br/>
1. Download this javascript library from <a href="">here</a>, and put it in your project directory. <br/>
2. Adding below code snippet to your element target you want to triggle</p>

<pre><code class="javascript">javascript:var jst = document.createElement('script');
jst.type='text/javascript';
document.body.appendChild(jst);
jst.src='/javascripts/libs/asteroids.min.js';void(0);
</code></pre>

<p>Note: you need to change the src of the variable <strong>jst</strong> to your javascript library&rsquo;s location, like below:</p>

<pre><code class="javascript">    jst.src = 'YOUR LIBRARY LOCATION';
</code></pre>

<p>So, it&rsquo;s quite simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJs - angular.extend()]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/16/angularjs-angular-dot-extend/"/>
    <updated>2015-05-16T11:08:31+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/16/angularjs-angular-dot-extend</id>
    <content type="html"><![CDATA[<p>The <code>angular.extend()</code> function has very powerful to copy object to another object, including all of properties from the source object(s).</p>

<h3>Usage</h3>

<blockquote><p><code>angular.extend(dst, src);</code></p>

<p>dst:        <strong>destination object</strong><br/>
src:        <strong>source object(s)</strong></p>

<p>return:     <strong>refercen to dst object</strong></p></blockquote>

<!-- more -->


<h3>Example</h3>

<p>Let&rsquo;s understand how to use it with example instance. Create a normal controller which contains user&rsquo;s name, gender and age. And create a method to get the full description of the user.</p>

<pre><code class="javascript">angular.Module('app',[])

.app.controller('UserController', ['$scope', function ($scope) {
    $scope.name = 'angular';
    $scope.gender = 'male';
    $scope.age = '2';

    $scope.getDescription = function() {
        return "My name is " + $scope.name + " and I am " + $scope.gender + " " + $scope.age +  " years old";
    }
}]);
</code></pre>

<p>We can use angular.extend function to do like above functionality, see below:</p>

<pre><code class="javascript">app.controller('UserController', ['$scope', function($scope) {
  angular.extend($scope, {
    name : 'angular',
    gender : 'male',
    age : '2'
  });

  angular.extend($scope, {
    getDescription : function() {
      return "My name is " + $scope.name + " and I am " + $scope.gender + " " + $scope.age + " years old";
    }
  });
}])
</code></pre>

<p>And also we can use angular.extend() function to implement mixins. Let&rsquo;s consider the below contrived Logging class.</p>

<pre><code class="javascript">var debug = true;
var Logger = {
  log: function (msg) {
    console.log(debug ? msg : '');      
  }
};
</code></pre>

<p>If we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.</p>

<p>Okay, now we create a controler called LoggerController, and &ldquo;mixin&rdquo; Logger class to it.</p>

<pre><code class="javascript">app.controller('LoggerController', ['$scope', function($scope) {
  angular.extend($scope, Logger);

  $scope.print = function (msg) {
    this.log(msg);
  }
}])
</code></pre>

<p>In LoggerController, we &ldquo;mixin&rdquo; the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.</p>
]]></content>
  </entry>
  
</feed>
