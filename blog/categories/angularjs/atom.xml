<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Angularjs | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-05-18T23:26:05+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJs - angular.extend()]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/16/angularjs-angular-dot-extend/"/>
    <updated>2015-05-16T11:08:31+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/16/angularjs-angular-dot-extend</id>
    <content type="html"><![CDATA[<p>The <code>angular.extend()</code> function has very powerful to copy object to another object, including all of properties from the source object(s).</p>

<h3>Usage</h3>

<blockquote><p><code>angular.extend(dst, src);</code></p>

<p>dst:        <strong>destination object</strong><br/>
src:        <strong>source object(s)</strong></p>

<p>return:     <strong>refercen to dst object</strong></p></blockquote>

<!-- more -->


<h3>Example</h3>

<p>Let&rsquo;s understand how to use it with example instance. Create a normal controller which contains user&rsquo;s name, gender and age. And create a method to get the full description of the user.</p>

<pre><code class="javascript">angular.Module('app',[])

.app.controller('UserController', ['$scope', function ($scope) {
    $scope.name = 'angular';
    $scope.gender = 'male';
    $scope.age = '2';

    $scope.getDescription = function() {
        return "My name is " + $scope.name + " and I am " + $scope.gender + " " + $scope.age +  " years old";
    }
}]);
</code></pre>

<p>We can use angular.extend function to do like above functionality, see below:</p>

<pre><code class="javascript">app.controller('UserController', ['$scope', function($scope) {
  angular.extend($scope, {
    name : 'angular',
    gender : 'male',
    age : '2'
  });

  angular.extend($scope, {
    getDescription : function() {
      return "My name is " + $scope.name + " and I am " + $scope.gender + " " + $scope.age + " years old";
    }
  });
}])
</code></pre>

<p>And also we can use angular.extend() function to implement mixins. Let&rsquo;s consider the below contrived Logging class.</p>

<pre><code class="javascript">var debug = true;
var Logger = {
  log: function (msg) {
    console.log(debug ? msg : '');      
  }
};
</code></pre>

<p>If we set debug variable to true, so it will print message in the browser console window when we invoke the log function. Otherwise nothing will be printed.</p>

<p>Okay, now we create a controler called LoggerController, and &ldquo;mixin&rdquo; Logger class to it.</p>

<pre><code class="javascript">app.controller('LoggerController', ['$scope', function($scope) {
  angular.extend($scope, Logger);

  $scope.print = function (msg) {
    this.log(msg);
  }
}])
</code></pre>

<p>In LoggerController, we &ldquo;mixin&rdquo; the Logger class to the $scope, and this will inovke the log function of the Logger class when the print function was called.</p>
]]></content>
  </entry>
  
</feed>
