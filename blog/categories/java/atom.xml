<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-01-28T17:14:56+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu SHI]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guava - Ordering]]></title>
    <link href="http://stonefishy.github.io/blog/2014/12/12/guava-ordering/"/>
    <updated>2014-12-12T17:28:07+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/12/12/guava-ordering</id>
    <content type="html"><![CDATA[<p><code>Ordering</code> is Guava&rsquo;s fluent Comparator class and implements Comparator interface. It can be used to build complex comparators and apply them to collections of objects.</p>

<p>Okay, so let&rsquo;s getting started. Firstly, we declared a <code>String</code> type List: <br/>
<code>Java
    private List&lt;String&gt; locations = Lists.newArrayList(
            "Guang zhou",
            "Cheng du",
            "",
            "Shang hai"
    );
</code>
We will use this locations variable later.</p>

<!-- more -->


<p><code>natural()</code> <br/>
Use natural ordering for comparatable types. such as number from small to large. date from start to end. It is static method. <br/>
<code>Java
    // use natural comparator, such as a -&gt; z
    // so the result is: [, Cheng du, Guang zhou, Shang hai]
    System.out.println(Ordering.natural().sortedCopy(locations));
</code></p>

<p><code>sortedCopy(Iterable)</code> <br/>
Return a sorted copy of the specified elements as a List.  <br/>
We create a customized <code>Ordering</code> that sorted by the length of element from small to large. Let&rsquo;s get the code:
<code>Java
    private Ordering&lt;String&gt; getCustomzieStringOrder() {
        return new Ordering&lt;String&gt;() {
            @Override
            public int compare(String first, String second) {
                return Ints.compare(first.length(), second.length());
            }
        };
    }
</code>
Order the locations list with our new customize <code>Ordering</code>: <br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Ordering</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">byLengthOrdering</span> <span class="o">=</span> <span class="n">getCustomzieStringOrder</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// use natural comparator, such as a -&amp;gt; z</span>
</span><span class='line'><span class="c1">// so the result is: [, Cheng du, Shang hai, Guang zhou]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">isOrdered</span><span class="o">(</span><span class="n">Iterable</span><span class="o">)</span><span class="err">`</span>
</span><span class='line'><span class="n">Return</span> <span class="n">a</span> <span class="n">Boolean</span> <span class="n">variable</span> <span class="n">that</span> <span class="n">can</span> <span class="n">describe</span> <span class="n">the</span> <span class="n">Iterable</span> <span class="k">if</span> <span class="n">sorted</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// will return false. because the locations array is not sorted.</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">isOrdered</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">reverse</span><span class="o">()</span><span class="err">`</span>
</span><span class='line'><span class="n">Return</span> <span class="n">the</span> <span class="n">reverse</span> <span class="err">`</span><span class="n">Ordering</span><span class="err">`</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// reverse customize comparator.</span>
</span><span class='line'><span class="c1">// so the result is: [Guang zhou, Shang hai, Cheng du, ]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">nullsFirst</span><span class="o">()</span><span class="err">`</span>
</span><span class='line'><span class="n">Return</span> <span class="n">an</span> <span class="err">`</span><span class="n">Ordering</span><span class="err">`</span> <span class="n">that</span> <span class="n">will</span> <span class="n">put</span> <span class="n">the</span> <span class="kc">null</span> <span class="n">object</span> <span class="n">at</span> <span class="n">the</span> <span class="n">first</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// add null object to the locations array.</span>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// null obejct will at first.</span>
</span><span class='line'><span class="c1">// so the result is : [null, , Cheng du, Shang hai, Guang zhou]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">nullsFirst</span><span class="o">().</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">nullsLast</span><span class="o">()</span><span class="err">`</span>
</span><span class='line'><span class="n">Return</span> <span class="n">an</span> <span class="err">`</span><span class="n">Ordering</span><span class="err">`</span> <span class="n">that</span> <span class="n">will</span> <span class="n">put</span> <span class="n">the</span> <span class="kc">null</span> <span class="n">object</span> <span class="n">at</span> <span class="n">the</span> <span class="n">last</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// null object will at last.</span>
</span><span class='line'><span class="c1">// the result is : [, Cheng du, Shang hai, Guang zhou, null]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">nullsLast</span><span class="o">().</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// will throw NullPointerException, because the location contains null object.</span>
</span><span class='line'><span class="c1">// and here doesn&#39;t have nullsFirst() or nullsLast() to deal with null object.</span>
</span><span class='line'><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// remove the null object.</span>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">compound</span><span class="o">()</span><span class="err">`</span>
</span><span class='line'><span class="n">Returns</span> <span class="n">an</span> <span class="err">`</span><span class="n">Ordering</span><span class="err">`</span> <span class="n">which</span> <span class="n">uses</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">Comparator</span> <span class="n">to</span> <span class="s">&quot;break ties.&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// the &quot;AAAAAAAA&quot; length is equal to &quot;Cheng du&quot; length. (8 characters)</span>
</span><span class='line'><span class="c1">// and it will be appended at last.</span>
</span><span class='line'><span class="n">locations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;AAAAAAAA&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use natrual ordering with second comparator to deal with equal situation.</span>
</span><span class='line'><span class="n">Ordering</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">compoundOrdering</span> <span class="o">=</span> <span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">compound</span><span class="o">(</span><span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the result will be : [, AAAAAAAA, Cheng du, Shang hai, Guang zhou]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">compoundOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">locations</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">onResultOf</span><span class="o">(</span><span class="n">Fuction</span><span class="o">)</span><span class="err">`</span>
</span><span class='line'><span class="n">Returns</span> <span class="n">an</span> <span class="n">Ordering</span> <span class="n">which</span> <span class="n">orders</span> <span class="n">values</span> <span class="n">by</span> <span class="n">applying</span> <span class="n">the</span> <span class="n">function</span> <span class="n">to</span> <span class="n">them</span> <span class="n">and</span> <span class="n">then</span> <span class="n">comparing</span> <span class="n">the</span> <span class="n">results</span> <span class="n">using</span> <span class="n">the</span> <span class="n">original</span> <span class="n">Ordering</span><span class="o">.</span>
</span><span class='line'><span class="n">Declaring</span> <span class="n">a</span> <span class="n">Foo</span> <span class="nl">class:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Nullable</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Integer</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Foo</span><span class="o">(</span><span class="n">Integer</span> <span class="n">sortedBy</span><span class="o">,</span> <span class="n">String</span> <span class="n">nonSortedBy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">sortedBy</span> <span class="o">=</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">nonSortedBy</span> <span class="o">=</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getNonSortedBy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNonSortedBy</span><span class="o">(</span><span class="n">String</span> <span class="n">nonSortedBy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">nonSortedBy</span> <span class="o">=</span> <span class="n">nonSortedBy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getSortedBy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSortedBy</span><span class="o">(</span><span class="kt">int</span> <span class="n">sortedBy</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">sortedBy</span> <span class="o">=</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s+%s&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">sortedBy</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">nonSortedBy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Declaring</span> <span class="n">a</span> <span class="k">new</span> <span class="n">List</span> <span class="n">with</span> <span class="n">Foo</span> <span class="kd">class</span> <span class="nc">type</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Foo</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">fooList</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Foo</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="s">&quot;abc&quot;</span><span class="o">),</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Foo</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="s">&quot;abc&quot;</span><span class="o">),</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Foo</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="s">&quot;abc&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Define</span> <span class="n">a</span> <span class="k">new</span> <span class="n">function</span> <span class="n">that</span> <span class="n">will</span> <span class="k">return</span> <span class="n">an</span> <span class="n">customized</span> <span class="err">`</span><span class="n">Ordering</span><span class="err">`</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Ordering</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Foo</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">getNaturalFooOrder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">().</span><span class="na">nullsFirst</span><span class="o">().</span><span class="na">onResultOf</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Foo</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Foo</span> <span class="n">foo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="na">getSortedBy</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Ordering</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Foo</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">fooOrdering</span> <span class="o">=</span> <span class="n">getNaturalFooOrder</span><span class="o">();</span>
</span><span class='line'><span class="c1">// the result will be [null+abc, 10+abc, 23+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">sortedCopy</span><span class="o">(</span><span class="n">fooList</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">greatestOf</span><span class="o">(</span><span class="n">Iterable</span> <span class="n">iterable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span><span class="err">`</span>
</span><span class='line'><span class="n">Returns</span> <span class="n">the</span> <span class="n">k</span> <span class="n">greatest</span> <span class="n">elements</span> <span class="n">of</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">iterable</span><span class="o">,</span> <span class="n">according</span> <span class="n">to</span> <span class="k">this</span> <span class="n">ordering</span><span class="o">,</span> <span class="n">in</span> <span class="n">order</span> <span class="n">from</span> <span class="n">greatest</span> <span class="n">to</span> <span class="n">least</span><span class="o">.</span> <span class="n">Not</span> <span class="n">necessarily</span> <span class="n">stable</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// the result will be [23+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">greatestOf</span><span class="o">(</span><span class="n">fooList</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the result will be [23+abc, 10+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">greatestOf</span><span class="o">(</span><span class="n">fooList</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">leastOf</span><span class="o">(</span><span class="n">Iterable</span> <span class="n">iterable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span><span class="err">`</span>
</span><span class='line'><span class="n">Returns</span> <span class="n">the</span> <span class="n">k</span> <span class="n">least</span> <span class="n">elements</span> <span class="n">of</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">iterable</span><span class="o">,</span> <span class="n">according</span> <span class="n">to</span> <span class="k">this</span> <span class="n">ordering</span><span class="o">,</span> <span class="n">in</span> <span class="n">order</span> <span class="n">from</span> <span class="n">least</span> <span class="n">to</span> <span class="n">greatest</span><span class="o">.</span> <span class="n">Not</span> <span class="n">necessarily</span> <span class="n">stable</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// the result will be [null+abc, 10+abc]</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">leastOf</span><span class="o">(</span><span class="n">fooList</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">min</span><span class="o">(</span><span class="n">Iterable</span><span class="o">)</span><span class="err">`</span>
</span><span class='line'><span class="n">Returns</span> <span class="n">the</span> <span class="n">minimum</span> <span class="n">element</span> <span class="n">of</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">Iterable</span><span class="o">.</span> <span class="n">Throws</span> <span class="n">a</span> <span class="n">NoSuchElementException</span> <span class="k">if</span> <span class="n">the</span> <span class="n">Iterable</span> <span class="n">is</span> <span class="n">empty</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// the result will be null+abc</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">fooList</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">`</span><span class="n">max</span><span class="o">(</span><span class="n">Iterable</span><span class="o">)</span><span class="err">`</span>
</span><span class='line'><span class="n">Returns</span> <span class="n">the</span> <span class="n">maximum</span> <span class="n">element</span> <span class="n">of</span> <span class="n">the</span> <span class="n">specified</span> <span class="n">Iterable</span><span class="o">.</span> <span class="n">Throws</span> <span class="n">a</span> <span class="n">NoSuchElementException</span> <span class="k">if</span> <span class="n">the</span> <span class="n">Iterable</span> <span class="n">is</span> <span class="n">empty</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// the result will be 23+abc</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fooOrdering</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">fooList</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">]]&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;![</span><span class="n">CDATA</span><span class="o">[</span><span class="n">JSP</span> <span class="o">-</span> <span class="n">Custom</span> <span class="n">Tag</span><span class="o">]]&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://stonefishy.github.io/blog/2014/12/01/jsp-custom-tag/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">01</span><span class="nl">T21:</span><span class="mi">30</span><span class="o">:</span><span class="mi">41</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mi">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">id</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//stonefishy.github.io/blog/2014/12/01/jsp-custom-tag&lt;/id&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;![</span><span class="n">CDATA</span><span class="o">[&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Custom</span> <span class="n">Tag</span> <span class="n">is</span> <span class="n">a</span> <span class="n">user</span><span class="o">-</span><span class="n">defined</span> <span class="n">JSP</span> <span class="n">language</span> <span class="n">element</span><span class="o">.</span> <span class="n">When</span> <span class="n">it</span> <span class="n">is</span> <span class="n">contained</span> <span class="n">in</span> <span class="n">JSP</span> <span class="n">page</span> <span class="n">and</span> <span class="n">it</span> <span class="n">will</span> <span class="n">translate</span> <span class="n">into</span> <span class="n">a</span> <span class="n">servlet</span><span class="o">,</span> <span class="n">the</span> <span class="n">custom</span> <span class="n">tag</span> <span class="n">is</span> <span class="n">converted</span> <span class="n">to</span> <span class="n">opertions</span> <span class="n">on</span> <span class="n">an</span> <span class="n">object</span> <span class="n">called</span> <span class="n">a</span> <span class="n">tag</span> <span class="n">handler</span><span class="o">.</span> <span class="n">The</span> <span class="n">web</span> <span class="n">container</span> <span class="n">then</span> <span class="n">invokes</span> <span class="n">those</span> <span class="n">operations</span> <span class="n">when</span> <span class="n">the</span> <span class="n">JSP</span> <span class="n">page</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">servlet</span> <span class="n">is</span> <span class="n">executed</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">If</span> <span class="n">we</span> <span class="n">want</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="n">custom</span> <span class="n">tag</span><span class="o">,</span> <span class="n">what</span> <span class="n">we</span> <span class="n">need</span> <span class="n">to</span> <span class="k">do</span> <span class="n">is</span> <span class="n">simply</span> <span class="n">extend</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">SimpleTagSupport</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="kd">class</span> <span class="nc">and</span> <span class="n">override</span> <span class="n">the</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">doTag</span><span class="o">()&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">method</span><span class="o">,</span> <span class="n">where</span> <span class="n">you</span> <span class="n">can</span> <span class="n">place</span> <span class="n">your</span> <span class="n">code</span> <span class="n">to</span> <span class="n">generate</span> <span class="n">content</span> <span class="k">for</span> <span class="n">the</span> <span class="n">tag</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Let</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;</span><span class="n">s</span> <span class="n">getting</span> <span class="n">started</span> <span class="n">to</span> <span class="n">create</span> <span class="n">a</span> <span class="n">custom</span> <span class="n">tag</span> <span class="n">now</span><span class="o">.</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">As</span> <span class="n">you</span> <span class="n">can</span> <span class="n">see</span> <span class="n">below</span><span class="o">,</span> <span class="n">consider</span> <span class="n">we</span> <span class="n">want</span> <span class="n">to</span> <span class="n">create</span> <span class="n">two</span> <span class="n">tag</span><span class="o">,</span> <span class="n">one</span> <span class="n">is</span> <span class="n">user</span> <span class="n">tag</span> <span class="n">with</span> <span class="n">name</span> <span class="n">and</span> <span class="n">isMale</span> <span class="n">attribute</span><span class="o">,</span> <span class="n">another</span> <span class="n">is</span> <span class="n">system</span> <span class="n">tag</span> <span class="n">with</span> <span class="n">size</span> <span class="n">attribute</span><span class="o">.&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;jsp&quot;</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nl">custom:</span><span class="n">user</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;user1&quot;</span> <span class="n">isMale</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="o">/&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nl">custom:</span><span class="n">system</span> <span class="n">size</span><span class="o">=</span><span class="s">&quot;1024&quot;</span><span class="o">/&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="n">more</span> <span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">So</span> <span class="n">firstly</span> <span class="n">what</span> <span class="n">we</span> <span class="n">need</span> <span class="n">to</span> <span class="k">do</span> <span class="n">is</span> <span class="n">create</span> <span class="n">two</span> <span class="n">java</span> <span class="n">classes</span> <span class="n">that</span> <span class="n">act</span> <span class="n">as</span> <span class="n">a</span> <span class="n">tag</span> <span class="n">handler</span> <span class="k">for</span> <span class="n">each</span> <span class="n">other</span> <span class="n">tag</span><span class="o">.</span> <span class="n">and</span> <span class="n">them</span> <span class="n">must</span> <span class="kd">extends</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">SimpleTagSupport</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">class</span><span class="o">.</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure> java UserTag.java
package com.jsp.custom.tag;</p>

<p>import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Date;</p>

<p>/<em>*
 * Created by yushi on 12/1/14.
 </em>/
public class UserTag extends SimpleTagSupport {
    private String name;
    private Boolean isMale;
    private Date birthday;</p>

<pre><code>private StringWriter sw = new StringWriter();

public void doTag() throws JspException, IOException
{
    JspWriter out = getJspContext().getOut();

    // print name info with name attribute
    out.println(name);

    // print gender info via isMale attribute
    out.println(isMale ? "I'm male!" : "I'm female!");

    if (birthday != null) {
        out.println(String.format("My birthday is %s", birthday.toString()));
    }

    // print body text with body content
    getJspBody().invoke(sw);
    getJspContext().getOut().println(sw.toString());
}

public void setName(String name) {
    this.name = name;
}

public void setIsMale(Boolean isMale) {
    this.isMale = isMale;
}

public void setBirthday(Date birthday) {
    this.birthday = birthday;
}
</code></pre>

<p>}
&#8220;`</p>

<pre><code class="java SystemTag.java">package com.jsp.custom.tag;

import javax.servlet.jsp.tagext.SimpleTagSupport;
import java.io.IOException;

/**
 * Created by yushi on 12/2/14.
 */
public class SystemTag extends SimpleTagSupport {
    private int size;

    public void doTag() throws IOException {
        getJspContext().getOut().println(String.valueOf(String.format("The system's size is: %s", String.valueOf(size))));
    }

    public void setSize(int size) {
        this.size = size;
    }
}
</code></pre>

<p>Above two class just override the <code>doTag()</code> method and take the current <code>JspContext</code> object using <code>getJspContext()</code> method, and then send message content to the current <code>JspWriter</code> object.</p>

<p>Secondly we need to create tld extention file. It&rsquo;s a tag library file. let us see the codes.  <br/>
<code>xml customTag.tld
&lt;taglib&gt;
    &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;
    &lt;jsp-version&gt;2.0&lt;/jsp-version&gt;
    &lt;short-name&gt;custom tld&lt;/short-name&gt;
    &lt;tag&gt;
        &lt;name&gt;user&lt;/name&gt;
        &lt;tag-class&gt;com.jsp.custom.tag.UserTag&lt;/tag-class&gt;
        &lt;body-content&gt;tagdependent&lt;/body-content&gt;
        &lt;attribute&gt;
            &lt;name&gt;name&lt;/name&gt;
            &lt;required&gt;true&lt;/required&gt;
            &lt;description&gt;user name&lt;/description&gt;
            &lt;!-- the type default is String if it is not specified --&gt;
            &lt;!--&lt;type&gt;java.lang.String&lt;/type&gt;--&gt;
        &lt;/attribute&gt;
        &lt;attribute&gt;
            &lt;name&gt;isMale&lt;/name&gt;
            &lt;required&gt;false&lt;/required&gt;
            &lt;description&gt;the use is male or not male&lt;/description&gt;
            &lt;type&gt;java.lang.Boolean&lt;/type&gt;
        &lt;/attribute&gt;
        &lt;attribute&gt;
            &lt;name&gt;birthday&lt;/name&gt;
            &lt;type&gt;java.util.Date&lt;/type&gt;
        &lt;/attribute&gt;
    &lt;/tag&gt;
    &lt;tag&gt;
        &lt;name&gt;system&lt;/name&gt;
        &lt;tag-class&gt;com.jsp.custom.tag.SystemTag&lt;/tag-class&gt;
        &lt;body-content&gt;empty&lt;/body-content&gt;
        &lt;attribute&gt;
            &lt;name&gt;size&lt;/name&gt;
            &lt;required&gt;false&lt;/required&gt;
            &lt;description&gt;the size of system&lt;/description&gt;
        &lt;/attribute&gt;
    &lt;/tag&gt;
&lt;/taglib&gt;
</code></p>

<p>Finally, we can use these both tags in our JSP page.
<code>jsp
&lt;%@ taglib prefix="custom" uri="WEB-INF/customTag.tld" %&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;custom tag training&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;custom:user name="user1" isMale="true"/&gt;
        &lt;custom:system size="1024"/&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava -- Common Object Methods]]></title>
    <link href="http://stonefishy.github.io/blog/2014/11/27/guava-common-object-method/"/>
    <updated>2014-11-27T20:41:45+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/11/27/guava-common-object-method</id>
    <content type="html"><![CDATA[<h3>Usage</h3>

<p><code>Objects.equal(Object, Object)</code> <br/>
Invoking this method then it will avoid the risking of NullPointerException when we need to compare two object whether they equal.
<code>java
Objects.equal("a", "a"); // return true;
Objects.equal(null, "a"); // return false;
Objects.equal(null, null); // return true;
</code></p>

<!--more-->


<p><code>Objects.hashCode(Object, ....)</code> <br/>
Generating hash code with multiple object will be simple. And it also can hash all fields of an Object to get more sensible code value. <br/>
<code>java
// generate hash code with multi object
Objects.hashCode(this.intField, this.charField, this.stringField, this.dateField);
</code></p>

<p><code>ComparisonChain</code> <br/>
ComparisonChain is a fluent idiom and much more readable. less prone to accidental typos, and smart enough not to do more work than it must. <br/>
It only performs comparisons until it finds a non-zero result, after which it ignores further input.
<code>java
ObjectsTraining objectsTraining = new ObjectsTraining();
int result = ComparisonChain.start()
               .compare(this.intField, objectsTraining.intField)
             .compare(this.stringField, objectsTraining.stringField)
             .compare(this.charField, objectsTraining.charField)
             .compare(this.dateField, objectsTraining.dateField)
             .result();
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava -- Preconditions]]></title>
    <link href="http://stonefishy.github.io/blog/2014/11/26/guava-preconditions/"/>
    <updated>2014-11-26T22:36:07+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/11/26/guava-preconditions</id>
    <content type="html"><![CDATA[<p>Guava provides a number of precondition checking utilities. It&rsquo;s <code>Preconditions</code> class. You can use it into your project.</p>

<h3>Usage</h3>

<p><code>checkArgument(boolean)</code> <br/>
Checks that the boolean is true. Use for validating arguments to methods.</p>

<p><code>checkNotNull(T)</code> <br/>
Checks that the value is not null. Returns the value directly, so you can use checkNotNull(value) inline.</p>

<!--more-->


<p></p>

<p><code>checkElementIndex(int index, int size)</code> <br/>
Checks that index is a valid element index into a list, string, or array with the specified size. An element index may range from 0 inclusive to size exclusive. You don&rsquo;t pass the list, string, or array directly; you just pass its size.
Returns index.</p>

<p><code>checkPositionIndex(int index, int size)</code> <br/>
Checks that index is a valid position index into a list, string, or array with the specified size. A position index may range from 0 inclusive to size inclusive. You don&rsquo;t pass the list, string, or array directly; you just pass its size.
Returns index.</p>

<h3>Example</h3>

<pre><code class="java ">
int i = 3;
Preconditions.checkArgument(i &gt; 5, "Argument %s is not larger than 5", i);
// will throw IllegalArgumentException with "Argument 3 is not larger than 5"

Preconditions.checkNotNull(i); // return 3;
Preconditions.checkNotNull(null); // throw NullPointerException;

Preconditions.checkElementIndex(i,4); // return 3
Preconditions.checkElementIndex(i,3); // throw IndexOutOfBoundsException

Preconditions.checkPositionIndex(i,3); // return 3
Preconditions.checkPositionIndex(i,2); // throw IndexOutOfBoundsException
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava -- Optional]]></title>
    <link href="http://stonefishy.github.io/blog/2014/11/21/guava-optional/"/>
    <updated>2014-11-21T00:00:00+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/11/21/guava-optional</id>
    <content type="html"><![CDATA[<p><code>Optional&lt;T&gt;</code> is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is &ldquo;present&rdquo;), or it may contain nothing (in which case we say the reference is &ldquo;absent&rdquo;). It is never said to &ldquo;contain null.&rdquo;</p>

<!--more-->


<h3>Usage</h3>

<p><code>Optional.of(T)</code>    <br/>
Make an Optional containing the given non-null value, or fail fast on null.</p>

<p><code>Optional.absent()</code> <br/>
Return an absent Optional of some type.</p>

<p><code>Optional.fromNullable(T)</code> <br/>
Turn the given possibly-null reference into an Optional, treating non-null as present and null as absent.</p>

<p><code>boolean isPresent()</code>    <br/>
Returns true if this Optional contains a non-null instance.</p>

<p><code>T get()</code> <br/>
Returns the contained T instance, which must be present; otherwise, throws an IllegalStateException.</p>

<p><code>T or()</code> <br/>
Returns the present value in this Optional, or if there is none, returns the specified default.</p>

<p><code>T orNull()</code> <br/>
Returns the present value in this Optional, or if there is none, returns null. The inverse operation of fromNullable.</p>

<h3>Example:</h3>

<pre><code class="java   ">Optional&lt;Integer&gt; numberOptional = Optional.of(100);
numberOptional.isPresent(); //return true
numberOptional.get(); //return 100

numberOptional = Optional.absent();
numberOptional.isPresent(); // return false
numberOptional.or(0); //return 0;
numberOptional.orNull(); //return null;

numberOptional = Optional.fromNullable(1);
numberOptional.get(); //return 1;

numberOptional = Optional.fromNullable(null);
numberOptional.isPresent(); //return false;
numberOptional.orNull(); //return null;
</code></pre>
]]></content>
  </entry>
  
</feed>
