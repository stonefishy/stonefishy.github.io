<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2015-06-06T10:10:10+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring AOP - Before Advice]]></title>
    <link href="http://stonefishy.github.io/blog/2015/06/05/spring-aop-before-advice/"/>
    <updated>2015-06-05T15:33:00+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/06/05/spring-aop-before-advice</id>
    <content type="html"><![CDATA[<p>As we know the <code>Aspect</code> is just the name of the <code>cross-cutting</code> functionality, not the implementation. So what&rsquo;s the implementation of the <code>cross-cutting</code> functionality? It&rsquo;s called <code>Advice</code>. An <code>Advice</code> provides the code for implementation of the service. It is like <em>Logging</em> service, <em>Logging</em> is a <code>Aspect</code> and <code>Advice</code> denotes the implementation of <em>Log4j</em>.</p>

<!-- more -->


<p>There are four types of <code>Adivce</code>:</p>

<ul>
<li><strong>Before Advice</strong></li>
<li>After Advice</li>
<li>Around Advice</li>
<li>Throws Advice</li>
</ul>


<p>In this article, we only explain <code>Before Advice</code>. The other advices we will talk about it in later blogs.</p>

<p>The <code>Before Advice</code> is the implementation of the service. It will be applied before the business logic of method is going to execute. So this means this advice will execute before the business logic. we can use it to do something like authentication before the business logic execution.</p>

<p>It will be applied in the runtime of application, not the compilation of the code. And also it will generate a new <em>proxy</em> class which is combined by this advice and business logic class in the runtime automatically.</p>

<p>When we create a <code>Before Advice</code>, we should implement the <code>MethodBeforeAdvice</code> interface, this interface is given by <em>org.springframework.aop.*</em> package. And then we need to override the <code>before</code> method of it.</p>

<pre><code class="java">package spring.test.aop;

import java.lang.reflect.Method;

import org.springframework.aop.MethodBeforeAdvice;

public class MyBeforeAdvice implements MethodBeforeAdvice {

    @Override
    public void before(Method method, Object[] args, Object target)
            throws Throwable {
        // TODO Auto-generated method stub

    }

}
</code></pre>

<p>There are 3 parameters in the <em>before</em> method.</p>

<p>The first parameter <em><code>Method</code> method</em> is used to access the method name of the business logic via <code>getName()</code>.</p>

<p>The second parameter <em>Object[] args</em> is Object array, it is used to access the arguments of the logic method.</p>

<p>The last parameter <em>Object target</em> is an object to whom this service will be going to apply, usually this will taken care by <em>container</em>, actually we no need to care it.</p>

<p>Okay, let&rsquo;s see a full example.</p>

<pre><code class="xml">&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre>

<p>In the pom.xml file, we add above dependencies to our project. (this project use maven to manage)</p>

<p>Okay, let us create our logic class, firstly we need to create interface for it.</p>

<pre><code class="java">package spring.test.aop;

public interface MyLogicInterface {
    void add(int a, int b);

    void subtract(int a, int b);
}
</code></pre>

<p>We created two method in this interface, this interface is very important for our <code>AOP</code> project.</p>

<pre><code class="java">package spring.test.aop;

public class MyLogicClass implements MyLogicInterface {

    @Override
    public void add(int a, int b) {
        String result = String.format("%s + %s = %s", a, b, a + b);
        System.out.println(result);
    }

    @Override
    public void subtract(int a, int b) {
        String result = String.format("%s - %s = %s", a, b, a - b);
        System.out.println(result);
    }

}
</code></pre>

<p>Our class implements the interface, just print the result of the add or subtract.</p>

<p>For now, we have our logic class. but now we want to do something before the method logic is going to execute. So the <code>Before Advice</code> is comming.</p>

<pre><code class="java">package spring.test.aop;

import java.lang.reflect.Method;

import org.springframework.aop.MethodBeforeAdvice;

public class MyBeforeAdvice implements MethodBeforeAdvice {

    @Override
    public void before(Method method, Object[] args, Object target) throws Throwable {
        System.out.println(String.format("This will be executed before the %s method", method.getName()));
    }
}
</code></pre>

<p>We print some messages in our <code>Before Advice</code>, this will be printed before the logic method result.</p>

<p>Finally, we need to make the logic class and our <code>Before Advice</code> are combined together. so we need to config them in the xml file.</p>

<pre><code class="xml">&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
            "http://www.springframework.org/dtd/spring-beans-2.0.dtd"&gt;

&lt;beans&gt;
    &lt;bean id="myBeforeAdvice" class="spring.test.aop.MyBeforeAdvice"/&gt;

    &lt;bean id="myLogicClass" class="spring.test.aop.MyLogicClass"/&gt;

    &lt;bean id="proxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean"&gt;
        &lt;property name="proxyInterfaces" value="spring.test.aop.MyLogicInterface"/&gt;
        &lt;property name="interceptorNames"&gt;
            &lt;list&gt;
                &lt;value&gt;myBeforeAdvice&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;
        &lt;property name="target" ref="myLogicClass"/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre>

<p>In <code>AOP</code> always we need to create a spring bean in the form of interface and implementation class only, because the IOC container internally creates proxy class by implementing that interface with the help of <code>ProxyFactoryBean</code>.
To run this application, we need a class which with <em>main</em> method. See below codes.</p>

<pre><code class="java">package spring.test.aop;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {

    private static ApplicationContext applicationContext;

    public static void main(String[] args) {
        applicationContext = new ClassPathXmlApplicationContext("springConfig.xml");
        MyLogicInterface myLogicInterface = (MyLogicInterface)applicationContext.getBean("proxyFactoryBean");

        myLogicInterface.add(10, 20);
        myLogicInterface.subtract(10, 5);
    }

}
</code></pre>

<p>In the client application, we are passing id of <code>ProxyFactoryBean</code> (proxyFactoryBean) to get the object, because we need proxyed object to invoke our logic method.</p>

<p>The result of the execution is below:</p>

<pre><code>This will be executed before the add method
10 + 20 = 30
This will be executed before the subtract method
10 - 5 = 5
</code></pre>

<p>So, it is simple to use it. and we separated the logic and the services completely, only need to config the xml file when the services changed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring AOP - Aspect]]></title>
    <link href="http://stonefishy.github.io/blog/2015/06/05/spring-aop-aspect/"/>
    <updated>2015-06-05T09:25:53+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/06/05/spring-aop-aspect</id>
    <content type="html"><![CDATA[<p>An <code>Aspect</code> represent the <strong>name</strong> of a <code>cross-cutting</code> functionality, it&rsquo;s only name not implementation.</p>

<p>Let us see the example.</p>

<pre><code class="java">public class MyLogicClass
{
    public void logicOne() {
        //This is my logic for one.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }

    public void logicTwo() {
        //This is my logic for two.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }
}
</code></pre>

<!-- more -->


<p>From above codes, we have four <code>cross-cutting</code> functionalities for <em>logicOne</em> and <em>logicTwo</em> method, So this means we have four <code>Aspect</code>s which are <em>Authentication</em>, <em>Logging</em>, <em>Transaction</em>, <em>Email</em>.</p>

<p><em>Note: <code>Aspect</code> is only denote the name of the <code>cross-cutting</code> functionality, not the implementation</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring AOP - What Is AOP?]]></title>
    <link href="http://stonefishy.github.io/blog/2015/06/04/spring-aop-what-is-aop/"/>
    <updated>2015-06-04T20:43:03+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/06/04/spring-aop-what-is-aop</id>
    <content type="html"><![CDATA[<p>What is <code>AOP</code>?, <code>AOP</code> stand for <code>Aspect Oriented Programming</code>. It&rsquo;s very important module for <code>Spring</code> framework. In the enterprise level application programming we used to add different types of services to our application at runtime automatically, like logging, email, transaction, authentication services. These actions we called <code>cross-cutting</code> functionalities. <code>AOP</code> do this job.</p>

<!-- more -->


<p>Let&rsquo;s see a normal instance:</p>

<pre><code class="java">public class MyLogicClass
{
    public void logicOne() {
        //There is my logic for one.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }

    public void logicTwo() {
        //There is my logic for two.

        //Call Authentication Service 
        //Call Logging Service
        //Call Transcation Service
        //Call Email Service
    }
}
</code></pre>

<p>In above codes, we have a class called MyLogicClass, in this class there are two logic methods, and both them call authentication, logging, transaction, email services. We called these service are <code>cross-cutting</code> functionalities. So there are some problems, one is these <code>cross-cutting</code> functionalities increase the class size. Second is we need changed this class and recompile, re-deploy it again when we changed the services.</p>

<p>So how to overcome these problems, can we separate the services and our logic client? Yep, we can do this in Spring <code>AOP</code>, adding these <code>cross-cutting</code> functionalities at runtime don&rsquo;t need to write them in the logic codes.</p>

<p>So if we use <code>AOP</code>, our logic class will be like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyLogicClass</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">logicOne</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//There is my logic for one.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c1">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">logicTwo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//There is my logic for two.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Services will be injected here automatically at runtime, but in the codebase there is nothing</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In above codes, we separate the business logic and the services, we call this process of separation as <code>AOP</code>. So Using <code>AOP</code> business logic and <code>cross-cutting</code> functionalities are implemented separately and executed at runtime as combine automatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Jdbc in Spring]]></title>
    <link href="http://stonefishy.github.io/blog/2015/05/05/how-to-use-jdbc-in-spring/"/>
    <updated>2015-05-05T16:31:53+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/05/05/how-to-use-jdbc-in-spring</id>
    <content type="html"><![CDATA[<p>As we know, we can use <code>jdbc</code> to access database in java programming. And now let us use <code>jdbc</code> in spring. The <code>spring framework</code> reduces developer handlers any accessing database exception, because it deal with them internally. The spring framework integrated the jdbctemplate, they are <code>org.springframework.jdbc.datasource.DriverManagerDataSource</code> and <code>org.springframework.jdbc.core.JdbcTemplate</code>.</p>

<p>And here we use the <code>hsqldb</code> to act as our memory database. You can go to <a href="http://hsqldb.org/">here</a> to look at it. we use the <code>Maven</code> tools to management our project. the dependencies is:</p>

<!-- more -->


<pre><code class="">&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;
            &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
            &lt;version&gt;1.8.0.10&lt;/version&gt;
        &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p>The spring configure file:</p>

<pre><code>&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
            "http://www.springframework.org/dtd/spring-beans-2.0.dtd"&gt;

&lt;beans&gt;

    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
        &lt;property name="driverClassName" value="org.hsqldb.jdbcDriver"/&gt;
        &lt;property name="url" value="jdbc:hsqldb:mem:MyDB"/&gt;
        &lt;property name="username" value="sa"/&gt;
        &lt;property name="password" value=""/&gt;
    &lt;/bean&gt;

    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
         &lt;constructor-arg&gt;
            &lt;ref bean="dataSource"/&gt;
         &lt;/constructor-arg&gt;    
    &lt;/bean&gt;

    &lt;bean id="createTable" class="java4s.SpringJdbcCreateTable"&gt;
        &lt;property name="jt"&gt;
            &lt;ref bean="jdbcTemplate"/&gt;
        &lt;/property&gt;
    &lt;/bean&gt;

&lt;/beans&gt;  
</code></pre>

<p>we have a SpringJdbcCreateTable class to accesss database, this class has <code>JdbcTemplate</code> property,</p>

<pre><code class="java">JdbcTemplate jt;

public void setJt(JdbcTemplate jt) {
    this.jt = jt;
}
</code></pre>

<p>we use spring bean to inject value to this property. And you will see it in above spring configure file.</p>

<p>create table, the <code>execute</code> method doesn&rsquo;t return value.</p>

<pre><code class="java ">public void createTable() {
    jt.execute("CREATE TABLE user(id int, name varchar(10), age int)");
    // execute() returns void
    System.out.println("table created");
}
</code></pre>

<p>insert data, using the <code>update</code> method to insert data, this method will return how many rows have been inserted.</p>

<pre><code class="java">public void insertData() {
    int k = jt.update("INSERT INTO user VALUES (99, 'user_99', 49)");
    showDatas();

    System.out.println(String.format("%s row inserted", k));
}
</code></pre>

<p>update data, using the <code>update</code> method to update data, it will return how many rows are affected.</p>

<pre><code class="java">public void updateData() {
    int k = jt.update("UPDATE user set name='user_new' where name='user_99'");
    showDatas();

    System.out.println(String.format("%s row updated", k));
}
</code></pre>

<p>delete data, also using the <code>update</code> method.</p>

<pre><code class="java">public void deleteData() {
    int k = jt.update("DELETE from user where name='user_new'");

    showDatas();
    System.out.println(String.format("%s row deleted", k));
}
</code></pre>

<p>query data, the jdbctemplate has many query interfaces. Here we use <code>queryForRowSet</code> method to get the data by condition.</p>

<pre><code class="java">
private void showDatas() {
    System.out.println("|  ID |  NAME    |  AGE  |");
    SqlRowSet rowSet = jt.queryForRowSet("SELECT * FROM user");

    while (rowSet.next()) {
        int id = rowSet.getInt(1);
        String name = rowSet.getString(2);
        int age = rowSet.getInt(3);

        String msg = String
                .format("|  %s  |  %s  |  %s   |", id, name, age);

        System.out.println(msg);
    }       
}
</code></pre>

<p>okay, to so far, let us call them in main entrance.</p>

<pre><code class="java">public static void main(String args[])
{
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext("spconfig.xml");
    SpringJdbcCreateTable st =(SpringJdbcCreateTable)applicationContext.getBean("createTable");

    st.createTable();
    st.initSomeDatas();
    st.insertData();
    st.updateData();
    st.deleteData();
}
</code></pre>

<p>Look, it&rsquo;s very easy to access database with spring framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guave - Immutable Collection]]></title>
    <link href="http://stonefishy.github.io/blog/2015/02/13/guave-immutable-collection/"/>
    <updated>2015-02-13T14:58:17+08:00</updated>
    <id>http://stonefishy.github.io/blog/2015/02/13/guave-immutable-collection</id>
    <content type="html"><![CDATA[<p><code>Immutable</code> that means it can not be changed. Let&rsquo;s get example to see what&rsquo;s different with <code>mutable</code> objects.</p>

<p>Normal mutable collections: <br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//define a mutable list</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mutableList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//modify the first item in the mutable list</span>
</span><span class='line'><span class="c1">//will print [aa, b, c]</span>
</span><span class='line'><span class="n">mutableList</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">aa</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mutableList</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<!-- more -->


<p>Immutable collections:
&#8220;` Java
//define a immutable list
private final ImmutableList<String> immutableList = ImmutableList.of(&ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;);</p>

<p>//can not modify the first item in the immutable list, any change item operation is unsuppproted.
//it will throw UnsupportedOperationException
immutableList.set(0, &ldquo;aa&rdquo;);
System.out.println(immutableList);
<code>``    
From above example, we can get the conclusion is that immutable collections doesn't support any changing content API. So it will throw</code>UnsupportedOperationException` when you try to modify it.</p>

<h3>What&rsquo;s advantage of Immutable Objects</h3>

<p>According to Guava Offical explain about <code>Immutable Objects</code>, there have four and more advantages of Immutable Objects:</p>

<ul>
<li>Safe for use by untrusted libraries.</li>
<li><code>Thread-Safe</code>: can be used by many threads with no risk of race conditions.</li>
<li>Doesn&rsquo;t need to support mutation, and can make time and space savings with that assumption. All immutable collection implementations are more memory-efficient than their mutable siblings.</li>
<li>Can be used as a constant, with the expectation that it will remain fixed.</li>
</ul>


<p>Making immutable copies of objects is a good defensive programming technique, and <code>Guava</code>provides it.</p>

<blockquote><p><em>Note:</em> Each of the <code>Guava</code> immutable collection implementations reject <em>null</em> values.</p></blockquote>

<h3>How create it</h3>

<p>An ImmutableXXX collection can be created in several ways:</p>

<ul>
<li>Using the <code>copyOf</code> method, like <code>ImmutableList.copyOf(collection)</code>:</li>
</ul>


<pre><code class="Java">ImmutableList&lt;String&gt; result = ImmutableList.copyOf(mutableList);
</code></pre>

<ul>
<li>Using the <code>of</code> method, like <code>ImmutableList.of("a", "b", "c")</code> or <code>ImmutableMap.of("a", 1, "b", 2)</code></li>
</ul>


<pre><code class="Java">ImmutableList&lt;String&gt; result = ImmutableList.of("a", "b", "c");
</code></pre>

<ul>
<li>Using a <code>Builder</code>, for example:</li>
</ul>


<pre><code class="Java">ImmutableList&lt;String&gt; result = ImmutableList.&lt;String&gt;builder()
                                    .addAll(mutableList)
                                    .build();
</code></pre>

<p>All immutable collections provide an ImmutableList view via <code>asList()</code>, so &ndash; for example &ndash; even if you have data stored as an ImmutableSortedSet, you can get the kth smallest element with <code>sortedSet.asList().get(k)</code>.
<code>Java
//get second item. print b
System.out.println(immutableList.asList().get(1));
</code></p>
]]></content>
  </entry>
  
</feed>
