<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Stonefishy Blog]]></title>
  <link href="http://stonefishy.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://stonefishy.github.io/"/>
  <updated>2014-11-25T23:15:15+08:00</updated>
  <id>http://stonefishy.github.io/</id>
  <author>
    <name><![CDATA[Yu SHI]]></name>
    <email><![CDATA[andrewsy@live.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guava -- Optional]]></title>
    <link href="http://stonefishy.github.io/blog/2014/11/21/guava-optional/"/>
    <updated>2014-11-21T00:00:00+08:00</updated>
    <id>http://stonefishy.github.io/blog/2014/11/21/guava-optional</id>
    <content type="html"><![CDATA[<p><code>Optional&lt;T&gt;</code> is a way of replacing a nullable T reference with a non-null value. An Optional may either contain a non-null T reference (in which case we say the reference is &ldquo;present&rdquo;), or it may contain nothing (in which case we say the reference is &ldquo;absent&rdquo;). It is never said to &ldquo;contain null.&rdquo;</p>

<!--more-->


<h3>Usage</h3>

<p><code>Optional.of(T)</code>    <br/>
Make an Optional containing the given non-null value, or fail fast on null.</p>

<p><code>Optional.absent()</code> <br/>
Return an absent Optional of some type.</p>

<p><code>Optional.fromNullable(T)</code> <br/>
Turn the given possibly-null reference into an Optional, treating non-null as present and null as absent.</p>

<p><code>boolean isPresent()</code>    <br/>
Returns true if this Optional contains a non-null instance.</p>

<p><code>T get()</code> <br/>
Returns the contained T instance, which must be present; otherwise, throws an IllegalStateException.</p>

<p><code>T or()</code> <br/>
Returns the present value in this Optional, or if there is none, returns the specified default.</p>

<p><code>T orNull()</code> <br/>
Returns the present value in this Optional, or if there is none, returns null. The inverse operation of fromNullable.</p>

<h3>Example:</h3>

<pre><code class="java   ">Optional&lt;Integer&gt; numberOptional = Optional.of(100);
numberOptional.isPresent(); //return true
numberOptional.get(); //return 100

numberOptional = Optional.absent();
numberOptional.isPresent(); // return false
numberOptional.or(0); //return 0;
numberOptional.orNull(); //return null;

numberOptional = Optional.fromNullable(1);
numberOptional.get(); //return 1;

numberOptional = Optional.fromNullable(null);
numberOptional.isPresent(); //return false;
numberOptional.orNull(); //return null;
</code></pre>
]]></content>
  </entry>
  
</feed>
